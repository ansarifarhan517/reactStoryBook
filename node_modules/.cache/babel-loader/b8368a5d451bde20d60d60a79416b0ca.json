{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/utilities/components/ThemeWrapper.tsx\";\n\nimport React from 'react';\nimport { ThemeProvider } from 'styled-components';\nimport { getDefaultTheme } from '../theme';\nimport { withGlobalStyled } from './GlobalStyled'; // import useHoverTooltip from './useHoverTooltip'\n\nimport withPopup from './withPopup';\nimport { withToastProvider } from '../../components/molecules/Toast/';\nimport '../../assets/font-icons/styles.css'; // marker clusterer css\n\nimport 'react-leaflet-markercluster/dist/styles.min.css';\n\nvar ThemeWrapper = function ThemeWrapper(_ref) {\n  var children = _ref.children,\n      _ref$theme = _ref.theme,\n      theme = _ref$theme === void 0 ? getDefaultTheme() : _ref$theme;\n\n  // useHoverTooltip()\n  var WrapperComponent = function WrapperComponent(_ref2) {\n    var children = _ref2.children;\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 5\n      }\n    }, children);\n  };\n\n  var ConfigComponent = withToastProvider(withGlobalStyled(withPopup(WrapperComponent)));\n  return /*#__PURE__*/React.createElement(ThemeProvider, {\n    theme: theme,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ConfigComponent, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }\n  }, children));\n};\n\nThemeWrapper.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"ThemeWrapper\",\n  \"props\": {\n    \"theme\": {\n      \"defaultValue\": {\n        \"value\": \"getDefaultTheme()\",\n        \"computed\": true\n      },\n      \"required\": false,\n      \"tsType\": {\n        \"name\": \"any\"\n      },\n      \"description\": \"\"\n    }\n  }\n};\nexport default ThemeWrapper;\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src/utilities/components/ThemeWrapper.tsx\"] = {\n    name: \"ThemeWrapper\",\n    docgenInfo: ThemeWrapper.__docgenInfo,\n    path: \"src/utilities/components/ThemeWrapper.tsx\"\n  };\n}","map":{"version":3,"sources":["/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/utilities/components/ThemeWrapper.tsx"],"names":["React","ThemeProvider","getDefaultTheme","withGlobalStyled","withPopup","withToastProvider","ThemeWrapper","children","theme","WrapperComponent","ConfigComponent"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,aAAT,QAA8B,mBAA9B;AACA,SAASC,eAAT,QAAgC,UAAhC;AACA,SAASC,gBAAT,QAAiC,gBAAjC,C,CACA;;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,SAASC,iBAAT,QAAkC,mCAAlC;AACA,OAAO,oCAAP,C,CACA;;AACA,OAAO,iDAAP;;AAOA,IAAMC,YAAY,GAAG,SAAfA,YAAe,OAGK;AAAA,MAFxBC,QAEwB,QAFxBA,QAEwB;AAAA,wBADxBC,KACwB;AAAA,MADxBA,KACwB,2BADhBN,eAAe,EACC;;AACxB;AAEA,MAAMO,gBAAgB,GAAG,SAAnBA,gBAAmB;AAAA,QACvBF,QADuB,SACvBA,QADuB;AAAA,wBAGvB,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAiBA,QAAjB,CAHuB;AAAA,GAAzB;;AAKA,MAAMG,eAAe,GAAGL,iBAAiB,CACvCF,gBAAgB,CAACC,SAAS,CAACK,gBAAD,CAAV,CADuB,CAAzC;AAIA,sBACE,oBAAC,aAAD;AAAe,IAAA,KAAK,EAAED,KAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAkBD,QAAlB,CADF,CADF;AAKD,CApBD;;;;;;;;;;;;;;;;;;;;AAsBA,eAAeD,YAAf","sourcesContent":["import React from 'react'\n\nimport { ThemeProvider } from 'styled-components'\nimport { getDefaultTheme } from '../theme'\nimport { withGlobalStyled } from './GlobalStyled'\n// import useHoverTooltip from './useHoverTooltip'\nimport withPopup from './withPopup'\nimport { withToastProvider } from '../../components/molecules/Toast/'\nimport '../../assets/font-icons/styles.css'\n// marker clusterer css\nimport 'react-leaflet-markercluster/dist/styles.min.css'\n\nexport interface IThemeWrapperProps\n  extends React.HTMLAttributes<HTMLDivElement> {\n  theme?: any\n}\n\nconst ThemeWrapper = ({\n  children,\n  theme = getDefaultTheme()\n}: IThemeWrapperProps) => {\n  // useHoverTooltip()\n\n  const WrapperComponent = ({\n    children\n  }: React.HTMLAttributes<HTMLDivElement>) => (\n    <React.Fragment>{children}</React.Fragment>\n  )\n  const ConfigComponent = withToastProvider(\n    withGlobalStyled(withPopup(WrapperComponent))\n  )\n\n  return (\n    <ThemeProvider theme={theme}>\n      <ConfigComponent>{children}</ConfigComponent>\n    </ThemeProvider>\n  )\n}\n\nexport default ThemeWrapper\n"]},"metadata":{},"sourceType":"module"}