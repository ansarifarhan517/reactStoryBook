{"ast":null,"code":"import _slicedToArray from \"/Users/farhanansari/Code/ui-library/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"/Users/farhanansari/Code/ui-library/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _taggedTemplateLiteral from \"/Users/farhanansari/Code/ui-library/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/farhanansari/Code/ui-library/src/components/molecules/NumberInput/index.tsx\";\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n      min-width: 100px;\\n      width: 100%;\\n      border: none;\\n      border-bottom: \", \";\\n      background: \", \";\\n      min-height: 25px;\\n      padding: 0 5px;\\n      margin: 0px;\\n\\n      &::placeholder {\\n        color: \", \";\\n      }\\n    \"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  \", \"\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useEffect, useState } from 'react';\nimport InputField from '../../atoms/InputField';\nimport ErrorTooltip from '../ErrorTooltip';\nimport InputLabel from '../InputLabel';\nimport Position from '../Position';\nimport styled, { css } from 'styled-components';\nexport var getRoundedDigit = function getRoundedDigit(num, roundingOffDigit) {\n  return +(Math.round(+(num + 'e+' + roundingOffDigit)) + 'e-' + roundingOffDigit);\n};\nexport var InlineEditStyled = styled(InputField)(_templateObject(), function (_ref) {\n  var variant = _ref.variant,\n      error = _ref.error;\n  return variant === 'inline-edit' && css(_templateObject2(), function (_ref2) {\n    var _theme$colors, _theme$colors$error, _theme$colors2, _theme$colors2$primar;\n\n    var theme = _ref2.theme;\n    return error ? \"1px solid \".concat(theme === null || theme === void 0 ? void 0 : (_theme$colors = theme.colors) === null || _theme$colors === void 0 ? void 0 : (_theme$colors$error = _theme$colors.error) === null || _theme$colors$error === void 0 ? void 0 : _theme$colors$error.dark) : \"1px solid \".concat(theme === null || theme === void 0 ? void 0 : (_theme$colors2 = theme.colors) === null || _theme$colors2 === void 0 ? void 0 : (_theme$colors2$primar = _theme$colors2.primary) === null || _theme$colors2$primar === void 0 ? void 0 : _theme$colors2$primar.main);\n  }, function (_ref3) {\n    var _theme$colors3, _theme$colors3$error, _theme$colors4;\n\n    var theme = _ref3.theme;\n    return error ? \"\".concat(theme === null || theme === void 0 ? void 0 : (_theme$colors3 = theme.colors) === null || _theme$colors3 === void 0 ? void 0 : (_theme$colors3$error = _theme$colors3.error) === null || _theme$colors3$error === void 0 ? void 0 : _theme$colors3$error.transparentLight) : \"\".concat(theme === null || theme === void 0 ? void 0 : (_theme$colors4 = theme.colors) === null || _theme$colors4 === void 0 ? void 0 : _theme$colors4.white);\n  }, function (_ref4) {\n    var _theme$colors5;\n\n    var theme = _ref4.theme;\n    return \"\".concat(theme === null || theme === void 0 ? void 0 : (_theme$colors5 = theme.colors) === null || _theme$colors5 === void 0 ? void 0 : _theme$colors5.grey['50']);\n  });\n});\nvar NumberInputStyled = styled(InlineEditStyled)(_templateObject3());\nvar NumberInput = React.forwardRef(function (_ref5, ref) {\n  var label = _ref5.label,\n      labelColor = _ref5.labelColor,\n      required = _ref5.required,\n      id = _ref5.id,\n      className = _ref5.className,\n      error = _ref5.error,\n      errorMessage = _ref5.errorMessage,\n      initialValue = _ref5.initialValue,\n      onChange = _ref5.onChange,\n      _ref5$allowDecimal = _ref5.allowDecimal,\n      allowDecimal = _ref5$allowDecimal === void 0 ? false : _ref5$allowDecimal,\n      _ref5$variant = _ref5.variant,\n      variant = _ref5$variant === void 0 ? 'basic' : _ref5$variant,\n      _ref5$floatRegExp = _ref5.floatRegExp,\n      floatRegExp = _ref5$floatRegExp === void 0 ? '[^0-9.]' : _ref5$floatRegExp,\n      _ref5$roundingoffDigi = _ref5.roundingoffDigit,\n      roundingoffDigit = _ref5$roundingoffDigi === void 0 ? 0 : _ref5$roundingoffDigi,\n      rest = _objectWithoutProperties(_ref5, [\"label\", \"labelColor\", \"required\", \"id\", \"className\", \"error\", \"errorMessage\", \"initialValue\", \"onChange\", \"allowDecimal\", \"variant\", \"floatRegExp\", \"roundingoffDigit\"]);\n\n  var _useState = useState(initialValue),\n      _useState2 = _slicedToArray(_useState, 2),\n      value = _useState2[0],\n      setValue = _useState2[1]; // Set initial value\n\n\n  useEffect(function () {\n    setValue(initialValue || rest.value);\n  }, [initialValue, rest.value]);\n\n  var onChangeHandler = function onChangeHandler(event) {\n    var target = event.target;\n    var value = target.value;\n    var formmattedString = value === null || value === void 0 ? void 0 : value.replace(\"/\".concat(floatRegExp, \"/g\"), ''); // if decimal allowed then just format string to prevent alphabate\n\n    var finalString = formmattedString;\n\n    if (!allowDecimal) {\n      var newValue = value.replace(/,/g, '').trim(); // if number than can be parse and extract number out of it,not working if value comes \"1.\", that is handled in above line\n\n      var parsedValue = parseFloat(newValue); // if sring starts with alphabet then it will give NaN, in such case extract number out of string\n\n      if (Number.isNaN(parsedValue)) {\n        var parsedString = parseInt(newValue === null || newValue === void 0 ? void 0 : newValue.replace(\"/\".concat(floatRegExp, \"/g\"), ''), 10); // if value is blank string, it will again give Nan\n\n        if (Number.isNaN(parsedString)) {\n          finalString = '';\n        } else {\n          finalString = JSON.stringify(parsedString);\n        }\n      } else {\n        finalString = JSON.stringify(parsedValue);\n      }\n    }\n\n    if (roundingoffDigit !== 0 && allowDecimal && finalString.indexOf('.') !== finalString.length - 1) {\n      finalString = getRoundedDigit(Number(finalString), roundingoffDigit);\n    }\n\n    setValue(finalString);\n    onChange && onChange(finalString);\n  };\n\n  return /*#__PURE__*/React.createElement(Position, {\n    type: \"relative\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(NumberInputStyled, Object.assign({}, rest, {\n    type: \"tel\",\n    ref: ref,\n    id: \"\".concat(id, \"-input\"),\n    className: \"\".concat(className, \"-input\"),\n    error: error,\n    value: value,\n    variant: variant,\n    onChange: onChangeHandler,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 9\n    }\n  })), variant === 'basic' && /*#__PURE__*/React.createElement(Position, {\n    type: \"absolute\",\n    top: \"10px\",\n    left: \"10px\",\n    style: {\n      maxWidth: 'calc(100% - 20px)'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    required: required,\n    color: labelColor,\n    id: \"\".concat(id, \"-label\"),\n    className: \"\".concat(className, \"-label\"),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 13\n    }\n  }, label)), variant === 'basic' && error && errorMessage && /*#__PURE__*/React.createElement(Position, {\n    type: \"absolute\",\n    top: \"7.5px\",\n    right: \"-6.5px\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(ErrorTooltip, {\n    message: errorMessage,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 13\n    }\n  })));\n});\nexport default NumberInput;","map":{"version":3,"sources":["/Users/farhanansari/Code/ui-library/src/components/molecules/NumberInput/index.tsx"],"names":["React","useEffect","useState","InputField","ErrorTooltip","InputLabel","Position","styled","css","getRoundedDigit","num","roundingOffDigit","Math","round","InlineEditStyled","variant","error","theme","colors","dark","primary","main","transparentLight","white","grey","NumberInputStyled","NumberInput","forwardRef","ref","label","labelColor","required","id","className","errorMessage","initialValue","onChange","allowDecimal","floatRegExp","roundingoffDigit","rest","value","setValue","onChangeHandler","event","target","formmattedString","replace","finalString","newValue","trim","parsedValue","parseFloat","Number","isNaN","parsedString","parseInt","JSON","stringify","indexOf","length","maxWidth"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport InputField, { IInputFieldProps } from '../../atoms/InputField'\nimport ErrorTooltip from '../ErrorTooltip'\nimport InputLabel from '../InputLabel'\nimport Position from '../Position'\nimport styled, { css } from 'styled-components'\n\nexport interface INumberInputProps extends IInputFieldProps {\n  className?: string\n  name?: string\n  label?: string\n  labelColor?: string\n  error?: boolean\n  errorMessage?: string\n  value?: string | number | string[] | undefined\n  initialValue?: string | number | string[] | undefined\n  onChange?: (value: any) => any\n  allowDecimal?: boolean\n  variant?: 'basic' | 'inline-edit'\n  floatRegExp?: string\n  roundingoffDigit?: number\n}\nexport const getRoundedDigit = (num: number, roundingOffDigit: number) => {\n  return +(\n    Math.round(+(num + 'e+' + roundingOffDigit)) +\n    'e-' +\n    roundingOffDigit\n  )\n}\n\nexport const InlineEditStyled = styled(InputField)<INumberInputProps>`\n  ${({ variant, error }) =>\n    variant === 'inline-edit' &&\n    css`\n      min-width: 100px;\n      width: 100%;\n      border: none;\n      border-bottom: ${({ theme }) =>\n        error\n          ? `1px solid ${theme?.colors?.error?.dark}`\n          : `1px solid ${theme?.colors?.primary?.main}`};\n      background: ${({ theme }) =>\n        error\n          ? `${theme?.colors?.error?.transparentLight}`\n          : `${theme?.colors?.white}`};\n      min-height: 25px;\n      padding: 0 5px;\n      margin: 0px;\n\n      &::placeholder {\n        color: ${({ theme }) => `${theme?.colors?.grey['50']}`};\n      }\n    `}\n`\n\nconst NumberInputStyled = styled(InlineEditStyled)<INumberInputProps>``\n\nconst NumberInput = React.forwardRef<HTMLInputElement, INumberInputProps>(\n  (\n    {\n      label,\n      labelColor,\n      required,\n      id,\n      className,\n      error,\n      errorMessage,\n      initialValue,\n      onChange,\n      allowDecimal = false,\n      variant = 'basic',\n      floatRegExp = '[^0-9.]',\n      roundingoffDigit = 0,\n      ...rest\n    }: INumberInputProps,\n    ref\n  ) => {\n    const [value, setValue] = useState<string | number | string[] | undefined>(\n      initialValue\n    )\n    // Set initial value\n    useEffect(() => {\n      setValue(initialValue || rest.value)\n    }, [initialValue, rest.value])\n\n    const onChangeHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\n      const target = event.target as HTMLInputElement\n      const value = target.value\n      const formmattedString = value?.replace(`/${floatRegExp}/g`, '')\n      // if decimal allowed then just format string to prevent alphabate\n      let finalString: string | number = formmattedString\n\n      if (!allowDecimal) {\n        const newValue = value.replace(/,/g, '').trim()\n        // if number than can be parse and extract number out of it,not working if value comes \"1.\", that is handled in above line\n        const parsedValue = parseFloat(newValue)\n        // if sring starts with alphabet then it will give NaN, in such case extract number out of string\n        if (Number.isNaN(parsedValue)) {\n          const parsedString = parseInt(\n            newValue?.replace(`/${floatRegExp}/g`, ''),\n            10\n          )\n          // if value is blank string, it will again give Nan\n          if (Number.isNaN(parsedString)) {\n            finalString = ''\n          } else {\n            finalString = JSON.stringify(parsedString)\n          }\n        } else {\n          finalString = JSON.stringify(parsedValue)\n        }\n      }\n      if (\n        roundingoffDigit !== 0 &&\n        allowDecimal &&\n        finalString.indexOf('.') !== finalString.length - 1\n      ) {\n        finalString = getRoundedDigit(Number(finalString), roundingoffDigit)\n      }\n      setValue(finalString)\n      onChange && onChange(finalString)\n    }\n    return (\n      <Position type='relative'>\n        <NumberInputStyled\n          {...rest}\n          type='tel'\n          ref={ref}\n          id={`${id}-input`}\n          className={`${className}-input`}\n          error={error}\n          value={value}\n          variant={variant}\n          onChange={onChangeHandler}\n        />\n        {variant === 'basic' && (\n          <Position\n            type='absolute'\n            top='10px'\n            left='10px'\n            style={{ maxWidth: 'calc(100% - 20px)' }}\n          >\n            <InputLabel\n              required={required}\n              color={labelColor}\n              id={`${id}-label`}\n              className={`${className}-label`}\n            >\n              {label}\n            </InputLabel>\n          </Position>\n        )}\n        {variant === 'basic' && error && errorMessage && (\n          <Position type='absolute' top='7.5px' right='-6.5px'>\n            <ErrorTooltip message={errorMessage} />\n          </Position>\n        )}\n      </Position>\n    )\n  }\n)\n\nexport default NumberInput\n"]},"metadata":{},"sourceType":"module"}