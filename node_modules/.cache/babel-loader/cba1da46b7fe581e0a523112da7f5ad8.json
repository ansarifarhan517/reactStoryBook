{"ast":null,"code":"var TitleTooltip = function TitleTooltip() {\n  var delta = 5;\n  var toTitle = document.querySelectorAll('[title]');\n  var span = document.createElement('span');\n  span.classList.add('createdTooltip');\n  var parent;\n  var textProp = 'textContent' in document ? 'textContent' : 'innerText';\n  var spanClone;\n  [].forEach.call(toTitle, function (elem) {\n    /* reference to the element's parentNode: */\n    parent = elem.parentElement;\n    /* cloning the span, to avoid creating multiple elements: */\n\n    spanClone = span.cloneNode();\n    /* setting the text of the cloned span to the text of the attribute from which the text should be taken: */\n\n    spanClone[textProp] = elem.getAttribute('title');\n    /* inserting the created/cloned span into the document, after the element: */\n\n    parent && parent.insertBefore(spanClone, elem.nextSibling);\n    /* binding the reposition function to the mousemove. event: */\n\n    elem.addEventListener('mousemove', reposition);\n    /* we're setting 'title' attribute to an empty string so that css apply */\n\n    elem.setAttribute('title', '');\n  });\n\n  function reposition(e) {\n    var tooltip = this.nextElementSibling;\n    tooltip.style.top = e.pageY + delta + 'px';\n    tooltip.style.left = e.pageX + delta + 'px';\n  }\n};\n\nexport default TitleTooltip;","map":{"version":3,"sources":["/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/molecules/Tooltip/TooltipWithTitleAttribute.tsx"],"names":["TitleTooltip","delta","toTitle","document","querySelectorAll","span","createElement","classList","add","parent","textProp","spanClone","forEach","call","elem","parentElement","cloneNode","getAttribute","insertBefore","nextSibling","addEventListener","reposition","setAttribute","e","tooltip","nextElementSibling","style","top","pageY","left","pageX"],"mappings":"AAAA,IAAMA,YAAY,GAAG,SAAfA,YAAe,GAAM;AACzB,MAAMC,KAAK,GAAG,CAAd;AACA,MAAMC,OAAO,GAAGC,QAAQ,CAACC,gBAAT,CAA0B,SAA1B,CAAhB;AAEA,MAAMC,IAAI,GAAGF,QAAQ,CAACG,aAAT,CAAuB,MAAvB,CAAb;AACAD,EAAAA,IAAI,CAACE,SAAL,CAAeC,GAAf,CAAmB,gBAAnB;AACA,MAAIC,MAAJ;AAEA,MAAMC,QAAQ,GAAG,iBAAiBP,QAAjB,GAA4B,aAA5B,GAA4C,WAA7D;AACA,MAAIQ,SAAJ;AACC,KAAGC,OAAH,CAAWC,IAAX,CAAgBX,OAAhB,EAAyB,UAACY,IAAD,EAAuB;AAC/C;AACAL,IAAAA,MAAM,GAAGK,IAAI,CAACC,aAAd;AAEA;;AACAJ,IAAAA,SAAS,GAAGN,IAAI,CAACW,SAAL,EAAZ;AAEA;;AACAL,IAAAA,SAAS,CAACD,QAAD,CAAT,GAAsBI,IAAI,CAACG,YAAL,CAAkB,OAAlB,CAAtB;AAEA;;AACAR,IAAAA,MAAM,IAAIA,MAAM,CAACS,YAAP,CAAoBP,SAApB,EAA+BG,IAAI,CAACK,WAApC,CAAV;AAEA;;AACAL,IAAAA,IAAI,CAACM,gBAAL,CAAsB,WAAtB,EAAmCC,UAAnC;AAEA;;AACAP,IAAAA,IAAI,CAACQ,YAAL,CAAkB,OAAlB,EAA2B,EAA3B;AACD,GAlBA;;AAoBD,WAASD,UAAT,CAAuCE,CAAvC,EAAsD;AACpD,QAAMC,OAAoB,GAAG,KAAKC,kBAAlC;AACAD,IAAAA,OAAO,CAACE,KAAR,CAAcC,GAAd,GAAoBJ,CAAC,CAACK,KAAF,GAAU3B,KAAV,GAAkB,IAAtC;AACAuB,IAAAA,OAAO,CAACE,KAAR,CAAcG,IAAd,GAAqBN,CAAC,CAACO,KAAF,GAAU7B,KAAV,GAAkB,IAAvC;AACD;AACF,CAnCD;;AAoCA,eAAeD,YAAf","sourcesContent":["const TitleTooltip = () => {\n  const delta = 5\n  const toTitle = document.querySelectorAll('[title]')\n\n  const span = document.createElement('span')\n  span.classList.add('createdTooltip')\n  let parent: HTMLElement | null\n\n  const textProp = 'textContent' in document ? 'textContent' : 'innerText'\n  let spanClone\n  ;[].forEach.call(toTitle, (elem: HTMLElement) => {\n    /* reference to the element's parentNode: */\n    parent = elem.parentElement\n\n    /* cloning the span, to avoid creating multiple elements: */\n    spanClone = span.cloneNode()\n\n    /* setting the text of the cloned span to the text of the attribute from which the text should be taken: */\n    spanClone[textProp] = elem.getAttribute('title')\n\n    /* inserting the created/cloned span into the document, after the element: */\n    parent && parent.insertBefore(spanClone, elem.nextSibling)\n\n    /* binding the reposition function to the mousemove. event: */\n    elem.addEventListener('mousemove', reposition)\n\n    /* we're setting 'title' attribute to an empty string so that css apply */\n    elem.setAttribute('title', '')\n  })\n\n  function reposition(this: HTMLElement, e: MouseEvent) {\n    const tooltip: HTMLElement = this.nextElementSibling as HTMLElement\n    tooltip.style.top = e.pageY + delta + 'px'\n    tooltip.style.left = e.pageX + delta + 'px'\n  }\n}\nexport default TitleTooltip\n"]},"metadata":{},"sourceType":"module"}