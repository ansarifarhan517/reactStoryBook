{"ast":null,"code":"import _defineProperty from \"/Users/farhanansari/Code/ui-library/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nvar _parameters;\n\n/* eslint-disable */\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource; // @ts-ignore\n\n\nvar addSourceDecorator = require(\"@storybook/source-loader/preview\").addSource; // @ts-ignore\n\n\nvar __SOURCE_PREFIX__ = \"/Users/farhanansari/Code/ui-library/src/components/atoms/Map\"; // @ts-ignore\n\nvar __STORY__ = \"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/farhanansari/Code/ui-library/src/components/atoms/Map\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"\\\\n\\\\n// @ts-nocheck\\\\n// @ts-ignore\\\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\\\n// @ts-ignore\\\\nvar addSourceDecorator = require(\\\\\\\"@storybook/source-loader/preview\\\\\\\").addSource;\\\\n// @ts-ignore\\\\nvar __SOURCE_PREFIX__ = \\\\\\\"/Users/farhanansari/Code/ui-library/src/components/atoms/Map\\\\\\\";\\\\n// @ts-ignore\\\\nvar __STORY__ = \\\\\\\"import { action } from '@storybook/addon-actions'\\\\\\\\nimport {\\\\\\\\n  boolean,\\\\\\\\n  object,\\\\\\\\n  select,\\\\\\\\n  text,\\\\\\\\n  withKnobs\\\\\\\\n} from '@storybook/addon-knobs'\\\\\\\\nimport React from 'react'\\\\\\\\nimport LeafletMap from '.'\\\\\\\\nimport { path } from '..'\\\\\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\\\\\nimport Settings from '../../atoms/SettingBox/data'\\\\\\\\nimport { ButtonList } from '../../molecules/ShowHideColumnPopup'\\\\\\\\nimport { tVariant } from '../Button'\\\\\\\\nimport { IOption } from '../SettingBox/interface'\\\\\\\\nimport {\\\\\\\\n  GOOGLE_API_KEY,\\\\\\\\n  HERE_MAPS_API_KEY\\\\\\\\n} from './constants/googleIntegration.constants'\\\\\\\\nimport circleSampleData from './dummyData/CircleSampleData.SampleData'\\\\\\\\nimport infowindowStructure from './dummyData/Infowindow.structure.sampleData'\\\\\\\\nimport markerIcons from './dummyData/MarkerIcon.sampleData'\\\\\\\\nimport markerLayerObj from './dummyData/Markers.sampleData'\\\\\\\\nimport polyGeoFenceSampleData from './dummyData/PolyGeoFence.SampleData'\\\\\\\\nimport sampleTrackingData from './dummyData/Presentation.Tracking.sampleData'\\\\\\\\nimport sampleTripData from './dummyData/Presentation.Trips.sampleData'\\\\\\\\nimport { updateSettingsWithLegends } from './helperMethods'\\\\\\\\nimport EditPopUp from './SubComponent/EditPopUp'\\\\\\\\nimport { tTheme, tTiles } from './types.d'\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/Map`,\\\\\\\\n  decorators: [withKnobs],\\\\\\\\n  component: LeafletMap\\\\\\\\n}\\\\\\\\n\\\\\\\\n// The options which will be visible for tile-layer select in the story\\\\\\\\nconst tileOptions = {\\\\\\\\n  'open-street-maps': 'osm',\\\\\\\\n  'google-satellite': 'google_satellite',\\\\\\\\n  'google-basic': 'google_roadmap',\\\\\\\\n  'google-terrain': 'google_terrain',\\\\\\\\n  'google-hybrid': 'google_hybrid'\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst themeOptions = {\\\\\\\\n  light: 'light',\\\\\\\\n  dark: 'dark'\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const BaseMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[51.0, 19.0]}\\\\\\\\n        latLngBounds={[[37.09024, -95.712891]]}\\\\\\\\n        // zoom={number('Zoom', 4, { min: 1, max: 24 })}\\\\\\\\n        zoomControl={boolean('Zoom Controls', true)}\\\\\\\\n        locationSearch={boolean('Location Search Bar', true)}\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        heremapsApiKey={HERE_MAPS_API_KEY}\\\\\\\\n        height={text('Height', '300px')}\\\\\\\\n        width={text('Width', '800px')}\\\\\\\\n        tiles={\\\\\\\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\\\\\\\n        }\\\\\\\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\\\\\\\n        poi={boolean('Points of interest', false)}\\\\\\\\n        settingConfig={settingConfig}\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n        rulerControl={boolean('rulerControl', true)}\\\\\\\\n        iconsRef={markerIcons}\\\\\\\\n        // center={array('center', ['37.7749', '-122.4194'])}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const MarkerMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n\\\\\\\\n  // set permission true of markers if sending data,same like heatmap\\\\\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\\\\\n    option.permission = option.name === 'Markers'\\\\\\\\n    option.selected = option.name === 'Markers'\\\\\\\\n  })\\\\\\\\n  settingConfig['Map Mode'].permission = true\\\\\\\\n\\\\\\\\n  // create legend on the basis of markers data\\\\\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[37.09024, -95.712891]}\\\\\\\\n        latLngBounds={[[37.09024, -95.712891]]}\\\\\\\\n        // zoom={4}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='800px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\\\\\n        focusMarkerId={text('Marker Id to focus/open', '')}\\\\\\\\n        iconsRef={markerIcons}\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        settingConfig={settingConfig}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const HeatMapAndMarker = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // set permission true of heatmap if sending data,same like marker\\\\\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\\\\\n    option.permission = true // true for both option\\\\\\\\n    option.selected = option.name === 'Markers' // markers selected first\\\\\\\\n  })\\\\\\\\n  settingConfig['Map Mode'].permission = true\\\\\\\\n  // create legend on the basis of markers data\\\\\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[51.0, 19.0]}\\\\\\\\n        // zoom={4}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='800px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        heatmap={object('Heatmap configuration', {\\\\\\\\n          permission: false,\\\\\\\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\\\\\\\n        })}\\\\\\\\n        settingConfig={settingConfig}\\\\\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\\\\\n        iconsRef={markerIcons}\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const HeatMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // set permission true of heatmap if sending data,same like marker\\\\\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\\\\\n    option.permission = option.name === 'HeatMap'\\\\\\\\n    option.selected = option.name === 'HeatMap'\\\\\\\\n  })\\\\\\\\n  settingConfig['Map Mode'].permission = true\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[51.0, 19.0]}\\\\\\\\n        // zoom={4}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='300px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        heatmap={object('Heatmap configuration', {\\\\\\\\n          permission: true,\\\\\\\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\\\\\\\n        })}\\\\\\\\n        settingConfig={settingConfig}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const TripsMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // create legend on the basis of markers data\\\\\\\\n\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[51.0, 19.0]}\\\\\\\\n        zoom={4}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='300px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        trips={object('Trip Configuration', sampleTripData)}\\\\\\\\n        iconsRef={markerIcons}\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const TrackingMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[33.298959, -111.9724]}\\\\\\\\n        zoom={10}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='300px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        tracking={object('Tracking Configuration', sampleTrackingData)}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst GeocodingMapComponent = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n  // const [searchText, setSearchText] = React.useState(\\\\\\\\n  //   'Mumbai, Maharashtra, India'\\\\\\\\n  // )\\\\\\\\n  // const [position, setPosition] = React.useState([19.0759837, 72.8776559])\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <LeafletMap\\\\\\\\n      id='leafletBaseMap'\\\\\\\\n      classes='baseMap customBaseMap'\\\\\\\\n      googleApiKey={GOOGLE_API_KEY}\\\\\\\\n      settingConfig={settingConfig}\\\\\\\\n      center={[51.0, 19.0]}\\\\\\\\n      // markers={object('Marker Configuration', markerLayerObj)}\\\\\\\\n      iconsRef={markerIcons}\\\\\\\\n      zoomControl\\\\\\\\n      locationSearch\\\\\\\\n      sendLocationOutside={action('sendLocationOutside ')}\\\\\\\\n      isShowMapTileLayer={boolean('isShowMapTileLayer', false)}\\\\\\\\n      geocoding={{\\\\\\\\n        permission: true,\\\\\\\\n\\\\\\\\n        /** If you are passing searchText, ensure to pass the position prop as well. */\\\\\\\\n        searchText: text('searchText', 'Mumbai'),\\\\\\\\n        // searchTextInput: searchText,\\\\\\\\n        position: [19.0759837, 72.8776559],\\\\\\\\n        isSave: boolean('isSave', true),\\\\\\\\n        onGeocodingSave: (e: any) => {\\\\\\\\n          window.alert(\\\\\\\\n            'Geocodes Saved ' + e.position?.[0] + ', ' + e.position?.[1]\\\\\\\\n          )\\\\\\\\n        },\\\\\\\\n        onGeocodingDragEnd: (pos: [number, number]) => {\\\\\\\\n          action('On Geocoding Drag End')(pos)\\\\\\\\n          // setPosition(pos)\\\\\\\\n          // setSearchText('India')\\\\\\\\n        }\\\\\\\\n      }}\\\\\\\\n      showLegendWrapper={boolean('showLegendWrapper', false)}\\\\\\\\n    />\\\\\\\\n  )\\\\\\\\n}\\\\\\\\nexport const GeocodingMap = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <GeocodingMapComponent />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const PolygonMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n  // const [buttonType] = useState<string | null>(null)\\\\\\\\n  // console.log(buttonType)\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[20.5937, 78.9629]}\\\\\\\\n        zoom={4}\\\\\\\\n        zoomControl={boolean('Zoom Controls', true)}\\\\\\\\n        locationSearch={boolean('Location Search Bar', true)}\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height={text('Height', '300px')}\\\\\\\\n        width={text('Width', '800px')}\\\\\\\\n        tiles={\\\\\\\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\\\\\\\n        }\\\\\\\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\\\\\\\n        poi={boolean('Points of interest', false)}\\\\\\\\n        settingConfig={settingConfig}\\\\\\\\n        polygon={object('polygon', polyGeoFenceSampleData)}\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\\\\\\\n        editPopUpComponent={({ map }: any) => (\\\\\\\\n          <EditPopUp\\\\\\\\n            onClick={() => {\\\\\\\\n              map.closePopup()\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        )}\\\\\\\\n        onEdit={action('Value Edited with new Vertex')}\\\\\\\\n        popupCustomComponent={{\\\\\\\\n          tooltipButton: ({ selectedData }: any) => (\\\\\\\\n            <ButtonList\\\\\\\\n              listOfButtons={[\\\\\\\\n                {\\\\\\\\n                  variant: 'button' as tVariant,\\\\\\\\n                  children: 'Edit',\\\\\\\\n                  // intent: 'table' as tIntent,\\\\\\\\n                  iconVariant: 'edit',\\\\\\\\n                  primary: true,\\\\\\\\n                  onClick: () => console.log('Edit', selectedData)\\\\\\\\n                },\\\\\\\\n                {\\\\\\\\n                  variant: 'button' as tVariant,\\\\\\\\n                  children: 'Delete',\\\\\\\\n                  iconVariant: 'icomoon-close',\\\\\\\\n                  // intent: 'table' as tIntent,\\\\\\\\n                  onClick: () => console.log('delete', selectedData)\\\\\\\\n                }\\\\\\\\n              ]}\\\\\\\\n            />\\\\\\\\n          )\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const CircleMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n\\\\\\\\n  // create legend on the basis of markers data\\\\\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Route Mode')\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[20.5937, 78.9629]}\\\\\\\\n        zoom={4}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='300px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        settingConfig={settingConfig}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n        circle={object('circle', circleSampleData)}\\\\\\\\n        onEdit={action('Value Edited with new Vertex')}\\\\\\\\n        editPopUpComponent={({ map }: any) => (\\\\\\\\n          <EditPopUp\\\\\\\\n            onClick={() => {\\\\\\\\n              map.closePopup()\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        )}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\";\\\\n// @ts-ignore\\\\nvar __ADDS_MAP__ = {};\\\\n// @ts-ignore\\\\nvar __MAIN_FILE_LOCATION__ = \\\\\\\"/Map.stories.tsx\\\\\\\";\\\\n// @ts-ignore\\\\nvar __MODULE_DEPENDENCIES__ = [];\\\\n// @ts-ignore\\\\nvar __LOCAL_DEPENDENCIES__ = {};\\\\n// @ts-ignore\\\\nvar __IDS_TO_FRAMEWORKS__ = {};\\\\n        \\\\nimport { action } from '@storybook/addon-actions'\\\\nimport {\\\\n  boolean,\\\\n  object,\\\\n  select,\\\\n  text,\\\\n  withKnobs\\\\n} from '@storybook/addon-knobs'\\\\nimport React from 'react'\\\\nimport LeafletMap from '.'\\\\nimport { path } from '..'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport Settings from '../../atoms/SettingBox/data'\\\\nimport { ButtonList } from '../../molecules/ShowHideColumnPopup'\\\\nimport { tVariant } from '../Button'\\\\nimport { IOption } from '../SettingBox/interface'\\\\nimport {\\\\n  GOOGLE_API_KEY,\\\\n  HERE_MAPS_API_KEY\\\\n} from './constants/googleIntegration.constants'\\\\nimport circleSampleData from './dummyData/CircleSampleData.SampleData'\\\\nimport infowindowStructure from './dummyData/Infowindow.structure.sampleData'\\\\nimport markerIcons from './dummyData/MarkerIcon.sampleData'\\\\nimport markerLayerObj from './dummyData/Markers.sampleData'\\\\nimport polyGeoFenceSampleData from './dummyData/PolyGeoFence.SampleData'\\\\nimport sampleTrackingData from './dummyData/Presentation.Tracking.sampleData'\\\\nimport sampleTripData from './dummyData/Presentation.Trips.sampleData'\\\\nimport { updateSettingsWithLegends } from './helperMethods'\\\\nimport EditPopUp from './SubComponent/EditPopUp'\\\\nimport { tTheme, tTiles } from './types.d'\\\\n\\\\nexport default {parameters: {\\\\\\\"storySource\\\\\\\":{\\\\\\\"source\\\\\\\":\\\\\\\"import { action } from '@storybook/addon-actions'\\\\\\\\nimport {\\\\\\\\n  boolean,\\\\\\\\n  object,\\\\\\\\n  select,\\\\\\\\n  text,\\\\\\\\n  withKnobs\\\\\\\\n} from '@storybook/addon-knobs'\\\\\\\\nimport React from 'react'\\\\\\\\nimport LeafletMap from '.'\\\\\\\\nimport { path } from '..'\\\\\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\\\\\nimport Settings from '../../atoms/SettingBox/data'\\\\\\\\nimport { ButtonList } from '../../molecules/ShowHideColumnPopup'\\\\\\\\nimport { tVariant } from '../Button'\\\\\\\\nimport { IOption } from '../SettingBox/interface'\\\\\\\\nimport {\\\\\\\\n  GOOGLE_API_KEY,\\\\\\\\n  HERE_MAPS_API_KEY\\\\\\\\n} from './constants/googleIntegration.constants'\\\\\\\\nimport circleSampleData from './dummyData/CircleSampleData.SampleData'\\\\\\\\nimport infowindowStructure from './dummyData/Infowindow.structure.sampleData'\\\\\\\\nimport markerIcons from './dummyData/MarkerIcon.sampleData'\\\\\\\\nimport markerLayerObj from './dummyData/Markers.sampleData'\\\\\\\\nimport polyGeoFenceSampleData from './dummyData/PolyGeoFence.SampleData'\\\\\\\\nimport sampleTrackingData from './dummyData/Presentation.Tracking.sampleData'\\\\\\\\nimport sampleTripData from './dummyData/Presentation.Trips.sampleData'\\\\\\\\nimport { updateSettingsWithLegends } from './helperMethods'\\\\\\\\nimport EditPopUp from './SubComponent/EditPopUp'\\\\\\\\nimport { tTheme, tTiles } from './types.d'\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/Map`,\\\\\\\\n  decorators: [withKnobs],\\\\\\\\n  component: LeafletMap\\\\\\\\n}\\\\\\\\n\\\\\\\\n// The options which will be visible for tile-layer select in the story\\\\\\\\nconst tileOptions = {\\\\\\\\n  'open-street-maps': 'osm',\\\\\\\\n  'google-satellite': 'google_satellite',\\\\\\\\n  'google-basic': 'google_roadmap',\\\\\\\\n  'google-terrain': 'google_terrain',\\\\\\\\n  'google-hybrid': 'google_hybrid'\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst themeOptions = {\\\\\\\\n  light: 'light',\\\\\\\\n  dark: 'dark'\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const BaseMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[51.0, 19.0]}\\\\\\\\n        latLngBounds={[[37.09024, -95.712891]]}\\\\\\\\n        // zoom={number('Zoom', 4, { min: 1, max: 24 })}\\\\\\\\n        zoomControl={boolean('Zoom Controls', true)}\\\\\\\\n        locationSearch={boolean('Location Search Bar', true)}\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        heremapsApiKey={HERE_MAPS_API_KEY}\\\\\\\\n        height={text('Height', '300px')}\\\\\\\\n        width={text('Width', '800px')}\\\\\\\\n        tiles={\\\\\\\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\\\\\\\n        }\\\\\\\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\\\\\\\n        poi={boolean('Points of interest', false)}\\\\\\\\n        settingConfig={settingConfig}\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n        rulerControl={boolean('rulerControl', true)}\\\\\\\\n        iconsRef={markerIcons}\\\\\\\\n        // center={array('center', ['37.7749', '-122.4194'])}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const MarkerMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n\\\\\\\\n  // set permission true of markers if sending data,same like heatmap\\\\\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\\\\\n    option.permission = option.name === 'Markers'\\\\\\\\n    option.selected = option.name === 'Markers'\\\\\\\\n  })\\\\\\\\n  settingConfig['Map Mode'].permission = true\\\\\\\\n\\\\\\\\n  // create legend on the basis of markers data\\\\\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[37.09024, -95.712891]}\\\\\\\\n        latLngBounds={[[37.09024, -95.712891]]}\\\\\\\\n        // zoom={4}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='800px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\\\\\n        focusMarkerId={text('Marker Id to focus/open', '')}\\\\\\\\n        iconsRef={markerIcons}\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        settingConfig={settingConfig}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const HeatMapAndMarker = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // set permission true of heatmap if sending data,same like marker\\\\\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\\\\\n    option.permission = true // true for both option\\\\\\\\n    option.selected = option.name === 'Markers' // markers selected first\\\\\\\\n  })\\\\\\\\n  settingConfig['Map Mode'].permission = true\\\\\\\\n  // create legend on the basis of markers data\\\\\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[51.0, 19.0]}\\\\\\\\n        // zoom={4}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='800px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        heatmap={object('Heatmap configuration', {\\\\\\\\n          permission: false,\\\\\\\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\\\\\\\n        })}\\\\\\\\n        settingConfig={settingConfig}\\\\\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\\\\\n        iconsRef={markerIcons}\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const HeatMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // set permission true of heatmap if sending data,same like marker\\\\\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\\\\\n    option.permission = option.name === 'HeatMap'\\\\\\\\n    option.selected = option.name === 'HeatMap'\\\\\\\\n  })\\\\\\\\n  settingConfig['Map Mode'].permission = true\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[51.0, 19.0]}\\\\\\\\n        // zoom={4}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='300px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        heatmap={object('Heatmap configuration', {\\\\\\\\n          permission: true,\\\\\\\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\\\\\\\n        })}\\\\\\\\n        settingConfig={settingConfig}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const TripsMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // create legend on the basis of markers data\\\\\\\\n\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[51.0, 19.0]}\\\\\\\\n        zoom={4}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='300px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        trips={object('Trip Configuration', sampleTripData)}\\\\\\\\n        iconsRef={markerIcons}\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const TrackingMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[33.298959, -111.9724]}\\\\\\\\n        zoom={10}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='300px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        tracking={object('Tracking Configuration', sampleTrackingData)}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst GeocodingMapComponent = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n  // const [searchText, setSearchText] = React.useState(\\\\\\\\n  //   'Mumbai, Maharashtra, India'\\\\\\\\n  // )\\\\\\\\n  // const [position, setPosition] = React.useState([19.0759837, 72.8776559])\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <LeafletMap\\\\\\\\n      id='leafletBaseMap'\\\\\\\\n      classes='baseMap customBaseMap'\\\\\\\\n      googleApiKey={GOOGLE_API_KEY}\\\\\\\\n      settingConfig={settingConfig}\\\\\\\\n      center={[51.0, 19.0]}\\\\\\\\n      // markers={object('Marker Configuration', markerLayerObj)}\\\\\\\\n      iconsRef={markerIcons}\\\\\\\\n      zoomControl\\\\\\\\n      locationSearch\\\\\\\\n      sendLocationOutside={action('sendLocationOutside ')}\\\\\\\\n      isShowMapTileLayer={boolean('isShowMapTileLayer', false)}\\\\\\\\n      geocoding={{\\\\\\\\n        permission: true,\\\\\\\\n\\\\\\\\n        /** If you are passing searchText, ensure to pass the position prop as well. */\\\\\\\\n        searchText: text('searchText', 'Mumbai'),\\\\\\\\n        // searchTextInput: searchText,\\\\\\\\n        position: [19.0759837, 72.8776559],\\\\\\\\n        isSave: boolean('isSave', true),\\\\\\\\n        onGeocodingSave: (e: any) => {\\\\\\\\n          window.alert(\\\\\\\\n            'Geocodes Saved ' + e.position?.[0] + ', ' + e.position?.[1]\\\\\\\\n          )\\\\\\\\n        },\\\\\\\\n        onGeocodingDragEnd: (pos: [number, number]) => {\\\\\\\\n          action('On Geocoding Drag End')(pos)\\\\\\\\n          // setPosition(pos)\\\\\\\\n          // setSearchText('India')\\\\\\\\n        }\\\\\\\\n      }}\\\\\\\\n      showLegendWrapper={boolean('showLegendWrapper', false)}\\\\\\\\n    />\\\\\\\\n  )\\\\\\\\n}\\\\\\\\nexport const GeocodingMap = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <GeocodingMapComponent />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const PolygonMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n  // const [buttonType] = useState<string | null>(null)\\\\\\\\n  // console.log(buttonType)\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[20.5937, 78.9629]}\\\\\\\\n        zoom={4}\\\\\\\\n        zoomControl={boolean('Zoom Controls', true)}\\\\\\\\n        locationSearch={boolean('Location Search Bar', true)}\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height={text('Height', '300px')}\\\\\\\\n        width={text('Width', '800px')}\\\\\\\\n        tiles={\\\\\\\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\\\\\\\n        }\\\\\\\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\\\\\\\n        poi={boolean('Points of interest', false)}\\\\\\\\n        settingConfig={settingConfig}\\\\\\\\n        polygon={object('polygon', polyGeoFenceSampleData)}\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\\\\\\\n        editPopUpComponent={({ map }: any) => (\\\\\\\\n          <EditPopUp\\\\\\\\n            onClick={() => {\\\\\\\\n              map.closePopup()\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        )}\\\\\\\\n        onEdit={action('Value Edited with new Vertex')}\\\\\\\\n        popupCustomComponent={{\\\\\\\\n          tooltipButton: ({ selectedData }: any) => (\\\\\\\\n            <ButtonList\\\\\\\\n              listOfButtons={[\\\\\\\\n                {\\\\\\\\n                  variant: 'button' as tVariant,\\\\\\\\n                  children: 'Edit',\\\\\\\\n                  // intent: 'table' as tIntent,\\\\\\\\n                  iconVariant: 'edit',\\\\\\\\n                  primary: true,\\\\\\\\n                  onClick: () => console.log('Edit', selectedData)\\\\\\\\n                },\\\\\\\\n                {\\\\\\\\n                  variant: 'button' as tVariant,\\\\\\\\n                  children: 'Delete',\\\\\\\\n                  iconVariant: 'icomoon-close',\\\\\\\\n                  // intent: 'table' as tIntent,\\\\\\\\n                  onClick: () => console.log('delete', selectedData)\\\\\\\\n                }\\\\\\\\n              ]}\\\\\\\\n            />\\\\\\\\n          )\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const CircleMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n\\\\\\\\n  // create legend on the basis of markers data\\\\\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Route Mode')\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[20.5937, 78.9629]}\\\\\\\\n        zoom={4}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='300px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        settingConfig={settingConfig}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n        circle={object('circle', circleSampleData)}\\\\\\\\n        onEdit={action('Value Edited with new Vertex')}\\\\\\\\n        editPopUpComponent={({ map }: any) => (\\\\\\\\n          <EditPopUp\\\\\\\\n            onClick={() => {\\\\\\\\n              map.closePopup()\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        )}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\",\\\\\\\"locationsMap\\\\\\\":{}},},\\\\n  title: `${path}/Map`,\\\\n  decorators: [withKnobs],\\\\n  component: LeafletMap\\\\n}\\\\n\\\\n// The options which will be visible for tile-layer select in the story\\\\nconst tileOptions = {\\\\n  'open-street-maps': 'osm',\\\\n  'google-satellite': 'google_satellite',\\\\n  'google-basic': 'google_roadmap',\\\\n  'google-terrain': 'google_terrain',\\\\n  'google-hybrid': 'google_hybrid'\\\\n}\\\\n\\\\nconst themeOptions = {\\\\n  light: 'light',\\\\n  dark: 'dark'\\\\n}\\\\n\\\\nexport const BaseMap = addSourceDecorator(() => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        latLngBounds={[[37.09024, -95.712891]]}\\\\n        // zoom={number('Zoom', 4, { min: 1, max: 24 })}\\\\n        zoomControl={boolean('Zoom Controls', true)}\\\\n        locationSearch={boolean('Location Search Bar', true)}\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        heremapsApiKey={HERE_MAPS_API_KEY}\\\\n        height={text('Height', '300px')}\\\\n        width={text('Width', '800px')}\\\\n        tiles={\\\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\\\n        }\\\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\\\n        poi={boolean('Points of interest', false)}\\\\n        settingConfig={settingConfig}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n        rulerControl={boolean('rulerControl', true)}\\\\n        iconsRef={markerIcons}\\\\n        // center={array('center', ['37.7749', '-122.4194'])}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const MarkerMap = addSourceDecorator(() => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n\\\\n  // set permission true of markers if sending data,same like heatmap\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\n    option.permission = option.name === 'Markers'\\\\n    option.selected = option.name === 'Markers'\\\\n  })\\\\n  settingConfig['Map Mode'].permission = true\\\\n\\\\n  // create legend on the basis of markers data\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[37.09024, -95.712891]}\\\\n        latLngBounds={[[37.09024, -95.712891]]}\\\\n        // zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='800px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\n        focusMarkerId={text('Marker Id to focus/open', '')}\\\\n        iconsRef={markerIcons}\\\\n        popupRef={infowindowStructure}\\\\n        settingConfig={settingConfig}\\\\n        onSettingChange={action('setting changed')}\\\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const HeatMapAndMarker = addSourceDecorator(() => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission true of heatmap if sending data,same like marker\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\n    option.permission = true // true for both option\\\\n    option.selected = option.name === 'Markers' // markers selected first\\\\n  })\\\\n  settingConfig['Map Mode'].permission = true\\\\n  // create legend on the basis of markers data\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        // zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='800px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        heatmap={object('Heatmap configuration', {\\\\n          permission: false,\\\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\\\n        })}\\\\n        settingConfig={settingConfig}\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\n        iconsRef={markerIcons}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const HeatMap = addSourceDecorator(() => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission true of heatmap if sending data,same like marker\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\n    option.permission = option.name === 'HeatMap'\\\\n    option.selected = option.name === 'HeatMap'\\\\n  })\\\\n  settingConfig['Map Mode'].permission = true\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        // zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        heatmap={object('Heatmap configuration', {\\\\n          permission: true,\\\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\\\n        })}\\\\n        settingConfig={settingConfig}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const TripsMap = addSourceDecorator(() => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // create legend on the basis of markers data\\\\n\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        trips={object('Trip Configuration', sampleTripData)}\\\\n        iconsRef={markerIcons}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const TrackingMap = addSourceDecorator(() => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[33.298959, -111.9724]}\\\\n        zoom={10}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        tracking={object('Tracking Configuration', sampleTrackingData)}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nconst GeocodingMapComponent = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  // const [searchText, setSearchText] = React.useState(\\\\n  //   'Mumbai, Maharashtra, India'\\\\n  // )\\\\n  // const [position, setPosition] = React.useState([19.0759837, 72.8776559])\\\\n\\\\n  return (\\\\n    <LeafletMap\\\\n      id='leafletBaseMap'\\\\n      classes='baseMap customBaseMap'\\\\n      googleApiKey={GOOGLE_API_KEY}\\\\n      settingConfig={settingConfig}\\\\n      center={[51.0, 19.0]}\\\\n      // markers={object('Marker Configuration', markerLayerObj)}\\\\n      iconsRef={markerIcons}\\\\n      zoomControl\\\\n      locationSearch\\\\n      sendLocationOutside={action('sendLocationOutside ')}\\\\n      isShowMapTileLayer={boolean('isShowMapTileLayer', false)}\\\\n      geocoding={{\\\\n        permission: true,\\\\n\\\\n        /** If you are passing searchText, ensure to pass the position prop as well. */\\\\n        searchText: text('searchText', 'Mumbai'),\\\\n        // searchTextInput: searchText,\\\\n        position: [19.0759837, 72.8776559],\\\\n        isSave: boolean('isSave', true),\\\\n        onGeocodingSave: (e: any) => {\\\\n          window.alert(\\\\n            'Geocodes Saved ' + e.position?.[0] + ', ' + e.position?.[1]\\\\n          )\\\\n        },\\\\n        onGeocodingDragEnd: (pos: [number, number]) => {\\\\n          action('On Geocoding Drag End')(pos)\\\\n          // setPosition(pos)\\\\n          // setSearchText('India')\\\\n        }\\\\n      }}\\\\n      showLegendWrapper={boolean('showLegendWrapper', false)}\\\\n    />\\\\n  )\\\\n}\\\\nexport const GeocodingMap = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <GeocodingMapComponent />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const PolygonMap = addSourceDecorator(() => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  // const [buttonType] = useState<string | null>(null)\\\\n  // console.log(buttonType)\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[20.5937, 78.9629]}\\\\n        zoom={4}\\\\n        zoomControl={boolean('Zoom Controls', true)}\\\\n        locationSearch={boolean('Location Search Bar', true)}\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height={text('Height', '300px')}\\\\n        width={text('Width', '800px')}\\\\n        tiles={\\\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\\\n        }\\\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\\\n        poi={boolean('Points of interest', false)}\\\\n        settingConfig={settingConfig}\\\\n        polygon={object('polygon', polyGeoFenceSampleData)}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\\\n        editPopUpComponent={({ map }: any) => (\\\\n          <EditPopUp\\\\n            onClick={() => {\\\\n              map.closePopup()\\\\n            }}\\\\n          />\\\\n        )}\\\\n        onEdit={action('Value Edited with new Vertex')}\\\\n        popupCustomComponent={{\\\\n          tooltipButton: ({ selectedData }: any) => (\\\\n            <ButtonList\\\\n              listOfButtons={[\\\\n                {\\\\n                  variant: 'button' as tVariant,\\\\n                  children: 'Edit',\\\\n                  // intent: 'table' as tIntent,\\\\n                  iconVariant: 'edit',\\\\n                  primary: true,\\\\n                  onClick: () => console.log('Edit', selectedData)\\\\n                },\\\\n                {\\\\n                  variant: 'button' as tVariant,\\\\n                  children: 'Delete',\\\\n                  iconVariant: 'icomoon-close',\\\\n                  // intent: 'table' as tIntent,\\\\n                  onClick: () => console.log('delete', selectedData)\\\\n                }\\\\n              ]}\\\\n            />\\\\n          )\\\\n        }}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const CircleMap = addSourceDecorator(() => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n\\\\n  // create legend on the basis of markers data\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Route Mode')\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[20.5937, 78.9629]}\\\\n        zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        popupRef={infowindowStructure}\\\\n        settingConfig={settingConfig}\\\\n        onSettingChange={action('setting changed')}\\\\n        circle={object('circle', circleSampleData)}\\\\n        onEdit={action('Value Edited with new Vertex')}\\\\n        editPopUpComponent={({ map }: any) => (\\\\n          <EditPopUp\\\\n            onClick={() => {\\\\n              map.closePopup()\\\\n            }}\\\\n          />\\\\n        )}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/Map.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\n\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/farhanansari/Code/ui-library/src/components/atoms/Map\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"import { action } from '@storybook/addon-actions'\\\\nimport {\\\\n  boolean,\\\\n  object,\\\\n  select,\\\\n  text,\\\\n  withKnobs\\\\n} from '@storybook/addon-knobs'\\\\nimport React from 'react'\\\\nimport LeafletMap from '.'\\\\nimport { path } from '..'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport Settings from '../../atoms/SettingBox/data'\\\\nimport { ButtonList } from '../../molecules/ShowHideColumnPopup'\\\\nimport { tVariant } from '../Button'\\\\nimport { IOption } from '../SettingBox/interface'\\\\nimport {\\\\n  GOOGLE_API_KEY,\\\\n  HERE_MAPS_API_KEY\\\\n} from './constants/googleIntegration.constants'\\\\nimport circleSampleData from './dummyData/CircleSampleData.SampleData'\\\\nimport infowindowStructure from './dummyData/Infowindow.structure.sampleData'\\\\nimport markerIcons from './dummyData/MarkerIcon.sampleData'\\\\nimport markerLayerObj from './dummyData/Markers.sampleData'\\\\nimport polyGeoFenceSampleData from './dummyData/PolyGeoFence.SampleData'\\\\nimport sampleTrackingData from './dummyData/Presentation.Tracking.sampleData'\\\\nimport sampleTripData from './dummyData/Presentation.Trips.sampleData'\\\\nimport { updateSettingsWithLegends } from './helperMethods'\\\\nimport EditPopUp from './SubComponent/EditPopUp'\\\\nimport { tTheme, tTiles } from './types.d'\\\\n\\\\nexport default {\\\\n  title: `${path}/Map`,\\\\n  decorators: [withKnobs],\\\\n  component: LeafletMap\\\\n}\\\\n\\\\n// The options which will be visible for tile-layer select in the story\\\\nconst tileOptions = {\\\\n  'open-street-maps': 'osm',\\\\n  'google-satellite': 'google_satellite',\\\\n  'google-basic': 'google_roadmap',\\\\n  'google-terrain': 'google_terrain',\\\\n  'google-hybrid': 'google_hybrid'\\\\n}\\\\n\\\\nconst themeOptions = {\\\\n  light: 'light',\\\\n  dark: 'dark'\\\\n}\\\\n\\\\nexport const BaseMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        latLngBounds={[[37.09024, -95.712891]]}\\\\n        // zoom={number('Zoom', 4, { min: 1, max: 24 })}\\\\n        zoomControl={boolean('Zoom Controls', true)}\\\\n        locationSearch={boolean('Location Search Bar', true)}\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        heremapsApiKey={HERE_MAPS_API_KEY}\\\\n        height={text('Height', '300px')}\\\\n        width={text('Width', '800px')}\\\\n        tiles={\\\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\\\n        }\\\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\\\n        poi={boolean('Points of interest', false)}\\\\n        settingConfig={settingConfig}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n        rulerControl={boolean('rulerControl', true)}\\\\n        iconsRef={markerIcons}\\\\n        // center={array('center', ['37.7749', '-122.4194'])}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const MarkerMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n\\\\n  // set permission true of markers if sending data,same like heatmap\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\n    option.permission = option.name === 'Markers'\\\\n    option.selected = option.name === 'Markers'\\\\n  })\\\\n  settingConfig['Map Mode'].permission = true\\\\n\\\\n  // create legend on the basis of markers data\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[37.09024, -95.712891]}\\\\n        latLngBounds={[[37.09024, -95.712891]]}\\\\n        // zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='800px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\n        focusMarkerId={text('Marker Id to focus/open', '')}\\\\n        iconsRef={markerIcons}\\\\n        popupRef={infowindowStructure}\\\\n        settingConfig={settingConfig}\\\\n        onSettingChange={action('setting changed')}\\\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const HeatMapAndMarker = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission true of heatmap if sending data,same like marker\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\n    option.permission = true // true for both option\\\\n    option.selected = option.name === 'Markers' // markers selected first\\\\n  })\\\\n  settingConfig['Map Mode'].permission = true\\\\n  // create legend on the basis of markers data\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        // zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='800px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        heatmap={object('Heatmap configuration', {\\\\n          permission: false,\\\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\\\n        })}\\\\n        settingConfig={settingConfig}\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\n        iconsRef={markerIcons}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const HeatMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission true of heatmap if sending data,same like marker\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\n    option.permission = option.name === 'HeatMap'\\\\n    option.selected = option.name === 'HeatMap'\\\\n  })\\\\n  settingConfig['Map Mode'].permission = true\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        // zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        heatmap={object('Heatmap configuration', {\\\\n          permission: true,\\\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\\\n        })}\\\\n        settingConfig={settingConfig}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const TripsMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // create legend on the basis of markers data\\\\n\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        trips={object('Trip Configuration', sampleTripData)}\\\\n        iconsRef={markerIcons}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const TrackingMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[33.298959, -111.9724]}\\\\n        zoom={10}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        tracking={object('Tracking Configuration', sampleTrackingData)}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nconst GeocodingMapComponent = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  // const [searchText, setSearchText] = React.useState(\\\\n  //   'Mumbai, Maharashtra, India'\\\\n  // )\\\\n  // const [position, setPosition] = React.useState([19.0759837, 72.8776559])\\\\n\\\\n  return (\\\\n    <LeafletMap\\\\n      id='leafletBaseMap'\\\\n      classes='baseMap customBaseMap'\\\\n      googleApiKey={GOOGLE_API_KEY}\\\\n      settingConfig={settingConfig}\\\\n      center={[51.0, 19.0]}\\\\n      // markers={object('Marker Configuration', markerLayerObj)}\\\\n      iconsRef={markerIcons}\\\\n      zoomControl\\\\n      locationSearch\\\\n      sendLocationOutside={action('sendLocationOutside ')}\\\\n      isShowMapTileLayer={boolean('isShowMapTileLayer', false)}\\\\n      geocoding={{\\\\n        permission: true,\\\\n\\\\n        /** If you are passing searchText, ensure to pass the position prop as well. */\\\\n        searchText: text('searchText', 'Mumbai'),\\\\n        // searchTextInput: searchText,\\\\n        position: [19.0759837, 72.8776559],\\\\n        isSave: boolean('isSave', true),\\\\n        onGeocodingSave: (e: any) => {\\\\n          window.alert(\\\\n            'Geocodes Saved ' + e.position?.[0] + ', ' + e.position?.[1]\\\\n          )\\\\n        },\\\\n        onGeocodingDragEnd: (pos: [number, number]) => {\\\\n          action('On Geocoding Drag End')(pos)\\\\n          // setPosition(pos)\\\\n          // setSearchText('India')\\\\n        }\\\\n      }}\\\\n      showLegendWrapper={boolean('showLegendWrapper', false)}\\\\n    />\\\\n  )\\\\n}\\\\nexport const GeocodingMap = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <GeocodingMapComponent />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const PolygonMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  // const [buttonType] = useState<string | null>(null)\\\\n  // console.log(buttonType)\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[20.5937, 78.9629]}\\\\n        zoom={4}\\\\n        zoomControl={boolean('Zoom Controls', true)}\\\\n        locationSearch={boolean('Location Search Bar', true)}\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height={text('Height', '300px')}\\\\n        width={text('Width', '800px')}\\\\n        tiles={\\\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\\\n        }\\\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\\\n        poi={boolean('Points of interest', false)}\\\\n        settingConfig={settingConfig}\\\\n        polygon={object('polygon', polyGeoFenceSampleData)}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\\\n        editPopUpComponent={({ map }: any) => (\\\\n          <EditPopUp\\\\n            onClick={() => {\\\\n              map.closePopup()\\\\n            }}\\\\n          />\\\\n        )}\\\\n        onEdit={action('Value Edited with new Vertex')}\\\\n        popupCustomComponent={{\\\\n          tooltipButton: ({ selectedData }: any) => (\\\\n            <ButtonList\\\\n              listOfButtons={[\\\\n                {\\\\n                  variant: 'button' as tVariant,\\\\n                  children: 'Edit',\\\\n                  // intent: 'table' as tIntent,\\\\n                  iconVariant: 'edit',\\\\n                  primary: true,\\\\n                  onClick: () => console.log('Edit', selectedData)\\\\n                },\\\\n                {\\\\n                  variant: 'button' as tVariant,\\\\n                  children: 'Delete',\\\\n                  iconVariant: 'icomoon-close',\\\\n                  // intent: 'table' as tIntent,\\\\n                  onClick: () => console.log('delete', selectedData)\\\\n                }\\\\n              ]}\\\\n            />\\\\n          )\\\\n        }}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const CircleMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n\\\\n  // create legend on the basis of markers data\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Route Mode')\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[20.5937, 78.9629]}\\\\n        zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        popupRef={infowindowStructure}\\\\n        settingConfig={settingConfig}\\\\n        onSettingChange={action('setting changed')}\\\\n        circle={object('circle', circleSampleData)}\\\\n        onEdit={action('Value Edited with new Vertex')}\\\\n        editPopUpComponent={({ map }: any) => (\\\\n          <EditPopUp\\\\n            onClick={() => {\\\\n              map.closePopup()\\\\n            }}\\\\n          />\\\\n        )}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/Map.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\nimport { action } from '@storybook/addon-actions'\\nimport {\\n  boolean,\\n  object,\\n  select,\\n  text,\\n  withKnobs\\n} from '@storybook/addon-knobs'\\nimport React from 'react'\\nimport LeafletMap from '.'\\nimport { path } from '..'\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\nimport Settings from '../../atoms/SettingBox/data'\\nimport { ButtonList } from '../../molecules/ShowHideColumnPopup'\\nimport { tVariant } from '../Button'\\nimport { IOption } from '../SettingBox/interface'\\nimport {\\n  GOOGLE_API_KEY,\\n  HERE_MAPS_API_KEY\\n} from './constants/googleIntegration.constants'\\nimport circleSampleData from './dummyData/CircleSampleData.SampleData'\\nimport infowindowStructure from './dummyData/Infowindow.structure.sampleData'\\nimport markerIcons from './dummyData/MarkerIcon.sampleData'\\nimport markerLayerObj from './dummyData/Markers.sampleData'\\nimport polyGeoFenceSampleData from './dummyData/PolyGeoFence.SampleData'\\nimport sampleTrackingData from './dummyData/Presentation.Tracking.sampleData'\\nimport sampleTripData from './dummyData/Presentation.Trips.sampleData'\\nimport { updateSettingsWithLegends } from './helperMethods'\\nimport EditPopUp from './SubComponent/EditPopUp'\\nimport { tTheme, tTiles } from './types.d'\\n\\nexport default {parameters: {\\\"storySource\\\":{\\\"source\\\":\\\"\\\\n\\\\n// @ts-nocheck\\\\n// @ts-ignore\\\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\\\n// @ts-ignore\\\\nvar addSourceDecorator = require(\\\\\\\"@storybook/source-loader/preview\\\\\\\").addSource;\\\\n// @ts-ignore\\\\nvar __SOURCE_PREFIX__ = \\\\\\\"/Users/farhanansari/Code/ui-library/src/components/atoms/Map\\\\\\\";\\\\n// @ts-ignore\\\\nvar __STORY__ = \\\\\\\"import { action } from '@storybook/addon-actions'\\\\\\\\nimport {\\\\\\\\n  boolean,\\\\\\\\n  object,\\\\\\\\n  select,\\\\\\\\n  text,\\\\\\\\n  withKnobs\\\\\\\\n} from '@storybook/addon-knobs'\\\\\\\\nimport React from 'react'\\\\\\\\nimport LeafletMap from '.'\\\\\\\\nimport { path } from '..'\\\\\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\\\\\nimport Settings from '../../atoms/SettingBox/data'\\\\\\\\nimport { ButtonList } from '../../molecules/ShowHideColumnPopup'\\\\\\\\nimport { tVariant } from '../Button'\\\\\\\\nimport { IOption } from '../SettingBox/interface'\\\\\\\\nimport {\\\\\\\\n  GOOGLE_API_KEY,\\\\\\\\n  HERE_MAPS_API_KEY\\\\\\\\n} from './constants/googleIntegration.constants'\\\\\\\\nimport circleSampleData from './dummyData/CircleSampleData.SampleData'\\\\\\\\nimport infowindowStructure from './dummyData/Infowindow.structure.sampleData'\\\\\\\\nimport markerIcons from './dummyData/MarkerIcon.sampleData'\\\\\\\\nimport markerLayerObj from './dummyData/Markers.sampleData'\\\\\\\\nimport polyGeoFenceSampleData from './dummyData/PolyGeoFence.SampleData'\\\\\\\\nimport sampleTrackingData from './dummyData/Presentation.Tracking.sampleData'\\\\\\\\nimport sampleTripData from './dummyData/Presentation.Trips.sampleData'\\\\\\\\nimport { updateSettingsWithLegends } from './helperMethods'\\\\\\\\nimport EditPopUp from './SubComponent/EditPopUp'\\\\\\\\nimport { tTheme, tTiles } from './types.d'\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/Map`,\\\\\\\\n  decorators: [withKnobs],\\\\\\\\n  component: LeafletMap\\\\\\\\n}\\\\\\\\n\\\\\\\\n// The options which will be visible for tile-layer select in the story\\\\\\\\nconst tileOptions = {\\\\\\\\n  'open-street-maps': 'osm',\\\\\\\\n  'google-satellite': 'google_satellite',\\\\\\\\n  'google-basic': 'google_roadmap',\\\\\\\\n  'google-terrain': 'google_terrain',\\\\\\\\n  'google-hybrid': 'google_hybrid'\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst themeOptions = {\\\\\\\\n  light: 'light',\\\\\\\\n  dark: 'dark'\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const BaseMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[51.0, 19.0]}\\\\\\\\n        latLngBounds={[[37.09024, -95.712891]]}\\\\\\\\n        // zoom={number('Zoom', 4, { min: 1, max: 24 })}\\\\\\\\n        zoomControl={boolean('Zoom Controls', true)}\\\\\\\\n        locationSearch={boolean('Location Search Bar', true)}\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        heremapsApiKey={HERE_MAPS_API_KEY}\\\\\\\\n        height={text('Height', '300px')}\\\\\\\\n        width={text('Width', '800px')}\\\\\\\\n        tiles={\\\\\\\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\\\\\\\n        }\\\\\\\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\\\\\\\n        poi={boolean('Points of interest', false)}\\\\\\\\n        settingConfig={settingConfig}\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n        rulerControl={boolean('rulerControl', true)}\\\\\\\\n        iconsRef={markerIcons}\\\\\\\\n        // center={array('center', ['37.7749', '-122.4194'])}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const MarkerMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n\\\\\\\\n  // set permission true of markers if sending data,same like heatmap\\\\\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\\\\\n    option.permission = option.name === 'Markers'\\\\\\\\n    option.selected = option.name === 'Markers'\\\\\\\\n  })\\\\\\\\n  settingConfig['Map Mode'].permission = true\\\\\\\\n\\\\\\\\n  // create legend on the basis of markers data\\\\\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[37.09024, -95.712891]}\\\\\\\\n        latLngBounds={[[37.09024, -95.712891]]}\\\\\\\\n        // zoom={4}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='800px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\\\\\n        focusMarkerId={text('Marker Id to focus/open', '')}\\\\\\\\n        iconsRef={markerIcons}\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        settingConfig={settingConfig}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const HeatMapAndMarker = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // set permission true of heatmap if sending data,same like marker\\\\\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\\\\\n    option.permission = true // true for both option\\\\\\\\n    option.selected = option.name === 'Markers' // markers selected first\\\\\\\\n  })\\\\\\\\n  settingConfig['Map Mode'].permission = true\\\\\\\\n  // create legend on the basis of markers data\\\\\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[51.0, 19.0]}\\\\\\\\n        // zoom={4}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='800px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        heatmap={object('Heatmap configuration', {\\\\\\\\n          permission: false,\\\\\\\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\\\\\\\n        })}\\\\\\\\n        settingConfig={settingConfig}\\\\\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\\\\\n        iconsRef={markerIcons}\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const HeatMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // set permission true of heatmap if sending data,same like marker\\\\\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\\\\\n    option.permission = option.name === 'HeatMap'\\\\\\\\n    option.selected = option.name === 'HeatMap'\\\\\\\\n  })\\\\\\\\n  settingConfig['Map Mode'].permission = true\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[51.0, 19.0]}\\\\\\\\n        // zoom={4}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='300px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        heatmap={object('Heatmap configuration', {\\\\\\\\n          permission: true,\\\\\\\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\\\\\\\n        })}\\\\\\\\n        settingConfig={settingConfig}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const TripsMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // create legend on the basis of markers data\\\\\\\\n\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[51.0, 19.0]}\\\\\\\\n        zoom={4}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='300px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        trips={object('Trip Configuration', sampleTripData)}\\\\\\\\n        iconsRef={markerIcons}\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const TrackingMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[33.298959, -111.9724]}\\\\\\\\n        zoom={10}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='300px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        tracking={object('Tracking Configuration', sampleTrackingData)}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst GeocodingMapComponent = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n  // const [searchText, setSearchText] = React.useState(\\\\\\\\n  //   'Mumbai, Maharashtra, India'\\\\\\\\n  // )\\\\\\\\n  // const [position, setPosition] = React.useState([19.0759837, 72.8776559])\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <LeafletMap\\\\\\\\n      id='leafletBaseMap'\\\\\\\\n      classes='baseMap customBaseMap'\\\\\\\\n      googleApiKey={GOOGLE_API_KEY}\\\\\\\\n      settingConfig={settingConfig}\\\\\\\\n      center={[51.0, 19.0]}\\\\\\\\n      // markers={object('Marker Configuration', markerLayerObj)}\\\\\\\\n      iconsRef={markerIcons}\\\\\\\\n      zoomControl\\\\\\\\n      locationSearch\\\\\\\\n      sendLocationOutside={action('sendLocationOutside ')}\\\\\\\\n      isShowMapTileLayer={boolean('isShowMapTileLayer', false)}\\\\\\\\n      geocoding={{\\\\\\\\n        permission: true,\\\\\\\\n\\\\\\\\n        /** If you are passing searchText, ensure to pass the position prop as well. */\\\\\\\\n        searchText: text('searchText', 'Mumbai'),\\\\\\\\n        // searchTextInput: searchText,\\\\\\\\n        position: [19.0759837, 72.8776559],\\\\\\\\n        isSave: boolean('isSave', true),\\\\\\\\n        onGeocodingSave: (e: any) => {\\\\\\\\n          window.alert(\\\\\\\\n            'Geocodes Saved ' + e.position?.[0] + ', ' + e.position?.[1]\\\\\\\\n          )\\\\\\\\n        },\\\\\\\\n        onGeocodingDragEnd: (pos: [number, number]) => {\\\\\\\\n          action('On Geocoding Drag End')(pos)\\\\\\\\n          // setPosition(pos)\\\\\\\\n          // setSearchText('India')\\\\\\\\n        }\\\\\\\\n      }}\\\\\\\\n      showLegendWrapper={boolean('showLegendWrapper', false)}\\\\\\\\n    />\\\\\\\\n  )\\\\\\\\n}\\\\\\\\nexport const GeocodingMap = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <GeocodingMapComponent />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const PolygonMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n  // const [buttonType] = useState<string | null>(null)\\\\\\\\n  // console.log(buttonType)\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[20.5937, 78.9629]}\\\\\\\\n        zoom={4}\\\\\\\\n        zoomControl={boolean('Zoom Controls', true)}\\\\\\\\n        locationSearch={boolean('Location Search Bar', true)}\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height={text('Height', '300px')}\\\\\\\\n        width={text('Width', '800px')}\\\\\\\\n        tiles={\\\\\\\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\\\\\\\n        }\\\\\\\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\\\\\\\n        poi={boolean('Points of interest', false)}\\\\\\\\n        settingConfig={settingConfig}\\\\\\\\n        polygon={object('polygon', polyGeoFenceSampleData)}\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\\\\\\\n        editPopUpComponent={({ map }: any) => (\\\\\\\\n          <EditPopUp\\\\\\\\n            onClick={() => {\\\\\\\\n              map.closePopup()\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        )}\\\\\\\\n        onEdit={action('Value Edited with new Vertex')}\\\\\\\\n        popupCustomComponent={{\\\\\\\\n          tooltipButton: ({ selectedData }: any) => (\\\\\\\\n            <ButtonList\\\\\\\\n              listOfButtons={[\\\\\\\\n                {\\\\\\\\n                  variant: 'button' as tVariant,\\\\\\\\n                  children: 'Edit',\\\\\\\\n                  // intent: 'table' as tIntent,\\\\\\\\n                  iconVariant: 'edit',\\\\\\\\n                  primary: true,\\\\\\\\n                  onClick: () => console.log('Edit', selectedData)\\\\\\\\n                },\\\\\\\\n                {\\\\\\\\n                  variant: 'button' as tVariant,\\\\\\\\n                  children: 'Delete',\\\\\\\\n                  iconVariant: 'icomoon-close',\\\\\\\\n                  // intent: 'table' as tIntent,\\\\\\\\n                  onClick: () => console.log('delete', selectedData)\\\\\\\\n                }\\\\\\\\n              ]}\\\\\\\\n            />\\\\\\\\n          )\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const CircleMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n\\\\\\\\n  // create legend on the basis of markers data\\\\\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Route Mode')\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[20.5937, 78.9629]}\\\\\\\\n        zoom={4}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='300px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        settingConfig={settingConfig}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n        circle={object('circle', circleSampleData)}\\\\\\\\n        onEdit={action('Value Edited with new Vertex')}\\\\\\\\n        editPopUpComponent={({ map }: any) => (\\\\\\\\n          <EditPopUp\\\\\\\\n            onClick={() => {\\\\\\\\n              map.closePopup()\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        )}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\";\\\\n// @ts-ignore\\\\nvar __ADDS_MAP__ = {};\\\\n// @ts-ignore\\\\nvar __MAIN_FILE_LOCATION__ = \\\\\\\"/Map.stories.tsx\\\\\\\";\\\\n// @ts-ignore\\\\nvar __MODULE_DEPENDENCIES__ = [];\\\\n// @ts-ignore\\\\nvar __LOCAL_DEPENDENCIES__ = {};\\\\n// @ts-ignore\\\\nvar __IDS_TO_FRAMEWORKS__ = {};\\\\n        \\\\nimport { action } from '@storybook/addon-actions'\\\\nimport {\\\\n  boolean,\\\\n  object,\\\\n  select,\\\\n  text,\\\\n  withKnobs\\\\n} from '@storybook/addon-knobs'\\\\nimport React from 'react'\\\\nimport LeafletMap from '.'\\\\nimport { path } from '..'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport Settings from '../../atoms/SettingBox/data'\\\\nimport { ButtonList } from '../../molecules/ShowHideColumnPopup'\\\\nimport { tVariant } from '../Button'\\\\nimport { IOption } from '../SettingBox/interface'\\\\nimport {\\\\n  GOOGLE_API_KEY,\\\\n  HERE_MAPS_API_KEY\\\\n} from './constants/googleIntegration.constants'\\\\nimport circleSampleData from './dummyData/CircleSampleData.SampleData'\\\\nimport infowindowStructure from './dummyData/Infowindow.structure.sampleData'\\\\nimport markerIcons from './dummyData/MarkerIcon.sampleData'\\\\nimport markerLayerObj from './dummyData/Markers.sampleData'\\\\nimport polyGeoFenceSampleData from './dummyData/PolyGeoFence.SampleData'\\\\nimport sampleTrackingData from './dummyData/Presentation.Tracking.sampleData'\\\\nimport sampleTripData from './dummyData/Presentation.Trips.sampleData'\\\\nimport { updateSettingsWithLegends } from './helperMethods'\\\\nimport EditPopUp from './SubComponent/EditPopUp'\\\\nimport { tTheme, tTiles } from './types.d'\\\\n\\\\nexport default {parameters: {\\\\\\\"storySource\\\\\\\":{\\\\\\\"source\\\\\\\":\\\\\\\"import { action } from '@storybook/addon-actions'\\\\\\\\nimport {\\\\\\\\n  boolean,\\\\\\\\n  object,\\\\\\\\n  select,\\\\\\\\n  text,\\\\\\\\n  withKnobs\\\\\\\\n} from '@storybook/addon-knobs'\\\\\\\\nimport React from 'react'\\\\\\\\nimport LeafletMap from '.'\\\\\\\\nimport { path } from '..'\\\\\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\\\\\nimport Settings from '../../atoms/SettingBox/data'\\\\\\\\nimport { ButtonList } from '../../molecules/ShowHideColumnPopup'\\\\\\\\nimport { tVariant } from '../Button'\\\\\\\\nimport { IOption } from '../SettingBox/interface'\\\\\\\\nimport {\\\\\\\\n  GOOGLE_API_KEY,\\\\\\\\n  HERE_MAPS_API_KEY\\\\\\\\n} from './constants/googleIntegration.constants'\\\\\\\\nimport circleSampleData from './dummyData/CircleSampleData.SampleData'\\\\\\\\nimport infowindowStructure from './dummyData/Infowindow.structure.sampleData'\\\\\\\\nimport markerIcons from './dummyData/MarkerIcon.sampleData'\\\\\\\\nimport markerLayerObj from './dummyData/Markers.sampleData'\\\\\\\\nimport polyGeoFenceSampleData from './dummyData/PolyGeoFence.SampleData'\\\\\\\\nimport sampleTrackingData from './dummyData/Presentation.Tracking.sampleData'\\\\\\\\nimport sampleTripData from './dummyData/Presentation.Trips.sampleData'\\\\\\\\nimport { updateSettingsWithLegends } from './helperMethods'\\\\\\\\nimport EditPopUp from './SubComponent/EditPopUp'\\\\\\\\nimport { tTheme, tTiles } from './types.d'\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/Map`,\\\\\\\\n  decorators: [withKnobs],\\\\\\\\n  component: LeafletMap\\\\\\\\n}\\\\\\\\n\\\\\\\\n// The options which will be visible for tile-layer select in the story\\\\\\\\nconst tileOptions = {\\\\\\\\n  'open-street-maps': 'osm',\\\\\\\\n  'google-satellite': 'google_satellite',\\\\\\\\n  'google-basic': 'google_roadmap',\\\\\\\\n  'google-terrain': 'google_terrain',\\\\\\\\n  'google-hybrid': 'google_hybrid'\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst themeOptions = {\\\\\\\\n  light: 'light',\\\\\\\\n  dark: 'dark'\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const BaseMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[51.0, 19.0]}\\\\\\\\n        latLngBounds={[[37.09024, -95.712891]]}\\\\\\\\n        // zoom={number('Zoom', 4, { min: 1, max: 24 })}\\\\\\\\n        zoomControl={boolean('Zoom Controls', true)}\\\\\\\\n        locationSearch={boolean('Location Search Bar', true)}\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        heremapsApiKey={HERE_MAPS_API_KEY}\\\\\\\\n        height={text('Height', '300px')}\\\\\\\\n        width={text('Width', '800px')}\\\\\\\\n        tiles={\\\\\\\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\\\\\\\n        }\\\\\\\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\\\\\\\n        poi={boolean('Points of interest', false)}\\\\\\\\n        settingConfig={settingConfig}\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n        rulerControl={boolean('rulerControl', true)}\\\\\\\\n        iconsRef={markerIcons}\\\\\\\\n        // center={array('center', ['37.7749', '-122.4194'])}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const MarkerMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n\\\\\\\\n  // set permission true of markers if sending data,same like heatmap\\\\\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\\\\\n    option.permission = option.name === 'Markers'\\\\\\\\n    option.selected = option.name === 'Markers'\\\\\\\\n  })\\\\\\\\n  settingConfig['Map Mode'].permission = true\\\\\\\\n\\\\\\\\n  // create legend on the basis of markers data\\\\\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[37.09024, -95.712891]}\\\\\\\\n        latLngBounds={[[37.09024, -95.712891]]}\\\\\\\\n        // zoom={4}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='800px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\\\\\n        focusMarkerId={text('Marker Id to focus/open', '')}\\\\\\\\n        iconsRef={markerIcons}\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        settingConfig={settingConfig}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const HeatMapAndMarker = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // set permission true of heatmap if sending data,same like marker\\\\\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\\\\\n    option.permission = true // true for both option\\\\\\\\n    option.selected = option.name === 'Markers' // markers selected first\\\\\\\\n  })\\\\\\\\n  settingConfig['Map Mode'].permission = true\\\\\\\\n  // create legend on the basis of markers data\\\\\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[51.0, 19.0]}\\\\\\\\n        // zoom={4}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='800px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        heatmap={object('Heatmap configuration', {\\\\\\\\n          permission: false,\\\\\\\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\\\\\\\n        })}\\\\\\\\n        settingConfig={settingConfig}\\\\\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\\\\\n        iconsRef={markerIcons}\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const HeatMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // set permission true of heatmap if sending data,same like marker\\\\\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\\\\\n    option.permission = option.name === 'HeatMap'\\\\\\\\n    option.selected = option.name === 'HeatMap'\\\\\\\\n  })\\\\\\\\n  settingConfig['Map Mode'].permission = true\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[51.0, 19.0]}\\\\\\\\n        // zoom={4}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='300px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        heatmap={object('Heatmap configuration', {\\\\\\\\n          permission: true,\\\\\\\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\\\\\\\n        })}\\\\\\\\n        settingConfig={settingConfig}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const TripsMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // create legend on the basis of markers data\\\\\\\\n\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[51.0, 19.0]}\\\\\\\\n        zoom={4}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='300px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        trips={object('Trip Configuration', sampleTripData)}\\\\\\\\n        iconsRef={markerIcons}\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const TrackingMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[33.298959, -111.9724]}\\\\\\\\n        zoom={10}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='300px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        tracking={object('Tracking Configuration', sampleTrackingData)}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst GeocodingMapComponent = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n  // const [searchText, setSearchText] = React.useState(\\\\\\\\n  //   'Mumbai, Maharashtra, India'\\\\\\\\n  // )\\\\\\\\n  // const [position, setPosition] = React.useState([19.0759837, 72.8776559])\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <LeafletMap\\\\\\\\n      id='leafletBaseMap'\\\\\\\\n      classes='baseMap customBaseMap'\\\\\\\\n      googleApiKey={GOOGLE_API_KEY}\\\\\\\\n      settingConfig={settingConfig}\\\\\\\\n      center={[51.0, 19.0]}\\\\\\\\n      // markers={object('Marker Configuration', markerLayerObj)}\\\\\\\\n      iconsRef={markerIcons}\\\\\\\\n      zoomControl\\\\\\\\n      locationSearch\\\\\\\\n      sendLocationOutside={action('sendLocationOutside ')}\\\\\\\\n      isShowMapTileLayer={boolean('isShowMapTileLayer', false)}\\\\\\\\n      geocoding={{\\\\\\\\n        permission: true,\\\\\\\\n\\\\\\\\n        /** If you are passing searchText, ensure to pass the position prop as well. */\\\\\\\\n        searchText: text('searchText', 'Mumbai'),\\\\\\\\n        // searchTextInput: searchText,\\\\\\\\n        position: [19.0759837, 72.8776559],\\\\\\\\n        isSave: boolean('isSave', true),\\\\\\\\n        onGeocodingSave: (e: any) => {\\\\\\\\n          window.alert(\\\\\\\\n            'Geocodes Saved ' + e.position?.[0] + ', ' + e.position?.[1]\\\\\\\\n          )\\\\\\\\n        },\\\\\\\\n        onGeocodingDragEnd: (pos: [number, number]) => {\\\\\\\\n          action('On Geocoding Drag End')(pos)\\\\\\\\n          // setPosition(pos)\\\\\\\\n          // setSearchText('India')\\\\\\\\n        }\\\\\\\\n      }}\\\\\\\\n      showLegendWrapper={boolean('showLegendWrapper', false)}\\\\\\\\n    />\\\\\\\\n  )\\\\\\\\n}\\\\\\\\nexport const GeocodingMap = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <GeocodingMapComponent />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const PolygonMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n  // const [buttonType] = useState<string | null>(null)\\\\\\\\n  // console.log(buttonType)\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[20.5937, 78.9629]}\\\\\\\\n        zoom={4}\\\\\\\\n        zoomControl={boolean('Zoom Controls', true)}\\\\\\\\n        locationSearch={boolean('Location Search Bar', true)}\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height={text('Height', '300px')}\\\\\\\\n        width={text('Width', '800px')}\\\\\\\\n        tiles={\\\\\\\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\\\\\\\n        }\\\\\\\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\\\\\\\n        poi={boolean('Points of interest', false)}\\\\\\\\n        settingConfig={settingConfig}\\\\\\\\n        polygon={object('polygon', polyGeoFenceSampleData)}\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\\\\\\\n        editPopUpComponent={({ map }: any) => (\\\\\\\\n          <EditPopUp\\\\\\\\n            onClick={() => {\\\\\\\\n              map.closePopup()\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        )}\\\\\\\\n        onEdit={action('Value Edited with new Vertex')}\\\\\\\\n        popupCustomComponent={{\\\\\\\\n          tooltipButton: ({ selectedData }: any) => (\\\\\\\\n            <ButtonList\\\\\\\\n              listOfButtons={[\\\\\\\\n                {\\\\\\\\n                  variant: 'button' as tVariant,\\\\\\\\n                  children: 'Edit',\\\\\\\\n                  // intent: 'table' as tIntent,\\\\\\\\n                  iconVariant: 'edit',\\\\\\\\n                  primary: true,\\\\\\\\n                  onClick: () => console.log('Edit', selectedData)\\\\\\\\n                },\\\\\\\\n                {\\\\\\\\n                  variant: 'button' as tVariant,\\\\\\\\n                  children: 'Delete',\\\\\\\\n                  iconVariant: 'icomoon-close',\\\\\\\\n                  // intent: 'table' as tIntent,\\\\\\\\n                  onClick: () => console.log('delete', selectedData)\\\\\\\\n                }\\\\\\\\n              ]}\\\\\\\\n            />\\\\\\\\n          )\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const CircleMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n\\\\\\\\n  // create legend on the basis of markers data\\\\\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Route Mode')\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[20.5937, 78.9629]}\\\\\\\\n        zoom={4}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='300px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        settingConfig={settingConfig}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n        circle={object('circle', circleSampleData)}\\\\\\\\n        onEdit={action('Value Edited with new Vertex')}\\\\\\\\n        editPopUpComponent={({ map }: any) => (\\\\\\\\n          <EditPopUp\\\\\\\\n            onClick={() => {\\\\\\\\n              map.closePopup()\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        )}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\",\\\\\\\"locationsMap\\\\\\\":{}},},\\\\n  title: `${path}/Map`,\\\\n  decorators: [withKnobs],\\\\n  component: LeafletMap\\\\n}\\\\n\\\\n// The options which will be visible for tile-layer select in the story\\\\nconst tileOptions = {\\\\n  'open-street-maps': 'osm',\\\\n  'google-satellite': 'google_satellite',\\\\n  'google-basic': 'google_roadmap',\\\\n  'google-terrain': 'google_terrain',\\\\n  'google-hybrid': 'google_hybrid'\\\\n}\\\\n\\\\nconst themeOptions = {\\\\n  light: 'light',\\\\n  dark: 'dark'\\\\n}\\\\n\\\\nexport const BaseMap = addSourceDecorator(() => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        latLngBounds={[[37.09024, -95.712891]]}\\\\n        // zoom={number('Zoom', 4, { min: 1, max: 24 })}\\\\n        zoomControl={boolean('Zoom Controls', true)}\\\\n        locationSearch={boolean('Location Search Bar', true)}\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        heremapsApiKey={HERE_MAPS_API_KEY}\\\\n        height={text('Height', '300px')}\\\\n        width={text('Width', '800px')}\\\\n        tiles={\\\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\\\n        }\\\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\\\n        poi={boolean('Points of interest', false)}\\\\n        settingConfig={settingConfig}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n        rulerControl={boolean('rulerControl', true)}\\\\n        iconsRef={markerIcons}\\\\n        // center={array('center', ['37.7749', '-122.4194'])}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const MarkerMap = addSourceDecorator(() => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n\\\\n  // set permission true of markers if sending data,same like heatmap\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\n    option.permission = option.name === 'Markers'\\\\n    option.selected = option.name === 'Markers'\\\\n  })\\\\n  settingConfig['Map Mode'].permission = true\\\\n\\\\n  // create legend on the basis of markers data\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[37.09024, -95.712891]}\\\\n        latLngBounds={[[37.09024, -95.712891]]}\\\\n        // zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='800px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\n        focusMarkerId={text('Marker Id to focus/open', '')}\\\\n        iconsRef={markerIcons}\\\\n        popupRef={infowindowStructure}\\\\n        settingConfig={settingConfig}\\\\n        onSettingChange={action('setting changed')}\\\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const HeatMapAndMarker = addSourceDecorator(() => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission true of heatmap if sending data,same like marker\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\n    option.permission = true // true for both option\\\\n    option.selected = option.name === 'Markers' // markers selected first\\\\n  })\\\\n  settingConfig['Map Mode'].permission = true\\\\n  // create legend on the basis of markers data\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        // zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='800px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        heatmap={object('Heatmap configuration', {\\\\n          permission: false,\\\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\\\n        })}\\\\n        settingConfig={settingConfig}\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\n        iconsRef={markerIcons}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const HeatMap = addSourceDecorator(() => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission true of heatmap if sending data,same like marker\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\n    option.permission = option.name === 'HeatMap'\\\\n    option.selected = option.name === 'HeatMap'\\\\n  })\\\\n  settingConfig['Map Mode'].permission = true\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        // zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        heatmap={object('Heatmap configuration', {\\\\n          permission: true,\\\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\\\n        })}\\\\n        settingConfig={settingConfig}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const TripsMap = addSourceDecorator(() => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // create legend on the basis of markers data\\\\n\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        trips={object('Trip Configuration', sampleTripData)}\\\\n        iconsRef={markerIcons}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const TrackingMap = addSourceDecorator(() => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[33.298959, -111.9724]}\\\\n        zoom={10}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        tracking={object('Tracking Configuration', sampleTrackingData)}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nconst GeocodingMapComponent = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  // const [searchText, setSearchText] = React.useState(\\\\n  //   'Mumbai, Maharashtra, India'\\\\n  // )\\\\n  // const [position, setPosition] = React.useState([19.0759837, 72.8776559])\\\\n\\\\n  return (\\\\n    <LeafletMap\\\\n      id='leafletBaseMap'\\\\n      classes='baseMap customBaseMap'\\\\n      googleApiKey={GOOGLE_API_KEY}\\\\n      settingConfig={settingConfig}\\\\n      center={[51.0, 19.0]}\\\\n      // markers={object('Marker Configuration', markerLayerObj)}\\\\n      iconsRef={markerIcons}\\\\n      zoomControl\\\\n      locationSearch\\\\n      sendLocationOutside={action('sendLocationOutside ')}\\\\n      isShowMapTileLayer={boolean('isShowMapTileLayer', false)}\\\\n      geocoding={{\\\\n        permission: true,\\\\n\\\\n        /** If you are passing searchText, ensure to pass the position prop as well. */\\\\n        searchText: text('searchText', 'Mumbai'),\\\\n        // searchTextInput: searchText,\\\\n        position: [19.0759837, 72.8776559],\\\\n        isSave: boolean('isSave', true),\\\\n        onGeocodingSave: (e: any) => {\\\\n          window.alert(\\\\n            'Geocodes Saved ' + e.position?.[0] + ', ' + e.position?.[1]\\\\n          )\\\\n        },\\\\n        onGeocodingDragEnd: (pos: [number, number]) => {\\\\n          action('On Geocoding Drag End')(pos)\\\\n          // setPosition(pos)\\\\n          // setSearchText('India')\\\\n        }\\\\n      }}\\\\n      showLegendWrapper={boolean('showLegendWrapper', false)}\\\\n    />\\\\n  )\\\\n}\\\\nexport const GeocodingMap = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <GeocodingMapComponent />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const PolygonMap = addSourceDecorator(() => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  // const [buttonType] = useState<string | null>(null)\\\\n  // console.log(buttonType)\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[20.5937, 78.9629]}\\\\n        zoom={4}\\\\n        zoomControl={boolean('Zoom Controls', true)}\\\\n        locationSearch={boolean('Location Search Bar', true)}\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height={text('Height', '300px')}\\\\n        width={text('Width', '800px')}\\\\n        tiles={\\\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\\\n        }\\\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\\\n        poi={boolean('Points of interest', false)}\\\\n        settingConfig={settingConfig}\\\\n        polygon={object('polygon', polyGeoFenceSampleData)}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\\\n        editPopUpComponent={({ map }: any) => (\\\\n          <EditPopUp\\\\n            onClick={() => {\\\\n              map.closePopup()\\\\n            }}\\\\n          />\\\\n        )}\\\\n        onEdit={action('Value Edited with new Vertex')}\\\\n        popupCustomComponent={{\\\\n          tooltipButton: ({ selectedData }: any) => (\\\\n            <ButtonList\\\\n              listOfButtons={[\\\\n                {\\\\n                  variant: 'button' as tVariant,\\\\n                  children: 'Edit',\\\\n                  // intent: 'table' as tIntent,\\\\n                  iconVariant: 'edit',\\\\n                  primary: true,\\\\n                  onClick: () => console.log('Edit', selectedData)\\\\n                },\\\\n                {\\\\n                  variant: 'button' as tVariant,\\\\n                  children: 'Delete',\\\\n                  iconVariant: 'icomoon-close',\\\\n                  // intent: 'table' as tIntent,\\\\n                  onClick: () => console.log('delete', selectedData)\\\\n                }\\\\n              ]}\\\\n            />\\\\n          )\\\\n        }}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const CircleMap = addSourceDecorator(() => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n\\\\n  // create legend on the basis of markers data\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Route Mode')\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[20.5937, 78.9629]}\\\\n        zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        popupRef={infowindowStructure}\\\\n        settingConfig={settingConfig}\\\\n        onSettingChange={action('setting changed')}\\\\n        circle={object('circle', circleSampleData)}\\\\n        onEdit={action('Value Edited with new Vertex')}\\\\n        editPopUpComponent={({ map }: any) => (\\\\n          <EditPopUp\\\\n            onClick={() => {\\\\n              map.closePopup()\\\\n            }}\\\\n          />\\\\n        )}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\",\\\"locationsMap\\\":{}},\\\"storySource\\\":{\\\"source\\\":\\\"import { action } from '@storybook/addon-actions'\\\\nimport {\\\\n  boolean,\\\\n  object,\\\\n  select,\\\\n  text,\\\\n  withKnobs\\\\n} from '@storybook/addon-knobs'\\\\nimport React from 'react'\\\\nimport LeafletMap from '.'\\\\nimport { path } from '..'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport Settings from '../../atoms/SettingBox/data'\\\\nimport { ButtonList } from '../../molecules/ShowHideColumnPopup'\\\\nimport { tVariant } from '../Button'\\\\nimport { IOption } from '../SettingBox/interface'\\\\nimport {\\\\n  GOOGLE_API_KEY,\\\\n  HERE_MAPS_API_KEY\\\\n} from './constants/googleIntegration.constants'\\\\nimport circleSampleData from './dummyData/CircleSampleData.SampleData'\\\\nimport infowindowStructure from './dummyData/Infowindow.structure.sampleData'\\\\nimport markerIcons from './dummyData/MarkerIcon.sampleData'\\\\nimport markerLayerObj from './dummyData/Markers.sampleData'\\\\nimport polyGeoFenceSampleData from './dummyData/PolyGeoFence.SampleData'\\\\nimport sampleTrackingData from './dummyData/Presentation.Tracking.sampleData'\\\\nimport sampleTripData from './dummyData/Presentation.Trips.sampleData'\\\\nimport { updateSettingsWithLegends } from './helperMethods'\\\\nimport EditPopUp from './SubComponent/EditPopUp'\\\\nimport { tTheme, tTiles } from './types.d'\\\\n\\\\nexport default {\\\\n  title: `${path}/Map`,\\\\n  decorators: [withKnobs],\\\\n  component: LeafletMap\\\\n}\\\\n\\\\n// The options which will be visible for tile-layer select in the story\\\\nconst tileOptions = {\\\\n  'open-street-maps': 'osm',\\\\n  'google-satellite': 'google_satellite',\\\\n  'google-basic': 'google_roadmap',\\\\n  'google-terrain': 'google_terrain',\\\\n  'google-hybrid': 'google_hybrid'\\\\n}\\\\n\\\\nconst themeOptions = {\\\\n  light: 'light',\\\\n  dark: 'dark'\\\\n}\\\\n\\\\nexport const BaseMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        latLngBounds={[[37.09024, -95.712891]]}\\\\n        // zoom={number('Zoom', 4, { min: 1, max: 24 })}\\\\n        zoomControl={boolean('Zoom Controls', true)}\\\\n        locationSearch={boolean('Location Search Bar', true)}\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        heremapsApiKey={HERE_MAPS_API_KEY}\\\\n        height={text('Height', '300px')}\\\\n        width={text('Width', '800px')}\\\\n        tiles={\\\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\\\n        }\\\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\\\n        poi={boolean('Points of interest', false)}\\\\n        settingConfig={settingConfig}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n        rulerControl={boolean('rulerControl', true)}\\\\n        iconsRef={markerIcons}\\\\n        // center={array('center', ['37.7749', '-122.4194'])}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const MarkerMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n\\\\n  // set permission true of markers if sending data,same like heatmap\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\n    option.permission = option.name === 'Markers'\\\\n    option.selected = option.name === 'Markers'\\\\n  })\\\\n  settingConfig['Map Mode'].permission = true\\\\n\\\\n  // create legend on the basis of markers data\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[37.09024, -95.712891]}\\\\n        latLngBounds={[[37.09024, -95.712891]]}\\\\n        // zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='800px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\n        focusMarkerId={text('Marker Id to focus/open', '')}\\\\n        iconsRef={markerIcons}\\\\n        popupRef={infowindowStructure}\\\\n        settingConfig={settingConfig}\\\\n        onSettingChange={action('setting changed')}\\\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const HeatMapAndMarker = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission true of heatmap if sending data,same like marker\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\n    option.permission = true // true for both option\\\\n    option.selected = option.name === 'Markers' // markers selected first\\\\n  })\\\\n  settingConfig['Map Mode'].permission = true\\\\n  // create legend on the basis of markers data\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        // zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='800px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        heatmap={object('Heatmap configuration', {\\\\n          permission: false,\\\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\\\n        })}\\\\n        settingConfig={settingConfig}\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\n        iconsRef={markerIcons}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const HeatMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission true of heatmap if sending data,same like marker\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\n    option.permission = option.name === 'HeatMap'\\\\n    option.selected = option.name === 'HeatMap'\\\\n  })\\\\n  settingConfig['Map Mode'].permission = true\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        // zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        heatmap={object('Heatmap configuration', {\\\\n          permission: true,\\\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\\\n        })}\\\\n        settingConfig={settingConfig}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const TripsMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // create legend on the basis of markers data\\\\n\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        trips={object('Trip Configuration', sampleTripData)}\\\\n        iconsRef={markerIcons}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const TrackingMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[33.298959, -111.9724]}\\\\n        zoom={10}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        tracking={object('Tracking Configuration', sampleTrackingData)}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nconst GeocodingMapComponent = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  // const [searchText, setSearchText] = React.useState(\\\\n  //   'Mumbai, Maharashtra, India'\\\\n  // )\\\\n  // const [position, setPosition] = React.useState([19.0759837, 72.8776559])\\\\n\\\\n  return (\\\\n    <LeafletMap\\\\n      id='leafletBaseMap'\\\\n      classes='baseMap customBaseMap'\\\\n      googleApiKey={GOOGLE_API_KEY}\\\\n      settingConfig={settingConfig}\\\\n      center={[51.0, 19.0]}\\\\n      // markers={object('Marker Configuration', markerLayerObj)}\\\\n      iconsRef={markerIcons}\\\\n      zoomControl\\\\n      locationSearch\\\\n      sendLocationOutside={action('sendLocationOutside ')}\\\\n      isShowMapTileLayer={boolean('isShowMapTileLayer', false)}\\\\n      geocoding={{\\\\n        permission: true,\\\\n\\\\n        /** If you are passing searchText, ensure to pass the position prop as well. */\\\\n        searchText: text('searchText', 'Mumbai'),\\\\n        // searchTextInput: searchText,\\\\n        position: [19.0759837, 72.8776559],\\\\n        isSave: boolean('isSave', true),\\\\n        onGeocodingSave: (e: any) => {\\\\n          window.alert(\\\\n            'Geocodes Saved ' + e.position?.[0] + ', ' + e.position?.[1]\\\\n          )\\\\n        },\\\\n        onGeocodingDragEnd: (pos: [number, number]) => {\\\\n          action('On Geocoding Drag End')(pos)\\\\n          // setPosition(pos)\\\\n          // setSearchText('India')\\\\n        }\\\\n      }}\\\\n      showLegendWrapper={boolean('showLegendWrapper', false)}\\\\n    />\\\\n  )\\\\n}\\\\nexport const GeocodingMap = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <GeocodingMapComponent />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const PolygonMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  // const [buttonType] = useState<string | null>(null)\\\\n  // console.log(buttonType)\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[20.5937, 78.9629]}\\\\n        zoom={4}\\\\n        zoomControl={boolean('Zoom Controls', true)}\\\\n        locationSearch={boolean('Location Search Bar', true)}\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height={text('Height', '300px')}\\\\n        width={text('Width', '800px')}\\\\n        tiles={\\\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\\\n        }\\\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\\\n        poi={boolean('Points of interest', false)}\\\\n        settingConfig={settingConfig}\\\\n        polygon={object('polygon', polyGeoFenceSampleData)}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\\\n        editPopUpComponent={({ map }: any) => (\\\\n          <EditPopUp\\\\n            onClick={() => {\\\\n              map.closePopup()\\\\n            }}\\\\n          />\\\\n        )}\\\\n        onEdit={action('Value Edited with new Vertex')}\\\\n        popupCustomComponent={{\\\\n          tooltipButton: ({ selectedData }: any) => (\\\\n            <ButtonList\\\\n              listOfButtons={[\\\\n                {\\\\n                  variant: 'button' as tVariant,\\\\n                  children: 'Edit',\\\\n                  // intent: 'table' as tIntent,\\\\n                  iconVariant: 'edit',\\\\n                  primary: true,\\\\n                  onClick: () => console.log('Edit', selectedData)\\\\n                },\\\\n                {\\\\n                  variant: 'button' as tVariant,\\\\n                  children: 'Delete',\\\\n                  iconVariant: 'icomoon-close',\\\\n                  // intent: 'table' as tIntent,\\\\n                  onClick: () => console.log('delete', selectedData)\\\\n                }\\\\n              ]}\\\\n            />\\\\n          )\\\\n        }}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const CircleMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n\\\\n  // create legend on the basis of markers data\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Route Mode')\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[20.5937, 78.9629]}\\\\n        zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        popupRef={infowindowStructure}\\\\n        settingConfig={settingConfig}\\\\n        onSettingChange={action('setting changed')}\\\\n        circle={object('circle', circleSampleData)}\\\\n        onEdit={action('Value Edited with new Vertex')}\\\\n        editPopUpComponent={({ map }: any) => (\\\\n          <EditPopUp\\\\n            onClick={() => {\\\\n              map.closePopup()\\\\n            }}\\\\n          />\\\\n        )}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\",\\\"locationsMap\\\":{}},},\\n  title: `${path}/Map`,\\n  decorators: [withKnobs],\\n  component: LeafletMap\\n}\\n\\n// The options which will be visible for tile-layer select in the story\\nconst tileOptions = {\\n  'open-street-maps': 'osm',\\n  'google-satellite': 'google_satellite',\\n  'google-basic': 'google_roadmap',\\n  'google-terrain': 'google_terrain',\\n  'google-hybrid': 'google_hybrid'\\n}\\n\\nconst themeOptions = {\\n  light: 'light',\\n  dark: 'dark'\\n}\\n\\nexport const BaseMap = addSourceDecorator(addSourceDecorator(() => {\\n  const settingConfig = Object.assign({}, Settings)\\n  // set permission false, so that map mode will be hidden\\n  settingConfig['Map Mode'].permission = false\\n\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[51.0, 19.0]}\\n        latLngBounds={[[37.09024, -95.712891]]}\\n        // zoom={number('Zoom', 4, { min: 1, max: 24 })}\\n        zoomControl={boolean('Zoom Controls', true)}\\n        locationSearch={boolean('Location Search Bar', true)}\\n        googleApiKey={GOOGLE_API_KEY}\\n        heremapsApiKey={HERE_MAPS_API_KEY}\\n        height={text('Height', '300px')}\\n        width={text('Width', '800px')}\\n        tiles={\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\n        }\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\n        poi={boolean('Points of interest', false)}\\n        settingConfig={settingConfig}\\n        popupRef={infowindowStructure}\\n        onSettingChange={action('setting changed')}\\n        rulerControl={boolean('rulerControl', true)}\\n        iconsRef={markerIcons}\\n        // center={array('center', ['37.7749', '-122.4194'])}\\n      />\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const MarkerMap = addSourceDecorator(addSourceDecorator(() => {\\n  const settingConfig = Object.assign({}, Settings)\\n\\n  // set permission true of markers if sending data,same like heatmap\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\n    option.permission = option.name === 'Markers'\\n    option.selected = option.name === 'Markers'\\n  })\\n  settingConfig['Map Mode'].permission = true\\n\\n  // create legend on the basis of markers data\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\n\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[37.09024, -95.712891]}\\n        latLngBounds={[[37.09024, -95.712891]]}\\n        // zoom={4}\\n        zoomControl\\n        locationSearch\\n        googleApiKey={GOOGLE_API_KEY}\\n        height='800px'\\n        width='800px'\\n        tiles='google_roadmap'\\n        markers={object('Marker Configuration', markerLayerObj)}\\n        focusMarkerId={text('Marker Id to focus/open', '')}\\n        iconsRef={markerIcons}\\n        popupRef={infowindowStructure}\\n        settingConfig={settingConfig}\\n        onSettingChange={action('setting changed')}\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\n      />\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const HeatMapAndMarker = addSourceDecorator(addSourceDecorator(() => {\\n  const settingConfig = Object.assign({}, Settings)\\n  // set permission true of heatmap if sending data,same like marker\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\n    option.permission = true // true for both option\\n    option.selected = option.name === 'Markers' // markers selected first\\n  })\\n  settingConfig['Map Mode'].permission = true\\n  // create legend on the basis of markers data\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\n\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[51.0, 19.0]}\\n        // zoom={4}\\n        zoomControl\\n        locationSearch\\n        googleApiKey={GOOGLE_API_KEY}\\n        height='800px'\\n        width='800px'\\n        tiles='google_roadmap'\\n        heatmap={object('Heatmap configuration', {\\n          permission: false,\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\n        })}\\n        settingConfig={settingConfig}\\n        markers={object('Marker Configuration', markerLayerObj)}\\n        iconsRef={markerIcons}\\n        popupRef={infowindowStructure}\\n        onSettingChange={action('setting changed')}\\n      />\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const HeatMap = addSourceDecorator(addSourceDecorator(() => {\\n  const settingConfig = Object.assign({}, Settings)\\n  // set permission true of heatmap if sending data,same like marker\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\n    option.permission = option.name === 'HeatMap'\\n    option.selected = option.name === 'HeatMap'\\n  })\\n  settingConfig['Map Mode'].permission = true\\n\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[51.0, 19.0]}\\n        // zoom={4}\\n        zoomControl\\n        locationSearch\\n        googleApiKey={GOOGLE_API_KEY}\\n        height='300px'\\n        width='800px'\\n        tiles='google_roadmap'\\n        heatmap={object('Heatmap configuration', {\\n          permission: true,\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\n        })}\\n        settingConfig={settingConfig}\\n        onSettingChange={action('setting changed')}\\n      />\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const TripsMap = addSourceDecorator(addSourceDecorator(() => {\\n  const settingConfig = Object.assign({}, Settings)\\n  // create legend on the basis of markers data\\n\\n  // set permission false, so that map mode will be hidden\\n  settingConfig['Map Mode'].permission = false\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[51.0, 19.0]}\\n        zoom={4}\\n        zoomControl\\n        locationSearch\\n        googleApiKey={GOOGLE_API_KEY}\\n        height='300px'\\n        width='800px'\\n        tiles='google_roadmap'\\n        trips={object('Trip Configuration', sampleTripData)}\\n        iconsRef={markerIcons}\\n        popupRef={infowindowStructure}\\n        onSettingChange={action('setting changed')}\\n      />\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const TrackingMap = addSourceDecorator(addSourceDecorator(() => {\\n  const settingConfig = Object.assign({}, Settings)\\n\\n  // set permission false, so that map mode will be hidden\\n  settingConfig['Map Mode'].permission = false\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[33.298959, -111.9724]}\\n        zoom={10}\\n        zoomControl\\n        locationSearch\\n        googleApiKey={GOOGLE_API_KEY}\\n        height='300px'\\n        width='800px'\\n        tiles='google_roadmap'\\n        tracking={object('Tracking Configuration', sampleTrackingData)}\\n        onSettingChange={action('setting changed')}\\n      />\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nconst GeocodingMapComponent = () => {\\n  const settingConfig = Object.assign({}, Settings)\\n  // set permission false, so that map mode will be hidden\\n  settingConfig['Map Mode'].permission = false\\n  // const [searchText, setSearchText] = React.useState(\\n  //   'Mumbai, Maharashtra, India'\\n  // )\\n  // const [position, setPosition] = React.useState([19.0759837, 72.8776559])\\n\\n  return (\\n    <LeafletMap\\n      id='leafletBaseMap'\\n      classes='baseMap customBaseMap'\\n      googleApiKey={GOOGLE_API_KEY}\\n      settingConfig={settingConfig}\\n      center={[51.0, 19.0]}\\n      // markers={object('Marker Configuration', markerLayerObj)}\\n      iconsRef={markerIcons}\\n      zoomControl\\n      locationSearch\\n      sendLocationOutside={action('sendLocationOutside ')}\\n      isShowMapTileLayer={boolean('isShowMapTileLayer', false)}\\n      geocoding={{\\n        permission: true,\\n\\n        /** If you are passing searchText, ensure to pass the position prop as well. */\\n        searchText: text('searchText', 'Mumbai'),\\n        // searchTextInput: searchText,\\n        position: [19.0759837, 72.8776559],\\n        isSave: boolean('isSave', true),\\n        onGeocodingSave: (e: any) => {\\n          window.alert(\\n            'Geocodes Saved ' + e.position?.[0] + ', ' + e.position?.[1]\\n          )\\n        },\\n        onGeocodingDragEnd: (pos: [number, number]) => {\\n          action('On Geocoding Drag End')(pos)\\n          // setPosition(pos)\\n          // setSearchText('India')\\n        }\\n      }}\\n      showLegendWrapper={boolean('showLegendWrapper', false)}\\n    />\\n  )\\n}\\nexport const GeocodingMap = addSourceDecorator(addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <GeocodingMapComponent />\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const PolygonMap = addSourceDecorator(addSourceDecorator(() => {\\n  const settingConfig = Object.assign({}, Settings)\\n  // set permission false, so that map mode will be hidden\\n  settingConfig['Map Mode'].permission = false\\n  // const [buttonType] = useState<string | null>(null)\\n  // console.log(buttonType)\\n\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[20.5937, 78.9629]}\\n        zoom={4}\\n        zoomControl={boolean('Zoom Controls', true)}\\n        locationSearch={boolean('Location Search Bar', true)}\\n        googleApiKey={GOOGLE_API_KEY}\\n        height={text('Height', '300px')}\\n        width={text('Width', '800px')}\\n        tiles={\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\n        }\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\n        poi={boolean('Points of interest', false)}\\n        settingConfig={settingConfig}\\n        polygon={object('polygon', polyGeoFenceSampleData)}\\n        popupRef={infowindowStructure}\\n        onSettingChange={action('setting changed')}\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\n        editPopUpComponent={({ map }: any) => (\\n          <EditPopUp\\n            onClick={() => {\\n              map.closePopup()\\n            }}\\n          />\\n        )}\\n        onEdit={action('Value Edited with new Vertex')}\\n        popupCustomComponent={{\\n          tooltipButton: ({ selectedData }: any) => (\\n            <ButtonList\\n              listOfButtons={[\\n                {\\n                  variant: 'button' as tVariant,\\n                  children: 'Edit',\\n                  // intent: 'table' as tIntent,\\n                  iconVariant: 'edit',\\n                  primary: true,\\n                  onClick: () => console.log('Edit', selectedData)\\n                },\\n                {\\n                  variant: 'button' as tVariant,\\n                  children: 'Delete',\\n                  iconVariant: 'icomoon-close',\\n                  // intent: 'table' as tIntent,\\n                  onClick: () => console.log('delete', selectedData)\\n                }\\n              ]}\\n            />\\n          )\\n        }}\\n      />\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const CircleMap = addSourceDecorator(addSourceDecorator(() => {\\n  const settingConfig = Object.assign({}, Settings)\\n\\n  // set permission false, so that map mode will be hidden\\n  settingConfig['Map Mode'].permission = false\\n\\n  // create legend on the basis of markers data\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Route Mode')\\n\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[20.5937, 78.9629]}\\n        zoom={4}\\n        zoomControl\\n        locationSearch\\n        googleApiKey={GOOGLE_API_KEY}\\n        height='300px'\\n        width='800px'\\n        tiles='google_roadmap'\\n        popupRef={infowindowStructure}\\n        settingConfig={settingConfig}\\n        onSettingChange={action('setting changed')}\\n        circle={object('circle', circleSampleData)}\\n        onEdit={action('Value Edited with new Vertex')}\\n        editPopUpComponent={({ map }: any) => (\\n          <EditPopUp\\n            onClick={() => {\\n              map.closePopup()\\n            }}\\n          />\\n        )}\\n      />\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\"; // @ts-ignore\n\nvar __ADDS_MAP__ = {}; // @ts-ignore\n\nvar __MAIN_FILE_LOCATION__ = \"/Map.stories.tsx\"; // @ts-ignore\n\nvar __MODULE_DEPENDENCIES__ = []; // @ts-ignore\n\nvar __LOCAL_DEPENDENCIES__ = {}; // @ts-ignore\n\nvar __IDS_TO_FRAMEWORKS__ = {};\n/* eslint-disable */\n// @ts-nocheck\n// @ts-ignore\n\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource; // @ts-ignore\n\n\nvar addSourceDecorator = require(\"@storybook/source-loader/preview\").addSource; // @ts-ignore\n\n\nvar __SOURCE_PREFIX__ = \"/Users/farhanansari/Code/ui-library/src/components/atoms/Map\"; // @ts-ignore\n\nvar __STORY__ = \"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/farhanansari/Code/ui-library/src/components/atoms/Map\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"import { action } from '@storybook/addon-actions'\\\\nimport {\\\\n  boolean,\\\\n  object,\\\\n  select,\\\\n  text,\\\\n  withKnobs\\\\n} from '@storybook/addon-knobs'\\\\nimport React from 'react'\\\\nimport LeafletMap from '.'\\\\nimport { path } from '..'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport Settings from '../../atoms/SettingBox/data'\\\\nimport { ButtonList } from '../../molecules/ShowHideColumnPopup'\\\\nimport { tVariant } from '../Button'\\\\nimport { IOption } from '../SettingBox/interface'\\\\nimport {\\\\n  GOOGLE_API_KEY,\\\\n  HERE_MAPS_API_KEY\\\\n} from './constants/googleIntegration.constants'\\\\nimport circleSampleData from './dummyData/CircleSampleData.SampleData'\\\\nimport infowindowStructure from './dummyData/Infowindow.structure.sampleData'\\\\nimport markerIcons from './dummyData/MarkerIcon.sampleData'\\\\nimport markerLayerObj from './dummyData/Markers.sampleData'\\\\nimport polyGeoFenceSampleData from './dummyData/PolyGeoFence.SampleData'\\\\nimport sampleTrackingData from './dummyData/Presentation.Tracking.sampleData'\\\\nimport sampleTripData from './dummyData/Presentation.Trips.sampleData'\\\\nimport { updateSettingsWithLegends } from './helperMethods'\\\\nimport EditPopUp from './SubComponent/EditPopUp'\\\\nimport { tTheme, tTiles } from './types.d'\\\\n\\\\nexport default {\\\\n  title: `${path}/Map`,\\\\n  decorators: [withKnobs],\\\\n  component: LeafletMap\\\\n}\\\\n\\\\n// The options which will be visible for tile-layer select in the story\\\\nconst tileOptions = {\\\\n  'open-street-maps': 'osm',\\\\n  'google-satellite': 'google_satellite',\\\\n  'google-basic': 'google_roadmap',\\\\n  'google-terrain': 'google_terrain',\\\\n  'google-hybrid': 'google_hybrid'\\\\n}\\\\n\\\\nconst themeOptions = {\\\\n  light: 'light',\\\\n  dark: 'dark'\\\\n}\\\\n\\\\nexport const BaseMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        latLngBounds={[[37.09024, -95.712891]]}\\\\n        // zoom={number('Zoom', 4, { min: 1, max: 24 })}\\\\n        zoomControl={boolean('Zoom Controls', true)}\\\\n        locationSearch={boolean('Location Search Bar', true)}\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        heremapsApiKey={HERE_MAPS_API_KEY}\\\\n        height={text('Height', '300px')}\\\\n        width={text('Width', '800px')}\\\\n        tiles={\\\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\\\n        }\\\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\\\n        poi={boolean('Points of interest', false)}\\\\n        settingConfig={settingConfig}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n        rulerControl={boolean('rulerControl', true)}\\\\n        iconsRef={markerIcons}\\\\n        // center={array('center', ['37.7749', '-122.4194'])}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const MarkerMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n\\\\n  // set permission true of markers if sending data,same like heatmap\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\n    option.permission = option.name === 'Markers'\\\\n    option.selected = option.name === 'Markers'\\\\n  })\\\\n  settingConfig['Map Mode'].permission = true\\\\n\\\\n  // create legend on the basis of markers data\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[37.09024, -95.712891]}\\\\n        latLngBounds={[[37.09024, -95.712891]]}\\\\n        // zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='800px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\n        focusMarkerId={text('Marker Id to focus/open', '')}\\\\n        iconsRef={markerIcons}\\\\n        popupRef={infowindowStructure}\\\\n        settingConfig={settingConfig}\\\\n        onSettingChange={action('setting changed')}\\\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const HeatMapAndMarker = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission true of heatmap if sending data,same like marker\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\n    option.permission = true // true for both option\\\\n    option.selected = option.name === 'Markers' // markers selected first\\\\n  })\\\\n  settingConfig['Map Mode'].permission = true\\\\n  // create legend on the basis of markers data\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        // zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='800px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        heatmap={object('Heatmap configuration', {\\\\n          permission: false,\\\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\\\n        })}\\\\n        settingConfig={settingConfig}\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\n        iconsRef={markerIcons}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const HeatMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission true of heatmap if sending data,same like marker\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\n    option.permission = option.name === 'HeatMap'\\\\n    option.selected = option.name === 'HeatMap'\\\\n  })\\\\n  settingConfig['Map Mode'].permission = true\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        // zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        heatmap={object('Heatmap configuration', {\\\\n          permission: true,\\\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\\\n        })}\\\\n        settingConfig={settingConfig}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const TripsMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // create legend on the basis of markers data\\\\n\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        trips={object('Trip Configuration', sampleTripData)}\\\\n        iconsRef={markerIcons}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const TrackingMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[33.298959, -111.9724]}\\\\n        zoom={10}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        tracking={object('Tracking Configuration', sampleTrackingData)}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nconst GeocodingMapComponent = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  // const [searchText, setSearchText] = React.useState(\\\\n  //   'Mumbai, Maharashtra, India'\\\\n  // )\\\\n  // const [position, setPosition] = React.useState([19.0759837, 72.8776559])\\\\n\\\\n  return (\\\\n    <LeafletMap\\\\n      id='leafletBaseMap'\\\\n      classes='baseMap customBaseMap'\\\\n      googleApiKey={GOOGLE_API_KEY}\\\\n      settingConfig={settingConfig}\\\\n      center={[51.0, 19.0]}\\\\n      // markers={object('Marker Configuration', markerLayerObj)}\\\\n      iconsRef={markerIcons}\\\\n      zoomControl\\\\n      locationSearch\\\\n      sendLocationOutside={action('sendLocationOutside ')}\\\\n      isShowMapTileLayer={boolean('isShowMapTileLayer', false)}\\\\n      geocoding={{\\\\n        permission: true,\\\\n\\\\n        /** If you are passing searchText, ensure to pass the position prop as well. */\\\\n        searchText: text('searchText', 'Mumbai'),\\\\n        // searchTextInput: searchText,\\\\n        position: [19.0759837, 72.8776559],\\\\n        isSave: boolean('isSave', true),\\\\n        onGeocodingSave: (e: any) => {\\\\n          window.alert(\\\\n            'Geocodes Saved ' + e.position?.[0] + ', ' + e.position?.[1]\\\\n          )\\\\n        },\\\\n        onGeocodingDragEnd: (pos: [number, number]) => {\\\\n          action('On Geocoding Drag End')(pos)\\\\n          // setPosition(pos)\\\\n          // setSearchText('India')\\\\n        }\\\\n      }}\\\\n      showLegendWrapper={boolean('showLegendWrapper', false)}\\\\n    />\\\\n  )\\\\n}\\\\nexport const GeocodingMap = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <GeocodingMapComponent />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const PolygonMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  // const [buttonType] = useState<string | null>(null)\\\\n  // console.log(buttonType)\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[20.5937, 78.9629]}\\\\n        zoom={4}\\\\n        zoomControl={boolean('Zoom Controls', true)}\\\\n        locationSearch={boolean('Location Search Bar', true)}\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height={text('Height', '300px')}\\\\n        width={text('Width', '800px')}\\\\n        tiles={\\\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\\\n        }\\\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\\\n        poi={boolean('Points of interest', false)}\\\\n        settingConfig={settingConfig}\\\\n        polygon={object('polygon', polyGeoFenceSampleData)}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\\\n        editPopUpComponent={({ map }: any) => (\\\\n          <EditPopUp\\\\n            onClick={() => {\\\\n              map.closePopup()\\\\n            }}\\\\n          />\\\\n        )}\\\\n        onEdit={action('Value Edited with new Vertex')}\\\\n        popupCustomComponent={{\\\\n          tooltipButton: ({ selectedData }: any) => (\\\\n            <ButtonList\\\\n              listOfButtons={[\\\\n                {\\\\n                  variant: 'button' as tVariant,\\\\n                  children: 'Edit',\\\\n                  // intent: 'table' as tIntent,\\\\n                  iconVariant: 'edit',\\\\n                  primary: true,\\\\n                  onClick: () => console.log('Edit', selectedData)\\\\n                },\\\\n                {\\\\n                  variant: 'button' as tVariant,\\\\n                  children: 'Delete',\\\\n                  iconVariant: 'icomoon-close',\\\\n                  // intent: 'table' as tIntent,\\\\n                  onClick: () => console.log('delete', selectedData)\\\\n                }\\\\n              ]}\\\\n            />\\\\n          )\\\\n        }}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const CircleMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n\\\\n  // create legend on the basis of markers data\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Route Mode')\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[20.5937, 78.9629]}\\\\n        zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        popupRef={infowindowStructure}\\\\n        settingConfig={settingConfig}\\\\n        onSettingChange={action('setting changed')}\\\\n        circle={object('circle', circleSampleData)}\\\\n        onEdit={action('Value Edited with new Vertex')}\\\\n        editPopUpComponent={({ map }: any) => (\\\\n          <EditPopUp\\\\n            onClick={() => {\\\\n              map.closePopup()\\\\n            }}\\\\n          />\\\\n        )}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/Map.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\nimport { action } from '@storybook/addon-actions'\\nimport {\\n  boolean,\\n  object,\\n  select,\\n  text,\\n  withKnobs\\n} from '@storybook/addon-knobs'\\nimport React from 'react'\\nimport LeafletMap from '.'\\nimport { path } from '..'\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\nimport Settings from '../../atoms/SettingBox/data'\\nimport { ButtonList } from '../../molecules/ShowHideColumnPopup'\\nimport { tVariant } from '../Button'\\nimport { IOption } from '../SettingBox/interface'\\nimport {\\n  GOOGLE_API_KEY,\\n  HERE_MAPS_API_KEY\\n} from './constants/googleIntegration.constants'\\nimport circleSampleData from './dummyData/CircleSampleData.SampleData'\\nimport infowindowStructure from './dummyData/Infowindow.structure.sampleData'\\nimport markerIcons from './dummyData/MarkerIcon.sampleData'\\nimport markerLayerObj from './dummyData/Markers.sampleData'\\nimport polyGeoFenceSampleData from './dummyData/PolyGeoFence.SampleData'\\nimport sampleTrackingData from './dummyData/Presentation.Tracking.sampleData'\\nimport sampleTripData from './dummyData/Presentation.Trips.sampleData'\\nimport { updateSettingsWithLegends } from './helperMethods'\\nimport EditPopUp from './SubComponent/EditPopUp'\\nimport { tTheme, tTiles } from './types.d'\\n\\nexport default {parameters: {\\\"storySource\\\":{\\\"source\\\":\\\"import { action } from '@storybook/addon-actions'\\\\nimport {\\\\n  boolean,\\\\n  object,\\\\n  select,\\\\n  text,\\\\n  withKnobs\\\\n} from '@storybook/addon-knobs'\\\\nimport React from 'react'\\\\nimport LeafletMap from '.'\\\\nimport { path } from '..'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport Settings from '../../atoms/SettingBox/data'\\\\nimport { ButtonList } from '../../molecules/ShowHideColumnPopup'\\\\nimport { tVariant } from '../Button'\\\\nimport { IOption } from '../SettingBox/interface'\\\\nimport {\\\\n  GOOGLE_API_KEY,\\\\n  HERE_MAPS_API_KEY\\\\n} from './constants/googleIntegration.constants'\\\\nimport circleSampleData from './dummyData/CircleSampleData.SampleData'\\\\nimport infowindowStructure from './dummyData/Infowindow.structure.sampleData'\\\\nimport markerIcons from './dummyData/MarkerIcon.sampleData'\\\\nimport markerLayerObj from './dummyData/Markers.sampleData'\\\\nimport polyGeoFenceSampleData from './dummyData/PolyGeoFence.SampleData'\\\\nimport sampleTrackingData from './dummyData/Presentation.Tracking.sampleData'\\\\nimport sampleTripData from './dummyData/Presentation.Trips.sampleData'\\\\nimport { updateSettingsWithLegends } from './helperMethods'\\\\nimport EditPopUp from './SubComponent/EditPopUp'\\\\nimport { tTheme, tTiles } from './types.d'\\\\n\\\\nexport default {\\\\n  title: `${path}/Map`,\\\\n  decorators: [withKnobs],\\\\n  component: LeafletMap\\\\n}\\\\n\\\\n// The options which will be visible for tile-layer select in the story\\\\nconst tileOptions = {\\\\n  'open-street-maps': 'osm',\\\\n  'google-satellite': 'google_satellite',\\\\n  'google-basic': 'google_roadmap',\\\\n  'google-terrain': 'google_terrain',\\\\n  'google-hybrid': 'google_hybrid'\\\\n}\\\\n\\\\nconst themeOptions = {\\\\n  light: 'light',\\\\n  dark: 'dark'\\\\n}\\\\n\\\\nexport const BaseMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        latLngBounds={[[37.09024, -95.712891]]}\\\\n        // zoom={number('Zoom', 4, { min: 1, max: 24 })}\\\\n        zoomControl={boolean('Zoom Controls', true)}\\\\n        locationSearch={boolean('Location Search Bar', true)}\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        heremapsApiKey={HERE_MAPS_API_KEY}\\\\n        height={text('Height', '300px')}\\\\n        width={text('Width', '800px')}\\\\n        tiles={\\\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\\\n        }\\\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\\\n        poi={boolean('Points of interest', false)}\\\\n        settingConfig={settingConfig}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n        rulerControl={boolean('rulerControl', true)}\\\\n        iconsRef={markerIcons}\\\\n        // center={array('center', ['37.7749', '-122.4194'])}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const MarkerMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n\\\\n  // set permission true of markers if sending data,same like heatmap\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\n    option.permission = option.name === 'Markers'\\\\n    option.selected = option.name === 'Markers'\\\\n  })\\\\n  settingConfig['Map Mode'].permission = true\\\\n\\\\n  // create legend on the basis of markers data\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[37.09024, -95.712891]}\\\\n        latLngBounds={[[37.09024, -95.712891]]}\\\\n        // zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='800px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\n        focusMarkerId={text('Marker Id to focus/open', '')}\\\\n        iconsRef={markerIcons}\\\\n        popupRef={infowindowStructure}\\\\n        settingConfig={settingConfig}\\\\n        onSettingChange={action('setting changed')}\\\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const HeatMapAndMarker = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission true of heatmap if sending data,same like marker\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\n    option.permission = true // true for both option\\\\n    option.selected = option.name === 'Markers' // markers selected first\\\\n  })\\\\n  settingConfig['Map Mode'].permission = true\\\\n  // create legend on the basis of markers data\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        // zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='800px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        heatmap={object('Heatmap configuration', {\\\\n          permission: false,\\\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\\\n        })}\\\\n        settingConfig={settingConfig}\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\n        iconsRef={markerIcons}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const HeatMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission true of heatmap if sending data,same like marker\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\n    option.permission = option.name === 'HeatMap'\\\\n    option.selected = option.name === 'HeatMap'\\\\n  })\\\\n  settingConfig['Map Mode'].permission = true\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        // zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        heatmap={object('Heatmap configuration', {\\\\n          permission: true,\\\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\\\n        })}\\\\n        settingConfig={settingConfig}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const TripsMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // create legend on the basis of markers data\\\\n\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        trips={object('Trip Configuration', sampleTripData)}\\\\n        iconsRef={markerIcons}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const TrackingMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[33.298959, -111.9724]}\\\\n        zoom={10}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        tracking={object('Tracking Configuration', sampleTrackingData)}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nconst GeocodingMapComponent = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  // const [searchText, setSearchText] = React.useState(\\\\n  //   'Mumbai, Maharashtra, India'\\\\n  // )\\\\n  // const [position, setPosition] = React.useState([19.0759837, 72.8776559])\\\\n\\\\n  return (\\\\n    <LeafletMap\\\\n      id='leafletBaseMap'\\\\n      classes='baseMap customBaseMap'\\\\n      googleApiKey={GOOGLE_API_KEY}\\\\n      settingConfig={settingConfig}\\\\n      center={[51.0, 19.0]}\\\\n      // markers={object('Marker Configuration', markerLayerObj)}\\\\n      iconsRef={markerIcons}\\\\n      zoomControl\\\\n      locationSearch\\\\n      sendLocationOutside={action('sendLocationOutside ')}\\\\n      isShowMapTileLayer={boolean('isShowMapTileLayer', false)}\\\\n      geocoding={{\\\\n        permission: true,\\\\n\\\\n        /** If you are passing searchText, ensure to pass the position prop as well. */\\\\n        searchText: text('searchText', 'Mumbai'),\\\\n        // searchTextInput: searchText,\\\\n        position: [19.0759837, 72.8776559],\\\\n        isSave: boolean('isSave', true),\\\\n        onGeocodingSave: (e: any) => {\\\\n          window.alert(\\\\n            'Geocodes Saved ' + e.position?.[0] + ', ' + e.position?.[1]\\\\n          )\\\\n        },\\\\n        onGeocodingDragEnd: (pos: [number, number]) => {\\\\n          action('On Geocoding Drag End')(pos)\\\\n          // setPosition(pos)\\\\n          // setSearchText('India')\\\\n        }\\\\n      }}\\\\n      showLegendWrapper={boolean('showLegendWrapper', false)}\\\\n    />\\\\n  )\\\\n}\\\\nexport const GeocodingMap = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <GeocodingMapComponent />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const PolygonMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  // const [buttonType] = useState<string | null>(null)\\\\n  // console.log(buttonType)\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[20.5937, 78.9629]}\\\\n        zoom={4}\\\\n        zoomControl={boolean('Zoom Controls', true)}\\\\n        locationSearch={boolean('Location Search Bar', true)}\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height={text('Height', '300px')}\\\\n        width={text('Width', '800px')}\\\\n        tiles={\\\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\\\n        }\\\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\\\n        poi={boolean('Points of interest', false)}\\\\n        settingConfig={settingConfig}\\\\n        polygon={object('polygon', polyGeoFenceSampleData)}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\\\n        editPopUpComponent={({ map }: any) => (\\\\n          <EditPopUp\\\\n            onClick={() => {\\\\n              map.closePopup()\\\\n            }}\\\\n          />\\\\n        )}\\\\n        onEdit={action('Value Edited with new Vertex')}\\\\n        popupCustomComponent={{\\\\n          tooltipButton: ({ selectedData }: any) => (\\\\n            <ButtonList\\\\n              listOfButtons={[\\\\n                {\\\\n                  variant: 'button' as tVariant,\\\\n                  children: 'Edit',\\\\n                  // intent: 'table' as tIntent,\\\\n                  iconVariant: 'edit',\\\\n                  primary: true,\\\\n                  onClick: () => console.log('Edit', selectedData)\\\\n                },\\\\n                {\\\\n                  variant: 'button' as tVariant,\\\\n                  children: 'Delete',\\\\n                  iconVariant: 'icomoon-close',\\\\n                  // intent: 'table' as tIntent,\\\\n                  onClick: () => console.log('delete', selectedData)\\\\n                }\\\\n              ]}\\\\n            />\\\\n          )\\\\n        }}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const CircleMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n\\\\n  // create legend on the basis of markers data\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Route Mode')\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[20.5937, 78.9629]}\\\\n        zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        popupRef={infowindowStructure}\\\\n        settingConfig={settingConfig}\\\\n        onSettingChange={action('setting changed')}\\\\n        circle={object('circle', circleSampleData)}\\\\n        onEdit={action('Value Edited with new Vertex')}\\\\n        editPopUpComponent={({ map }: any) => (\\\\n          <EditPopUp\\\\n            onClick={() => {\\\\n              map.closePopup()\\\\n            }}\\\\n          />\\\\n        )}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\",\\\"locationsMap\\\":{}},},\\n  title: `${path}/Map`,\\n  decorators: [withKnobs],\\n  component: LeafletMap\\n}\\n\\n// The options which will be visible for tile-layer select in the story\\nconst tileOptions = {\\n  'open-street-maps': 'osm',\\n  'google-satellite': 'google_satellite',\\n  'google-basic': 'google_roadmap',\\n  'google-terrain': 'google_terrain',\\n  'google-hybrid': 'google_hybrid'\\n}\\n\\nconst themeOptions = {\\n  light: 'light',\\n  dark: 'dark'\\n}\\n\\nexport const BaseMap = addSourceDecorator(() => {\\n  const settingConfig = Object.assign({}, Settings)\\n  // set permission false, so that map mode will be hidden\\n  settingConfig['Map Mode'].permission = false\\n\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[51.0, 19.0]}\\n        latLngBounds={[[37.09024, -95.712891]]}\\n        // zoom={number('Zoom', 4, { min: 1, max: 24 })}\\n        zoomControl={boolean('Zoom Controls', true)}\\n        locationSearch={boolean('Location Search Bar', true)}\\n        googleApiKey={GOOGLE_API_KEY}\\n        heremapsApiKey={HERE_MAPS_API_KEY}\\n        height={text('Height', '300px')}\\n        width={text('Width', '800px')}\\n        tiles={\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\n        }\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\n        poi={boolean('Points of interest', false)}\\n        settingConfig={settingConfig}\\n        popupRef={infowindowStructure}\\n        onSettingChange={action('setting changed')}\\n        rulerControl={boolean('rulerControl', true)}\\n        iconsRef={markerIcons}\\n        // center={array('center', ['37.7749', '-122.4194'])}\\n      />\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nexport const MarkerMap = addSourceDecorator(() => {\\n  const settingConfig = Object.assign({}, Settings)\\n\\n  // set permission true of markers if sending data,same like heatmap\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\n    option.permission = option.name === 'Markers'\\n    option.selected = option.name === 'Markers'\\n  })\\n  settingConfig['Map Mode'].permission = true\\n\\n  // create legend on the basis of markers data\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\n\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[37.09024, -95.712891]}\\n        latLngBounds={[[37.09024, -95.712891]]}\\n        // zoom={4}\\n        zoomControl\\n        locationSearch\\n        googleApiKey={GOOGLE_API_KEY}\\n        height='800px'\\n        width='800px'\\n        tiles='google_roadmap'\\n        markers={object('Marker Configuration', markerLayerObj)}\\n        focusMarkerId={text('Marker Id to focus/open', '')}\\n        iconsRef={markerIcons}\\n        popupRef={infowindowStructure}\\n        settingConfig={settingConfig}\\n        onSettingChange={action('setting changed')}\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\n      />\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nexport const HeatMapAndMarker = addSourceDecorator(() => {\\n  const settingConfig = Object.assign({}, Settings)\\n  // set permission true of heatmap if sending data,same like marker\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\n    option.permission = true // true for both option\\n    option.selected = option.name === 'Markers' // markers selected first\\n  })\\n  settingConfig['Map Mode'].permission = true\\n  // create legend on the basis of markers data\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\n\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[51.0, 19.0]}\\n        // zoom={4}\\n        zoomControl\\n        locationSearch\\n        googleApiKey={GOOGLE_API_KEY}\\n        height='800px'\\n        width='800px'\\n        tiles='google_roadmap'\\n        heatmap={object('Heatmap configuration', {\\n          permission: false,\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\n        })}\\n        settingConfig={settingConfig}\\n        markers={object('Marker Configuration', markerLayerObj)}\\n        iconsRef={markerIcons}\\n        popupRef={infowindowStructure}\\n        onSettingChange={action('setting changed')}\\n      />\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nexport const HeatMap = addSourceDecorator(() => {\\n  const settingConfig = Object.assign({}, Settings)\\n  // set permission true of heatmap if sending data,same like marker\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\n    option.permission = option.name === 'HeatMap'\\n    option.selected = option.name === 'HeatMap'\\n  })\\n  settingConfig['Map Mode'].permission = true\\n\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[51.0, 19.0]}\\n        // zoom={4}\\n        zoomControl\\n        locationSearch\\n        googleApiKey={GOOGLE_API_KEY}\\n        height='300px'\\n        width='800px'\\n        tiles='google_roadmap'\\n        heatmap={object('Heatmap configuration', {\\n          permission: true,\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\n        })}\\n        settingConfig={settingConfig}\\n        onSettingChange={action('setting changed')}\\n      />\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nexport const TripsMap = addSourceDecorator(() => {\\n  const settingConfig = Object.assign({}, Settings)\\n  // create legend on the basis of markers data\\n\\n  // set permission false, so that map mode will be hidden\\n  settingConfig['Map Mode'].permission = false\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[51.0, 19.0]}\\n        zoom={4}\\n        zoomControl\\n        locationSearch\\n        googleApiKey={GOOGLE_API_KEY}\\n        height='300px'\\n        width='800px'\\n        tiles='google_roadmap'\\n        trips={object('Trip Configuration', sampleTripData)}\\n        iconsRef={markerIcons}\\n        popupRef={infowindowStructure}\\n        onSettingChange={action('setting changed')}\\n      />\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nexport const TrackingMap = addSourceDecorator(() => {\\n  const settingConfig = Object.assign({}, Settings)\\n\\n  // set permission false, so that map mode will be hidden\\n  settingConfig['Map Mode'].permission = false\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[33.298959, -111.9724]}\\n        zoom={10}\\n        zoomControl\\n        locationSearch\\n        googleApiKey={GOOGLE_API_KEY}\\n        height='300px'\\n        width='800px'\\n        tiles='google_roadmap'\\n        tracking={object('Tracking Configuration', sampleTrackingData)}\\n        onSettingChange={action('setting changed')}\\n      />\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nconst GeocodingMapComponent = () => {\\n  const settingConfig = Object.assign({}, Settings)\\n  // set permission false, so that map mode will be hidden\\n  settingConfig['Map Mode'].permission = false\\n  // const [searchText, setSearchText] = React.useState(\\n  //   'Mumbai, Maharashtra, India'\\n  // )\\n  // const [position, setPosition] = React.useState([19.0759837, 72.8776559])\\n\\n  return (\\n    <LeafletMap\\n      id='leafletBaseMap'\\n      classes='baseMap customBaseMap'\\n      googleApiKey={GOOGLE_API_KEY}\\n      settingConfig={settingConfig}\\n      center={[51.0, 19.0]}\\n      // markers={object('Marker Configuration', markerLayerObj)}\\n      iconsRef={markerIcons}\\n      zoomControl\\n      locationSearch\\n      sendLocationOutside={action('sendLocationOutside ')}\\n      isShowMapTileLayer={boolean('isShowMapTileLayer', false)}\\n      geocoding={{\\n        permission: true,\\n\\n        /** If you are passing searchText, ensure to pass the position prop as well. */\\n        searchText: text('searchText', 'Mumbai'),\\n        // searchTextInput: searchText,\\n        position: [19.0759837, 72.8776559],\\n        isSave: boolean('isSave', true),\\n        onGeocodingSave: (e: any) => {\\n          window.alert(\\n            'Geocodes Saved ' + e.position?.[0] + ', ' + e.position?.[1]\\n          )\\n        },\\n        onGeocodingDragEnd: (pos: [number, number]) => {\\n          action('On Geocoding Drag End')(pos)\\n          // setPosition(pos)\\n          // setSearchText('India')\\n        }\\n      }}\\n      showLegendWrapper={boolean('showLegendWrapper', false)}\\n    />\\n  )\\n}\\nexport const GeocodingMap = addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <GeocodingMapComponent />\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nexport const PolygonMap = addSourceDecorator(() => {\\n  const settingConfig = Object.assign({}, Settings)\\n  // set permission false, so that map mode will be hidden\\n  settingConfig['Map Mode'].permission = false\\n  // const [buttonType] = useState<string | null>(null)\\n  // console.log(buttonType)\\n\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[20.5937, 78.9629]}\\n        zoom={4}\\n        zoomControl={boolean('Zoom Controls', true)}\\n        locationSearch={boolean('Location Search Bar', true)}\\n        googleApiKey={GOOGLE_API_KEY}\\n        height={text('Height', '300px')}\\n        width={text('Width', '800px')}\\n        tiles={\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\n        }\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\n        poi={boolean('Points of interest', false)}\\n        settingConfig={settingConfig}\\n        polygon={object('polygon', polyGeoFenceSampleData)}\\n        popupRef={infowindowStructure}\\n        onSettingChange={action('setting changed')}\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\n        editPopUpComponent={({ map }: any) => (\\n          <EditPopUp\\n            onClick={() => {\\n              map.closePopup()\\n            }}\\n          />\\n        )}\\n        onEdit={action('Value Edited with new Vertex')}\\n        popupCustomComponent={{\\n          tooltipButton: ({ selectedData }: any) => (\\n            <ButtonList\\n              listOfButtons={[\\n                {\\n                  variant: 'button' as tVariant,\\n                  children: 'Edit',\\n                  // intent: 'table' as tIntent,\\n                  iconVariant: 'edit',\\n                  primary: true,\\n                  onClick: () => console.log('Edit', selectedData)\\n                },\\n                {\\n                  variant: 'button' as tVariant,\\n                  children: 'Delete',\\n                  iconVariant: 'icomoon-close',\\n                  // intent: 'table' as tIntent,\\n                  onClick: () => console.log('delete', selectedData)\\n                }\\n              ]}\\n            />\\n          )\\n        }}\\n      />\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nexport const CircleMap = addSourceDecorator(() => {\\n  const settingConfig = Object.assign({}, Settings)\\n\\n  // set permission false, so that map mode will be hidden\\n  settingConfig['Map Mode'].permission = false\\n\\n  // create legend on the basis of markers data\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Route Mode')\\n\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[20.5937, 78.9629]}\\n        zoom={4}\\n        zoomControl\\n        locationSearch\\n        googleApiKey={GOOGLE_API_KEY}\\n        height='300px'\\n        width='800px'\\n        tiles='google_roadmap'\\n        popupRef={infowindowStructure}\\n        settingConfig={settingConfig}\\n        onSettingChange={action('setting changed')}\\n        circle={object('circle', circleSampleData)}\\n        onEdit={action('Value Edited with new Vertex')}\\n        editPopUpComponent={({ map }: any) => (\\n          <EditPopUp\\n            onClick={() => {\\n              map.closePopup()\\n            }}\\n          />\\n        )}\\n      />\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\"; // @ts-ignore\n\nvar __ADDS_MAP__ = {}; // @ts-ignore\n\nvar __MAIN_FILE_LOCATION__ = \"/Map.stories.tsx\"; // @ts-ignore\n\nvar __MODULE_DEPENDENCIES__ = []; // @ts-ignore\n\nvar __LOCAL_DEPENDENCIES__ = {}; // @ts-ignore\n\nvar __IDS_TO_FRAMEWORKS__ = {};\n/* eslint-disable */\n// @ts-nocheck\n// @ts-ignore\n\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource; // @ts-ignore\n\n\nvar addSourceDecorator = require(\"@storybook/source-loader/preview\").addSource; // @ts-ignore\n\n\nvar __SOURCE_PREFIX__ = \"/Users/farhanansari/Code/ui-library/src/components/atoms/Map\"; // @ts-ignore\n\nvar __STORY__ = \"import { action } from '@storybook/addon-actions'\\nimport {\\n  boolean,\\n  object,\\n  select,\\n  text,\\n  withKnobs\\n} from '@storybook/addon-knobs'\\nimport React from 'react'\\nimport LeafletMap from '.'\\nimport { path } from '..'\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\nimport Settings from '../../atoms/SettingBox/data'\\nimport { ButtonList } from '../../molecules/ShowHideColumnPopup'\\nimport { tVariant } from '../Button'\\nimport { IOption } from '../SettingBox/interface'\\nimport {\\n  GOOGLE_API_KEY,\\n  HERE_MAPS_API_KEY\\n} from './constants/googleIntegration.constants'\\nimport circleSampleData from './dummyData/CircleSampleData.SampleData'\\nimport infowindowStructure from './dummyData/Infowindow.structure.sampleData'\\nimport markerIcons from './dummyData/MarkerIcon.sampleData'\\nimport markerLayerObj from './dummyData/Markers.sampleData'\\nimport polyGeoFenceSampleData from './dummyData/PolyGeoFence.SampleData'\\nimport sampleTrackingData from './dummyData/Presentation.Tracking.sampleData'\\nimport sampleTripData from './dummyData/Presentation.Trips.sampleData'\\nimport { updateSettingsWithLegends } from './helperMethods'\\nimport EditPopUp from './SubComponent/EditPopUp'\\nimport { tTheme, tTiles } from './types.d'\\n\\nexport default {\\n  title: `${path}/Map`,\\n  decorators: [withKnobs],\\n  component: LeafletMap\\n}\\n\\n// The options which will be visible for tile-layer select in the story\\nconst tileOptions = {\\n  'open-street-maps': 'osm',\\n  'google-satellite': 'google_satellite',\\n  'google-basic': 'google_roadmap',\\n  'google-terrain': 'google_terrain',\\n  'google-hybrid': 'google_hybrid'\\n}\\n\\nconst themeOptions = {\\n  light: 'light',\\n  dark: 'dark'\\n}\\n\\nexport const BaseMap = () => {\\n  const settingConfig = Object.assign({}, Settings)\\n  // set permission false, so that map mode will be hidden\\n  settingConfig['Map Mode'].permission = false\\n\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[51.0, 19.0]}\\n        latLngBounds={[[37.09024, -95.712891]]}\\n        // zoom={number('Zoom', 4, { min: 1, max: 24 })}\\n        zoomControl={boolean('Zoom Controls', true)}\\n        locationSearch={boolean('Location Search Bar', true)}\\n        googleApiKey={GOOGLE_API_KEY}\\n        heremapsApiKey={HERE_MAPS_API_KEY}\\n        height={text('Height', '300px')}\\n        width={text('Width', '800px')}\\n        tiles={\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\n        }\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\n        poi={boolean('Points of interest', false)}\\n        settingConfig={settingConfig}\\n        popupRef={infowindowStructure}\\n        onSettingChange={action('setting changed')}\\n        rulerControl={boolean('rulerControl', true)}\\n        iconsRef={markerIcons}\\n        // center={array('center', ['37.7749', '-122.4194'])}\\n      />\\n    </ThemeWrapper>\\n  )\\n}\\n\\nexport const MarkerMap = () => {\\n  const settingConfig = Object.assign({}, Settings)\\n\\n  // set permission true of markers if sending data,same like heatmap\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\n    option.permission = option.name === 'Markers'\\n    option.selected = option.name === 'Markers'\\n  })\\n  settingConfig['Map Mode'].permission = true\\n\\n  // create legend on the basis of markers data\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\n\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[37.09024, -95.712891]}\\n        latLngBounds={[[37.09024, -95.712891]]}\\n        // zoom={4}\\n        zoomControl\\n        locationSearch\\n        googleApiKey={GOOGLE_API_KEY}\\n        height='800px'\\n        width='800px'\\n        tiles='google_roadmap'\\n        markers={object('Marker Configuration', markerLayerObj)}\\n        focusMarkerId={text('Marker Id to focus/open', '')}\\n        iconsRef={markerIcons}\\n        popupRef={infowindowStructure}\\n        settingConfig={settingConfig}\\n        onSettingChange={action('setting changed')}\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\n      />\\n    </ThemeWrapper>\\n  )\\n}\\n\\nexport const HeatMapAndMarker = () => {\\n  const settingConfig = Object.assign({}, Settings)\\n  // set permission true of heatmap if sending data,same like marker\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\n    option.permission = true // true for both option\\n    option.selected = option.name === 'Markers' // markers selected first\\n  })\\n  settingConfig['Map Mode'].permission = true\\n  // create legend on the basis of markers data\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\n\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[51.0, 19.0]}\\n        // zoom={4}\\n        zoomControl\\n        locationSearch\\n        googleApiKey={GOOGLE_API_KEY}\\n        height='800px'\\n        width='800px'\\n        tiles='google_roadmap'\\n        heatmap={object('Heatmap configuration', {\\n          permission: false,\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\n        })}\\n        settingConfig={settingConfig}\\n        markers={object('Marker Configuration', markerLayerObj)}\\n        iconsRef={markerIcons}\\n        popupRef={infowindowStructure}\\n        onSettingChange={action('setting changed')}\\n      />\\n    </ThemeWrapper>\\n  )\\n}\\n\\nexport const HeatMap = () => {\\n  const settingConfig = Object.assign({}, Settings)\\n  // set permission true of heatmap if sending data,same like marker\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\n    option.permission = option.name === 'HeatMap'\\n    option.selected = option.name === 'HeatMap'\\n  })\\n  settingConfig['Map Mode'].permission = true\\n\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[51.0, 19.0]}\\n        // zoom={4}\\n        zoomControl\\n        locationSearch\\n        googleApiKey={GOOGLE_API_KEY}\\n        height='300px'\\n        width='800px'\\n        tiles='google_roadmap'\\n        heatmap={object('Heatmap configuration', {\\n          permission: true,\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\n        })}\\n        settingConfig={settingConfig}\\n        onSettingChange={action('setting changed')}\\n      />\\n    </ThemeWrapper>\\n  )\\n}\\n\\nexport const TripsMap = () => {\\n  const settingConfig = Object.assign({}, Settings)\\n  // create legend on the basis of markers data\\n\\n  // set permission false, so that map mode will be hidden\\n  settingConfig['Map Mode'].permission = false\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[51.0, 19.0]}\\n        zoom={4}\\n        zoomControl\\n        locationSearch\\n        googleApiKey={GOOGLE_API_KEY}\\n        height='300px'\\n        width='800px'\\n        tiles='google_roadmap'\\n        trips={object('Trip Configuration', sampleTripData)}\\n        iconsRef={markerIcons}\\n        popupRef={infowindowStructure}\\n        onSettingChange={action('setting changed')}\\n      />\\n    </ThemeWrapper>\\n  )\\n}\\n\\nexport const TrackingMap = () => {\\n  const settingConfig = Object.assign({}, Settings)\\n\\n  // set permission false, so that map mode will be hidden\\n  settingConfig['Map Mode'].permission = false\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[33.298959, -111.9724]}\\n        zoom={10}\\n        zoomControl\\n        locationSearch\\n        googleApiKey={GOOGLE_API_KEY}\\n        height='300px'\\n        width='800px'\\n        tiles='google_roadmap'\\n        tracking={object('Tracking Configuration', sampleTrackingData)}\\n        onSettingChange={action('setting changed')}\\n      />\\n    </ThemeWrapper>\\n  )\\n}\\n\\nconst GeocodingMapComponent = () => {\\n  const settingConfig = Object.assign({}, Settings)\\n  // set permission false, so that map mode will be hidden\\n  settingConfig['Map Mode'].permission = false\\n  // const [searchText, setSearchText] = React.useState(\\n  //   'Mumbai, Maharashtra, India'\\n  // )\\n  // const [position, setPosition] = React.useState([19.0759837, 72.8776559])\\n\\n  return (\\n    <LeafletMap\\n      id='leafletBaseMap'\\n      classes='baseMap customBaseMap'\\n      googleApiKey={GOOGLE_API_KEY}\\n      settingConfig={settingConfig}\\n      center={[51.0, 19.0]}\\n      // markers={object('Marker Configuration', markerLayerObj)}\\n      iconsRef={markerIcons}\\n      zoomControl\\n      locationSearch\\n      sendLocationOutside={action('sendLocationOutside ')}\\n      isShowMapTileLayer={boolean('isShowMapTileLayer', false)}\\n      geocoding={{\\n        permission: true,\\n\\n        /** If you are passing searchText, ensure to pass the position prop as well. */\\n        searchText: text('searchText', 'Mumbai'),\\n        // searchTextInput: searchText,\\n        position: [19.0759837, 72.8776559],\\n        isSave: boolean('isSave', true),\\n        onGeocodingSave: (e: any) => {\\n          window.alert(\\n            'Geocodes Saved ' + e.position?.[0] + ', ' + e.position?.[1]\\n          )\\n        },\\n        onGeocodingDragEnd: (pos: [number, number]) => {\\n          action('On Geocoding Drag End')(pos)\\n          // setPosition(pos)\\n          // setSearchText('India')\\n        }\\n      }}\\n      showLegendWrapper={boolean('showLegendWrapper', false)}\\n    />\\n  )\\n}\\nexport const GeocodingMap = () => {\\n  return (\\n    <ThemeWrapper>\\n      <GeocodingMapComponent />\\n    </ThemeWrapper>\\n  )\\n}\\n\\nexport const PolygonMap = () => {\\n  const settingConfig = Object.assign({}, Settings)\\n  // set permission false, so that map mode will be hidden\\n  settingConfig['Map Mode'].permission = false\\n  // const [buttonType] = useState<string | null>(null)\\n  // console.log(buttonType)\\n\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[20.5937, 78.9629]}\\n        zoom={4}\\n        zoomControl={boolean('Zoom Controls', true)}\\n        locationSearch={boolean('Location Search Bar', true)}\\n        googleApiKey={GOOGLE_API_KEY}\\n        height={text('Height', '300px')}\\n        width={text('Width', '800px')}\\n        tiles={\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\n        }\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\n        poi={boolean('Points of interest', false)}\\n        settingConfig={settingConfig}\\n        polygon={object('polygon', polyGeoFenceSampleData)}\\n        popupRef={infowindowStructure}\\n        onSettingChange={action('setting changed')}\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\n        editPopUpComponent={({ map }: any) => (\\n          <EditPopUp\\n            onClick={() => {\\n              map.closePopup()\\n            }}\\n          />\\n        )}\\n        onEdit={action('Value Edited with new Vertex')}\\n        popupCustomComponent={{\\n          tooltipButton: ({ selectedData }: any) => (\\n            <ButtonList\\n              listOfButtons={[\\n                {\\n                  variant: 'button' as tVariant,\\n                  children: 'Edit',\\n                  // intent: 'table' as tIntent,\\n                  iconVariant: 'edit',\\n                  primary: true,\\n                  onClick: () => console.log('Edit', selectedData)\\n                },\\n                {\\n                  variant: 'button' as tVariant,\\n                  children: 'Delete',\\n                  iconVariant: 'icomoon-close',\\n                  // intent: 'table' as tIntent,\\n                  onClick: () => console.log('delete', selectedData)\\n                }\\n              ]}\\n            />\\n          )\\n        }}\\n      />\\n    </ThemeWrapper>\\n  )\\n}\\n\\nexport const CircleMap = () => {\\n  const settingConfig = Object.assign({}, Settings)\\n\\n  // set permission false, so that map mode will be hidden\\n  settingConfig['Map Mode'].permission = false\\n\\n  // create legend on the basis of markers data\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Route Mode')\\n\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[20.5937, 78.9629]}\\n        zoom={4}\\n        zoomControl\\n        locationSearch\\n        googleApiKey={GOOGLE_API_KEY}\\n        height='300px'\\n        width='800px'\\n        tiles='google_roadmap'\\n        popupRef={infowindowStructure}\\n        settingConfig={settingConfig}\\n        onSettingChange={action('setting changed')}\\n        circle={object('circle', circleSampleData)}\\n        onEdit={action('Value Edited with new Vertex')}\\n        editPopUpComponent={({ map }: any) => (\\n          <EditPopUp\\n            onClick={() => {\\n              map.closePopup()\\n            }}\\n          />\\n        )}\\n      />\\n    </ThemeWrapper>\\n  )\\n}\\n\"; // @ts-ignore\n\nvar __ADDS_MAP__ = {}; // @ts-ignore\n\nvar __MAIN_FILE_LOCATION__ = \"/Map.stories.tsx\"; // @ts-ignore\n\nvar __MODULE_DEPENDENCIES__ = []; // @ts-ignore\n\nvar __LOCAL_DEPENDENCIES__ = {}; // @ts-ignore\n\nvar __IDS_TO_FRAMEWORKS__ = {};\nimport { action } from '@storybook/addon-actions';\nimport { boolean as _boolean, object, select, text, withKnobs } from '@storybook/addon-knobs';\nimport React from 'react';\nimport LeafletMap from '.';\nimport { path } from '..';\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper';\nimport Settings from '../../atoms/SettingBox/data';\nimport { ButtonList } from '../../molecules/ShowHideColumnPopup';\nimport { GOOGLE_API_KEY, HERE_MAPS_API_KEY } from './constants/googleIntegration.constants';\nimport circleSampleData from './dummyData/CircleSampleData.SampleData';\nimport infowindowStructure from './dummyData/Infowindow.structure.sampleData';\nimport markerIcons from './dummyData/MarkerIcon.sampleData';\nimport markerLayerObj from './dummyData/Markers.sampleData';\nimport polyGeoFenceSampleData from './dummyData/PolyGeoFence.SampleData';\nimport sampleTrackingData from './dummyData/Presentation.Tracking.sampleData';\nimport sampleTripData from './dummyData/Presentation.Trips.sampleData';\nimport { updateSettingsWithLegends } from './helperMethods';\nimport EditPopUp from './SubComponent/EditPopUp';\nexport default {\n  parameters: (_parameters = {\n    \"storySource\": {\n      \"source\": \"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/farhanansari/Code/ui-library/src/components/atoms/Map\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"\\\\n\\\\n// @ts-nocheck\\\\n// @ts-ignore\\\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\\\n// @ts-ignore\\\\nvar addSourceDecorator = require(\\\\\\\"@storybook/source-loader/preview\\\\\\\").addSource;\\\\n// @ts-ignore\\\\nvar __SOURCE_PREFIX__ = \\\\\\\"/Users/farhanansari/Code/ui-library/src/components/atoms/Map\\\\\\\";\\\\n// @ts-ignore\\\\nvar __STORY__ = \\\\\\\"import { action } from '@storybook/addon-actions'\\\\\\\\nimport {\\\\\\\\n  boolean,\\\\\\\\n  object,\\\\\\\\n  select,\\\\\\\\n  text,\\\\\\\\n  withKnobs\\\\\\\\n} from '@storybook/addon-knobs'\\\\\\\\nimport React from 'react'\\\\\\\\nimport LeafletMap from '.'\\\\\\\\nimport { path } from '..'\\\\\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\\\\\nimport Settings from '../../atoms/SettingBox/data'\\\\\\\\nimport { ButtonList } from '../../molecules/ShowHideColumnPopup'\\\\\\\\nimport { tVariant } from '../Button'\\\\\\\\nimport { IOption } from '../SettingBox/interface'\\\\\\\\nimport {\\\\\\\\n  GOOGLE_API_KEY,\\\\\\\\n  HERE_MAPS_API_KEY\\\\\\\\n} from './constants/googleIntegration.constants'\\\\\\\\nimport circleSampleData from './dummyData/CircleSampleData.SampleData'\\\\\\\\nimport infowindowStructure from './dummyData/Infowindow.structure.sampleData'\\\\\\\\nimport markerIcons from './dummyData/MarkerIcon.sampleData'\\\\\\\\nimport markerLayerObj from './dummyData/Markers.sampleData'\\\\\\\\nimport polyGeoFenceSampleData from './dummyData/PolyGeoFence.SampleData'\\\\\\\\nimport sampleTrackingData from './dummyData/Presentation.Tracking.sampleData'\\\\\\\\nimport sampleTripData from './dummyData/Presentation.Trips.sampleData'\\\\\\\\nimport { updateSettingsWithLegends } from './helperMethods'\\\\\\\\nimport EditPopUp from './SubComponent/EditPopUp'\\\\\\\\nimport { tTheme, tTiles } from './types.d'\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/Map`,\\\\\\\\n  decorators: [withKnobs],\\\\\\\\n  component: LeafletMap\\\\\\\\n}\\\\\\\\n\\\\\\\\n// The options which will be visible for tile-layer select in the story\\\\\\\\nconst tileOptions = {\\\\\\\\n  'open-street-maps': 'osm',\\\\\\\\n  'google-satellite': 'google_satellite',\\\\\\\\n  'google-basic': 'google_roadmap',\\\\\\\\n  'google-terrain': 'google_terrain',\\\\\\\\n  'google-hybrid': 'google_hybrid'\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst themeOptions = {\\\\\\\\n  light: 'light',\\\\\\\\n  dark: 'dark'\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const BaseMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[51.0, 19.0]}\\\\\\\\n        latLngBounds={[[37.09024, -95.712891]]}\\\\\\\\n        // zoom={number('Zoom', 4, { min: 1, max: 24 })}\\\\\\\\n        zoomControl={boolean('Zoom Controls', true)}\\\\\\\\n        locationSearch={boolean('Location Search Bar', true)}\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        heremapsApiKey={HERE_MAPS_API_KEY}\\\\\\\\n        height={text('Height', '300px')}\\\\\\\\n        width={text('Width', '800px')}\\\\\\\\n        tiles={\\\\\\\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\\\\\\\n        }\\\\\\\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\\\\\\\n        poi={boolean('Points of interest', false)}\\\\\\\\n        settingConfig={settingConfig}\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n        rulerControl={boolean('rulerControl', true)}\\\\\\\\n        iconsRef={markerIcons}\\\\\\\\n        // center={array('center', ['37.7749', '-122.4194'])}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const MarkerMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n\\\\\\\\n  // set permission true of markers if sending data,same like heatmap\\\\\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\\\\\n    option.permission = option.name === 'Markers'\\\\\\\\n    option.selected = option.name === 'Markers'\\\\\\\\n  })\\\\\\\\n  settingConfig['Map Mode'].permission = true\\\\\\\\n\\\\\\\\n  // create legend on the basis of markers data\\\\\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[37.09024, -95.712891]}\\\\\\\\n        latLngBounds={[[37.09024, -95.712891]]}\\\\\\\\n        // zoom={4}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='800px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\\\\\n        focusMarkerId={text('Marker Id to focus/open', '')}\\\\\\\\n        iconsRef={markerIcons}\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        settingConfig={settingConfig}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const HeatMapAndMarker = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // set permission true of heatmap if sending data,same like marker\\\\\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\\\\\n    option.permission = true // true for both option\\\\\\\\n    option.selected = option.name === 'Markers' // markers selected first\\\\\\\\n  })\\\\\\\\n  settingConfig['Map Mode'].permission = true\\\\\\\\n  // create legend on the basis of markers data\\\\\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[51.0, 19.0]}\\\\\\\\n        // zoom={4}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='800px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        heatmap={object('Heatmap configuration', {\\\\\\\\n          permission: false,\\\\\\\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\\\\\\\n        })}\\\\\\\\n        settingConfig={settingConfig}\\\\\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\\\\\n        iconsRef={markerIcons}\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const HeatMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // set permission true of heatmap if sending data,same like marker\\\\\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\\\\\n    option.permission = option.name === 'HeatMap'\\\\\\\\n    option.selected = option.name === 'HeatMap'\\\\\\\\n  })\\\\\\\\n  settingConfig['Map Mode'].permission = true\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[51.0, 19.0]}\\\\\\\\n        // zoom={4}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='300px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        heatmap={object('Heatmap configuration', {\\\\\\\\n          permission: true,\\\\\\\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\\\\\\\n        })}\\\\\\\\n        settingConfig={settingConfig}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const TripsMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // create legend on the basis of markers data\\\\\\\\n\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[51.0, 19.0]}\\\\\\\\n        zoom={4}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='300px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        trips={object('Trip Configuration', sampleTripData)}\\\\\\\\n        iconsRef={markerIcons}\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const TrackingMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[33.298959, -111.9724]}\\\\\\\\n        zoom={10}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='300px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        tracking={object('Tracking Configuration', sampleTrackingData)}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst GeocodingMapComponent = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n  // const [searchText, setSearchText] = React.useState(\\\\\\\\n  //   'Mumbai, Maharashtra, India'\\\\\\\\n  // )\\\\\\\\n  // const [position, setPosition] = React.useState([19.0759837, 72.8776559])\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <LeafletMap\\\\\\\\n      id='leafletBaseMap'\\\\\\\\n      classes='baseMap customBaseMap'\\\\\\\\n      googleApiKey={GOOGLE_API_KEY}\\\\\\\\n      settingConfig={settingConfig}\\\\\\\\n      center={[51.0, 19.0]}\\\\\\\\n      // markers={object('Marker Configuration', markerLayerObj)}\\\\\\\\n      iconsRef={markerIcons}\\\\\\\\n      zoomControl\\\\\\\\n      locationSearch\\\\\\\\n      sendLocationOutside={action('sendLocationOutside ')}\\\\\\\\n      isShowMapTileLayer={boolean('isShowMapTileLayer', false)}\\\\\\\\n      geocoding={{\\\\\\\\n        permission: true,\\\\\\\\n\\\\\\\\n        /** If you are passing searchText, ensure to pass the position prop as well. */\\\\\\\\n        searchText: text('searchText', 'Mumbai'),\\\\\\\\n        // searchTextInput: searchText,\\\\\\\\n        position: [19.0759837, 72.8776559],\\\\\\\\n        isSave: boolean('isSave', true),\\\\\\\\n        onGeocodingSave: (e: any) => {\\\\\\\\n          window.alert(\\\\\\\\n            'Geocodes Saved ' + e.position?.[0] + ', ' + e.position?.[1]\\\\\\\\n          )\\\\\\\\n        },\\\\\\\\n        onGeocodingDragEnd: (pos: [number, number]) => {\\\\\\\\n          action('On Geocoding Drag End')(pos)\\\\\\\\n          // setPosition(pos)\\\\\\\\n          // setSearchText('India')\\\\\\\\n        }\\\\\\\\n      }}\\\\\\\\n      showLegendWrapper={boolean('showLegendWrapper', false)}\\\\\\\\n    />\\\\\\\\n  )\\\\\\\\n}\\\\\\\\nexport const GeocodingMap = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <GeocodingMapComponent />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const PolygonMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n  // const [buttonType] = useState<string | null>(null)\\\\\\\\n  // console.log(buttonType)\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[20.5937, 78.9629]}\\\\\\\\n        zoom={4}\\\\\\\\n        zoomControl={boolean('Zoom Controls', true)}\\\\\\\\n        locationSearch={boolean('Location Search Bar', true)}\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height={text('Height', '300px')}\\\\\\\\n        width={text('Width', '800px')}\\\\\\\\n        tiles={\\\\\\\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\\\\\\\n        }\\\\\\\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\\\\\\\n        poi={boolean('Points of interest', false)}\\\\\\\\n        settingConfig={settingConfig}\\\\\\\\n        polygon={object('polygon', polyGeoFenceSampleData)}\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\\\\\\\n        editPopUpComponent={({ map }: any) => (\\\\\\\\n          <EditPopUp\\\\\\\\n            onClick={() => {\\\\\\\\n              map.closePopup()\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        )}\\\\\\\\n        onEdit={action('Value Edited with new Vertex')}\\\\\\\\n        popupCustomComponent={{\\\\\\\\n          tooltipButton: ({ selectedData }: any) => (\\\\\\\\n            <ButtonList\\\\\\\\n              listOfButtons={[\\\\\\\\n                {\\\\\\\\n                  variant: 'button' as tVariant,\\\\\\\\n                  children: 'Edit',\\\\\\\\n                  // intent: 'table' as tIntent,\\\\\\\\n                  iconVariant: 'edit',\\\\\\\\n                  primary: true,\\\\\\\\n                  onClick: () => console.log('Edit', selectedData)\\\\\\\\n                },\\\\\\\\n                {\\\\\\\\n                  variant: 'button' as tVariant,\\\\\\\\n                  children: 'Delete',\\\\\\\\n                  iconVariant: 'icomoon-close',\\\\\\\\n                  // intent: 'table' as tIntent,\\\\\\\\n                  onClick: () => console.log('delete', selectedData)\\\\\\\\n                }\\\\\\\\n              ]}\\\\\\\\n            />\\\\\\\\n          )\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const CircleMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n\\\\\\\\n  // create legend on the basis of markers data\\\\\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Route Mode')\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[20.5937, 78.9629]}\\\\\\\\n        zoom={4}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='300px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        settingConfig={settingConfig}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n        circle={object('circle', circleSampleData)}\\\\\\\\n        onEdit={action('Value Edited with new Vertex')}\\\\\\\\n        editPopUpComponent={({ map }: any) => (\\\\\\\\n          <EditPopUp\\\\\\\\n            onClick={() => {\\\\\\\\n              map.closePopup()\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        )}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\";\\\\n// @ts-ignore\\\\nvar __ADDS_MAP__ = {};\\\\n// @ts-ignore\\\\nvar __MAIN_FILE_LOCATION__ = \\\\\\\"/Map.stories.tsx\\\\\\\";\\\\n// @ts-ignore\\\\nvar __MODULE_DEPENDENCIES__ = [];\\\\n// @ts-ignore\\\\nvar __LOCAL_DEPENDENCIES__ = {};\\\\n// @ts-ignore\\\\nvar __IDS_TO_FRAMEWORKS__ = {};\\\\n        \\\\nimport { action } from '@storybook/addon-actions'\\\\nimport {\\\\n  boolean,\\\\n  object,\\\\n  select,\\\\n  text,\\\\n  withKnobs\\\\n} from '@storybook/addon-knobs'\\\\nimport React from 'react'\\\\nimport LeafletMap from '.'\\\\nimport { path } from '..'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport Settings from '../../atoms/SettingBox/data'\\\\nimport { ButtonList } from '../../molecules/ShowHideColumnPopup'\\\\nimport { tVariant } from '../Button'\\\\nimport { IOption } from '../SettingBox/interface'\\\\nimport {\\\\n  GOOGLE_API_KEY,\\\\n  HERE_MAPS_API_KEY\\\\n} from './constants/googleIntegration.constants'\\\\nimport circleSampleData from './dummyData/CircleSampleData.SampleData'\\\\nimport infowindowStructure from './dummyData/Infowindow.structure.sampleData'\\\\nimport markerIcons from './dummyData/MarkerIcon.sampleData'\\\\nimport markerLayerObj from './dummyData/Markers.sampleData'\\\\nimport polyGeoFenceSampleData from './dummyData/PolyGeoFence.SampleData'\\\\nimport sampleTrackingData from './dummyData/Presentation.Tracking.sampleData'\\\\nimport sampleTripData from './dummyData/Presentation.Trips.sampleData'\\\\nimport { updateSettingsWithLegends } from './helperMethods'\\\\nimport EditPopUp from './SubComponent/EditPopUp'\\\\nimport { tTheme, tTiles } from './types.d'\\\\n\\\\nexport default {parameters: {\\\\\\\"storySource\\\\\\\":{\\\\\\\"source\\\\\\\":\\\\\\\"import { action } from '@storybook/addon-actions'\\\\\\\\nimport {\\\\\\\\n  boolean,\\\\\\\\n  object,\\\\\\\\n  select,\\\\\\\\n  text,\\\\\\\\n  withKnobs\\\\\\\\n} from '@storybook/addon-knobs'\\\\\\\\nimport React from 'react'\\\\\\\\nimport LeafletMap from '.'\\\\\\\\nimport { path } from '..'\\\\\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\\\\\nimport Settings from '../../atoms/SettingBox/data'\\\\\\\\nimport { ButtonList } from '../../molecules/ShowHideColumnPopup'\\\\\\\\nimport { tVariant } from '../Button'\\\\\\\\nimport { IOption } from '../SettingBox/interface'\\\\\\\\nimport {\\\\\\\\n  GOOGLE_API_KEY,\\\\\\\\n  HERE_MAPS_API_KEY\\\\\\\\n} from './constants/googleIntegration.constants'\\\\\\\\nimport circleSampleData from './dummyData/CircleSampleData.SampleData'\\\\\\\\nimport infowindowStructure from './dummyData/Infowindow.structure.sampleData'\\\\\\\\nimport markerIcons from './dummyData/MarkerIcon.sampleData'\\\\\\\\nimport markerLayerObj from './dummyData/Markers.sampleData'\\\\\\\\nimport polyGeoFenceSampleData from './dummyData/PolyGeoFence.SampleData'\\\\\\\\nimport sampleTrackingData from './dummyData/Presentation.Tracking.sampleData'\\\\\\\\nimport sampleTripData from './dummyData/Presentation.Trips.sampleData'\\\\\\\\nimport { updateSettingsWithLegends } from './helperMethods'\\\\\\\\nimport EditPopUp from './SubComponent/EditPopUp'\\\\\\\\nimport { tTheme, tTiles } from './types.d'\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/Map`,\\\\\\\\n  decorators: [withKnobs],\\\\\\\\n  component: LeafletMap\\\\\\\\n}\\\\\\\\n\\\\\\\\n// The options which will be visible for tile-layer select in the story\\\\\\\\nconst tileOptions = {\\\\\\\\n  'open-street-maps': 'osm',\\\\\\\\n  'google-satellite': 'google_satellite',\\\\\\\\n  'google-basic': 'google_roadmap',\\\\\\\\n  'google-terrain': 'google_terrain',\\\\\\\\n  'google-hybrid': 'google_hybrid'\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst themeOptions = {\\\\\\\\n  light: 'light',\\\\\\\\n  dark: 'dark'\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const BaseMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[51.0, 19.0]}\\\\\\\\n        latLngBounds={[[37.09024, -95.712891]]}\\\\\\\\n        // zoom={number('Zoom', 4, { min: 1, max: 24 })}\\\\\\\\n        zoomControl={boolean('Zoom Controls', true)}\\\\\\\\n        locationSearch={boolean('Location Search Bar', true)}\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        heremapsApiKey={HERE_MAPS_API_KEY}\\\\\\\\n        height={text('Height', '300px')}\\\\\\\\n        width={text('Width', '800px')}\\\\\\\\n        tiles={\\\\\\\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\\\\\\\n        }\\\\\\\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\\\\\\\n        poi={boolean('Points of interest', false)}\\\\\\\\n        settingConfig={settingConfig}\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n        rulerControl={boolean('rulerControl', true)}\\\\\\\\n        iconsRef={markerIcons}\\\\\\\\n        // center={array('center', ['37.7749', '-122.4194'])}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const MarkerMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n\\\\\\\\n  // set permission true of markers if sending data,same like heatmap\\\\\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\\\\\n    option.permission = option.name === 'Markers'\\\\\\\\n    option.selected = option.name === 'Markers'\\\\\\\\n  })\\\\\\\\n  settingConfig['Map Mode'].permission = true\\\\\\\\n\\\\\\\\n  // create legend on the basis of markers data\\\\\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[37.09024, -95.712891]}\\\\\\\\n        latLngBounds={[[37.09024, -95.712891]]}\\\\\\\\n        // zoom={4}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='800px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\\\\\n        focusMarkerId={text('Marker Id to focus/open', '')}\\\\\\\\n        iconsRef={markerIcons}\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        settingConfig={settingConfig}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const HeatMapAndMarker = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // set permission true of heatmap if sending data,same like marker\\\\\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\\\\\n    option.permission = true // true for both option\\\\\\\\n    option.selected = option.name === 'Markers' // markers selected first\\\\\\\\n  })\\\\\\\\n  settingConfig['Map Mode'].permission = true\\\\\\\\n  // create legend on the basis of markers data\\\\\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[51.0, 19.0]}\\\\\\\\n        // zoom={4}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='800px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        heatmap={object('Heatmap configuration', {\\\\\\\\n          permission: false,\\\\\\\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\\\\\\\n        })}\\\\\\\\n        settingConfig={settingConfig}\\\\\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\\\\\n        iconsRef={markerIcons}\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const HeatMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // set permission true of heatmap if sending data,same like marker\\\\\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\\\\\n    option.permission = option.name === 'HeatMap'\\\\\\\\n    option.selected = option.name === 'HeatMap'\\\\\\\\n  })\\\\\\\\n  settingConfig['Map Mode'].permission = true\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[51.0, 19.0]}\\\\\\\\n        // zoom={4}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='300px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        heatmap={object('Heatmap configuration', {\\\\\\\\n          permission: true,\\\\\\\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\\\\\\\n        })}\\\\\\\\n        settingConfig={settingConfig}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const TripsMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // create legend on the basis of markers data\\\\\\\\n\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[51.0, 19.0]}\\\\\\\\n        zoom={4}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='300px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        trips={object('Trip Configuration', sampleTripData)}\\\\\\\\n        iconsRef={markerIcons}\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const TrackingMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[33.298959, -111.9724]}\\\\\\\\n        zoom={10}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='300px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        tracking={object('Tracking Configuration', sampleTrackingData)}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst GeocodingMapComponent = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n  // const [searchText, setSearchText] = React.useState(\\\\\\\\n  //   'Mumbai, Maharashtra, India'\\\\\\\\n  // )\\\\\\\\n  // const [position, setPosition] = React.useState([19.0759837, 72.8776559])\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <LeafletMap\\\\\\\\n      id='leafletBaseMap'\\\\\\\\n      classes='baseMap customBaseMap'\\\\\\\\n      googleApiKey={GOOGLE_API_KEY}\\\\\\\\n      settingConfig={settingConfig}\\\\\\\\n      center={[51.0, 19.0]}\\\\\\\\n      // markers={object('Marker Configuration', markerLayerObj)}\\\\\\\\n      iconsRef={markerIcons}\\\\\\\\n      zoomControl\\\\\\\\n      locationSearch\\\\\\\\n      sendLocationOutside={action('sendLocationOutside ')}\\\\\\\\n      isShowMapTileLayer={boolean('isShowMapTileLayer', false)}\\\\\\\\n      geocoding={{\\\\\\\\n        permission: true,\\\\\\\\n\\\\\\\\n        /** If you are passing searchText, ensure to pass the position prop as well. */\\\\\\\\n        searchText: text('searchText', 'Mumbai'),\\\\\\\\n        // searchTextInput: searchText,\\\\\\\\n        position: [19.0759837, 72.8776559],\\\\\\\\n        isSave: boolean('isSave', true),\\\\\\\\n        onGeocodingSave: (e: any) => {\\\\\\\\n          window.alert(\\\\\\\\n            'Geocodes Saved ' + e.position?.[0] + ', ' + e.position?.[1]\\\\\\\\n          )\\\\\\\\n        },\\\\\\\\n        onGeocodingDragEnd: (pos: [number, number]) => {\\\\\\\\n          action('On Geocoding Drag End')(pos)\\\\\\\\n          // setPosition(pos)\\\\\\\\n          // setSearchText('India')\\\\\\\\n        }\\\\\\\\n      }}\\\\\\\\n      showLegendWrapper={boolean('showLegendWrapper', false)}\\\\\\\\n    />\\\\\\\\n  )\\\\\\\\n}\\\\\\\\nexport const GeocodingMap = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <GeocodingMapComponent />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const PolygonMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n  // const [buttonType] = useState<string | null>(null)\\\\\\\\n  // console.log(buttonType)\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[20.5937, 78.9629]}\\\\\\\\n        zoom={4}\\\\\\\\n        zoomControl={boolean('Zoom Controls', true)}\\\\\\\\n        locationSearch={boolean('Location Search Bar', true)}\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height={text('Height', '300px')}\\\\\\\\n        width={text('Width', '800px')}\\\\\\\\n        tiles={\\\\\\\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\\\\\\\n        }\\\\\\\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\\\\\\\n        poi={boolean('Points of interest', false)}\\\\\\\\n        settingConfig={settingConfig}\\\\\\\\n        polygon={object('polygon', polyGeoFenceSampleData)}\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\\\\\\\n        editPopUpComponent={({ map }: any) => (\\\\\\\\n          <EditPopUp\\\\\\\\n            onClick={() => {\\\\\\\\n              map.closePopup()\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        )}\\\\\\\\n        onEdit={action('Value Edited with new Vertex')}\\\\\\\\n        popupCustomComponent={{\\\\\\\\n          tooltipButton: ({ selectedData }: any) => (\\\\\\\\n            <ButtonList\\\\\\\\n              listOfButtons={[\\\\\\\\n                {\\\\\\\\n                  variant: 'button' as tVariant,\\\\\\\\n                  children: 'Edit',\\\\\\\\n                  // intent: 'table' as tIntent,\\\\\\\\n                  iconVariant: 'edit',\\\\\\\\n                  primary: true,\\\\\\\\n                  onClick: () => console.log('Edit', selectedData)\\\\\\\\n                },\\\\\\\\n                {\\\\\\\\n                  variant: 'button' as tVariant,\\\\\\\\n                  children: 'Delete',\\\\\\\\n                  iconVariant: 'icomoon-close',\\\\\\\\n                  // intent: 'table' as tIntent,\\\\\\\\n                  onClick: () => console.log('delete', selectedData)\\\\\\\\n                }\\\\\\\\n              ]}\\\\\\\\n            />\\\\\\\\n          )\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const CircleMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n\\\\\\\\n  // create legend on the basis of markers data\\\\\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Route Mode')\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[20.5937, 78.9629]}\\\\\\\\n        zoom={4}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='300px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        settingConfig={settingConfig}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n        circle={object('circle', circleSampleData)}\\\\\\\\n        onEdit={action('Value Edited with new Vertex')}\\\\\\\\n        editPopUpComponent={({ map }: any) => (\\\\\\\\n          <EditPopUp\\\\\\\\n            onClick={() => {\\\\\\\\n              map.closePopup()\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        )}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\",\\\\\\\"locationsMap\\\\\\\":{}},},\\\\n  title: `${path}/Map`,\\\\n  decorators: [withKnobs],\\\\n  component: LeafletMap\\\\n}\\\\n\\\\n// The options which will be visible for tile-layer select in the story\\\\nconst tileOptions = {\\\\n  'open-street-maps': 'osm',\\\\n  'google-satellite': 'google_satellite',\\\\n  'google-basic': 'google_roadmap',\\\\n  'google-terrain': 'google_terrain',\\\\n  'google-hybrid': 'google_hybrid'\\\\n}\\\\n\\\\nconst themeOptions = {\\\\n  light: 'light',\\\\n  dark: 'dark'\\\\n}\\\\n\\\\nexport const BaseMap = addSourceDecorator(() => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        latLngBounds={[[37.09024, -95.712891]]}\\\\n        // zoom={number('Zoom', 4, { min: 1, max: 24 })}\\\\n        zoomControl={boolean('Zoom Controls', true)}\\\\n        locationSearch={boolean('Location Search Bar', true)}\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        heremapsApiKey={HERE_MAPS_API_KEY}\\\\n        height={text('Height', '300px')}\\\\n        width={text('Width', '800px')}\\\\n        tiles={\\\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\\\n        }\\\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\\\n        poi={boolean('Points of interest', false)}\\\\n        settingConfig={settingConfig}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n        rulerControl={boolean('rulerControl', true)}\\\\n        iconsRef={markerIcons}\\\\n        // center={array('center', ['37.7749', '-122.4194'])}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const MarkerMap = addSourceDecorator(() => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n\\\\n  // set permission true of markers if sending data,same like heatmap\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\n    option.permission = option.name === 'Markers'\\\\n    option.selected = option.name === 'Markers'\\\\n  })\\\\n  settingConfig['Map Mode'].permission = true\\\\n\\\\n  // create legend on the basis of markers data\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[37.09024, -95.712891]}\\\\n        latLngBounds={[[37.09024, -95.712891]]}\\\\n        // zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='800px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\n        focusMarkerId={text('Marker Id to focus/open', '')}\\\\n        iconsRef={markerIcons}\\\\n        popupRef={infowindowStructure}\\\\n        settingConfig={settingConfig}\\\\n        onSettingChange={action('setting changed')}\\\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const HeatMapAndMarker = addSourceDecorator(() => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission true of heatmap if sending data,same like marker\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\n    option.permission = true // true for both option\\\\n    option.selected = option.name === 'Markers' // markers selected first\\\\n  })\\\\n  settingConfig['Map Mode'].permission = true\\\\n  // create legend on the basis of markers data\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        // zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='800px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        heatmap={object('Heatmap configuration', {\\\\n          permission: false,\\\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\\\n        })}\\\\n        settingConfig={settingConfig}\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\n        iconsRef={markerIcons}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const HeatMap = addSourceDecorator(() => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission true of heatmap if sending data,same like marker\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\n    option.permission = option.name === 'HeatMap'\\\\n    option.selected = option.name === 'HeatMap'\\\\n  })\\\\n  settingConfig['Map Mode'].permission = true\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        // zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        heatmap={object('Heatmap configuration', {\\\\n          permission: true,\\\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\\\n        })}\\\\n        settingConfig={settingConfig}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const TripsMap = addSourceDecorator(() => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // create legend on the basis of markers data\\\\n\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        trips={object('Trip Configuration', sampleTripData)}\\\\n        iconsRef={markerIcons}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const TrackingMap = addSourceDecorator(() => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[33.298959, -111.9724]}\\\\n        zoom={10}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        tracking={object('Tracking Configuration', sampleTrackingData)}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nconst GeocodingMapComponent = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  // const [searchText, setSearchText] = React.useState(\\\\n  //   'Mumbai, Maharashtra, India'\\\\n  // )\\\\n  // const [position, setPosition] = React.useState([19.0759837, 72.8776559])\\\\n\\\\n  return (\\\\n    <LeafletMap\\\\n      id='leafletBaseMap'\\\\n      classes='baseMap customBaseMap'\\\\n      googleApiKey={GOOGLE_API_KEY}\\\\n      settingConfig={settingConfig}\\\\n      center={[51.0, 19.0]}\\\\n      // markers={object('Marker Configuration', markerLayerObj)}\\\\n      iconsRef={markerIcons}\\\\n      zoomControl\\\\n      locationSearch\\\\n      sendLocationOutside={action('sendLocationOutside ')}\\\\n      isShowMapTileLayer={boolean('isShowMapTileLayer', false)}\\\\n      geocoding={{\\\\n        permission: true,\\\\n\\\\n        /** If you are passing searchText, ensure to pass the position prop as well. */\\\\n        searchText: text('searchText', 'Mumbai'),\\\\n        // searchTextInput: searchText,\\\\n        position: [19.0759837, 72.8776559],\\\\n        isSave: boolean('isSave', true),\\\\n        onGeocodingSave: (e: any) => {\\\\n          window.alert(\\\\n            'Geocodes Saved ' + e.position?.[0] + ', ' + e.position?.[1]\\\\n          )\\\\n        },\\\\n        onGeocodingDragEnd: (pos: [number, number]) => {\\\\n          action('On Geocoding Drag End')(pos)\\\\n          // setPosition(pos)\\\\n          // setSearchText('India')\\\\n        }\\\\n      }}\\\\n      showLegendWrapper={boolean('showLegendWrapper', false)}\\\\n    />\\\\n  )\\\\n}\\\\nexport const GeocodingMap = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <GeocodingMapComponent />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const PolygonMap = addSourceDecorator(() => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  // const [buttonType] = useState<string | null>(null)\\\\n  // console.log(buttonType)\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[20.5937, 78.9629]}\\\\n        zoom={4}\\\\n        zoomControl={boolean('Zoom Controls', true)}\\\\n        locationSearch={boolean('Location Search Bar', true)}\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height={text('Height', '300px')}\\\\n        width={text('Width', '800px')}\\\\n        tiles={\\\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\\\n        }\\\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\\\n        poi={boolean('Points of interest', false)}\\\\n        settingConfig={settingConfig}\\\\n        polygon={object('polygon', polyGeoFenceSampleData)}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\\\n        editPopUpComponent={({ map }: any) => (\\\\n          <EditPopUp\\\\n            onClick={() => {\\\\n              map.closePopup()\\\\n            }}\\\\n          />\\\\n        )}\\\\n        onEdit={action('Value Edited with new Vertex')}\\\\n        popupCustomComponent={{\\\\n          tooltipButton: ({ selectedData }: any) => (\\\\n            <ButtonList\\\\n              listOfButtons={[\\\\n                {\\\\n                  variant: 'button' as tVariant,\\\\n                  children: 'Edit',\\\\n                  // intent: 'table' as tIntent,\\\\n                  iconVariant: 'edit',\\\\n                  primary: true,\\\\n                  onClick: () => console.log('Edit', selectedData)\\\\n                },\\\\n                {\\\\n                  variant: 'button' as tVariant,\\\\n                  children: 'Delete',\\\\n                  iconVariant: 'icomoon-close',\\\\n                  // intent: 'table' as tIntent,\\\\n                  onClick: () => console.log('delete', selectedData)\\\\n                }\\\\n              ]}\\\\n            />\\\\n          )\\\\n        }}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const CircleMap = addSourceDecorator(() => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n\\\\n  // create legend on the basis of markers data\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Route Mode')\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[20.5937, 78.9629]}\\\\n        zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        popupRef={infowindowStructure}\\\\n        settingConfig={settingConfig}\\\\n        onSettingChange={action('setting changed')}\\\\n        circle={object('circle', circleSampleData)}\\\\n        onEdit={action('Value Edited with new Vertex')}\\\\n        editPopUpComponent={({ map }: any) => (\\\\n          <EditPopUp\\\\n            onClick={() => {\\\\n              map.closePopup()\\\\n            }}\\\\n          />\\\\n        )}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/Map.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\n\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/farhanansari/Code/ui-library/src/components/atoms/Map\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"import { action } from '@storybook/addon-actions'\\\\nimport {\\\\n  boolean,\\\\n  object,\\\\n  select,\\\\n  text,\\\\n  withKnobs\\\\n} from '@storybook/addon-knobs'\\\\nimport React from 'react'\\\\nimport LeafletMap from '.'\\\\nimport { path } from '..'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport Settings from '../../atoms/SettingBox/data'\\\\nimport { ButtonList } from '../../molecules/ShowHideColumnPopup'\\\\nimport { tVariant } from '../Button'\\\\nimport { IOption } from '../SettingBox/interface'\\\\nimport {\\\\n  GOOGLE_API_KEY,\\\\n  HERE_MAPS_API_KEY\\\\n} from './constants/googleIntegration.constants'\\\\nimport circleSampleData from './dummyData/CircleSampleData.SampleData'\\\\nimport infowindowStructure from './dummyData/Infowindow.structure.sampleData'\\\\nimport markerIcons from './dummyData/MarkerIcon.sampleData'\\\\nimport markerLayerObj from './dummyData/Markers.sampleData'\\\\nimport polyGeoFenceSampleData from './dummyData/PolyGeoFence.SampleData'\\\\nimport sampleTrackingData from './dummyData/Presentation.Tracking.sampleData'\\\\nimport sampleTripData from './dummyData/Presentation.Trips.sampleData'\\\\nimport { updateSettingsWithLegends } from './helperMethods'\\\\nimport EditPopUp from './SubComponent/EditPopUp'\\\\nimport { tTheme, tTiles } from './types.d'\\\\n\\\\nexport default {\\\\n  title: `${path}/Map`,\\\\n  decorators: [withKnobs],\\\\n  component: LeafletMap\\\\n}\\\\n\\\\n// The options which will be visible for tile-layer select in the story\\\\nconst tileOptions = {\\\\n  'open-street-maps': 'osm',\\\\n  'google-satellite': 'google_satellite',\\\\n  'google-basic': 'google_roadmap',\\\\n  'google-terrain': 'google_terrain',\\\\n  'google-hybrid': 'google_hybrid'\\\\n}\\\\n\\\\nconst themeOptions = {\\\\n  light: 'light',\\\\n  dark: 'dark'\\\\n}\\\\n\\\\nexport const BaseMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        latLngBounds={[[37.09024, -95.712891]]}\\\\n        // zoom={number('Zoom', 4, { min: 1, max: 24 })}\\\\n        zoomControl={boolean('Zoom Controls', true)}\\\\n        locationSearch={boolean('Location Search Bar', true)}\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        heremapsApiKey={HERE_MAPS_API_KEY}\\\\n        height={text('Height', '300px')}\\\\n        width={text('Width', '800px')}\\\\n        tiles={\\\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\\\n        }\\\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\\\n        poi={boolean('Points of interest', false)}\\\\n        settingConfig={settingConfig}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n        rulerControl={boolean('rulerControl', true)}\\\\n        iconsRef={markerIcons}\\\\n        // center={array('center', ['37.7749', '-122.4194'])}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const MarkerMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n\\\\n  // set permission true of markers if sending data,same like heatmap\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\n    option.permission = option.name === 'Markers'\\\\n    option.selected = option.name === 'Markers'\\\\n  })\\\\n  settingConfig['Map Mode'].permission = true\\\\n\\\\n  // create legend on the basis of markers data\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[37.09024, -95.712891]}\\\\n        latLngBounds={[[37.09024, -95.712891]]}\\\\n        // zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='800px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\n        focusMarkerId={text('Marker Id to focus/open', '')}\\\\n        iconsRef={markerIcons}\\\\n        popupRef={infowindowStructure}\\\\n        settingConfig={settingConfig}\\\\n        onSettingChange={action('setting changed')}\\\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const HeatMapAndMarker = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission true of heatmap if sending data,same like marker\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\n    option.permission = true // true for both option\\\\n    option.selected = option.name === 'Markers' // markers selected first\\\\n  })\\\\n  settingConfig['Map Mode'].permission = true\\\\n  // create legend on the basis of markers data\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        // zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='800px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        heatmap={object('Heatmap configuration', {\\\\n          permission: false,\\\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\\\n        })}\\\\n        settingConfig={settingConfig}\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\n        iconsRef={markerIcons}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const HeatMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission true of heatmap if sending data,same like marker\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\n    option.permission = option.name === 'HeatMap'\\\\n    option.selected = option.name === 'HeatMap'\\\\n  })\\\\n  settingConfig['Map Mode'].permission = true\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        // zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        heatmap={object('Heatmap configuration', {\\\\n          permission: true,\\\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\\\n        })}\\\\n        settingConfig={settingConfig}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const TripsMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // create legend on the basis of markers data\\\\n\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        trips={object('Trip Configuration', sampleTripData)}\\\\n        iconsRef={markerIcons}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const TrackingMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[33.298959, -111.9724]}\\\\n        zoom={10}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        tracking={object('Tracking Configuration', sampleTrackingData)}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nconst GeocodingMapComponent = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  // const [searchText, setSearchText] = React.useState(\\\\n  //   'Mumbai, Maharashtra, India'\\\\n  // )\\\\n  // const [position, setPosition] = React.useState([19.0759837, 72.8776559])\\\\n\\\\n  return (\\\\n    <LeafletMap\\\\n      id='leafletBaseMap'\\\\n      classes='baseMap customBaseMap'\\\\n      googleApiKey={GOOGLE_API_KEY}\\\\n      settingConfig={settingConfig}\\\\n      center={[51.0, 19.0]}\\\\n      // markers={object('Marker Configuration', markerLayerObj)}\\\\n      iconsRef={markerIcons}\\\\n      zoomControl\\\\n      locationSearch\\\\n      sendLocationOutside={action('sendLocationOutside ')}\\\\n      isShowMapTileLayer={boolean('isShowMapTileLayer', false)}\\\\n      geocoding={{\\\\n        permission: true,\\\\n\\\\n        /** If you are passing searchText, ensure to pass the position prop as well. */\\\\n        searchText: text('searchText', 'Mumbai'),\\\\n        // searchTextInput: searchText,\\\\n        position: [19.0759837, 72.8776559],\\\\n        isSave: boolean('isSave', true),\\\\n        onGeocodingSave: (e: any) => {\\\\n          window.alert(\\\\n            'Geocodes Saved ' + e.position?.[0] + ', ' + e.position?.[1]\\\\n          )\\\\n        },\\\\n        onGeocodingDragEnd: (pos: [number, number]) => {\\\\n          action('On Geocoding Drag End')(pos)\\\\n          // setPosition(pos)\\\\n          // setSearchText('India')\\\\n        }\\\\n      }}\\\\n      showLegendWrapper={boolean('showLegendWrapper', false)}\\\\n    />\\\\n  )\\\\n}\\\\nexport const GeocodingMap = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <GeocodingMapComponent />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const PolygonMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  // const [buttonType] = useState<string | null>(null)\\\\n  // console.log(buttonType)\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[20.5937, 78.9629]}\\\\n        zoom={4}\\\\n        zoomControl={boolean('Zoom Controls', true)}\\\\n        locationSearch={boolean('Location Search Bar', true)}\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height={text('Height', '300px')}\\\\n        width={text('Width', '800px')}\\\\n        tiles={\\\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\\\n        }\\\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\\\n        poi={boolean('Points of interest', false)}\\\\n        settingConfig={settingConfig}\\\\n        polygon={object('polygon', polyGeoFenceSampleData)}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\\\n        editPopUpComponent={({ map }: any) => (\\\\n          <EditPopUp\\\\n            onClick={() => {\\\\n              map.closePopup()\\\\n            }}\\\\n          />\\\\n        )}\\\\n        onEdit={action('Value Edited with new Vertex')}\\\\n        popupCustomComponent={{\\\\n          tooltipButton: ({ selectedData }: any) => (\\\\n            <ButtonList\\\\n              listOfButtons={[\\\\n                {\\\\n                  variant: 'button' as tVariant,\\\\n                  children: 'Edit',\\\\n                  // intent: 'table' as tIntent,\\\\n                  iconVariant: 'edit',\\\\n                  primary: true,\\\\n                  onClick: () => console.log('Edit', selectedData)\\\\n                },\\\\n                {\\\\n                  variant: 'button' as tVariant,\\\\n                  children: 'Delete',\\\\n                  iconVariant: 'icomoon-close',\\\\n                  // intent: 'table' as tIntent,\\\\n                  onClick: () => console.log('delete', selectedData)\\\\n                }\\\\n              ]}\\\\n            />\\\\n          )\\\\n        }}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const CircleMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n\\\\n  // create legend on the basis of markers data\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Route Mode')\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[20.5937, 78.9629]}\\\\n        zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        popupRef={infowindowStructure}\\\\n        settingConfig={settingConfig}\\\\n        onSettingChange={action('setting changed')}\\\\n        circle={object('circle', circleSampleData)}\\\\n        onEdit={action('Value Edited with new Vertex')}\\\\n        editPopUpComponent={({ map }: any) => (\\\\n          <EditPopUp\\\\n            onClick={() => {\\\\n              map.closePopup()\\\\n            }}\\\\n          />\\\\n        )}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/Map.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\nimport { action } from '@storybook/addon-actions'\\nimport {\\n  boolean,\\n  object,\\n  select,\\n  text,\\n  withKnobs\\n} from '@storybook/addon-knobs'\\nimport React from 'react'\\nimport LeafletMap from '.'\\nimport { path } from '..'\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\nimport Settings from '../../atoms/SettingBox/data'\\nimport { ButtonList } from '../../molecules/ShowHideColumnPopup'\\nimport { tVariant } from '../Button'\\nimport { IOption } from '../SettingBox/interface'\\nimport {\\n  GOOGLE_API_KEY,\\n  HERE_MAPS_API_KEY\\n} from './constants/googleIntegration.constants'\\nimport circleSampleData from './dummyData/CircleSampleData.SampleData'\\nimport infowindowStructure from './dummyData/Infowindow.structure.sampleData'\\nimport markerIcons from './dummyData/MarkerIcon.sampleData'\\nimport markerLayerObj from './dummyData/Markers.sampleData'\\nimport polyGeoFenceSampleData from './dummyData/PolyGeoFence.SampleData'\\nimport sampleTrackingData from './dummyData/Presentation.Tracking.sampleData'\\nimport sampleTripData from './dummyData/Presentation.Trips.sampleData'\\nimport { updateSettingsWithLegends } from './helperMethods'\\nimport EditPopUp from './SubComponent/EditPopUp'\\nimport { tTheme, tTiles } from './types.d'\\n\\nexport default {parameters: {\\\"storySource\\\":{\\\"source\\\":\\\"\\\\n\\\\n// @ts-nocheck\\\\n// @ts-ignore\\\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\\\n// @ts-ignore\\\\nvar addSourceDecorator = require(\\\\\\\"@storybook/source-loader/preview\\\\\\\").addSource;\\\\n// @ts-ignore\\\\nvar __SOURCE_PREFIX__ = \\\\\\\"/Users/farhanansari/Code/ui-library/src/components/atoms/Map\\\\\\\";\\\\n// @ts-ignore\\\\nvar __STORY__ = \\\\\\\"import { action } from '@storybook/addon-actions'\\\\\\\\nimport {\\\\\\\\n  boolean,\\\\\\\\n  object,\\\\\\\\n  select,\\\\\\\\n  text,\\\\\\\\n  withKnobs\\\\\\\\n} from '@storybook/addon-knobs'\\\\\\\\nimport React from 'react'\\\\\\\\nimport LeafletMap from '.'\\\\\\\\nimport { path } from '..'\\\\\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\\\\\nimport Settings from '../../atoms/SettingBox/data'\\\\\\\\nimport { ButtonList } from '../../molecules/ShowHideColumnPopup'\\\\\\\\nimport { tVariant } from '../Button'\\\\\\\\nimport { IOption } from '../SettingBox/interface'\\\\\\\\nimport {\\\\\\\\n  GOOGLE_API_KEY,\\\\\\\\n  HERE_MAPS_API_KEY\\\\\\\\n} from './constants/googleIntegration.constants'\\\\\\\\nimport circleSampleData from './dummyData/CircleSampleData.SampleData'\\\\\\\\nimport infowindowStructure from './dummyData/Infowindow.structure.sampleData'\\\\\\\\nimport markerIcons from './dummyData/MarkerIcon.sampleData'\\\\\\\\nimport markerLayerObj from './dummyData/Markers.sampleData'\\\\\\\\nimport polyGeoFenceSampleData from './dummyData/PolyGeoFence.SampleData'\\\\\\\\nimport sampleTrackingData from './dummyData/Presentation.Tracking.sampleData'\\\\\\\\nimport sampleTripData from './dummyData/Presentation.Trips.sampleData'\\\\\\\\nimport { updateSettingsWithLegends } from './helperMethods'\\\\\\\\nimport EditPopUp from './SubComponent/EditPopUp'\\\\\\\\nimport { tTheme, tTiles } from './types.d'\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/Map`,\\\\\\\\n  decorators: [withKnobs],\\\\\\\\n  component: LeafletMap\\\\\\\\n}\\\\\\\\n\\\\\\\\n// The options which will be visible for tile-layer select in the story\\\\\\\\nconst tileOptions = {\\\\\\\\n  'open-street-maps': 'osm',\\\\\\\\n  'google-satellite': 'google_satellite',\\\\\\\\n  'google-basic': 'google_roadmap',\\\\\\\\n  'google-terrain': 'google_terrain',\\\\\\\\n  'google-hybrid': 'google_hybrid'\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst themeOptions = {\\\\\\\\n  light: 'light',\\\\\\\\n  dark: 'dark'\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const BaseMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[51.0, 19.0]}\\\\\\\\n        latLngBounds={[[37.09024, -95.712891]]}\\\\\\\\n        // zoom={number('Zoom', 4, { min: 1, max: 24 })}\\\\\\\\n        zoomControl={boolean('Zoom Controls', true)}\\\\\\\\n        locationSearch={boolean('Location Search Bar', true)}\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        heremapsApiKey={HERE_MAPS_API_KEY}\\\\\\\\n        height={text('Height', '300px')}\\\\\\\\n        width={text('Width', '800px')}\\\\\\\\n        tiles={\\\\\\\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\\\\\\\n        }\\\\\\\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\\\\\\\n        poi={boolean('Points of interest', false)}\\\\\\\\n        settingConfig={settingConfig}\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n        rulerControl={boolean('rulerControl', true)}\\\\\\\\n        iconsRef={markerIcons}\\\\\\\\n        // center={array('center', ['37.7749', '-122.4194'])}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const MarkerMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n\\\\\\\\n  // set permission true of markers if sending data,same like heatmap\\\\\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\\\\\n    option.permission = option.name === 'Markers'\\\\\\\\n    option.selected = option.name === 'Markers'\\\\\\\\n  })\\\\\\\\n  settingConfig['Map Mode'].permission = true\\\\\\\\n\\\\\\\\n  // create legend on the basis of markers data\\\\\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[37.09024, -95.712891]}\\\\\\\\n        latLngBounds={[[37.09024, -95.712891]]}\\\\\\\\n        // zoom={4}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='800px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\\\\\n        focusMarkerId={text('Marker Id to focus/open', '')}\\\\\\\\n        iconsRef={markerIcons}\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        settingConfig={settingConfig}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const HeatMapAndMarker = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // set permission true of heatmap if sending data,same like marker\\\\\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\\\\\n    option.permission = true // true for both option\\\\\\\\n    option.selected = option.name === 'Markers' // markers selected first\\\\\\\\n  })\\\\\\\\n  settingConfig['Map Mode'].permission = true\\\\\\\\n  // create legend on the basis of markers data\\\\\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[51.0, 19.0]}\\\\\\\\n        // zoom={4}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='800px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        heatmap={object('Heatmap configuration', {\\\\\\\\n          permission: false,\\\\\\\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\\\\\\\n        })}\\\\\\\\n        settingConfig={settingConfig}\\\\\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\\\\\n        iconsRef={markerIcons}\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const HeatMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // set permission true of heatmap if sending data,same like marker\\\\\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\\\\\n    option.permission = option.name === 'HeatMap'\\\\\\\\n    option.selected = option.name === 'HeatMap'\\\\\\\\n  })\\\\\\\\n  settingConfig['Map Mode'].permission = true\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[51.0, 19.0]}\\\\\\\\n        // zoom={4}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='300px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        heatmap={object('Heatmap configuration', {\\\\\\\\n          permission: true,\\\\\\\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\\\\\\\n        })}\\\\\\\\n        settingConfig={settingConfig}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const TripsMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // create legend on the basis of markers data\\\\\\\\n\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[51.0, 19.0]}\\\\\\\\n        zoom={4}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='300px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        trips={object('Trip Configuration', sampleTripData)}\\\\\\\\n        iconsRef={markerIcons}\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const TrackingMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[33.298959, -111.9724]}\\\\\\\\n        zoom={10}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='300px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        tracking={object('Tracking Configuration', sampleTrackingData)}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst GeocodingMapComponent = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n  // const [searchText, setSearchText] = React.useState(\\\\\\\\n  //   'Mumbai, Maharashtra, India'\\\\\\\\n  // )\\\\\\\\n  // const [position, setPosition] = React.useState([19.0759837, 72.8776559])\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <LeafletMap\\\\\\\\n      id='leafletBaseMap'\\\\\\\\n      classes='baseMap customBaseMap'\\\\\\\\n      googleApiKey={GOOGLE_API_KEY}\\\\\\\\n      settingConfig={settingConfig}\\\\\\\\n      center={[51.0, 19.0]}\\\\\\\\n      // markers={object('Marker Configuration', markerLayerObj)}\\\\\\\\n      iconsRef={markerIcons}\\\\\\\\n      zoomControl\\\\\\\\n      locationSearch\\\\\\\\n      sendLocationOutside={action('sendLocationOutside ')}\\\\\\\\n      isShowMapTileLayer={boolean('isShowMapTileLayer', false)}\\\\\\\\n      geocoding={{\\\\\\\\n        permission: true,\\\\\\\\n\\\\\\\\n        /** If you are passing searchText, ensure to pass the position prop as well. */\\\\\\\\n        searchText: text('searchText', 'Mumbai'),\\\\\\\\n        // searchTextInput: searchText,\\\\\\\\n        position: [19.0759837, 72.8776559],\\\\\\\\n        isSave: boolean('isSave', true),\\\\\\\\n        onGeocodingSave: (e: any) => {\\\\\\\\n          window.alert(\\\\\\\\n            'Geocodes Saved ' + e.position?.[0] + ', ' + e.position?.[1]\\\\\\\\n          )\\\\\\\\n        },\\\\\\\\n        onGeocodingDragEnd: (pos: [number, number]) => {\\\\\\\\n          action('On Geocoding Drag End')(pos)\\\\\\\\n          // setPosition(pos)\\\\\\\\n          // setSearchText('India')\\\\\\\\n        }\\\\\\\\n      }}\\\\\\\\n      showLegendWrapper={boolean('showLegendWrapper', false)}\\\\\\\\n    />\\\\\\\\n  )\\\\\\\\n}\\\\\\\\nexport const GeocodingMap = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <GeocodingMapComponent />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const PolygonMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n  // const [buttonType] = useState<string | null>(null)\\\\\\\\n  // console.log(buttonType)\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[20.5937, 78.9629]}\\\\\\\\n        zoom={4}\\\\\\\\n        zoomControl={boolean('Zoom Controls', true)}\\\\\\\\n        locationSearch={boolean('Location Search Bar', true)}\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height={text('Height', '300px')}\\\\\\\\n        width={text('Width', '800px')}\\\\\\\\n        tiles={\\\\\\\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\\\\\\\n        }\\\\\\\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\\\\\\\n        poi={boolean('Points of interest', false)}\\\\\\\\n        settingConfig={settingConfig}\\\\\\\\n        polygon={object('polygon', polyGeoFenceSampleData)}\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\\\\\\\n        editPopUpComponent={({ map }: any) => (\\\\\\\\n          <EditPopUp\\\\\\\\n            onClick={() => {\\\\\\\\n              map.closePopup()\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        )}\\\\\\\\n        onEdit={action('Value Edited with new Vertex')}\\\\\\\\n        popupCustomComponent={{\\\\\\\\n          tooltipButton: ({ selectedData }: any) => (\\\\\\\\n            <ButtonList\\\\\\\\n              listOfButtons={[\\\\\\\\n                {\\\\\\\\n                  variant: 'button' as tVariant,\\\\\\\\n                  children: 'Edit',\\\\\\\\n                  // intent: 'table' as tIntent,\\\\\\\\n                  iconVariant: 'edit',\\\\\\\\n                  primary: true,\\\\\\\\n                  onClick: () => console.log('Edit', selectedData)\\\\\\\\n                },\\\\\\\\n                {\\\\\\\\n                  variant: 'button' as tVariant,\\\\\\\\n                  children: 'Delete',\\\\\\\\n                  iconVariant: 'icomoon-close',\\\\\\\\n                  // intent: 'table' as tIntent,\\\\\\\\n                  onClick: () => console.log('delete', selectedData)\\\\\\\\n                }\\\\\\\\n              ]}\\\\\\\\n            />\\\\\\\\n          )\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const CircleMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n\\\\\\\\n  // create legend on the basis of markers data\\\\\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Route Mode')\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[20.5937, 78.9629]}\\\\\\\\n        zoom={4}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='300px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        settingConfig={settingConfig}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n        circle={object('circle', circleSampleData)}\\\\\\\\n        onEdit={action('Value Edited with new Vertex')}\\\\\\\\n        editPopUpComponent={({ map }: any) => (\\\\\\\\n          <EditPopUp\\\\\\\\n            onClick={() => {\\\\\\\\n              map.closePopup()\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        )}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\";\\\\n// @ts-ignore\\\\nvar __ADDS_MAP__ = {};\\\\n// @ts-ignore\\\\nvar __MAIN_FILE_LOCATION__ = \\\\\\\"/Map.stories.tsx\\\\\\\";\\\\n// @ts-ignore\\\\nvar __MODULE_DEPENDENCIES__ = [];\\\\n// @ts-ignore\\\\nvar __LOCAL_DEPENDENCIES__ = {};\\\\n// @ts-ignore\\\\nvar __IDS_TO_FRAMEWORKS__ = {};\\\\n        \\\\nimport { action } from '@storybook/addon-actions'\\\\nimport {\\\\n  boolean,\\\\n  object,\\\\n  select,\\\\n  text,\\\\n  withKnobs\\\\n} from '@storybook/addon-knobs'\\\\nimport React from 'react'\\\\nimport LeafletMap from '.'\\\\nimport { path } from '..'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport Settings from '../../atoms/SettingBox/data'\\\\nimport { ButtonList } from '../../molecules/ShowHideColumnPopup'\\\\nimport { tVariant } from '../Button'\\\\nimport { IOption } from '../SettingBox/interface'\\\\nimport {\\\\n  GOOGLE_API_KEY,\\\\n  HERE_MAPS_API_KEY\\\\n} from './constants/googleIntegration.constants'\\\\nimport circleSampleData from './dummyData/CircleSampleData.SampleData'\\\\nimport infowindowStructure from './dummyData/Infowindow.structure.sampleData'\\\\nimport markerIcons from './dummyData/MarkerIcon.sampleData'\\\\nimport markerLayerObj from './dummyData/Markers.sampleData'\\\\nimport polyGeoFenceSampleData from './dummyData/PolyGeoFence.SampleData'\\\\nimport sampleTrackingData from './dummyData/Presentation.Tracking.sampleData'\\\\nimport sampleTripData from './dummyData/Presentation.Trips.sampleData'\\\\nimport { updateSettingsWithLegends } from './helperMethods'\\\\nimport EditPopUp from './SubComponent/EditPopUp'\\\\nimport { tTheme, tTiles } from './types.d'\\\\n\\\\nexport default {parameters: {\\\\\\\"storySource\\\\\\\":{\\\\\\\"source\\\\\\\":\\\\\\\"import { action } from '@storybook/addon-actions'\\\\\\\\nimport {\\\\\\\\n  boolean,\\\\\\\\n  object,\\\\\\\\n  select,\\\\\\\\n  text,\\\\\\\\n  withKnobs\\\\\\\\n} from '@storybook/addon-knobs'\\\\\\\\nimport React from 'react'\\\\\\\\nimport LeafletMap from '.'\\\\\\\\nimport { path } from '..'\\\\\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\\\\\nimport Settings from '../../atoms/SettingBox/data'\\\\\\\\nimport { ButtonList } from '../../molecules/ShowHideColumnPopup'\\\\\\\\nimport { tVariant } from '../Button'\\\\\\\\nimport { IOption } from '../SettingBox/interface'\\\\\\\\nimport {\\\\\\\\n  GOOGLE_API_KEY,\\\\\\\\n  HERE_MAPS_API_KEY\\\\\\\\n} from './constants/googleIntegration.constants'\\\\\\\\nimport circleSampleData from './dummyData/CircleSampleData.SampleData'\\\\\\\\nimport infowindowStructure from './dummyData/Infowindow.structure.sampleData'\\\\\\\\nimport markerIcons from './dummyData/MarkerIcon.sampleData'\\\\\\\\nimport markerLayerObj from './dummyData/Markers.sampleData'\\\\\\\\nimport polyGeoFenceSampleData from './dummyData/PolyGeoFence.SampleData'\\\\\\\\nimport sampleTrackingData from './dummyData/Presentation.Tracking.sampleData'\\\\\\\\nimport sampleTripData from './dummyData/Presentation.Trips.sampleData'\\\\\\\\nimport { updateSettingsWithLegends } from './helperMethods'\\\\\\\\nimport EditPopUp from './SubComponent/EditPopUp'\\\\\\\\nimport { tTheme, tTiles } from './types.d'\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/Map`,\\\\\\\\n  decorators: [withKnobs],\\\\\\\\n  component: LeafletMap\\\\\\\\n}\\\\\\\\n\\\\\\\\n// The options which will be visible for tile-layer select in the story\\\\\\\\nconst tileOptions = {\\\\\\\\n  'open-street-maps': 'osm',\\\\\\\\n  'google-satellite': 'google_satellite',\\\\\\\\n  'google-basic': 'google_roadmap',\\\\\\\\n  'google-terrain': 'google_terrain',\\\\\\\\n  'google-hybrid': 'google_hybrid'\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst themeOptions = {\\\\\\\\n  light: 'light',\\\\\\\\n  dark: 'dark'\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const BaseMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[51.0, 19.0]}\\\\\\\\n        latLngBounds={[[37.09024, -95.712891]]}\\\\\\\\n        // zoom={number('Zoom', 4, { min: 1, max: 24 })}\\\\\\\\n        zoomControl={boolean('Zoom Controls', true)}\\\\\\\\n        locationSearch={boolean('Location Search Bar', true)}\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        heremapsApiKey={HERE_MAPS_API_KEY}\\\\\\\\n        height={text('Height', '300px')}\\\\\\\\n        width={text('Width', '800px')}\\\\\\\\n        tiles={\\\\\\\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\\\\\\\n        }\\\\\\\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\\\\\\\n        poi={boolean('Points of interest', false)}\\\\\\\\n        settingConfig={settingConfig}\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n        rulerControl={boolean('rulerControl', true)}\\\\\\\\n        iconsRef={markerIcons}\\\\\\\\n        // center={array('center', ['37.7749', '-122.4194'])}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const MarkerMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n\\\\\\\\n  // set permission true of markers if sending data,same like heatmap\\\\\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\\\\\n    option.permission = option.name === 'Markers'\\\\\\\\n    option.selected = option.name === 'Markers'\\\\\\\\n  })\\\\\\\\n  settingConfig['Map Mode'].permission = true\\\\\\\\n\\\\\\\\n  // create legend on the basis of markers data\\\\\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[37.09024, -95.712891]}\\\\\\\\n        latLngBounds={[[37.09024, -95.712891]]}\\\\\\\\n        // zoom={4}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='800px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\\\\\n        focusMarkerId={text('Marker Id to focus/open', '')}\\\\\\\\n        iconsRef={markerIcons}\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        settingConfig={settingConfig}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const HeatMapAndMarker = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // set permission true of heatmap if sending data,same like marker\\\\\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\\\\\n    option.permission = true // true for both option\\\\\\\\n    option.selected = option.name === 'Markers' // markers selected first\\\\\\\\n  })\\\\\\\\n  settingConfig['Map Mode'].permission = true\\\\\\\\n  // create legend on the basis of markers data\\\\\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[51.0, 19.0]}\\\\\\\\n        // zoom={4}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='800px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        heatmap={object('Heatmap configuration', {\\\\\\\\n          permission: false,\\\\\\\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\\\\\\\n        })}\\\\\\\\n        settingConfig={settingConfig}\\\\\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\\\\\n        iconsRef={markerIcons}\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const HeatMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // set permission true of heatmap if sending data,same like marker\\\\\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\\\\\n    option.permission = option.name === 'HeatMap'\\\\\\\\n    option.selected = option.name === 'HeatMap'\\\\\\\\n  })\\\\\\\\n  settingConfig['Map Mode'].permission = true\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[51.0, 19.0]}\\\\\\\\n        // zoom={4}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='300px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        heatmap={object('Heatmap configuration', {\\\\\\\\n          permission: true,\\\\\\\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\\\\\\\n        })}\\\\\\\\n        settingConfig={settingConfig}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const TripsMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // create legend on the basis of markers data\\\\\\\\n\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[51.0, 19.0]}\\\\\\\\n        zoom={4}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='300px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        trips={object('Trip Configuration', sampleTripData)}\\\\\\\\n        iconsRef={markerIcons}\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const TrackingMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[33.298959, -111.9724]}\\\\\\\\n        zoom={10}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='300px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        tracking={object('Tracking Configuration', sampleTrackingData)}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst GeocodingMapComponent = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n  // const [searchText, setSearchText] = React.useState(\\\\\\\\n  //   'Mumbai, Maharashtra, India'\\\\\\\\n  // )\\\\\\\\n  // const [position, setPosition] = React.useState([19.0759837, 72.8776559])\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <LeafletMap\\\\\\\\n      id='leafletBaseMap'\\\\\\\\n      classes='baseMap customBaseMap'\\\\\\\\n      googleApiKey={GOOGLE_API_KEY}\\\\\\\\n      settingConfig={settingConfig}\\\\\\\\n      center={[51.0, 19.0]}\\\\\\\\n      // markers={object('Marker Configuration', markerLayerObj)}\\\\\\\\n      iconsRef={markerIcons}\\\\\\\\n      zoomControl\\\\\\\\n      locationSearch\\\\\\\\n      sendLocationOutside={action('sendLocationOutside ')}\\\\\\\\n      isShowMapTileLayer={boolean('isShowMapTileLayer', false)}\\\\\\\\n      geocoding={{\\\\\\\\n        permission: true,\\\\\\\\n\\\\\\\\n        /** If you are passing searchText, ensure to pass the position prop as well. */\\\\\\\\n        searchText: text('searchText', 'Mumbai'),\\\\\\\\n        // searchTextInput: searchText,\\\\\\\\n        position: [19.0759837, 72.8776559],\\\\\\\\n        isSave: boolean('isSave', true),\\\\\\\\n        onGeocodingSave: (e: any) => {\\\\\\\\n          window.alert(\\\\\\\\n            'Geocodes Saved ' + e.position?.[0] + ', ' + e.position?.[1]\\\\\\\\n          )\\\\\\\\n        },\\\\\\\\n        onGeocodingDragEnd: (pos: [number, number]) => {\\\\\\\\n          action('On Geocoding Drag End')(pos)\\\\\\\\n          // setPosition(pos)\\\\\\\\n          // setSearchText('India')\\\\\\\\n        }\\\\\\\\n      }}\\\\\\\\n      showLegendWrapper={boolean('showLegendWrapper', false)}\\\\\\\\n    />\\\\\\\\n  )\\\\\\\\n}\\\\\\\\nexport const GeocodingMap = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <GeocodingMapComponent />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const PolygonMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n  // const [buttonType] = useState<string | null>(null)\\\\\\\\n  // console.log(buttonType)\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[20.5937, 78.9629]}\\\\\\\\n        zoom={4}\\\\\\\\n        zoomControl={boolean('Zoom Controls', true)}\\\\\\\\n        locationSearch={boolean('Location Search Bar', true)}\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height={text('Height', '300px')}\\\\\\\\n        width={text('Width', '800px')}\\\\\\\\n        tiles={\\\\\\\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\\\\\\\n        }\\\\\\\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\\\\\\\n        poi={boolean('Points of interest', false)}\\\\\\\\n        settingConfig={settingConfig}\\\\\\\\n        polygon={object('polygon', polyGeoFenceSampleData)}\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\\\\\\\n        editPopUpComponent={({ map }: any) => (\\\\\\\\n          <EditPopUp\\\\\\\\n            onClick={() => {\\\\\\\\n              map.closePopup()\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        )}\\\\\\\\n        onEdit={action('Value Edited with new Vertex')}\\\\\\\\n        popupCustomComponent={{\\\\\\\\n          tooltipButton: ({ selectedData }: any) => (\\\\\\\\n            <ButtonList\\\\\\\\n              listOfButtons={[\\\\\\\\n                {\\\\\\\\n                  variant: 'button' as tVariant,\\\\\\\\n                  children: 'Edit',\\\\\\\\n                  // intent: 'table' as tIntent,\\\\\\\\n                  iconVariant: 'edit',\\\\\\\\n                  primary: true,\\\\\\\\n                  onClick: () => console.log('Edit', selectedData)\\\\\\\\n                },\\\\\\\\n                {\\\\\\\\n                  variant: 'button' as tVariant,\\\\\\\\n                  children: 'Delete',\\\\\\\\n                  iconVariant: 'icomoon-close',\\\\\\\\n                  // intent: 'table' as tIntent,\\\\\\\\n                  onClick: () => console.log('delete', selectedData)\\\\\\\\n                }\\\\\\\\n              ]}\\\\\\\\n            />\\\\\\\\n          )\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const CircleMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n\\\\\\\\n  // create legend on the basis of markers data\\\\\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Route Mode')\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[20.5937, 78.9629]}\\\\\\\\n        zoom={4}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='300px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        settingConfig={settingConfig}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n        circle={object('circle', circleSampleData)}\\\\\\\\n        onEdit={action('Value Edited with new Vertex')}\\\\\\\\n        editPopUpComponent={({ map }: any) => (\\\\\\\\n          <EditPopUp\\\\\\\\n            onClick={() => {\\\\\\\\n              map.closePopup()\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        )}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\",\\\\\\\"locationsMap\\\\\\\":{}},},\\\\n  title: `${path}/Map`,\\\\n  decorators: [withKnobs],\\\\n  component: LeafletMap\\\\n}\\\\n\\\\n// The options which will be visible for tile-layer select in the story\\\\nconst tileOptions = {\\\\n  'open-street-maps': 'osm',\\\\n  'google-satellite': 'google_satellite',\\\\n  'google-basic': 'google_roadmap',\\\\n  'google-terrain': 'google_terrain',\\\\n  'google-hybrid': 'google_hybrid'\\\\n}\\\\n\\\\nconst themeOptions = {\\\\n  light: 'light',\\\\n  dark: 'dark'\\\\n}\\\\n\\\\nexport const BaseMap = addSourceDecorator(() => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        latLngBounds={[[37.09024, -95.712891]]}\\\\n        // zoom={number('Zoom', 4, { min: 1, max: 24 })}\\\\n        zoomControl={boolean('Zoom Controls', true)}\\\\n        locationSearch={boolean('Location Search Bar', true)}\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        heremapsApiKey={HERE_MAPS_API_KEY}\\\\n        height={text('Height', '300px')}\\\\n        width={text('Width', '800px')}\\\\n        tiles={\\\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\\\n        }\\\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\\\n        poi={boolean('Points of interest', false)}\\\\n        settingConfig={settingConfig}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n        rulerControl={boolean('rulerControl', true)}\\\\n        iconsRef={markerIcons}\\\\n        // center={array('center', ['37.7749', '-122.4194'])}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const MarkerMap = addSourceDecorator(() => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n\\\\n  // set permission true of markers if sending data,same like heatmap\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\n    option.permission = option.name === 'Markers'\\\\n    option.selected = option.name === 'Markers'\\\\n  })\\\\n  settingConfig['Map Mode'].permission = true\\\\n\\\\n  // create legend on the basis of markers data\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[37.09024, -95.712891]}\\\\n        latLngBounds={[[37.09024, -95.712891]]}\\\\n        // zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='800px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\n        focusMarkerId={text('Marker Id to focus/open', '')}\\\\n        iconsRef={markerIcons}\\\\n        popupRef={infowindowStructure}\\\\n        settingConfig={settingConfig}\\\\n        onSettingChange={action('setting changed')}\\\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const HeatMapAndMarker = addSourceDecorator(() => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission true of heatmap if sending data,same like marker\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\n    option.permission = true // true for both option\\\\n    option.selected = option.name === 'Markers' // markers selected first\\\\n  })\\\\n  settingConfig['Map Mode'].permission = true\\\\n  // create legend on the basis of markers data\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        // zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='800px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        heatmap={object('Heatmap configuration', {\\\\n          permission: false,\\\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\\\n        })}\\\\n        settingConfig={settingConfig}\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\n        iconsRef={markerIcons}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const HeatMap = addSourceDecorator(() => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission true of heatmap if sending data,same like marker\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\n    option.permission = option.name === 'HeatMap'\\\\n    option.selected = option.name === 'HeatMap'\\\\n  })\\\\n  settingConfig['Map Mode'].permission = true\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        // zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        heatmap={object('Heatmap configuration', {\\\\n          permission: true,\\\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\\\n        })}\\\\n        settingConfig={settingConfig}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const TripsMap = addSourceDecorator(() => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // create legend on the basis of markers data\\\\n\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        trips={object('Trip Configuration', sampleTripData)}\\\\n        iconsRef={markerIcons}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const TrackingMap = addSourceDecorator(() => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[33.298959, -111.9724]}\\\\n        zoom={10}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        tracking={object('Tracking Configuration', sampleTrackingData)}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nconst GeocodingMapComponent = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  // const [searchText, setSearchText] = React.useState(\\\\n  //   'Mumbai, Maharashtra, India'\\\\n  // )\\\\n  // const [position, setPosition] = React.useState([19.0759837, 72.8776559])\\\\n\\\\n  return (\\\\n    <LeafletMap\\\\n      id='leafletBaseMap'\\\\n      classes='baseMap customBaseMap'\\\\n      googleApiKey={GOOGLE_API_KEY}\\\\n      settingConfig={settingConfig}\\\\n      center={[51.0, 19.0]}\\\\n      // markers={object('Marker Configuration', markerLayerObj)}\\\\n      iconsRef={markerIcons}\\\\n      zoomControl\\\\n      locationSearch\\\\n      sendLocationOutside={action('sendLocationOutside ')}\\\\n      isShowMapTileLayer={boolean('isShowMapTileLayer', false)}\\\\n      geocoding={{\\\\n        permission: true,\\\\n\\\\n        /** If you are passing searchText, ensure to pass the position prop as well. */\\\\n        searchText: text('searchText', 'Mumbai'),\\\\n        // searchTextInput: searchText,\\\\n        position: [19.0759837, 72.8776559],\\\\n        isSave: boolean('isSave', true),\\\\n        onGeocodingSave: (e: any) => {\\\\n          window.alert(\\\\n            'Geocodes Saved ' + e.position?.[0] + ', ' + e.position?.[1]\\\\n          )\\\\n        },\\\\n        onGeocodingDragEnd: (pos: [number, number]) => {\\\\n          action('On Geocoding Drag End')(pos)\\\\n          // setPosition(pos)\\\\n          // setSearchText('India')\\\\n        }\\\\n      }}\\\\n      showLegendWrapper={boolean('showLegendWrapper', false)}\\\\n    />\\\\n  )\\\\n}\\\\nexport const GeocodingMap = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <GeocodingMapComponent />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const PolygonMap = addSourceDecorator(() => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  // const [buttonType] = useState<string | null>(null)\\\\n  // console.log(buttonType)\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[20.5937, 78.9629]}\\\\n        zoom={4}\\\\n        zoomControl={boolean('Zoom Controls', true)}\\\\n        locationSearch={boolean('Location Search Bar', true)}\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height={text('Height', '300px')}\\\\n        width={text('Width', '800px')}\\\\n        tiles={\\\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\\\n        }\\\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\\\n        poi={boolean('Points of interest', false)}\\\\n        settingConfig={settingConfig}\\\\n        polygon={object('polygon', polyGeoFenceSampleData)}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\\\n        editPopUpComponent={({ map }: any) => (\\\\n          <EditPopUp\\\\n            onClick={() => {\\\\n              map.closePopup()\\\\n            }}\\\\n          />\\\\n        )}\\\\n        onEdit={action('Value Edited with new Vertex')}\\\\n        popupCustomComponent={{\\\\n          tooltipButton: ({ selectedData }: any) => (\\\\n            <ButtonList\\\\n              listOfButtons={[\\\\n                {\\\\n                  variant: 'button' as tVariant,\\\\n                  children: 'Edit',\\\\n                  // intent: 'table' as tIntent,\\\\n                  iconVariant: 'edit',\\\\n                  primary: true,\\\\n                  onClick: () => console.log('Edit', selectedData)\\\\n                },\\\\n                {\\\\n                  variant: 'button' as tVariant,\\\\n                  children: 'Delete',\\\\n                  iconVariant: 'icomoon-close',\\\\n                  // intent: 'table' as tIntent,\\\\n                  onClick: () => console.log('delete', selectedData)\\\\n                }\\\\n              ]}\\\\n            />\\\\n          )\\\\n        }}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const CircleMap = addSourceDecorator(() => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n\\\\n  // create legend on the basis of markers data\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Route Mode')\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[20.5937, 78.9629]}\\\\n        zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        popupRef={infowindowStructure}\\\\n        settingConfig={settingConfig}\\\\n        onSettingChange={action('setting changed')}\\\\n        circle={object('circle', circleSampleData)}\\\\n        onEdit={action('Value Edited with new Vertex')}\\\\n        editPopUpComponent={({ map }: any) => (\\\\n          <EditPopUp\\\\n            onClick={() => {\\\\n              map.closePopup()\\\\n            }}\\\\n          />\\\\n        )}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\",\\\"locationsMap\\\":{}},\\\"storySource\\\":{\\\"source\\\":\\\"import { action } from '@storybook/addon-actions'\\\\nimport {\\\\n  boolean,\\\\n  object,\\\\n  select,\\\\n  text,\\\\n  withKnobs\\\\n} from '@storybook/addon-knobs'\\\\nimport React from 'react'\\\\nimport LeafletMap from '.'\\\\nimport { path } from '..'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport Settings from '../../atoms/SettingBox/data'\\\\nimport { ButtonList } from '../../molecules/ShowHideColumnPopup'\\\\nimport { tVariant } from '../Button'\\\\nimport { IOption } from '../SettingBox/interface'\\\\nimport {\\\\n  GOOGLE_API_KEY,\\\\n  HERE_MAPS_API_KEY\\\\n} from './constants/googleIntegration.constants'\\\\nimport circleSampleData from './dummyData/CircleSampleData.SampleData'\\\\nimport infowindowStructure from './dummyData/Infowindow.structure.sampleData'\\\\nimport markerIcons from './dummyData/MarkerIcon.sampleData'\\\\nimport markerLayerObj from './dummyData/Markers.sampleData'\\\\nimport polyGeoFenceSampleData from './dummyData/PolyGeoFence.SampleData'\\\\nimport sampleTrackingData from './dummyData/Presentation.Tracking.sampleData'\\\\nimport sampleTripData from './dummyData/Presentation.Trips.sampleData'\\\\nimport { updateSettingsWithLegends } from './helperMethods'\\\\nimport EditPopUp from './SubComponent/EditPopUp'\\\\nimport { tTheme, tTiles } from './types.d'\\\\n\\\\nexport default {\\\\n  title: `${path}/Map`,\\\\n  decorators: [withKnobs],\\\\n  component: LeafletMap\\\\n}\\\\n\\\\n// The options which will be visible for tile-layer select in the story\\\\nconst tileOptions = {\\\\n  'open-street-maps': 'osm',\\\\n  'google-satellite': 'google_satellite',\\\\n  'google-basic': 'google_roadmap',\\\\n  'google-terrain': 'google_terrain',\\\\n  'google-hybrid': 'google_hybrid'\\\\n}\\\\n\\\\nconst themeOptions = {\\\\n  light: 'light',\\\\n  dark: 'dark'\\\\n}\\\\n\\\\nexport const BaseMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        latLngBounds={[[37.09024, -95.712891]]}\\\\n        // zoom={number('Zoom', 4, { min: 1, max: 24 })}\\\\n        zoomControl={boolean('Zoom Controls', true)}\\\\n        locationSearch={boolean('Location Search Bar', true)}\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        heremapsApiKey={HERE_MAPS_API_KEY}\\\\n        height={text('Height', '300px')}\\\\n        width={text('Width', '800px')}\\\\n        tiles={\\\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\\\n        }\\\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\\\n        poi={boolean('Points of interest', false)}\\\\n        settingConfig={settingConfig}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n        rulerControl={boolean('rulerControl', true)}\\\\n        iconsRef={markerIcons}\\\\n        // center={array('center', ['37.7749', '-122.4194'])}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const MarkerMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n\\\\n  // set permission true of markers if sending data,same like heatmap\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\n    option.permission = option.name === 'Markers'\\\\n    option.selected = option.name === 'Markers'\\\\n  })\\\\n  settingConfig['Map Mode'].permission = true\\\\n\\\\n  // create legend on the basis of markers data\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[37.09024, -95.712891]}\\\\n        latLngBounds={[[37.09024, -95.712891]]}\\\\n        // zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='800px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\n        focusMarkerId={text('Marker Id to focus/open', '')}\\\\n        iconsRef={markerIcons}\\\\n        popupRef={infowindowStructure}\\\\n        settingConfig={settingConfig}\\\\n        onSettingChange={action('setting changed')}\\\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const HeatMapAndMarker = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission true of heatmap if sending data,same like marker\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\n    option.permission = true // true for both option\\\\n    option.selected = option.name === 'Markers' // markers selected first\\\\n  })\\\\n  settingConfig['Map Mode'].permission = true\\\\n  // create legend on the basis of markers data\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        // zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='800px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        heatmap={object('Heatmap configuration', {\\\\n          permission: false,\\\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\\\n        })}\\\\n        settingConfig={settingConfig}\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\n        iconsRef={markerIcons}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const HeatMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission true of heatmap if sending data,same like marker\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\n    option.permission = option.name === 'HeatMap'\\\\n    option.selected = option.name === 'HeatMap'\\\\n  })\\\\n  settingConfig['Map Mode'].permission = true\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        // zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        heatmap={object('Heatmap configuration', {\\\\n          permission: true,\\\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\\\n        })}\\\\n        settingConfig={settingConfig}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const TripsMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // create legend on the basis of markers data\\\\n\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        trips={object('Trip Configuration', sampleTripData)}\\\\n        iconsRef={markerIcons}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const TrackingMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[33.298959, -111.9724]}\\\\n        zoom={10}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        tracking={object('Tracking Configuration', sampleTrackingData)}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nconst GeocodingMapComponent = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  // const [searchText, setSearchText] = React.useState(\\\\n  //   'Mumbai, Maharashtra, India'\\\\n  // )\\\\n  // const [position, setPosition] = React.useState([19.0759837, 72.8776559])\\\\n\\\\n  return (\\\\n    <LeafletMap\\\\n      id='leafletBaseMap'\\\\n      classes='baseMap customBaseMap'\\\\n      googleApiKey={GOOGLE_API_KEY}\\\\n      settingConfig={settingConfig}\\\\n      center={[51.0, 19.0]}\\\\n      // markers={object('Marker Configuration', markerLayerObj)}\\\\n      iconsRef={markerIcons}\\\\n      zoomControl\\\\n      locationSearch\\\\n      sendLocationOutside={action('sendLocationOutside ')}\\\\n      isShowMapTileLayer={boolean('isShowMapTileLayer', false)}\\\\n      geocoding={{\\\\n        permission: true,\\\\n\\\\n        /** If you are passing searchText, ensure to pass the position prop as well. */\\\\n        searchText: text('searchText', 'Mumbai'),\\\\n        // searchTextInput: searchText,\\\\n        position: [19.0759837, 72.8776559],\\\\n        isSave: boolean('isSave', true),\\\\n        onGeocodingSave: (e: any) => {\\\\n          window.alert(\\\\n            'Geocodes Saved ' + e.position?.[0] + ', ' + e.position?.[1]\\\\n          )\\\\n        },\\\\n        onGeocodingDragEnd: (pos: [number, number]) => {\\\\n          action('On Geocoding Drag End')(pos)\\\\n          // setPosition(pos)\\\\n          // setSearchText('India')\\\\n        }\\\\n      }}\\\\n      showLegendWrapper={boolean('showLegendWrapper', false)}\\\\n    />\\\\n  )\\\\n}\\\\nexport const GeocodingMap = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <GeocodingMapComponent />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const PolygonMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  // const [buttonType] = useState<string | null>(null)\\\\n  // console.log(buttonType)\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[20.5937, 78.9629]}\\\\n        zoom={4}\\\\n        zoomControl={boolean('Zoom Controls', true)}\\\\n        locationSearch={boolean('Location Search Bar', true)}\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height={text('Height', '300px')}\\\\n        width={text('Width', '800px')}\\\\n        tiles={\\\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\\\n        }\\\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\\\n        poi={boolean('Points of interest', false)}\\\\n        settingConfig={settingConfig}\\\\n        polygon={object('polygon', polyGeoFenceSampleData)}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\\\n        editPopUpComponent={({ map }: any) => (\\\\n          <EditPopUp\\\\n            onClick={() => {\\\\n              map.closePopup()\\\\n            }}\\\\n          />\\\\n        )}\\\\n        onEdit={action('Value Edited with new Vertex')}\\\\n        popupCustomComponent={{\\\\n          tooltipButton: ({ selectedData }: any) => (\\\\n            <ButtonList\\\\n              listOfButtons={[\\\\n                {\\\\n                  variant: 'button' as tVariant,\\\\n                  children: 'Edit',\\\\n                  // intent: 'table' as tIntent,\\\\n                  iconVariant: 'edit',\\\\n                  primary: true,\\\\n                  onClick: () => console.log('Edit', selectedData)\\\\n                },\\\\n                {\\\\n                  variant: 'button' as tVariant,\\\\n                  children: 'Delete',\\\\n                  iconVariant: 'icomoon-close',\\\\n                  // intent: 'table' as tIntent,\\\\n                  onClick: () => console.log('delete', selectedData)\\\\n                }\\\\n              ]}\\\\n            />\\\\n          )\\\\n        }}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const CircleMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n\\\\n  // create legend on the basis of markers data\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Route Mode')\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[20.5937, 78.9629]}\\\\n        zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        popupRef={infowindowStructure}\\\\n        settingConfig={settingConfig}\\\\n        onSettingChange={action('setting changed')}\\\\n        circle={object('circle', circleSampleData)}\\\\n        onEdit={action('Value Edited with new Vertex')}\\\\n        editPopUpComponent={({ map }: any) => (\\\\n          <EditPopUp\\\\n            onClick={() => {\\\\n              map.closePopup()\\\\n            }}\\\\n          />\\\\n        )}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\",\\\"locationsMap\\\":{}},},\\n  title: `${path}/Map`,\\n  decorators: [withKnobs],\\n  component: LeafletMap\\n}\\n\\n// The options which will be visible for tile-layer select in the story\\nconst tileOptions = {\\n  'open-street-maps': 'osm',\\n  'google-satellite': 'google_satellite',\\n  'google-basic': 'google_roadmap',\\n  'google-terrain': 'google_terrain',\\n  'google-hybrid': 'google_hybrid'\\n}\\n\\nconst themeOptions = {\\n  light: 'light',\\n  dark: 'dark'\\n}\\n\\nexport const BaseMap = addSourceDecorator(addSourceDecorator(() => {\\n  const settingConfig = Object.assign({}, Settings)\\n  // set permission false, so that map mode will be hidden\\n  settingConfig['Map Mode'].permission = false\\n\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[51.0, 19.0]}\\n        latLngBounds={[[37.09024, -95.712891]]}\\n        // zoom={number('Zoom', 4, { min: 1, max: 24 })}\\n        zoomControl={boolean('Zoom Controls', true)}\\n        locationSearch={boolean('Location Search Bar', true)}\\n        googleApiKey={GOOGLE_API_KEY}\\n        heremapsApiKey={HERE_MAPS_API_KEY}\\n        height={text('Height', '300px')}\\n        width={text('Width', '800px')}\\n        tiles={\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\n        }\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\n        poi={boolean('Points of interest', false)}\\n        settingConfig={settingConfig}\\n        popupRef={infowindowStructure}\\n        onSettingChange={action('setting changed')}\\n        rulerControl={boolean('rulerControl', true)}\\n        iconsRef={markerIcons}\\n        // center={array('center', ['37.7749', '-122.4194'])}\\n      />\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const MarkerMap = addSourceDecorator(addSourceDecorator(() => {\\n  const settingConfig = Object.assign({}, Settings)\\n\\n  // set permission true of markers if sending data,same like heatmap\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\n    option.permission = option.name === 'Markers'\\n    option.selected = option.name === 'Markers'\\n  })\\n  settingConfig['Map Mode'].permission = true\\n\\n  // create legend on the basis of markers data\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\n\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[37.09024, -95.712891]}\\n        latLngBounds={[[37.09024, -95.712891]]}\\n        // zoom={4}\\n        zoomControl\\n        locationSearch\\n        googleApiKey={GOOGLE_API_KEY}\\n        height='800px'\\n        width='800px'\\n        tiles='google_roadmap'\\n        markers={object('Marker Configuration', markerLayerObj)}\\n        focusMarkerId={text('Marker Id to focus/open', '')}\\n        iconsRef={markerIcons}\\n        popupRef={infowindowStructure}\\n        settingConfig={settingConfig}\\n        onSettingChange={action('setting changed')}\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\n      />\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const HeatMapAndMarker = addSourceDecorator(addSourceDecorator(() => {\\n  const settingConfig = Object.assign({}, Settings)\\n  // set permission true of heatmap if sending data,same like marker\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\n    option.permission = true // true for both option\\n    option.selected = option.name === 'Markers' // markers selected first\\n  })\\n  settingConfig['Map Mode'].permission = true\\n  // create legend on the basis of markers data\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\n\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[51.0, 19.0]}\\n        // zoom={4}\\n        zoomControl\\n        locationSearch\\n        googleApiKey={GOOGLE_API_KEY}\\n        height='800px'\\n        width='800px'\\n        tiles='google_roadmap'\\n        heatmap={object('Heatmap configuration', {\\n          permission: false,\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\n        })}\\n        settingConfig={settingConfig}\\n        markers={object('Marker Configuration', markerLayerObj)}\\n        iconsRef={markerIcons}\\n        popupRef={infowindowStructure}\\n        onSettingChange={action('setting changed')}\\n      />\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const HeatMap = addSourceDecorator(addSourceDecorator(() => {\\n  const settingConfig = Object.assign({}, Settings)\\n  // set permission true of heatmap if sending data,same like marker\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\n    option.permission = option.name === 'HeatMap'\\n    option.selected = option.name === 'HeatMap'\\n  })\\n  settingConfig['Map Mode'].permission = true\\n\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[51.0, 19.0]}\\n        // zoom={4}\\n        zoomControl\\n        locationSearch\\n        googleApiKey={GOOGLE_API_KEY}\\n        height='300px'\\n        width='800px'\\n        tiles='google_roadmap'\\n        heatmap={object('Heatmap configuration', {\\n          permission: true,\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\n        })}\\n        settingConfig={settingConfig}\\n        onSettingChange={action('setting changed')}\\n      />\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const TripsMap = addSourceDecorator(addSourceDecorator(() => {\\n  const settingConfig = Object.assign({}, Settings)\\n  // create legend on the basis of markers data\\n\\n  // set permission false, so that map mode will be hidden\\n  settingConfig['Map Mode'].permission = false\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[51.0, 19.0]}\\n        zoom={4}\\n        zoomControl\\n        locationSearch\\n        googleApiKey={GOOGLE_API_KEY}\\n        height='300px'\\n        width='800px'\\n        tiles='google_roadmap'\\n        trips={object('Trip Configuration', sampleTripData)}\\n        iconsRef={markerIcons}\\n        popupRef={infowindowStructure}\\n        onSettingChange={action('setting changed')}\\n      />\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const TrackingMap = addSourceDecorator(addSourceDecorator(() => {\\n  const settingConfig = Object.assign({}, Settings)\\n\\n  // set permission false, so that map mode will be hidden\\n  settingConfig['Map Mode'].permission = false\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[33.298959, -111.9724]}\\n        zoom={10}\\n        zoomControl\\n        locationSearch\\n        googleApiKey={GOOGLE_API_KEY}\\n        height='300px'\\n        width='800px'\\n        tiles='google_roadmap'\\n        tracking={object('Tracking Configuration', sampleTrackingData)}\\n        onSettingChange={action('setting changed')}\\n      />\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nconst GeocodingMapComponent = () => {\\n  const settingConfig = Object.assign({}, Settings)\\n  // set permission false, so that map mode will be hidden\\n  settingConfig['Map Mode'].permission = false\\n  // const [searchText, setSearchText] = React.useState(\\n  //   'Mumbai, Maharashtra, India'\\n  // )\\n  // const [position, setPosition] = React.useState([19.0759837, 72.8776559])\\n\\n  return (\\n    <LeafletMap\\n      id='leafletBaseMap'\\n      classes='baseMap customBaseMap'\\n      googleApiKey={GOOGLE_API_KEY}\\n      settingConfig={settingConfig}\\n      center={[51.0, 19.0]}\\n      // markers={object('Marker Configuration', markerLayerObj)}\\n      iconsRef={markerIcons}\\n      zoomControl\\n      locationSearch\\n      sendLocationOutside={action('sendLocationOutside ')}\\n      isShowMapTileLayer={boolean('isShowMapTileLayer', false)}\\n      geocoding={{\\n        permission: true,\\n\\n        /** If you are passing searchText, ensure to pass the position prop as well. */\\n        searchText: text('searchText', 'Mumbai'),\\n        // searchTextInput: searchText,\\n        position: [19.0759837, 72.8776559],\\n        isSave: boolean('isSave', true),\\n        onGeocodingSave: (e: any) => {\\n          window.alert(\\n            'Geocodes Saved ' + e.position?.[0] + ', ' + e.position?.[1]\\n          )\\n        },\\n        onGeocodingDragEnd: (pos: [number, number]) => {\\n          action('On Geocoding Drag End')(pos)\\n          // setPosition(pos)\\n          // setSearchText('India')\\n        }\\n      }}\\n      showLegendWrapper={boolean('showLegendWrapper', false)}\\n    />\\n  )\\n}\\nexport const GeocodingMap = addSourceDecorator(addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <GeocodingMapComponent />\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const PolygonMap = addSourceDecorator(addSourceDecorator(() => {\\n  const settingConfig = Object.assign({}, Settings)\\n  // set permission false, so that map mode will be hidden\\n  settingConfig['Map Mode'].permission = false\\n  // const [buttonType] = useState<string | null>(null)\\n  // console.log(buttonType)\\n\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[20.5937, 78.9629]}\\n        zoom={4}\\n        zoomControl={boolean('Zoom Controls', true)}\\n        locationSearch={boolean('Location Search Bar', true)}\\n        googleApiKey={GOOGLE_API_KEY}\\n        height={text('Height', '300px')}\\n        width={text('Width', '800px')}\\n        tiles={\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\n        }\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\n        poi={boolean('Points of interest', false)}\\n        settingConfig={settingConfig}\\n        polygon={object('polygon', polyGeoFenceSampleData)}\\n        popupRef={infowindowStructure}\\n        onSettingChange={action('setting changed')}\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\n        editPopUpComponent={({ map }: any) => (\\n          <EditPopUp\\n            onClick={() => {\\n              map.closePopup()\\n            }}\\n          />\\n        )}\\n        onEdit={action('Value Edited with new Vertex')}\\n        popupCustomComponent={{\\n          tooltipButton: ({ selectedData }: any) => (\\n            <ButtonList\\n              listOfButtons={[\\n                {\\n                  variant: 'button' as tVariant,\\n                  children: 'Edit',\\n                  // intent: 'table' as tIntent,\\n                  iconVariant: 'edit',\\n                  primary: true,\\n                  onClick: () => console.log('Edit', selectedData)\\n                },\\n                {\\n                  variant: 'button' as tVariant,\\n                  children: 'Delete',\\n                  iconVariant: 'icomoon-close',\\n                  // intent: 'table' as tIntent,\\n                  onClick: () => console.log('delete', selectedData)\\n                }\\n              ]}\\n            />\\n          )\\n        }}\\n      />\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const CircleMap = addSourceDecorator(addSourceDecorator(() => {\\n  const settingConfig = Object.assign({}, Settings)\\n\\n  // set permission false, so that map mode will be hidden\\n  settingConfig['Map Mode'].permission = false\\n\\n  // create legend on the basis of markers data\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Route Mode')\\n\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[20.5937, 78.9629]}\\n        zoom={4}\\n        zoomControl\\n        locationSearch\\n        googleApiKey={GOOGLE_API_KEY}\\n        height='300px'\\n        width='800px'\\n        tiles='google_roadmap'\\n        popupRef={infowindowStructure}\\n        settingConfig={settingConfig}\\n        onSettingChange={action('setting changed')}\\n        circle={object('circle', circleSampleData)}\\n        onEdit={action('Value Edited with new Vertex')}\\n        editPopUpComponent={({ map }: any) => (\\n          <EditPopUp\\n            onClick={() => {\\n              map.closePopup()\\n            }}\\n          />\\n        )}\\n      />\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\",\n      \"locationsMap\": {}\n    }\n  }, _defineProperty(_parameters, \"storySource\", {\n    \"source\": \"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/farhanansari/Code/ui-library/src/components/atoms/Map\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"import { action } from '@storybook/addon-actions'\\\\nimport {\\\\n  boolean,\\\\n  object,\\\\n  select,\\\\n  text,\\\\n  withKnobs\\\\n} from '@storybook/addon-knobs'\\\\nimport React from 'react'\\\\nimport LeafletMap from '.'\\\\nimport { path } from '..'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport Settings from '../../atoms/SettingBox/data'\\\\nimport { ButtonList } from '../../molecules/ShowHideColumnPopup'\\\\nimport { tVariant } from '../Button'\\\\nimport { IOption } from '../SettingBox/interface'\\\\nimport {\\\\n  GOOGLE_API_KEY,\\\\n  HERE_MAPS_API_KEY\\\\n} from './constants/googleIntegration.constants'\\\\nimport circleSampleData from './dummyData/CircleSampleData.SampleData'\\\\nimport infowindowStructure from './dummyData/Infowindow.structure.sampleData'\\\\nimport markerIcons from './dummyData/MarkerIcon.sampleData'\\\\nimport markerLayerObj from './dummyData/Markers.sampleData'\\\\nimport polyGeoFenceSampleData from './dummyData/PolyGeoFence.SampleData'\\\\nimport sampleTrackingData from './dummyData/Presentation.Tracking.sampleData'\\\\nimport sampleTripData from './dummyData/Presentation.Trips.sampleData'\\\\nimport { updateSettingsWithLegends } from './helperMethods'\\\\nimport EditPopUp from './SubComponent/EditPopUp'\\\\nimport { tTheme, tTiles } from './types.d'\\\\n\\\\nexport default {\\\\n  title: `${path}/Map`,\\\\n  decorators: [withKnobs],\\\\n  component: LeafletMap\\\\n}\\\\n\\\\n// The options which will be visible for tile-layer select in the story\\\\nconst tileOptions = {\\\\n  'open-street-maps': 'osm',\\\\n  'google-satellite': 'google_satellite',\\\\n  'google-basic': 'google_roadmap',\\\\n  'google-terrain': 'google_terrain',\\\\n  'google-hybrid': 'google_hybrid'\\\\n}\\\\n\\\\nconst themeOptions = {\\\\n  light: 'light',\\\\n  dark: 'dark'\\\\n}\\\\n\\\\nexport const BaseMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        latLngBounds={[[37.09024, -95.712891]]}\\\\n        // zoom={number('Zoom', 4, { min: 1, max: 24 })}\\\\n        zoomControl={boolean('Zoom Controls', true)}\\\\n        locationSearch={boolean('Location Search Bar', true)}\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        heremapsApiKey={HERE_MAPS_API_KEY}\\\\n        height={text('Height', '300px')}\\\\n        width={text('Width', '800px')}\\\\n        tiles={\\\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\\\n        }\\\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\\\n        poi={boolean('Points of interest', false)}\\\\n        settingConfig={settingConfig}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n        rulerControl={boolean('rulerControl', true)}\\\\n        iconsRef={markerIcons}\\\\n        // center={array('center', ['37.7749', '-122.4194'])}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const MarkerMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n\\\\n  // set permission true of markers if sending data,same like heatmap\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\n    option.permission = option.name === 'Markers'\\\\n    option.selected = option.name === 'Markers'\\\\n  })\\\\n  settingConfig['Map Mode'].permission = true\\\\n\\\\n  // create legend on the basis of markers data\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[37.09024, -95.712891]}\\\\n        latLngBounds={[[37.09024, -95.712891]]}\\\\n        // zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='800px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\n        focusMarkerId={text('Marker Id to focus/open', '')}\\\\n        iconsRef={markerIcons}\\\\n        popupRef={infowindowStructure}\\\\n        settingConfig={settingConfig}\\\\n        onSettingChange={action('setting changed')}\\\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const HeatMapAndMarker = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission true of heatmap if sending data,same like marker\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\n    option.permission = true // true for both option\\\\n    option.selected = option.name === 'Markers' // markers selected first\\\\n  })\\\\n  settingConfig['Map Mode'].permission = true\\\\n  // create legend on the basis of markers data\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        // zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='800px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        heatmap={object('Heatmap configuration', {\\\\n          permission: false,\\\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\\\n        })}\\\\n        settingConfig={settingConfig}\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\n        iconsRef={markerIcons}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const HeatMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission true of heatmap if sending data,same like marker\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\n    option.permission = option.name === 'HeatMap'\\\\n    option.selected = option.name === 'HeatMap'\\\\n  })\\\\n  settingConfig['Map Mode'].permission = true\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        // zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        heatmap={object('Heatmap configuration', {\\\\n          permission: true,\\\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\\\n        })}\\\\n        settingConfig={settingConfig}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const TripsMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // create legend on the basis of markers data\\\\n\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        trips={object('Trip Configuration', sampleTripData)}\\\\n        iconsRef={markerIcons}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const TrackingMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[33.298959, -111.9724]}\\\\n        zoom={10}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        tracking={object('Tracking Configuration', sampleTrackingData)}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nconst GeocodingMapComponent = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  // const [searchText, setSearchText] = React.useState(\\\\n  //   'Mumbai, Maharashtra, India'\\\\n  // )\\\\n  // const [position, setPosition] = React.useState([19.0759837, 72.8776559])\\\\n\\\\n  return (\\\\n    <LeafletMap\\\\n      id='leafletBaseMap'\\\\n      classes='baseMap customBaseMap'\\\\n      googleApiKey={GOOGLE_API_KEY}\\\\n      settingConfig={settingConfig}\\\\n      center={[51.0, 19.0]}\\\\n      // markers={object('Marker Configuration', markerLayerObj)}\\\\n      iconsRef={markerIcons}\\\\n      zoomControl\\\\n      locationSearch\\\\n      sendLocationOutside={action('sendLocationOutside ')}\\\\n      isShowMapTileLayer={boolean('isShowMapTileLayer', false)}\\\\n      geocoding={{\\\\n        permission: true,\\\\n\\\\n        /** If you are passing searchText, ensure to pass the position prop as well. */\\\\n        searchText: text('searchText', 'Mumbai'),\\\\n        // searchTextInput: searchText,\\\\n        position: [19.0759837, 72.8776559],\\\\n        isSave: boolean('isSave', true),\\\\n        onGeocodingSave: (e: any) => {\\\\n          window.alert(\\\\n            'Geocodes Saved ' + e.position?.[0] + ', ' + e.position?.[1]\\\\n          )\\\\n        },\\\\n        onGeocodingDragEnd: (pos: [number, number]) => {\\\\n          action('On Geocoding Drag End')(pos)\\\\n          // setPosition(pos)\\\\n          // setSearchText('India')\\\\n        }\\\\n      }}\\\\n      showLegendWrapper={boolean('showLegendWrapper', false)}\\\\n    />\\\\n  )\\\\n}\\\\nexport const GeocodingMap = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <GeocodingMapComponent />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const PolygonMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  // const [buttonType] = useState<string | null>(null)\\\\n  // console.log(buttonType)\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[20.5937, 78.9629]}\\\\n        zoom={4}\\\\n        zoomControl={boolean('Zoom Controls', true)}\\\\n        locationSearch={boolean('Location Search Bar', true)}\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height={text('Height', '300px')}\\\\n        width={text('Width', '800px')}\\\\n        tiles={\\\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\\\n        }\\\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\\\n        poi={boolean('Points of interest', false)}\\\\n        settingConfig={settingConfig}\\\\n        polygon={object('polygon', polyGeoFenceSampleData)}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\\\n        editPopUpComponent={({ map }: any) => (\\\\n          <EditPopUp\\\\n            onClick={() => {\\\\n              map.closePopup()\\\\n            }}\\\\n          />\\\\n        )}\\\\n        onEdit={action('Value Edited with new Vertex')}\\\\n        popupCustomComponent={{\\\\n          tooltipButton: ({ selectedData }: any) => (\\\\n            <ButtonList\\\\n              listOfButtons={[\\\\n                {\\\\n                  variant: 'button' as tVariant,\\\\n                  children: 'Edit',\\\\n                  // intent: 'table' as tIntent,\\\\n                  iconVariant: 'edit',\\\\n                  primary: true,\\\\n                  onClick: () => console.log('Edit', selectedData)\\\\n                },\\\\n                {\\\\n                  variant: 'button' as tVariant,\\\\n                  children: 'Delete',\\\\n                  iconVariant: 'icomoon-close',\\\\n                  // intent: 'table' as tIntent,\\\\n                  onClick: () => console.log('delete', selectedData)\\\\n                }\\\\n              ]}\\\\n            />\\\\n          )\\\\n        }}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const CircleMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n\\\\n  // create legend on the basis of markers data\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Route Mode')\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[20.5937, 78.9629]}\\\\n        zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        popupRef={infowindowStructure}\\\\n        settingConfig={settingConfig}\\\\n        onSettingChange={action('setting changed')}\\\\n        circle={object('circle', circleSampleData)}\\\\n        onEdit={action('Value Edited with new Vertex')}\\\\n        editPopUpComponent={({ map }: any) => (\\\\n          <EditPopUp\\\\n            onClick={() => {\\\\n              map.closePopup()\\\\n            }}\\\\n          />\\\\n        )}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/Map.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\nimport { action } from '@storybook/addon-actions'\\nimport {\\n  boolean,\\n  object,\\n  select,\\n  text,\\n  withKnobs\\n} from '@storybook/addon-knobs'\\nimport React from 'react'\\nimport LeafletMap from '.'\\nimport { path } from '..'\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\nimport Settings from '../../atoms/SettingBox/data'\\nimport { ButtonList } from '../../molecules/ShowHideColumnPopup'\\nimport { tVariant } from '../Button'\\nimport { IOption } from '../SettingBox/interface'\\nimport {\\n  GOOGLE_API_KEY,\\n  HERE_MAPS_API_KEY\\n} from './constants/googleIntegration.constants'\\nimport circleSampleData from './dummyData/CircleSampleData.SampleData'\\nimport infowindowStructure from './dummyData/Infowindow.structure.sampleData'\\nimport markerIcons from './dummyData/MarkerIcon.sampleData'\\nimport markerLayerObj from './dummyData/Markers.sampleData'\\nimport polyGeoFenceSampleData from './dummyData/PolyGeoFence.SampleData'\\nimport sampleTrackingData from './dummyData/Presentation.Tracking.sampleData'\\nimport sampleTripData from './dummyData/Presentation.Trips.sampleData'\\nimport { updateSettingsWithLegends } from './helperMethods'\\nimport EditPopUp from './SubComponent/EditPopUp'\\nimport { tTheme, tTiles } from './types.d'\\n\\nexport default {parameters: {\\\"storySource\\\":{\\\"source\\\":\\\"import { action } from '@storybook/addon-actions'\\\\nimport {\\\\n  boolean,\\\\n  object,\\\\n  select,\\\\n  text,\\\\n  withKnobs\\\\n} from '@storybook/addon-knobs'\\\\nimport React from 'react'\\\\nimport LeafletMap from '.'\\\\nimport { path } from '..'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport Settings from '../../atoms/SettingBox/data'\\\\nimport { ButtonList } from '../../molecules/ShowHideColumnPopup'\\\\nimport { tVariant } from '../Button'\\\\nimport { IOption } from '../SettingBox/interface'\\\\nimport {\\\\n  GOOGLE_API_KEY,\\\\n  HERE_MAPS_API_KEY\\\\n} from './constants/googleIntegration.constants'\\\\nimport circleSampleData from './dummyData/CircleSampleData.SampleData'\\\\nimport infowindowStructure from './dummyData/Infowindow.structure.sampleData'\\\\nimport markerIcons from './dummyData/MarkerIcon.sampleData'\\\\nimport markerLayerObj from './dummyData/Markers.sampleData'\\\\nimport polyGeoFenceSampleData from './dummyData/PolyGeoFence.SampleData'\\\\nimport sampleTrackingData from './dummyData/Presentation.Tracking.sampleData'\\\\nimport sampleTripData from './dummyData/Presentation.Trips.sampleData'\\\\nimport { updateSettingsWithLegends } from './helperMethods'\\\\nimport EditPopUp from './SubComponent/EditPopUp'\\\\nimport { tTheme, tTiles } from './types.d'\\\\n\\\\nexport default {\\\\n  title: `${path}/Map`,\\\\n  decorators: [withKnobs],\\\\n  component: LeafletMap\\\\n}\\\\n\\\\n// The options which will be visible for tile-layer select in the story\\\\nconst tileOptions = {\\\\n  'open-street-maps': 'osm',\\\\n  'google-satellite': 'google_satellite',\\\\n  'google-basic': 'google_roadmap',\\\\n  'google-terrain': 'google_terrain',\\\\n  'google-hybrid': 'google_hybrid'\\\\n}\\\\n\\\\nconst themeOptions = {\\\\n  light: 'light',\\\\n  dark: 'dark'\\\\n}\\\\n\\\\nexport const BaseMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        latLngBounds={[[37.09024, -95.712891]]}\\\\n        // zoom={number('Zoom', 4, { min: 1, max: 24 })}\\\\n        zoomControl={boolean('Zoom Controls', true)}\\\\n        locationSearch={boolean('Location Search Bar', true)}\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        heremapsApiKey={HERE_MAPS_API_KEY}\\\\n        height={text('Height', '300px')}\\\\n        width={text('Width', '800px')}\\\\n        tiles={\\\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\\\n        }\\\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\\\n        poi={boolean('Points of interest', false)}\\\\n        settingConfig={settingConfig}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n        rulerControl={boolean('rulerControl', true)}\\\\n        iconsRef={markerIcons}\\\\n        // center={array('center', ['37.7749', '-122.4194'])}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const MarkerMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n\\\\n  // set permission true of markers if sending data,same like heatmap\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\n    option.permission = option.name === 'Markers'\\\\n    option.selected = option.name === 'Markers'\\\\n  })\\\\n  settingConfig['Map Mode'].permission = true\\\\n\\\\n  // create legend on the basis of markers data\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[37.09024, -95.712891]}\\\\n        latLngBounds={[[37.09024, -95.712891]]}\\\\n        // zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='800px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\n        focusMarkerId={text('Marker Id to focus/open', '')}\\\\n        iconsRef={markerIcons}\\\\n        popupRef={infowindowStructure}\\\\n        settingConfig={settingConfig}\\\\n        onSettingChange={action('setting changed')}\\\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const HeatMapAndMarker = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission true of heatmap if sending data,same like marker\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\n    option.permission = true // true for both option\\\\n    option.selected = option.name === 'Markers' // markers selected first\\\\n  })\\\\n  settingConfig['Map Mode'].permission = true\\\\n  // create legend on the basis of markers data\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        // zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='800px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        heatmap={object('Heatmap configuration', {\\\\n          permission: false,\\\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\\\n        })}\\\\n        settingConfig={settingConfig}\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\n        iconsRef={markerIcons}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const HeatMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission true of heatmap if sending data,same like marker\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\n    option.permission = option.name === 'HeatMap'\\\\n    option.selected = option.name === 'HeatMap'\\\\n  })\\\\n  settingConfig['Map Mode'].permission = true\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        // zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        heatmap={object('Heatmap configuration', {\\\\n          permission: true,\\\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\\\n        })}\\\\n        settingConfig={settingConfig}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const TripsMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // create legend on the basis of markers data\\\\n\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        trips={object('Trip Configuration', sampleTripData)}\\\\n        iconsRef={markerIcons}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const TrackingMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[33.298959, -111.9724]}\\\\n        zoom={10}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        tracking={object('Tracking Configuration', sampleTrackingData)}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nconst GeocodingMapComponent = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  // const [searchText, setSearchText] = React.useState(\\\\n  //   'Mumbai, Maharashtra, India'\\\\n  // )\\\\n  // const [position, setPosition] = React.useState([19.0759837, 72.8776559])\\\\n\\\\n  return (\\\\n    <LeafletMap\\\\n      id='leafletBaseMap'\\\\n      classes='baseMap customBaseMap'\\\\n      googleApiKey={GOOGLE_API_KEY}\\\\n      settingConfig={settingConfig}\\\\n      center={[51.0, 19.0]}\\\\n      // markers={object('Marker Configuration', markerLayerObj)}\\\\n      iconsRef={markerIcons}\\\\n      zoomControl\\\\n      locationSearch\\\\n      sendLocationOutside={action('sendLocationOutside ')}\\\\n      isShowMapTileLayer={boolean('isShowMapTileLayer', false)}\\\\n      geocoding={{\\\\n        permission: true,\\\\n\\\\n        /** If you are passing searchText, ensure to pass the position prop as well. */\\\\n        searchText: text('searchText', 'Mumbai'),\\\\n        // searchTextInput: searchText,\\\\n        position: [19.0759837, 72.8776559],\\\\n        isSave: boolean('isSave', true),\\\\n        onGeocodingSave: (e: any) => {\\\\n          window.alert(\\\\n            'Geocodes Saved ' + e.position?.[0] + ', ' + e.position?.[1]\\\\n          )\\\\n        },\\\\n        onGeocodingDragEnd: (pos: [number, number]) => {\\\\n          action('On Geocoding Drag End')(pos)\\\\n          // setPosition(pos)\\\\n          // setSearchText('India')\\\\n        }\\\\n      }}\\\\n      showLegendWrapper={boolean('showLegendWrapper', false)}\\\\n    />\\\\n  )\\\\n}\\\\nexport const GeocodingMap = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <GeocodingMapComponent />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const PolygonMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  // const [buttonType] = useState<string | null>(null)\\\\n  // console.log(buttonType)\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[20.5937, 78.9629]}\\\\n        zoom={4}\\\\n        zoomControl={boolean('Zoom Controls', true)}\\\\n        locationSearch={boolean('Location Search Bar', true)}\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height={text('Height', '300px')}\\\\n        width={text('Width', '800px')}\\\\n        tiles={\\\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\\\n        }\\\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\\\n        poi={boolean('Points of interest', false)}\\\\n        settingConfig={settingConfig}\\\\n        polygon={object('polygon', polyGeoFenceSampleData)}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\\\n        editPopUpComponent={({ map }: any) => (\\\\n          <EditPopUp\\\\n            onClick={() => {\\\\n              map.closePopup()\\\\n            }}\\\\n          />\\\\n        )}\\\\n        onEdit={action('Value Edited with new Vertex')}\\\\n        popupCustomComponent={{\\\\n          tooltipButton: ({ selectedData }: any) => (\\\\n            <ButtonList\\\\n              listOfButtons={[\\\\n                {\\\\n                  variant: 'button' as tVariant,\\\\n                  children: 'Edit',\\\\n                  // intent: 'table' as tIntent,\\\\n                  iconVariant: 'edit',\\\\n                  primary: true,\\\\n                  onClick: () => console.log('Edit', selectedData)\\\\n                },\\\\n                {\\\\n                  variant: 'button' as tVariant,\\\\n                  children: 'Delete',\\\\n                  iconVariant: 'icomoon-close',\\\\n                  // intent: 'table' as tIntent,\\\\n                  onClick: () => console.log('delete', selectedData)\\\\n                }\\\\n              ]}\\\\n            />\\\\n          )\\\\n        }}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const CircleMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n\\\\n  // create legend on the basis of markers data\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Route Mode')\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[20.5937, 78.9629]}\\\\n        zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        popupRef={infowindowStructure}\\\\n        settingConfig={settingConfig}\\\\n        onSettingChange={action('setting changed')}\\\\n        circle={object('circle', circleSampleData)}\\\\n        onEdit={action('Value Edited with new Vertex')}\\\\n        editPopUpComponent={({ map }: any) => (\\\\n          <EditPopUp\\\\n            onClick={() => {\\\\n              map.closePopup()\\\\n            }}\\\\n          />\\\\n        )}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\",\\\"locationsMap\\\":{}},},\\n  title: `${path}/Map`,\\n  decorators: [withKnobs],\\n  component: LeafletMap\\n}\\n\\n// The options which will be visible for tile-layer select in the story\\nconst tileOptions = {\\n  'open-street-maps': 'osm',\\n  'google-satellite': 'google_satellite',\\n  'google-basic': 'google_roadmap',\\n  'google-terrain': 'google_terrain',\\n  'google-hybrid': 'google_hybrid'\\n}\\n\\nconst themeOptions = {\\n  light: 'light',\\n  dark: 'dark'\\n}\\n\\nexport const BaseMap = addSourceDecorator(() => {\\n  const settingConfig = Object.assign({}, Settings)\\n  // set permission false, so that map mode will be hidden\\n  settingConfig['Map Mode'].permission = false\\n\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[51.0, 19.0]}\\n        latLngBounds={[[37.09024, -95.712891]]}\\n        // zoom={number('Zoom', 4, { min: 1, max: 24 })}\\n        zoomControl={boolean('Zoom Controls', true)}\\n        locationSearch={boolean('Location Search Bar', true)}\\n        googleApiKey={GOOGLE_API_KEY}\\n        heremapsApiKey={HERE_MAPS_API_KEY}\\n        height={text('Height', '300px')}\\n        width={text('Width', '800px')}\\n        tiles={\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\n        }\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\n        poi={boolean('Points of interest', false)}\\n        settingConfig={settingConfig}\\n        popupRef={infowindowStructure}\\n        onSettingChange={action('setting changed')}\\n        rulerControl={boolean('rulerControl', true)}\\n        iconsRef={markerIcons}\\n        // center={array('center', ['37.7749', '-122.4194'])}\\n      />\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nexport const MarkerMap = addSourceDecorator(() => {\\n  const settingConfig = Object.assign({}, Settings)\\n\\n  // set permission true of markers if sending data,same like heatmap\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\n    option.permission = option.name === 'Markers'\\n    option.selected = option.name === 'Markers'\\n  })\\n  settingConfig['Map Mode'].permission = true\\n\\n  // create legend on the basis of markers data\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\n\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[37.09024, -95.712891]}\\n        latLngBounds={[[37.09024, -95.712891]]}\\n        // zoom={4}\\n        zoomControl\\n        locationSearch\\n        googleApiKey={GOOGLE_API_KEY}\\n        height='800px'\\n        width='800px'\\n        tiles='google_roadmap'\\n        markers={object('Marker Configuration', markerLayerObj)}\\n        focusMarkerId={text('Marker Id to focus/open', '')}\\n        iconsRef={markerIcons}\\n        popupRef={infowindowStructure}\\n        settingConfig={settingConfig}\\n        onSettingChange={action('setting changed')}\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\n      />\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nexport const HeatMapAndMarker = addSourceDecorator(() => {\\n  const settingConfig = Object.assign({}, Settings)\\n  // set permission true of heatmap if sending data,same like marker\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\n    option.permission = true // true for both option\\n    option.selected = option.name === 'Markers' // markers selected first\\n  })\\n  settingConfig['Map Mode'].permission = true\\n  // create legend on the basis of markers data\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\n\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[51.0, 19.0]}\\n        // zoom={4}\\n        zoomControl\\n        locationSearch\\n        googleApiKey={GOOGLE_API_KEY}\\n        height='800px'\\n        width='800px'\\n        tiles='google_roadmap'\\n        heatmap={object('Heatmap configuration', {\\n          permission: false,\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\n        })}\\n        settingConfig={settingConfig}\\n        markers={object('Marker Configuration', markerLayerObj)}\\n        iconsRef={markerIcons}\\n        popupRef={infowindowStructure}\\n        onSettingChange={action('setting changed')}\\n      />\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nexport const HeatMap = addSourceDecorator(() => {\\n  const settingConfig = Object.assign({}, Settings)\\n  // set permission true of heatmap if sending data,same like marker\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\n    option.permission = option.name === 'HeatMap'\\n    option.selected = option.name === 'HeatMap'\\n  })\\n  settingConfig['Map Mode'].permission = true\\n\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[51.0, 19.0]}\\n        // zoom={4}\\n        zoomControl\\n        locationSearch\\n        googleApiKey={GOOGLE_API_KEY}\\n        height='300px'\\n        width='800px'\\n        tiles='google_roadmap'\\n        heatmap={object('Heatmap configuration', {\\n          permission: true,\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\n        })}\\n        settingConfig={settingConfig}\\n        onSettingChange={action('setting changed')}\\n      />\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nexport const TripsMap = addSourceDecorator(() => {\\n  const settingConfig = Object.assign({}, Settings)\\n  // create legend on the basis of markers data\\n\\n  // set permission false, so that map mode will be hidden\\n  settingConfig['Map Mode'].permission = false\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[51.0, 19.0]}\\n        zoom={4}\\n        zoomControl\\n        locationSearch\\n        googleApiKey={GOOGLE_API_KEY}\\n        height='300px'\\n        width='800px'\\n        tiles='google_roadmap'\\n        trips={object('Trip Configuration', sampleTripData)}\\n        iconsRef={markerIcons}\\n        popupRef={infowindowStructure}\\n        onSettingChange={action('setting changed')}\\n      />\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nexport const TrackingMap = addSourceDecorator(() => {\\n  const settingConfig = Object.assign({}, Settings)\\n\\n  // set permission false, so that map mode will be hidden\\n  settingConfig['Map Mode'].permission = false\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[33.298959, -111.9724]}\\n        zoom={10}\\n        zoomControl\\n        locationSearch\\n        googleApiKey={GOOGLE_API_KEY}\\n        height='300px'\\n        width='800px'\\n        tiles='google_roadmap'\\n        tracking={object('Tracking Configuration', sampleTrackingData)}\\n        onSettingChange={action('setting changed')}\\n      />\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nconst GeocodingMapComponent = () => {\\n  const settingConfig = Object.assign({}, Settings)\\n  // set permission false, so that map mode will be hidden\\n  settingConfig['Map Mode'].permission = false\\n  // const [searchText, setSearchText] = React.useState(\\n  //   'Mumbai, Maharashtra, India'\\n  // )\\n  // const [position, setPosition] = React.useState([19.0759837, 72.8776559])\\n\\n  return (\\n    <LeafletMap\\n      id='leafletBaseMap'\\n      classes='baseMap customBaseMap'\\n      googleApiKey={GOOGLE_API_KEY}\\n      settingConfig={settingConfig}\\n      center={[51.0, 19.0]}\\n      // markers={object('Marker Configuration', markerLayerObj)}\\n      iconsRef={markerIcons}\\n      zoomControl\\n      locationSearch\\n      sendLocationOutside={action('sendLocationOutside ')}\\n      isShowMapTileLayer={boolean('isShowMapTileLayer', false)}\\n      geocoding={{\\n        permission: true,\\n\\n        /** If you are passing searchText, ensure to pass the position prop as well. */\\n        searchText: text('searchText', 'Mumbai'),\\n        // searchTextInput: searchText,\\n        position: [19.0759837, 72.8776559],\\n        isSave: boolean('isSave', true),\\n        onGeocodingSave: (e: any) => {\\n          window.alert(\\n            'Geocodes Saved ' + e.position?.[0] + ', ' + e.position?.[1]\\n          )\\n        },\\n        onGeocodingDragEnd: (pos: [number, number]) => {\\n          action('On Geocoding Drag End')(pos)\\n          // setPosition(pos)\\n          // setSearchText('India')\\n        }\\n      }}\\n      showLegendWrapper={boolean('showLegendWrapper', false)}\\n    />\\n  )\\n}\\nexport const GeocodingMap = addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <GeocodingMapComponent />\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nexport const PolygonMap = addSourceDecorator(() => {\\n  const settingConfig = Object.assign({}, Settings)\\n  // set permission false, so that map mode will be hidden\\n  settingConfig['Map Mode'].permission = false\\n  // const [buttonType] = useState<string | null>(null)\\n  // console.log(buttonType)\\n\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[20.5937, 78.9629]}\\n        zoom={4}\\n        zoomControl={boolean('Zoom Controls', true)}\\n        locationSearch={boolean('Location Search Bar', true)}\\n        googleApiKey={GOOGLE_API_KEY}\\n        height={text('Height', '300px')}\\n        width={text('Width', '800px')}\\n        tiles={\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\n        }\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\n        poi={boolean('Points of interest', false)}\\n        settingConfig={settingConfig}\\n        polygon={object('polygon', polyGeoFenceSampleData)}\\n        popupRef={infowindowStructure}\\n        onSettingChange={action('setting changed')}\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\n        editPopUpComponent={({ map }: any) => (\\n          <EditPopUp\\n            onClick={() => {\\n              map.closePopup()\\n            }}\\n          />\\n        )}\\n        onEdit={action('Value Edited with new Vertex')}\\n        popupCustomComponent={{\\n          tooltipButton: ({ selectedData }: any) => (\\n            <ButtonList\\n              listOfButtons={[\\n                {\\n                  variant: 'button' as tVariant,\\n                  children: 'Edit',\\n                  // intent: 'table' as tIntent,\\n                  iconVariant: 'edit',\\n                  primary: true,\\n                  onClick: () => console.log('Edit', selectedData)\\n                },\\n                {\\n                  variant: 'button' as tVariant,\\n                  children: 'Delete',\\n                  iconVariant: 'icomoon-close',\\n                  // intent: 'table' as tIntent,\\n                  onClick: () => console.log('delete', selectedData)\\n                }\\n              ]}\\n            />\\n          )\\n        }}\\n      />\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nexport const CircleMap = addSourceDecorator(() => {\\n  const settingConfig = Object.assign({}, Settings)\\n\\n  // set permission false, so that map mode will be hidden\\n  settingConfig['Map Mode'].permission = false\\n\\n  // create legend on the basis of markers data\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Route Mode')\\n\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[20.5937, 78.9629]}\\n        zoom={4}\\n        zoomControl\\n        locationSearch\\n        googleApiKey={GOOGLE_API_KEY}\\n        height='300px'\\n        width='800px'\\n        tiles='google_roadmap'\\n        popupRef={infowindowStructure}\\n        settingConfig={settingConfig}\\n        onSettingChange={action('setting changed')}\\n        circle={object('circle', circleSampleData)}\\n        onEdit={action('Value Edited with new Vertex')}\\n        editPopUpComponent={({ map }: any) => (\\n          <EditPopUp\\n            onClick={() => {\\n              map.closePopup()\\n            }}\\n          />\\n        )}\\n      />\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\",\n    \"locationsMap\": {}\n  }), _defineProperty(_parameters, \"storySource\", {\n    \"source\": \"import { action } from '@storybook/addon-actions'\\nimport {\\n  boolean,\\n  object,\\n  select,\\n  text,\\n  withKnobs\\n} from '@storybook/addon-knobs'\\nimport React from 'react'\\nimport LeafletMap from '.'\\nimport { path } from '..'\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\nimport Settings from '../../atoms/SettingBox/data'\\nimport { ButtonList } from '../../molecules/ShowHideColumnPopup'\\nimport { tVariant } from '../Button'\\nimport { IOption } from '../SettingBox/interface'\\nimport {\\n  GOOGLE_API_KEY,\\n  HERE_MAPS_API_KEY\\n} from './constants/googleIntegration.constants'\\nimport circleSampleData from './dummyData/CircleSampleData.SampleData'\\nimport infowindowStructure from './dummyData/Infowindow.structure.sampleData'\\nimport markerIcons from './dummyData/MarkerIcon.sampleData'\\nimport markerLayerObj from './dummyData/Markers.sampleData'\\nimport polyGeoFenceSampleData from './dummyData/PolyGeoFence.SampleData'\\nimport sampleTrackingData from './dummyData/Presentation.Tracking.sampleData'\\nimport sampleTripData from './dummyData/Presentation.Trips.sampleData'\\nimport { updateSettingsWithLegends } from './helperMethods'\\nimport EditPopUp from './SubComponent/EditPopUp'\\nimport { tTheme, tTiles } from './types.d'\\n\\nexport default {\\n  title: `${path}/Map`,\\n  decorators: [withKnobs],\\n  component: LeafletMap\\n}\\n\\n// The options which will be visible for tile-layer select in the story\\nconst tileOptions = {\\n  'open-street-maps': 'osm',\\n  'google-satellite': 'google_satellite',\\n  'google-basic': 'google_roadmap',\\n  'google-terrain': 'google_terrain',\\n  'google-hybrid': 'google_hybrid'\\n}\\n\\nconst themeOptions = {\\n  light: 'light',\\n  dark: 'dark'\\n}\\n\\nexport const BaseMap = () => {\\n  const settingConfig = Object.assign({}, Settings)\\n  // set permission false, so that map mode will be hidden\\n  settingConfig['Map Mode'].permission = false\\n\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[51.0, 19.0]}\\n        latLngBounds={[[37.09024, -95.712891]]}\\n        // zoom={number('Zoom', 4, { min: 1, max: 24 })}\\n        zoomControl={boolean('Zoom Controls', true)}\\n        locationSearch={boolean('Location Search Bar', true)}\\n        googleApiKey={GOOGLE_API_KEY}\\n        heremapsApiKey={HERE_MAPS_API_KEY}\\n        height={text('Height', '300px')}\\n        width={text('Width', '800px')}\\n        tiles={\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\n        }\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\n        poi={boolean('Points of interest', false)}\\n        settingConfig={settingConfig}\\n        popupRef={infowindowStructure}\\n        onSettingChange={action('setting changed')}\\n        rulerControl={boolean('rulerControl', true)}\\n        iconsRef={markerIcons}\\n        // center={array('center', ['37.7749', '-122.4194'])}\\n      />\\n    </ThemeWrapper>\\n  )\\n}\\n\\nexport const MarkerMap = () => {\\n  const settingConfig = Object.assign({}, Settings)\\n\\n  // set permission true of markers if sending data,same like heatmap\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\n    option.permission = option.name === 'Markers'\\n    option.selected = option.name === 'Markers'\\n  })\\n  settingConfig['Map Mode'].permission = true\\n\\n  // create legend on the basis of markers data\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\n\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[37.09024, -95.712891]}\\n        latLngBounds={[[37.09024, -95.712891]]}\\n        // zoom={4}\\n        zoomControl\\n        locationSearch\\n        googleApiKey={GOOGLE_API_KEY}\\n        height='800px'\\n        width='800px'\\n        tiles='google_roadmap'\\n        markers={object('Marker Configuration', markerLayerObj)}\\n        focusMarkerId={text('Marker Id to focus/open', '')}\\n        iconsRef={markerIcons}\\n        popupRef={infowindowStructure}\\n        settingConfig={settingConfig}\\n        onSettingChange={action('setting changed')}\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\n      />\\n    </ThemeWrapper>\\n  )\\n}\\n\\nexport const HeatMapAndMarker = () => {\\n  const settingConfig = Object.assign({}, Settings)\\n  // set permission true of heatmap if sending data,same like marker\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\n    option.permission = true // true for both option\\n    option.selected = option.name === 'Markers' // markers selected first\\n  })\\n  settingConfig['Map Mode'].permission = true\\n  // create legend on the basis of markers data\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\n\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[51.0, 19.0]}\\n        // zoom={4}\\n        zoomControl\\n        locationSearch\\n        googleApiKey={GOOGLE_API_KEY}\\n        height='800px'\\n        width='800px'\\n        tiles='google_roadmap'\\n        heatmap={object('Heatmap configuration', {\\n          permission: false,\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\n        })}\\n        settingConfig={settingConfig}\\n        markers={object('Marker Configuration', markerLayerObj)}\\n        iconsRef={markerIcons}\\n        popupRef={infowindowStructure}\\n        onSettingChange={action('setting changed')}\\n      />\\n    </ThemeWrapper>\\n  )\\n}\\n\\nexport const HeatMap = () => {\\n  const settingConfig = Object.assign({}, Settings)\\n  // set permission true of heatmap if sending data,same like marker\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\n    option.permission = option.name === 'HeatMap'\\n    option.selected = option.name === 'HeatMap'\\n  })\\n  settingConfig['Map Mode'].permission = true\\n\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[51.0, 19.0]}\\n        // zoom={4}\\n        zoomControl\\n        locationSearch\\n        googleApiKey={GOOGLE_API_KEY}\\n        height='300px'\\n        width='800px'\\n        tiles='google_roadmap'\\n        heatmap={object('Heatmap configuration', {\\n          permission: true,\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\n        })}\\n        settingConfig={settingConfig}\\n        onSettingChange={action('setting changed')}\\n      />\\n    </ThemeWrapper>\\n  )\\n}\\n\\nexport const TripsMap = () => {\\n  const settingConfig = Object.assign({}, Settings)\\n  // create legend on the basis of markers data\\n\\n  // set permission false, so that map mode will be hidden\\n  settingConfig['Map Mode'].permission = false\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[51.0, 19.0]}\\n        zoom={4}\\n        zoomControl\\n        locationSearch\\n        googleApiKey={GOOGLE_API_KEY}\\n        height='300px'\\n        width='800px'\\n        tiles='google_roadmap'\\n        trips={object('Trip Configuration', sampleTripData)}\\n        iconsRef={markerIcons}\\n        popupRef={infowindowStructure}\\n        onSettingChange={action('setting changed')}\\n      />\\n    </ThemeWrapper>\\n  )\\n}\\n\\nexport const TrackingMap = () => {\\n  const settingConfig = Object.assign({}, Settings)\\n\\n  // set permission false, so that map mode will be hidden\\n  settingConfig['Map Mode'].permission = false\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[33.298959, -111.9724]}\\n        zoom={10}\\n        zoomControl\\n        locationSearch\\n        googleApiKey={GOOGLE_API_KEY}\\n        height='300px'\\n        width='800px'\\n        tiles='google_roadmap'\\n        tracking={object('Tracking Configuration', sampleTrackingData)}\\n        onSettingChange={action('setting changed')}\\n      />\\n    </ThemeWrapper>\\n  )\\n}\\n\\nconst GeocodingMapComponent = () => {\\n  const settingConfig = Object.assign({}, Settings)\\n  // set permission false, so that map mode will be hidden\\n  settingConfig['Map Mode'].permission = false\\n  // const [searchText, setSearchText] = React.useState(\\n  //   'Mumbai, Maharashtra, India'\\n  // )\\n  // const [position, setPosition] = React.useState([19.0759837, 72.8776559])\\n\\n  return (\\n    <LeafletMap\\n      id='leafletBaseMap'\\n      classes='baseMap customBaseMap'\\n      googleApiKey={GOOGLE_API_KEY}\\n      settingConfig={settingConfig}\\n      center={[51.0, 19.0]}\\n      // markers={object('Marker Configuration', markerLayerObj)}\\n      iconsRef={markerIcons}\\n      zoomControl\\n      locationSearch\\n      sendLocationOutside={action('sendLocationOutside ')}\\n      isShowMapTileLayer={boolean('isShowMapTileLayer', false)}\\n      geocoding={{\\n        permission: true,\\n\\n        /** If you are passing searchText, ensure to pass the position prop as well. */\\n        searchText: text('searchText', 'Mumbai'),\\n        // searchTextInput: searchText,\\n        position: [19.0759837, 72.8776559],\\n        isSave: boolean('isSave', true),\\n        onGeocodingSave: (e: any) => {\\n          window.alert(\\n            'Geocodes Saved ' + e.position?.[0] + ', ' + e.position?.[1]\\n          )\\n        },\\n        onGeocodingDragEnd: (pos: [number, number]) => {\\n          action('On Geocoding Drag End')(pos)\\n          // setPosition(pos)\\n          // setSearchText('India')\\n        }\\n      }}\\n      showLegendWrapper={boolean('showLegendWrapper', false)}\\n    />\\n  )\\n}\\nexport const GeocodingMap = () => {\\n  return (\\n    <ThemeWrapper>\\n      <GeocodingMapComponent />\\n    </ThemeWrapper>\\n  )\\n}\\n\\nexport const PolygonMap = () => {\\n  const settingConfig = Object.assign({}, Settings)\\n  // set permission false, so that map mode will be hidden\\n  settingConfig['Map Mode'].permission = false\\n  // const [buttonType] = useState<string | null>(null)\\n  // console.log(buttonType)\\n\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[20.5937, 78.9629]}\\n        zoom={4}\\n        zoomControl={boolean('Zoom Controls', true)}\\n        locationSearch={boolean('Location Search Bar', true)}\\n        googleApiKey={GOOGLE_API_KEY}\\n        height={text('Height', '300px')}\\n        width={text('Width', '800px')}\\n        tiles={\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\n        }\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\n        poi={boolean('Points of interest', false)}\\n        settingConfig={settingConfig}\\n        polygon={object('polygon', polyGeoFenceSampleData)}\\n        popupRef={infowindowStructure}\\n        onSettingChange={action('setting changed')}\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\n        editPopUpComponent={({ map }: any) => (\\n          <EditPopUp\\n            onClick={() => {\\n              map.closePopup()\\n            }}\\n          />\\n        )}\\n        onEdit={action('Value Edited with new Vertex')}\\n        popupCustomComponent={{\\n          tooltipButton: ({ selectedData }: any) => (\\n            <ButtonList\\n              listOfButtons={[\\n                {\\n                  variant: 'button' as tVariant,\\n                  children: 'Edit',\\n                  // intent: 'table' as tIntent,\\n                  iconVariant: 'edit',\\n                  primary: true,\\n                  onClick: () => console.log('Edit', selectedData)\\n                },\\n                {\\n                  variant: 'button' as tVariant,\\n                  children: 'Delete',\\n                  iconVariant: 'icomoon-close',\\n                  // intent: 'table' as tIntent,\\n                  onClick: () => console.log('delete', selectedData)\\n                }\\n              ]}\\n            />\\n          )\\n        }}\\n      />\\n    </ThemeWrapper>\\n  )\\n}\\n\\nexport const CircleMap = () => {\\n  const settingConfig = Object.assign({}, Settings)\\n\\n  // set permission false, so that map mode will be hidden\\n  settingConfig['Map Mode'].permission = false\\n\\n  // create legend on the basis of markers data\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Route Mode')\\n\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[20.5937, 78.9629]}\\n        zoom={4}\\n        zoomControl\\n        locationSearch\\n        googleApiKey={GOOGLE_API_KEY}\\n        height='300px'\\n        width='800px'\\n        tiles='google_roadmap'\\n        popupRef={infowindowStructure}\\n        settingConfig={settingConfig}\\n        onSettingChange={action('setting changed')}\\n        circle={object('circle', circleSampleData)}\\n        onEdit={action('Value Edited with new Vertex')}\\n        editPopUpComponent={({ map }: any) => (\\n          <EditPopUp\\n            onClick={() => {\\n              map.closePopup()\\n            }}\\n          />\\n        )}\\n      />\\n    </ThemeWrapper>\\n  )\\n}\\n\",\n    \"locationsMap\": {}\n  }), _parameters),\n  title: path + \"/Map\",\n  decorators: [withKnobs],\n  component: LeafletMap\n}; // The options which will be visible for tile-layer select in the story\n\nvar tileOptions = {\n  'open-street-maps': 'osm',\n  'google-satellite': 'google_satellite',\n  'google-basic': 'google_roadmap',\n  'google-terrain': 'google_terrain',\n  'google-hybrid': 'google_hybrid'\n};\nvar themeOptions = {\n  light: 'light',\n  dark: 'dark'\n};\nexport var BaseMap = addSourceDecorator(addSourceDecorator(addSourceDecorator(function () {\n  var settingConfig = Object.assign({}, Settings); // set permission false, so that map mode will be hidden\n\n  settingConfig['Map Mode'].permission = false;\n  return React.createElement(ThemeWrapper, null, React.createElement(LeafletMap, {\n    id: 'leafletBaseMap',\n    classes: 'baseMap customBaseMap',\n    center: [51.0, 19.0],\n    latLngBounds: [[37.09024, -95.712891]],\n    // zoom={number('Zoom', 4, { min: 1, max: 24 })}\n    zoomControl: _boolean('Zoom Controls', true),\n    locationSearch: _boolean('Location Search Bar', true),\n    googleApiKey: GOOGLE_API_KEY,\n    heremapsApiKey: HERE_MAPS_API_KEY,\n    height: text('Height', '300px'),\n    width: text('Width', '800px'),\n    tiles: select('Base Tile Layer', tileOptions, 'google_roadmap'),\n    theme: select('Theme', themeOptions, 'light'),\n    poi: _boolean('Points of interest', false),\n    settingConfig: settingConfig,\n    popupRef: infowindowStructure,\n    onSettingChange: action('setting changed'),\n    rulerControl: _boolean('rulerControl', true),\n    iconsRef: markerIcons\n  }));\n}, {\n  __STORY__: __STORY__,\n  __ADDS_MAP__: __ADDS_MAP__,\n  __MAIN_FILE_LOCATION__: __MAIN_FILE_LOCATION__,\n  __MODULE_DEPENDENCIES__: __MODULE_DEPENDENCIES__,\n  __LOCAL_DEPENDENCIES__: __LOCAL_DEPENDENCIES__,\n  __SOURCE_PREFIX__: __SOURCE_PREFIX__,\n  __IDS_TO_FRAMEWORKS__: __IDS_TO_FRAMEWORKS__\n}), {\n  __STORY__: __STORY__,\n  __ADDS_MAP__: __ADDS_MAP__,\n  __MAIN_FILE_LOCATION__: __MAIN_FILE_LOCATION__,\n  __MODULE_DEPENDENCIES__: __MODULE_DEPENDENCIES__,\n  __LOCAL_DEPENDENCIES__: __LOCAL_DEPENDENCIES__,\n  __SOURCE_PREFIX__: __SOURCE_PREFIX__,\n  __IDS_TO_FRAMEWORKS__: __IDS_TO_FRAMEWORKS__\n}), {\n  __STORY__: __STORY__,\n  __ADDS_MAP__: __ADDS_MAP__,\n  __MAIN_FILE_LOCATION__: __MAIN_FILE_LOCATION__,\n  __MODULE_DEPENDENCIES__: __MODULE_DEPENDENCIES__,\n  __LOCAL_DEPENDENCIES__: __LOCAL_DEPENDENCIES__,\n  __SOURCE_PREFIX__: __SOURCE_PREFIX__,\n  __IDS_TO_FRAMEWORKS__: __IDS_TO_FRAMEWORKS__\n});\n;\n;\nexport var MarkerMap = addSourceDecorator(addSourceDecorator(addSourceDecorator(function () {\n  var settingConfig = Object.assign({}, Settings); // set permission true of markers if sending data,same like heatmap\n\n  settingConfig['Map Mode'].option.forEach(function (option) {\n    option.permission = option.name === 'Markers';\n    option.selected = option.name === 'Markers';\n  });\n  settingConfig['Map Mode'].permission = true; // create legend on the basis of markers data\n\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends');\n  return React.createElement(ThemeWrapper, null, React.createElement(LeafletMap, {\n    id: 'leafletBaseMap',\n    classes: 'baseMap customBaseMap',\n    center: [37.09024, -95.712891],\n    latLngBounds: [[37.09024, -95.712891]],\n    // zoom={4}\n    zoomControl: true,\n    locationSearch: true,\n    googleApiKey: GOOGLE_API_KEY,\n    height: '800px',\n    width: '800px',\n    tiles: 'google_roadmap',\n    markers: object('Marker Configuration', markerLayerObj),\n    focusMarkerId: text('Marker Id to focus/open', ''),\n    iconsRef: markerIcons,\n    popupRef: infowindowStructure,\n    settingConfig: settingConfig,\n    onSettingChange: action('setting changed'),\n    handleClosePopup: function handleClosePopup(popupRef) {\n      return action('handle Close Popup')(popupRef);\n    }\n  }));\n}, {\n  __STORY__: __STORY__,\n  __ADDS_MAP__: __ADDS_MAP__,\n  __MAIN_FILE_LOCATION__: __MAIN_FILE_LOCATION__,\n  __MODULE_DEPENDENCIES__: __MODULE_DEPENDENCIES__,\n  __LOCAL_DEPENDENCIES__: __LOCAL_DEPENDENCIES__,\n  __SOURCE_PREFIX__: __SOURCE_PREFIX__,\n  __IDS_TO_FRAMEWORKS__: __IDS_TO_FRAMEWORKS__\n}), {\n  __STORY__: __STORY__,\n  __ADDS_MAP__: __ADDS_MAP__,\n  __MAIN_FILE_LOCATION__: __MAIN_FILE_LOCATION__,\n  __MODULE_DEPENDENCIES__: __MODULE_DEPENDENCIES__,\n  __LOCAL_DEPENDENCIES__: __LOCAL_DEPENDENCIES__,\n  __SOURCE_PREFIX__: __SOURCE_PREFIX__,\n  __IDS_TO_FRAMEWORKS__: __IDS_TO_FRAMEWORKS__\n}), {\n  __STORY__: __STORY__,\n  __ADDS_MAP__: __ADDS_MAP__,\n  __MAIN_FILE_LOCATION__: __MAIN_FILE_LOCATION__,\n  __MODULE_DEPENDENCIES__: __MODULE_DEPENDENCIES__,\n  __LOCAL_DEPENDENCIES__: __LOCAL_DEPENDENCIES__,\n  __SOURCE_PREFIX__: __SOURCE_PREFIX__,\n  __IDS_TO_FRAMEWORKS__: __IDS_TO_FRAMEWORKS__\n});\n;\n;\nexport var HeatMapAndMarker = addSourceDecorator(addSourceDecorator(addSourceDecorator(function () {\n  var settingConfig = Object.assign({}, Settings); // set permission true of heatmap if sending data,same like marker\n\n  settingConfig['Map Mode'].option.forEach(function (option) {\n    option.permission = true; // true for both option\n\n    option.selected = option.name === 'Markers'; // markers selected first\n  });\n  settingConfig['Map Mode'].permission = true; // create legend on the basis of markers data\n\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends');\n  return React.createElement(ThemeWrapper, null, React.createElement(LeafletMap, {\n    id: 'leafletBaseMap',\n    classes: 'baseMap customBaseMap',\n    center: [51.0, 19.0],\n    // zoom={4}\n    zoomControl: true,\n    locationSearch: true,\n    googleApiKey: GOOGLE_API_KEY,\n    height: '800px',\n    width: '800px',\n    tiles: 'google_roadmap',\n    heatmap: object('Heatmap configuration', {\n      permission: false,\n      data: markerLayerObj.entitiesMap.orders.markers.list\n    }),\n    settingConfig: settingConfig,\n    markers: object('Marker Configuration', markerLayerObj),\n    iconsRef: markerIcons,\n    popupRef: infowindowStructure,\n    onSettingChange: action('setting changed')\n  }));\n}, {\n  __STORY__: __STORY__,\n  __ADDS_MAP__: __ADDS_MAP__,\n  __MAIN_FILE_LOCATION__: __MAIN_FILE_LOCATION__,\n  __MODULE_DEPENDENCIES__: __MODULE_DEPENDENCIES__,\n  __LOCAL_DEPENDENCIES__: __LOCAL_DEPENDENCIES__,\n  __SOURCE_PREFIX__: __SOURCE_PREFIX__,\n  __IDS_TO_FRAMEWORKS__: __IDS_TO_FRAMEWORKS__\n}), {\n  __STORY__: __STORY__,\n  __ADDS_MAP__: __ADDS_MAP__,\n  __MAIN_FILE_LOCATION__: __MAIN_FILE_LOCATION__,\n  __MODULE_DEPENDENCIES__: __MODULE_DEPENDENCIES__,\n  __LOCAL_DEPENDENCIES__: __LOCAL_DEPENDENCIES__,\n  __SOURCE_PREFIX__: __SOURCE_PREFIX__,\n  __IDS_TO_FRAMEWORKS__: __IDS_TO_FRAMEWORKS__\n}), {\n  __STORY__: __STORY__,\n  __ADDS_MAP__: __ADDS_MAP__,\n  __MAIN_FILE_LOCATION__: __MAIN_FILE_LOCATION__,\n  __MODULE_DEPENDENCIES__: __MODULE_DEPENDENCIES__,\n  __LOCAL_DEPENDENCIES__: __LOCAL_DEPENDENCIES__,\n  __SOURCE_PREFIX__: __SOURCE_PREFIX__,\n  __IDS_TO_FRAMEWORKS__: __IDS_TO_FRAMEWORKS__\n});\n;\n;\nexport var HeatMap = addSourceDecorator(addSourceDecorator(addSourceDecorator(function () {\n  var settingConfig = Object.assign({}, Settings); // set permission true of heatmap if sending data,same like marker\n\n  settingConfig['Map Mode'].option.forEach(function (option) {\n    option.permission = option.name === 'HeatMap';\n    option.selected = option.name === 'HeatMap';\n  });\n  settingConfig['Map Mode'].permission = true;\n  return React.createElement(ThemeWrapper, null, React.createElement(LeafletMap, {\n    id: 'leafletBaseMap',\n    classes: 'baseMap customBaseMap',\n    center: [51.0, 19.0],\n    // zoom={4}\n    zoomControl: true,\n    locationSearch: true,\n    googleApiKey: GOOGLE_API_KEY,\n    height: '300px',\n    width: '800px',\n    tiles: 'google_roadmap',\n    heatmap: object('Heatmap configuration', {\n      permission: true,\n      data: markerLayerObj.entitiesMap.orders.markers.list\n    }),\n    settingConfig: settingConfig,\n    onSettingChange: action('setting changed')\n  }));\n}, {\n  __STORY__: __STORY__,\n  __ADDS_MAP__: __ADDS_MAP__,\n  __MAIN_FILE_LOCATION__: __MAIN_FILE_LOCATION__,\n  __MODULE_DEPENDENCIES__: __MODULE_DEPENDENCIES__,\n  __LOCAL_DEPENDENCIES__: __LOCAL_DEPENDENCIES__,\n  __SOURCE_PREFIX__: __SOURCE_PREFIX__,\n  __IDS_TO_FRAMEWORKS__: __IDS_TO_FRAMEWORKS__\n}), {\n  __STORY__: __STORY__,\n  __ADDS_MAP__: __ADDS_MAP__,\n  __MAIN_FILE_LOCATION__: __MAIN_FILE_LOCATION__,\n  __MODULE_DEPENDENCIES__: __MODULE_DEPENDENCIES__,\n  __LOCAL_DEPENDENCIES__: __LOCAL_DEPENDENCIES__,\n  __SOURCE_PREFIX__: __SOURCE_PREFIX__,\n  __IDS_TO_FRAMEWORKS__: __IDS_TO_FRAMEWORKS__\n}), {\n  __STORY__: __STORY__,\n  __ADDS_MAP__: __ADDS_MAP__,\n  __MAIN_FILE_LOCATION__: __MAIN_FILE_LOCATION__,\n  __MODULE_DEPENDENCIES__: __MODULE_DEPENDENCIES__,\n  __LOCAL_DEPENDENCIES__: __LOCAL_DEPENDENCIES__,\n  __SOURCE_PREFIX__: __SOURCE_PREFIX__,\n  __IDS_TO_FRAMEWORKS__: __IDS_TO_FRAMEWORKS__\n});\n;\n;\nexport var TripsMap = addSourceDecorator(addSourceDecorator(addSourceDecorator(function () {\n  var settingConfig = Object.assign({}, Settings); // create legend on the basis of markers data\n  // set permission false, so that map mode will be hidden\n\n  settingConfig['Map Mode'].permission = false;\n  return React.createElement(ThemeWrapper, null, React.createElement(LeafletMap, {\n    id: 'leafletBaseMap',\n    classes: 'baseMap customBaseMap',\n    center: [51.0, 19.0],\n    zoom: 4,\n    zoomControl: true,\n    locationSearch: true,\n    googleApiKey: GOOGLE_API_KEY,\n    height: '300px',\n    width: '800px',\n    tiles: 'google_roadmap',\n    trips: object('Trip Configuration', sampleTripData),\n    iconsRef: markerIcons,\n    popupRef: infowindowStructure,\n    onSettingChange: action('setting changed')\n  }));\n}, {\n  __STORY__: __STORY__,\n  __ADDS_MAP__: __ADDS_MAP__,\n  __MAIN_FILE_LOCATION__: __MAIN_FILE_LOCATION__,\n  __MODULE_DEPENDENCIES__: __MODULE_DEPENDENCIES__,\n  __LOCAL_DEPENDENCIES__: __LOCAL_DEPENDENCIES__,\n  __SOURCE_PREFIX__: __SOURCE_PREFIX__,\n  __IDS_TO_FRAMEWORKS__: __IDS_TO_FRAMEWORKS__\n}), {\n  __STORY__: __STORY__,\n  __ADDS_MAP__: __ADDS_MAP__,\n  __MAIN_FILE_LOCATION__: __MAIN_FILE_LOCATION__,\n  __MODULE_DEPENDENCIES__: __MODULE_DEPENDENCIES__,\n  __LOCAL_DEPENDENCIES__: __LOCAL_DEPENDENCIES__,\n  __SOURCE_PREFIX__: __SOURCE_PREFIX__,\n  __IDS_TO_FRAMEWORKS__: __IDS_TO_FRAMEWORKS__\n}), {\n  __STORY__: __STORY__,\n  __ADDS_MAP__: __ADDS_MAP__,\n  __MAIN_FILE_LOCATION__: __MAIN_FILE_LOCATION__,\n  __MODULE_DEPENDENCIES__: __MODULE_DEPENDENCIES__,\n  __LOCAL_DEPENDENCIES__: __LOCAL_DEPENDENCIES__,\n  __SOURCE_PREFIX__: __SOURCE_PREFIX__,\n  __IDS_TO_FRAMEWORKS__: __IDS_TO_FRAMEWORKS__\n});\n;\n;\nexport var TrackingMap = addSourceDecorator(addSourceDecorator(addSourceDecorator(function () {\n  var settingConfig = Object.assign({}, Settings); // set permission false, so that map mode will be hidden\n\n  settingConfig['Map Mode'].permission = false;\n  return React.createElement(ThemeWrapper, null, React.createElement(LeafletMap, {\n    id: 'leafletBaseMap',\n    classes: 'baseMap customBaseMap',\n    center: [33.298959, -111.9724],\n    zoom: 10,\n    zoomControl: true,\n    locationSearch: true,\n    googleApiKey: GOOGLE_API_KEY,\n    height: '300px',\n    width: '800px',\n    tiles: 'google_roadmap',\n    tracking: object('Tracking Configuration', sampleTrackingData),\n    onSettingChange: action('setting changed')\n  }));\n}, {\n  __STORY__: __STORY__,\n  __ADDS_MAP__: __ADDS_MAP__,\n  __MAIN_FILE_LOCATION__: __MAIN_FILE_LOCATION__,\n  __MODULE_DEPENDENCIES__: __MODULE_DEPENDENCIES__,\n  __LOCAL_DEPENDENCIES__: __LOCAL_DEPENDENCIES__,\n  __SOURCE_PREFIX__: __SOURCE_PREFIX__,\n  __IDS_TO_FRAMEWORKS__: __IDS_TO_FRAMEWORKS__\n}), {\n  __STORY__: __STORY__,\n  __ADDS_MAP__: __ADDS_MAP__,\n  __MAIN_FILE_LOCATION__: __MAIN_FILE_LOCATION__,\n  __MODULE_DEPENDENCIES__: __MODULE_DEPENDENCIES__,\n  __LOCAL_DEPENDENCIES__: __LOCAL_DEPENDENCIES__,\n  __SOURCE_PREFIX__: __SOURCE_PREFIX__,\n  __IDS_TO_FRAMEWORKS__: __IDS_TO_FRAMEWORKS__\n}), {\n  __STORY__: __STORY__,\n  __ADDS_MAP__: __ADDS_MAP__,\n  __MAIN_FILE_LOCATION__: __MAIN_FILE_LOCATION__,\n  __MODULE_DEPENDENCIES__: __MODULE_DEPENDENCIES__,\n  __LOCAL_DEPENDENCIES__: __LOCAL_DEPENDENCIES__,\n  __SOURCE_PREFIX__: __SOURCE_PREFIX__,\n  __IDS_TO_FRAMEWORKS__: __IDS_TO_FRAMEWORKS__\n});\n;\n;\n\nvar GeocodingMapComponent = function GeocodingMapComponent() {\n  var settingConfig = Object.assign({}, Settings); // set permission false, so that map mode will be hidden\n\n  settingConfig['Map Mode'].permission = false; // const [searchText, setSearchText] = React.useState(\n  //   'Mumbai, Maharashtra, India'\n  // )\n  // const [position, setPosition] = React.useState([19.0759837, 72.8776559])\n\n  return React.createElement(LeafletMap, {\n    id: 'leafletBaseMap',\n    classes: 'baseMap customBaseMap',\n    googleApiKey: GOOGLE_API_KEY,\n    settingConfig: settingConfig,\n    center: [51.0, 19.0],\n    // markers={object('Marker Configuration', markerLayerObj)}\n    iconsRef: markerIcons,\n    zoomControl: true,\n    locationSearch: true,\n    sendLocationOutside: action('sendLocationOutside '),\n    isShowMapTileLayer: _boolean('isShowMapTileLayer', false),\n    geocoding: {\n      permission: true,\n\n      /** If you are passing searchText, ensure to pass the position prop as well. */\n      searchText: text('searchText', 'Mumbai'),\n      // searchTextInput: searchText,\n      position: [19.0759837, 72.8776559],\n      isSave: _boolean('isSave', true),\n      onGeocodingSave: function onGeocodingSave(e) {\n        var _a, _b;\n\n        window.alert('Geocodes Saved ' + ((_a = e.position) === null || _a === void 0 ? void 0 : _a[0]) + ', ' + ((_b = e.position) === null || _b === void 0 ? void 0 : _b[1]));\n      },\n      onGeocodingDragEnd: function onGeocodingDragEnd(pos) {\n        action('On Geocoding Drag End')(pos); // setPosition(pos)\n        // setSearchText('India')\n      }\n    },\n    showLegendWrapper: _boolean('showLegendWrapper', false)\n  });\n};\n\nexport var GeocodingMap = addSourceDecorator(addSourceDecorator(addSourceDecorator(function () {\n  return React.createElement(ThemeWrapper, null, React.createElement(GeocodingMapComponent, null));\n}, {\n  __STORY__: __STORY__,\n  __ADDS_MAP__: __ADDS_MAP__,\n  __MAIN_FILE_LOCATION__: __MAIN_FILE_LOCATION__,\n  __MODULE_DEPENDENCIES__: __MODULE_DEPENDENCIES__,\n  __LOCAL_DEPENDENCIES__: __LOCAL_DEPENDENCIES__,\n  __SOURCE_PREFIX__: __SOURCE_PREFIX__,\n  __IDS_TO_FRAMEWORKS__: __IDS_TO_FRAMEWORKS__\n}), {\n  __STORY__: __STORY__,\n  __ADDS_MAP__: __ADDS_MAP__,\n  __MAIN_FILE_LOCATION__: __MAIN_FILE_LOCATION__,\n  __MODULE_DEPENDENCIES__: __MODULE_DEPENDENCIES__,\n  __LOCAL_DEPENDENCIES__: __LOCAL_DEPENDENCIES__,\n  __SOURCE_PREFIX__: __SOURCE_PREFIX__,\n  __IDS_TO_FRAMEWORKS__: __IDS_TO_FRAMEWORKS__\n}), {\n  __STORY__: __STORY__,\n  __ADDS_MAP__: __ADDS_MAP__,\n  __MAIN_FILE_LOCATION__: __MAIN_FILE_LOCATION__,\n  __MODULE_DEPENDENCIES__: __MODULE_DEPENDENCIES__,\n  __LOCAL_DEPENDENCIES__: __LOCAL_DEPENDENCIES__,\n  __SOURCE_PREFIX__: __SOURCE_PREFIX__,\n  __IDS_TO_FRAMEWORKS__: __IDS_TO_FRAMEWORKS__\n});\n;\n;\nexport var PolygonMap = addSourceDecorator(addSourceDecorator(addSourceDecorator(function () {\n  var settingConfig = Object.assign({}, Settings); // set permission false, so that map mode will be hidden\n\n  settingConfig['Map Mode'].permission = false; // const [buttonType] = useState<string | null>(null)\n  // console.log(buttonType)\n\n  return React.createElement(ThemeWrapper, null, React.createElement(LeafletMap, {\n    id: 'leafletBaseMap',\n    classes: 'baseMap customBaseMap',\n    center: [20.5937, 78.9629],\n    zoom: 4,\n    zoomControl: _boolean('Zoom Controls', true),\n    locationSearch: _boolean('Location Search Bar', true),\n    googleApiKey: GOOGLE_API_KEY,\n    height: text('Height', '300px'),\n    width: text('Width', '800px'),\n    tiles: select('Base Tile Layer', tileOptions, 'google_roadmap'),\n    theme: select('Theme', themeOptions, 'light'),\n    poi: _boolean('Points of interest', false),\n    settingConfig: settingConfig,\n    polygon: object('polygon', polyGeoFenceSampleData),\n    popupRef: infowindowStructure,\n    onSettingChange: action('setting changed'),\n    handleClosePopup: function handleClosePopup(popupRef) {\n      return action('handle Close Popup')(popupRef);\n    },\n    editPopUpComponent: function editPopUpComponent(_a) {\n      var map = _a.map;\n      return React.createElement(EditPopUp, {\n        onClick: function onClick() {\n          map.closePopup();\n        }\n      });\n    },\n    onEdit: action('Value Edited with new Vertex'),\n    popupCustomComponent: {\n      tooltipButton: function tooltipButton(_a) {\n        var selectedData = _a.selectedData;\n        return React.createElement(ButtonList, {\n          listOfButtons: [{\n            variant: 'button',\n            children: 'Edit',\n            // intent: 'table' as tIntent,\n            iconVariant: 'edit',\n            primary: true,\n            onClick: function onClick() {\n              return console.log('Edit', selectedData);\n            }\n          }, {\n            variant: 'button',\n            children: 'Delete',\n            iconVariant: 'icomoon-close',\n            // intent: 'table' as tIntent,\n            onClick: function onClick() {\n              return console.log('delete', selectedData);\n            }\n          }]\n        });\n      }\n    }\n  }));\n}, {\n  __STORY__: __STORY__,\n  __ADDS_MAP__: __ADDS_MAP__,\n  __MAIN_FILE_LOCATION__: __MAIN_FILE_LOCATION__,\n  __MODULE_DEPENDENCIES__: __MODULE_DEPENDENCIES__,\n  __LOCAL_DEPENDENCIES__: __LOCAL_DEPENDENCIES__,\n  __SOURCE_PREFIX__: __SOURCE_PREFIX__,\n  __IDS_TO_FRAMEWORKS__: __IDS_TO_FRAMEWORKS__\n}), {\n  __STORY__: __STORY__,\n  __ADDS_MAP__: __ADDS_MAP__,\n  __MAIN_FILE_LOCATION__: __MAIN_FILE_LOCATION__,\n  __MODULE_DEPENDENCIES__: __MODULE_DEPENDENCIES__,\n  __LOCAL_DEPENDENCIES__: __LOCAL_DEPENDENCIES__,\n  __SOURCE_PREFIX__: __SOURCE_PREFIX__,\n  __IDS_TO_FRAMEWORKS__: __IDS_TO_FRAMEWORKS__\n}), {\n  __STORY__: __STORY__,\n  __ADDS_MAP__: __ADDS_MAP__,\n  __MAIN_FILE_LOCATION__: __MAIN_FILE_LOCATION__,\n  __MODULE_DEPENDENCIES__: __MODULE_DEPENDENCIES__,\n  __LOCAL_DEPENDENCIES__: __LOCAL_DEPENDENCIES__,\n  __SOURCE_PREFIX__: __SOURCE_PREFIX__,\n  __IDS_TO_FRAMEWORKS__: __IDS_TO_FRAMEWORKS__\n});\n;\n;\nexport var CircleMap = addSourceDecorator(addSourceDecorator(addSourceDecorator(function () {\n  var settingConfig = Object.assign({}, Settings); // set permission false, so that map mode will be hidden\n\n  settingConfig['Map Mode'].permission = false; // create legend on the basis of markers data\n\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Route Mode');\n  return React.createElement(ThemeWrapper, null, React.createElement(LeafletMap, {\n    id: 'leafletBaseMap',\n    classes: 'baseMap customBaseMap',\n    center: [20.5937, 78.9629],\n    zoom: 4,\n    zoomControl: true,\n    locationSearch: true,\n    googleApiKey: GOOGLE_API_KEY,\n    height: '300px',\n    width: '800px',\n    tiles: 'google_roadmap',\n    popupRef: infowindowStructure,\n    settingConfig: settingConfig,\n    onSettingChange: action('setting changed'),\n    circle: object('circle', circleSampleData),\n    onEdit: action('Value Edited with new Vertex'),\n    editPopUpComponent: function editPopUpComponent(_a) {\n      var map = _a.map;\n      return React.createElement(EditPopUp, {\n        onClick: function onClick() {\n          map.closePopup();\n        }\n      });\n    }\n  }));\n}, {\n  __STORY__: __STORY__,\n  __ADDS_MAP__: __ADDS_MAP__,\n  __MAIN_FILE_LOCATION__: __MAIN_FILE_LOCATION__,\n  __MODULE_DEPENDENCIES__: __MODULE_DEPENDENCIES__,\n  __LOCAL_DEPENDENCIES__: __LOCAL_DEPENDENCIES__,\n  __SOURCE_PREFIX__: __SOURCE_PREFIX__,\n  __IDS_TO_FRAMEWORKS__: __IDS_TO_FRAMEWORKS__\n}), {\n  __STORY__: __STORY__,\n  __ADDS_MAP__: __ADDS_MAP__,\n  __MAIN_FILE_LOCATION__: __MAIN_FILE_LOCATION__,\n  __MODULE_DEPENDENCIES__: __MODULE_DEPENDENCIES__,\n  __LOCAL_DEPENDENCIES__: __LOCAL_DEPENDENCIES__,\n  __SOURCE_PREFIX__: __SOURCE_PREFIX__,\n  __IDS_TO_FRAMEWORKS__: __IDS_TO_FRAMEWORKS__\n}), {\n  __STORY__: __STORY__,\n  __ADDS_MAP__: __ADDS_MAP__,\n  __MAIN_FILE_LOCATION__: __MAIN_FILE_LOCATION__,\n  __MODULE_DEPENDENCIES__: __MODULE_DEPENDENCIES__,\n  __LOCAL_DEPENDENCIES__: __LOCAL_DEPENDENCIES__,\n  __SOURCE_PREFIX__: __SOURCE_PREFIX__,\n  __IDS_TO_FRAMEWORKS__: __IDS_TO_FRAMEWORKS__\n});","map":{"version":3,"sources":["/Users/farhanansari/Code/ui-library/node_modules/react-docgen-typescript-loader/dist/index.js!/Users/farhanansari/Code/ui-library/node_modules/eslint-loader/dist/cjs.js??ref--6-0!/Users/farhanansari/Code/ui-library/node_modules/@storybook/source-loader/dist/server/index.js??ref--11!/Users/farhanansari/Code/ui-library/node_modules/@storybook/source-loader/dist/server/index.js!/Users/farhanansari/Code/ui-library/node_modules/@storybook/source-loader/dist/server/index.js!/Users/farhanansari/Code/ui-library/src/components/atoms/Map/Map.stories.tsx"],"names":[],"mappings":";;;;AACA;AACA;AACA;AACA,IAAI,gBAAgB,GAAG,OAAO,CAAC,kCAAD,CAAP,CAA4C,UAAnE,C,CACA;;;AACA,IAAI,kBAAkB,GAAG,OAAO,CAAC,kCAAD,CAAP,CAA4C,SAArE,C,CACA;;;AACA,IAAI,iBAAiB,GAAG,8DAAxB,C,CACA;;AACA,IAAI,SAAS,GAAG,izmIAAhB,C,CACA;;AACA,IAAI,YAAY,GAAG,EAAnB,C,CACA;;AACA,IAAI,sBAAsB,GAAG,kBAA7B,C,CACA;;AACA,IAAI,uBAAuB,GAAG,EAA9B,C,CACA;;AACA,IAAI,sBAAsB,GAAG,EAA7B,C,CACA;;AACA,IAAI,qBAAqB,GAAG,EAA5B;AAGA;AACA;AACA;;AACA,IAAI,gBAAgB,GAAG,OAAO,CAAC,kCAAD,CAAP,CAA4C,UAAnE,C,CACA;;;AACA,IAAI,kBAAkB,GAAG,OAAO,CAAC,kCAAD,CAAP,CAA4C,SAArE,C,CACA;;;AACA,IAAI,iBAAiB,GAAG,8DAAxB,C,CACA;;AACA,IAAI,SAAS,GAAG,8uzCAAhB,C,CACA;;AACA,IAAI,YAAY,GAAG,EAAnB,C,CACA;;AACA,IAAI,sBAAsB,GAAG,kBAA7B,C,CACA;;AACA,IAAI,uBAAuB,GAAG,EAA9B,C,CACA;;AACA,IAAI,sBAAsB,GAAG,EAA7B,C,CACA;;AACA,IAAI,qBAAqB,GAAG,EAA5B;AAGA;AACA;AACA;;AACA,IAAI,gBAAgB,GAAG,OAAO,CAAC,kCAAD,CAAP,CAA4C,UAAnE,C,CACA;;;AACA,IAAI,kBAAkB,GAAG,OAAO,CAAC,kCAAD,CAAP,CAA4C,SAArE,C,CACA;;;AACA,IAAI,iBAAiB,GAAG,8DAAxB,C,CACA;;AACA,IAAI,SAAS,GAAG,y9ZAAhB,C,CACA;;AACA,IAAI,YAAY,GAAG,EAAnB,C,CACA;;AACA,IAAI,sBAAsB,GAAG,kBAA7B,C,CACA;;AACA,IAAI,uBAAuB,GAAG,EAA9B,C,CACA;;AACA,IAAI,sBAAsB,GAAG,EAA7B,C,CACA;;AACA,IAAI,qBAAqB,GAAG,EAA5B;AAEA,SAAS,MAAT,QAAuB,0BAAvB;AACA,SACE,OAAO,IAAP,QADF,EAEE,MAFF,EAGE,MAHF,EAIE,IAJF,EAKE,SALF,QAMO,wBANP;AAOA,OAAO,KAAP,MAAkB,OAAlB;AACA,OAAO,UAAP,MAAuB,GAAvB;AACA,SAAS,IAAT,QAAqB,IAArB;AACA,OAAO,YAAP,MAAyB,4CAAzB;AACA,OAAO,QAAP,MAAqB,6BAArB;AACA,SAAS,UAAT,QAA2B,qCAA3B;AAGA,SACE,cADF,EAEE,iBAFF,QAGO,yCAHP;AAIA,OAAO,gBAAP,MAA6B,yCAA7B;AACA,OAAO,mBAAP,MAAgC,6CAAhC;AACA,OAAO,WAAP,MAAwB,mCAAxB;AACA,OAAO,cAAP,MAA2B,gCAA3B;AACA,OAAO,sBAAP,MAAmC,qCAAnC;AACA,OAAO,kBAAP,MAA+B,8CAA/B;AACA,OAAO,cAAP,MAA2B,2CAA3B;AACA,SAAS,yBAAT,QAA0C,iBAA1C;AACA,OAAO,SAAP,MAAsB,0BAAtB;AAGA,eAAe;AAAC,EAAA,UAAU;AAAG,mBAAc;AAAC,gBAAS,izmIAAV;AAA4zmI,sBAAe;AAA30mI;AAAjB,iDAA82mI;AAAC,cAAS,8uzCAAV;AAAyvzC,oBAAe;AAAxwzC,GAA92mI,+CAAwo6K;AAAC,cAAS,y9ZAAV;AAAo+Z,oBAAe;AAAn/Z,GAAxo6K,eAAX;AACb,EAAA,KAAK,EAAK,IAAI,GAAA,MADD;AAEb,EAAA,UAAU,EAAE,CAAC,SAAD,CAFC;AAGb,EAAA,SAAS,EAAE;AAHE,CAAf,C,CAMA;;AACA,IAAM,WAAW,GAAG;AAClB,sBAAoB,KADF;AAElB,sBAAoB,kBAFF;AAGlB,kBAAgB,gBAHE;AAIlB,oBAAkB,gBAJA;AAKlB,mBAAiB;AALC,CAApB;AAQA,IAAM,YAAY,GAAG;AACnB,EAAA,KAAK,EAAE,OADY;AAEnB,EAAA,IAAI,EAAE;AAFa,CAArB;AAKA,OAAO,IAAM,OAAO,GAAG,kBAAkB,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,YAAA;AAC9E,MAAM,aAAa,GAAG,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB,QAAlB,CAAtB,CAD8E,CAE9E;;AACA,EAAA,aAAa,CAAC,UAAD,CAAb,CAA0B,UAA1B,GAAuC,KAAvC;AAEA,SACE,KAAA,CAAA,aAAA,CAAC,YAAD,EAAa,IAAb,EACE,KAAA,CAAA,aAAA,CAAC,UAAD,EAAW;AACT,IAAA,EAAE,EAAC,gBADM;AAET,IAAA,OAAO,EAAC,uBAFC;AAGT,IAAA,MAAM,EAAE,CAAC,IAAD,EAAO,IAAP,CAHC;AAIT,IAAA,YAAY,EAAE,CAAC,CAAC,QAAD,EAAW,CAAC,SAAZ,CAAD,CAJL;AAKT;AACA,IAAA,WAAW,EAAE,QAAO,CAAC,eAAD,EAAkB,IAAlB,CANX;AAOT,IAAA,cAAc,EAAE,QAAO,CAAC,qBAAD,EAAwB,IAAxB,CAPd;AAQT,IAAA,YAAY,EAAE,cARL;AAST,IAAA,cAAc,EAAE,iBATP;AAUT,IAAA,MAAM,EAAE,IAAI,CAAC,QAAD,EAAW,OAAX,CAVH;AAWT,IAAA,KAAK,EAAE,IAAI,CAAC,OAAD,EAAU,OAAV,CAXF;AAYT,IAAA,KAAK,EACH,MAAM,CAAC,iBAAD,EAAoB,WAApB,EAAiC,gBAAjC,CAbC;AAeT,IAAA,KAAK,EAAE,MAAM,CAAC,OAAD,EAAU,YAAV,EAAwB,OAAxB,CAfJ;AAgBT,IAAA,GAAG,EAAE,QAAO,CAAC,oBAAD,EAAuB,KAAvB,CAhBH;AAiBT,IAAA,aAAa,EAAE,aAjBN;AAkBT,IAAA,QAAQ,EAAE,mBAlBD;AAmBT,IAAA,eAAe,EAAE,MAAM,CAAC,iBAAD,CAnBd;AAoBT,IAAA,YAAY,EAAE,QAAO,CAAC,cAAD,EAAiB,IAAjB,CApBZ;AAqBT,IAAA,QAAQ,EAAE;AArBD,GAAX,CADF,CADF;AA4BD,CAjC8E,EAiC5E;AAAC,EAAA,SAAS,EAAA,SAAV;AAAY,EAAA,YAAY,EAAA,YAAxB;AAAyB,EAAA,sBAAsB,EAAA,sBAA/C;AAAgD,EAAA,uBAAuB,EAAA,uBAAvE;AAAwE,EAAA,sBAAsB,EAAA,sBAA9F;AAA+F,EAAA,iBAAiB,EAAA,iBAAhH;AAAiH,EAAA,qBAAqB,EAAA;AAAtI,CAjC4E,CAAnB,EAiCiF;AAAC,EAAA,SAAS,EAAA,SAAV;AAAY,EAAA,YAAY,EAAA,YAAxB;AAAyB,EAAA,sBAAsB,EAAA,sBAA/C;AAAgD,EAAA,uBAAuB,EAAA,uBAAvE;AAAwE,EAAA,sBAAsB,EAAA,sBAA9F;AAA+F,EAAA,iBAAiB,EAAA,iBAAhH;AAAiH,EAAA,qBAAqB,EAAA;AAAtI,CAjCjF,CAAnB,EAiC8O;AAAC,EAAA,SAAS,EAAA,SAAV;AAAY,EAAA,YAAY,EAAA,YAAxB;AAAyB,EAAA,sBAAsB,EAAA,sBAA/C;AAAgD,EAAA,uBAAuB,EAAA,uBAAvE;AAAwE,EAAA,sBAAsB,EAAA,sBAA9F;AAA+F,EAAA,iBAAiB,EAAA,iBAAhH;AAAiH,EAAA,qBAAqB,EAAA;AAAtI,CAjC9O,CAAlC;AAiCyZ;AAAC;AAEja,OAAO,IAAM,SAAS,GAAG,kBAAkB,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,YAAA;AAChF,MAAM,aAAa,GAAG,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB,QAAlB,CAAtB,CADgF,CAGhF;;AACA,EAAA,aAAa,CAAC,UAAD,CAAb,CAA0B,MAA1B,CAAiC,OAAjC,CAAyC,UAAC,MAAD,EAAgB;AACvD,IAAA,MAAM,CAAC,UAAP,GAAoB,MAAM,CAAC,IAAP,KAAgB,SAApC;AACA,IAAA,MAAM,CAAC,QAAP,GAAkB,MAAM,CAAC,IAAP,KAAgB,SAAlC;AACD,GAHD;AAIA,EAAA,aAAa,CAAC,UAAD,CAAb,CAA0B,UAA1B,GAAuC,IAAvC,CARgF,CAUhF;;AACA,EAAA,yBAAyB,CAAC,aAAD,EAAgB,cAAhB,EAAgC,SAAhC,CAAzB;AAEA,SACE,KAAA,CAAA,aAAA,CAAC,YAAD,EAAa,IAAb,EACE,KAAA,CAAA,aAAA,CAAC,UAAD,EAAW;AACT,IAAA,EAAE,EAAC,gBADM;AAET,IAAA,OAAO,EAAC,uBAFC;AAGT,IAAA,MAAM,EAAE,CAAC,QAAD,EAAW,CAAC,SAAZ,CAHC;AAIT,IAAA,YAAY,EAAE,CAAC,CAAC,QAAD,EAAW,CAAC,SAAZ,CAAD,CAJL;AAKT;AACA,IAAA,WAAW,EAAA,IANF;AAOT,IAAA,cAAc,EAAA,IAPL;AAQT,IAAA,YAAY,EAAE,cARL;AAST,IAAA,MAAM,EAAC,OATE;AAUT,IAAA,KAAK,EAAC,OAVG;AAWT,IAAA,KAAK,EAAC,gBAXG;AAYT,IAAA,OAAO,EAAE,MAAM,CAAC,sBAAD,EAAyB,cAAzB,CAZN;AAaT,IAAA,aAAa,EAAE,IAAI,CAAC,yBAAD,EAA4B,EAA5B,CAbV;AAcT,IAAA,QAAQ,EAAE,WAdD;AAeT,IAAA,QAAQ,EAAE,mBAfD;AAgBT,IAAA,aAAa,EAAE,aAhBN;AAiBT,IAAA,eAAe,EAAE,MAAM,CAAC,iBAAD,CAjBd;AAkBT,IAAA,gBAAgB,EAAE,0BAAC,QAAD,EAAS;AAAK,aAAA,MAAM,CAAC,oBAAD,CAAN,CAAA,QAAA,CAAA;AAAsC;AAlB7D,GAAX,CADF,CADF;AAwBD,CArCgF,EAqC9E;AAAC,EAAA,SAAS,EAAA,SAAV;AAAY,EAAA,YAAY,EAAA,YAAxB;AAAyB,EAAA,sBAAsB,EAAA,sBAA/C;AAAgD,EAAA,uBAAuB,EAAA,uBAAvE;AAAwE,EAAA,sBAAsB,EAAA,sBAA9F;AAA+F,EAAA,iBAAiB,EAAA,iBAAhH;AAAiH,EAAA,qBAAqB,EAAA;AAAtI,CArC8E,CAAnB,EAqC+E;AAAC,EAAA,SAAS,EAAA,SAAV;AAAY,EAAA,YAAY,EAAA,YAAxB;AAAyB,EAAA,sBAAsB,EAAA,sBAA/C;AAAgD,EAAA,uBAAuB,EAAA,uBAAvE;AAAwE,EAAA,sBAAsB,EAAA,sBAA9F;AAA+F,EAAA,iBAAiB,EAAA,iBAAhH;AAAiH,EAAA,qBAAqB,EAAA;AAAtI,CArC/E,CAAnB,EAqC4O;AAAC,EAAA,SAAS,EAAA,SAAV;AAAY,EAAA,YAAY,EAAA,YAAxB;AAAyB,EAAA,sBAAsB,EAAA,sBAA/C;AAAgD,EAAA,uBAAuB,EAAA,uBAAvE;AAAwE,EAAA,sBAAsB,EAAA,sBAA9F;AAA+F,EAAA,iBAAiB,EAAA,iBAAhH;AAAiH,EAAA,qBAAqB,EAAA;AAAtI,CArC5O,CAApC;AAqCyZ;AAAC;AAEja,OAAO,IAAM,gBAAgB,GAAG,kBAAkB,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,YAAA;AACvF,MAAM,aAAa,GAAG,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB,QAAlB,CAAtB,CADuF,CAEvF;;AACA,EAAA,aAAa,CAAC,UAAD,CAAb,CAA0B,MAA1B,CAAiC,OAAjC,CAAyC,UAAC,MAAD,EAAgB;AACvD,IAAA,MAAM,CAAC,UAAP,GAAoB,IAApB,CADuD,CAC9B;;AACzB,IAAA,MAAM,CAAC,QAAP,GAAkB,MAAM,CAAC,IAAP,KAAgB,SAAlC,CAFuD,CAEX;AAC7C,GAHD;AAIA,EAAA,aAAa,CAAC,UAAD,CAAb,CAA0B,UAA1B,GAAuC,IAAvC,CAPuF,CAQvF;;AACA,EAAA,yBAAyB,CAAC,aAAD,EAAgB,cAAhB,EAAgC,SAAhC,CAAzB;AAEA,SACE,KAAA,CAAA,aAAA,CAAC,YAAD,EAAa,IAAb,EACE,KAAA,CAAA,aAAA,CAAC,UAAD,EAAW;AACT,IAAA,EAAE,EAAC,gBADM;AAET,IAAA,OAAO,EAAC,uBAFC;AAGT,IAAA,MAAM,EAAE,CAAC,IAAD,EAAO,IAAP,CAHC;AAIT;AACA,IAAA,WAAW,EAAA,IALF;AAMT,IAAA,cAAc,EAAA,IANL;AAOT,IAAA,YAAY,EAAE,cAPL;AAQT,IAAA,MAAM,EAAC,OARE;AAST,IAAA,KAAK,EAAC,OATG;AAUT,IAAA,KAAK,EAAC,gBAVG;AAWT,IAAA,OAAO,EAAE,MAAM,CAAC,uBAAD,EAA0B;AACvC,MAAA,UAAU,EAAE,KAD2B;AAEvC,MAAA,IAAI,EAAE,cAAc,CAAC,WAAf,CAA2B,MAA3B,CAAkC,OAAlC,CAA0C;AAFT,KAA1B,CAXN;AAeT,IAAA,aAAa,EAAE,aAfN;AAgBT,IAAA,OAAO,EAAE,MAAM,CAAC,sBAAD,EAAyB,cAAzB,CAhBN;AAiBT,IAAA,QAAQ,EAAE,WAjBD;AAkBT,IAAA,QAAQ,EAAE,mBAlBD;AAmBT,IAAA,eAAe,EAAE,MAAM,CAAC,iBAAD;AAnBd,GAAX,CADF,CADF;AAyBD,CApCuF,EAoCrF;AAAC,EAAA,SAAS,EAAA,SAAV;AAAY,EAAA,YAAY,EAAA,YAAxB;AAAyB,EAAA,sBAAsB,EAAA,sBAA/C;AAAgD,EAAA,uBAAuB,EAAA,uBAAvE;AAAwE,EAAA,sBAAsB,EAAA,sBAA9F;AAA+F,EAAA,iBAAiB,EAAA,iBAAhH;AAAiH,EAAA,qBAAqB,EAAA;AAAtI,CApCqF,CAAnB,EAoCwE;AAAC,EAAA,SAAS,EAAA,SAAV;AAAY,EAAA,YAAY,EAAA,YAAxB;AAAyB,EAAA,sBAAsB,EAAA,sBAA/C;AAAgD,EAAA,uBAAuB,EAAA,uBAAvE;AAAwE,EAAA,sBAAsB,EAAA,sBAA9F;AAA+F,EAAA,iBAAiB,EAAA,iBAAhH;AAAiH,EAAA,qBAAqB,EAAA;AAAtI,CApCxE,CAAnB,EAoCqO;AAAC,EAAA,SAAS,EAAA,SAAV;AAAY,EAAA,YAAY,EAAA,YAAxB;AAAyB,EAAA,sBAAsB,EAAA,sBAA/C;AAAgD,EAAA,uBAAuB,EAAA,uBAAvE;AAAwE,EAAA,sBAAsB,EAAA,sBAA9F;AAA+F,EAAA,iBAAiB,EAAA,iBAAhH;AAAiH,EAAA,qBAAqB,EAAA;AAAtI,CApCrO,CAA3C;AAoCyZ;AAAC;AAEja,OAAO,IAAM,OAAO,GAAG,kBAAkB,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,YAAA;AAC9E,MAAM,aAAa,GAAG,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB,QAAlB,CAAtB,CAD8E,CAE9E;;AACA,EAAA,aAAa,CAAC,UAAD,CAAb,CAA0B,MAA1B,CAAiC,OAAjC,CAAyC,UAAC,MAAD,EAAgB;AACvD,IAAA,MAAM,CAAC,UAAP,GAAoB,MAAM,CAAC,IAAP,KAAgB,SAApC;AACA,IAAA,MAAM,CAAC,QAAP,GAAkB,MAAM,CAAC,IAAP,KAAgB,SAAlC;AACD,GAHD;AAIA,EAAA,aAAa,CAAC,UAAD,CAAb,CAA0B,UAA1B,GAAuC,IAAvC;AAEA,SACE,KAAA,CAAA,aAAA,CAAC,YAAD,EAAa,IAAb,EACE,KAAA,CAAA,aAAA,CAAC,UAAD,EAAW;AACT,IAAA,EAAE,EAAC,gBADM;AAET,IAAA,OAAO,EAAC,uBAFC;AAGT,IAAA,MAAM,EAAE,CAAC,IAAD,EAAO,IAAP,CAHC;AAIT;AACA,IAAA,WAAW,EAAA,IALF;AAMT,IAAA,cAAc,EAAA,IANL;AAOT,IAAA,YAAY,EAAE,cAPL;AAQT,IAAA,MAAM,EAAC,OARE;AAST,IAAA,KAAK,EAAC,OATG;AAUT,IAAA,KAAK,EAAC,gBAVG;AAWT,IAAA,OAAO,EAAE,MAAM,CAAC,uBAAD,EAA0B;AACvC,MAAA,UAAU,EAAE,IAD2B;AAEvC,MAAA,IAAI,EAAE,cAAc,CAAC,WAAf,CAA2B,MAA3B,CAAkC,OAAlC,CAA0C;AAFT,KAA1B,CAXN;AAeT,IAAA,aAAa,EAAE,aAfN;AAgBT,IAAA,eAAe,EAAE,MAAM,CAAC,iBAAD;AAhBd,GAAX,CADF,CADF;AAsBD,CA/B8E,EA+B5E;AAAC,EAAA,SAAS,EAAA,SAAV;AAAY,EAAA,YAAY,EAAA,YAAxB;AAAyB,EAAA,sBAAsB,EAAA,sBAA/C;AAAgD,EAAA,uBAAuB,EAAA,uBAAvE;AAAwE,EAAA,sBAAsB,EAAA,sBAA9F;AAA+F,EAAA,iBAAiB,EAAA,iBAAhH;AAAiH,EAAA,qBAAqB,EAAA;AAAtI,CA/B4E,CAAnB,EA+BiF;AAAC,EAAA,SAAS,EAAA,SAAV;AAAY,EAAA,YAAY,EAAA,YAAxB;AAAyB,EAAA,sBAAsB,EAAA,sBAA/C;AAAgD,EAAA,uBAAuB,EAAA,uBAAvE;AAAwE,EAAA,sBAAsB,EAAA,sBAA9F;AAA+F,EAAA,iBAAiB,EAAA,iBAAhH;AAAiH,EAAA,qBAAqB,EAAA;AAAtI,CA/BjF,CAAnB,EA+B8O;AAAC,EAAA,SAAS,EAAA,SAAV;AAAY,EAAA,YAAY,EAAA,YAAxB;AAAyB,EAAA,sBAAsB,EAAA,sBAA/C;AAAgD,EAAA,uBAAuB,EAAA,uBAAvE;AAAwE,EAAA,sBAAsB,EAAA,sBAA9F;AAA+F,EAAA,iBAAiB,EAAA,iBAAhH;AAAiH,EAAA,qBAAqB,EAAA;AAAtI,CA/B9O,CAAlC;AA+ByZ;AAAC;AAEja,OAAO,IAAM,QAAQ,GAAG,kBAAkB,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,YAAA;AAC/E,MAAM,aAAa,GAAG,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB,QAAlB,CAAtB,CAD+E,CAE/E;AAEA;;AACA,EAAA,aAAa,CAAC,UAAD,CAAb,CAA0B,UAA1B,GAAuC,KAAvC;AACA,SACE,KAAA,CAAA,aAAA,CAAC,YAAD,EAAa,IAAb,EACE,KAAA,CAAA,aAAA,CAAC,UAAD,EAAW;AACT,IAAA,EAAE,EAAC,gBADM;AAET,IAAA,OAAO,EAAC,uBAFC;AAGT,IAAA,MAAM,EAAE,CAAC,IAAD,EAAO,IAAP,CAHC;AAIT,IAAA,IAAI,EAAE,CAJG;AAKT,IAAA,WAAW,EAAA,IALF;AAMT,IAAA,cAAc,EAAA,IANL;AAOT,IAAA,YAAY,EAAE,cAPL;AAQT,IAAA,MAAM,EAAC,OARE;AAST,IAAA,KAAK,EAAC,OATG;AAUT,IAAA,KAAK,EAAC,gBAVG;AAWT,IAAA,KAAK,EAAE,MAAM,CAAC,oBAAD,EAAuB,cAAvB,CAXJ;AAYT,IAAA,QAAQ,EAAE,WAZD;AAaT,IAAA,QAAQ,EAAE,mBAbD;AAcT,IAAA,eAAe,EAAE,MAAM,CAAC,iBAAD;AAdd,GAAX,CADF,CADF;AAoBD,CA1B+E,EA0B7E;AAAC,EAAA,SAAS,EAAA,SAAV;AAAY,EAAA,YAAY,EAAA,YAAxB;AAAyB,EAAA,sBAAsB,EAAA,sBAA/C;AAAgD,EAAA,uBAAuB,EAAA,uBAAvE;AAAwE,EAAA,sBAAsB,EAAA,sBAA9F;AAA+F,EAAA,iBAAiB,EAAA,iBAAhH;AAAiH,EAAA,qBAAqB,EAAA;AAAtI,CA1B6E,CAAnB,EA0BgF;AAAC,EAAA,SAAS,EAAA,SAAV;AAAY,EAAA,YAAY,EAAA,YAAxB;AAAyB,EAAA,sBAAsB,EAAA,sBAA/C;AAAgD,EAAA,uBAAuB,EAAA,uBAAvE;AAAwE,EAAA,sBAAsB,EAAA,sBAA9F;AAA+F,EAAA,iBAAiB,EAAA,iBAAhH;AAAiH,EAAA,qBAAqB,EAAA;AAAtI,CA1BhF,CAAnB,EA0B6O;AAAC,EAAA,SAAS,EAAA,SAAV;AAAY,EAAA,YAAY,EAAA,YAAxB;AAAyB,EAAA,sBAAsB,EAAA,sBAA/C;AAAgD,EAAA,uBAAuB,EAAA,uBAAvE;AAAwE,EAAA,sBAAsB,EAAA,sBAA9F;AAA+F,EAAA,iBAAiB,EAAA,iBAAhH;AAAiH,EAAA,qBAAqB,EAAA;AAAtI,CA1B7O,CAAnC;AA0ByZ;AAAC;AAEja,OAAO,IAAM,WAAW,GAAG,kBAAkB,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,YAAA;AAClF,MAAM,aAAa,GAAG,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB,QAAlB,CAAtB,CADkF,CAGlF;;AACA,EAAA,aAAa,CAAC,UAAD,CAAb,CAA0B,UAA1B,GAAuC,KAAvC;AACA,SACE,KAAA,CAAA,aAAA,CAAC,YAAD,EAAa,IAAb,EACE,KAAA,CAAA,aAAA,CAAC,UAAD,EAAW;AACT,IAAA,EAAE,EAAC,gBADM;AAET,IAAA,OAAO,EAAC,uBAFC;AAGT,IAAA,MAAM,EAAE,CAAC,SAAD,EAAY,CAAC,QAAb,CAHC;AAIT,IAAA,IAAI,EAAE,EAJG;AAKT,IAAA,WAAW,EAAA,IALF;AAMT,IAAA,cAAc,EAAA,IANL;AAOT,IAAA,YAAY,EAAE,cAPL;AAQT,IAAA,MAAM,EAAC,OARE;AAST,IAAA,KAAK,EAAC,OATG;AAUT,IAAA,KAAK,EAAC,gBAVG;AAWT,IAAA,QAAQ,EAAE,MAAM,CAAC,wBAAD,EAA2B,kBAA3B,CAXP;AAYT,IAAA,eAAe,EAAE,MAAM,CAAC,iBAAD;AAZd,GAAX,CADF,CADF;AAkBD,CAvBkF,EAuBhF;AAAC,EAAA,SAAS,EAAA,SAAV;AAAY,EAAA,YAAY,EAAA,YAAxB;AAAyB,EAAA,sBAAsB,EAAA,sBAA/C;AAAgD,EAAA,uBAAuB,EAAA,uBAAvE;AAAwE,EAAA,sBAAsB,EAAA,sBAA9F;AAA+F,EAAA,iBAAiB,EAAA,iBAAhH;AAAiH,EAAA,qBAAqB,EAAA;AAAtI,CAvBgF,CAAnB,EAuB6E;AAAC,EAAA,SAAS,EAAA,SAAV;AAAY,EAAA,YAAY,EAAA,YAAxB;AAAyB,EAAA,sBAAsB,EAAA,sBAA/C;AAAgD,EAAA,uBAAuB,EAAA,uBAAvE;AAAwE,EAAA,sBAAsB,EAAA,sBAA9F;AAA+F,EAAA,iBAAiB,EAAA,iBAAhH;AAAiH,EAAA,qBAAqB,EAAA;AAAtI,CAvB7E,CAAnB,EAuB0O;AAAC,EAAA,SAAS,EAAA,SAAV;AAAY,EAAA,YAAY,EAAA,YAAxB;AAAyB,EAAA,sBAAsB,EAAA,sBAA/C;AAAgD,EAAA,uBAAuB,EAAA,uBAAvE;AAAwE,EAAA,sBAAsB,EAAA,sBAA9F;AAA+F,EAAA,iBAAiB,EAAA,iBAAhH;AAAiH,EAAA,qBAAqB,EAAA;AAAtI,CAvB1O,CAAtC;AAuByZ;AAAC;;AAEja,IAAM,qBAAqB,GAAG,SAAxB,qBAAwB,GAAA;AAC5B,MAAM,aAAa,GAAG,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB,QAAlB,CAAtB,CAD4B,CAE5B;;AACA,EAAA,aAAa,CAAC,UAAD,CAAb,CAA0B,UAA1B,GAAuC,KAAvC,CAH4B,CAI5B;AACA;AACA;AACA;;AAEA,SACE,KAAA,CAAA,aAAA,CAAC,UAAD,EAAW;AACT,IAAA,EAAE,EAAC,gBADM;AAET,IAAA,OAAO,EAAC,uBAFC;AAGT,IAAA,YAAY,EAAE,cAHL;AAIT,IAAA,aAAa,EAAE,aAJN;AAKT,IAAA,MAAM,EAAE,CAAC,IAAD,EAAO,IAAP,CALC;AAMT;AACA,IAAA,QAAQ,EAAE,WAPD;AAQT,IAAA,WAAW,EAAA,IARF;AAST,IAAA,cAAc,EAAA,IATL;AAUT,IAAA,mBAAmB,EAAE,MAAM,CAAC,sBAAD,CAVlB;AAWT,IAAA,kBAAkB,EAAE,QAAO,CAAC,oBAAD,EAAuB,KAAvB,CAXlB;AAYT,IAAA,SAAS,EAAE;AACT,MAAA,UAAU,EAAE,IADH;;AAGT;AACA,MAAA,UAAU,EAAE,IAAI,CAAC,YAAD,EAAe,QAAf,CAJP;AAKT;AACA,MAAA,QAAQ,EAAE,CAAC,UAAD,EAAa,UAAb,CAND;AAOT,MAAA,MAAM,EAAE,QAAO,CAAC,QAAD,EAAW,IAAX,CAPN;AAQT,MAAA,eAAe,EAAE,yBAAC,CAAD,EAAO;;;AACtB,QAAA,MAAM,CAAC,KAAP,CACE,qBAAiB,CAAA,EAAA,GAAG,CAAC,CAAC,QAAL,MAAa,IAAb,IAAa,EAAA,KAAA,KAAA,CAAb,GAAa,KAAA,CAAb,GAAa,EAAA,CAAG,CAAH,CAA9B,IAAsC,IAAtC,IAA0C,CAAA,EAAA,GAAG,CAAC,CAAC,QAAL,MAAa,IAAb,IAAa,EAAA,KAAA,KAAA,CAAb,GAAa,KAAA,CAAb,GAAa,EAAA,CAAG,CAAH,CAAvD,CADF;AAGD,OAZQ;AAaT,MAAA,kBAAkB,EAAE,4BAAC,GAAD,EAAsB;AACxC,QAAA,MAAM,CAAC,uBAAD,CAAN,CAAgC,GAAhC,EADwC,CAExC;AACA;AACD;AAjBQ,KAZF;AA+BT,IAAA,iBAAiB,EAAE,QAAO,CAAC,mBAAD,EAAsB,KAAtB;AA/BjB,GAAX,CADF;AAmCD,CA5CD;;AA6CA,OAAO,IAAM,YAAY,GAAG,kBAAkB,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,YAAA;AACnF,SACE,KAAA,CAAA,aAAA,CAAC,YAAD,EAAa,IAAb,EACE,KAAA,CAAA,aAAA,CAAC,qBAAD,EAAsB,IAAtB,CADF,CADF;AAKD,CANmF,EAMjF;AAAC,EAAA,SAAS,EAAA,SAAV;AAAY,EAAA,YAAY,EAAA,YAAxB;AAAyB,EAAA,sBAAsB,EAAA,sBAA/C;AAAgD,EAAA,uBAAuB,EAAA,uBAAvE;AAAwE,EAAA,sBAAsB,EAAA,sBAA9F;AAA+F,EAAA,iBAAiB,EAAA,iBAAhH;AAAiH,EAAA,qBAAqB,EAAA;AAAtI,CANiF,CAAnB,EAM4E;AAAC,EAAA,SAAS,EAAA,SAAV;AAAY,EAAA,YAAY,EAAA,YAAxB;AAAyB,EAAA,sBAAsB,EAAA,sBAA/C;AAAgD,EAAA,uBAAuB,EAAA,uBAAvE;AAAwE,EAAA,sBAAsB,EAAA,sBAA9F;AAA+F,EAAA,iBAAiB,EAAA,iBAAhH;AAAiH,EAAA,qBAAqB,EAAA;AAAtI,CAN5E,CAAnB,EAMyO;AAAC,EAAA,SAAS,EAAA,SAAV;AAAY,EAAA,YAAY,EAAA,YAAxB;AAAyB,EAAA,sBAAsB,EAAA,sBAA/C;AAAgD,EAAA,uBAAuB,EAAA,uBAAvE;AAAwE,EAAA,sBAAsB,EAAA,sBAA9F;AAA+F,EAAA,iBAAiB,EAAA,iBAAhH;AAAiH,EAAA,qBAAqB,EAAA;AAAtI,CANzO,CAAvC;AAMyZ;AAAC;AAEja,OAAO,IAAM,UAAU,GAAG,kBAAkB,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,YAAA;AACjF,MAAM,aAAa,GAAG,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB,QAAlB,CAAtB,CADiF,CAEjF;;AACA,EAAA,aAAa,CAAC,UAAD,CAAb,CAA0B,UAA1B,GAAuC,KAAvC,CAHiF,CAIjF;AACA;;AAEA,SACE,KAAA,CAAA,aAAA,CAAC,YAAD,EAAa,IAAb,EACE,KAAA,CAAA,aAAA,CAAC,UAAD,EAAW;AACT,IAAA,EAAE,EAAC,gBADM;AAET,IAAA,OAAO,EAAC,uBAFC;AAGT,IAAA,MAAM,EAAE,CAAC,OAAD,EAAU,OAAV,CAHC;AAIT,IAAA,IAAI,EAAE,CAJG;AAKT,IAAA,WAAW,EAAE,QAAO,CAAC,eAAD,EAAkB,IAAlB,CALX;AAMT,IAAA,cAAc,EAAE,QAAO,CAAC,qBAAD,EAAwB,IAAxB,CANd;AAOT,IAAA,YAAY,EAAE,cAPL;AAQT,IAAA,MAAM,EAAE,IAAI,CAAC,QAAD,EAAW,OAAX,CARH;AAST,IAAA,KAAK,EAAE,IAAI,CAAC,OAAD,EAAU,OAAV,CATF;AAUT,IAAA,KAAK,EACH,MAAM,CAAC,iBAAD,EAAoB,WAApB,EAAiC,gBAAjC,CAXC;AAaT,IAAA,KAAK,EAAE,MAAM,CAAC,OAAD,EAAU,YAAV,EAAwB,OAAxB,CAbJ;AAcT,IAAA,GAAG,EAAE,QAAO,CAAC,oBAAD,EAAuB,KAAvB,CAdH;AAeT,IAAA,aAAa,EAAE,aAfN;AAgBT,IAAA,OAAO,EAAE,MAAM,CAAC,SAAD,EAAY,sBAAZ,CAhBN;AAiBT,IAAA,QAAQ,EAAE,mBAjBD;AAkBT,IAAA,eAAe,EAAE,MAAM,CAAC,iBAAD,CAlBd;AAmBT,IAAA,gBAAgB,EAAE,0BAAC,QAAD,EAAS;AAAK,aAAA,MAAM,CAAC,oBAAD,CAAN,CAAA,QAAA,CAAA;AAAsC,KAnB7D;AAoBT,IAAA,kBAAkB,EAAE,4BAAC,EAAD,EAAa;UAAV,GAAG,GAAA,EAAA,CAAA,G;AAAY,aACpC,KAAA,CAAA,aAAA,CAAC,SAAD,EAAU;AACR,QAAA,OAAO,EAAE,mBAAA;AACP,UAAA,GAAG,CAAC,UAAJ;AACD;AAHO,OAAV,CADoC;AAMrC,KA1BQ;AA2BT,IAAA,MAAM,EAAE,MAAM,CAAC,8BAAD,CA3BL;AA4BT,IAAA,oBAAoB,EAAE;AACpB,MAAA,aAAa,EAAE,uBAAC,EAAD,EAAsB;YAAnB,YAAY,GAAA,EAAA,CAAA,Y;AAAY,eACxC,KAAA,CAAA,aAAA,CAAC,UAAD,EAAW;AACT,UAAA,aAAa,EAAE,CACb;AACE,YAAA,OAAO,EAAE,QADX;AAEE,YAAA,QAAQ,EAAE,MAFZ;AAGE;AACA,YAAA,WAAW,EAAE,MAJf;AAKE,YAAA,OAAO,EAAE,IALX;AAME,YAAA,OAAO,EAAE,mBAAA;AAAM,qBAAA,OAAO,CAAC,GAAR,CAAY,MAAZ,EAAA,YAAA,CAAA;AAAiC;AANlD,WADa,EASb;AACE,YAAA,OAAO,EAAE,QADX;AAEE,YAAA,QAAQ,EAAE,QAFZ;AAGE,YAAA,WAAW,EAAE,eAHf;AAIE;AACA,YAAA,OAAO,EAAE,mBAAA;AAAM,qBAAA,OAAO,CAAC,GAAR,CAAY,QAAZ,EAAA,YAAA,CAAA;AAAmC;AALpD,WATa;AADN,SAAX,CADwC;AAoBzC;AArBmB;AA5Bb,GAAX,CADF,CADF;AAwDD,CA/DiF,EA+D/E;AAAC,EAAA,SAAS,EAAA,SAAV;AAAY,EAAA,YAAY,EAAA,YAAxB;AAAyB,EAAA,sBAAsB,EAAA,sBAA/C;AAAgD,EAAA,uBAAuB,EAAA,uBAAvE;AAAwE,EAAA,sBAAsB,EAAA,sBAA9F;AAA+F,EAAA,iBAAiB,EAAA,iBAAhH;AAAiH,EAAA,qBAAqB,EAAA;AAAtI,CA/D+E,CAAnB,EA+D8E;AAAC,EAAA,SAAS,EAAA,SAAV;AAAY,EAAA,YAAY,EAAA,YAAxB;AAAyB,EAAA,sBAAsB,EAAA,sBAA/C;AAAgD,EAAA,uBAAuB,EAAA,uBAAvE;AAAwE,EAAA,sBAAsB,EAAA,sBAA9F;AAA+F,EAAA,iBAAiB,EAAA,iBAAhH;AAAiH,EAAA,qBAAqB,EAAA;AAAtI,CA/D9E,CAAnB,EA+D2O;AAAC,EAAA,SAAS,EAAA,SAAV;AAAY,EAAA,YAAY,EAAA,YAAxB;AAAyB,EAAA,sBAAsB,EAAA,sBAA/C;AAAgD,EAAA,uBAAuB,EAAA,uBAAvE;AAAwE,EAAA,sBAAsB,EAAA,sBAA9F;AAA+F,EAAA,iBAAiB,EAAA,iBAAhH;AAAiH,EAAA,qBAAqB,EAAA;AAAtI,CA/D3O,CAArC;AA+DyZ;AAAC;AAEja,OAAO,IAAM,SAAS,GAAG,kBAAkB,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,YAAA;AAChF,MAAM,aAAa,GAAG,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB,QAAlB,CAAtB,CADgF,CAGhF;;AACA,EAAA,aAAa,CAAC,UAAD,CAAb,CAA0B,UAA1B,GAAuC,KAAvC,CAJgF,CAMhF;;AACA,EAAA,yBAAyB,CAAC,aAAD,EAAgB,cAAhB,EAAgC,YAAhC,CAAzB;AAEA,SACE,KAAA,CAAA,aAAA,CAAC,YAAD,EAAa,IAAb,EACE,KAAA,CAAA,aAAA,CAAC,UAAD,EAAW;AACT,IAAA,EAAE,EAAC,gBADM;AAET,IAAA,OAAO,EAAC,uBAFC;AAGT,IAAA,MAAM,EAAE,CAAC,OAAD,EAAU,OAAV,CAHC;AAIT,IAAA,IAAI,EAAE,CAJG;AAKT,IAAA,WAAW,EAAA,IALF;AAMT,IAAA,cAAc,EAAA,IANL;AAOT,IAAA,YAAY,EAAE,cAPL;AAQT,IAAA,MAAM,EAAC,OARE;AAST,IAAA,KAAK,EAAC,OATG;AAUT,IAAA,KAAK,EAAC,gBAVG;AAWT,IAAA,QAAQ,EAAE,mBAXD;AAYT,IAAA,aAAa,EAAE,aAZN;AAaT,IAAA,eAAe,EAAE,MAAM,CAAC,iBAAD,CAbd;AAcT,IAAA,MAAM,EAAE,MAAM,CAAC,QAAD,EAAW,gBAAX,CAdL;AAeT,IAAA,MAAM,EAAE,MAAM,CAAC,8BAAD,CAfL;AAgBT,IAAA,kBAAkB,EAAE,4BAAC,EAAD,EAAa;UAAV,GAAG,GAAA,EAAA,CAAA,G;AAAY,aACpC,KAAA,CAAA,aAAA,CAAC,SAAD,EAAU;AACR,QAAA,OAAO,EAAE,mBAAA;AACP,UAAA,GAAG,CAAC,UAAJ;AACD;AAHO,OAAV,CADoC;AAMrC;AAtBQ,GAAX,CADF,CADF;AA4BD,CArCgF,EAqC9E;AAAC,EAAA,SAAS,EAAA,SAAV;AAAY,EAAA,YAAY,EAAA,YAAxB;AAAyB,EAAA,sBAAsB,EAAA,sBAA/C;AAAgD,EAAA,uBAAuB,EAAA,uBAAvE;AAAwE,EAAA,sBAAsB,EAAA,sBAA9F;AAA+F,EAAA,iBAAiB,EAAA,iBAAhH;AAAiH,EAAA,qBAAqB,EAAA;AAAtI,CArC8E,CAAnB,EAqC+E;AAAC,EAAA,SAAS,EAAA,SAAV;AAAY,EAAA,YAAY,EAAA,YAAxB;AAAyB,EAAA,sBAAsB,EAAA,sBAA/C;AAAgD,EAAA,uBAAuB,EAAA,uBAAvE;AAAwE,EAAA,sBAAsB,EAAA,sBAA9F;AAA+F,EAAA,iBAAiB,EAAA,iBAAhH;AAAiH,EAAA,qBAAqB,EAAA;AAAtI,CArC/E,CAAnB,EAqC4O;AAAC,EAAA,SAAS,EAAA,SAAV;AAAY,EAAA,YAAY,EAAA,YAAxB;AAAyB,EAAA,sBAAsB,EAAA,sBAA/C;AAAgD,EAAA,uBAAuB,EAAA,uBAAvE;AAAwE,EAAA,sBAAsB,EAAA,sBAA9F;AAA+F,EAAA,iBAAiB,EAAA,iBAAhH;AAAiH,EAAA,qBAAqB,EAAA;AAAtI,CArC5O,CAApC","sourcesContent":["\n/* eslint-disable */\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\n// @ts-ignore\nvar addSourceDecorator = require(\"@storybook/source-loader/preview\").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = \"/Users/farhanansari/Code/ui-library/src/components/atoms/Map\";\n// @ts-ignore\nvar __STORY__ = \"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/farhanansari/Code/ui-library/src/components/atoms/Map\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"\\\\n\\\\n// @ts-nocheck\\\\n// @ts-ignore\\\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\\\n// @ts-ignore\\\\nvar addSourceDecorator = require(\\\\\\\"@storybook/source-loader/preview\\\\\\\").addSource;\\\\n// @ts-ignore\\\\nvar __SOURCE_PREFIX__ = \\\\\\\"/Users/farhanansari/Code/ui-library/src/components/atoms/Map\\\\\\\";\\\\n// @ts-ignore\\\\nvar __STORY__ = \\\\\\\"import { action } from '@storybook/addon-actions'\\\\\\\\nimport {\\\\\\\\n  boolean,\\\\\\\\n  object,\\\\\\\\n  select,\\\\\\\\n  text,\\\\\\\\n  withKnobs\\\\\\\\n} from '@storybook/addon-knobs'\\\\\\\\nimport React from 'react'\\\\\\\\nimport LeafletMap from '.'\\\\\\\\nimport { path } from '..'\\\\\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\\\\\nimport Settings from '../../atoms/SettingBox/data'\\\\\\\\nimport { ButtonList } from '../../molecules/ShowHideColumnPopup'\\\\\\\\nimport { tVariant } from '../Button'\\\\\\\\nimport { IOption } from '../SettingBox/interface'\\\\\\\\nimport {\\\\\\\\n  GOOGLE_API_KEY,\\\\\\\\n  HERE_MAPS_API_KEY\\\\\\\\n} from './constants/googleIntegration.constants'\\\\\\\\nimport circleSampleData from './dummyData/CircleSampleData.SampleData'\\\\\\\\nimport infowindowStructure from './dummyData/Infowindow.structure.sampleData'\\\\\\\\nimport markerIcons from './dummyData/MarkerIcon.sampleData'\\\\\\\\nimport markerLayerObj from './dummyData/Markers.sampleData'\\\\\\\\nimport polyGeoFenceSampleData from './dummyData/PolyGeoFence.SampleData'\\\\\\\\nimport sampleTrackingData from './dummyData/Presentation.Tracking.sampleData'\\\\\\\\nimport sampleTripData from './dummyData/Presentation.Trips.sampleData'\\\\\\\\nimport { updateSettingsWithLegends } from './helperMethods'\\\\\\\\nimport EditPopUp from './SubComponent/EditPopUp'\\\\\\\\nimport { tTheme, tTiles } from './types.d'\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/Map`,\\\\\\\\n  decorators: [withKnobs],\\\\\\\\n  component: LeafletMap\\\\\\\\n}\\\\\\\\n\\\\\\\\n// The options which will be visible for tile-layer select in the story\\\\\\\\nconst tileOptions = {\\\\\\\\n  'open-street-maps': 'osm',\\\\\\\\n  'google-satellite': 'google_satellite',\\\\\\\\n  'google-basic': 'google_roadmap',\\\\\\\\n  'google-terrain': 'google_terrain',\\\\\\\\n  'google-hybrid': 'google_hybrid'\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst themeOptions = {\\\\\\\\n  light: 'light',\\\\\\\\n  dark: 'dark'\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const BaseMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[51.0, 19.0]}\\\\\\\\n        latLngBounds={[[37.09024, -95.712891]]}\\\\\\\\n        // zoom={number('Zoom', 4, { min: 1, max: 24 })}\\\\\\\\n        zoomControl={boolean('Zoom Controls', true)}\\\\\\\\n        locationSearch={boolean('Location Search Bar', true)}\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        heremapsApiKey={HERE_MAPS_API_KEY}\\\\\\\\n        height={text('Height', '300px')}\\\\\\\\n        width={text('Width', '800px')}\\\\\\\\n        tiles={\\\\\\\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\\\\\\\n        }\\\\\\\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\\\\\\\n        poi={boolean('Points of interest', false)}\\\\\\\\n        settingConfig={settingConfig}\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n        rulerControl={boolean('rulerControl', true)}\\\\\\\\n        iconsRef={markerIcons}\\\\\\\\n        // center={array('center', ['37.7749', '-122.4194'])}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const MarkerMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n\\\\\\\\n  // set permission true of markers if sending data,same like heatmap\\\\\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\\\\\n    option.permission = option.name === 'Markers'\\\\\\\\n    option.selected = option.name === 'Markers'\\\\\\\\n  })\\\\\\\\n  settingConfig['Map Mode'].permission = true\\\\\\\\n\\\\\\\\n  // create legend on the basis of markers data\\\\\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[37.09024, -95.712891]}\\\\\\\\n        latLngBounds={[[37.09024, -95.712891]]}\\\\\\\\n        // zoom={4}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='800px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\\\\\n        focusMarkerId={text('Marker Id to focus/open', '')}\\\\\\\\n        iconsRef={markerIcons}\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        settingConfig={settingConfig}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const HeatMapAndMarker = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // set permission true of heatmap if sending data,same like marker\\\\\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\\\\\n    option.permission = true // true for both option\\\\\\\\n    option.selected = option.name === 'Markers' // markers selected first\\\\\\\\n  })\\\\\\\\n  settingConfig['Map Mode'].permission = true\\\\\\\\n  // create legend on the basis of markers data\\\\\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[51.0, 19.0]}\\\\\\\\n        // zoom={4}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='800px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        heatmap={object('Heatmap configuration', {\\\\\\\\n          permission: false,\\\\\\\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\\\\\\\n        })}\\\\\\\\n        settingConfig={settingConfig}\\\\\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\\\\\n        iconsRef={markerIcons}\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const HeatMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // set permission true of heatmap if sending data,same like marker\\\\\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\\\\\n    option.permission = option.name === 'HeatMap'\\\\\\\\n    option.selected = option.name === 'HeatMap'\\\\\\\\n  })\\\\\\\\n  settingConfig['Map Mode'].permission = true\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[51.0, 19.0]}\\\\\\\\n        // zoom={4}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='300px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        heatmap={object('Heatmap configuration', {\\\\\\\\n          permission: true,\\\\\\\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\\\\\\\n        })}\\\\\\\\n        settingConfig={settingConfig}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const TripsMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // create legend on the basis of markers data\\\\\\\\n\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[51.0, 19.0]}\\\\\\\\n        zoom={4}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='300px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        trips={object('Trip Configuration', sampleTripData)}\\\\\\\\n        iconsRef={markerIcons}\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const TrackingMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[33.298959, -111.9724]}\\\\\\\\n        zoom={10}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='300px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        tracking={object('Tracking Configuration', sampleTrackingData)}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst GeocodingMapComponent = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n  // const [searchText, setSearchText] = React.useState(\\\\\\\\n  //   'Mumbai, Maharashtra, India'\\\\\\\\n  // )\\\\\\\\n  // const [position, setPosition] = React.useState([19.0759837, 72.8776559])\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <LeafletMap\\\\\\\\n      id='leafletBaseMap'\\\\\\\\n      classes='baseMap customBaseMap'\\\\\\\\n      googleApiKey={GOOGLE_API_KEY}\\\\\\\\n      settingConfig={settingConfig}\\\\\\\\n      center={[51.0, 19.0]}\\\\\\\\n      // markers={object('Marker Configuration', markerLayerObj)}\\\\\\\\n      iconsRef={markerIcons}\\\\\\\\n      zoomControl\\\\\\\\n      locationSearch\\\\\\\\n      sendLocationOutside={action('sendLocationOutside ')}\\\\\\\\n      isShowMapTileLayer={boolean('isShowMapTileLayer', false)}\\\\\\\\n      geocoding={{\\\\\\\\n        permission: true,\\\\\\\\n\\\\\\\\n        /** If you are passing searchText, ensure to pass the position prop as well. */\\\\\\\\n        searchText: text('searchText', 'Mumbai'),\\\\\\\\n        // searchTextInput: searchText,\\\\\\\\n        position: [19.0759837, 72.8776559],\\\\\\\\n        isSave: boolean('isSave', true),\\\\\\\\n        onGeocodingSave: (e: any) => {\\\\\\\\n          window.alert(\\\\\\\\n            'Geocodes Saved ' + e.position?.[0] + ', ' + e.position?.[1]\\\\\\\\n          )\\\\\\\\n        },\\\\\\\\n        onGeocodingDragEnd: (pos: [number, number]) => {\\\\\\\\n          action('On Geocoding Drag End')(pos)\\\\\\\\n          // setPosition(pos)\\\\\\\\n          // setSearchText('India')\\\\\\\\n        }\\\\\\\\n      }}\\\\\\\\n      showLegendWrapper={boolean('showLegendWrapper', false)}\\\\\\\\n    />\\\\\\\\n  )\\\\\\\\n}\\\\\\\\nexport const GeocodingMap = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <GeocodingMapComponent />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const PolygonMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n  // const [buttonType] = useState<string | null>(null)\\\\\\\\n  // console.log(buttonType)\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[20.5937, 78.9629]}\\\\\\\\n        zoom={4}\\\\\\\\n        zoomControl={boolean('Zoom Controls', true)}\\\\\\\\n        locationSearch={boolean('Location Search Bar', true)}\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height={text('Height', '300px')}\\\\\\\\n        width={text('Width', '800px')}\\\\\\\\n        tiles={\\\\\\\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\\\\\\\n        }\\\\\\\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\\\\\\\n        poi={boolean('Points of interest', false)}\\\\\\\\n        settingConfig={settingConfig}\\\\\\\\n        polygon={object('polygon', polyGeoFenceSampleData)}\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\\\\\\\n        editPopUpComponent={({ map }: any) => (\\\\\\\\n          <EditPopUp\\\\\\\\n            onClick={() => {\\\\\\\\n              map.closePopup()\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        )}\\\\\\\\n        onEdit={action('Value Edited with new Vertex')}\\\\\\\\n        popupCustomComponent={{\\\\\\\\n          tooltipButton: ({ selectedData }: any) => (\\\\\\\\n            <ButtonList\\\\\\\\n              listOfButtons={[\\\\\\\\n                {\\\\\\\\n                  variant: 'button' as tVariant,\\\\\\\\n                  children: 'Edit',\\\\\\\\n                  // intent: 'table' as tIntent,\\\\\\\\n                  iconVariant: 'edit',\\\\\\\\n                  primary: true,\\\\\\\\n                  onClick: () => console.log('Edit', selectedData)\\\\\\\\n                },\\\\\\\\n                {\\\\\\\\n                  variant: 'button' as tVariant,\\\\\\\\n                  children: 'Delete',\\\\\\\\n                  iconVariant: 'icomoon-close',\\\\\\\\n                  // intent: 'table' as tIntent,\\\\\\\\n                  onClick: () => console.log('delete', selectedData)\\\\\\\\n                }\\\\\\\\n              ]}\\\\\\\\n            />\\\\\\\\n          )\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const CircleMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n\\\\\\\\n  // create legend on the basis of markers data\\\\\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Route Mode')\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[20.5937, 78.9629]}\\\\\\\\n        zoom={4}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='300px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        settingConfig={settingConfig}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n        circle={object('circle', circleSampleData)}\\\\\\\\n        onEdit={action('Value Edited with new Vertex')}\\\\\\\\n        editPopUpComponent={({ map }: any) => (\\\\\\\\n          <EditPopUp\\\\\\\\n            onClick={() => {\\\\\\\\n              map.closePopup()\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        )}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\";\\\\n// @ts-ignore\\\\nvar __ADDS_MAP__ = {};\\\\n// @ts-ignore\\\\nvar __MAIN_FILE_LOCATION__ = \\\\\\\"/Map.stories.tsx\\\\\\\";\\\\n// @ts-ignore\\\\nvar __MODULE_DEPENDENCIES__ = [];\\\\n// @ts-ignore\\\\nvar __LOCAL_DEPENDENCIES__ = {};\\\\n// @ts-ignore\\\\nvar __IDS_TO_FRAMEWORKS__ = {};\\\\n        \\\\nimport { action } from '@storybook/addon-actions'\\\\nimport {\\\\n  boolean,\\\\n  object,\\\\n  select,\\\\n  text,\\\\n  withKnobs\\\\n} from '@storybook/addon-knobs'\\\\nimport React from 'react'\\\\nimport LeafletMap from '.'\\\\nimport { path } from '..'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport Settings from '../../atoms/SettingBox/data'\\\\nimport { ButtonList } from '../../molecules/ShowHideColumnPopup'\\\\nimport { tVariant } from '../Button'\\\\nimport { IOption } from '../SettingBox/interface'\\\\nimport {\\\\n  GOOGLE_API_KEY,\\\\n  HERE_MAPS_API_KEY\\\\n} from './constants/googleIntegration.constants'\\\\nimport circleSampleData from './dummyData/CircleSampleData.SampleData'\\\\nimport infowindowStructure from './dummyData/Infowindow.structure.sampleData'\\\\nimport markerIcons from './dummyData/MarkerIcon.sampleData'\\\\nimport markerLayerObj from './dummyData/Markers.sampleData'\\\\nimport polyGeoFenceSampleData from './dummyData/PolyGeoFence.SampleData'\\\\nimport sampleTrackingData from './dummyData/Presentation.Tracking.sampleData'\\\\nimport sampleTripData from './dummyData/Presentation.Trips.sampleData'\\\\nimport { updateSettingsWithLegends } from './helperMethods'\\\\nimport EditPopUp from './SubComponent/EditPopUp'\\\\nimport { tTheme, tTiles } from './types.d'\\\\n\\\\nexport default {parameters: {\\\\\\\"storySource\\\\\\\":{\\\\\\\"source\\\\\\\":\\\\\\\"import { action } from '@storybook/addon-actions'\\\\\\\\nimport {\\\\\\\\n  boolean,\\\\\\\\n  object,\\\\\\\\n  select,\\\\\\\\n  text,\\\\\\\\n  withKnobs\\\\\\\\n} from '@storybook/addon-knobs'\\\\\\\\nimport React from 'react'\\\\\\\\nimport LeafletMap from '.'\\\\\\\\nimport { path } from '..'\\\\\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\\\\\nimport Settings from '../../atoms/SettingBox/data'\\\\\\\\nimport { ButtonList } from '../../molecules/ShowHideColumnPopup'\\\\\\\\nimport { tVariant } from '../Button'\\\\\\\\nimport { IOption } from '../SettingBox/interface'\\\\\\\\nimport {\\\\\\\\n  GOOGLE_API_KEY,\\\\\\\\n  HERE_MAPS_API_KEY\\\\\\\\n} from './constants/googleIntegration.constants'\\\\\\\\nimport circleSampleData from './dummyData/CircleSampleData.SampleData'\\\\\\\\nimport infowindowStructure from './dummyData/Infowindow.structure.sampleData'\\\\\\\\nimport markerIcons from './dummyData/MarkerIcon.sampleData'\\\\\\\\nimport markerLayerObj from './dummyData/Markers.sampleData'\\\\\\\\nimport polyGeoFenceSampleData from './dummyData/PolyGeoFence.SampleData'\\\\\\\\nimport sampleTrackingData from './dummyData/Presentation.Tracking.sampleData'\\\\\\\\nimport sampleTripData from './dummyData/Presentation.Trips.sampleData'\\\\\\\\nimport { updateSettingsWithLegends } from './helperMethods'\\\\\\\\nimport EditPopUp from './SubComponent/EditPopUp'\\\\\\\\nimport { tTheme, tTiles } from './types.d'\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/Map`,\\\\\\\\n  decorators: [withKnobs],\\\\\\\\n  component: LeafletMap\\\\\\\\n}\\\\\\\\n\\\\\\\\n// The options which will be visible for tile-layer select in the story\\\\\\\\nconst tileOptions = {\\\\\\\\n  'open-street-maps': 'osm',\\\\\\\\n  'google-satellite': 'google_satellite',\\\\\\\\n  'google-basic': 'google_roadmap',\\\\\\\\n  'google-terrain': 'google_terrain',\\\\\\\\n  'google-hybrid': 'google_hybrid'\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst themeOptions = {\\\\\\\\n  light: 'light',\\\\\\\\n  dark: 'dark'\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const BaseMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[51.0, 19.0]}\\\\\\\\n        latLngBounds={[[37.09024, -95.712891]]}\\\\\\\\n        // zoom={number('Zoom', 4, { min: 1, max: 24 })}\\\\\\\\n        zoomControl={boolean('Zoom Controls', true)}\\\\\\\\n        locationSearch={boolean('Location Search Bar', true)}\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        heremapsApiKey={HERE_MAPS_API_KEY}\\\\\\\\n        height={text('Height', '300px')}\\\\\\\\n        width={text('Width', '800px')}\\\\\\\\n        tiles={\\\\\\\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\\\\\\\n        }\\\\\\\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\\\\\\\n        poi={boolean('Points of interest', false)}\\\\\\\\n        settingConfig={settingConfig}\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n        rulerControl={boolean('rulerControl', true)}\\\\\\\\n        iconsRef={markerIcons}\\\\\\\\n        // center={array('center', ['37.7749', '-122.4194'])}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const MarkerMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n\\\\\\\\n  // set permission true of markers if sending data,same like heatmap\\\\\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\\\\\n    option.permission = option.name === 'Markers'\\\\\\\\n    option.selected = option.name === 'Markers'\\\\\\\\n  })\\\\\\\\n  settingConfig['Map Mode'].permission = true\\\\\\\\n\\\\\\\\n  // create legend on the basis of markers data\\\\\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[37.09024, -95.712891]}\\\\\\\\n        latLngBounds={[[37.09024, -95.712891]]}\\\\\\\\n        // zoom={4}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='800px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\\\\\n        focusMarkerId={text('Marker Id to focus/open', '')}\\\\\\\\n        iconsRef={markerIcons}\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        settingConfig={settingConfig}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const HeatMapAndMarker = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // set permission true of heatmap if sending data,same like marker\\\\\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\\\\\n    option.permission = true // true for both option\\\\\\\\n    option.selected = option.name === 'Markers' // markers selected first\\\\\\\\n  })\\\\\\\\n  settingConfig['Map Mode'].permission = true\\\\\\\\n  // create legend on the basis of markers data\\\\\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[51.0, 19.0]}\\\\\\\\n        // zoom={4}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='800px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        heatmap={object('Heatmap configuration', {\\\\\\\\n          permission: false,\\\\\\\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\\\\\\\n        })}\\\\\\\\n        settingConfig={settingConfig}\\\\\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\\\\\n        iconsRef={markerIcons}\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const HeatMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // set permission true of heatmap if sending data,same like marker\\\\\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\\\\\n    option.permission = option.name === 'HeatMap'\\\\\\\\n    option.selected = option.name === 'HeatMap'\\\\\\\\n  })\\\\\\\\n  settingConfig['Map Mode'].permission = true\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[51.0, 19.0]}\\\\\\\\n        // zoom={4}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='300px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        heatmap={object('Heatmap configuration', {\\\\\\\\n          permission: true,\\\\\\\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\\\\\\\n        })}\\\\\\\\n        settingConfig={settingConfig}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const TripsMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // create legend on the basis of markers data\\\\\\\\n\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[51.0, 19.0]}\\\\\\\\n        zoom={4}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='300px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        trips={object('Trip Configuration', sampleTripData)}\\\\\\\\n        iconsRef={markerIcons}\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const TrackingMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[33.298959, -111.9724]}\\\\\\\\n        zoom={10}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='300px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        tracking={object('Tracking Configuration', sampleTrackingData)}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst GeocodingMapComponent = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n  // const [searchText, setSearchText] = React.useState(\\\\\\\\n  //   'Mumbai, Maharashtra, India'\\\\\\\\n  // )\\\\\\\\n  // const [position, setPosition] = React.useState([19.0759837, 72.8776559])\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <LeafletMap\\\\\\\\n      id='leafletBaseMap'\\\\\\\\n      classes='baseMap customBaseMap'\\\\\\\\n      googleApiKey={GOOGLE_API_KEY}\\\\\\\\n      settingConfig={settingConfig}\\\\\\\\n      center={[51.0, 19.0]}\\\\\\\\n      // markers={object('Marker Configuration', markerLayerObj)}\\\\\\\\n      iconsRef={markerIcons}\\\\\\\\n      zoomControl\\\\\\\\n      locationSearch\\\\\\\\n      sendLocationOutside={action('sendLocationOutside ')}\\\\\\\\n      isShowMapTileLayer={boolean('isShowMapTileLayer', false)}\\\\\\\\n      geocoding={{\\\\\\\\n        permission: true,\\\\\\\\n\\\\\\\\n        /** If you are passing searchText, ensure to pass the position prop as well. */\\\\\\\\n        searchText: text('searchText', 'Mumbai'),\\\\\\\\n        // searchTextInput: searchText,\\\\\\\\n        position: [19.0759837, 72.8776559],\\\\\\\\n        isSave: boolean('isSave', true),\\\\\\\\n        onGeocodingSave: (e: any) => {\\\\\\\\n          window.alert(\\\\\\\\n            'Geocodes Saved ' + e.position?.[0] + ', ' + e.position?.[1]\\\\\\\\n          )\\\\\\\\n        },\\\\\\\\n        onGeocodingDragEnd: (pos: [number, number]) => {\\\\\\\\n          action('On Geocoding Drag End')(pos)\\\\\\\\n          // setPosition(pos)\\\\\\\\n          // setSearchText('India')\\\\\\\\n        }\\\\\\\\n      }}\\\\\\\\n      showLegendWrapper={boolean('showLegendWrapper', false)}\\\\\\\\n    />\\\\\\\\n  )\\\\\\\\n}\\\\\\\\nexport const GeocodingMap = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <GeocodingMapComponent />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const PolygonMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n  // const [buttonType] = useState<string | null>(null)\\\\\\\\n  // console.log(buttonType)\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[20.5937, 78.9629]}\\\\\\\\n        zoom={4}\\\\\\\\n        zoomControl={boolean('Zoom Controls', true)}\\\\\\\\n        locationSearch={boolean('Location Search Bar', true)}\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height={text('Height', '300px')}\\\\\\\\n        width={text('Width', '800px')}\\\\\\\\n        tiles={\\\\\\\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\\\\\\\n        }\\\\\\\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\\\\\\\n        poi={boolean('Points of interest', false)}\\\\\\\\n        settingConfig={settingConfig}\\\\\\\\n        polygon={object('polygon', polyGeoFenceSampleData)}\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\\\\\\\n        editPopUpComponent={({ map }: any) => (\\\\\\\\n          <EditPopUp\\\\\\\\n            onClick={() => {\\\\\\\\n              map.closePopup()\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        )}\\\\\\\\n        onEdit={action('Value Edited with new Vertex')}\\\\\\\\n        popupCustomComponent={{\\\\\\\\n          tooltipButton: ({ selectedData }: any) => (\\\\\\\\n            <ButtonList\\\\\\\\n              listOfButtons={[\\\\\\\\n                {\\\\\\\\n                  variant: 'button' as tVariant,\\\\\\\\n                  children: 'Edit',\\\\\\\\n                  // intent: 'table' as tIntent,\\\\\\\\n                  iconVariant: 'edit',\\\\\\\\n                  primary: true,\\\\\\\\n                  onClick: () => console.log('Edit', selectedData)\\\\\\\\n                },\\\\\\\\n                {\\\\\\\\n                  variant: 'button' as tVariant,\\\\\\\\n                  children: 'Delete',\\\\\\\\n                  iconVariant: 'icomoon-close',\\\\\\\\n                  // intent: 'table' as tIntent,\\\\\\\\n                  onClick: () => console.log('delete', selectedData)\\\\\\\\n                }\\\\\\\\n              ]}\\\\\\\\n            />\\\\\\\\n          )\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const CircleMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n\\\\\\\\n  // create legend on the basis of markers data\\\\\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Route Mode')\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[20.5937, 78.9629]}\\\\\\\\n        zoom={4}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='300px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        settingConfig={settingConfig}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n        circle={object('circle', circleSampleData)}\\\\\\\\n        onEdit={action('Value Edited with new Vertex')}\\\\\\\\n        editPopUpComponent={({ map }: any) => (\\\\\\\\n          <EditPopUp\\\\\\\\n            onClick={() => {\\\\\\\\n              map.closePopup()\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        )}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\",\\\\\\\"locationsMap\\\\\\\":{}},},\\\\n  title: `${path}/Map`,\\\\n  decorators: [withKnobs],\\\\n  component: LeafletMap\\\\n}\\\\n\\\\n// The options which will be visible for tile-layer select in the story\\\\nconst tileOptions = {\\\\n  'open-street-maps': 'osm',\\\\n  'google-satellite': 'google_satellite',\\\\n  'google-basic': 'google_roadmap',\\\\n  'google-terrain': 'google_terrain',\\\\n  'google-hybrid': 'google_hybrid'\\\\n}\\\\n\\\\nconst themeOptions = {\\\\n  light: 'light',\\\\n  dark: 'dark'\\\\n}\\\\n\\\\nexport const BaseMap = addSourceDecorator(() => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        latLngBounds={[[37.09024, -95.712891]]}\\\\n        // zoom={number('Zoom', 4, { min: 1, max: 24 })}\\\\n        zoomControl={boolean('Zoom Controls', true)}\\\\n        locationSearch={boolean('Location Search Bar', true)}\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        heremapsApiKey={HERE_MAPS_API_KEY}\\\\n        height={text('Height', '300px')}\\\\n        width={text('Width', '800px')}\\\\n        tiles={\\\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\\\n        }\\\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\\\n        poi={boolean('Points of interest', false)}\\\\n        settingConfig={settingConfig}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n        rulerControl={boolean('rulerControl', true)}\\\\n        iconsRef={markerIcons}\\\\n        // center={array('center', ['37.7749', '-122.4194'])}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const MarkerMap = addSourceDecorator(() => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n\\\\n  // set permission true of markers if sending data,same like heatmap\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\n    option.permission = option.name === 'Markers'\\\\n    option.selected = option.name === 'Markers'\\\\n  })\\\\n  settingConfig['Map Mode'].permission = true\\\\n\\\\n  // create legend on the basis of markers data\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[37.09024, -95.712891]}\\\\n        latLngBounds={[[37.09024, -95.712891]]}\\\\n        // zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='800px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\n        focusMarkerId={text('Marker Id to focus/open', '')}\\\\n        iconsRef={markerIcons}\\\\n        popupRef={infowindowStructure}\\\\n        settingConfig={settingConfig}\\\\n        onSettingChange={action('setting changed')}\\\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const HeatMapAndMarker = addSourceDecorator(() => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission true of heatmap if sending data,same like marker\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\n    option.permission = true // true for both option\\\\n    option.selected = option.name === 'Markers' // markers selected first\\\\n  })\\\\n  settingConfig['Map Mode'].permission = true\\\\n  // create legend on the basis of markers data\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        // zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='800px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        heatmap={object('Heatmap configuration', {\\\\n          permission: false,\\\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\\\n        })}\\\\n        settingConfig={settingConfig}\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\n        iconsRef={markerIcons}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const HeatMap = addSourceDecorator(() => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission true of heatmap if sending data,same like marker\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\n    option.permission = option.name === 'HeatMap'\\\\n    option.selected = option.name === 'HeatMap'\\\\n  })\\\\n  settingConfig['Map Mode'].permission = true\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        // zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        heatmap={object('Heatmap configuration', {\\\\n          permission: true,\\\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\\\n        })}\\\\n        settingConfig={settingConfig}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const TripsMap = addSourceDecorator(() => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // create legend on the basis of markers data\\\\n\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        trips={object('Trip Configuration', sampleTripData)}\\\\n        iconsRef={markerIcons}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const TrackingMap = addSourceDecorator(() => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[33.298959, -111.9724]}\\\\n        zoom={10}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        tracking={object('Tracking Configuration', sampleTrackingData)}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nconst GeocodingMapComponent = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  // const [searchText, setSearchText] = React.useState(\\\\n  //   'Mumbai, Maharashtra, India'\\\\n  // )\\\\n  // const [position, setPosition] = React.useState([19.0759837, 72.8776559])\\\\n\\\\n  return (\\\\n    <LeafletMap\\\\n      id='leafletBaseMap'\\\\n      classes='baseMap customBaseMap'\\\\n      googleApiKey={GOOGLE_API_KEY}\\\\n      settingConfig={settingConfig}\\\\n      center={[51.0, 19.0]}\\\\n      // markers={object('Marker Configuration', markerLayerObj)}\\\\n      iconsRef={markerIcons}\\\\n      zoomControl\\\\n      locationSearch\\\\n      sendLocationOutside={action('sendLocationOutside ')}\\\\n      isShowMapTileLayer={boolean('isShowMapTileLayer', false)}\\\\n      geocoding={{\\\\n        permission: true,\\\\n\\\\n        /** If you are passing searchText, ensure to pass the position prop as well. */\\\\n        searchText: text('searchText', 'Mumbai'),\\\\n        // searchTextInput: searchText,\\\\n        position: [19.0759837, 72.8776559],\\\\n        isSave: boolean('isSave', true),\\\\n        onGeocodingSave: (e: any) => {\\\\n          window.alert(\\\\n            'Geocodes Saved ' + e.position?.[0] + ', ' + e.position?.[1]\\\\n          )\\\\n        },\\\\n        onGeocodingDragEnd: (pos: [number, number]) => {\\\\n          action('On Geocoding Drag End')(pos)\\\\n          // setPosition(pos)\\\\n          // setSearchText('India')\\\\n        }\\\\n      }}\\\\n      showLegendWrapper={boolean('showLegendWrapper', false)}\\\\n    />\\\\n  )\\\\n}\\\\nexport const GeocodingMap = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <GeocodingMapComponent />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const PolygonMap = addSourceDecorator(() => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  // const [buttonType] = useState<string | null>(null)\\\\n  // console.log(buttonType)\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[20.5937, 78.9629]}\\\\n        zoom={4}\\\\n        zoomControl={boolean('Zoom Controls', true)}\\\\n        locationSearch={boolean('Location Search Bar', true)}\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height={text('Height', '300px')}\\\\n        width={text('Width', '800px')}\\\\n        tiles={\\\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\\\n        }\\\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\\\n        poi={boolean('Points of interest', false)}\\\\n        settingConfig={settingConfig}\\\\n        polygon={object('polygon', polyGeoFenceSampleData)}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\\\n        editPopUpComponent={({ map }: any) => (\\\\n          <EditPopUp\\\\n            onClick={() => {\\\\n              map.closePopup()\\\\n            }}\\\\n          />\\\\n        )}\\\\n        onEdit={action('Value Edited with new Vertex')}\\\\n        popupCustomComponent={{\\\\n          tooltipButton: ({ selectedData }: any) => (\\\\n            <ButtonList\\\\n              listOfButtons={[\\\\n                {\\\\n                  variant: 'button' as tVariant,\\\\n                  children: 'Edit',\\\\n                  // intent: 'table' as tIntent,\\\\n                  iconVariant: 'edit',\\\\n                  primary: true,\\\\n                  onClick: () => console.log('Edit', selectedData)\\\\n                },\\\\n                {\\\\n                  variant: 'button' as tVariant,\\\\n                  children: 'Delete',\\\\n                  iconVariant: 'icomoon-close',\\\\n                  // intent: 'table' as tIntent,\\\\n                  onClick: () => console.log('delete', selectedData)\\\\n                }\\\\n              ]}\\\\n            />\\\\n          )\\\\n        }}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const CircleMap = addSourceDecorator(() => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n\\\\n  // create legend on the basis of markers data\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Route Mode')\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[20.5937, 78.9629]}\\\\n        zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        popupRef={infowindowStructure}\\\\n        settingConfig={settingConfig}\\\\n        onSettingChange={action('setting changed')}\\\\n        circle={object('circle', circleSampleData)}\\\\n        onEdit={action('Value Edited with new Vertex')}\\\\n        editPopUpComponent={({ map }: any) => (\\\\n          <EditPopUp\\\\n            onClick={() => {\\\\n              map.closePopup()\\\\n            }}\\\\n          />\\\\n        )}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/Map.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\n\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/farhanansari/Code/ui-library/src/components/atoms/Map\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"import { action } from '@storybook/addon-actions'\\\\nimport {\\\\n  boolean,\\\\n  object,\\\\n  select,\\\\n  text,\\\\n  withKnobs\\\\n} from '@storybook/addon-knobs'\\\\nimport React from 'react'\\\\nimport LeafletMap from '.'\\\\nimport { path } from '..'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport Settings from '../../atoms/SettingBox/data'\\\\nimport { ButtonList } from '../../molecules/ShowHideColumnPopup'\\\\nimport { tVariant } from '../Button'\\\\nimport { IOption } from '../SettingBox/interface'\\\\nimport {\\\\n  GOOGLE_API_KEY,\\\\n  HERE_MAPS_API_KEY\\\\n} from './constants/googleIntegration.constants'\\\\nimport circleSampleData from './dummyData/CircleSampleData.SampleData'\\\\nimport infowindowStructure from './dummyData/Infowindow.structure.sampleData'\\\\nimport markerIcons from './dummyData/MarkerIcon.sampleData'\\\\nimport markerLayerObj from './dummyData/Markers.sampleData'\\\\nimport polyGeoFenceSampleData from './dummyData/PolyGeoFence.SampleData'\\\\nimport sampleTrackingData from './dummyData/Presentation.Tracking.sampleData'\\\\nimport sampleTripData from './dummyData/Presentation.Trips.sampleData'\\\\nimport { updateSettingsWithLegends } from './helperMethods'\\\\nimport EditPopUp from './SubComponent/EditPopUp'\\\\nimport { tTheme, tTiles } from './types.d'\\\\n\\\\nexport default {\\\\n  title: `${path}/Map`,\\\\n  decorators: [withKnobs],\\\\n  component: LeafletMap\\\\n}\\\\n\\\\n// The options which will be visible for tile-layer select in the story\\\\nconst tileOptions = {\\\\n  'open-street-maps': 'osm',\\\\n  'google-satellite': 'google_satellite',\\\\n  'google-basic': 'google_roadmap',\\\\n  'google-terrain': 'google_terrain',\\\\n  'google-hybrid': 'google_hybrid'\\\\n}\\\\n\\\\nconst themeOptions = {\\\\n  light: 'light',\\\\n  dark: 'dark'\\\\n}\\\\n\\\\nexport const BaseMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        latLngBounds={[[37.09024, -95.712891]]}\\\\n        // zoom={number('Zoom', 4, { min: 1, max: 24 })}\\\\n        zoomControl={boolean('Zoom Controls', true)}\\\\n        locationSearch={boolean('Location Search Bar', true)}\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        heremapsApiKey={HERE_MAPS_API_KEY}\\\\n        height={text('Height', '300px')}\\\\n        width={text('Width', '800px')}\\\\n        tiles={\\\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\\\n        }\\\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\\\n        poi={boolean('Points of interest', false)}\\\\n        settingConfig={settingConfig}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n        rulerControl={boolean('rulerControl', true)}\\\\n        iconsRef={markerIcons}\\\\n        // center={array('center', ['37.7749', '-122.4194'])}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const MarkerMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n\\\\n  // set permission true of markers if sending data,same like heatmap\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\n    option.permission = option.name === 'Markers'\\\\n    option.selected = option.name === 'Markers'\\\\n  })\\\\n  settingConfig['Map Mode'].permission = true\\\\n\\\\n  // create legend on the basis of markers data\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[37.09024, -95.712891]}\\\\n        latLngBounds={[[37.09024, -95.712891]]}\\\\n        // zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='800px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\n        focusMarkerId={text('Marker Id to focus/open', '')}\\\\n        iconsRef={markerIcons}\\\\n        popupRef={infowindowStructure}\\\\n        settingConfig={settingConfig}\\\\n        onSettingChange={action('setting changed')}\\\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const HeatMapAndMarker = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission true of heatmap if sending data,same like marker\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\n    option.permission = true // true for both option\\\\n    option.selected = option.name === 'Markers' // markers selected first\\\\n  })\\\\n  settingConfig['Map Mode'].permission = true\\\\n  // create legend on the basis of markers data\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        // zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='800px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        heatmap={object('Heatmap configuration', {\\\\n          permission: false,\\\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\\\n        })}\\\\n        settingConfig={settingConfig}\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\n        iconsRef={markerIcons}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const HeatMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission true of heatmap if sending data,same like marker\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\n    option.permission = option.name === 'HeatMap'\\\\n    option.selected = option.name === 'HeatMap'\\\\n  })\\\\n  settingConfig['Map Mode'].permission = true\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        // zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        heatmap={object('Heatmap configuration', {\\\\n          permission: true,\\\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\\\n        })}\\\\n        settingConfig={settingConfig}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const TripsMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // create legend on the basis of markers data\\\\n\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        trips={object('Trip Configuration', sampleTripData)}\\\\n        iconsRef={markerIcons}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const TrackingMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[33.298959, -111.9724]}\\\\n        zoom={10}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        tracking={object('Tracking Configuration', sampleTrackingData)}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nconst GeocodingMapComponent = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  // const [searchText, setSearchText] = React.useState(\\\\n  //   'Mumbai, Maharashtra, India'\\\\n  // )\\\\n  // const [position, setPosition] = React.useState([19.0759837, 72.8776559])\\\\n\\\\n  return (\\\\n    <LeafletMap\\\\n      id='leafletBaseMap'\\\\n      classes='baseMap customBaseMap'\\\\n      googleApiKey={GOOGLE_API_KEY}\\\\n      settingConfig={settingConfig}\\\\n      center={[51.0, 19.0]}\\\\n      // markers={object('Marker Configuration', markerLayerObj)}\\\\n      iconsRef={markerIcons}\\\\n      zoomControl\\\\n      locationSearch\\\\n      sendLocationOutside={action('sendLocationOutside ')}\\\\n      isShowMapTileLayer={boolean('isShowMapTileLayer', false)}\\\\n      geocoding={{\\\\n        permission: true,\\\\n\\\\n        /** If you are passing searchText, ensure to pass the position prop as well. */\\\\n        searchText: text('searchText', 'Mumbai'),\\\\n        // searchTextInput: searchText,\\\\n        position: [19.0759837, 72.8776559],\\\\n        isSave: boolean('isSave', true),\\\\n        onGeocodingSave: (e: any) => {\\\\n          window.alert(\\\\n            'Geocodes Saved ' + e.position?.[0] + ', ' + e.position?.[1]\\\\n          )\\\\n        },\\\\n        onGeocodingDragEnd: (pos: [number, number]) => {\\\\n          action('On Geocoding Drag End')(pos)\\\\n          // setPosition(pos)\\\\n          // setSearchText('India')\\\\n        }\\\\n      }}\\\\n      showLegendWrapper={boolean('showLegendWrapper', false)}\\\\n    />\\\\n  )\\\\n}\\\\nexport const GeocodingMap = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <GeocodingMapComponent />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const PolygonMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  // const [buttonType] = useState<string | null>(null)\\\\n  // console.log(buttonType)\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[20.5937, 78.9629]}\\\\n        zoom={4}\\\\n        zoomControl={boolean('Zoom Controls', true)}\\\\n        locationSearch={boolean('Location Search Bar', true)}\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height={text('Height', '300px')}\\\\n        width={text('Width', '800px')}\\\\n        tiles={\\\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\\\n        }\\\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\\\n        poi={boolean('Points of interest', false)}\\\\n        settingConfig={settingConfig}\\\\n        polygon={object('polygon', polyGeoFenceSampleData)}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\\\n        editPopUpComponent={({ map }: any) => (\\\\n          <EditPopUp\\\\n            onClick={() => {\\\\n              map.closePopup()\\\\n            }}\\\\n          />\\\\n        )}\\\\n        onEdit={action('Value Edited with new Vertex')}\\\\n        popupCustomComponent={{\\\\n          tooltipButton: ({ selectedData }: any) => (\\\\n            <ButtonList\\\\n              listOfButtons={[\\\\n                {\\\\n                  variant: 'button' as tVariant,\\\\n                  children: 'Edit',\\\\n                  // intent: 'table' as tIntent,\\\\n                  iconVariant: 'edit',\\\\n                  primary: true,\\\\n                  onClick: () => console.log('Edit', selectedData)\\\\n                },\\\\n                {\\\\n                  variant: 'button' as tVariant,\\\\n                  children: 'Delete',\\\\n                  iconVariant: 'icomoon-close',\\\\n                  // intent: 'table' as tIntent,\\\\n                  onClick: () => console.log('delete', selectedData)\\\\n                }\\\\n              ]}\\\\n            />\\\\n          )\\\\n        }}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const CircleMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n\\\\n  // create legend on the basis of markers data\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Route Mode')\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[20.5937, 78.9629]}\\\\n        zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        popupRef={infowindowStructure}\\\\n        settingConfig={settingConfig}\\\\n        onSettingChange={action('setting changed')}\\\\n        circle={object('circle', circleSampleData)}\\\\n        onEdit={action('Value Edited with new Vertex')}\\\\n        editPopUpComponent={({ map }: any) => (\\\\n          <EditPopUp\\\\n            onClick={() => {\\\\n              map.closePopup()\\\\n            }}\\\\n          />\\\\n        )}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/Map.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\nimport { action } from '@storybook/addon-actions'\\nimport {\\n  boolean,\\n  object,\\n  select,\\n  text,\\n  withKnobs\\n} from '@storybook/addon-knobs'\\nimport React from 'react'\\nimport LeafletMap from '.'\\nimport { path } from '..'\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\nimport Settings from '../../atoms/SettingBox/data'\\nimport { ButtonList } from '../../molecules/ShowHideColumnPopup'\\nimport { tVariant } from '../Button'\\nimport { IOption } from '../SettingBox/interface'\\nimport {\\n  GOOGLE_API_KEY,\\n  HERE_MAPS_API_KEY\\n} from './constants/googleIntegration.constants'\\nimport circleSampleData from './dummyData/CircleSampleData.SampleData'\\nimport infowindowStructure from './dummyData/Infowindow.structure.sampleData'\\nimport markerIcons from './dummyData/MarkerIcon.sampleData'\\nimport markerLayerObj from './dummyData/Markers.sampleData'\\nimport polyGeoFenceSampleData from './dummyData/PolyGeoFence.SampleData'\\nimport sampleTrackingData from './dummyData/Presentation.Tracking.sampleData'\\nimport sampleTripData from './dummyData/Presentation.Trips.sampleData'\\nimport { updateSettingsWithLegends } from './helperMethods'\\nimport EditPopUp from './SubComponent/EditPopUp'\\nimport { tTheme, tTiles } from './types.d'\\n\\nexport default {parameters: {\\\"storySource\\\":{\\\"source\\\":\\\"\\\\n\\\\n// @ts-nocheck\\\\n// @ts-ignore\\\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\\\n// @ts-ignore\\\\nvar addSourceDecorator = require(\\\\\\\"@storybook/source-loader/preview\\\\\\\").addSource;\\\\n// @ts-ignore\\\\nvar __SOURCE_PREFIX__ = \\\\\\\"/Users/farhanansari/Code/ui-library/src/components/atoms/Map\\\\\\\";\\\\n// @ts-ignore\\\\nvar __STORY__ = \\\\\\\"import { action } from '@storybook/addon-actions'\\\\\\\\nimport {\\\\\\\\n  boolean,\\\\\\\\n  object,\\\\\\\\n  select,\\\\\\\\n  text,\\\\\\\\n  withKnobs\\\\\\\\n} from '@storybook/addon-knobs'\\\\\\\\nimport React from 'react'\\\\\\\\nimport LeafletMap from '.'\\\\\\\\nimport { path } from '..'\\\\\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\\\\\nimport Settings from '../../atoms/SettingBox/data'\\\\\\\\nimport { ButtonList } from '../../molecules/ShowHideColumnPopup'\\\\\\\\nimport { tVariant } from '../Button'\\\\\\\\nimport { IOption } from '../SettingBox/interface'\\\\\\\\nimport {\\\\\\\\n  GOOGLE_API_KEY,\\\\\\\\n  HERE_MAPS_API_KEY\\\\\\\\n} from './constants/googleIntegration.constants'\\\\\\\\nimport circleSampleData from './dummyData/CircleSampleData.SampleData'\\\\\\\\nimport infowindowStructure from './dummyData/Infowindow.structure.sampleData'\\\\\\\\nimport markerIcons from './dummyData/MarkerIcon.sampleData'\\\\\\\\nimport markerLayerObj from './dummyData/Markers.sampleData'\\\\\\\\nimport polyGeoFenceSampleData from './dummyData/PolyGeoFence.SampleData'\\\\\\\\nimport sampleTrackingData from './dummyData/Presentation.Tracking.sampleData'\\\\\\\\nimport sampleTripData from './dummyData/Presentation.Trips.sampleData'\\\\\\\\nimport { updateSettingsWithLegends } from './helperMethods'\\\\\\\\nimport EditPopUp from './SubComponent/EditPopUp'\\\\\\\\nimport { tTheme, tTiles } from './types.d'\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/Map`,\\\\\\\\n  decorators: [withKnobs],\\\\\\\\n  component: LeafletMap\\\\\\\\n}\\\\\\\\n\\\\\\\\n// The options which will be visible for tile-layer select in the story\\\\\\\\nconst tileOptions = {\\\\\\\\n  'open-street-maps': 'osm',\\\\\\\\n  'google-satellite': 'google_satellite',\\\\\\\\n  'google-basic': 'google_roadmap',\\\\\\\\n  'google-terrain': 'google_terrain',\\\\\\\\n  'google-hybrid': 'google_hybrid'\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst themeOptions = {\\\\\\\\n  light: 'light',\\\\\\\\n  dark: 'dark'\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const BaseMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[51.0, 19.0]}\\\\\\\\n        latLngBounds={[[37.09024, -95.712891]]}\\\\\\\\n        // zoom={number('Zoom', 4, { min: 1, max: 24 })}\\\\\\\\n        zoomControl={boolean('Zoom Controls', true)}\\\\\\\\n        locationSearch={boolean('Location Search Bar', true)}\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        heremapsApiKey={HERE_MAPS_API_KEY}\\\\\\\\n        height={text('Height', '300px')}\\\\\\\\n        width={text('Width', '800px')}\\\\\\\\n        tiles={\\\\\\\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\\\\\\\n        }\\\\\\\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\\\\\\\n        poi={boolean('Points of interest', false)}\\\\\\\\n        settingConfig={settingConfig}\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n        rulerControl={boolean('rulerControl', true)}\\\\\\\\n        iconsRef={markerIcons}\\\\\\\\n        // center={array('center', ['37.7749', '-122.4194'])}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const MarkerMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n\\\\\\\\n  // set permission true of markers if sending data,same like heatmap\\\\\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\\\\\n    option.permission = option.name === 'Markers'\\\\\\\\n    option.selected = option.name === 'Markers'\\\\\\\\n  })\\\\\\\\n  settingConfig['Map Mode'].permission = true\\\\\\\\n\\\\\\\\n  // create legend on the basis of markers data\\\\\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[37.09024, -95.712891]}\\\\\\\\n        latLngBounds={[[37.09024, -95.712891]]}\\\\\\\\n        // zoom={4}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='800px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\\\\\n        focusMarkerId={text('Marker Id to focus/open', '')}\\\\\\\\n        iconsRef={markerIcons}\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        settingConfig={settingConfig}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const HeatMapAndMarker = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // set permission true of heatmap if sending data,same like marker\\\\\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\\\\\n    option.permission = true // true for both option\\\\\\\\n    option.selected = option.name === 'Markers' // markers selected first\\\\\\\\n  })\\\\\\\\n  settingConfig['Map Mode'].permission = true\\\\\\\\n  // create legend on the basis of markers data\\\\\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[51.0, 19.0]}\\\\\\\\n        // zoom={4}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='800px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        heatmap={object('Heatmap configuration', {\\\\\\\\n          permission: false,\\\\\\\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\\\\\\\n        })}\\\\\\\\n        settingConfig={settingConfig}\\\\\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\\\\\n        iconsRef={markerIcons}\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const HeatMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // set permission true of heatmap if sending data,same like marker\\\\\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\\\\\n    option.permission = option.name === 'HeatMap'\\\\\\\\n    option.selected = option.name === 'HeatMap'\\\\\\\\n  })\\\\\\\\n  settingConfig['Map Mode'].permission = true\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[51.0, 19.0]}\\\\\\\\n        // zoom={4}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='300px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        heatmap={object('Heatmap configuration', {\\\\\\\\n          permission: true,\\\\\\\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\\\\\\\n        })}\\\\\\\\n        settingConfig={settingConfig}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const TripsMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // create legend on the basis of markers data\\\\\\\\n\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[51.0, 19.0]}\\\\\\\\n        zoom={4}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='300px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        trips={object('Trip Configuration', sampleTripData)}\\\\\\\\n        iconsRef={markerIcons}\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const TrackingMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[33.298959, -111.9724]}\\\\\\\\n        zoom={10}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='300px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        tracking={object('Tracking Configuration', sampleTrackingData)}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst GeocodingMapComponent = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n  // const [searchText, setSearchText] = React.useState(\\\\\\\\n  //   'Mumbai, Maharashtra, India'\\\\\\\\n  // )\\\\\\\\n  // const [position, setPosition] = React.useState([19.0759837, 72.8776559])\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <LeafletMap\\\\\\\\n      id='leafletBaseMap'\\\\\\\\n      classes='baseMap customBaseMap'\\\\\\\\n      googleApiKey={GOOGLE_API_KEY}\\\\\\\\n      settingConfig={settingConfig}\\\\\\\\n      center={[51.0, 19.0]}\\\\\\\\n      // markers={object('Marker Configuration', markerLayerObj)}\\\\\\\\n      iconsRef={markerIcons}\\\\\\\\n      zoomControl\\\\\\\\n      locationSearch\\\\\\\\n      sendLocationOutside={action('sendLocationOutside ')}\\\\\\\\n      isShowMapTileLayer={boolean('isShowMapTileLayer', false)}\\\\\\\\n      geocoding={{\\\\\\\\n        permission: true,\\\\\\\\n\\\\\\\\n        /** If you are passing searchText, ensure to pass the position prop as well. */\\\\\\\\n        searchText: text('searchText', 'Mumbai'),\\\\\\\\n        // searchTextInput: searchText,\\\\\\\\n        position: [19.0759837, 72.8776559],\\\\\\\\n        isSave: boolean('isSave', true),\\\\\\\\n        onGeocodingSave: (e: any) => {\\\\\\\\n          window.alert(\\\\\\\\n            'Geocodes Saved ' + e.position?.[0] + ', ' + e.position?.[1]\\\\\\\\n          )\\\\\\\\n        },\\\\\\\\n        onGeocodingDragEnd: (pos: [number, number]) => {\\\\\\\\n          action('On Geocoding Drag End')(pos)\\\\\\\\n          // setPosition(pos)\\\\\\\\n          // setSearchText('India')\\\\\\\\n        }\\\\\\\\n      }}\\\\\\\\n      showLegendWrapper={boolean('showLegendWrapper', false)}\\\\\\\\n    />\\\\\\\\n  )\\\\\\\\n}\\\\\\\\nexport const GeocodingMap = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <GeocodingMapComponent />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const PolygonMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n  // const [buttonType] = useState<string | null>(null)\\\\\\\\n  // console.log(buttonType)\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[20.5937, 78.9629]}\\\\\\\\n        zoom={4}\\\\\\\\n        zoomControl={boolean('Zoom Controls', true)}\\\\\\\\n        locationSearch={boolean('Location Search Bar', true)}\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height={text('Height', '300px')}\\\\\\\\n        width={text('Width', '800px')}\\\\\\\\n        tiles={\\\\\\\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\\\\\\\n        }\\\\\\\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\\\\\\\n        poi={boolean('Points of interest', false)}\\\\\\\\n        settingConfig={settingConfig}\\\\\\\\n        polygon={object('polygon', polyGeoFenceSampleData)}\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\\\\\\\n        editPopUpComponent={({ map }: any) => (\\\\\\\\n          <EditPopUp\\\\\\\\n            onClick={() => {\\\\\\\\n              map.closePopup()\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        )}\\\\\\\\n        onEdit={action('Value Edited with new Vertex')}\\\\\\\\n        popupCustomComponent={{\\\\\\\\n          tooltipButton: ({ selectedData }: any) => (\\\\\\\\n            <ButtonList\\\\\\\\n              listOfButtons={[\\\\\\\\n                {\\\\\\\\n                  variant: 'button' as tVariant,\\\\\\\\n                  children: 'Edit',\\\\\\\\n                  // intent: 'table' as tIntent,\\\\\\\\n                  iconVariant: 'edit',\\\\\\\\n                  primary: true,\\\\\\\\n                  onClick: () => console.log('Edit', selectedData)\\\\\\\\n                },\\\\\\\\n                {\\\\\\\\n                  variant: 'button' as tVariant,\\\\\\\\n                  children: 'Delete',\\\\\\\\n                  iconVariant: 'icomoon-close',\\\\\\\\n                  // intent: 'table' as tIntent,\\\\\\\\n                  onClick: () => console.log('delete', selectedData)\\\\\\\\n                }\\\\\\\\n              ]}\\\\\\\\n            />\\\\\\\\n          )\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const CircleMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n\\\\\\\\n  // create legend on the basis of markers data\\\\\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Route Mode')\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[20.5937, 78.9629]}\\\\\\\\n        zoom={4}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='300px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        settingConfig={settingConfig}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n        circle={object('circle', circleSampleData)}\\\\\\\\n        onEdit={action('Value Edited with new Vertex')}\\\\\\\\n        editPopUpComponent={({ map }: any) => (\\\\\\\\n          <EditPopUp\\\\\\\\n            onClick={() => {\\\\\\\\n              map.closePopup()\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        )}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\";\\\\n// @ts-ignore\\\\nvar __ADDS_MAP__ = {};\\\\n// @ts-ignore\\\\nvar __MAIN_FILE_LOCATION__ = \\\\\\\"/Map.stories.tsx\\\\\\\";\\\\n// @ts-ignore\\\\nvar __MODULE_DEPENDENCIES__ = [];\\\\n// @ts-ignore\\\\nvar __LOCAL_DEPENDENCIES__ = {};\\\\n// @ts-ignore\\\\nvar __IDS_TO_FRAMEWORKS__ = {};\\\\n        \\\\nimport { action } from '@storybook/addon-actions'\\\\nimport {\\\\n  boolean,\\\\n  object,\\\\n  select,\\\\n  text,\\\\n  withKnobs\\\\n} from '@storybook/addon-knobs'\\\\nimport React from 'react'\\\\nimport LeafletMap from '.'\\\\nimport { path } from '..'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport Settings from '../../atoms/SettingBox/data'\\\\nimport { ButtonList } from '../../molecules/ShowHideColumnPopup'\\\\nimport { tVariant } from '../Button'\\\\nimport { IOption } from '../SettingBox/interface'\\\\nimport {\\\\n  GOOGLE_API_KEY,\\\\n  HERE_MAPS_API_KEY\\\\n} from './constants/googleIntegration.constants'\\\\nimport circleSampleData from './dummyData/CircleSampleData.SampleData'\\\\nimport infowindowStructure from './dummyData/Infowindow.structure.sampleData'\\\\nimport markerIcons from './dummyData/MarkerIcon.sampleData'\\\\nimport markerLayerObj from './dummyData/Markers.sampleData'\\\\nimport polyGeoFenceSampleData from './dummyData/PolyGeoFence.SampleData'\\\\nimport sampleTrackingData from './dummyData/Presentation.Tracking.sampleData'\\\\nimport sampleTripData from './dummyData/Presentation.Trips.sampleData'\\\\nimport { updateSettingsWithLegends } from './helperMethods'\\\\nimport EditPopUp from './SubComponent/EditPopUp'\\\\nimport { tTheme, tTiles } from './types.d'\\\\n\\\\nexport default {parameters: {\\\\\\\"storySource\\\\\\\":{\\\\\\\"source\\\\\\\":\\\\\\\"import { action } from '@storybook/addon-actions'\\\\\\\\nimport {\\\\\\\\n  boolean,\\\\\\\\n  object,\\\\\\\\n  select,\\\\\\\\n  text,\\\\\\\\n  withKnobs\\\\\\\\n} from '@storybook/addon-knobs'\\\\\\\\nimport React from 'react'\\\\\\\\nimport LeafletMap from '.'\\\\\\\\nimport { path } from '..'\\\\\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\\\\\nimport Settings from '../../atoms/SettingBox/data'\\\\\\\\nimport { ButtonList } from '../../molecules/ShowHideColumnPopup'\\\\\\\\nimport { tVariant } from '../Button'\\\\\\\\nimport { IOption } from '../SettingBox/interface'\\\\\\\\nimport {\\\\\\\\n  GOOGLE_API_KEY,\\\\\\\\n  HERE_MAPS_API_KEY\\\\\\\\n} from './constants/googleIntegration.constants'\\\\\\\\nimport circleSampleData from './dummyData/CircleSampleData.SampleData'\\\\\\\\nimport infowindowStructure from './dummyData/Infowindow.structure.sampleData'\\\\\\\\nimport markerIcons from './dummyData/MarkerIcon.sampleData'\\\\\\\\nimport markerLayerObj from './dummyData/Markers.sampleData'\\\\\\\\nimport polyGeoFenceSampleData from './dummyData/PolyGeoFence.SampleData'\\\\\\\\nimport sampleTrackingData from './dummyData/Presentation.Tracking.sampleData'\\\\\\\\nimport sampleTripData from './dummyData/Presentation.Trips.sampleData'\\\\\\\\nimport { updateSettingsWithLegends } from './helperMethods'\\\\\\\\nimport EditPopUp from './SubComponent/EditPopUp'\\\\\\\\nimport { tTheme, tTiles } from './types.d'\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/Map`,\\\\\\\\n  decorators: [withKnobs],\\\\\\\\n  component: LeafletMap\\\\\\\\n}\\\\\\\\n\\\\\\\\n// The options which will be visible for tile-layer select in the story\\\\\\\\nconst tileOptions = {\\\\\\\\n  'open-street-maps': 'osm',\\\\\\\\n  'google-satellite': 'google_satellite',\\\\\\\\n  'google-basic': 'google_roadmap',\\\\\\\\n  'google-terrain': 'google_terrain',\\\\\\\\n  'google-hybrid': 'google_hybrid'\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst themeOptions = {\\\\\\\\n  light: 'light',\\\\\\\\n  dark: 'dark'\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const BaseMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[51.0, 19.0]}\\\\\\\\n        latLngBounds={[[37.09024, -95.712891]]}\\\\\\\\n        // zoom={number('Zoom', 4, { min: 1, max: 24 })}\\\\\\\\n        zoomControl={boolean('Zoom Controls', true)}\\\\\\\\n        locationSearch={boolean('Location Search Bar', true)}\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        heremapsApiKey={HERE_MAPS_API_KEY}\\\\\\\\n        height={text('Height', '300px')}\\\\\\\\n        width={text('Width', '800px')}\\\\\\\\n        tiles={\\\\\\\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\\\\\\\n        }\\\\\\\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\\\\\\\n        poi={boolean('Points of interest', false)}\\\\\\\\n        settingConfig={settingConfig}\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n        rulerControl={boolean('rulerControl', true)}\\\\\\\\n        iconsRef={markerIcons}\\\\\\\\n        // center={array('center', ['37.7749', '-122.4194'])}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const MarkerMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n\\\\\\\\n  // set permission true of markers if sending data,same like heatmap\\\\\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\\\\\n    option.permission = option.name === 'Markers'\\\\\\\\n    option.selected = option.name === 'Markers'\\\\\\\\n  })\\\\\\\\n  settingConfig['Map Mode'].permission = true\\\\\\\\n\\\\\\\\n  // create legend on the basis of markers data\\\\\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[37.09024, -95.712891]}\\\\\\\\n        latLngBounds={[[37.09024, -95.712891]]}\\\\\\\\n        // zoom={4}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='800px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\\\\\n        focusMarkerId={text('Marker Id to focus/open', '')}\\\\\\\\n        iconsRef={markerIcons}\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        settingConfig={settingConfig}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const HeatMapAndMarker = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // set permission true of heatmap if sending data,same like marker\\\\\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\\\\\n    option.permission = true // true for both option\\\\\\\\n    option.selected = option.name === 'Markers' // markers selected first\\\\\\\\n  })\\\\\\\\n  settingConfig['Map Mode'].permission = true\\\\\\\\n  // create legend on the basis of markers data\\\\\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[51.0, 19.0]}\\\\\\\\n        // zoom={4}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='800px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        heatmap={object('Heatmap configuration', {\\\\\\\\n          permission: false,\\\\\\\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\\\\\\\n        })}\\\\\\\\n        settingConfig={settingConfig}\\\\\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\\\\\n        iconsRef={markerIcons}\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const HeatMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // set permission true of heatmap if sending data,same like marker\\\\\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\\\\\n    option.permission = option.name === 'HeatMap'\\\\\\\\n    option.selected = option.name === 'HeatMap'\\\\\\\\n  })\\\\\\\\n  settingConfig['Map Mode'].permission = true\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[51.0, 19.0]}\\\\\\\\n        // zoom={4}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='300px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        heatmap={object('Heatmap configuration', {\\\\\\\\n          permission: true,\\\\\\\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\\\\\\\n        })}\\\\\\\\n        settingConfig={settingConfig}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const TripsMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // create legend on the basis of markers data\\\\\\\\n\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[51.0, 19.0]}\\\\\\\\n        zoom={4}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='300px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        trips={object('Trip Configuration', sampleTripData)}\\\\\\\\n        iconsRef={markerIcons}\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const TrackingMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[33.298959, -111.9724]}\\\\\\\\n        zoom={10}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='300px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        tracking={object('Tracking Configuration', sampleTrackingData)}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst GeocodingMapComponent = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n  // const [searchText, setSearchText] = React.useState(\\\\\\\\n  //   'Mumbai, Maharashtra, India'\\\\\\\\n  // )\\\\\\\\n  // const [position, setPosition] = React.useState([19.0759837, 72.8776559])\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <LeafletMap\\\\\\\\n      id='leafletBaseMap'\\\\\\\\n      classes='baseMap customBaseMap'\\\\\\\\n      googleApiKey={GOOGLE_API_KEY}\\\\\\\\n      settingConfig={settingConfig}\\\\\\\\n      center={[51.0, 19.0]}\\\\\\\\n      // markers={object('Marker Configuration', markerLayerObj)}\\\\\\\\n      iconsRef={markerIcons}\\\\\\\\n      zoomControl\\\\\\\\n      locationSearch\\\\\\\\n      sendLocationOutside={action('sendLocationOutside ')}\\\\\\\\n      isShowMapTileLayer={boolean('isShowMapTileLayer', false)}\\\\\\\\n      geocoding={{\\\\\\\\n        permission: true,\\\\\\\\n\\\\\\\\n        /** If you are passing searchText, ensure to pass the position prop as well. */\\\\\\\\n        searchText: text('searchText', 'Mumbai'),\\\\\\\\n        // searchTextInput: searchText,\\\\\\\\n        position: [19.0759837, 72.8776559],\\\\\\\\n        isSave: boolean('isSave', true),\\\\\\\\n        onGeocodingSave: (e: any) => {\\\\\\\\n          window.alert(\\\\\\\\n            'Geocodes Saved ' + e.position?.[0] + ', ' + e.position?.[1]\\\\\\\\n          )\\\\\\\\n        },\\\\\\\\n        onGeocodingDragEnd: (pos: [number, number]) => {\\\\\\\\n          action('On Geocoding Drag End')(pos)\\\\\\\\n          // setPosition(pos)\\\\\\\\n          // setSearchText('India')\\\\\\\\n        }\\\\\\\\n      }}\\\\\\\\n      showLegendWrapper={boolean('showLegendWrapper', false)}\\\\\\\\n    />\\\\\\\\n  )\\\\\\\\n}\\\\\\\\nexport const GeocodingMap = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <GeocodingMapComponent />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const PolygonMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n  // const [buttonType] = useState<string | null>(null)\\\\\\\\n  // console.log(buttonType)\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[20.5937, 78.9629]}\\\\\\\\n        zoom={4}\\\\\\\\n        zoomControl={boolean('Zoom Controls', true)}\\\\\\\\n        locationSearch={boolean('Location Search Bar', true)}\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height={text('Height', '300px')}\\\\\\\\n        width={text('Width', '800px')}\\\\\\\\n        tiles={\\\\\\\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\\\\\\\n        }\\\\\\\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\\\\\\\n        poi={boolean('Points of interest', false)}\\\\\\\\n        settingConfig={settingConfig}\\\\\\\\n        polygon={object('polygon', polyGeoFenceSampleData)}\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\\\\\\\n        editPopUpComponent={({ map }: any) => (\\\\\\\\n          <EditPopUp\\\\\\\\n            onClick={() => {\\\\\\\\n              map.closePopup()\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        )}\\\\\\\\n        onEdit={action('Value Edited with new Vertex')}\\\\\\\\n        popupCustomComponent={{\\\\\\\\n          tooltipButton: ({ selectedData }: any) => (\\\\\\\\n            <ButtonList\\\\\\\\n              listOfButtons={[\\\\\\\\n                {\\\\\\\\n                  variant: 'button' as tVariant,\\\\\\\\n                  children: 'Edit',\\\\\\\\n                  // intent: 'table' as tIntent,\\\\\\\\n                  iconVariant: 'edit',\\\\\\\\n                  primary: true,\\\\\\\\n                  onClick: () => console.log('Edit', selectedData)\\\\\\\\n                },\\\\\\\\n                {\\\\\\\\n                  variant: 'button' as tVariant,\\\\\\\\n                  children: 'Delete',\\\\\\\\n                  iconVariant: 'icomoon-close',\\\\\\\\n                  // intent: 'table' as tIntent,\\\\\\\\n                  onClick: () => console.log('delete', selectedData)\\\\\\\\n                }\\\\\\\\n              ]}\\\\\\\\n            />\\\\\\\\n          )\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const CircleMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n\\\\\\\\n  // create legend on the basis of markers data\\\\\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Route Mode')\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[20.5937, 78.9629]}\\\\\\\\n        zoom={4}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='300px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        settingConfig={settingConfig}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n        circle={object('circle', circleSampleData)}\\\\\\\\n        onEdit={action('Value Edited with new Vertex')}\\\\\\\\n        editPopUpComponent={({ map }: any) => (\\\\\\\\n          <EditPopUp\\\\\\\\n            onClick={() => {\\\\\\\\n              map.closePopup()\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        )}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\",\\\\\\\"locationsMap\\\\\\\":{}},},\\\\n  title: `${path}/Map`,\\\\n  decorators: [withKnobs],\\\\n  component: LeafletMap\\\\n}\\\\n\\\\n// The options which will be visible for tile-layer select in the story\\\\nconst tileOptions = {\\\\n  'open-street-maps': 'osm',\\\\n  'google-satellite': 'google_satellite',\\\\n  'google-basic': 'google_roadmap',\\\\n  'google-terrain': 'google_terrain',\\\\n  'google-hybrid': 'google_hybrid'\\\\n}\\\\n\\\\nconst themeOptions = {\\\\n  light: 'light',\\\\n  dark: 'dark'\\\\n}\\\\n\\\\nexport const BaseMap = addSourceDecorator(() => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        latLngBounds={[[37.09024, -95.712891]]}\\\\n        // zoom={number('Zoom', 4, { min: 1, max: 24 })}\\\\n        zoomControl={boolean('Zoom Controls', true)}\\\\n        locationSearch={boolean('Location Search Bar', true)}\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        heremapsApiKey={HERE_MAPS_API_KEY}\\\\n        height={text('Height', '300px')}\\\\n        width={text('Width', '800px')}\\\\n        tiles={\\\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\\\n        }\\\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\\\n        poi={boolean('Points of interest', false)}\\\\n        settingConfig={settingConfig}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n        rulerControl={boolean('rulerControl', true)}\\\\n        iconsRef={markerIcons}\\\\n        // center={array('center', ['37.7749', '-122.4194'])}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const MarkerMap = addSourceDecorator(() => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n\\\\n  // set permission true of markers if sending data,same like heatmap\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\n    option.permission = option.name === 'Markers'\\\\n    option.selected = option.name === 'Markers'\\\\n  })\\\\n  settingConfig['Map Mode'].permission = true\\\\n\\\\n  // create legend on the basis of markers data\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[37.09024, -95.712891]}\\\\n        latLngBounds={[[37.09024, -95.712891]]}\\\\n        // zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='800px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\n        focusMarkerId={text('Marker Id to focus/open', '')}\\\\n        iconsRef={markerIcons}\\\\n        popupRef={infowindowStructure}\\\\n        settingConfig={settingConfig}\\\\n        onSettingChange={action('setting changed')}\\\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const HeatMapAndMarker = addSourceDecorator(() => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission true of heatmap if sending data,same like marker\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\n    option.permission = true // true for both option\\\\n    option.selected = option.name === 'Markers' // markers selected first\\\\n  })\\\\n  settingConfig['Map Mode'].permission = true\\\\n  // create legend on the basis of markers data\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        // zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='800px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        heatmap={object('Heatmap configuration', {\\\\n          permission: false,\\\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\\\n        })}\\\\n        settingConfig={settingConfig}\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\n        iconsRef={markerIcons}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const HeatMap = addSourceDecorator(() => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission true of heatmap if sending data,same like marker\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\n    option.permission = option.name === 'HeatMap'\\\\n    option.selected = option.name === 'HeatMap'\\\\n  })\\\\n  settingConfig['Map Mode'].permission = true\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        // zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        heatmap={object('Heatmap configuration', {\\\\n          permission: true,\\\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\\\n        })}\\\\n        settingConfig={settingConfig}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const TripsMap = addSourceDecorator(() => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // create legend on the basis of markers data\\\\n\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        trips={object('Trip Configuration', sampleTripData)}\\\\n        iconsRef={markerIcons}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const TrackingMap = addSourceDecorator(() => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[33.298959, -111.9724]}\\\\n        zoom={10}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        tracking={object('Tracking Configuration', sampleTrackingData)}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nconst GeocodingMapComponent = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  // const [searchText, setSearchText] = React.useState(\\\\n  //   'Mumbai, Maharashtra, India'\\\\n  // )\\\\n  // const [position, setPosition] = React.useState([19.0759837, 72.8776559])\\\\n\\\\n  return (\\\\n    <LeafletMap\\\\n      id='leafletBaseMap'\\\\n      classes='baseMap customBaseMap'\\\\n      googleApiKey={GOOGLE_API_KEY}\\\\n      settingConfig={settingConfig}\\\\n      center={[51.0, 19.0]}\\\\n      // markers={object('Marker Configuration', markerLayerObj)}\\\\n      iconsRef={markerIcons}\\\\n      zoomControl\\\\n      locationSearch\\\\n      sendLocationOutside={action('sendLocationOutside ')}\\\\n      isShowMapTileLayer={boolean('isShowMapTileLayer', false)}\\\\n      geocoding={{\\\\n        permission: true,\\\\n\\\\n        /** If you are passing searchText, ensure to pass the position prop as well. */\\\\n        searchText: text('searchText', 'Mumbai'),\\\\n        // searchTextInput: searchText,\\\\n        position: [19.0759837, 72.8776559],\\\\n        isSave: boolean('isSave', true),\\\\n        onGeocodingSave: (e: any) => {\\\\n          window.alert(\\\\n            'Geocodes Saved ' + e.position?.[0] + ', ' + e.position?.[1]\\\\n          )\\\\n        },\\\\n        onGeocodingDragEnd: (pos: [number, number]) => {\\\\n          action('On Geocoding Drag End')(pos)\\\\n          // setPosition(pos)\\\\n          // setSearchText('India')\\\\n        }\\\\n      }}\\\\n      showLegendWrapper={boolean('showLegendWrapper', false)}\\\\n    />\\\\n  )\\\\n}\\\\nexport const GeocodingMap = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <GeocodingMapComponent />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const PolygonMap = addSourceDecorator(() => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  // const [buttonType] = useState<string | null>(null)\\\\n  // console.log(buttonType)\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[20.5937, 78.9629]}\\\\n        zoom={4}\\\\n        zoomControl={boolean('Zoom Controls', true)}\\\\n        locationSearch={boolean('Location Search Bar', true)}\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height={text('Height', '300px')}\\\\n        width={text('Width', '800px')}\\\\n        tiles={\\\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\\\n        }\\\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\\\n        poi={boolean('Points of interest', false)}\\\\n        settingConfig={settingConfig}\\\\n        polygon={object('polygon', polyGeoFenceSampleData)}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\\\n        editPopUpComponent={({ map }: any) => (\\\\n          <EditPopUp\\\\n            onClick={() => {\\\\n              map.closePopup()\\\\n            }}\\\\n          />\\\\n        )}\\\\n        onEdit={action('Value Edited with new Vertex')}\\\\n        popupCustomComponent={{\\\\n          tooltipButton: ({ selectedData }: any) => (\\\\n            <ButtonList\\\\n              listOfButtons={[\\\\n                {\\\\n                  variant: 'button' as tVariant,\\\\n                  children: 'Edit',\\\\n                  // intent: 'table' as tIntent,\\\\n                  iconVariant: 'edit',\\\\n                  primary: true,\\\\n                  onClick: () => console.log('Edit', selectedData)\\\\n                },\\\\n                {\\\\n                  variant: 'button' as tVariant,\\\\n                  children: 'Delete',\\\\n                  iconVariant: 'icomoon-close',\\\\n                  // intent: 'table' as tIntent,\\\\n                  onClick: () => console.log('delete', selectedData)\\\\n                }\\\\n              ]}\\\\n            />\\\\n          )\\\\n        }}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const CircleMap = addSourceDecorator(() => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n\\\\n  // create legend on the basis of markers data\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Route Mode')\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[20.5937, 78.9629]}\\\\n        zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        popupRef={infowindowStructure}\\\\n        settingConfig={settingConfig}\\\\n        onSettingChange={action('setting changed')}\\\\n        circle={object('circle', circleSampleData)}\\\\n        onEdit={action('Value Edited with new Vertex')}\\\\n        editPopUpComponent={({ map }: any) => (\\\\n          <EditPopUp\\\\n            onClick={() => {\\\\n              map.closePopup()\\\\n            }}\\\\n          />\\\\n        )}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\",\\\"locationsMap\\\":{}},\\\"storySource\\\":{\\\"source\\\":\\\"import { action } from '@storybook/addon-actions'\\\\nimport {\\\\n  boolean,\\\\n  object,\\\\n  select,\\\\n  text,\\\\n  withKnobs\\\\n} from '@storybook/addon-knobs'\\\\nimport React from 'react'\\\\nimport LeafletMap from '.'\\\\nimport { path } from '..'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport Settings from '../../atoms/SettingBox/data'\\\\nimport { ButtonList } from '../../molecules/ShowHideColumnPopup'\\\\nimport { tVariant } from '../Button'\\\\nimport { IOption } from '../SettingBox/interface'\\\\nimport {\\\\n  GOOGLE_API_KEY,\\\\n  HERE_MAPS_API_KEY\\\\n} from './constants/googleIntegration.constants'\\\\nimport circleSampleData from './dummyData/CircleSampleData.SampleData'\\\\nimport infowindowStructure from './dummyData/Infowindow.structure.sampleData'\\\\nimport markerIcons from './dummyData/MarkerIcon.sampleData'\\\\nimport markerLayerObj from './dummyData/Markers.sampleData'\\\\nimport polyGeoFenceSampleData from './dummyData/PolyGeoFence.SampleData'\\\\nimport sampleTrackingData from './dummyData/Presentation.Tracking.sampleData'\\\\nimport sampleTripData from './dummyData/Presentation.Trips.sampleData'\\\\nimport { updateSettingsWithLegends } from './helperMethods'\\\\nimport EditPopUp from './SubComponent/EditPopUp'\\\\nimport { tTheme, tTiles } from './types.d'\\\\n\\\\nexport default {\\\\n  title: `${path}/Map`,\\\\n  decorators: [withKnobs],\\\\n  component: LeafletMap\\\\n}\\\\n\\\\n// The options which will be visible for tile-layer select in the story\\\\nconst tileOptions = {\\\\n  'open-street-maps': 'osm',\\\\n  'google-satellite': 'google_satellite',\\\\n  'google-basic': 'google_roadmap',\\\\n  'google-terrain': 'google_terrain',\\\\n  'google-hybrid': 'google_hybrid'\\\\n}\\\\n\\\\nconst themeOptions = {\\\\n  light: 'light',\\\\n  dark: 'dark'\\\\n}\\\\n\\\\nexport const BaseMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        latLngBounds={[[37.09024, -95.712891]]}\\\\n        // zoom={number('Zoom', 4, { min: 1, max: 24 })}\\\\n        zoomControl={boolean('Zoom Controls', true)}\\\\n        locationSearch={boolean('Location Search Bar', true)}\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        heremapsApiKey={HERE_MAPS_API_KEY}\\\\n        height={text('Height', '300px')}\\\\n        width={text('Width', '800px')}\\\\n        tiles={\\\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\\\n        }\\\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\\\n        poi={boolean('Points of interest', false)}\\\\n        settingConfig={settingConfig}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n        rulerControl={boolean('rulerControl', true)}\\\\n        iconsRef={markerIcons}\\\\n        // center={array('center', ['37.7749', '-122.4194'])}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const MarkerMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n\\\\n  // set permission true of markers if sending data,same like heatmap\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\n    option.permission = option.name === 'Markers'\\\\n    option.selected = option.name === 'Markers'\\\\n  })\\\\n  settingConfig['Map Mode'].permission = true\\\\n\\\\n  // create legend on the basis of markers data\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[37.09024, -95.712891]}\\\\n        latLngBounds={[[37.09024, -95.712891]]}\\\\n        // zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='800px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\n        focusMarkerId={text('Marker Id to focus/open', '')}\\\\n        iconsRef={markerIcons}\\\\n        popupRef={infowindowStructure}\\\\n        settingConfig={settingConfig}\\\\n        onSettingChange={action('setting changed')}\\\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const HeatMapAndMarker = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission true of heatmap if sending data,same like marker\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\n    option.permission = true // true for both option\\\\n    option.selected = option.name === 'Markers' // markers selected first\\\\n  })\\\\n  settingConfig['Map Mode'].permission = true\\\\n  // create legend on the basis of markers data\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        // zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='800px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        heatmap={object('Heatmap configuration', {\\\\n          permission: false,\\\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\\\n        })}\\\\n        settingConfig={settingConfig}\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\n        iconsRef={markerIcons}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const HeatMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission true of heatmap if sending data,same like marker\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\n    option.permission = option.name === 'HeatMap'\\\\n    option.selected = option.name === 'HeatMap'\\\\n  })\\\\n  settingConfig['Map Mode'].permission = true\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        // zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        heatmap={object('Heatmap configuration', {\\\\n          permission: true,\\\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\\\n        })}\\\\n        settingConfig={settingConfig}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const TripsMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // create legend on the basis of markers data\\\\n\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        trips={object('Trip Configuration', sampleTripData)}\\\\n        iconsRef={markerIcons}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const TrackingMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[33.298959, -111.9724]}\\\\n        zoom={10}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        tracking={object('Tracking Configuration', sampleTrackingData)}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nconst GeocodingMapComponent = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  // const [searchText, setSearchText] = React.useState(\\\\n  //   'Mumbai, Maharashtra, India'\\\\n  // )\\\\n  // const [position, setPosition] = React.useState([19.0759837, 72.8776559])\\\\n\\\\n  return (\\\\n    <LeafletMap\\\\n      id='leafletBaseMap'\\\\n      classes='baseMap customBaseMap'\\\\n      googleApiKey={GOOGLE_API_KEY}\\\\n      settingConfig={settingConfig}\\\\n      center={[51.0, 19.0]}\\\\n      // markers={object('Marker Configuration', markerLayerObj)}\\\\n      iconsRef={markerIcons}\\\\n      zoomControl\\\\n      locationSearch\\\\n      sendLocationOutside={action('sendLocationOutside ')}\\\\n      isShowMapTileLayer={boolean('isShowMapTileLayer', false)}\\\\n      geocoding={{\\\\n        permission: true,\\\\n\\\\n        /** If you are passing searchText, ensure to pass the position prop as well. */\\\\n        searchText: text('searchText', 'Mumbai'),\\\\n        // searchTextInput: searchText,\\\\n        position: [19.0759837, 72.8776559],\\\\n        isSave: boolean('isSave', true),\\\\n        onGeocodingSave: (e: any) => {\\\\n          window.alert(\\\\n            'Geocodes Saved ' + e.position?.[0] + ', ' + e.position?.[1]\\\\n          )\\\\n        },\\\\n        onGeocodingDragEnd: (pos: [number, number]) => {\\\\n          action('On Geocoding Drag End')(pos)\\\\n          // setPosition(pos)\\\\n          // setSearchText('India')\\\\n        }\\\\n      }}\\\\n      showLegendWrapper={boolean('showLegendWrapper', false)}\\\\n    />\\\\n  )\\\\n}\\\\nexport const GeocodingMap = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <GeocodingMapComponent />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const PolygonMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  // const [buttonType] = useState<string | null>(null)\\\\n  // console.log(buttonType)\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[20.5937, 78.9629]}\\\\n        zoom={4}\\\\n        zoomControl={boolean('Zoom Controls', true)}\\\\n        locationSearch={boolean('Location Search Bar', true)}\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height={text('Height', '300px')}\\\\n        width={text('Width', '800px')}\\\\n        tiles={\\\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\\\n        }\\\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\\\n        poi={boolean('Points of interest', false)}\\\\n        settingConfig={settingConfig}\\\\n        polygon={object('polygon', polyGeoFenceSampleData)}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\\\n        editPopUpComponent={({ map }: any) => (\\\\n          <EditPopUp\\\\n            onClick={() => {\\\\n              map.closePopup()\\\\n            }}\\\\n          />\\\\n        )}\\\\n        onEdit={action('Value Edited with new Vertex')}\\\\n        popupCustomComponent={{\\\\n          tooltipButton: ({ selectedData }: any) => (\\\\n            <ButtonList\\\\n              listOfButtons={[\\\\n                {\\\\n                  variant: 'button' as tVariant,\\\\n                  children: 'Edit',\\\\n                  // intent: 'table' as tIntent,\\\\n                  iconVariant: 'edit',\\\\n                  primary: true,\\\\n                  onClick: () => console.log('Edit', selectedData)\\\\n                },\\\\n                {\\\\n                  variant: 'button' as tVariant,\\\\n                  children: 'Delete',\\\\n                  iconVariant: 'icomoon-close',\\\\n                  // intent: 'table' as tIntent,\\\\n                  onClick: () => console.log('delete', selectedData)\\\\n                }\\\\n              ]}\\\\n            />\\\\n          )\\\\n        }}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const CircleMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n\\\\n  // create legend on the basis of markers data\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Route Mode')\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[20.5937, 78.9629]}\\\\n        zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        popupRef={infowindowStructure}\\\\n        settingConfig={settingConfig}\\\\n        onSettingChange={action('setting changed')}\\\\n        circle={object('circle', circleSampleData)}\\\\n        onEdit={action('Value Edited with new Vertex')}\\\\n        editPopUpComponent={({ map }: any) => (\\\\n          <EditPopUp\\\\n            onClick={() => {\\\\n              map.closePopup()\\\\n            }}\\\\n          />\\\\n        )}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\",\\\"locationsMap\\\":{}},},\\n  title: `${path}/Map`,\\n  decorators: [withKnobs],\\n  component: LeafletMap\\n}\\n\\n// The options which will be visible for tile-layer select in the story\\nconst tileOptions = {\\n  'open-street-maps': 'osm',\\n  'google-satellite': 'google_satellite',\\n  'google-basic': 'google_roadmap',\\n  'google-terrain': 'google_terrain',\\n  'google-hybrid': 'google_hybrid'\\n}\\n\\nconst themeOptions = {\\n  light: 'light',\\n  dark: 'dark'\\n}\\n\\nexport const BaseMap = addSourceDecorator(addSourceDecorator(() => {\\n  const settingConfig = Object.assign({}, Settings)\\n  // set permission false, so that map mode will be hidden\\n  settingConfig['Map Mode'].permission = false\\n\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[51.0, 19.0]}\\n        latLngBounds={[[37.09024, -95.712891]]}\\n        // zoom={number('Zoom', 4, { min: 1, max: 24 })}\\n        zoomControl={boolean('Zoom Controls', true)}\\n        locationSearch={boolean('Location Search Bar', true)}\\n        googleApiKey={GOOGLE_API_KEY}\\n        heremapsApiKey={HERE_MAPS_API_KEY}\\n        height={text('Height', '300px')}\\n        width={text('Width', '800px')}\\n        tiles={\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\n        }\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\n        poi={boolean('Points of interest', false)}\\n        settingConfig={settingConfig}\\n        popupRef={infowindowStructure}\\n        onSettingChange={action('setting changed')}\\n        rulerControl={boolean('rulerControl', true)}\\n        iconsRef={markerIcons}\\n        // center={array('center', ['37.7749', '-122.4194'])}\\n      />\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const MarkerMap = addSourceDecorator(addSourceDecorator(() => {\\n  const settingConfig = Object.assign({}, Settings)\\n\\n  // set permission true of markers if sending data,same like heatmap\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\n    option.permission = option.name === 'Markers'\\n    option.selected = option.name === 'Markers'\\n  })\\n  settingConfig['Map Mode'].permission = true\\n\\n  // create legend on the basis of markers data\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\n\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[37.09024, -95.712891]}\\n        latLngBounds={[[37.09024, -95.712891]]}\\n        // zoom={4}\\n        zoomControl\\n        locationSearch\\n        googleApiKey={GOOGLE_API_KEY}\\n        height='800px'\\n        width='800px'\\n        tiles='google_roadmap'\\n        markers={object('Marker Configuration', markerLayerObj)}\\n        focusMarkerId={text('Marker Id to focus/open', '')}\\n        iconsRef={markerIcons}\\n        popupRef={infowindowStructure}\\n        settingConfig={settingConfig}\\n        onSettingChange={action('setting changed')}\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\n      />\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const HeatMapAndMarker = addSourceDecorator(addSourceDecorator(() => {\\n  const settingConfig = Object.assign({}, Settings)\\n  // set permission true of heatmap if sending data,same like marker\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\n    option.permission = true // true for both option\\n    option.selected = option.name === 'Markers' // markers selected first\\n  })\\n  settingConfig['Map Mode'].permission = true\\n  // create legend on the basis of markers data\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\n\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[51.0, 19.0]}\\n        // zoom={4}\\n        zoomControl\\n        locationSearch\\n        googleApiKey={GOOGLE_API_KEY}\\n        height='800px'\\n        width='800px'\\n        tiles='google_roadmap'\\n        heatmap={object('Heatmap configuration', {\\n          permission: false,\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\n        })}\\n        settingConfig={settingConfig}\\n        markers={object('Marker Configuration', markerLayerObj)}\\n        iconsRef={markerIcons}\\n        popupRef={infowindowStructure}\\n        onSettingChange={action('setting changed')}\\n      />\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const HeatMap = addSourceDecorator(addSourceDecorator(() => {\\n  const settingConfig = Object.assign({}, Settings)\\n  // set permission true of heatmap if sending data,same like marker\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\n    option.permission = option.name === 'HeatMap'\\n    option.selected = option.name === 'HeatMap'\\n  })\\n  settingConfig['Map Mode'].permission = true\\n\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[51.0, 19.0]}\\n        // zoom={4}\\n        zoomControl\\n        locationSearch\\n        googleApiKey={GOOGLE_API_KEY}\\n        height='300px'\\n        width='800px'\\n        tiles='google_roadmap'\\n        heatmap={object('Heatmap configuration', {\\n          permission: true,\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\n        })}\\n        settingConfig={settingConfig}\\n        onSettingChange={action('setting changed')}\\n      />\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const TripsMap = addSourceDecorator(addSourceDecorator(() => {\\n  const settingConfig = Object.assign({}, Settings)\\n  // create legend on the basis of markers data\\n\\n  // set permission false, so that map mode will be hidden\\n  settingConfig['Map Mode'].permission = false\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[51.0, 19.0]}\\n        zoom={4}\\n        zoomControl\\n        locationSearch\\n        googleApiKey={GOOGLE_API_KEY}\\n        height='300px'\\n        width='800px'\\n        tiles='google_roadmap'\\n        trips={object('Trip Configuration', sampleTripData)}\\n        iconsRef={markerIcons}\\n        popupRef={infowindowStructure}\\n        onSettingChange={action('setting changed')}\\n      />\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const TrackingMap = addSourceDecorator(addSourceDecorator(() => {\\n  const settingConfig = Object.assign({}, Settings)\\n\\n  // set permission false, so that map mode will be hidden\\n  settingConfig['Map Mode'].permission = false\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[33.298959, -111.9724]}\\n        zoom={10}\\n        zoomControl\\n        locationSearch\\n        googleApiKey={GOOGLE_API_KEY}\\n        height='300px'\\n        width='800px'\\n        tiles='google_roadmap'\\n        tracking={object('Tracking Configuration', sampleTrackingData)}\\n        onSettingChange={action('setting changed')}\\n      />\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nconst GeocodingMapComponent = () => {\\n  const settingConfig = Object.assign({}, Settings)\\n  // set permission false, so that map mode will be hidden\\n  settingConfig['Map Mode'].permission = false\\n  // const [searchText, setSearchText] = React.useState(\\n  //   'Mumbai, Maharashtra, India'\\n  // )\\n  // const [position, setPosition] = React.useState([19.0759837, 72.8776559])\\n\\n  return (\\n    <LeafletMap\\n      id='leafletBaseMap'\\n      classes='baseMap customBaseMap'\\n      googleApiKey={GOOGLE_API_KEY}\\n      settingConfig={settingConfig}\\n      center={[51.0, 19.0]}\\n      // markers={object('Marker Configuration', markerLayerObj)}\\n      iconsRef={markerIcons}\\n      zoomControl\\n      locationSearch\\n      sendLocationOutside={action('sendLocationOutside ')}\\n      isShowMapTileLayer={boolean('isShowMapTileLayer', false)}\\n      geocoding={{\\n        permission: true,\\n\\n        /** If you are passing searchText, ensure to pass the position prop as well. */\\n        searchText: text('searchText', 'Mumbai'),\\n        // searchTextInput: searchText,\\n        position: [19.0759837, 72.8776559],\\n        isSave: boolean('isSave', true),\\n        onGeocodingSave: (e: any) => {\\n          window.alert(\\n            'Geocodes Saved ' + e.position?.[0] + ', ' + e.position?.[1]\\n          )\\n        },\\n        onGeocodingDragEnd: (pos: [number, number]) => {\\n          action('On Geocoding Drag End')(pos)\\n          // setPosition(pos)\\n          // setSearchText('India')\\n        }\\n      }}\\n      showLegendWrapper={boolean('showLegendWrapper', false)}\\n    />\\n  )\\n}\\nexport const GeocodingMap = addSourceDecorator(addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <GeocodingMapComponent />\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const PolygonMap = addSourceDecorator(addSourceDecorator(() => {\\n  const settingConfig = Object.assign({}, Settings)\\n  // set permission false, so that map mode will be hidden\\n  settingConfig['Map Mode'].permission = false\\n  // const [buttonType] = useState<string | null>(null)\\n  // console.log(buttonType)\\n\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[20.5937, 78.9629]}\\n        zoom={4}\\n        zoomControl={boolean('Zoom Controls', true)}\\n        locationSearch={boolean('Location Search Bar', true)}\\n        googleApiKey={GOOGLE_API_KEY}\\n        height={text('Height', '300px')}\\n        width={text('Width', '800px')}\\n        tiles={\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\n        }\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\n        poi={boolean('Points of interest', false)}\\n        settingConfig={settingConfig}\\n        polygon={object('polygon', polyGeoFenceSampleData)}\\n        popupRef={infowindowStructure}\\n        onSettingChange={action('setting changed')}\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\n        editPopUpComponent={({ map }: any) => (\\n          <EditPopUp\\n            onClick={() => {\\n              map.closePopup()\\n            }}\\n          />\\n        )}\\n        onEdit={action('Value Edited with new Vertex')}\\n        popupCustomComponent={{\\n          tooltipButton: ({ selectedData }: any) => (\\n            <ButtonList\\n              listOfButtons={[\\n                {\\n                  variant: 'button' as tVariant,\\n                  children: 'Edit',\\n                  // intent: 'table' as tIntent,\\n                  iconVariant: 'edit',\\n                  primary: true,\\n                  onClick: () => console.log('Edit', selectedData)\\n                },\\n                {\\n                  variant: 'button' as tVariant,\\n                  children: 'Delete',\\n                  iconVariant: 'icomoon-close',\\n                  // intent: 'table' as tIntent,\\n                  onClick: () => console.log('delete', selectedData)\\n                }\\n              ]}\\n            />\\n          )\\n        }}\\n      />\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const CircleMap = addSourceDecorator(addSourceDecorator(() => {\\n  const settingConfig = Object.assign({}, Settings)\\n\\n  // set permission false, so that map mode will be hidden\\n  settingConfig['Map Mode'].permission = false\\n\\n  // create legend on the basis of markers data\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Route Mode')\\n\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[20.5937, 78.9629]}\\n        zoom={4}\\n        zoomControl\\n        locationSearch\\n        googleApiKey={GOOGLE_API_KEY}\\n        height='300px'\\n        width='800px'\\n        tiles='google_roadmap'\\n        popupRef={infowindowStructure}\\n        settingConfig={settingConfig}\\n        onSettingChange={action('setting changed')}\\n        circle={object('circle', circleSampleData)}\\n        onEdit={action('Value Edited with new Vertex')}\\n        editPopUpComponent={({ map }: any) => (\\n          <EditPopUp\\n            onClick={() => {\\n              map.closePopup()\\n            }}\\n          />\\n        )}\\n      />\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\";\n// @ts-ignore\nvar __ADDS_MAP__ = {};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = \"/Map.stories.tsx\";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \n\n/* eslint-disable */\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\n// @ts-ignore\nvar addSourceDecorator = require(\"@storybook/source-loader/preview\").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = \"/Users/farhanansari/Code/ui-library/src/components/atoms/Map\";\n// @ts-ignore\nvar __STORY__ = \"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/farhanansari/Code/ui-library/src/components/atoms/Map\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"import { action } from '@storybook/addon-actions'\\\\nimport {\\\\n  boolean,\\\\n  object,\\\\n  select,\\\\n  text,\\\\n  withKnobs\\\\n} from '@storybook/addon-knobs'\\\\nimport React from 'react'\\\\nimport LeafletMap from '.'\\\\nimport { path } from '..'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport Settings from '../../atoms/SettingBox/data'\\\\nimport { ButtonList } from '../../molecules/ShowHideColumnPopup'\\\\nimport { tVariant } from '../Button'\\\\nimport { IOption } from '../SettingBox/interface'\\\\nimport {\\\\n  GOOGLE_API_KEY,\\\\n  HERE_MAPS_API_KEY\\\\n} from './constants/googleIntegration.constants'\\\\nimport circleSampleData from './dummyData/CircleSampleData.SampleData'\\\\nimport infowindowStructure from './dummyData/Infowindow.structure.sampleData'\\\\nimport markerIcons from './dummyData/MarkerIcon.sampleData'\\\\nimport markerLayerObj from './dummyData/Markers.sampleData'\\\\nimport polyGeoFenceSampleData from './dummyData/PolyGeoFence.SampleData'\\\\nimport sampleTrackingData from './dummyData/Presentation.Tracking.sampleData'\\\\nimport sampleTripData from './dummyData/Presentation.Trips.sampleData'\\\\nimport { updateSettingsWithLegends } from './helperMethods'\\\\nimport EditPopUp from './SubComponent/EditPopUp'\\\\nimport { tTheme, tTiles } from './types.d'\\\\n\\\\nexport default {\\\\n  title: `${path}/Map`,\\\\n  decorators: [withKnobs],\\\\n  component: LeafletMap\\\\n}\\\\n\\\\n// The options which will be visible for tile-layer select in the story\\\\nconst tileOptions = {\\\\n  'open-street-maps': 'osm',\\\\n  'google-satellite': 'google_satellite',\\\\n  'google-basic': 'google_roadmap',\\\\n  'google-terrain': 'google_terrain',\\\\n  'google-hybrid': 'google_hybrid'\\\\n}\\\\n\\\\nconst themeOptions = {\\\\n  light: 'light',\\\\n  dark: 'dark'\\\\n}\\\\n\\\\nexport const BaseMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        latLngBounds={[[37.09024, -95.712891]]}\\\\n        // zoom={number('Zoom', 4, { min: 1, max: 24 })}\\\\n        zoomControl={boolean('Zoom Controls', true)}\\\\n        locationSearch={boolean('Location Search Bar', true)}\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        heremapsApiKey={HERE_MAPS_API_KEY}\\\\n        height={text('Height', '300px')}\\\\n        width={text('Width', '800px')}\\\\n        tiles={\\\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\\\n        }\\\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\\\n        poi={boolean('Points of interest', false)}\\\\n        settingConfig={settingConfig}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n        rulerControl={boolean('rulerControl', true)}\\\\n        iconsRef={markerIcons}\\\\n        // center={array('center', ['37.7749', '-122.4194'])}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const MarkerMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n\\\\n  // set permission true of markers if sending data,same like heatmap\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\n    option.permission = option.name === 'Markers'\\\\n    option.selected = option.name === 'Markers'\\\\n  })\\\\n  settingConfig['Map Mode'].permission = true\\\\n\\\\n  // create legend on the basis of markers data\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[37.09024, -95.712891]}\\\\n        latLngBounds={[[37.09024, -95.712891]]}\\\\n        // zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='800px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\n        focusMarkerId={text('Marker Id to focus/open', '')}\\\\n        iconsRef={markerIcons}\\\\n        popupRef={infowindowStructure}\\\\n        settingConfig={settingConfig}\\\\n        onSettingChange={action('setting changed')}\\\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const HeatMapAndMarker = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission true of heatmap if sending data,same like marker\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\n    option.permission = true // true for both option\\\\n    option.selected = option.name === 'Markers' // markers selected first\\\\n  })\\\\n  settingConfig['Map Mode'].permission = true\\\\n  // create legend on the basis of markers data\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        // zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='800px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        heatmap={object('Heatmap configuration', {\\\\n          permission: false,\\\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\\\n        })}\\\\n        settingConfig={settingConfig}\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\n        iconsRef={markerIcons}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const HeatMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission true of heatmap if sending data,same like marker\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\n    option.permission = option.name === 'HeatMap'\\\\n    option.selected = option.name === 'HeatMap'\\\\n  })\\\\n  settingConfig['Map Mode'].permission = true\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        // zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        heatmap={object('Heatmap configuration', {\\\\n          permission: true,\\\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\\\n        })}\\\\n        settingConfig={settingConfig}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const TripsMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // create legend on the basis of markers data\\\\n\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        trips={object('Trip Configuration', sampleTripData)}\\\\n        iconsRef={markerIcons}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const TrackingMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[33.298959, -111.9724]}\\\\n        zoom={10}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        tracking={object('Tracking Configuration', sampleTrackingData)}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nconst GeocodingMapComponent = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  // const [searchText, setSearchText] = React.useState(\\\\n  //   'Mumbai, Maharashtra, India'\\\\n  // )\\\\n  // const [position, setPosition] = React.useState([19.0759837, 72.8776559])\\\\n\\\\n  return (\\\\n    <LeafletMap\\\\n      id='leafletBaseMap'\\\\n      classes='baseMap customBaseMap'\\\\n      googleApiKey={GOOGLE_API_KEY}\\\\n      settingConfig={settingConfig}\\\\n      center={[51.0, 19.0]}\\\\n      // markers={object('Marker Configuration', markerLayerObj)}\\\\n      iconsRef={markerIcons}\\\\n      zoomControl\\\\n      locationSearch\\\\n      sendLocationOutside={action('sendLocationOutside ')}\\\\n      isShowMapTileLayer={boolean('isShowMapTileLayer', false)}\\\\n      geocoding={{\\\\n        permission: true,\\\\n\\\\n        /** If you are passing searchText, ensure to pass the position prop as well. */\\\\n        searchText: text('searchText', 'Mumbai'),\\\\n        // searchTextInput: searchText,\\\\n        position: [19.0759837, 72.8776559],\\\\n        isSave: boolean('isSave', true),\\\\n        onGeocodingSave: (e: any) => {\\\\n          window.alert(\\\\n            'Geocodes Saved ' + e.position?.[0] + ', ' + e.position?.[1]\\\\n          )\\\\n        },\\\\n        onGeocodingDragEnd: (pos: [number, number]) => {\\\\n          action('On Geocoding Drag End')(pos)\\\\n          // setPosition(pos)\\\\n          // setSearchText('India')\\\\n        }\\\\n      }}\\\\n      showLegendWrapper={boolean('showLegendWrapper', false)}\\\\n    />\\\\n  )\\\\n}\\\\nexport const GeocodingMap = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <GeocodingMapComponent />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const PolygonMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  // const [buttonType] = useState<string | null>(null)\\\\n  // console.log(buttonType)\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[20.5937, 78.9629]}\\\\n        zoom={4}\\\\n        zoomControl={boolean('Zoom Controls', true)}\\\\n        locationSearch={boolean('Location Search Bar', true)}\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height={text('Height', '300px')}\\\\n        width={text('Width', '800px')}\\\\n        tiles={\\\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\\\n        }\\\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\\\n        poi={boolean('Points of interest', false)}\\\\n        settingConfig={settingConfig}\\\\n        polygon={object('polygon', polyGeoFenceSampleData)}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\\\n        editPopUpComponent={({ map }: any) => (\\\\n          <EditPopUp\\\\n            onClick={() => {\\\\n              map.closePopup()\\\\n            }}\\\\n          />\\\\n        )}\\\\n        onEdit={action('Value Edited with new Vertex')}\\\\n        popupCustomComponent={{\\\\n          tooltipButton: ({ selectedData }: any) => (\\\\n            <ButtonList\\\\n              listOfButtons={[\\\\n                {\\\\n                  variant: 'button' as tVariant,\\\\n                  children: 'Edit',\\\\n                  // intent: 'table' as tIntent,\\\\n                  iconVariant: 'edit',\\\\n                  primary: true,\\\\n                  onClick: () => console.log('Edit', selectedData)\\\\n                },\\\\n                {\\\\n                  variant: 'button' as tVariant,\\\\n                  children: 'Delete',\\\\n                  iconVariant: 'icomoon-close',\\\\n                  // intent: 'table' as tIntent,\\\\n                  onClick: () => console.log('delete', selectedData)\\\\n                }\\\\n              ]}\\\\n            />\\\\n          )\\\\n        }}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const CircleMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n\\\\n  // create legend on the basis of markers data\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Route Mode')\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[20.5937, 78.9629]}\\\\n        zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        popupRef={infowindowStructure}\\\\n        settingConfig={settingConfig}\\\\n        onSettingChange={action('setting changed')}\\\\n        circle={object('circle', circleSampleData)}\\\\n        onEdit={action('Value Edited with new Vertex')}\\\\n        editPopUpComponent={({ map }: any) => (\\\\n          <EditPopUp\\\\n            onClick={() => {\\\\n              map.closePopup()\\\\n            }}\\\\n          />\\\\n        )}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/Map.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\nimport { action } from '@storybook/addon-actions'\\nimport {\\n  boolean,\\n  object,\\n  select,\\n  text,\\n  withKnobs\\n} from '@storybook/addon-knobs'\\nimport React from 'react'\\nimport LeafletMap from '.'\\nimport { path } from '..'\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\nimport Settings from '../../atoms/SettingBox/data'\\nimport { ButtonList } from '../../molecules/ShowHideColumnPopup'\\nimport { tVariant } from '../Button'\\nimport { IOption } from '../SettingBox/interface'\\nimport {\\n  GOOGLE_API_KEY,\\n  HERE_MAPS_API_KEY\\n} from './constants/googleIntegration.constants'\\nimport circleSampleData from './dummyData/CircleSampleData.SampleData'\\nimport infowindowStructure from './dummyData/Infowindow.structure.sampleData'\\nimport markerIcons from './dummyData/MarkerIcon.sampleData'\\nimport markerLayerObj from './dummyData/Markers.sampleData'\\nimport polyGeoFenceSampleData from './dummyData/PolyGeoFence.SampleData'\\nimport sampleTrackingData from './dummyData/Presentation.Tracking.sampleData'\\nimport sampleTripData from './dummyData/Presentation.Trips.sampleData'\\nimport { updateSettingsWithLegends } from './helperMethods'\\nimport EditPopUp from './SubComponent/EditPopUp'\\nimport { tTheme, tTiles } from './types.d'\\n\\nexport default {parameters: {\\\"storySource\\\":{\\\"source\\\":\\\"import { action } from '@storybook/addon-actions'\\\\nimport {\\\\n  boolean,\\\\n  object,\\\\n  select,\\\\n  text,\\\\n  withKnobs\\\\n} from '@storybook/addon-knobs'\\\\nimport React from 'react'\\\\nimport LeafletMap from '.'\\\\nimport { path } from '..'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport Settings from '../../atoms/SettingBox/data'\\\\nimport { ButtonList } from '../../molecules/ShowHideColumnPopup'\\\\nimport { tVariant } from '../Button'\\\\nimport { IOption } from '../SettingBox/interface'\\\\nimport {\\\\n  GOOGLE_API_KEY,\\\\n  HERE_MAPS_API_KEY\\\\n} from './constants/googleIntegration.constants'\\\\nimport circleSampleData from './dummyData/CircleSampleData.SampleData'\\\\nimport infowindowStructure from './dummyData/Infowindow.structure.sampleData'\\\\nimport markerIcons from './dummyData/MarkerIcon.sampleData'\\\\nimport markerLayerObj from './dummyData/Markers.sampleData'\\\\nimport polyGeoFenceSampleData from './dummyData/PolyGeoFence.SampleData'\\\\nimport sampleTrackingData from './dummyData/Presentation.Tracking.sampleData'\\\\nimport sampleTripData from './dummyData/Presentation.Trips.sampleData'\\\\nimport { updateSettingsWithLegends } from './helperMethods'\\\\nimport EditPopUp from './SubComponent/EditPopUp'\\\\nimport { tTheme, tTiles } from './types.d'\\\\n\\\\nexport default {\\\\n  title: `${path}/Map`,\\\\n  decorators: [withKnobs],\\\\n  component: LeafletMap\\\\n}\\\\n\\\\n// The options which will be visible for tile-layer select in the story\\\\nconst tileOptions = {\\\\n  'open-street-maps': 'osm',\\\\n  'google-satellite': 'google_satellite',\\\\n  'google-basic': 'google_roadmap',\\\\n  'google-terrain': 'google_terrain',\\\\n  'google-hybrid': 'google_hybrid'\\\\n}\\\\n\\\\nconst themeOptions = {\\\\n  light: 'light',\\\\n  dark: 'dark'\\\\n}\\\\n\\\\nexport const BaseMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        latLngBounds={[[37.09024, -95.712891]]}\\\\n        // zoom={number('Zoom', 4, { min: 1, max: 24 })}\\\\n        zoomControl={boolean('Zoom Controls', true)}\\\\n        locationSearch={boolean('Location Search Bar', true)}\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        heremapsApiKey={HERE_MAPS_API_KEY}\\\\n        height={text('Height', '300px')}\\\\n        width={text('Width', '800px')}\\\\n        tiles={\\\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\\\n        }\\\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\\\n        poi={boolean('Points of interest', false)}\\\\n        settingConfig={settingConfig}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n        rulerControl={boolean('rulerControl', true)}\\\\n        iconsRef={markerIcons}\\\\n        // center={array('center', ['37.7749', '-122.4194'])}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const MarkerMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n\\\\n  // set permission true of markers if sending data,same like heatmap\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\n    option.permission = option.name === 'Markers'\\\\n    option.selected = option.name === 'Markers'\\\\n  })\\\\n  settingConfig['Map Mode'].permission = true\\\\n\\\\n  // create legend on the basis of markers data\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[37.09024, -95.712891]}\\\\n        latLngBounds={[[37.09024, -95.712891]]}\\\\n        // zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='800px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\n        focusMarkerId={text('Marker Id to focus/open', '')}\\\\n        iconsRef={markerIcons}\\\\n        popupRef={infowindowStructure}\\\\n        settingConfig={settingConfig}\\\\n        onSettingChange={action('setting changed')}\\\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const HeatMapAndMarker = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission true of heatmap if sending data,same like marker\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\n    option.permission = true // true for both option\\\\n    option.selected = option.name === 'Markers' // markers selected first\\\\n  })\\\\n  settingConfig['Map Mode'].permission = true\\\\n  // create legend on the basis of markers data\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        // zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='800px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        heatmap={object('Heatmap configuration', {\\\\n          permission: false,\\\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\\\n        })}\\\\n        settingConfig={settingConfig}\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\n        iconsRef={markerIcons}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const HeatMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission true of heatmap if sending data,same like marker\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\n    option.permission = option.name === 'HeatMap'\\\\n    option.selected = option.name === 'HeatMap'\\\\n  })\\\\n  settingConfig['Map Mode'].permission = true\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        // zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        heatmap={object('Heatmap configuration', {\\\\n          permission: true,\\\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\\\n        })}\\\\n        settingConfig={settingConfig}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const TripsMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // create legend on the basis of markers data\\\\n\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        trips={object('Trip Configuration', sampleTripData)}\\\\n        iconsRef={markerIcons}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const TrackingMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[33.298959, -111.9724]}\\\\n        zoom={10}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        tracking={object('Tracking Configuration', sampleTrackingData)}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nconst GeocodingMapComponent = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  // const [searchText, setSearchText] = React.useState(\\\\n  //   'Mumbai, Maharashtra, India'\\\\n  // )\\\\n  // const [position, setPosition] = React.useState([19.0759837, 72.8776559])\\\\n\\\\n  return (\\\\n    <LeafletMap\\\\n      id='leafletBaseMap'\\\\n      classes='baseMap customBaseMap'\\\\n      googleApiKey={GOOGLE_API_KEY}\\\\n      settingConfig={settingConfig}\\\\n      center={[51.0, 19.0]}\\\\n      // markers={object('Marker Configuration', markerLayerObj)}\\\\n      iconsRef={markerIcons}\\\\n      zoomControl\\\\n      locationSearch\\\\n      sendLocationOutside={action('sendLocationOutside ')}\\\\n      isShowMapTileLayer={boolean('isShowMapTileLayer', false)}\\\\n      geocoding={{\\\\n        permission: true,\\\\n\\\\n        /** If you are passing searchText, ensure to pass the position prop as well. */\\\\n        searchText: text('searchText', 'Mumbai'),\\\\n        // searchTextInput: searchText,\\\\n        position: [19.0759837, 72.8776559],\\\\n        isSave: boolean('isSave', true),\\\\n        onGeocodingSave: (e: any) => {\\\\n          window.alert(\\\\n            'Geocodes Saved ' + e.position?.[0] + ', ' + e.position?.[1]\\\\n          )\\\\n        },\\\\n        onGeocodingDragEnd: (pos: [number, number]) => {\\\\n          action('On Geocoding Drag End')(pos)\\\\n          // setPosition(pos)\\\\n          // setSearchText('India')\\\\n        }\\\\n      }}\\\\n      showLegendWrapper={boolean('showLegendWrapper', false)}\\\\n    />\\\\n  )\\\\n}\\\\nexport const GeocodingMap = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <GeocodingMapComponent />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const PolygonMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  // const [buttonType] = useState<string | null>(null)\\\\n  // console.log(buttonType)\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[20.5937, 78.9629]}\\\\n        zoom={4}\\\\n        zoomControl={boolean('Zoom Controls', true)}\\\\n        locationSearch={boolean('Location Search Bar', true)}\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height={text('Height', '300px')}\\\\n        width={text('Width', '800px')}\\\\n        tiles={\\\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\\\n        }\\\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\\\n        poi={boolean('Points of interest', false)}\\\\n        settingConfig={settingConfig}\\\\n        polygon={object('polygon', polyGeoFenceSampleData)}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\\\n        editPopUpComponent={({ map }: any) => (\\\\n          <EditPopUp\\\\n            onClick={() => {\\\\n              map.closePopup()\\\\n            }}\\\\n          />\\\\n        )}\\\\n        onEdit={action('Value Edited with new Vertex')}\\\\n        popupCustomComponent={{\\\\n          tooltipButton: ({ selectedData }: any) => (\\\\n            <ButtonList\\\\n              listOfButtons={[\\\\n                {\\\\n                  variant: 'button' as tVariant,\\\\n                  children: 'Edit',\\\\n                  // intent: 'table' as tIntent,\\\\n                  iconVariant: 'edit',\\\\n                  primary: true,\\\\n                  onClick: () => console.log('Edit', selectedData)\\\\n                },\\\\n                {\\\\n                  variant: 'button' as tVariant,\\\\n                  children: 'Delete',\\\\n                  iconVariant: 'icomoon-close',\\\\n                  // intent: 'table' as tIntent,\\\\n                  onClick: () => console.log('delete', selectedData)\\\\n                }\\\\n              ]}\\\\n            />\\\\n          )\\\\n        }}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const CircleMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n\\\\n  // create legend on the basis of markers data\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Route Mode')\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[20.5937, 78.9629]}\\\\n        zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        popupRef={infowindowStructure}\\\\n        settingConfig={settingConfig}\\\\n        onSettingChange={action('setting changed')}\\\\n        circle={object('circle', circleSampleData)}\\\\n        onEdit={action('Value Edited with new Vertex')}\\\\n        editPopUpComponent={({ map }: any) => (\\\\n          <EditPopUp\\\\n            onClick={() => {\\\\n              map.closePopup()\\\\n            }}\\\\n          />\\\\n        )}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\",\\\"locationsMap\\\":{}},},\\n  title: `${path}/Map`,\\n  decorators: [withKnobs],\\n  component: LeafletMap\\n}\\n\\n// The options which will be visible for tile-layer select in the story\\nconst tileOptions = {\\n  'open-street-maps': 'osm',\\n  'google-satellite': 'google_satellite',\\n  'google-basic': 'google_roadmap',\\n  'google-terrain': 'google_terrain',\\n  'google-hybrid': 'google_hybrid'\\n}\\n\\nconst themeOptions = {\\n  light: 'light',\\n  dark: 'dark'\\n}\\n\\nexport const BaseMap = addSourceDecorator(() => {\\n  const settingConfig = Object.assign({}, Settings)\\n  // set permission false, so that map mode will be hidden\\n  settingConfig['Map Mode'].permission = false\\n\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[51.0, 19.0]}\\n        latLngBounds={[[37.09024, -95.712891]]}\\n        // zoom={number('Zoom', 4, { min: 1, max: 24 })}\\n        zoomControl={boolean('Zoom Controls', true)}\\n        locationSearch={boolean('Location Search Bar', true)}\\n        googleApiKey={GOOGLE_API_KEY}\\n        heremapsApiKey={HERE_MAPS_API_KEY}\\n        height={text('Height', '300px')}\\n        width={text('Width', '800px')}\\n        tiles={\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\n        }\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\n        poi={boolean('Points of interest', false)}\\n        settingConfig={settingConfig}\\n        popupRef={infowindowStructure}\\n        onSettingChange={action('setting changed')}\\n        rulerControl={boolean('rulerControl', true)}\\n        iconsRef={markerIcons}\\n        // center={array('center', ['37.7749', '-122.4194'])}\\n      />\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nexport const MarkerMap = addSourceDecorator(() => {\\n  const settingConfig = Object.assign({}, Settings)\\n\\n  // set permission true of markers if sending data,same like heatmap\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\n    option.permission = option.name === 'Markers'\\n    option.selected = option.name === 'Markers'\\n  })\\n  settingConfig['Map Mode'].permission = true\\n\\n  // create legend on the basis of markers data\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\n\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[37.09024, -95.712891]}\\n        latLngBounds={[[37.09024, -95.712891]]}\\n        // zoom={4}\\n        zoomControl\\n        locationSearch\\n        googleApiKey={GOOGLE_API_KEY}\\n        height='800px'\\n        width='800px'\\n        tiles='google_roadmap'\\n        markers={object('Marker Configuration', markerLayerObj)}\\n        focusMarkerId={text('Marker Id to focus/open', '')}\\n        iconsRef={markerIcons}\\n        popupRef={infowindowStructure}\\n        settingConfig={settingConfig}\\n        onSettingChange={action('setting changed')}\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\n      />\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nexport const HeatMapAndMarker = addSourceDecorator(() => {\\n  const settingConfig = Object.assign({}, Settings)\\n  // set permission true of heatmap if sending data,same like marker\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\n    option.permission = true // true for both option\\n    option.selected = option.name === 'Markers' // markers selected first\\n  })\\n  settingConfig['Map Mode'].permission = true\\n  // create legend on the basis of markers data\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\n\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[51.0, 19.0]}\\n        // zoom={4}\\n        zoomControl\\n        locationSearch\\n        googleApiKey={GOOGLE_API_KEY}\\n        height='800px'\\n        width='800px'\\n        tiles='google_roadmap'\\n        heatmap={object('Heatmap configuration', {\\n          permission: false,\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\n        })}\\n        settingConfig={settingConfig}\\n        markers={object('Marker Configuration', markerLayerObj)}\\n        iconsRef={markerIcons}\\n        popupRef={infowindowStructure}\\n        onSettingChange={action('setting changed')}\\n      />\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nexport const HeatMap = addSourceDecorator(() => {\\n  const settingConfig = Object.assign({}, Settings)\\n  // set permission true of heatmap if sending data,same like marker\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\n    option.permission = option.name === 'HeatMap'\\n    option.selected = option.name === 'HeatMap'\\n  })\\n  settingConfig['Map Mode'].permission = true\\n\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[51.0, 19.0]}\\n        // zoom={4}\\n        zoomControl\\n        locationSearch\\n        googleApiKey={GOOGLE_API_KEY}\\n        height='300px'\\n        width='800px'\\n        tiles='google_roadmap'\\n        heatmap={object('Heatmap configuration', {\\n          permission: true,\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\n        })}\\n        settingConfig={settingConfig}\\n        onSettingChange={action('setting changed')}\\n      />\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nexport const TripsMap = addSourceDecorator(() => {\\n  const settingConfig = Object.assign({}, Settings)\\n  // create legend on the basis of markers data\\n\\n  // set permission false, so that map mode will be hidden\\n  settingConfig['Map Mode'].permission = false\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[51.0, 19.0]}\\n        zoom={4}\\n        zoomControl\\n        locationSearch\\n        googleApiKey={GOOGLE_API_KEY}\\n        height='300px'\\n        width='800px'\\n        tiles='google_roadmap'\\n        trips={object('Trip Configuration', sampleTripData)}\\n        iconsRef={markerIcons}\\n        popupRef={infowindowStructure}\\n        onSettingChange={action('setting changed')}\\n      />\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nexport const TrackingMap = addSourceDecorator(() => {\\n  const settingConfig = Object.assign({}, Settings)\\n\\n  // set permission false, so that map mode will be hidden\\n  settingConfig['Map Mode'].permission = false\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[33.298959, -111.9724]}\\n        zoom={10}\\n        zoomControl\\n        locationSearch\\n        googleApiKey={GOOGLE_API_KEY}\\n        height='300px'\\n        width='800px'\\n        tiles='google_roadmap'\\n        tracking={object('Tracking Configuration', sampleTrackingData)}\\n        onSettingChange={action('setting changed')}\\n      />\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nconst GeocodingMapComponent = () => {\\n  const settingConfig = Object.assign({}, Settings)\\n  // set permission false, so that map mode will be hidden\\n  settingConfig['Map Mode'].permission = false\\n  // const [searchText, setSearchText] = React.useState(\\n  //   'Mumbai, Maharashtra, India'\\n  // )\\n  // const [position, setPosition] = React.useState([19.0759837, 72.8776559])\\n\\n  return (\\n    <LeafletMap\\n      id='leafletBaseMap'\\n      classes='baseMap customBaseMap'\\n      googleApiKey={GOOGLE_API_KEY}\\n      settingConfig={settingConfig}\\n      center={[51.0, 19.0]}\\n      // markers={object('Marker Configuration', markerLayerObj)}\\n      iconsRef={markerIcons}\\n      zoomControl\\n      locationSearch\\n      sendLocationOutside={action('sendLocationOutside ')}\\n      isShowMapTileLayer={boolean('isShowMapTileLayer', false)}\\n      geocoding={{\\n        permission: true,\\n\\n        /** If you are passing searchText, ensure to pass the position prop as well. */\\n        searchText: text('searchText', 'Mumbai'),\\n        // searchTextInput: searchText,\\n        position: [19.0759837, 72.8776559],\\n        isSave: boolean('isSave', true),\\n        onGeocodingSave: (e: any) => {\\n          window.alert(\\n            'Geocodes Saved ' + e.position?.[0] + ', ' + e.position?.[1]\\n          )\\n        },\\n        onGeocodingDragEnd: (pos: [number, number]) => {\\n          action('On Geocoding Drag End')(pos)\\n          // setPosition(pos)\\n          // setSearchText('India')\\n        }\\n      }}\\n      showLegendWrapper={boolean('showLegendWrapper', false)}\\n    />\\n  )\\n}\\nexport const GeocodingMap = addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <GeocodingMapComponent />\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nexport const PolygonMap = addSourceDecorator(() => {\\n  const settingConfig = Object.assign({}, Settings)\\n  // set permission false, so that map mode will be hidden\\n  settingConfig['Map Mode'].permission = false\\n  // const [buttonType] = useState<string | null>(null)\\n  // console.log(buttonType)\\n\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[20.5937, 78.9629]}\\n        zoom={4}\\n        zoomControl={boolean('Zoom Controls', true)}\\n        locationSearch={boolean('Location Search Bar', true)}\\n        googleApiKey={GOOGLE_API_KEY}\\n        height={text('Height', '300px')}\\n        width={text('Width', '800px')}\\n        tiles={\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\n        }\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\n        poi={boolean('Points of interest', false)}\\n        settingConfig={settingConfig}\\n        polygon={object('polygon', polyGeoFenceSampleData)}\\n        popupRef={infowindowStructure}\\n        onSettingChange={action('setting changed')}\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\n        editPopUpComponent={({ map }: any) => (\\n          <EditPopUp\\n            onClick={() => {\\n              map.closePopup()\\n            }}\\n          />\\n        )}\\n        onEdit={action('Value Edited with new Vertex')}\\n        popupCustomComponent={{\\n          tooltipButton: ({ selectedData }: any) => (\\n            <ButtonList\\n              listOfButtons={[\\n                {\\n                  variant: 'button' as tVariant,\\n                  children: 'Edit',\\n                  // intent: 'table' as tIntent,\\n                  iconVariant: 'edit',\\n                  primary: true,\\n                  onClick: () => console.log('Edit', selectedData)\\n                },\\n                {\\n                  variant: 'button' as tVariant,\\n                  children: 'Delete',\\n                  iconVariant: 'icomoon-close',\\n                  // intent: 'table' as tIntent,\\n                  onClick: () => console.log('delete', selectedData)\\n                }\\n              ]}\\n            />\\n          )\\n        }}\\n      />\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nexport const CircleMap = addSourceDecorator(() => {\\n  const settingConfig = Object.assign({}, Settings)\\n\\n  // set permission false, so that map mode will be hidden\\n  settingConfig['Map Mode'].permission = false\\n\\n  // create legend on the basis of markers data\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Route Mode')\\n\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[20.5937, 78.9629]}\\n        zoom={4}\\n        zoomControl\\n        locationSearch\\n        googleApiKey={GOOGLE_API_KEY}\\n        height='300px'\\n        width='800px'\\n        tiles='google_roadmap'\\n        popupRef={infowindowStructure}\\n        settingConfig={settingConfig}\\n        onSettingChange={action('setting changed')}\\n        circle={object('circle', circleSampleData)}\\n        onEdit={action('Value Edited with new Vertex')}\\n        editPopUpComponent={({ map }: any) => (\\n          <EditPopUp\\n            onClick={() => {\\n              map.closePopup()\\n            }}\\n          />\\n        )}\\n      />\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\";\n// @ts-ignore\nvar __ADDS_MAP__ = {};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = \"/Map.stories.tsx\";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \n\n/* eslint-disable */\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\n// @ts-ignore\nvar addSourceDecorator = require(\"@storybook/source-loader/preview\").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = \"/Users/farhanansari/Code/ui-library/src/components/atoms/Map\";\n// @ts-ignore\nvar __STORY__ = \"import { action } from '@storybook/addon-actions'\\nimport {\\n  boolean,\\n  object,\\n  select,\\n  text,\\n  withKnobs\\n} from '@storybook/addon-knobs'\\nimport React from 'react'\\nimport LeafletMap from '.'\\nimport { path } from '..'\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\nimport Settings from '../../atoms/SettingBox/data'\\nimport { ButtonList } from '../../molecules/ShowHideColumnPopup'\\nimport { tVariant } from '../Button'\\nimport { IOption } from '../SettingBox/interface'\\nimport {\\n  GOOGLE_API_KEY,\\n  HERE_MAPS_API_KEY\\n} from './constants/googleIntegration.constants'\\nimport circleSampleData from './dummyData/CircleSampleData.SampleData'\\nimport infowindowStructure from './dummyData/Infowindow.structure.sampleData'\\nimport markerIcons from './dummyData/MarkerIcon.sampleData'\\nimport markerLayerObj from './dummyData/Markers.sampleData'\\nimport polyGeoFenceSampleData from './dummyData/PolyGeoFence.SampleData'\\nimport sampleTrackingData from './dummyData/Presentation.Tracking.sampleData'\\nimport sampleTripData from './dummyData/Presentation.Trips.sampleData'\\nimport { updateSettingsWithLegends } from './helperMethods'\\nimport EditPopUp from './SubComponent/EditPopUp'\\nimport { tTheme, tTiles } from './types.d'\\n\\nexport default {\\n  title: `${path}/Map`,\\n  decorators: [withKnobs],\\n  component: LeafletMap\\n}\\n\\n// The options which will be visible for tile-layer select in the story\\nconst tileOptions = {\\n  'open-street-maps': 'osm',\\n  'google-satellite': 'google_satellite',\\n  'google-basic': 'google_roadmap',\\n  'google-terrain': 'google_terrain',\\n  'google-hybrid': 'google_hybrid'\\n}\\n\\nconst themeOptions = {\\n  light: 'light',\\n  dark: 'dark'\\n}\\n\\nexport const BaseMap = () => {\\n  const settingConfig = Object.assign({}, Settings)\\n  // set permission false, so that map mode will be hidden\\n  settingConfig['Map Mode'].permission = false\\n\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[51.0, 19.0]}\\n        latLngBounds={[[37.09024, -95.712891]]}\\n        // zoom={number('Zoom', 4, { min: 1, max: 24 })}\\n        zoomControl={boolean('Zoom Controls', true)}\\n        locationSearch={boolean('Location Search Bar', true)}\\n        googleApiKey={GOOGLE_API_KEY}\\n        heremapsApiKey={HERE_MAPS_API_KEY}\\n        height={text('Height', '300px')}\\n        width={text('Width', '800px')}\\n        tiles={\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\n        }\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\n        poi={boolean('Points of interest', false)}\\n        settingConfig={settingConfig}\\n        popupRef={infowindowStructure}\\n        onSettingChange={action('setting changed')}\\n        rulerControl={boolean('rulerControl', true)}\\n        iconsRef={markerIcons}\\n        // center={array('center', ['37.7749', '-122.4194'])}\\n      />\\n    </ThemeWrapper>\\n  )\\n}\\n\\nexport const MarkerMap = () => {\\n  const settingConfig = Object.assign({}, Settings)\\n\\n  // set permission true of markers if sending data,same like heatmap\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\n    option.permission = option.name === 'Markers'\\n    option.selected = option.name === 'Markers'\\n  })\\n  settingConfig['Map Mode'].permission = true\\n\\n  // create legend on the basis of markers data\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\n\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[37.09024, -95.712891]}\\n        latLngBounds={[[37.09024, -95.712891]]}\\n        // zoom={4}\\n        zoomControl\\n        locationSearch\\n        googleApiKey={GOOGLE_API_KEY}\\n        height='800px'\\n        width='800px'\\n        tiles='google_roadmap'\\n        markers={object('Marker Configuration', markerLayerObj)}\\n        focusMarkerId={text('Marker Id to focus/open', '')}\\n        iconsRef={markerIcons}\\n        popupRef={infowindowStructure}\\n        settingConfig={settingConfig}\\n        onSettingChange={action('setting changed')}\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\n      />\\n    </ThemeWrapper>\\n  )\\n}\\n\\nexport const HeatMapAndMarker = () => {\\n  const settingConfig = Object.assign({}, Settings)\\n  // set permission true of heatmap if sending data,same like marker\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\n    option.permission = true // true for both option\\n    option.selected = option.name === 'Markers' // markers selected first\\n  })\\n  settingConfig['Map Mode'].permission = true\\n  // create legend on the basis of markers data\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\n\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[51.0, 19.0]}\\n        // zoom={4}\\n        zoomControl\\n        locationSearch\\n        googleApiKey={GOOGLE_API_KEY}\\n        height='800px'\\n        width='800px'\\n        tiles='google_roadmap'\\n        heatmap={object('Heatmap configuration', {\\n          permission: false,\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\n        })}\\n        settingConfig={settingConfig}\\n        markers={object('Marker Configuration', markerLayerObj)}\\n        iconsRef={markerIcons}\\n        popupRef={infowindowStructure}\\n        onSettingChange={action('setting changed')}\\n      />\\n    </ThemeWrapper>\\n  )\\n}\\n\\nexport const HeatMap = () => {\\n  const settingConfig = Object.assign({}, Settings)\\n  // set permission true of heatmap if sending data,same like marker\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\n    option.permission = option.name === 'HeatMap'\\n    option.selected = option.name === 'HeatMap'\\n  })\\n  settingConfig['Map Mode'].permission = true\\n\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[51.0, 19.0]}\\n        // zoom={4}\\n        zoomControl\\n        locationSearch\\n        googleApiKey={GOOGLE_API_KEY}\\n        height='300px'\\n        width='800px'\\n        tiles='google_roadmap'\\n        heatmap={object('Heatmap configuration', {\\n          permission: true,\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\n        })}\\n        settingConfig={settingConfig}\\n        onSettingChange={action('setting changed')}\\n      />\\n    </ThemeWrapper>\\n  )\\n}\\n\\nexport const TripsMap = () => {\\n  const settingConfig = Object.assign({}, Settings)\\n  // create legend on the basis of markers data\\n\\n  // set permission false, so that map mode will be hidden\\n  settingConfig['Map Mode'].permission = false\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[51.0, 19.0]}\\n        zoom={4}\\n        zoomControl\\n        locationSearch\\n        googleApiKey={GOOGLE_API_KEY}\\n        height='300px'\\n        width='800px'\\n        tiles='google_roadmap'\\n        trips={object('Trip Configuration', sampleTripData)}\\n        iconsRef={markerIcons}\\n        popupRef={infowindowStructure}\\n        onSettingChange={action('setting changed')}\\n      />\\n    </ThemeWrapper>\\n  )\\n}\\n\\nexport const TrackingMap = () => {\\n  const settingConfig = Object.assign({}, Settings)\\n\\n  // set permission false, so that map mode will be hidden\\n  settingConfig['Map Mode'].permission = false\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[33.298959, -111.9724]}\\n        zoom={10}\\n        zoomControl\\n        locationSearch\\n        googleApiKey={GOOGLE_API_KEY}\\n        height='300px'\\n        width='800px'\\n        tiles='google_roadmap'\\n        tracking={object('Tracking Configuration', sampleTrackingData)}\\n        onSettingChange={action('setting changed')}\\n      />\\n    </ThemeWrapper>\\n  )\\n}\\n\\nconst GeocodingMapComponent = () => {\\n  const settingConfig = Object.assign({}, Settings)\\n  // set permission false, so that map mode will be hidden\\n  settingConfig['Map Mode'].permission = false\\n  // const [searchText, setSearchText] = React.useState(\\n  //   'Mumbai, Maharashtra, India'\\n  // )\\n  // const [position, setPosition] = React.useState([19.0759837, 72.8776559])\\n\\n  return (\\n    <LeafletMap\\n      id='leafletBaseMap'\\n      classes='baseMap customBaseMap'\\n      googleApiKey={GOOGLE_API_KEY}\\n      settingConfig={settingConfig}\\n      center={[51.0, 19.0]}\\n      // markers={object('Marker Configuration', markerLayerObj)}\\n      iconsRef={markerIcons}\\n      zoomControl\\n      locationSearch\\n      sendLocationOutside={action('sendLocationOutside ')}\\n      isShowMapTileLayer={boolean('isShowMapTileLayer', false)}\\n      geocoding={{\\n        permission: true,\\n\\n        /** If you are passing searchText, ensure to pass the position prop as well. */\\n        searchText: text('searchText', 'Mumbai'),\\n        // searchTextInput: searchText,\\n        position: [19.0759837, 72.8776559],\\n        isSave: boolean('isSave', true),\\n        onGeocodingSave: (e: any) => {\\n          window.alert(\\n            'Geocodes Saved ' + e.position?.[0] + ', ' + e.position?.[1]\\n          )\\n        },\\n        onGeocodingDragEnd: (pos: [number, number]) => {\\n          action('On Geocoding Drag End')(pos)\\n          // setPosition(pos)\\n          // setSearchText('India')\\n        }\\n      }}\\n      showLegendWrapper={boolean('showLegendWrapper', false)}\\n    />\\n  )\\n}\\nexport const GeocodingMap = () => {\\n  return (\\n    <ThemeWrapper>\\n      <GeocodingMapComponent />\\n    </ThemeWrapper>\\n  )\\n}\\n\\nexport const PolygonMap = () => {\\n  const settingConfig = Object.assign({}, Settings)\\n  // set permission false, so that map mode will be hidden\\n  settingConfig['Map Mode'].permission = false\\n  // const [buttonType] = useState<string | null>(null)\\n  // console.log(buttonType)\\n\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[20.5937, 78.9629]}\\n        zoom={4}\\n        zoomControl={boolean('Zoom Controls', true)}\\n        locationSearch={boolean('Location Search Bar', true)}\\n        googleApiKey={GOOGLE_API_KEY}\\n        height={text('Height', '300px')}\\n        width={text('Width', '800px')}\\n        tiles={\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\n        }\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\n        poi={boolean('Points of interest', false)}\\n        settingConfig={settingConfig}\\n        polygon={object('polygon', polyGeoFenceSampleData)}\\n        popupRef={infowindowStructure}\\n        onSettingChange={action('setting changed')}\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\n        editPopUpComponent={({ map }: any) => (\\n          <EditPopUp\\n            onClick={() => {\\n              map.closePopup()\\n            }}\\n          />\\n        )}\\n        onEdit={action('Value Edited with new Vertex')}\\n        popupCustomComponent={{\\n          tooltipButton: ({ selectedData }: any) => (\\n            <ButtonList\\n              listOfButtons={[\\n                {\\n                  variant: 'button' as tVariant,\\n                  children: 'Edit',\\n                  // intent: 'table' as tIntent,\\n                  iconVariant: 'edit',\\n                  primary: true,\\n                  onClick: () => console.log('Edit', selectedData)\\n                },\\n                {\\n                  variant: 'button' as tVariant,\\n                  children: 'Delete',\\n                  iconVariant: 'icomoon-close',\\n                  // intent: 'table' as tIntent,\\n                  onClick: () => console.log('delete', selectedData)\\n                }\\n              ]}\\n            />\\n          )\\n        }}\\n      />\\n    </ThemeWrapper>\\n  )\\n}\\n\\nexport const CircleMap = () => {\\n  const settingConfig = Object.assign({}, Settings)\\n\\n  // set permission false, so that map mode will be hidden\\n  settingConfig['Map Mode'].permission = false\\n\\n  // create legend on the basis of markers data\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Route Mode')\\n\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[20.5937, 78.9629]}\\n        zoom={4}\\n        zoomControl\\n        locationSearch\\n        googleApiKey={GOOGLE_API_KEY}\\n        height='300px'\\n        width='800px'\\n        tiles='google_roadmap'\\n        popupRef={infowindowStructure}\\n        settingConfig={settingConfig}\\n        onSettingChange={action('setting changed')}\\n        circle={object('circle', circleSampleData)}\\n        onEdit={action('Value Edited with new Vertex')}\\n        editPopUpComponent={({ map }: any) => (\\n          <EditPopUp\\n            onClick={() => {\\n              map.closePopup()\\n            }}\\n          />\\n        )}\\n      />\\n    </ThemeWrapper>\\n  )\\n}\\n\";\n// @ts-ignore\nvar __ADDS_MAP__ = {};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = \"/Map.stories.tsx\";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \nimport { action } from '@storybook/addon-actions'\nimport {\n  boolean,\n  object,\n  select,\n  text,\n  withKnobs\n} from '@storybook/addon-knobs'\nimport React from 'react'\nimport LeafletMap from '.'\nimport { path } from '..'\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\nimport Settings from '../../atoms/SettingBox/data'\nimport { ButtonList } from '../../molecules/ShowHideColumnPopup'\nimport { tVariant } from '../Button'\nimport { IOption } from '../SettingBox/interface'\nimport {\n  GOOGLE_API_KEY,\n  HERE_MAPS_API_KEY\n} from './constants/googleIntegration.constants'\nimport circleSampleData from './dummyData/CircleSampleData.SampleData'\nimport infowindowStructure from './dummyData/Infowindow.structure.sampleData'\nimport markerIcons from './dummyData/MarkerIcon.sampleData'\nimport markerLayerObj from './dummyData/Markers.sampleData'\nimport polyGeoFenceSampleData from './dummyData/PolyGeoFence.SampleData'\nimport sampleTrackingData from './dummyData/Presentation.Tracking.sampleData'\nimport sampleTripData from './dummyData/Presentation.Trips.sampleData'\nimport { updateSettingsWithLegends } from './helperMethods'\nimport EditPopUp from './SubComponent/EditPopUp'\nimport { tTheme, tTiles } from './types.d'\n\nexport default {parameters: {\"storySource\":{\"source\":\"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/farhanansari/Code/ui-library/src/components/atoms/Map\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"\\\\n\\\\n// @ts-nocheck\\\\n// @ts-ignore\\\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\\\n// @ts-ignore\\\\nvar addSourceDecorator = require(\\\\\\\"@storybook/source-loader/preview\\\\\\\").addSource;\\\\n// @ts-ignore\\\\nvar __SOURCE_PREFIX__ = \\\\\\\"/Users/farhanansari/Code/ui-library/src/components/atoms/Map\\\\\\\";\\\\n// @ts-ignore\\\\nvar __STORY__ = \\\\\\\"import { action } from '@storybook/addon-actions'\\\\\\\\nimport {\\\\\\\\n  boolean,\\\\\\\\n  object,\\\\\\\\n  select,\\\\\\\\n  text,\\\\\\\\n  withKnobs\\\\\\\\n} from '@storybook/addon-knobs'\\\\\\\\nimport React from 'react'\\\\\\\\nimport LeafletMap from '.'\\\\\\\\nimport { path } from '..'\\\\\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\\\\\nimport Settings from '../../atoms/SettingBox/data'\\\\\\\\nimport { ButtonList } from '../../molecules/ShowHideColumnPopup'\\\\\\\\nimport { tVariant } from '../Button'\\\\\\\\nimport { IOption } from '../SettingBox/interface'\\\\\\\\nimport {\\\\\\\\n  GOOGLE_API_KEY,\\\\\\\\n  HERE_MAPS_API_KEY\\\\\\\\n} from './constants/googleIntegration.constants'\\\\\\\\nimport circleSampleData from './dummyData/CircleSampleData.SampleData'\\\\\\\\nimport infowindowStructure from './dummyData/Infowindow.structure.sampleData'\\\\\\\\nimport markerIcons from './dummyData/MarkerIcon.sampleData'\\\\\\\\nimport markerLayerObj from './dummyData/Markers.sampleData'\\\\\\\\nimport polyGeoFenceSampleData from './dummyData/PolyGeoFence.SampleData'\\\\\\\\nimport sampleTrackingData from './dummyData/Presentation.Tracking.sampleData'\\\\\\\\nimport sampleTripData from './dummyData/Presentation.Trips.sampleData'\\\\\\\\nimport { updateSettingsWithLegends } from './helperMethods'\\\\\\\\nimport EditPopUp from './SubComponent/EditPopUp'\\\\\\\\nimport { tTheme, tTiles } from './types.d'\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/Map`,\\\\\\\\n  decorators: [withKnobs],\\\\\\\\n  component: LeafletMap\\\\\\\\n}\\\\\\\\n\\\\\\\\n// The options which will be visible for tile-layer select in the story\\\\\\\\nconst tileOptions = {\\\\\\\\n  'open-street-maps': 'osm',\\\\\\\\n  'google-satellite': 'google_satellite',\\\\\\\\n  'google-basic': 'google_roadmap',\\\\\\\\n  'google-terrain': 'google_terrain',\\\\\\\\n  'google-hybrid': 'google_hybrid'\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst themeOptions = {\\\\\\\\n  light: 'light',\\\\\\\\n  dark: 'dark'\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const BaseMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[51.0, 19.0]}\\\\\\\\n        latLngBounds={[[37.09024, -95.712891]]}\\\\\\\\n        // zoom={number('Zoom', 4, { min: 1, max: 24 })}\\\\\\\\n        zoomControl={boolean('Zoom Controls', true)}\\\\\\\\n        locationSearch={boolean('Location Search Bar', true)}\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        heremapsApiKey={HERE_MAPS_API_KEY}\\\\\\\\n        height={text('Height', '300px')}\\\\\\\\n        width={text('Width', '800px')}\\\\\\\\n        tiles={\\\\\\\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\\\\\\\n        }\\\\\\\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\\\\\\\n        poi={boolean('Points of interest', false)}\\\\\\\\n        settingConfig={settingConfig}\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n        rulerControl={boolean('rulerControl', true)}\\\\\\\\n        iconsRef={markerIcons}\\\\\\\\n        // center={array('center', ['37.7749', '-122.4194'])}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const MarkerMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n\\\\\\\\n  // set permission true of markers if sending data,same like heatmap\\\\\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\\\\\n    option.permission = option.name === 'Markers'\\\\\\\\n    option.selected = option.name === 'Markers'\\\\\\\\n  })\\\\\\\\n  settingConfig['Map Mode'].permission = true\\\\\\\\n\\\\\\\\n  // create legend on the basis of markers data\\\\\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[37.09024, -95.712891]}\\\\\\\\n        latLngBounds={[[37.09024, -95.712891]]}\\\\\\\\n        // zoom={4}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='800px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\\\\\n        focusMarkerId={text('Marker Id to focus/open', '')}\\\\\\\\n        iconsRef={markerIcons}\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        settingConfig={settingConfig}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const HeatMapAndMarker = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // set permission true of heatmap if sending data,same like marker\\\\\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\\\\\n    option.permission = true // true for both option\\\\\\\\n    option.selected = option.name === 'Markers' // markers selected first\\\\\\\\n  })\\\\\\\\n  settingConfig['Map Mode'].permission = true\\\\\\\\n  // create legend on the basis of markers data\\\\\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[51.0, 19.0]}\\\\\\\\n        // zoom={4}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='800px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        heatmap={object('Heatmap configuration', {\\\\\\\\n          permission: false,\\\\\\\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\\\\\\\n        })}\\\\\\\\n        settingConfig={settingConfig}\\\\\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\\\\\n        iconsRef={markerIcons}\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const HeatMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // set permission true of heatmap if sending data,same like marker\\\\\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\\\\\n    option.permission = option.name === 'HeatMap'\\\\\\\\n    option.selected = option.name === 'HeatMap'\\\\\\\\n  })\\\\\\\\n  settingConfig['Map Mode'].permission = true\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[51.0, 19.0]}\\\\\\\\n        // zoom={4}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='300px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        heatmap={object('Heatmap configuration', {\\\\\\\\n          permission: true,\\\\\\\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\\\\\\\n        })}\\\\\\\\n        settingConfig={settingConfig}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const TripsMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // create legend on the basis of markers data\\\\\\\\n\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[51.0, 19.0]}\\\\\\\\n        zoom={4}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='300px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        trips={object('Trip Configuration', sampleTripData)}\\\\\\\\n        iconsRef={markerIcons}\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const TrackingMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[33.298959, -111.9724]}\\\\\\\\n        zoom={10}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='300px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        tracking={object('Tracking Configuration', sampleTrackingData)}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst GeocodingMapComponent = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n  // const [searchText, setSearchText] = React.useState(\\\\\\\\n  //   'Mumbai, Maharashtra, India'\\\\\\\\n  // )\\\\\\\\n  // const [position, setPosition] = React.useState([19.0759837, 72.8776559])\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <LeafletMap\\\\\\\\n      id='leafletBaseMap'\\\\\\\\n      classes='baseMap customBaseMap'\\\\\\\\n      googleApiKey={GOOGLE_API_KEY}\\\\\\\\n      settingConfig={settingConfig}\\\\\\\\n      center={[51.0, 19.0]}\\\\\\\\n      // markers={object('Marker Configuration', markerLayerObj)}\\\\\\\\n      iconsRef={markerIcons}\\\\\\\\n      zoomControl\\\\\\\\n      locationSearch\\\\\\\\n      sendLocationOutside={action('sendLocationOutside ')}\\\\\\\\n      isShowMapTileLayer={boolean('isShowMapTileLayer', false)}\\\\\\\\n      geocoding={{\\\\\\\\n        permission: true,\\\\\\\\n\\\\\\\\n        /** If you are passing searchText, ensure to pass the position prop as well. */\\\\\\\\n        searchText: text('searchText', 'Mumbai'),\\\\\\\\n        // searchTextInput: searchText,\\\\\\\\n        position: [19.0759837, 72.8776559],\\\\\\\\n        isSave: boolean('isSave', true),\\\\\\\\n        onGeocodingSave: (e: any) => {\\\\\\\\n          window.alert(\\\\\\\\n            'Geocodes Saved ' + e.position?.[0] + ', ' + e.position?.[1]\\\\\\\\n          )\\\\\\\\n        },\\\\\\\\n        onGeocodingDragEnd: (pos: [number, number]) => {\\\\\\\\n          action('On Geocoding Drag End')(pos)\\\\\\\\n          // setPosition(pos)\\\\\\\\n          // setSearchText('India')\\\\\\\\n        }\\\\\\\\n      }}\\\\\\\\n      showLegendWrapper={boolean('showLegendWrapper', false)}\\\\\\\\n    />\\\\\\\\n  )\\\\\\\\n}\\\\\\\\nexport const GeocodingMap = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <GeocodingMapComponent />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const PolygonMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n  // const [buttonType] = useState<string | null>(null)\\\\\\\\n  // console.log(buttonType)\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[20.5937, 78.9629]}\\\\\\\\n        zoom={4}\\\\\\\\n        zoomControl={boolean('Zoom Controls', true)}\\\\\\\\n        locationSearch={boolean('Location Search Bar', true)}\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height={text('Height', '300px')}\\\\\\\\n        width={text('Width', '800px')}\\\\\\\\n        tiles={\\\\\\\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\\\\\\\n        }\\\\\\\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\\\\\\\n        poi={boolean('Points of interest', false)}\\\\\\\\n        settingConfig={settingConfig}\\\\\\\\n        polygon={object('polygon', polyGeoFenceSampleData)}\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\\\\\\\n        editPopUpComponent={({ map }: any) => (\\\\\\\\n          <EditPopUp\\\\\\\\n            onClick={() => {\\\\\\\\n              map.closePopup()\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        )}\\\\\\\\n        onEdit={action('Value Edited with new Vertex')}\\\\\\\\n        popupCustomComponent={{\\\\\\\\n          tooltipButton: ({ selectedData }: any) => (\\\\\\\\n            <ButtonList\\\\\\\\n              listOfButtons={[\\\\\\\\n                {\\\\\\\\n                  variant: 'button' as tVariant,\\\\\\\\n                  children: 'Edit',\\\\\\\\n                  // intent: 'table' as tIntent,\\\\\\\\n                  iconVariant: 'edit',\\\\\\\\n                  primary: true,\\\\\\\\n                  onClick: () => console.log('Edit', selectedData)\\\\\\\\n                },\\\\\\\\n                {\\\\\\\\n                  variant: 'button' as tVariant,\\\\\\\\n                  children: 'Delete',\\\\\\\\n                  iconVariant: 'icomoon-close',\\\\\\\\n                  // intent: 'table' as tIntent,\\\\\\\\n                  onClick: () => console.log('delete', selectedData)\\\\\\\\n                }\\\\\\\\n              ]}\\\\\\\\n            />\\\\\\\\n          )\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const CircleMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n\\\\\\\\n  // create legend on the basis of markers data\\\\\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Route Mode')\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[20.5937, 78.9629]}\\\\\\\\n        zoom={4}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='300px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        settingConfig={settingConfig}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n        circle={object('circle', circleSampleData)}\\\\\\\\n        onEdit={action('Value Edited with new Vertex')}\\\\\\\\n        editPopUpComponent={({ map }: any) => (\\\\\\\\n          <EditPopUp\\\\\\\\n            onClick={() => {\\\\\\\\n              map.closePopup()\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        )}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\";\\\\n// @ts-ignore\\\\nvar __ADDS_MAP__ = {};\\\\n// @ts-ignore\\\\nvar __MAIN_FILE_LOCATION__ = \\\\\\\"/Map.stories.tsx\\\\\\\";\\\\n// @ts-ignore\\\\nvar __MODULE_DEPENDENCIES__ = [];\\\\n// @ts-ignore\\\\nvar __LOCAL_DEPENDENCIES__ = {};\\\\n// @ts-ignore\\\\nvar __IDS_TO_FRAMEWORKS__ = {};\\\\n        \\\\nimport { action } from '@storybook/addon-actions'\\\\nimport {\\\\n  boolean,\\\\n  object,\\\\n  select,\\\\n  text,\\\\n  withKnobs\\\\n} from '@storybook/addon-knobs'\\\\nimport React from 'react'\\\\nimport LeafletMap from '.'\\\\nimport { path } from '..'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport Settings from '../../atoms/SettingBox/data'\\\\nimport { ButtonList } from '../../molecules/ShowHideColumnPopup'\\\\nimport { tVariant } from '../Button'\\\\nimport { IOption } from '../SettingBox/interface'\\\\nimport {\\\\n  GOOGLE_API_KEY,\\\\n  HERE_MAPS_API_KEY\\\\n} from './constants/googleIntegration.constants'\\\\nimport circleSampleData from './dummyData/CircleSampleData.SampleData'\\\\nimport infowindowStructure from './dummyData/Infowindow.structure.sampleData'\\\\nimport markerIcons from './dummyData/MarkerIcon.sampleData'\\\\nimport markerLayerObj from './dummyData/Markers.sampleData'\\\\nimport polyGeoFenceSampleData from './dummyData/PolyGeoFence.SampleData'\\\\nimport sampleTrackingData from './dummyData/Presentation.Tracking.sampleData'\\\\nimport sampleTripData from './dummyData/Presentation.Trips.sampleData'\\\\nimport { updateSettingsWithLegends } from './helperMethods'\\\\nimport EditPopUp from './SubComponent/EditPopUp'\\\\nimport { tTheme, tTiles } from './types.d'\\\\n\\\\nexport default {parameters: {\\\\\\\"storySource\\\\\\\":{\\\\\\\"source\\\\\\\":\\\\\\\"import { action } from '@storybook/addon-actions'\\\\\\\\nimport {\\\\\\\\n  boolean,\\\\\\\\n  object,\\\\\\\\n  select,\\\\\\\\n  text,\\\\\\\\n  withKnobs\\\\\\\\n} from '@storybook/addon-knobs'\\\\\\\\nimport React from 'react'\\\\\\\\nimport LeafletMap from '.'\\\\\\\\nimport { path } from '..'\\\\\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\\\\\nimport Settings from '../../atoms/SettingBox/data'\\\\\\\\nimport { ButtonList } from '../../molecules/ShowHideColumnPopup'\\\\\\\\nimport { tVariant } from '../Button'\\\\\\\\nimport { IOption } from '../SettingBox/interface'\\\\\\\\nimport {\\\\\\\\n  GOOGLE_API_KEY,\\\\\\\\n  HERE_MAPS_API_KEY\\\\\\\\n} from './constants/googleIntegration.constants'\\\\\\\\nimport circleSampleData from './dummyData/CircleSampleData.SampleData'\\\\\\\\nimport infowindowStructure from './dummyData/Infowindow.structure.sampleData'\\\\\\\\nimport markerIcons from './dummyData/MarkerIcon.sampleData'\\\\\\\\nimport markerLayerObj from './dummyData/Markers.sampleData'\\\\\\\\nimport polyGeoFenceSampleData from './dummyData/PolyGeoFence.SampleData'\\\\\\\\nimport sampleTrackingData from './dummyData/Presentation.Tracking.sampleData'\\\\\\\\nimport sampleTripData from './dummyData/Presentation.Trips.sampleData'\\\\\\\\nimport { updateSettingsWithLegends } from './helperMethods'\\\\\\\\nimport EditPopUp from './SubComponent/EditPopUp'\\\\\\\\nimport { tTheme, tTiles } from './types.d'\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/Map`,\\\\\\\\n  decorators: [withKnobs],\\\\\\\\n  component: LeafletMap\\\\\\\\n}\\\\\\\\n\\\\\\\\n// The options which will be visible for tile-layer select in the story\\\\\\\\nconst tileOptions = {\\\\\\\\n  'open-street-maps': 'osm',\\\\\\\\n  'google-satellite': 'google_satellite',\\\\\\\\n  'google-basic': 'google_roadmap',\\\\\\\\n  'google-terrain': 'google_terrain',\\\\\\\\n  'google-hybrid': 'google_hybrid'\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst themeOptions = {\\\\\\\\n  light: 'light',\\\\\\\\n  dark: 'dark'\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const BaseMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[51.0, 19.0]}\\\\\\\\n        latLngBounds={[[37.09024, -95.712891]]}\\\\\\\\n        // zoom={number('Zoom', 4, { min: 1, max: 24 })}\\\\\\\\n        zoomControl={boolean('Zoom Controls', true)}\\\\\\\\n        locationSearch={boolean('Location Search Bar', true)}\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        heremapsApiKey={HERE_MAPS_API_KEY}\\\\\\\\n        height={text('Height', '300px')}\\\\\\\\n        width={text('Width', '800px')}\\\\\\\\n        tiles={\\\\\\\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\\\\\\\n        }\\\\\\\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\\\\\\\n        poi={boolean('Points of interest', false)}\\\\\\\\n        settingConfig={settingConfig}\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n        rulerControl={boolean('rulerControl', true)}\\\\\\\\n        iconsRef={markerIcons}\\\\\\\\n        // center={array('center', ['37.7749', '-122.4194'])}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const MarkerMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n\\\\\\\\n  // set permission true of markers if sending data,same like heatmap\\\\\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\\\\\n    option.permission = option.name === 'Markers'\\\\\\\\n    option.selected = option.name === 'Markers'\\\\\\\\n  })\\\\\\\\n  settingConfig['Map Mode'].permission = true\\\\\\\\n\\\\\\\\n  // create legend on the basis of markers data\\\\\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[37.09024, -95.712891]}\\\\\\\\n        latLngBounds={[[37.09024, -95.712891]]}\\\\\\\\n        // zoom={4}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='800px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\\\\\n        focusMarkerId={text('Marker Id to focus/open', '')}\\\\\\\\n        iconsRef={markerIcons}\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        settingConfig={settingConfig}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const HeatMapAndMarker = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // set permission true of heatmap if sending data,same like marker\\\\\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\\\\\n    option.permission = true // true for both option\\\\\\\\n    option.selected = option.name === 'Markers' // markers selected first\\\\\\\\n  })\\\\\\\\n  settingConfig['Map Mode'].permission = true\\\\\\\\n  // create legend on the basis of markers data\\\\\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[51.0, 19.0]}\\\\\\\\n        // zoom={4}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='800px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        heatmap={object('Heatmap configuration', {\\\\\\\\n          permission: false,\\\\\\\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\\\\\\\n        })}\\\\\\\\n        settingConfig={settingConfig}\\\\\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\\\\\n        iconsRef={markerIcons}\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const HeatMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // set permission true of heatmap if sending data,same like marker\\\\\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\\\\\n    option.permission = option.name === 'HeatMap'\\\\\\\\n    option.selected = option.name === 'HeatMap'\\\\\\\\n  })\\\\\\\\n  settingConfig['Map Mode'].permission = true\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[51.0, 19.0]}\\\\\\\\n        // zoom={4}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='300px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        heatmap={object('Heatmap configuration', {\\\\\\\\n          permission: true,\\\\\\\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\\\\\\\n        })}\\\\\\\\n        settingConfig={settingConfig}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const TripsMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // create legend on the basis of markers data\\\\\\\\n\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[51.0, 19.0]}\\\\\\\\n        zoom={4}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='300px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        trips={object('Trip Configuration', sampleTripData)}\\\\\\\\n        iconsRef={markerIcons}\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const TrackingMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[33.298959, -111.9724]}\\\\\\\\n        zoom={10}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='300px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        tracking={object('Tracking Configuration', sampleTrackingData)}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst GeocodingMapComponent = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n  // const [searchText, setSearchText] = React.useState(\\\\\\\\n  //   'Mumbai, Maharashtra, India'\\\\\\\\n  // )\\\\\\\\n  // const [position, setPosition] = React.useState([19.0759837, 72.8776559])\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <LeafletMap\\\\\\\\n      id='leafletBaseMap'\\\\\\\\n      classes='baseMap customBaseMap'\\\\\\\\n      googleApiKey={GOOGLE_API_KEY}\\\\\\\\n      settingConfig={settingConfig}\\\\\\\\n      center={[51.0, 19.0]}\\\\\\\\n      // markers={object('Marker Configuration', markerLayerObj)}\\\\\\\\n      iconsRef={markerIcons}\\\\\\\\n      zoomControl\\\\\\\\n      locationSearch\\\\\\\\n      sendLocationOutside={action('sendLocationOutside ')}\\\\\\\\n      isShowMapTileLayer={boolean('isShowMapTileLayer', false)}\\\\\\\\n      geocoding={{\\\\\\\\n        permission: true,\\\\\\\\n\\\\\\\\n        /** If you are passing searchText, ensure to pass the position prop as well. */\\\\\\\\n        searchText: text('searchText', 'Mumbai'),\\\\\\\\n        // searchTextInput: searchText,\\\\\\\\n        position: [19.0759837, 72.8776559],\\\\\\\\n        isSave: boolean('isSave', true),\\\\\\\\n        onGeocodingSave: (e: any) => {\\\\\\\\n          window.alert(\\\\\\\\n            'Geocodes Saved ' + e.position?.[0] + ', ' + e.position?.[1]\\\\\\\\n          )\\\\\\\\n        },\\\\\\\\n        onGeocodingDragEnd: (pos: [number, number]) => {\\\\\\\\n          action('On Geocoding Drag End')(pos)\\\\\\\\n          // setPosition(pos)\\\\\\\\n          // setSearchText('India')\\\\\\\\n        }\\\\\\\\n      }}\\\\\\\\n      showLegendWrapper={boolean('showLegendWrapper', false)}\\\\\\\\n    />\\\\\\\\n  )\\\\\\\\n}\\\\\\\\nexport const GeocodingMap = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <GeocodingMapComponent />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const PolygonMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n  // const [buttonType] = useState<string | null>(null)\\\\\\\\n  // console.log(buttonType)\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[20.5937, 78.9629]}\\\\\\\\n        zoom={4}\\\\\\\\n        zoomControl={boolean('Zoom Controls', true)}\\\\\\\\n        locationSearch={boolean('Location Search Bar', true)}\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height={text('Height', '300px')}\\\\\\\\n        width={text('Width', '800px')}\\\\\\\\n        tiles={\\\\\\\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\\\\\\\n        }\\\\\\\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\\\\\\\n        poi={boolean('Points of interest', false)}\\\\\\\\n        settingConfig={settingConfig}\\\\\\\\n        polygon={object('polygon', polyGeoFenceSampleData)}\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\\\\\\\n        editPopUpComponent={({ map }: any) => (\\\\\\\\n          <EditPopUp\\\\\\\\n            onClick={() => {\\\\\\\\n              map.closePopup()\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        )}\\\\\\\\n        onEdit={action('Value Edited with new Vertex')}\\\\\\\\n        popupCustomComponent={{\\\\\\\\n          tooltipButton: ({ selectedData }: any) => (\\\\\\\\n            <ButtonList\\\\\\\\n              listOfButtons={[\\\\\\\\n                {\\\\\\\\n                  variant: 'button' as tVariant,\\\\\\\\n                  children: 'Edit',\\\\\\\\n                  // intent: 'table' as tIntent,\\\\\\\\n                  iconVariant: 'edit',\\\\\\\\n                  primary: true,\\\\\\\\n                  onClick: () => console.log('Edit', selectedData)\\\\\\\\n                },\\\\\\\\n                {\\\\\\\\n                  variant: 'button' as tVariant,\\\\\\\\n                  children: 'Delete',\\\\\\\\n                  iconVariant: 'icomoon-close',\\\\\\\\n                  // intent: 'table' as tIntent,\\\\\\\\n                  onClick: () => console.log('delete', selectedData)\\\\\\\\n                }\\\\\\\\n              ]}\\\\\\\\n            />\\\\\\\\n          )\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const CircleMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n\\\\\\\\n  // create legend on the basis of markers data\\\\\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Route Mode')\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[20.5937, 78.9629]}\\\\\\\\n        zoom={4}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='300px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        settingConfig={settingConfig}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n        circle={object('circle', circleSampleData)}\\\\\\\\n        onEdit={action('Value Edited with new Vertex')}\\\\\\\\n        editPopUpComponent={({ map }: any) => (\\\\\\\\n          <EditPopUp\\\\\\\\n            onClick={() => {\\\\\\\\n              map.closePopup()\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        )}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\",\\\\\\\"locationsMap\\\\\\\":{}},},\\\\n  title: `${path}/Map`,\\\\n  decorators: [withKnobs],\\\\n  component: LeafletMap\\\\n}\\\\n\\\\n// The options which will be visible for tile-layer select in the story\\\\nconst tileOptions = {\\\\n  'open-street-maps': 'osm',\\\\n  'google-satellite': 'google_satellite',\\\\n  'google-basic': 'google_roadmap',\\\\n  'google-terrain': 'google_terrain',\\\\n  'google-hybrid': 'google_hybrid'\\\\n}\\\\n\\\\nconst themeOptions = {\\\\n  light: 'light',\\\\n  dark: 'dark'\\\\n}\\\\n\\\\nexport const BaseMap = addSourceDecorator(() => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        latLngBounds={[[37.09024, -95.712891]]}\\\\n        // zoom={number('Zoom', 4, { min: 1, max: 24 })}\\\\n        zoomControl={boolean('Zoom Controls', true)}\\\\n        locationSearch={boolean('Location Search Bar', true)}\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        heremapsApiKey={HERE_MAPS_API_KEY}\\\\n        height={text('Height', '300px')}\\\\n        width={text('Width', '800px')}\\\\n        tiles={\\\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\\\n        }\\\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\\\n        poi={boolean('Points of interest', false)}\\\\n        settingConfig={settingConfig}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n        rulerControl={boolean('rulerControl', true)}\\\\n        iconsRef={markerIcons}\\\\n        // center={array('center', ['37.7749', '-122.4194'])}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const MarkerMap = addSourceDecorator(() => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n\\\\n  // set permission true of markers if sending data,same like heatmap\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\n    option.permission = option.name === 'Markers'\\\\n    option.selected = option.name === 'Markers'\\\\n  })\\\\n  settingConfig['Map Mode'].permission = true\\\\n\\\\n  // create legend on the basis of markers data\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[37.09024, -95.712891]}\\\\n        latLngBounds={[[37.09024, -95.712891]]}\\\\n        // zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='800px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\n        focusMarkerId={text('Marker Id to focus/open', '')}\\\\n        iconsRef={markerIcons}\\\\n        popupRef={infowindowStructure}\\\\n        settingConfig={settingConfig}\\\\n        onSettingChange={action('setting changed')}\\\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const HeatMapAndMarker = addSourceDecorator(() => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission true of heatmap if sending data,same like marker\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\n    option.permission = true // true for both option\\\\n    option.selected = option.name === 'Markers' // markers selected first\\\\n  })\\\\n  settingConfig['Map Mode'].permission = true\\\\n  // create legend on the basis of markers data\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        // zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='800px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        heatmap={object('Heatmap configuration', {\\\\n          permission: false,\\\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\\\n        })}\\\\n        settingConfig={settingConfig}\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\n        iconsRef={markerIcons}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const HeatMap = addSourceDecorator(() => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission true of heatmap if sending data,same like marker\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\n    option.permission = option.name === 'HeatMap'\\\\n    option.selected = option.name === 'HeatMap'\\\\n  })\\\\n  settingConfig['Map Mode'].permission = true\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        // zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        heatmap={object('Heatmap configuration', {\\\\n          permission: true,\\\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\\\n        })}\\\\n        settingConfig={settingConfig}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const TripsMap = addSourceDecorator(() => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // create legend on the basis of markers data\\\\n\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        trips={object('Trip Configuration', sampleTripData)}\\\\n        iconsRef={markerIcons}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const TrackingMap = addSourceDecorator(() => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[33.298959, -111.9724]}\\\\n        zoom={10}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        tracking={object('Tracking Configuration', sampleTrackingData)}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nconst GeocodingMapComponent = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  // const [searchText, setSearchText] = React.useState(\\\\n  //   'Mumbai, Maharashtra, India'\\\\n  // )\\\\n  // const [position, setPosition] = React.useState([19.0759837, 72.8776559])\\\\n\\\\n  return (\\\\n    <LeafletMap\\\\n      id='leafletBaseMap'\\\\n      classes='baseMap customBaseMap'\\\\n      googleApiKey={GOOGLE_API_KEY}\\\\n      settingConfig={settingConfig}\\\\n      center={[51.0, 19.0]}\\\\n      // markers={object('Marker Configuration', markerLayerObj)}\\\\n      iconsRef={markerIcons}\\\\n      zoomControl\\\\n      locationSearch\\\\n      sendLocationOutside={action('sendLocationOutside ')}\\\\n      isShowMapTileLayer={boolean('isShowMapTileLayer', false)}\\\\n      geocoding={{\\\\n        permission: true,\\\\n\\\\n        /** If you are passing searchText, ensure to pass the position prop as well. */\\\\n        searchText: text('searchText', 'Mumbai'),\\\\n        // searchTextInput: searchText,\\\\n        position: [19.0759837, 72.8776559],\\\\n        isSave: boolean('isSave', true),\\\\n        onGeocodingSave: (e: any) => {\\\\n          window.alert(\\\\n            'Geocodes Saved ' + e.position?.[0] + ', ' + e.position?.[1]\\\\n          )\\\\n        },\\\\n        onGeocodingDragEnd: (pos: [number, number]) => {\\\\n          action('On Geocoding Drag End')(pos)\\\\n          // setPosition(pos)\\\\n          // setSearchText('India')\\\\n        }\\\\n      }}\\\\n      showLegendWrapper={boolean('showLegendWrapper', false)}\\\\n    />\\\\n  )\\\\n}\\\\nexport const GeocodingMap = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <GeocodingMapComponent />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const PolygonMap = addSourceDecorator(() => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  // const [buttonType] = useState<string | null>(null)\\\\n  // console.log(buttonType)\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[20.5937, 78.9629]}\\\\n        zoom={4}\\\\n        zoomControl={boolean('Zoom Controls', true)}\\\\n        locationSearch={boolean('Location Search Bar', true)}\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height={text('Height', '300px')}\\\\n        width={text('Width', '800px')}\\\\n        tiles={\\\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\\\n        }\\\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\\\n        poi={boolean('Points of interest', false)}\\\\n        settingConfig={settingConfig}\\\\n        polygon={object('polygon', polyGeoFenceSampleData)}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\\\n        editPopUpComponent={({ map }: any) => (\\\\n          <EditPopUp\\\\n            onClick={() => {\\\\n              map.closePopup()\\\\n            }}\\\\n          />\\\\n        )}\\\\n        onEdit={action('Value Edited with new Vertex')}\\\\n        popupCustomComponent={{\\\\n          tooltipButton: ({ selectedData }: any) => (\\\\n            <ButtonList\\\\n              listOfButtons={[\\\\n                {\\\\n                  variant: 'button' as tVariant,\\\\n                  children: 'Edit',\\\\n                  // intent: 'table' as tIntent,\\\\n                  iconVariant: 'edit',\\\\n                  primary: true,\\\\n                  onClick: () => console.log('Edit', selectedData)\\\\n                },\\\\n                {\\\\n                  variant: 'button' as tVariant,\\\\n                  children: 'Delete',\\\\n                  iconVariant: 'icomoon-close',\\\\n                  // intent: 'table' as tIntent,\\\\n                  onClick: () => console.log('delete', selectedData)\\\\n                }\\\\n              ]}\\\\n            />\\\\n          )\\\\n        }}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const CircleMap = addSourceDecorator(() => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n\\\\n  // create legend on the basis of markers data\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Route Mode')\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[20.5937, 78.9629]}\\\\n        zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        popupRef={infowindowStructure}\\\\n        settingConfig={settingConfig}\\\\n        onSettingChange={action('setting changed')}\\\\n        circle={object('circle', circleSampleData)}\\\\n        onEdit={action('Value Edited with new Vertex')}\\\\n        editPopUpComponent={({ map }: any) => (\\\\n          <EditPopUp\\\\n            onClick={() => {\\\\n              map.closePopup()\\\\n            }}\\\\n          />\\\\n        )}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/Map.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\n\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/farhanansari/Code/ui-library/src/components/atoms/Map\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"import { action } from '@storybook/addon-actions'\\\\nimport {\\\\n  boolean,\\\\n  object,\\\\n  select,\\\\n  text,\\\\n  withKnobs\\\\n} from '@storybook/addon-knobs'\\\\nimport React from 'react'\\\\nimport LeafletMap from '.'\\\\nimport { path } from '..'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport Settings from '../../atoms/SettingBox/data'\\\\nimport { ButtonList } from '../../molecules/ShowHideColumnPopup'\\\\nimport { tVariant } from '../Button'\\\\nimport { IOption } from '../SettingBox/interface'\\\\nimport {\\\\n  GOOGLE_API_KEY,\\\\n  HERE_MAPS_API_KEY\\\\n} from './constants/googleIntegration.constants'\\\\nimport circleSampleData from './dummyData/CircleSampleData.SampleData'\\\\nimport infowindowStructure from './dummyData/Infowindow.structure.sampleData'\\\\nimport markerIcons from './dummyData/MarkerIcon.sampleData'\\\\nimport markerLayerObj from './dummyData/Markers.sampleData'\\\\nimport polyGeoFenceSampleData from './dummyData/PolyGeoFence.SampleData'\\\\nimport sampleTrackingData from './dummyData/Presentation.Tracking.sampleData'\\\\nimport sampleTripData from './dummyData/Presentation.Trips.sampleData'\\\\nimport { updateSettingsWithLegends } from './helperMethods'\\\\nimport EditPopUp from './SubComponent/EditPopUp'\\\\nimport { tTheme, tTiles } from './types.d'\\\\n\\\\nexport default {\\\\n  title: `${path}/Map`,\\\\n  decorators: [withKnobs],\\\\n  component: LeafletMap\\\\n}\\\\n\\\\n// The options which will be visible for tile-layer select in the story\\\\nconst tileOptions = {\\\\n  'open-street-maps': 'osm',\\\\n  'google-satellite': 'google_satellite',\\\\n  'google-basic': 'google_roadmap',\\\\n  'google-terrain': 'google_terrain',\\\\n  'google-hybrid': 'google_hybrid'\\\\n}\\\\n\\\\nconst themeOptions = {\\\\n  light: 'light',\\\\n  dark: 'dark'\\\\n}\\\\n\\\\nexport const BaseMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        latLngBounds={[[37.09024, -95.712891]]}\\\\n        // zoom={number('Zoom', 4, { min: 1, max: 24 })}\\\\n        zoomControl={boolean('Zoom Controls', true)}\\\\n        locationSearch={boolean('Location Search Bar', true)}\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        heremapsApiKey={HERE_MAPS_API_KEY}\\\\n        height={text('Height', '300px')}\\\\n        width={text('Width', '800px')}\\\\n        tiles={\\\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\\\n        }\\\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\\\n        poi={boolean('Points of interest', false)}\\\\n        settingConfig={settingConfig}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n        rulerControl={boolean('rulerControl', true)}\\\\n        iconsRef={markerIcons}\\\\n        // center={array('center', ['37.7749', '-122.4194'])}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const MarkerMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n\\\\n  // set permission true of markers if sending data,same like heatmap\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\n    option.permission = option.name === 'Markers'\\\\n    option.selected = option.name === 'Markers'\\\\n  })\\\\n  settingConfig['Map Mode'].permission = true\\\\n\\\\n  // create legend on the basis of markers data\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[37.09024, -95.712891]}\\\\n        latLngBounds={[[37.09024, -95.712891]]}\\\\n        // zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='800px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\n        focusMarkerId={text('Marker Id to focus/open', '')}\\\\n        iconsRef={markerIcons}\\\\n        popupRef={infowindowStructure}\\\\n        settingConfig={settingConfig}\\\\n        onSettingChange={action('setting changed')}\\\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const HeatMapAndMarker = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission true of heatmap if sending data,same like marker\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\n    option.permission = true // true for both option\\\\n    option.selected = option.name === 'Markers' // markers selected first\\\\n  })\\\\n  settingConfig['Map Mode'].permission = true\\\\n  // create legend on the basis of markers data\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        // zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='800px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        heatmap={object('Heatmap configuration', {\\\\n          permission: false,\\\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\\\n        })}\\\\n        settingConfig={settingConfig}\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\n        iconsRef={markerIcons}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const HeatMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission true of heatmap if sending data,same like marker\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\n    option.permission = option.name === 'HeatMap'\\\\n    option.selected = option.name === 'HeatMap'\\\\n  })\\\\n  settingConfig['Map Mode'].permission = true\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        // zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        heatmap={object('Heatmap configuration', {\\\\n          permission: true,\\\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\\\n        })}\\\\n        settingConfig={settingConfig}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const TripsMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // create legend on the basis of markers data\\\\n\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        trips={object('Trip Configuration', sampleTripData)}\\\\n        iconsRef={markerIcons}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const TrackingMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[33.298959, -111.9724]}\\\\n        zoom={10}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        tracking={object('Tracking Configuration', sampleTrackingData)}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nconst GeocodingMapComponent = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  // const [searchText, setSearchText] = React.useState(\\\\n  //   'Mumbai, Maharashtra, India'\\\\n  // )\\\\n  // const [position, setPosition] = React.useState([19.0759837, 72.8776559])\\\\n\\\\n  return (\\\\n    <LeafletMap\\\\n      id='leafletBaseMap'\\\\n      classes='baseMap customBaseMap'\\\\n      googleApiKey={GOOGLE_API_KEY}\\\\n      settingConfig={settingConfig}\\\\n      center={[51.0, 19.0]}\\\\n      // markers={object('Marker Configuration', markerLayerObj)}\\\\n      iconsRef={markerIcons}\\\\n      zoomControl\\\\n      locationSearch\\\\n      sendLocationOutside={action('sendLocationOutside ')}\\\\n      isShowMapTileLayer={boolean('isShowMapTileLayer', false)}\\\\n      geocoding={{\\\\n        permission: true,\\\\n\\\\n        /** If you are passing searchText, ensure to pass the position prop as well. */\\\\n        searchText: text('searchText', 'Mumbai'),\\\\n        // searchTextInput: searchText,\\\\n        position: [19.0759837, 72.8776559],\\\\n        isSave: boolean('isSave', true),\\\\n        onGeocodingSave: (e: any) => {\\\\n          window.alert(\\\\n            'Geocodes Saved ' + e.position?.[0] + ', ' + e.position?.[1]\\\\n          )\\\\n        },\\\\n        onGeocodingDragEnd: (pos: [number, number]) => {\\\\n          action('On Geocoding Drag End')(pos)\\\\n          // setPosition(pos)\\\\n          // setSearchText('India')\\\\n        }\\\\n      }}\\\\n      showLegendWrapper={boolean('showLegendWrapper', false)}\\\\n    />\\\\n  )\\\\n}\\\\nexport const GeocodingMap = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <GeocodingMapComponent />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const PolygonMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  // const [buttonType] = useState<string | null>(null)\\\\n  // console.log(buttonType)\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[20.5937, 78.9629]}\\\\n        zoom={4}\\\\n        zoomControl={boolean('Zoom Controls', true)}\\\\n        locationSearch={boolean('Location Search Bar', true)}\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height={text('Height', '300px')}\\\\n        width={text('Width', '800px')}\\\\n        tiles={\\\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\\\n        }\\\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\\\n        poi={boolean('Points of interest', false)}\\\\n        settingConfig={settingConfig}\\\\n        polygon={object('polygon', polyGeoFenceSampleData)}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\\\n        editPopUpComponent={({ map }: any) => (\\\\n          <EditPopUp\\\\n            onClick={() => {\\\\n              map.closePopup()\\\\n            }}\\\\n          />\\\\n        )}\\\\n        onEdit={action('Value Edited with new Vertex')}\\\\n        popupCustomComponent={{\\\\n          tooltipButton: ({ selectedData }: any) => (\\\\n            <ButtonList\\\\n              listOfButtons={[\\\\n                {\\\\n                  variant: 'button' as tVariant,\\\\n                  children: 'Edit',\\\\n                  // intent: 'table' as tIntent,\\\\n                  iconVariant: 'edit',\\\\n                  primary: true,\\\\n                  onClick: () => console.log('Edit', selectedData)\\\\n                },\\\\n                {\\\\n                  variant: 'button' as tVariant,\\\\n                  children: 'Delete',\\\\n                  iconVariant: 'icomoon-close',\\\\n                  // intent: 'table' as tIntent,\\\\n                  onClick: () => console.log('delete', selectedData)\\\\n                }\\\\n              ]}\\\\n            />\\\\n          )\\\\n        }}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const CircleMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n\\\\n  // create legend on the basis of markers data\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Route Mode')\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[20.5937, 78.9629]}\\\\n        zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        popupRef={infowindowStructure}\\\\n        settingConfig={settingConfig}\\\\n        onSettingChange={action('setting changed')}\\\\n        circle={object('circle', circleSampleData)}\\\\n        onEdit={action('Value Edited with new Vertex')}\\\\n        editPopUpComponent={({ map }: any) => (\\\\n          <EditPopUp\\\\n            onClick={() => {\\\\n              map.closePopup()\\\\n            }}\\\\n          />\\\\n        )}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/Map.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\nimport { action } from '@storybook/addon-actions'\\nimport {\\n  boolean,\\n  object,\\n  select,\\n  text,\\n  withKnobs\\n} from '@storybook/addon-knobs'\\nimport React from 'react'\\nimport LeafletMap from '.'\\nimport { path } from '..'\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\nimport Settings from '../../atoms/SettingBox/data'\\nimport { ButtonList } from '../../molecules/ShowHideColumnPopup'\\nimport { tVariant } from '../Button'\\nimport { IOption } from '../SettingBox/interface'\\nimport {\\n  GOOGLE_API_KEY,\\n  HERE_MAPS_API_KEY\\n} from './constants/googleIntegration.constants'\\nimport circleSampleData from './dummyData/CircleSampleData.SampleData'\\nimport infowindowStructure from './dummyData/Infowindow.structure.sampleData'\\nimport markerIcons from './dummyData/MarkerIcon.sampleData'\\nimport markerLayerObj from './dummyData/Markers.sampleData'\\nimport polyGeoFenceSampleData from './dummyData/PolyGeoFence.SampleData'\\nimport sampleTrackingData from './dummyData/Presentation.Tracking.sampleData'\\nimport sampleTripData from './dummyData/Presentation.Trips.sampleData'\\nimport { updateSettingsWithLegends } from './helperMethods'\\nimport EditPopUp from './SubComponent/EditPopUp'\\nimport { tTheme, tTiles } from './types.d'\\n\\nexport default {parameters: {\\\"storySource\\\":{\\\"source\\\":\\\"\\\\n\\\\n// @ts-nocheck\\\\n// @ts-ignore\\\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\\\n// @ts-ignore\\\\nvar addSourceDecorator = require(\\\\\\\"@storybook/source-loader/preview\\\\\\\").addSource;\\\\n// @ts-ignore\\\\nvar __SOURCE_PREFIX__ = \\\\\\\"/Users/farhanansari/Code/ui-library/src/components/atoms/Map\\\\\\\";\\\\n// @ts-ignore\\\\nvar __STORY__ = \\\\\\\"import { action } from '@storybook/addon-actions'\\\\\\\\nimport {\\\\\\\\n  boolean,\\\\\\\\n  object,\\\\\\\\n  select,\\\\\\\\n  text,\\\\\\\\n  withKnobs\\\\\\\\n} from '@storybook/addon-knobs'\\\\\\\\nimport React from 'react'\\\\\\\\nimport LeafletMap from '.'\\\\\\\\nimport { path } from '..'\\\\\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\\\\\nimport Settings from '../../atoms/SettingBox/data'\\\\\\\\nimport { ButtonList } from '../../molecules/ShowHideColumnPopup'\\\\\\\\nimport { tVariant } from '../Button'\\\\\\\\nimport { IOption } from '../SettingBox/interface'\\\\\\\\nimport {\\\\\\\\n  GOOGLE_API_KEY,\\\\\\\\n  HERE_MAPS_API_KEY\\\\\\\\n} from './constants/googleIntegration.constants'\\\\\\\\nimport circleSampleData from './dummyData/CircleSampleData.SampleData'\\\\\\\\nimport infowindowStructure from './dummyData/Infowindow.structure.sampleData'\\\\\\\\nimport markerIcons from './dummyData/MarkerIcon.sampleData'\\\\\\\\nimport markerLayerObj from './dummyData/Markers.sampleData'\\\\\\\\nimport polyGeoFenceSampleData from './dummyData/PolyGeoFence.SampleData'\\\\\\\\nimport sampleTrackingData from './dummyData/Presentation.Tracking.sampleData'\\\\\\\\nimport sampleTripData from './dummyData/Presentation.Trips.sampleData'\\\\\\\\nimport { updateSettingsWithLegends } from './helperMethods'\\\\\\\\nimport EditPopUp from './SubComponent/EditPopUp'\\\\\\\\nimport { tTheme, tTiles } from './types.d'\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/Map`,\\\\\\\\n  decorators: [withKnobs],\\\\\\\\n  component: LeafletMap\\\\\\\\n}\\\\\\\\n\\\\\\\\n// The options which will be visible for tile-layer select in the story\\\\\\\\nconst tileOptions = {\\\\\\\\n  'open-street-maps': 'osm',\\\\\\\\n  'google-satellite': 'google_satellite',\\\\\\\\n  'google-basic': 'google_roadmap',\\\\\\\\n  'google-terrain': 'google_terrain',\\\\\\\\n  'google-hybrid': 'google_hybrid'\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst themeOptions = {\\\\\\\\n  light: 'light',\\\\\\\\n  dark: 'dark'\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const BaseMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[51.0, 19.0]}\\\\\\\\n        latLngBounds={[[37.09024, -95.712891]]}\\\\\\\\n        // zoom={number('Zoom', 4, { min: 1, max: 24 })}\\\\\\\\n        zoomControl={boolean('Zoom Controls', true)}\\\\\\\\n        locationSearch={boolean('Location Search Bar', true)}\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        heremapsApiKey={HERE_MAPS_API_KEY}\\\\\\\\n        height={text('Height', '300px')}\\\\\\\\n        width={text('Width', '800px')}\\\\\\\\n        tiles={\\\\\\\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\\\\\\\n        }\\\\\\\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\\\\\\\n        poi={boolean('Points of interest', false)}\\\\\\\\n        settingConfig={settingConfig}\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n        rulerControl={boolean('rulerControl', true)}\\\\\\\\n        iconsRef={markerIcons}\\\\\\\\n        // center={array('center', ['37.7749', '-122.4194'])}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const MarkerMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n\\\\\\\\n  // set permission true of markers if sending data,same like heatmap\\\\\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\\\\\n    option.permission = option.name === 'Markers'\\\\\\\\n    option.selected = option.name === 'Markers'\\\\\\\\n  })\\\\\\\\n  settingConfig['Map Mode'].permission = true\\\\\\\\n\\\\\\\\n  // create legend on the basis of markers data\\\\\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[37.09024, -95.712891]}\\\\\\\\n        latLngBounds={[[37.09024, -95.712891]]}\\\\\\\\n        // zoom={4}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='800px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\\\\\n        focusMarkerId={text('Marker Id to focus/open', '')}\\\\\\\\n        iconsRef={markerIcons}\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        settingConfig={settingConfig}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const HeatMapAndMarker = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // set permission true of heatmap if sending data,same like marker\\\\\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\\\\\n    option.permission = true // true for both option\\\\\\\\n    option.selected = option.name === 'Markers' // markers selected first\\\\\\\\n  })\\\\\\\\n  settingConfig['Map Mode'].permission = true\\\\\\\\n  // create legend on the basis of markers data\\\\\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[51.0, 19.0]}\\\\\\\\n        // zoom={4}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='800px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        heatmap={object('Heatmap configuration', {\\\\\\\\n          permission: false,\\\\\\\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\\\\\\\n        })}\\\\\\\\n        settingConfig={settingConfig}\\\\\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\\\\\n        iconsRef={markerIcons}\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const HeatMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // set permission true of heatmap if sending data,same like marker\\\\\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\\\\\n    option.permission = option.name === 'HeatMap'\\\\\\\\n    option.selected = option.name === 'HeatMap'\\\\\\\\n  })\\\\\\\\n  settingConfig['Map Mode'].permission = true\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[51.0, 19.0]}\\\\\\\\n        // zoom={4}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='300px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        heatmap={object('Heatmap configuration', {\\\\\\\\n          permission: true,\\\\\\\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\\\\\\\n        })}\\\\\\\\n        settingConfig={settingConfig}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const TripsMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // create legend on the basis of markers data\\\\\\\\n\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[51.0, 19.0]}\\\\\\\\n        zoom={4}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='300px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        trips={object('Trip Configuration', sampleTripData)}\\\\\\\\n        iconsRef={markerIcons}\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const TrackingMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[33.298959, -111.9724]}\\\\\\\\n        zoom={10}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='300px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        tracking={object('Tracking Configuration', sampleTrackingData)}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst GeocodingMapComponent = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n  // const [searchText, setSearchText] = React.useState(\\\\\\\\n  //   'Mumbai, Maharashtra, India'\\\\\\\\n  // )\\\\\\\\n  // const [position, setPosition] = React.useState([19.0759837, 72.8776559])\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <LeafletMap\\\\\\\\n      id='leafletBaseMap'\\\\\\\\n      classes='baseMap customBaseMap'\\\\\\\\n      googleApiKey={GOOGLE_API_KEY}\\\\\\\\n      settingConfig={settingConfig}\\\\\\\\n      center={[51.0, 19.0]}\\\\\\\\n      // markers={object('Marker Configuration', markerLayerObj)}\\\\\\\\n      iconsRef={markerIcons}\\\\\\\\n      zoomControl\\\\\\\\n      locationSearch\\\\\\\\n      sendLocationOutside={action('sendLocationOutside ')}\\\\\\\\n      isShowMapTileLayer={boolean('isShowMapTileLayer', false)}\\\\\\\\n      geocoding={{\\\\\\\\n        permission: true,\\\\\\\\n\\\\\\\\n        /** If you are passing searchText, ensure to pass the position prop as well. */\\\\\\\\n        searchText: text('searchText', 'Mumbai'),\\\\\\\\n        // searchTextInput: searchText,\\\\\\\\n        position: [19.0759837, 72.8776559],\\\\\\\\n        isSave: boolean('isSave', true),\\\\\\\\n        onGeocodingSave: (e: any) => {\\\\\\\\n          window.alert(\\\\\\\\n            'Geocodes Saved ' + e.position?.[0] + ', ' + e.position?.[1]\\\\\\\\n          )\\\\\\\\n        },\\\\\\\\n        onGeocodingDragEnd: (pos: [number, number]) => {\\\\\\\\n          action('On Geocoding Drag End')(pos)\\\\\\\\n          // setPosition(pos)\\\\\\\\n          // setSearchText('India')\\\\\\\\n        }\\\\\\\\n      }}\\\\\\\\n      showLegendWrapper={boolean('showLegendWrapper', false)}\\\\\\\\n    />\\\\\\\\n  )\\\\\\\\n}\\\\\\\\nexport const GeocodingMap = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <GeocodingMapComponent />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const PolygonMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n  // const [buttonType] = useState<string | null>(null)\\\\\\\\n  // console.log(buttonType)\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[20.5937, 78.9629]}\\\\\\\\n        zoom={4}\\\\\\\\n        zoomControl={boolean('Zoom Controls', true)}\\\\\\\\n        locationSearch={boolean('Location Search Bar', true)}\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height={text('Height', '300px')}\\\\\\\\n        width={text('Width', '800px')}\\\\\\\\n        tiles={\\\\\\\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\\\\\\\n        }\\\\\\\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\\\\\\\n        poi={boolean('Points of interest', false)}\\\\\\\\n        settingConfig={settingConfig}\\\\\\\\n        polygon={object('polygon', polyGeoFenceSampleData)}\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\\\\\\\n        editPopUpComponent={({ map }: any) => (\\\\\\\\n          <EditPopUp\\\\\\\\n            onClick={() => {\\\\\\\\n              map.closePopup()\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        )}\\\\\\\\n        onEdit={action('Value Edited with new Vertex')}\\\\\\\\n        popupCustomComponent={{\\\\\\\\n          tooltipButton: ({ selectedData }: any) => (\\\\\\\\n            <ButtonList\\\\\\\\n              listOfButtons={[\\\\\\\\n                {\\\\\\\\n                  variant: 'button' as tVariant,\\\\\\\\n                  children: 'Edit',\\\\\\\\n                  // intent: 'table' as tIntent,\\\\\\\\n                  iconVariant: 'edit',\\\\\\\\n                  primary: true,\\\\\\\\n                  onClick: () => console.log('Edit', selectedData)\\\\\\\\n                },\\\\\\\\n                {\\\\\\\\n                  variant: 'button' as tVariant,\\\\\\\\n                  children: 'Delete',\\\\\\\\n                  iconVariant: 'icomoon-close',\\\\\\\\n                  // intent: 'table' as tIntent,\\\\\\\\n                  onClick: () => console.log('delete', selectedData)\\\\\\\\n                }\\\\\\\\n              ]}\\\\\\\\n            />\\\\\\\\n          )\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const CircleMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n\\\\\\\\n  // create legend on the basis of markers data\\\\\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Route Mode')\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[20.5937, 78.9629]}\\\\\\\\n        zoom={4}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='300px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        settingConfig={settingConfig}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n        circle={object('circle', circleSampleData)}\\\\\\\\n        onEdit={action('Value Edited with new Vertex')}\\\\\\\\n        editPopUpComponent={({ map }: any) => (\\\\\\\\n          <EditPopUp\\\\\\\\n            onClick={() => {\\\\\\\\n              map.closePopup()\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        )}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\";\\\\n// @ts-ignore\\\\nvar __ADDS_MAP__ = {};\\\\n// @ts-ignore\\\\nvar __MAIN_FILE_LOCATION__ = \\\\\\\"/Map.stories.tsx\\\\\\\";\\\\n// @ts-ignore\\\\nvar __MODULE_DEPENDENCIES__ = [];\\\\n// @ts-ignore\\\\nvar __LOCAL_DEPENDENCIES__ = {};\\\\n// @ts-ignore\\\\nvar __IDS_TO_FRAMEWORKS__ = {};\\\\n        \\\\nimport { action } from '@storybook/addon-actions'\\\\nimport {\\\\n  boolean,\\\\n  object,\\\\n  select,\\\\n  text,\\\\n  withKnobs\\\\n} from '@storybook/addon-knobs'\\\\nimport React from 'react'\\\\nimport LeafletMap from '.'\\\\nimport { path } from '..'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport Settings from '../../atoms/SettingBox/data'\\\\nimport { ButtonList } from '../../molecules/ShowHideColumnPopup'\\\\nimport { tVariant } from '../Button'\\\\nimport { IOption } from '../SettingBox/interface'\\\\nimport {\\\\n  GOOGLE_API_KEY,\\\\n  HERE_MAPS_API_KEY\\\\n} from './constants/googleIntegration.constants'\\\\nimport circleSampleData from './dummyData/CircleSampleData.SampleData'\\\\nimport infowindowStructure from './dummyData/Infowindow.structure.sampleData'\\\\nimport markerIcons from './dummyData/MarkerIcon.sampleData'\\\\nimport markerLayerObj from './dummyData/Markers.sampleData'\\\\nimport polyGeoFenceSampleData from './dummyData/PolyGeoFence.SampleData'\\\\nimport sampleTrackingData from './dummyData/Presentation.Tracking.sampleData'\\\\nimport sampleTripData from './dummyData/Presentation.Trips.sampleData'\\\\nimport { updateSettingsWithLegends } from './helperMethods'\\\\nimport EditPopUp from './SubComponent/EditPopUp'\\\\nimport { tTheme, tTiles } from './types.d'\\\\n\\\\nexport default {parameters: {\\\\\\\"storySource\\\\\\\":{\\\\\\\"source\\\\\\\":\\\\\\\"import { action } from '@storybook/addon-actions'\\\\\\\\nimport {\\\\\\\\n  boolean,\\\\\\\\n  object,\\\\\\\\n  select,\\\\\\\\n  text,\\\\\\\\n  withKnobs\\\\\\\\n} from '@storybook/addon-knobs'\\\\\\\\nimport React from 'react'\\\\\\\\nimport LeafletMap from '.'\\\\\\\\nimport { path } from '..'\\\\\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\\\\\nimport Settings from '../../atoms/SettingBox/data'\\\\\\\\nimport { ButtonList } from '../../molecules/ShowHideColumnPopup'\\\\\\\\nimport { tVariant } from '../Button'\\\\\\\\nimport { IOption } from '../SettingBox/interface'\\\\\\\\nimport {\\\\\\\\n  GOOGLE_API_KEY,\\\\\\\\n  HERE_MAPS_API_KEY\\\\\\\\n} from './constants/googleIntegration.constants'\\\\\\\\nimport circleSampleData from './dummyData/CircleSampleData.SampleData'\\\\\\\\nimport infowindowStructure from './dummyData/Infowindow.structure.sampleData'\\\\\\\\nimport markerIcons from './dummyData/MarkerIcon.sampleData'\\\\\\\\nimport markerLayerObj from './dummyData/Markers.sampleData'\\\\\\\\nimport polyGeoFenceSampleData from './dummyData/PolyGeoFence.SampleData'\\\\\\\\nimport sampleTrackingData from './dummyData/Presentation.Tracking.sampleData'\\\\\\\\nimport sampleTripData from './dummyData/Presentation.Trips.sampleData'\\\\\\\\nimport { updateSettingsWithLegends } from './helperMethods'\\\\\\\\nimport EditPopUp from './SubComponent/EditPopUp'\\\\\\\\nimport { tTheme, tTiles } from './types.d'\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/Map`,\\\\\\\\n  decorators: [withKnobs],\\\\\\\\n  component: LeafletMap\\\\\\\\n}\\\\\\\\n\\\\\\\\n// The options which will be visible for tile-layer select in the story\\\\\\\\nconst tileOptions = {\\\\\\\\n  'open-street-maps': 'osm',\\\\\\\\n  'google-satellite': 'google_satellite',\\\\\\\\n  'google-basic': 'google_roadmap',\\\\\\\\n  'google-terrain': 'google_terrain',\\\\\\\\n  'google-hybrid': 'google_hybrid'\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst themeOptions = {\\\\\\\\n  light: 'light',\\\\\\\\n  dark: 'dark'\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const BaseMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[51.0, 19.0]}\\\\\\\\n        latLngBounds={[[37.09024, -95.712891]]}\\\\\\\\n        // zoom={number('Zoom', 4, { min: 1, max: 24 })}\\\\\\\\n        zoomControl={boolean('Zoom Controls', true)}\\\\\\\\n        locationSearch={boolean('Location Search Bar', true)}\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        heremapsApiKey={HERE_MAPS_API_KEY}\\\\\\\\n        height={text('Height', '300px')}\\\\\\\\n        width={text('Width', '800px')}\\\\\\\\n        tiles={\\\\\\\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\\\\\\\n        }\\\\\\\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\\\\\\\n        poi={boolean('Points of interest', false)}\\\\\\\\n        settingConfig={settingConfig}\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n        rulerControl={boolean('rulerControl', true)}\\\\\\\\n        iconsRef={markerIcons}\\\\\\\\n        // center={array('center', ['37.7749', '-122.4194'])}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const MarkerMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n\\\\\\\\n  // set permission true of markers if sending data,same like heatmap\\\\\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\\\\\n    option.permission = option.name === 'Markers'\\\\\\\\n    option.selected = option.name === 'Markers'\\\\\\\\n  })\\\\\\\\n  settingConfig['Map Mode'].permission = true\\\\\\\\n\\\\\\\\n  // create legend on the basis of markers data\\\\\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[37.09024, -95.712891]}\\\\\\\\n        latLngBounds={[[37.09024, -95.712891]]}\\\\\\\\n        // zoom={4}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='800px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\\\\\n        focusMarkerId={text('Marker Id to focus/open', '')}\\\\\\\\n        iconsRef={markerIcons}\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        settingConfig={settingConfig}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const HeatMapAndMarker = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // set permission true of heatmap if sending data,same like marker\\\\\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\\\\\n    option.permission = true // true for both option\\\\\\\\n    option.selected = option.name === 'Markers' // markers selected first\\\\\\\\n  })\\\\\\\\n  settingConfig['Map Mode'].permission = true\\\\\\\\n  // create legend on the basis of markers data\\\\\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[51.0, 19.0]}\\\\\\\\n        // zoom={4}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='800px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        heatmap={object('Heatmap configuration', {\\\\\\\\n          permission: false,\\\\\\\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\\\\\\\n        })}\\\\\\\\n        settingConfig={settingConfig}\\\\\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\\\\\n        iconsRef={markerIcons}\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const HeatMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // set permission true of heatmap if sending data,same like marker\\\\\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\\\\\n    option.permission = option.name === 'HeatMap'\\\\\\\\n    option.selected = option.name === 'HeatMap'\\\\\\\\n  })\\\\\\\\n  settingConfig['Map Mode'].permission = true\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[51.0, 19.0]}\\\\\\\\n        // zoom={4}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='300px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        heatmap={object('Heatmap configuration', {\\\\\\\\n          permission: true,\\\\\\\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\\\\\\\n        })}\\\\\\\\n        settingConfig={settingConfig}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const TripsMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // create legend on the basis of markers data\\\\\\\\n\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[51.0, 19.0]}\\\\\\\\n        zoom={4}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='300px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        trips={object('Trip Configuration', sampleTripData)}\\\\\\\\n        iconsRef={markerIcons}\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const TrackingMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[33.298959, -111.9724]}\\\\\\\\n        zoom={10}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='300px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        tracking={object('Tracking Configuration', sampleTrackingData)}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst GeocodingMapComponent = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n  // const [searchText, setSearchText] = React.useState(\\\\\\\\n  //   'Mumbai, Maharashtra, India'\\\\\\\\n  // )\\\\\\\\n  // const [position, setPosition] = React.useState([19.0759837, 72.8776559])\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <LeafletMap\\\\\\\\n      id='leafletBaseMap'\\\\\\\\n      classes='baseMap customBaseMap'\\\\\\\\n      googleApiKey={GOOGLE_API_KEY}\\\\\\\\n      settingConfig={settingConfig}\\\\\\\\n      center={[51.0, 19.0]}\\\\\\\\n      // markers={object('Marker Configuration', markerLayerObj)}\\\\\\\\n      iconsRef={markerIcons}\\\\\\\\n      zoomControl\\\\\\\\n      locationSearch\\\\\\\\n      sendLocationOutside={action('sendLocationOutside ')}\\\\\\\\n      isShowMapTileLayer={boolean('isShowMapTileLayer', false)}\\\\\\\\n      geocoding={{\\\\\\\\n        permission: true,\\\\\\\\n\\\\\\\\n        /** If you are passing searchText, ensure to pass the position prop as well. */\\\\\\\\n        searchText: text('searchText', 'Mumbai'),\\\\\\\\n        // searchTextInput: searchText,\\\\\\\\n        position: [19.0759837, 72.8776559],\\\\\\\\n        isSave: boolean('isSave', true),\\\\\\\\n        onGeocodingSave: (e: any) => {\\\\\\\\n          window.alert(\\\\\\\\n            'Geocodes Saved ' + e.position?.[0] + ', ' + e.position?.[1]\\\\\\\\n          )\\\\\\\\n        },\\\\\\\\n        onGeocodingDragEnd: (pos: [number, number]) => {\\\\\\\\n          action('On Geocoding Drag End')(pos)\\\\\\\\n          // setPosition(pos)\\\\\\\\n          // setSearchText('India')\\\\\\\\n        }\\\\\\\\n      }}\\\\\\\\n      showLegendWrapper={boolean('showLegendWrapper', false)}\\\\\\\\n    />\\\\\\\\n  )\\\\\\\\n}\\\\\\\\nexport const GeocodingMap = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <GeocodingMapComponent />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const PolygonMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n  // const [buttonType] = useState<string | null>(null)\\\\\\\\n  // console.log(buttonType)\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[20.5937, 78.9629]}\\\\\\\\n        zoom={4}\\\\\\\\n        zoomControl={boolean('Zoom Controls', true)}\\\\\\\\n        locationSearch={boolean('Location Search Bar', true)}\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height={text('Height', '300px')}\\\\\\\\n        width={text('Width', '800px')}\\\\\\\\n        tiles={\\\\\\\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\\\\\\\n        }\\\\\\\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\\\\\\\n        poi={boolean('Points of interest', false)}\\\\\\\\n        settingConfig={settingConfig}\\\\\\\\n        polygon={object('polygon', polyGeoFenceSampleData)}\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\\\\\\\n        editPopUpComponent={({ map }: any) => (\\\\\\\\n          <EditPopUp\\\\\\\\n            onClick={() => {\\\\\\\\n              map.closePopup()\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        )}\\\\\\\\n        onEdit={action('Value Edited with new Vertex')}\\\\\\\\n        popupCustomComponent={{\\\\\\\\n          tooltipButton: ({ selectedData }: any) => (\\\\\\\\n            <ButtonList\\\\\\\\n              listOfButtons={[\\\\\\\\n                {\\\\\\\\n                  variant: 'button' as tVariant,\\\\\\\\n                  children: 'Edit',\\\\\\\\n                  // intent: 'table' as tIntent,\\\\\\\\n                  iconVariant: 'edit',\\\\\\\\n                  primary: true,\\\\\\\\n                  onClick: () => console.log('Edit', selectedData)\\\\\\\\n                },\\\\\\\\n                {\\\\\\\\n                  variant: 'button' as tVariant,\\\\\\\\n                  children: 'Delete',\\\\\\\\n                  iconVariant: 'icomoon-close',\\\\\\\\n                  // intent: 'table' as tIntent,\\\\\\\\n                  onClick: () => console.log('delete', selectedData)\\\\\\\\n                }\\\\\\\\n              ]}\\\\\\\\n            />\\\\\\\\n          )\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const CircleMap = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n\\\\\\\\n  // create legend on the basis of markers data\\\\\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Route Mode')\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[20.5937, 78.9629]}\\\\\\\\n        zoom={4}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='300px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        settingConfig={settingConfig}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n        circle={object('circle', circleSampleData)}\\\\\\\\n        onEdit={action('Value Edited with new Vertex')}\\\\\\\\n        editPopUpComponent={({ map }: any) => (\\\\\\\\n          <EditPopUp\\\\\\\\n            onClick={() => {\\\\\\\\n              map.closePopup()\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        )}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\",\\\\\\\"locationsMap\\\\\\\":{}},},\\\\n  title: `${path}/Map`,\\\\n  decorators: [withKnobs],\\\\n  component: LeafletMap\\\\n}\\\\n\\\\n// The options which will be visible for tile-layer select in the story\\\\nconst tileOptions = {\\\\n  'open-street-maps': 'osm',\\\\n  'google-satellite': 'google_satellite',\\\\n  'google-basic': 'google_roadmap',\\\\n  'google-terrain': 'google_terrain',\\\\n  'google-hybrid': 'google_hybrid'\\\\n}\\\\n\\\\nconst themeOptions = {\\\\n  light: 'light',\\\\n  dark: 'dark'\\\\n}\\\\n\\\\nexport const BaseMap = addSourceDecorator(() => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        latLngBounds={[[37.09024, -95.712891]]}\\\\n        // zoom={number('Zoom', 4, { min: 1, max: 24 })}\\\\n        zoomControl={boolean('Zoom Controls', true)}\\\\n        locationSearch={boolean('Location Search Bar', true)}\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        heremapsApiKey={HERE_MAPS_API_KEY}\\\\n        height={text('Height', '300px')}\\\\n        width={text('Width', '800px')}\\\\n        tiles={\\\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\\\n        }\\\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\\\n        poi={boolean('Points of interest', false)}\\\\n        settingConfig={settingConfig}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n        rulerControl={boolean('rulerControl', true)}\\\\n        iconsRef={markerIcons}\\\\n        // center={array('center', ['37.7749', '-122.4194'])}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const MarkerMap = addSourceDecorator(() => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n\\\\n  // set permission true of markers if sending data,same like heatmap\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\n    option.permission = option.name === 'Markers'\\\\n    option.selected = option.name === 'Markers'\\\\n  })\\\\n  settingConfig['Map Mode'].permission = true\\\\n\\\\n  // create legend on the basis of markers data\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[37.09024, -95.712891]}\\\\n        latLngBounds={[[37.09024, -95.712891]]}\\\\n        // zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='800px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\n        focusMarkerId={text('Marker Id to focus/open', '')}\\\\n        iconsRef={markerIcons}\\\\n        popupRef={infowindowStructure}\\\\n        settingConfig={settingConfig}\\\\n        onSettingChange={action('setting changed')}\\\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const HeatMapAndMarker = addSourceDecorator(() => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission true of heatmap if sending data,same like marker\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\n    option.permission = true // true for both option\\\\n    option.selected = option.name === 'Markers' // markers selected first\\\\n  })\\\\n  settingConfig['Map Mode'].permission = true\\\\n  // create legend on the basis of markers data\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        // zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='800px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        heatmap={object('Heatmap configuration', {\\\\n          permission: false,\\\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\\\n        })}\\\\n        settingConfig={settingConfig}\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\n        iconsRef={markerIcons}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const HeatMap = addSourceDecorator(() => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission true of heatmap if sending data,same like marker\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\n    option.permission = option.name === 'HeatMap'\\\\n    option.selected = option.name === 'HeatMap'\\\\n  })\\\\n  settingConfig['Map Mode'].permission = true\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        // zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        heatmap={object('Heatmap configuration', {\\\\n          permission: true,\\\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\\\n        })}\\\\n        settingConfig={settingConfig}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const TripsMap = addSourceDecorator(() => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // create legend on the basis of markers data\\\\n\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        trips={object('Trip Configuration', sampleTripData)}\\\\n        iconsRef={markerIcons}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const TrackingMap = addSourceDecorator(() => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[33.298959, -111.9724]}\\\\n        zoom={10}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        tracking={object('Tracking Configuration', sampleTrackingData)}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nconst GeocodingMapComponent = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  // const [searchText, setSearchText] = React.useState(\\\\n  //   'Mumbai, Maharashtra, India'\\\\n  // )\\\\n  // const [position, setPosition] = React.useState([19.0759837, 72.8776559])\\\\n\\\\n  return (\\\\n    <LeafletMap\\\\n      id='leafletBaseMap'\\\\n      classes='baseMap customBaseMap'\\\\n      googleApiKey={GOOGLE_API_KEY}\\\\n      settingConfig={settingConfig}\\\\n      center={[51.0, 19.0]}\\\\n      // markers={object('Marker Configuration', markerLayerObj)}\\\\n      iconsRef={markerIcons}\\\\n      zoomControl\\\\n      locationSearch\\\\n      sendLocationOutside={action('sendLocationOutside ')}\\\\n      isShowMapTileLayer={boolean('isShowMapTileLayer', false)}\\\\n      geocoding={{\\\\n        permission: true,\\\\n\\\\n        /** If you are passing searchText, ensure to pass the position prop as well. */\\\\n        searchText: text('searchText', 'Mumbai'),\\\\n        // searchTextInput: searchText,\\\\n        position: [19.0759837, 72.8776559],\\\\n        isSave: boolean('isSave', true),\\\\n        onGeocodingSave: (e: any) => {\\\\n          window.alert(\\\\n            'Geocodes Saved ' + e.position?.[0] + ', ' + e.position?.[1]\\\\n          )\\\\n        },\\\\n        onGeocodingDragEnd: (pos: [number, number]) => {\\\\n          action('On Geocoding Drag End')(pos)\\\\n          // setPosition(pos)\\\\n          // setSearchText('India')\\\\n        }\\\\n      }}\\\\n      showLegendWrapper={boolean('showLegendWrapper', false)}\\\\n    />\\\\n  )\\\\n}\\\\nexport const GeocodingMap = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <GeocodingMapComponent />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const PolygonMap = addSourceDecorator(() => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  // const [buttonType] = useState<string | null>(null)\\\\n  // console.log(buttonType)\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[20.5937, 78.9629]}\\\\n        zoom={4}\\\\n        zoomControl={boolean('Zoom Controls', true)}\\\\n        locationSearch={boolean('Location Search Bar', true)}\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height={text('Height', '300px')}\\\\n        width={text('Width', '800px')}\\\\n        tiles={\\\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\\\n        }\\\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\\\n        poi={boolean('Points of interest', false)}\\\\n        settingConfig={settingConfig}\\\\n        polygon={object('polygon', polyGeoFenceSampleData)}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\\\n        editPopUpComponent={({ map }: any) => (\\\\n          <EditPopUp\\\\n            onClick={() => {\\\\n              map.closePopup()\\\\n            }}\\\\n          />\\\\n        )}\\\\n        onEdit={action('Value Edited with new Vertex')}\\\\n        popupCustomComponent={{\\\\n          tooltipButton: ({ selectedData }: any) => (\\\\n            <ButtonList\\\\n              listOfButtons={[\\\\n                {\\\\n                  variant: 'button' as tVariant,\\\\n                  children: 'Edit',\\\\n                  // intent: 'table' as tIntent,\\\\n                  iconVariant: 'edit',\\\\n                  primary: true,\\\\n                  onClick: () => console.log('Edit', selectedData)\\\\n                },\\\\n                {\\\\n                  variant: 'button' as tVariant,\\\\n                  children: 'Delete',\\\\n                  iconVariant: 'icomoon-close',\\\\n                  // intent: 'table' as tIntent,\\\\n                  onClick: () => console.log('delete', selectedData)\\\\n                }\\\\n              ]}\\\\n            />\\\\n          )\\\\n        }}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const CircleMap = addSourceDecorator(() => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n\\\\n  // create legend on the basis of markers data\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Route Mode')\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[20.5937, 78.9629]}\\\\n        zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        popupRef={infowindowStructure}\\\\n        settingConfig={settingConfig}\\\\n        onSettingChange={action('setting changed')}\\\\n        circle={object('circle', circleSampleData)}\\\\n        onEdit={action('Value Edited with new Vertex')}\\\\n        editPopUpComponent={({ map }: any) => (\\\\n          <EditPopUp\\\\n            onClick={() => {\\\\n              map.closePopup()\\\\n            }}\\\\n          />\\\\n        )}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\",\\\"locationsMap\\\":{}},\\\"storySource\\\":{\\\"source\\\":\\\"import { action } from '@storybook/addon-actions'\\\\nimport {\\\\n  boolean,\\\\n  object,\\\\n  select,\\\\n  text,\\\\n  withKnobs\\\\n} from '@storybook/addon-knobs'\\\\nimport React from 'react'\\\\nimport LeafletMap from '.'\\\\nimport { path } from '..'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport Settings from '../../atoms/SettingBox/data'\\\\nimport { ButtonList } from '../../molecules/ShowHideColumnPopup'\\\\nimport { tVariant } from '../Button'\\\\nimport { IOption } from '../SettingBox/interface'\\\\nimport {\\\\n  GOOGLE_API_KEY,\\\\n  HERE_MAPS_API_KEY\\\\n} from './constants/googleIntegration.constants'\\\\nimport circleSampleData from './dummyData/CircleSampleData.SampleData'\\\\nimport infowindowStructure from './dummyData/Infowindow.structure.sampleData'\\\\nimport markerIcons from './dummyData/MarkerIcon.sampleData'\\\\nimport markerLayerObj from './dummyData/Markers.sampleData'\\\\nimport polyGeoFenceSampleData from './dummyData/PolyGeoFence.SampleData'\\\\nimport sampleTrackingData from './dummyData/Presentation.Tracking.sampleData'\\\\nimport sampleTripData from './dummyData/Presentation.Trips.sampleData'\\\\nimport { updateSettingsWithLegends } from './helperMethods'\\\\nimport EditPopUp from './SubComponent/EditPopUp'\\\\nimport { tTheme, tTiles } from './types.d'\\\\n\\\\nexport default {\\\\n  title: `${path}/Map`,\\\\n  decorators: [withKnobs],\\\\n  component: LeafletMap\\\\n}\\\\n\\\\n// The options which will be visible for tile-layer select in the story\\\\nconst tileOptions = {\\\\n  'open-street-maps': 'osm',\\\\n  'google-satellite': 'google_satellite',\\\\n  'google-basic': 'google_roadmap',\\\\n  'google-terrain': 'google_terrain',\\\\n  'google-hybrid': 'google_hybrid'\\\\n}\\\\n\\\\nconst themeOptions = {\\\\n  light: 'light',\\\\n  dark: 'dark'\\\\n}\\\\n\\\\nexport const BaseMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        latLngBounds={[[37.09024, -95.712891]]}\\\\n        // zoom={number('Zoom', 4, { min: 1, max: 24 })}\\\\n        zoomControl={boolean('Zoom Controls', true)}\\\\n        locationSearch={boolean('Location Search Bar', true)}\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        heremapsApiKey={HERE_MAPS_API_KEY}\\\\n        height={text('Height', '300px')}\\\\n        width={text('Width', '800px')}\\\\n        tiles={\\\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\\\n        }\\\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\\\n        poi={boolean('Points of interest', false)}\\\\n        settingConfig={settingConfig}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n        rulerControl={boolean('rulerControl', true)}\\\\n        iconsRef={markerIcons}\\\\n        // center={array('center', ['37.7749', '-122.4194'])}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const MarkerMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n\\\\n  // set permission true of markers if sending data,same like heatmap\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\n    option.permission = option.name === 'Markers'\\\\n    option.selected = option.name === 'Markers'\\\\n  })\\\\n  settingConfig['Map Mode'].permission = true\\\\n\\\\n  // create legend on the basis of markers data\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[37.09024, -95.712891]}\\\\n        latLngBounds={[[37.09024, -95.712891]]}\\\\n        // zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='800px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\n        focusMarkerId={text('Marker Id to focus/open', '')}\\\\n        iconsRef={markerIcons}\\\\n        popupRef={infowindowStructure}\\\\n        settingConfig={settingConfig}\\\\n        onSettingChange={action('setting changed')}\\\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const HeatMapAndMarker = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission true of heatmap if sending data,same like marker\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\n    option.permission = true // true for both option\\\\n    option.selected = option.name === 'Markers' // markers selected first\\\\n  })\\\\n  settingConfig['Map Mode'].permission = true\\\\n  // create legend on the basis of markers data\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        // zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='800px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        heatmap={object('Heatmap configuration', {\\\\n          permission: false,\\\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\\\n        })}\\\\n        settingConfig={settingConfig}\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\n        iconsRef={markerIcons}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const HeatMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission true of heatmap if sending data,same like marker\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\n    option.permission = option.name === 'HeatMap'\\\\n    option.selected = option.name === 'HeatMap'\\\\n  })\\\\n  settingConfig['Map Mode'].permission = true\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        // zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        heatmap={object('Heatmap configuration', {\\\\n          permission: true,\\\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\\\n        })}\\\\n        settingConfig={settingConfig}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const TripsMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // create legend on the basis of markers data\\\\n\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        trips={object('Trip Configuration', sampleTripData)}\\\\n        iconsRef={markerIcons}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const TrackingMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[33.298959, -111.9724]}\\\\n        zoom={10}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        tracking={object('Tracking Configuration', sampleTrackingData)}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nconst GeocodingMapComponent = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  // const [searchText, setSearchText] = React.useState(\\\\n  //   'Mumbai, Maharashtra, India'\\\\n  // )\\\\n  // const [position, setPosition] = React.useState([19.0759837, 72.8776559])\\\\n\\\\n  return (\\\\n    <LeafletMap\\\\n      id='leafletBaseMap'\\\\n      classes='baseMap customBaseMap'\\\\n      googleApiKey={GOOGLE_API_KEY}\\\\n      settingConfig={settingConfig}\\\\n      center={[51.0, 19.0]}\\\\n      // markers={object('Marker Configuration', markerLayerObj)}\\\\n      iconsRef={markerIcons}\\\\n      zoomControl\\\\n      locationSearch\\\\n      sendLocationOutside={action('sendLocationOutside ')}\\\\n      isShowMapTileLayer={boolean('isShowMapTileLayer', false)}\\\\n      geocoding={{\\\\n        permission: true,\\\\n\\\\n        /** If you are passing searchText, ensure to pass the position prop as well. */\\\\n        searchText: text('searchText', 'Mumbai'),\\\\n        // searchTextInput: searchText,\\\\n        position: [19.0759837, 72.8776559],\\\\n        isSave: boolean('isSave', true),\\\\n        onGeocodingSave: (e: any) => {\\\\n          window.alert(\\\\n            'Geocodes Saved ' + e.position?.[0] + ', ' + e.position?.[1]\\\\n          )\\\\n        },\\\\n        onGeocodingDragEnd: (pos: [number, number]) => {\\\\n          action('On Geocoding Drag End')(pos)\\\\n          // setPosition(pos)\\\\n          // setSearchText('India')\\\\n        }\\\\n      }}\\\\n      showLegendWrapper={boolean('showLegendWrapper', false)}\\\\n    />\\\\n  )\\\\n}\\\\nexport const GeocodingMap = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <GeocodingMapComponent />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const PolygonMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  // const [buttonType] = useState<string | null>(null)\\\\n  // console.log(buttonType)\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[20.5937, 78.9629]}\\\\n        zoom={4}\\\\n        zoomControl={boolean('Zoom Controls', true)}\\\\n        locationSearch={boolean('Location Search Bar', true)}\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height={text('Height', '300px')}\\\\n        width={text('Width', '800px')}\\\\n        tiles={\\\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\\\n        }\\\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\\\n        poi={boolean('Points of interest', false)}\\\\n        settingConfig={settingConfig}\\\\n        polygon={object('polygon', polyGeoFenceSampleData)}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\\\n        editPopUpComponent={({ map }: any) => (\\\\n          <EditPopUp\\\\n            onClick={() => {\\\\n              map.closePopup()\\\\n            }}\\\\n          />\\\\n        )}\\\\n        onEdit={action('Value Edited with new Vertex')}\\\\n        popupCustomComponent={{\\\\n          tooltipButton: ({ selectedData }: any) => (\\\\n            <ButtonList\\\\n              listOfButtons={[\\\\n                {\\\\n                  variant: 'button' as tVariant,\\\\n                  children: 'Edit',\\\\n                  // intent: 'table' as tIntent,\\\\n                  iconVariant: 'edit',\\\\n                  primary: true,\\\\n                  onClick: () => console.log('Edit', selectedData)\\\\n                },\\\\n                {\\\\n                  variant: 'button' as tVariant,\\\\n                  children: 'Delete',\\\\n                  iconVariant: 'icomoon-close',\\\\n                  // intent: 'table' as tIntent,\\\\n                  onClick: () => console.log('delete', selectedData)\\\\n                }\\\\n              ]}\\\\n            />\\\\n          )\\\\n        }}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const CircleMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n\\\\n  // create legend on the basis of markers data\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Route Mode')\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[20.5937, 78.9629]}\\\\n        zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        popupRef={infowindowStructure}\\\\n        settingConfig={settingConfig}\\\\n        onSettingChange={action('setting changed')}\\\\n        circle={object('circle', circleSampleData)}\\\\n        onEdit={action('Value Edited with new Vertex')}\\\\n        editPopUpComponent={({ map }: any) => (\\\\n          <EditPopUp\\\\n            onClick={() => {\\\\n              map.closePopup()\\\\n            }}\\\\n          />\\\\n        )}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\",\\\"locationsMap\\\":{}},},\\n  title: `${path}/Map`,\\n  decorators: [withKnobs],\\n  component: LeafletMap\\n}\\n\\n// The options which will be visible for tile-layer select in the story\\nconst tileOptions = {\\n  'open-street-maps': 'osm',\\n  'google-satellite': 'google_satellite',\\n  'google-basic': 'google_roadmap',\\n  'google-terrain': 'google_terrain',\\n  'google-hybrid': 'google_hybrid'\\n}\\n\\nconst themeOptions = {\\n  light: 'light',\\n  dark: 'dark'\\n}\\n\\nexport const BaseMap = addSourceDecorator(addSourceDecorator(() => {\\n  const settingConfig = Object.assign({}, Settings)\\n  // set permission false, so that map mode will be hidden\\n  settingConfig['Map Mode'].permission = false\\n\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[51.0, 19.0]}\\n        latLngBounds={[[37.09024, -95.712891]]}\\n        // zoom={number('Zoom', 4, { min: 1, max: 24 })}\\n        zoomControl={boolean('Zoom Controls', true)}\\n        locationSearch={boolean('Location Search Bar', true)}\\n        googleApiKey={GOOGLE_API_KEY}\\n        heremapsApiKey={HERE_MAPS_API_KEY}\\n        height={text('Height', '300px')}\\n        width={text('Width', '800px')}\\n        tiles={\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\n        }\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\n        poi={boolean('Points of interest', false)}\\n        settingConfig={settingConfig}\\n        popupRef={infowindowStructure}\\n        onSettingChange={action('setting changed')}\\n        rulerControl={boolean('rulerControl', true)}\\n        iconsRef={markerIcons}\\n        // center={array('center', ['37.7749', '-122.4194'])}\\n      />\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const MarkerMap = addSourceDecorator(addSourceDecorator(() => {\\n  const settingConfig = Object.assign({}, Settings)\\n\\n  // set permission true of markers if sending data,same like heatmap\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\n    option.permission = option.name === 'Markers'\\n    option.selected = option.name === 'Markers'\\n  })\\n  settingConfig['Map Mode'].permission = true\\n\\n  // create legend on the basis of markers data\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\n\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[37.09024, -95.712891]}\\n        latLngBounds={[[37.09024, -95.712891]]}\\n        // zoom={4}\\n        zoomControl\\n        locationSearch\\n        googleApiKey={GOOGLE_API_KEY}\\n        height='800px'\\n        width='800px'\\n        tiles='google_roadmap'\\n        markers={object('Marker Configuration', markerLayerObj)}\\n        focusMarkerId={text('Marker Id to focus/open', '')}\\n        iconsRef={markerIcons}\\n        popupRef={infowindowStructure}\\n        settingConfig={settingConfig}\\n        onSettingChange={action('setting changed')}\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\n      />\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const HeatMapAndMarker = addSourceDecorator(addSourceDecorator(() => {\\n  const settingConfig = Object.assign({}, Settings)\\n  // set permission true of heatmap if sending data,same like marker\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\n    option.permission = true // true for both option\\n    option.selected = option.name === 'Markers' // markers selected first\\n  })\\n  settingConfig['Map Mode'].permission = true\\n  // create legend on the basis of markers data\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\n\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[51.0, 19.0]}\\n        // zoom={4}\\n        zoomControl\\n        locationSearch\\n        googleApiKey={GOOGLE_API_KEY}\\n        height='800px'\\n        width='800px'\\n        tiles='google_roadmap'\\n        heatmap={object('Heatmap configuration', {\\n          permission: false,\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\n        })}\\n        settingConfig={settingConfig}\\n        markers={object('Marker Configuration', markerLayerObj)}\\n        iconsRef={markerIcons}\\n        popupRef={infowindowStructure}\\n        onSettingChange={action('setting changed')}\\n      />\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const HeatMap = addSourceDecorator(addSourceDecorator(() => {\\n  const settingConfig = Object.assign({}, Settings)\\n  // set permission true of heatmap if sending data,same like marker\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\n    option.permission = option.name === 'HeatMap'\\n    option.selected = option.name === 'HeatMap'\\n  })\\n  settingConfig['Map Mode'].permission = true\\n\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[51.0, 19.0]}\\n        // zoom={4}\\n        zoomControl\\n        locationSearch\\n        googleApiKey={GOOGLE_API_KEY}\\n        height='300px'\\n        width='800px'\\n        tiles='google_roadmap'\\n        heatmap={object('Heatmap configuration', {\\n          permission: true,\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\n        })}\\n        settingConfig={settingConfig}\\n        onSettingChange={action('setting changed')}\\n      />\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const TripsMap = addSourceDecorator(addSourceDecorator(() => {\\n  const settingConfig = Object.assign({}, Settings)\\n  // create legend on the basis of markers data\\n\\n  // set permission false, so that map mode will be hidden\\n  settingConfig['Map Mode'].permission = false\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[51.0, 19.0]}\\n        zoom={4}\\n        zoomControl\\n        locationSearch\\n        googleApiKey={GOOGLE_API_KEY}\\n        height='300px'\\n        width='800px'\\n        tiles='google_roadmap'\\n        trips={object('Trip Configuration', sampleTripData)}\\n        iconsRef={markerIcons}\\n        popupRef={infowindowStructure}\\n        onSettingChange={action('setting changed')}\\n      />\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const TrackingMap = addSourceDecorator(addSourceDecorator(() => {\\n  const settingConfig = Object.assign({}, Settings)\\n\\n  // set permission false, so that map mode will be hidden\\n  settingConfig['Map Mode'].permission = false\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[33.298959, -111.9724]}\\n        zoom={10}\\n        zoomControl\\n        locationSearch\\n        googleApiKey={GOOGLE_API_KEY}\\n        height='300px'\\n        width='800px'\\n        tiles='google_roadmap'\\n        tracking={object('Tracking Configuration', sampleTrackingData)}\\n        onSettingChange={action('setting changed')}\\n      />\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nconst GeocodingMapComponent = () => {\\n  const settingConfig = Object.assign({}, Settings)\\n  // set permission false, so that map mode will be hidden\\n  settingConfig['Map Mode'].permission = false\\n  // const [searchText, setSearchText] = React.useState(\\n  //   'Mumbai, Maharashtra, India'\\n  // )\\n  // const [position, setPosition] = React.useState([19.0759837, 72.8776559])\\n\\n  return (\\n    <LeafletMap\\n      id='leafletBaseMap'\\n      classes='baseMap customBaseMap'\\n      googleApiKey={GOOGLE_API_KEY}\\n      settingConfig={settingConfig}\\n      center={[51.0, 19.0]}\\n      // markers={object('Marker Configuration', markerLayerObj)}\\n      iconsRef={markerIcons}\\n      zoomControl\\n      locationSearch\\n      sendLocationOutside={action('sendLocationOutside ')}\\n      isShowMapTileLayer={boolean('isShowMapTileLayer', false)}\\n      geocoding={{\\n        permission: true,\\n\\n        /** If you are passing searchText, ensure to pass the position prop as well. */\\n        searchText: text('searchText', 'Mumbai'),\\n        // searchTextInput: searchText,\\n        position: [19.0759837, 72.8776559],\\n        isSave: boolean('isSave', true),\\n        onGeocodingSave: (e: any) => {\\n          window.alert(\\n            'Geocodes Saved ' + e.position?.[0] + ', ' + e.position?.[1]\\n          )\\n        },\\n        onGeocodingDragEnd: (pos: [number, number]) => {\\n          action('On Geocoding Drag End')(pos)\\n          // setPosition(pos)\\n          // setSearchText('India')\\n        }\\n      }}\\n      showLegendWrapper={boolean('showLegendWrapper', false)}\\n    />\\n  )\\n}\\nexport const GeocodingMap = addSourceDecorator(addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <GeocodingMapComponent />\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const PolygonMap = addSourceDecorator(addSourceDecorator(() => {\\n  const settingConfig = Object.assign({}, Settings)\\n  // set permission false, so that map mode will be hidden\\n  settingConfig['Map Mode'].permission = false\\n  // const [buttonType] = useState<string | null>(null)\\n  // console.log(buttonType)\\n\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[20.5937, 78.9629]}\\n        zoom={4}\\n        zoomControl={boolean('Zoom Controls', true)}\\n        locationSearch={boolean('Location Search Bar', true)}\\n        googleApiKey={GOOGLE_API_KEY}\\n        height={text('Height', '300px')}\\n        width={text('Width', '800px')}\\n        tiles={\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\n        }\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\n        poi={boolean('Points of interest', false)}\\n        settingConfig={settingConfig}\\n        polygon={object('polygon', polyGeoFenceSampleData)}\\n        popupRef={infowindowStructure}\\n        onSettingChange={action('setting changed')}\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\n        editPopUpComponent={({ map }: any) => (\\n          <EditPopUp\\n            onClick={() => {\\n              map.closePopup()\\n            }}\\n          />\\n        )}\\n        onEdit={action('Value Edited with new Vertex')}\\n        popupCustomComponent={{\\n          tooltipButton: ({ selectedData }: any) => (\\n            <ButtonList\\n              listOfButtons={[\\n                {\\n                  variant: 'button' as tVariant,\\n                  children: 'Edit',\\n                  // intent: 'table' as tIntent,\\n                  iconVariant: 'edit',\\n                  primary: true,\\n                  onClick: () => console.log('Edit', selectedData)\\n                },\\n                {\\n                  variant: 'button' as tVariant,\\n                  children: 'Delete',\\n                  iconVariant: 'icomoon-close',\\n                  // intent: 'table' as tIntent,\\n                  onClick: () => console.log('delete', selectedData)\\n                }\\n              ]}\\n            />\\n          )\\n        }}\\n      />\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const CircleMap = addSourceDecorator(addSourceDecorator(() => {\\n  const settingConfig = Object.assign({}, Settings)\\n\\n  // set permission false, so that map mode will be hidden\\n  settingConfig['Map Mode'].permission = false\\n\\n  // create legend on the basis of markers data\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Route Mode')\\n\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[20.5937, 78.9629]}\\n        zoom={4}\\n        zoomControl\\n        locationSearch\\n        googleApiKey={GOOGLE_API_KEY}\\n        height='300px'\\n        width='800px'\\n        tiles='google_roadmap'\\n        popupRef={infowindowStructure}\\n        settingConfig={settingConfig}\\n        onSettingChange={action('setting changed')}\\n        circle={object('circle', circleSampleData)}\\n        onEdit={action('Value Edited with new Vertex')}\\n        editPopUpComponent={({ map }: any) => (\\n          <EditPopUp\\n            onClick={() => {\\n              map.closePopup()\\n            }}\\n          />\\n        )}\\n      />\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\",\"locationsMap\":{}},\"storySource\":{\"source\":\"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/farhanansari/Code/ui-library/src/components/atoms/Map\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"import { action } from '@storybook/addon-actions'\\\\nimport {\\\\n  boolean,\\\\n  object,\\\\n  select,\\\\n  text,\\\\n  withKnobs\\\\n} from '@storybook/addon-knobs'\\\\nimport React from 'react'\\\\nimport LeafletMap from '.'\\\\nimport { path } from '..'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport Settings from '../../atoms/SettingBox/data'\\\\nimport { ButtonList } from '../../molecules/ShowHideColumnPopup'\\\\nimport { tVariant } from '../Button'\\\\nimport { IOption } from '../SettingBox/interface'\\\\nimport {\\\\n  GOOGLE_API_KEY,\\\\n  HERE_MAPS_API_KEY\\\\n} from './constants/googleIntegration.constants'\\\\nimport circleSampleData from './dummyData/CircleSampleData.SampleData'\\\\nimport infowindowStructure from './dummyData/Infowindow.structure.sampleData'\\\\nimport markerIcons from './dummyData/MarkerIcon.sampleData'\\\\nimport markerLayerObj from './dummyData/Markers.sampleData'\\\\nimport polyGeoFenceSampleData from './dummyData/PolyGeoFence.SampleData'\\\\nimport sampleTrackingData from './dummyData/Presentation.Tracking.sampleData'\\\\nimport sampleTripData from './dummyData/Presentation.Trips.sampleData'\\\\nimport { updateSettingsWithLegends } from './helperMethods'\\\\nimport EditPopUp from './SubComponent/EditPopUp'\\\\nimport { tTheme, tTiles } from './types.d'\\\\n\\\\nexport default {\\\\n  title: `${path}/Map`,\\\\n  decorators: [withKnobs],\\\\n  component: LeafletMap\\\\n}\\\\n\\\\n// The options which will be visible for tile-layer select in the story\\\\nconst tileOptions = {\\\\n  'open-street-maps': 'osm',\\\\n  'google-satellite': 'google_satellite',\\\\n  'google-basic': 'google_roadmap',\\\\n  'google-terrain': 'google_terrain',\\\\n  'google-hybrid': 'google_hybrid'\\\\n}\\\\n\\\\nconst themeOptions = {\\\\n  light: 'light',\\\\n  dark: 'dark'\\\\n}\\\\n\\\\nexport const BaseMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        latLngBounds={[[37.09024, -95.712891]]}\\\\n        // zoom={number('Zoom', 4, { min: 1, max: 24 })}\\\\n        zoomControl={boolean('Zoom Controls', true)}\\\\n        locationSearch={boolean('Location Search Bar', true)}\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        heremapsApiKey={HERE_MAPS_API_KEY}\\\\n        height={text('Height', '300px')}\\\\n        width={text('Width', '800px')}\\\\n        tiles={\\\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\\\n        }\\\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\\\n        poi={boolean('Points of interest', false)}\\\\n        settingConfig={settingConfig}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n        rulerControl={boolean('rulerControl', true)}\\\\n        iconsRef={markerIcons}\\\\n        // center={array('center', ['37.7749', '-122.4194'])}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const MarkerMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n\\\\n  // set permission true of markers if sending data,same like heatmap\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\n    option.permission = option.name === 'Markers'\\\\n    option.selected = option.name === 'Markers'\\\\n  })\\\\n  settingConfig['Map Mode'].permission = true\\\\n\\\\n  // create legend on the basis of markers data\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[37.09024, -95.712891]}\\\\n        latLngBounds={[[37.09024, -95.712891]]}\\\\n        // zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='800px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\n        focusMarkerId={text('Marker Id to focus/open', '')}\\\\n        iconsRef={markerIcons}\\\\n        popupRef={infowindowStructure}\\\\n        settingConfig={settingConfig}\\\\n        onSettingChange={action('setting changed')}\\\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const HeatMapAndMarker = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission true of heatmap if sending data,same like marker\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\n    option.permission = true // true for both option\\\\n    option.selected = option.name === 'Markers' // markers selected first\\\\n  })\\\\n  settingConfig['Map Mode'].permission = true\\\\n  // create legend on the basis of markers data\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        // zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='800px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        heatmap={object('Heatmap configuration', {\\\\n          permission: false,\\\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\\\n        })}\\\\n        settingConfig={settingConfig}\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\n        iconsRef={markerIcons}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const HeatMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission true of heatmap if sending data,same like marker\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\n    option.permission = option.name === 'HeatMap'\\\\n    option.selected = option.name === 'HeatMap'\\\\n  })\\\\n  settingConfig['Map Mode'].permission = true\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        // zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        heatmap={object('Heatmap configuration', {\\\\n          permission: true,\\\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\\\n        })}\\\\n        settingConfig={settingConfig}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const TripsMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // create legend on the basis of markers data\\\\n\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        trips={object('Trip Configuration', sampleTripData)}\\\\n        iconsRef={markerIcons}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const TrackingMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[33.298959, -111.9724]}\\\\n        zoom={10}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        tracking={object('Tracking Configuration', sampleTrackingData)}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nconst GeocodingMapComponent = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  // const [searchText, setSearchText] = React.useState(\\\\n  //   'Mumbai, Maharashtra, India'\\\\n  // )\\\\n  // const [position, setPosition] = React.useState([19.0759837, 72.8776559])\\\\n\\\\n  return (\\\\n    <LeafletMap\\\\n      id='leafletBaseMap'\\\\n      classes='baseMap customBaseMap'\\\\n      googleApiKey={GOOGLE_API_KEY}\\\\n      settingConfig={settingConfig}\\\\n      center={[51.0, 19.0]}\\\\n      // markers={object('Marker Configuration', markerLayerObj)}\\\\n      iconsRef={markerIcons}\\\\n      zoomControl\\\\n      locationSearch\\\\n      sendLocationOutside={action('sendLocationOutside ')}\\\\n      isShowMapTileLayer={boolean('isShowMapTileLayer', false)}\\\\n      geocoding={{\\\\n        permission: true,\\\\n\\\\n        /** If you are passing searchText, ensure to pass the position prop as well. */\\\\n        searchText: text('searchText', 'Mumbai'),\\\\n        // searchTextInput: searchText,\\\\n        position: [19.0759837, 72.8776559],\\\\n        isSave: boolean('isSave', true),\\\\n        onGeocodingSave: (e: any) => {\\\\n          window.alert(\\\\n            'Geocodes Saved ' + e.position?.[0] + ', ' + e.position?.[1]\\\\n          )\\\\n        },\\\\n        onGeocodingDragEnd: (pos: [number, number]) => {\\\\n          action('On Geocoding Drag End')(pos)\\\\n          // setPosition(pos)\\\\n          // setSearchText('India')\\\\n        }\\\\n      }}\\\\n      showLegendWrapper={boolean('showLegendWrapper', false)}\\\\n    />\\\\n  )\\\\n}\\\\nexport const GeocodingMap = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <GeocodingMapComponent />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const PolygonMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  // const [buttonType] = useState<string | null>(null)\\\\n  // console.log(buttonType)\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[20.5937, 78.9629]}\\\\n        zoom={4}\\\\n        zoomControl={boolean('Zoom Controls', true)}\\\\n        locationSearch={boolean('Location Search Bar', true)}\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height={text('Height', '300px')}\\\\n        width={text('Width', '800px')}\\\\n        tiles={\\\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\\\n        }\\\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\\\n        poi={boolean('Points of interest', false)}\\\\n        settingConfig={settingConfig}\\\\n        polygon={object('polygon', polyGeoFenceSampleData)}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\\\n        editPopUpComponent={({ map }: any) => (\\\\n          <EditPopUp\\\\n            onClick={() => {\\\\n              map.closePopup()\\\\n            }}\\\\n          />\\\\n        )}\\\\n        onEdit={action('Value Edited with new Vertex')}\\\\n        popupCustomComponent={{\\\\n          tooltipButton: ({ selectedData }: any) => (\\\\n            <ButtonList\\\\n              listOfButtons={[\\\\n                {\\\\n                  variant: 'button' as tVariant,\\\\n                  children: 'Edit',\\\\n                  // intent: 'table' as tIntent,\\\\n                  iconVariant: 'edit',\\\\n                  primary: true,\\\\n                  onClick: () => console.log('Edit', selectedData)\\\\n                },\\\\n                {\\\\n                  variant: 'button' as tVariant,\\\\n                  children: 'Delete',\\\\n                  iconVariant: 'icomoon-close',\\\\n                  // intent: 'table' as tIntent,\\\\n                  onClick: () => console.log('delete', selectedData)\\\\n                }\\\\n              ]}\\\\n            />\\\\n          )\\\\n        }}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const CircleMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n\\\\n  // create legend on the basis of markers data\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Route Mode')\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[20.5937, 78.9629]}\\\\n        zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        popupRef={infowindowStructure}\\\\n        settingConfig={settingConfig}\\\\n        onSettingChange={action('setting changed')}\\\\n        circle={object('circle', circleSampleData)}\\\\n        onEdit={action('Value Edited with new Vertex')}\\\\n        editPopUpComponent={({ map }: any) => (\\\\n          <EditPopUp\\\\n            onClick={() => {\\\\n              map.closePopup()\\\\n            }}\\\\n          />\\\\n        )}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/Map.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\nimport { action } from '@storybook/addon-actions'\\nimport {\\n  boolean,\\n  object,\\n  select,\\n  text,\\n  withKnobs\\n} from '@storybook/addon-knobs'\\nimport React from 'react'\\nimport LeafletMap from '.'\\nimport { path } from '..'\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\nimport Settings from '../../atoms/SettingBox/data'\\nimport { ButtonList } from '../../molecules/ShowHideColumnPopup'\\nimport { tVariant } from '../Button'\\nimport { IOption } from '../SettingBox/interface'\\nimport {\\n  GOOGLE_API_KEY,\\n  HERE_MAPS_API_KEY\\n} from './constants/googleIntegration.constants'\\nimport circleSampleData from './dummyData/CircleSampleData.SampleData'\\nimport infowindowStructure from './dummyData/Infowindow.structure.sampleData'\\nimport markerIcons from './dummyData/MarkerIcon.sampleData'\\nimport markerLayerObj from './dummyData/Markers.sampleData'\\nimport polyGeoFenceSampleData from './dummyData/PolyGeoFence.SampleData'\\nimport sampleTrackingData from './dummyData/Presentation.Tracking.sampleData'\\nimport sampleTripData from './dummyData/Presentation.Trips.sampleData'\\nimport { updateSettingsWithLegends } from './helperMethods'\\nimport EditPopUp from './SubComponent/EditPopUp'\\nimport { tTheme, tTiles } from './types.d'\\n\\nexport default {parameters: {\\\"storySource\\\":{\\\"source\\\":\\\"import { action } from '@storybook/addon-actions'\\\\nimport {\\\\n  boolean,\\\\n  object,\\\\n  select,\\\\n  text,\\\\n  withKnobs\\\\n} from '@storybook/addon-knobs'\\\\nimport React from 'react'\\\\nimport LeafletMap from '.'\\\\nimport { path } from '..'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport Settings from '../../atoms/SettingBox/data'\\\\nimport { ButtonList } from '../../molecules/ShowHideColumnPopup'\\\\nimport { tVariant } from '../Button'\\\\nimport { IOption } from '../SettingBox/interface'\\\\nimport {\\\\n  GOOGLE_API_KEY,\\\\n  HERE_MAPS_API_KEY\\\\n} from './constants/googleIntegration.constants'\\\\nimport circleSampleData from './dummyData/CircleSampleData.SampleData'\\\\nimport infowindowStructure from './dummyData/Infowindow.structure.sampleData'\\\\nimport markerIcons from './dummyData/MarkerIcon.sampleData'\\\\nimport markerLayerObj from './dummyData/Markers.sampleData'\\\\nimport polyGeoFenceSampleData from './dummyData/PolyGeoFence.SampleData'\\\\nimport sampleTrackingData from './dummyData/Presentation.Tracking.sampleData'\\\\nimport sampleTripData from './dummyData/Presentation.Trips.sampleData'\\\\nimport { updateSettingsWithLegends } from './helperMethods'\\\\nimport EditPopUp from './SubComponent/EditPopUp'\\\\nimport { tTheme, tTiles } from './types.d'\\\\n\\\\nexport default {\\\\n  title: `${path}/Map`,\\\\n  decorators: [withKnobs],\\\\n  component: LeafletMap\\\\n}\\\\n\\\\n// The options which will be visible for tile-layer select in the story\\\\nconst tileOptions = {\\\\n  'open-street-maps': 'osm',\\\\n  'google-satellite': 'google_satellite',\\\\n  'google-basic': 'google_roadmap',\\\\n  'google-terrain': 'google_terrain',\\\\n  'google-hybrid': 'google_hybrid'\\\\n}\\\\n\\\\nconst themeOptions = {\\\\n  light: 'light',\\\\n  dark: 'dark'\\\\n}\\\\n\\\\nexport const BaseMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        latLngBounds={[[37.09024, -95.712891]]}\\\\n        // zoom={number('Zoom', 4, { min: 1, max: 24 })}\\\\n        zoomControl={boolean('Zoom Controls', true)}\\\\n        locationSearch={boolean('Location Search Bar', true)}\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        heremapsApiKey={HERE_MAPS_API_KEY}\\\\n        height={text('Height', '300px')}\\\\n        width={text('Width', '800px')}\\\\n        tiles={\\\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\\\n        }\\\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\\\n        poi={boolean('Points of interest', false)}\\\\n        settingConfig={settingConfig}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n        rulerControl={boolean('rulerControl', true)}\\\\n        iconsRef={markerIcons}\\\\n        // center={array('center', ['37.7749', '-122.4194'])}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const MarkerMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n\\\\n  // set permission true of markers if sending data,same like heatmap\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\n    option.permission = option.name === 'Markers'\\\\n    option.selected = option.name === 'Markers'\\\\n  })\\\\n  settingConfig['Map Mode'].permission = true\\\\n\\\\n  // create legend on the basis of markers data\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[37.09024, -95.712891]}\\\\n        latLngBounds={[[37.09024, -95.712891]]}\\\\n        // zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='800px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\n        focusMarkerId={text('Marker Id to focus/open', '')}\\\\n        iconsRef={markerIcons}\\\\n        popupRef={infowindowStructure}\\\\n        settingConfig={settingConfig}\\\\n        onSettingChange={action('setting changed')}\\\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const HeatMapAndMarker = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission true of heatmap if sending data,same like marker\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\n    option.permission = true // true for both option\\\\n    option.selected = option.name === 'Markers' // markers selected first\\\\n  })\\\\n  settingConfig['Map Mode'].permission = true\\\\n  // create legend on the basis of markers data\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        // zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='800px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        heatmap={object('Heatmap configuration', {\\\\n          permission: false,\\\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\\\n        })}\\\\n        settingConfig={settingConfig}\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\n        iconsRef={markerIcons}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const HeatMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission true of heatmap if sending data,same like marker\\\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\\\n    option.permission = option.name === 'HeatMap'\\\\n    option.selected = option.name === 'HeatMap'\\\\n  })\\\\n  settingConfig['Map Mode'].permission = true\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        // zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        heatmap={object('Heatmap configuration', {\\\\n          permission: true,\\\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\\\n        })}\\\\n        settingConfig={settingConfig}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const TripsMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // create legend on the basis of markers data\\\\n\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        trips={object('Trip Configuration', sampleTripData)}\\\\n        iconsRef={markerIcons}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const TrackingMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[33.298959, -111.9724]}\\\\n        zoom={10}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        tracking={object('Tracking Configuration', sampleTrackingData)}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nconst GeocodingMapComponent = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  // const [searchText, setSearchText] = React.useState(\\\\n  //   'Mumbai, Maharashtra, India'\\\\n  // )\\\\n  // const [position, setPosition] = React.useState([19.0759837, 72.8776559])\\\\n\\\\n  return (\\\\n    <LeafletMap\\\\n      id='leafletBaseMap'\\\\n      classes='baseMap customBaseMap'\\\\n      googleApiKey={GOOGLE_API_KEY}\\\\n      settingConfig={settingConfig}\\\\n      center={[51.0, 19.0]}\\\\n      // markers={object('Marker Configuration', markerLayerObj)}\\\\n      iconsRef={markerIcons}\\\\n      zoomControl\\\\n      locationSearch\\\\n      sendLocationOutside={action('sendLocationOutside ')}\\\\n      isShowMapTileLayer={boolean('isShowMapTileLayer', false)}\\\\n      geocoding={{\\\\n        permission: true,\\\\n\\\\n        /** If you are passing searchText, ensure to pass the position prop as well. */\\\\n        searchText: text('searchText', 'Mumbai'),\\\\n        // searchTextInput: searchText,\\\\n        position: [19.0759837, 72.8776559],\\\\n        isSave: boolean('isSave', true),\\\\n        onGeocodingSave: (e: any) => {\\\\n          window.alert(\\\\n            'Geocodes Saved ' + e.position?.[0] + ', ' + e.position?.[1]\\\\n          )\\\\n        },\\\\n        onGeocodingDragEnd: (pos: [number, number]) => {\\\\n          action('On Geocoding Drag End')(pos)\\\\n          // setPosition(pos)\\\\n          // setSearchText('India')\\\\n        }\\\\n      }}\\\\n      showLegendWrapper={boolean('showLegendWrapper', false)}\\\\n    />\\\\n  )\\\\n}\\\\nexport const GeocodingMap = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <GeocodingMapComponent />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const PolygonMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  // const [buttonType] = useState<string | null>(null)\\\\n  // console.log(buttonType)\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[20.5937, 78.9629]}\\\\n        zoom={4}\\\\n        zoomControl={boolean('Zoom Controls', true)}\\\\n        locationSearch={boolean('Location Search Bar', true)}\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height={text('Height', '300px')}\\\\n        width={text('Width', '800px')}\\\\n        tiles={\\\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\\\n        }\\\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\\\n        poi={boolean('Points of interest', false)}\\\\n        settingConfig={settingConfig}\\\\n        polygon={object('polygon', polyGeoFenceSampleData)}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\\\n        editPopUpComponent={({ map }: any) => (\\\\n          <EditPopUp\\\\n            onClick={() => {\\\\n              map.closePopup()\\\\n            }}\\\\n          />\\\\n        )}\\\\n        onEdit={action('Value Edited with new Vertex')}\\\\n        popupCustomComponent={{\\\\n          tooltipButton: ({ selectedData }: any) => (\\\\n            <ButtonList\\\\n              listOfButtons={[\\\\n                {\\\\n                  variant: 'button' as tVariant,\\\\n                  children: 'Edit',\\\\n                  // intent: 'table' as tIntent,\\\\n                  iconVariant: 'edit',\\\\n                  primary: true,\\\\n                  onClick: () => console.log('Edit', selectedData)\\\\n                },\\\\n                {\\\\n                  variant: 'button' as tVariant,\\\\n                  children: 'Delete',\\\\n                  iconVariant: 'icomoon-close',\\\\n                  // intent: 'table' as tIntent,\\\\n                  onClick: () => console.log('delete', selectedData)\\\\n                }\\\\n              ]}\\\\n            />\\\\n          )\\\\n        }}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const CircleMap = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n\\\\n  // create legend on the basis of markers data\\\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Route Mode')\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[20.5937, 78.9629]}\\\\n        zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        popupRef={infowindowStructure}\\\\n        settingConfig={settingConfig}\\\\n        onSettingChange={action('setting changed')}\\\\n        circle={object('circle', circleSampleData)}\\\\n        onEdit={action('Value Edited with new Vertex')}\\\\n        editPopUpComponent={({ map }: any) => (\\\\n          <EditPopUp\\\\n            onClick={() => {\\\\n              map.closePopup()\\\\n            }}\\\\n          />\\\\n        )}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\",\\\"locationsMap\\\":{}},},\\n  title: `${path}/Map`,\\n  decorators: [withKnobs],\\n  component: LeafletMap\\n}\\n\\n// The options which will be visible for tile-layer select in the story\\nconst tileOptions = {\\n  'open-street-maps': 'osm',\\n  'google-satellite': 'google_satellite',\\n  'google-basic': 'google_roadmap',\\n  'google-terrain': 'google_terrain',\\n  'google-hybrid': 'google_hybrid'\\n}\\n\\nconst themeOptions = {\\n  light: 'light',\\n  dark: 'dark'\\n}\\n\\nexport const BaseMap = addSourceDecorator(() => {\\n  const settingConfig = Object.assign({}, Settings)\\n  // set permission false, so that map mode will be hidden\\n  settingConfig['Map Mode'].permission = false\\n\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[51.0, 19.0]}\\n        latLngBounds={[[37.09024, -95.712891]]}\\n        // zoom={number('Zoom', 4, { min: 1, max: 24 })}\\n        zoomControl={boolean('Zoom Controls', true)}\\n        locationSearch={boolean('Location Search Bar', true)}\\n        googleApiKey={GOOGLE_API_KEY}\\n        heremapsApiKey={HERE_MAPS_API_KEY}\\n        height={text('Height', '300px')}\\n        width={text('Width', '800px')}\\n        tiles={\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\n        }\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\n        poi={boolean('Points of interest', false)}\\n        settingConfig={settingConfig}\\n        popupRef={infowindowStructure}\\n        onSettingChange={action('setting changed')}\\n        rulerControl={boolean('rulerControl', true)}\\n        iconsRef={markerIcons}\\n        // center={array('center', ['37.7749', '-122.4194'])}\\n      />\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nexport const MarkerMap = addSourceDecorator(() => {\\n  const settingConfig = Object.assign({}, Settings)\\n\\n  // set permission true of markers if sending data,same like heatmap\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\n    option.permission = option.name === 'Markers'\\n    option.selected = option.name === 'Markers'\\n  })\\n  settingConfig['Map Mode'].permission = true\\n\\n  // create legend on the basis of markers data\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\n\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[37.09024, -95.712891]}\\n        latLngBounds={[[37.09024, -95.712891]]}\\n        // zoom={4}\\n        zoomControl\\n        locationSearch\\n        googleApiKey={GOOGLE_API_KEY}\\n        height='800px'\\n        width='800px'\\n        tiles='google_roadmap'\\n        markers={object('Marker Configuration', markerLayerObj)}\\n        focusMarkerId={text('Marker Id to focus/open', '')}\\n        iconsRef={markerIcons}\\n        popupRef={infowindowStructure}\\n        settingConfig={settingConfig}\\n        onSettingChange={action('setting changed')}\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\n      />\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nexport const HeatMapAndMarker = addSourceDecorator(() => {\\n  const settingConfig = Object.assign({}, Settings)\\n  // set permission true of heatmap if sending data,same like marker\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\n    option.permission = true // true for both option\\n    option.selected = option.name === 'Markers' // markers selected first\\n  })\\n  settingConfig['Map Mode'].permission = true\\n  // create legend on the basis of markers data\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\n\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[51.0, 19.0]}\\n        // zoom={4}\\n        zoomControl\\n        locationSearch\\n        googleApiKey={GOOGLE_API_KEY}\\n        height='800px'\\n        width='800px'\\n        tiles='google_roadmap'\\n        heatmap={object('Heatmap configuration', {\\n          permission: false,\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\n        })}\\n        settingConfig={settingConfig}\\n        markers={object('Marker Configuration', markerLayerObj)}\\n        iconsRef={markerIcons}\\n        popupRef={infowindowStructure}\\n        onSettingChange={action('setting changed')}\\n      />\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nexport const HeatMap = addSourceDecorator(() => {\\n  const settingConfig = Object.assign({}, Settings)\\n  // set permission true of heatmap if sending data,same like marker\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\n    option.permission = option.name === 'HeatMap'\\n    option.selected = option.name === 'HeatMap'\\n  })\\n  settingConfig['Map Mode'].permission = true\\n\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[51.0, 19.0]}\\n        // zoom={4}\\n        zoomControl\\n        locationSearch\\n        googleApiKey={GOOGLE_API_KEY}\\n        height='300px'\\n        width='800px'\\n        tiles='google_roadmap'\\n        heatmap={object('Heatmap configuration', {\\n          permission: true,\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\n        })}\\n        settingConfig={settingConfig}\\n        onSettingChange={action('setting changed')}\\n      />\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nexport const TripsMap = addSourceDecorator(() => {\\n  const settingConfig = Object.assign({}, Settings)\\n  // create legend on the basis of markers data\\n\\n  // set permission false, so that map mode will be hidden\\n  settingConfig['Map Mode'].permission = false\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[51.0, 19.0]}\\n        zoom={4}\\n        zoomControl\\n        locationSearch\\n        googleApiKey={GOOGLE_API_KEY}\\n        height='300px'\\n        width='800px'\\n        tiles='google_roadmap'\\n        trips={object('Trip Configuration', sampleTripData)}\\n        iconsRef={markerIcons}\\n        popupRef={infowindowStructure}\\n        onSettingChange={action('setting changed')}\\n      />\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nexport const TrackingMap = addSourceDecorator(() => {\\n  const settingConfig = Object.assign({}, Settings)\\n\\n  // set permission false, so that map mode will be hidden\\n  settingConfig['Map Mode'].permission = false\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[33.298959, -111.9724]}\\n        zoom={10}\\n        zoomControl\\n        locationSearch\\n        googleApiKey={GOOGLE_API_KEY}\\n        height='300px'\\n        width='800px'\\n        tiles='google_roadmap'\\n        tracking={object('Tracking Configuration', sampleTrackingData)}\\n        onSettingChange={action('setting changed')}\\n      />\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nconst GeocodingMapComponent = () => {\\n  const settingConfig = Object.assign({}, Settings)\\n  // set permission false, so that map mode will be hidden\\n  settingConfig['Map Mode'].permission = false\\n  // const [searchText, setSearchText] = React.useState(\\n  //   'Mumbai, Maharashtra, India'\\n  // )\\n  // const [position, setPosition] = React.useState([19.0759837, 72.8776559])\\n\\n  return (\\n    <LeafletMap\\n      id='leafletBaseMap'\\n      classes='baseMap customBaseMap'\\n      googleApiKey={GOOGLE_API_KEY}\\n      settingConfig={settingConfig}\\n      center={[51.0, 19.0]}\\n      // markers={object('Marker Configuration', markerLayerObj)}\\n      iconsRef={markerIcons}\\n      zoomControl\\n      locationSearch\\n      sendLocationOutside={action('sendLocationOutside ')}\\n      isShowMapTileLayer={boolean('isShowMapTileLayer', false)}\\n      geocoding={{\\n        permission: true,\\n\\n        /** If you are passing searchText, ensure to pass the position prop as well. */\\n        searchText: text('searchText', 'Mumbai'),\\n        // searchTextInput: searchText,\\n        position: [19.0759837, 72.8776559],\\n        isSave: boolean('isSave', true),\\n        onGeocodingSave: (e: any) => {\\n          window.alert(\\n            'Geocodes Saved ' + e.position?.[0] + ', ' + e.position?.[1]\\n          )\\n        },\\n        onGeocodingDragEnd: (pos: [number, number]) => {\\n          action('On Geocoding Drag End')(pos)\\n          // setPosition(pos)\\n          // setSearchText('India')\\n        }\\n      }}\\n      showLegendWrapper={boolean('showLegendWrapper', false)}\\n    />\\n  )\\n}\\nexport const GeocodingMap = addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <GeocodingMapComponent />\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nexport const PolygonMap = addSourceDecorator(() => {\\n  const settingConfig = Object.assign({}, Settings)\\n  // set permission false, so that map mode will be hidden\\n  settingConfig['Map Mode'].permission = false\\n  // const [buttonType] = useState<string | null>(null)\\n  // console.log(buttonType)\\n\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[20.5937, 78.9629]}\\n        zoom={4}\\n        zoomControl={boolean('Zoom Controls', true)}\\n        locationSearch={boolean('Location Search Bar', true)}\\n        googleApiKey={GOOGLE_API_KEY}\\n        height={text('Height', '300px')}\\n        width={text('Width', '800px')}\\n        tiles={\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\n        }\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\n        poi={boolean('Points of interest', false)}\\n        settingConfig={settingConfig}\\n        polygon={object('polygon', polyGeoFenceSampleData)}\\n        popupRef={infowindowStructure}\\n        onSettingChange={action('setting changed')}\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\n        editPopUpComponent={({ map }: any) => (\\n          <EditPopUp\\n            onClick={() => {\\n              map.closePopup()\\n            }}\\n          />\\n        )}\\n        onEdit={action('Value Edited with new Vertex')}\\n        popupCustomComponent={{\\n          tooltipButton: ({ selectedData }: any) => (\\n            <ButtonList\\n              listOfButtons={[\\n                {\\n                  variant: 'button' as tVariant,\\n                  children: 'Edit',\\n                  // intent: 'table' as tIntent,\\n                  iconVariant: 'edit',\\n                  primary: true,\\n                  onClick: () => console.log('Edit', selectedData)\\n                },\\n                {\\n                  variant: 'button' as tVariant,\\n                  children: 'Delete',\\n                  iconVariant: 'icomoon-close',\\n                  // intent: 'table' as tIntent,\\n                  onClick: () => console.log('delete', selectedData)\\n                }\\n              ]}\\n            />\\n          )\\n        }}\\n      />\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nexport const CircleMap = addSourceDecorator(() => {\\n  const settingConfig = Object.assign({}, Settings)\\n\\n  // set permission false, so that map mode will be hidden\\n  settingConfig['Map Mode'].permission = false\\n\\n  // create legend on the basis of markers data\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Route Mode')\\n\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[20.5937, 78.9629]}\\n        zoom={4}\\n        zoomControl\\n        locationSearch\\n        googleApiKey={GOOGLE_API_KEY}\\n        height='300px'\\n        width='800px'\\n        tiles='google_roadmap'\\n        popupRef={infowindowStructure}\\n        settingConfig={settingConfig}\\n        onSettingChange={action('setting changed')}\\n        circle={object('circle', circleSampleData)}\\n        onEdit={action('Value Edited with new Vertex')}\\n        editPopUpComponent={({ map }: any) => (\\n          <EditPopUp\\n            onClick={() => {\\n              map.closePopup()\\n            }}\\n          />\\n        )}\\n      />\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\",\"locationsMap\":{}},\"storySource\":{\"source\":\"import { action } from '@storybook/addon-actions'\\nimport {\\n  boolean,\\n  object,\\n  select,\\n  text,\\n  withKnobs\\n} from '@storybook/addon-knobs'\\nimport React from 'react'\\nimport LeafletMap from '.'\\nimport { path } from '..'\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\nimport Settings from '../../atoms/SettingBox/data'\\nimport { ButtonList } from '../../molecules/ShowHideColumnPopup'\\nimport { tVariant } from '../Button'\\nimport { IOption } from '../SettingBox/interface'\\nimport {\\n  GOOGLE_API_KEY,\\n  HERE_MAPS_API_KEY\\n} from './constants/googleIntegration.constants'\\nimport circleSampleData from './dummyData/CircleSampleData.SampleData'\\nimport infowindowStructure from './dummyData/Infowindow.structure.sampleData'\\nimport markerIcons from './dummyData/MarkerIcon.sampleData'\\nimport markerLayerObj from './dummyData/Markers.sampleData'\\nimport polyGeoFenceSampleData from './dummyData/PolyGeoFence.SampleData'\\nimport sampleTrackingData from './dummyData/Presentation.Tracking.sampleData'\\nimport sampleTripData from './dummyData/Presentation.Trips.sampleData'\\nimport { updateSettingsWithLegends } from './helperMethods'\\nimport EditPopUp from './SubComponent/EditPopUp'\\nimport { tTheme, tTiles } from './types.d'\\n\\nexport default {\\n  title: `${path}/Map`,\\n  decorators: [withKnobs],\\n  component: LeafletMap\\n}\\n\\n// The options which will be visible for tile-layer select in the story\\nconst tileOptions = {\\n  'open-street-maps': 'osm',\\n  'google-satellite': 'google_satellite',\\n  'google-basic': 'google_roadmap',\\n  'google-terrain': 'google_terrain',\\n  'google-hybrid': 'google_hybrid'\\n}\\n\\nconst themeOptions = {\\n  light: 'light',\\n  dark: 'dark'\\n}\\n\\nexport const BaseMap = () => {\\n  const settingConfig = Object.assign({}, Settings)\\n  // set permission false, so that map mode will be hidden\\n  settingConfig['Map Mode'].permission = false\\n\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[51.0, 19.0]}\\n        latLngBounds={[[37.09024, -95.712891]]}\\n        // zoom={number('Zoom', 4, { min: 1, max: 24 })}\\n        zoomControl={boolean('Zoom Controls', true)}\\n        locationSearch={boolean('Location Search Bar', true)}\\n        googleApiKey={GOOGLE_API_KEY}\\n        heremapsApiKey={HERE_MAPS_API_KEY}\\n        height={text('Height', '300px')}\\n        width={text('Width', '800px')}\\n        tiles={\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\n        }\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\n        poi={boolean('Points of interest', false)}\\n        settingConfig={settingConfig}\\n        popupRef={infowindowStructure}\\n        onSettingChange={action('setting changed')}\\n        rulerControl={boolean('rulerControl', true)}\\n        iconsRef={markerIcons}\\n        // center={array('center', ['37.7749', '-122.4194'])}\\n      />\\n    </ThemeWrapper>\\n  )\\n}\\n\\nexport const MarkerMap = () => {\\n  const settingConfig = Object.assign({}, Settings)\\n\\n  // set permission true of markers if sending data,same like heatmap\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\n    option.permission = option.name === 'Markers'\\n    option.selected = option.name === 'Markers'\\n  })\\n  settingConfig['Map Mode'].permission = true\\n\\n  // create legend on the basis of markers data\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\n\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[37.09024, -95.712891]}\\n        latLngBounds={[[37.09024, -95.712891]]}\\n        // zoom={4}\\n        zoomControl\\n        locationSearch\\n        googleApiKey={GOOGLE_API_KEY}\\n        height='800px'\\n        width='800px'\\n        tiles='google_roadmap'\\n        markers={object('Marker Configuration', markerLayerObj)}\\n        focusMarkerId={text('Marker Id to focus/open', '')}\\n        iconsRef={markerIcons}\\n        popupRef={infowindowStructure}\\n        settingConfig={settingConfig}\\n        onSettingChange={action('setting changed')}\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\n      />\\n    </ThemeWrapper>\\n  )\\n}\\n\\nexport const HeatMapAndMarker = () => {\\n  const settingConfig = Object.assign({}, Settings)\\n  // set permission true of heatmap if sending data,same like marker\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\n    option.permission = true // true for both option\\n    option.selected = option.name === 'Markers' // markers selected first\\n  })\\n  settingConfig['Map Mode'].permission = true\\n  // create legend on the basis of markers data\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\\n\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[51.0, 19.0]}\\n        // zoom={4}\\n        zoomControl\\n        locationSearch\\n        googleApiKey={GOOGLE_API_KEY}\\n        height='800px'\\n        width='800px'\\n        tiles='google_roadmap'\\n        heatmap={object('Heatmap configuration', {\\n          permission: false,\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\n        })}\\n        settingConfig={settingConfig}\\n        markers={object('Marker Configuration', markerLayerObj)}\\n        iconsRef={markerIcons}\\n        popupRef={infowindowStructure}\\n        onSettingChange={action('setting changed')}\\n      />\\n    </ThemeWrapper>\\n  )\\n}\\n\\nexport const HeatMap = () => {\\n  const settingConfig = Object.assign({}, Settings)\\n  // set permission true of heatmap if sending data,same like marker\\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\\n    option.permission = option.name === 'HeatMap'\\n    option.selected = option.name === 'HeatMap'\\n  })\\n  settingConfig['Map Mode'].permission = true\\n\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[51.0, 19.0]}\\n        // zoom={4}\\n        zoomControl\\n        locationSearch\\n        googleApiKey={GOOGLE_API_KEY}\\n        height='300px'\\n        width='800px'\\n        tiles='google_roadmap'\\n        heatmap={object('Heatmap configuration', {\\n          permission: true,\\n          data: markerLayerObj.entitiesMap.orders.markers.list\\n        })}\\n        settingConfig={settingConfig}\\n        onSettingChange={action('setting changed')}\\n      />\\n    </ThemeWrapper>\\n  )\\n}\\n\\nexport const TripsMap = () => {\\n  const settingConfig = Object.assign({}, Settings)\\n  // create legend on the basis of markers data\\n\\n  // set permission false, so that map mode will be hidden\\n  settingConfig['Map Mode'].permission = false\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[51.0, 19.0]}\\n        zoom={4}\\n        zoomControl\\n        locationSearch\\n        googleApiKey={GOOGLE_API_KEY}\\n        height='300px'\\n        width='800px'\\n        tiles='google_roadmap'\\n        trips={object('Trip Configuration', sampleTripData)}\\n        iconsRef={markerIcons}\\n        popupRef={infowindowStructure}\\n        onSettingChange={action('setting changed')}\\n      />\\n    </ThemeWrapper>\\n  )\\n}\\n\\nexport const TrackingMap = () => {\\n  const settingConfig = Object.assign({}, Settings)\\n\\n  // set permission false, so that map mode will be hidden\\n  settingConfig['Map Mode'].permission = false\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[33.298959, -111.9724]}\\n        zoom={10}\\n        zoomControl\\n        locationSearch\\n        googleApiKey={GOOGLE_API_KEY}\\n        height='300px'\\n        width='800px'\\n        tiles='google_roadmap'\\n        tracking={object('Tracking Configuration', sampleTrackingData)}\\n        onSettingChange={action('setting changed')}\\n      />\\n    </ThemeWrapper>\\n  )\\n}\\n\\nconst GeocodingMapComponent = () => {\\n  const settingConfig = Object.assign({}, Settings)\\n  // set permission false, so that map mode will be hidden\\n  settingConfig['Map Mode'].permission = false\\n  // const [searchText, setSearchText] = React.useState(\\n  //   'Mumbai, Maharashtra, India'\\n  // )\\n  // const [position, setPosition] = React.useState([19.0759837, 72.8776559])\\n\\n  return (\\n    <LeafletMap\\n      id='leafletBaseMap'\\n      classes='baseMap customBaseMap'\\n      googleApiKey={GOOGLE_API_KEY}\\n      settingConfig={settingConfig}\\n      center={[51.0, 19.0]}\\n      // markers={object('Marker Configuration', markerLayerObj)}\\n      iconsRef={markerIcons}\\n      zoomControl\\n      locationSearch\\n      sendLocationOutside={action('sendLocationOutside ')}\\n      isShowMapTileLayer={boolean('isShowMapTileLayer', false)}\\n      geocoding={{\\n        permission: true,\\n\\n        /** If you are passing searchText, ensure to pass the position prop as well. */\\n        searchText: text('searchText', 'Mumbai'),\\n        // searchTextInput: searchText,\\n        position: [19.0759837, 72.8776559],\\n        isSave: boolean('isSave', true),\\n        onGeocodingSave: (e: any) => {\\n          window.alert(\\n            'Geocodes Saved ' + e.position?.[0] + ', ' + e.position?.[1]\\n          )\\n        },\\n        onGeocodingDragEnd: (pos: [number, number]) => {\\n          action('On Geocoding Drag End')(pos)\\n          // setPosition(pos)\\n          // setSearchText('India')\\n        }\\n      }}\\n      showLegendWrapper={boolean('showLegendWrapper', false)}\\n    />\\n  )\\n}\\nexport const GeocodingMap = () => {\\n  return (\\n    <ThemeWrapper>\\n      <GeocodingMapComponent />\\n    </ThemeWrapper>\\n  )\\n}\\n\\nexport const PolygonMap = () => {\\n  const settingConfig = Object.assign({}, Settings)\\n  // set permission false, so that map mode will be hidden\\n  settingConfig['Map Mode'].permission = false\\n  // const [buttonType] = useState<string | null>(null)\\n  // console.log(buttonType)\\n\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[20.5937, 78.9629]}\\n        zoom={4}\\n        zoomControl={boolean('Zoom Controls', true)}\\n        locationSearch={boolean('Location Search Bar', true)}\\n        googleApiKey={GOOGLE_API_KEY}\\n        height={text('Height', '300px')}\\n        width={text('Width', '800px')}\\n        tiles={\\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\\n        }\\n        theme={select('Theme', themeOptions, 'light') as tTheme}\\n        poi={boolean('Points of interest', false)}\\n        settingConfig={settingConfig}\\n        polygon={object('polygon', polyGeoFenceSampleData)}\\n        popupRef={infowindowStructure}\\n        onSettingChange={action('setting changed')}\\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\\n        editPopUpComponent={({ map }: any) => (\\n          <EditPopUp\\n            onClick={() => {\\n              map.closePopup()\\n            }}\\n          />\\n        )}\\n        onEdit={action('Value Edited with new Vertex')}\\n        popupCustomComponent={{\\n          tooltipButton: ({ selectedData }: any) => (\\n            <ButtonList\\n              listOfButtons={[\\n                {\\n                  variant: 'button' as tVariant,\\n                  children: 'Edit',\\n                  // intent: 'table' as tIntent,\\n                  iconVariant: 'edit',\\n                  primary: true,\\n                  onClick: () => console.log('Edit', selectedData)\\n                },\\n                {\\n                  variant: 'button' as tVariant,\\n                  children: 'Delete',\\n                  iconVariant: 'icomoon-close',\\n                  // intent: 'table' as tIntent,\\n                  onClick: () => console.log('delete', selectedData)\\n                }\\n              ]}\\n            />\\n          )\\n        }}\\n      />\\n    </ThemeWrapper>\\n  )\\n}\\n\\nexport const CircleMap = () => {\\n  const settingConfig = Object.assign({}, Settings)\\n\\n  // set permission false, so that map mode will be hidden\\n  settingConfig['Map Mode'].permission = false\\n\\n  // create legend on the basis of markers data\\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Route Mode')\\n\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[20.5937, 78.9629]}\\n        zoom={4}\\n        zoomControl\\n        locationSearch\\n        googleApiKey={GOOGLE_API_KEY}\\n        height='300px'\\n        width='800px'\\n        tiles='google_roadmap'\\n        popupRef={infowindowStructure}\\n        settingConfig={settingConfig}\\n        onSettingChange={action('setting changed')}\\n        circle={object('circle', circleSampleData)}\\n        onEdit={action('Value Edited with new Vertex')}\\n        editPopUpComponent={({ map }: any) => (\\n          <EditPopUp\\n            onClick={() => {\\n              map.closePopup()\\n            }}\\n          />\\n        )}\\n      />\\n    </ThemeWrapper>\\n  )\\n}\\n\",\"locationsMap\":{}},},\n  title: `${path}/Map`,\n  decorators: [withKnobs],\n  component: LeafletMap\n}\n\n// The options which will be visible for tile-layer select in the story\nconst tileOptions = {\n  'open-street-maps': 'osm',\n  'google-satellite': 'google_satellite',\n  'google-basic': 'google_roadmap',\n  'google-terrain': 'google_terrain',\n  'google-hybrid': 'google_hybrid'\n}\n\nconst themeOptions = {\n  light: 'light',\n  dark: 'dark'\n}\n\nexport const BaseMap = addSourceDecorator(addSourceDecorator(addSourceDecorator(() => {\n  const settingConfig = Object.assign({}, Settings)\n  // set permission false, so that map mode will be hidden\n  settingConfig['Map Mode'].permission = false\n\n  return (\n    <ThemeWrapper>\n      <LeafletMap\n        id='leafletBaseMap'\n        classes='baseMap customBaseMap'\n        center={[51.0, 19.0]}\n        latLngBounds={[[37.09024, -95.712891]]}\n        // zoom={number('Zoom', 4, { min: 1, max: 24 })}\n        zoomControl={boolean('Zoom Controls', true)}\n        locationSearch={boolean('Location Search Bar', true)}\n        googleApiKey={GOOGLE_API_KEY}\n        heremapsApiKey={HERE_MAPS_API_KEY}\n        height={text('Height', '300px')}\n        width={text('Width', '800px')}\n        tiles={\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\n        }\n        theme={select('Theme', themeOptions, 'light') as tTheme}\n        poi={boolean('Points of interest', false)}\n        settingConfig={settingConfig}\n        popupRef={infowindowStructure}\n        onSettingChange={action('setting changed')}\n        rulerControl={boolean('rulerControl', true)}\n        iconsRef={markerIcons}\n        // center={array('center', ['37.7749', '-122.4194'])}\n      />\n    </ThemeWrapper>\n  )\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;;\n\nexport const MarkerMap = addSourceDecorator(addSourceDecorator(addSourceDecorator(() => {\n  const settingConfig = Object.assign({}, Settings)\n\n  // set permission true of markers if sending data,same like heatmap\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\n    option.permission = option.name === 'Markers'\n    option.selected = option.name === 'Markers'\n  })\n  settingConfig['Map Mode'].permission = true\n\n  // create legend on the basis of markers data\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\n\n  return (\n    <ThemeWrapper>\n      <LeafletMap\n        id='leafletBaseMap'\n        classes='baseMap customBaseMap'\n        center={[37.09024, -95.712891]}\n        latLngBounds={[[37.09024, -95.712891]]}\n        // zoom={4}\n        zoomControl\n        locationSearch\n        googleApiKey={GOOGLE_API_KEY}\n        height='800px'\n        width='800px'\n        tiles='google_roadmap'\n        markers={object('Marker Configuration', markerLayerObj)}\n        focusMarkerId={text('Marker Id to focus/open', '')}\n        iconsRef={markerIcons}\n        popupRef={infowindowStructure}\n        settingConfig={settingConfig}\n        onSettingChange={action('setting changed')}\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\n      />\n    </ThemeWrapper>\n  )\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;;\n\nexport const HeatMapAndMarker = addSourceDecorator(addSourceDecorator(addSourceDecorator(() => {\n  const settingConfig = Object.assign({}, Settings)\n  // set permission true of heatmap if sending data,same like marker\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\n    option.permission = true // true for both option\n    option.selected = option.name === 'Markers' // markers selected first\n  })\n  settingConfig['Map Mode'].permission = true\n  // create legend on the basis of markers data\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Legends')\n\n  return (\n    <ThemeWrapper>\n      <LeafletMap\n        id='leafletBaseMap'\n        classes='baseMap customBaseMap'\n        center={[51.0, 19.0]}\n        // zoom={4}\n        zoomControl\n        locationSearch\n        googleApiKey={GOOGLE_API_KEY}\n        height='800px'\n        width='800px'\n        tiles='google_roadmap'\n        heatmap={object('Heatmap configuration', {\n          permission: false,\n          data: markerLayerObj.entitiesMap.orders.markers.list\n        })}\n        settingConfig={settingConfig}\n        markers={object('Marker Configuration', markerLayerObj)}\n        iconsRef={markerIcons}\n        popupRef={infowindowStructure}\n        onSettingChange={action('setting changed')}\n      />\n    </ThemeWrapper>\n  )\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;;\n\nexport const HeatMap = addSourceDecorator(addSourceDecorator(addSourceDecorator(() => {\n  const settingConfig = Object.assign({}, Settings)\n  // set permission true of heatmap if sending data,same like marker\n  settingConfig['Map Mode'].option.forEach((option: IOption) => {\n    option.permission = option.name === 'HeatMap'\n    option.selected = option.name === 'HeatMap'\n  })\n  settingConfig['Map Mode'].permission = true\n\n  return (\n    <ThemeWrapper>\n      <LeafletMap\n        id='leafletBaseMap'\n        classes='baseMap customBaseMap'\n        center={[51.0, 19.0]}\n        // zoom={4}\n        zoomControl\n        locationSearch\n        googleApiKey={GOOGLE_API_KEY}\n        height='300px'\n        width='800px'\n        tiles='google_roadmap'\n        heatmap={object('Heatmap configuration', {\n          permission: true,\n          data: markerLayerObj.entitiesMap.orders.markers.list\n        })}\n        settingConfig={settingConfig}\n        onSettingChange={action('setting changed')}\n      />\n    </ThemeWrapper>\n  )\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;;\n\nexport const TripsMap = addSourceDecorator(addSourceDecorator(addSourceDecorator(() => {\n  const settingConfig = Object.assign({}, Settings)\n  // create legend on the basis of markers data\n\n  // set permission false, so that map mode will be hidden\n  settingConfig['Map Mode'].permission = false\n  return (\n    <ThemeWrapper>\n      <LeafletMap\n        id='leafletBaseMap'\n        classes='baseMap customBaseMap'\n        center={[51.0, 19.0]}\n        zoom={4}\n        zoomControl\n        locationSearch\n        googleApiKey={GOOGLE_API_KEY}\n        height='300px'\n        width='800px'\n        tiles='google_roadmap'\n        trips={object('Trip Configuration', sampleTripData)}\n        iconsRef={markerIcons}\n        popupRef={infowindowStructure}\n        onSettingChange={action('setting changed')}\n      />\n    </ThemeWrapper>\n  )\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;;\n\nexport const TrackingMap = addSourceDecorator(addSourceDecorator(addSourceDecorator(() => {\n  const settingConfig = Object.assign({}, Settings)\n\n  // set permission false, so that map mode will be hidden\n  settingConfig['Map Mode'].permission = false\n  return (\n    <ThemeWrapper>\n      <LeafletMap\n        id='leafletBaseMap'\n        classes='baseMap customBaseMap'\n        center={[33.298959, -111.9724]}\n        zoom={10}\n        zoomControl\n        locationSearch\n        googleApiKey={GOOGLE_API_KEY}\n        height='300px'\n        width='800px'\n        tiles='google_roadmap'\n        tracking={object('Tracking Configuration', sampleTrackingData)}\n        onSettingChange={action('setting changed')}\n      />\n    </ThemeWrapper>\n  )\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;;\n\nconst GeocodingMapComponent = () => {\n  const settingConfig = Object.assign({}, Settings)\n  // set permission false, so that map mode will be hidden\n  settingConfig['Map Mode'].permission = false\n  // const [searchText, setSearchText] = React.useState(\n  //   'Mumbai, Maharashtra, India'\n  // )\n  // const [position, setPosition] = React.useState([19.0759837, 72.8776559])\n\n  return (\n    <LeafletMap\n      id='leafletBaseMap'\n      classes='baseMap customBaseMap'\n      googleApiKey={GOOGLE_API_KEY}\n      settingConfig={settingConfig}\n      center={[51.0, 19.0]}\n      // markers={object('Marker Configuration', markerLayerObj)}\n      iconsRef={markerIcons}\n      zoomControl\n      locationSearch\n      sendLocationOutside={action('sendLocationOutside ')}\n      isShowMapTileLayer={boolean('isShowMapTileLayer', false)}\n      geocoding={{\n        permission: true,\n\n        /** If you are passing searchText, ensure to pass the position prop as well. */\n        searchText: text('searchText', 'Mumbai'),\n        // searchTextInput: searchText,\n        position: [19.0759837, 72.8776559],\n        isSave: boolean('isSave', true),\n        onGeocodingSave: (e: any) => {\n          window.alert(\n            'Geocodes Saved ' + e.position?.[0] + ', ' + e.position?.[1]\n          )\n        },\n        onGeocodingDragEnd: (pos: [number, number]) => {\n          action('On Geocoding Drag End')(pos)\n          // setPosition(pos)\n          // setSearchText('India')\n        }\n      }}\n      showLegendWrapper={boolean('showLegendWrapper', false)}\n    />\n  )\n}\nexport const GeocodingMap = addSourceDecorator(addSourceDecorator(addSourceDecorator(() => {\n  return (\n    <ThemeWrapper>\n      <GeocodingMapComponent />\n    </ThemeWrapper>\n  )\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;;\n\nexport const PolygonMap = addSourceDecorator(addSourceDecorator(addSourceDecorator(() => {\n  const settingConfig = Object.assign({}, Settings)\n  // set permission false, so that map mode will be hidden\n  settingConfig['Map Mode'].permission = false\n  // const [buttonType] = useState<string | null>(null)\n  // console.log(buttonType)\n\n  return (\n    <ThemeWrapper>\n      <LeafletMap\n        id='leafletBaseMap'\n        classes='baseMap customBaseMap'\n        center={[20.5937, 78.9629]}\n        zoom={4}\n        zoomControl={boolean('Zoom Controls', true)}\n        locationSearch={boolean('Location Search Bar', true)}\n        googleApiKey={GOOGLE_API_KEY}\n        height={text('Height', '300px')}\n        width={text('Width', '800px')}\n        tiles={\n          select('Base Tile Layer', tileOptions, 'google_roadmap') as tTiles\n        }\n        theme={select('Theme', themeOptions, 'light') as tTheme}\n        poi={boolean('Points of interest', false)}\n        settingConfig={settingConfig}\n        polygon={object('polygon', polyGeoFenceSampleData)}\n        popupRef={infowindowStructure}\n        onSettingChange={action('setting changed')}\n        handleClosePopup={(popupRef) => action('handle Close Popup')(popupRef)}\n        editPopUpComponent={({ map }: any) => (\n          <EditPopUp\n            onClick={() => {\n              map.closePopup()\n            }}\n          />\n        )}\n        onEdit={action('Value Edited with new Vertex')}\n        popupCustomComponent={{\n          tooltipButton: ({ selectedData }: any) => (\n            <ButtonList\n              listOfButtons={[\n                {\n                  variant: 'button' as tVariant,\n                  children: 'Edit',\n                  // intent: 'table' as tIntent,\n                  iconVariant: 'edit',\n                  primary: true,\n                  onClick: () => console.log('Edit', selectedData)\n                },\n                {\n                  variant: 'button' as tVariant,\n                  children: 'Delete',\n                  iconVariant: 'icomoon-close',\n                  // intent: 'table' as tIntent,\n                  onClick: () => console.log('delete', selectedData)\n                }\n              ]}\n            />\n          )\n        }}\n      />\n    </ThemeWrapper>\n  )\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;;\n\nexport const CircleMap = addSourceDecorator(addSourceDecorator(addSourceDecorator(() => {\n  const settingConfig = Object.assign({}, Settings)\n\n  // set permission false, so that map mode will be hidden\n  settingConfig['Map Mode'].permission = false\n\n  // create legend on the basis of markers data\n  updateSettingsWithLegends(settingConfig, markerLayerObj, 'Route Mode')\n\n  return (\n    <ThemeWrapper>\n      <LeafletMap\n        id='leafletBaseMap'\n        classes='baseMap customBaseMap'\n        center={[20.5937, 78.9629]}\n        zoom={4}\n        zoomControl\n        locationSearch\n        googleApiKey={GOOGLE_API_KEY}\n        height='300px'\n        width='800px'\n        tiles='google_roadmap'\n        popupRef={infowindowStructure}\n        settingConfig={settingConfig}\n        onSettingChange={action('setting changed')}\n        circle={object('circle', circleSampleData)}\n        onEdit={action('Value Edited with new Vertex')}\n        editPopUpComponent={({ map }: any) => (\n          <EditPopUp\n            onClick={() => {\n              map.closePopup()\n            }}\n          />\n        )}\n      />\n    </ThemeWrapper>\n  )\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});"],"sourceRoot":""},"metadata":{},"sourceType":"module"}