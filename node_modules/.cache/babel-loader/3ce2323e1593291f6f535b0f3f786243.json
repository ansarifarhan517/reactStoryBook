{"ast":null,"code":"import _defineProperty from \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nvar _parameters;\n\n/* eslint-disable */\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource; // @ts-ignore\n\n\nvar addSourceDecorator = require(\"@storybook/source-loader/preview\").addSource; // @ts-ignore\n\n\nvar __SOURCE_PREFIX__ = \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/molecules/InlinePopup\"; // @ts-ignore\n\nvar __STORY__ = \"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/molecules/InlinePopup\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"\\\\n\\\\n// @ts-nocheck\\\\n// @ts-ignore\\\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\\\n// @ts-ignore\\\\nvar addSourceDecorator = require(\\\\\\\"@storybook/source-loader/preview\\\\\\\").addSource;\\\\n// @ts-ignore\\\\nvar __SOURCE_PREFIX__ = \\\\\\\"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/molecules/InlinePopup\\\\\\\";\\\\n// @ts-ignore\\\\nvar __STORY__ = \\\\\\\"import React from 'react'\\\\\\\\nimport {\\\\\\\\n  boolean,\\\\\\\\n  text,\\\\\\\\n  object,\\\\\\\\n  withKnobs,\\\\\\\\n  number\\\\\\\\n} from '@storybook/addon-knobs'\\\\\\\\nimport { action } from '@storybook/addon-actions'\\\\\\\\nimport { path } from '..'\\\\\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\\\\\nimport InlinePopup from '.'\\\\\\\\nimport IconButton from '../../atoms/IconButton'\\\\\\\\nimport Box from '../../atoms/Box'\\\\\\\\nimport Position from '../Position'\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/InlinePopup`,\\\\\\\\n  decorators: [withKnobs],\\\\\\\\n  component: InlinePopup\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const InlinePopupStories = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Position display='block'>\\\\\\\\n        <Box m='10em'>Sample Card</Box>\\\\\\\\n        <Box m='10em'>Sample Card</Box>\\\\\\\\n\\\\\\\\n        <InlinePopup\\\\\\\\n          isOpen={boolean('isOpen', false)}\\\\\\\\n          title={text('title', 'Inline Popup Header')}\\\\\\\\n          onClose={action('close called')}\\\\\\\\n          width={number('width', 500)}\\\\\\\\n          height={number('height', 200)}\\\\\\\\n          style={object('style', {\\\\\\\\n            position: 'absolute'\\\\\\\\n          })}\\\\\\\\n          content={\\\\\\\\n            <Box p='1em' m='1em'>\\\\\\\\n              This is something inside the InlinePopup\\\\\\\\n            </Box>\\\\\\\\n          }\\\\\\\\n          id={text('id', 'InlinePopupID')}\\\\\\\\n          className={text('className', 'InlinePopupclassName')}\\\\\\\\n          draggable={boolean('draggable', false)}\\\\\\\\n        >\\\\\\\\n          <IconButton\\\\\\\\n            intent='default'\\\\\\\\n            iconVariant='icomoon-add'\\\\\\\\n            children='Add'\\\\\\\\n          />\\\\\\\\n        </InlinePopup>\\\\\\\\n      </Position>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\";\\\\n// @ts-ignore\\\\nvar __ADDS_MAP__ = {};\\\\n// @ts-ignore\\\\nvar __MAIN_FILE_LOCATION__ = \\\\\\\"/InlinePopup.stories.tsx\\\\\\\";\\\\n// @ts-ignore\\\\nvar __MODULE_DEPENDENCIES__ = [];\\\\n// @ts-ignore\\\\nvar __LOCAL_DEPENDENCIES__ = {};\\\\n// @ts-ignore\\\\nvar __IDS_TO_FRAMEWORKS__ = {};\\\\n        \\\\nimport React from 'react'\\\\nimport {\\\\n  boolean,\\\\n  text,\\\\n  object,\\\\n  withKnobs,\\\\n  number\\\\n} from '@storybook/addon-knobs'\\\\nimport { action } from '@storybook/addon-actions'\\\\nimport { path } from '..'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport InlinePopup from '.'\\\\nimport IconButton from '../../atoms/IconButton'\\\\nimport Box from '../../atoms/Box'\\\\nimport Position from '../Position'\\\\n\\\\nexport default {parameters: {\\\\\\\"storySource\\\\\\\":{\\\\\\\"source\\\\\\\":\\\\\\\"import React from 'react'\\\\\\\\nimport {\\\\\\\\n  boolean,\\\\\\\\n  text,\\\\\\\\n  object,\\\\\\\\n  withKnobs,\\\\\\\\n  number\\\\\\\\n} from '@storybook/addon-knobs'\\\\\\\\nimport { action } from '@storybook/addon-actions'\\\\\\\\nimport { path } from '..'\\\\\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\\\\\nimport InlinePopup from '.'\\\\\\\\nimport IconButton from '../../atoms/IconButton'\\\\\\\\nimport Box from '../../atoms/Box'\\\\\\\\nimport Position from '../Position'\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/InlinePopup`,\\\\\\\\n  decorators: [withKnobs],\\\\\\\\n  component: InlinePopup\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const InlinePopupStories = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Position display='block'>\\\\\\\\n        <Box m='10em'>Sample Card</Box>\\\\\\\\n        <Box m='10em'>Sample Card</Box>\\\\\\\\n\\\\\\\\n        <InlinePopup\\\\\\\\n          isOpen={boolean('isOpen', false)}\\\\\\\\n          title={text('title', 'Inline Popup Header')}\\\\\\\\n          onClose={action('close called')}\\\\\\\\n          width={number('width', 500)}\\\\\\\\n          height={number('height', 200)}\\\\\\\\n          style={object('style', {\\\\\\\\n            position: 'absolute'\\\\\\\\n          })}\\\\\\\\n          content={\\\\\\\\n            <Box p='1em' m='1em'>\\\\\\\\n              This is something inside the InlinePopup\\\\\\\\n            </Box>\\\\\\\\n          }\\\\\\\\n          id={text('id', 'InlinePopupID')}\\\\\\\\n          className={text('className', 'InlinePopupclassName')}\\\\\\\\n          draggable={boolean('draggable', false)}\\\\\\\\n        >\\\\\\\\n          <IconButton\\\\\\\\n            intent='default'\\\\\\\\n            iconVariant='icomoon-add'\\\\\\\\n            children='Add'\\\\\\\\n          />\\\\\\\\n        </InlinePopup>\\\\\\\\n      </Position>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\",\\\\\\\"locationsMap\\\\\\\":{}},},\\\\n  title: `${path}/InlinePopup`,\\\\n  decorators: [withKnobs],\\\\n  component: InlinePopup\\\\n}\\\\n\\\\nexport const InlinePopupStories = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Position display='block'>\\\\n        <Box m='10em'>Sample Card</Box>\\\\n        <Box m='10em'>Sample Card</Box>\\\\n\\\\n        <InlinePopup\\\\n          isOpen={boolean('isOpen', false)}\\\\n          title={text('title', 'Inline Popup Header')}\\\\n          onClose={action('close called')}\\\\n          width={number('width', 500)}\\\\n          height={number('height', 200)}\\\\n          style={object('style', {\\\\n            position: 'absolute'\\\\n          })}\\\\n          content={\\\\n            <Box p='1em' m='1em'>\\\\n              This is something inside the InlinePopup\\\\n            </Box>\\\\n          }\\\\n          id={text('id', 'InlinePopupID')}\\\\n          className={text('className', 'InlinePopupclassName')}\\\\n          draggable={boolean('draggable', false)}\\\\n        >\\\\n          <IconButton\\\\n            intent='default'\\\\n            iconVariant='icomoon-add'\\\\n            children='Add'\\\\n          />\\\\n        </InlinePopup>\\\\n      </Position>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/InlinePopup.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\n\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/molecules/InlinePopup\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"import React from 'react'\\\\nimport {\\\\n  boolean,\\\\n  text,\\\\n  object,\\\\n  withKnobs,\\\\n  number\\\\n} from '@storybook/addon-knobs'\\\\nimport { action } from '@storybook/addon-actions'\\\\nimport { path } from '..'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport InlinePopup from '.'\\\\nimport IconButton from '../../atoms/IconButton'\\\\nimport Box from '../../atoms/Box'\\\\nimport Position from '../Position'\\\\n\\\\nexport default {\\\\n  title: `${path}/InlinePopup`,\\\\n  decorators: [withKnobs],\\\\n  component: InlinePopup\\\\n}\\\\n\\\\nexport const InlinePopupStories = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Position display='block'>\\\\n        <Box m='10em'>Sample Card</Box>\\\\n        <Box m='10em'>Sample Card</Box>\\\\n\\\\n        <InlinePopup\\\\n          isOpen={boolean('isOpen', false)}\\\\n          title={text('title', 'Inline Popup Header')}\\\\n          onClose={action('close called')}\\\\n          width={number('width', 500)}\\\\n          height={number('height', 200)}\\\\n          style={object('style', {\\\\n            position: 'absolute'\\\\n          })}\\\\n          content={\\\\n            <Box p='1em' m='1em'>\\\\n              This is something inside the InlinePopup\\\\n            </Box>\\\\n          }\\\\n          id={text('id', 'InlinePopupID')}\\\\n          className={text('className', 'InlinePopupclassName')}\\\\n          draggable={boolean('draggable', false)}\\\\n        >\\\\n          <IconButton\\\\n            intent='default'\\\\n            iconVariant='icomoon-add'\\\\n            children='Add'\\\\n          />\\\\n        </InlinePopup>\\\\n      </Position>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/InlinePopup.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\nimport React from 'react'\\nimport {\\n  boolean,\\n  text,\\n  object,\\n  withKnobs,\\n  number\\n} from '@storybook/addon-knobs'\\nimport { action } from '@storybook/addon-actions'\\nimport { path } from '..'\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\nimport InlinePopup from '.'\\nimport IconButton from '../../atoms/IconButton'\\nimport Box from '../../atoms/Box'\\nimport Position from '../Position'\\n\\nexport default {parameters: {\\\"storySource\\\":{\\\"source\\\":\\\"\\\\n\\\\n// @ts-nocheck\\\\n// @ts-ignore\\\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\\\n// @ts-ignore\\\\nvar addSourceDecorator = require(\\\\\\\"@storybook/source-loader/preview\\\\\\\").addSource;\\\\n// @ts-ignore\\\\nvar __SOURCE_PREFIX__ = \\\\\\\"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/molecules/InlinePopup\\\\\\\";\\\\n// @ts-ignore\\\\nvar __STORY__ = \\\\\\\"import React from 'react'\\\\\\\\nimport {\\\\\\\\n  boolean,\\\\\\\\n  text,\\\\\\\\n  object,\\\\\\\\n  withKnobs,\\\\\\\\n  number\\\\\\\\n} from '@storybook/addon-knobs'\\\\\\\\nimport { action } from '@storybook/addon-actions'\\\\\\\\nimport { path } from '..'\\\\\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\\\\\nimport InlinePopup from '.'\\\\\\\\nimport IconButton from '../../atoms/IconButton'\\\\\\\\nimport Box from '../../atoms/Box'\\\\\\\\nimport Position from '../Position'\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/InlinePopup`,\\\\\\\\n  decorators: [withKnobs],\\\\\\\\n  component: InlinePopup\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const InlinePopupStories = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Position display='block'>\\\\\\\\n        <Box m='10em'>Sample Card</Box>\\\\\\\\n        <Box m='10em'>Sample Card</Box>\\\\\\\\n\\\\\\\\n        <InlinePopup\\\\\\\\n          isOpen={boolean('isOpen', false)}\\\\\\\\n          title={text('title', 'Inline Popup Header')}\\\\\\\\n          onClose={action('close called')}\\\\\\\\n          width={number('width', 500)}\\\\\\\\n          height={number('height', 200)}\\\\\\\\n          style={object('style', {\\\\\\\\n            position: 'absolute'\\\\\\\\n          })}\\\\\\\\n          content={\\\\\\\\n            <Box p='1em' m='1em'>\\\\\\\\n              This is something inside the InlinePopup\\\\\\\\n            </Box>\\\\\\\\n          }\\\\\\\\n          id={text('id', 'InlinePopupID')}\\\\\\\\n          className={text('className', 'InlinePopupclassName')}\\\\\\\\n          draggable={boolean('draggable', false)}\\\\\\\\n        >\\\\\\\\n          <IconButton\\\\\\\\n            intent='default'\\\\\\\\n            iconVariant='icomoon-add'\\\\\\\\n            children='Add'\\\\\\\\n          />\\\\\\\\n        </InlinePopup>\\\\\\\\n      </Position>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\";\\\\n// @ts-ignore\\\\nvar __ADDS_MAP__ = {};\\\\n// @ts-ignore\\\\nvar __MAIN_FILE_LOCATION__ = \\\\\\\"/InlinePopup.stories.tsx\\\\\\\";\\\\n// @ts-ignore\\\\nvar __MODULE_DEPENDENCIES__ = [];\\\\n// @ts-ignore\\\\nvar __LOCAL_DEPENDENCIES__ = {};\\\\n// @ts-ignore\\\\nvar __IDS_TO_FRAMEWORKS__ = {};\\\\n        \\\\nimport React from 'react'\\\\nimport {\\\\n  boolean,\\\\n  text,\\\\n  object,\\\\n  withKnobs,\\\\n  number\\\\n} from '@storybook/addon-knobs'\\\\nimport { action } from '@storybook/addon-actions'\\\\nimport { path } from '..'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport InlinePopup from '.'\\\\nimport IconButton from '../../atoms/IconButton'\\\\nimport Box from '../../atoms/Box'\\\\nimport Position from '../Position'\\\\n\\\\nexport default {parameters: {\\\\\\\"storySource\\\\\\\":{\\\\\\\"source\\\\\\\":\\\\\\\"import React from 'react'\\\\\\\\nimport {\\\\\\\\n  boolean,\\\\\\\\n  text,\\\\\\\\n  object,\\\\\\\\n  withKnobs,\\\\\\\\n  number\\\\\\\\n} from '@storybook/addon-knobs'\\\\\\\\nimport { action } from '@storybook/addon-actions'\\\\\\\\nimport { path } from '..'\\\\\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\\\\\nimport InlinePopup from '.'\\\\\\\\nimport IconButton from '../../atoms/IconButton'\\\\\\\\nimport Box from '../../atoms/Box'\\\\\\\\nimport Position from '../Position'\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/InlinePopup`,\\\\\\\\n  decorators: [withKnobs],\\\\\\\\n  component: InlinePopup\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const InlinePopupStories = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Position display='block'>\\\\\\\\n        <Box m='10em'>Sample Card</Box>\\\\\\\\n        <Box m='10em'>Sample Card</Box>\\\\\\\\n\\\\\\\\n        <InlinePopup\\\\\\\\n          isOpen={boolean('isOpen', false)}\\\\\\\\n          title={text('title', 'Inline Popup Header')}\\\\\\\\n          onClose={action('close called')}\\\\\\\\n          width={number('width', 500)}\\\\\\\\n          height={number('height', 200)}\\\\\\\\n          style={object('style', {\\\\\\\\n            position: 'absolute'\\\\\\\\n          })}\\\\\\\\n          content={\\\\\\\\n            <Box p='1em' m='1em'>\\\\\\\\n              This is something inside the InlinePopup\\\\\\\\n            </Box>\\\\\\\\n          }\\\\\\\\n          id={text('id', 'InlinePopupID')}\\\\\\\\n          className={text('className', 'InlinePopupclassName')}\\\\\\\\n          draggable={boolean('draggable', false)}\\\\\\\\n        >\\\\\\\\n          <IconButton\\\\\\\\n            intent='default'\\\\\\\\n            iconVariant='icomoon-add'\\\\\\\\n            children='Add'\\\\\\\\n          />\\\\\\\\n        </InlinePopup>\\\\\\\\n      </Position>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\",\\\\\\\"locationsMap\\\\\\\":{}},},\\\\n  title: `${path}/InlinePopup`,\\\\n  decorators: [withKnobs],\\\\n  component: InlinePopup\\\\n}\\\\n\\\\nexport const InlinePopupStories = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Position display='block'>\\\\n        <Box m='10em'>Sample Card</Box>\\\\n        <Box m='10em'>Sample Card</Box>\\\\n\\\\n        <InlinePopup\\\\n          isOpen={boolean('isOpen', false)}\\\\n          title={text('title', 'Inline Popup Header')}\\\\n          onClose={action('close called')}\\\\n          width={number('width', 500)}\\\\n          height={number('height', 200)}\\\\n          style={object('style', {\\\\n            position: 'absolute'\\\\n          })}\\\\n          content={\\\\n            <Box p='1em' m='1em'>\\\\n              This is something inside the InlinePopup\\\\n            </Box>\\\\n          }\\\\n          id={text('id', 'InlinePopupID')}\\\\n          className={text('className', 'InlinePopupclassName')}\\\\n          draggable={boolean('draggable', false)}\\\\n        >\\\\n          <IconButton\\\\n            intent='default'\\\\n            iconVariant='icomoon-add'\\\\n            children='Add'\\\\n          />\\\\n        </InlinePopup>\\\\n      </Position>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\",\\\"locationsMap\\\":{}},\\\"storySource\\\":{\\\"source\\\":\\\"import React from 'react'\\\\nimport {\\\\n  boolean,\\\\n  text,\\\\n  object,\\\\n  withKnobs,\\\\n  number\\\\n} from '@storybook/addon-knobs'\\\\nimport { action } from '@storybook/addon-actions'\\\\nimport { path } from '..'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport InlinePopup from '.'\\\\nimport IconButton from '../../atoms/IconButton'\\\\nimport Box from '../../atoms/Box'\\\\nimport Position from '../Position'\\\\n\\\\nexport default {\\\\n  title: `${path}/InlinePopup`,\\\\n  decorators: [withKnobs],\\\\n  component: InlinePopup\\\\n}\\\\n\\\\nexport const InlinePopupStories = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Position display='block'>\\\\n        <Box m='10em'>Sample Card</Box>\\\\n        <Box m='10em'>Sample Card</Box>\\\\n\\\\n        <InlinePopup\\\\n          isOpen={boolean('isOpen', false)}\\\\n          title={text('title', 'Inline Popup Header')}\\\\n          onClose={action('close called')}\\\\n          width={number('width', 500)}\\\\n          height={number('height', 200)}\\\\n          style={object('style', {\\\\n            position: 'absolute'\\\\n          })}\\\\n          content={\\\\n            <Box p='1em' m='1em'>\\\\n              This is something inside the InlinePopup\\\\n            </Box>\\\\n          }\\\\n          id={text('id', 'InlinePopupID')}\\\\n          className={text('className', 'InlinePopupclassName')}\\\\n          draggable={boolean('draggable', false)}\\\\n        >\\\\n          <IconButton\\\\n            intent='default'\\\\n            iconVariant='icomoon-add'\\\\n            children='Add'\\\\n          />\\\\n        </InlinePopup>\\\\n      </Position>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\",\\\"locationsMap\\\":{}},},\\n  title: `${path}/InlinePopup`,\\n  decorators: [withKnobs],\\n  component: InlinePopup\\n}\\n\\nexport const InlinePopupStories = addSourceDecorator(addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <Position display='block'>\\n        <Box m='10em'>Sample Card</Box>\\n        <Box m='10em'>Sample Card</Box>\\n\\n        <InlinePopup\\n          isOpen={boolean('isOpen', false)}\\n          title={text('title', 'Inline Popup Header')}\\n          onClose={action('close called')}\\n          width={number('width', 500)}\\n          height={number('height', 200)}\\n          style={object('style', {\\n            position: 'absolute'\\n          })}\\n          content={\\n            <Box p='1em' m='1em'>\\n              This is something inside the InlinePopup\\n            </Box>\\n          }\\n          id={text('id', 'InlinePopupID')}\\n          className={text('className', 'InlinePopupclassName')}\\n          draggable={boolean('draggable', false)}\\n        >\\n          <IconButton\\n            intent='default'\\n            iconVariant='icomoon-add'\\n            children='Add'\\n          />\\n        </InlinePopup>\\n      </Position>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\"; // @ts-ignore\n\nvar __ADDS_MAP__ = {}; // @ts-ignore\n\nvar __MAIN_FILE_LOCATION__ = \"/InlinePopup.stories.tsx\"; // @ts-ignore\n\nvar __MODULE_DEPENDENCIES__ = []; // @ts-ignore\n\nvar __LOCAL_DEPENDENCIES__ = {}; // @ts-ignore\n\nvar __IDS_TO_FRAMEWORKS__ = {};\n/* eslint-disable */\n// @ts-nocheck\n// @ts-ignore\n\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource; // @ts-ignore\n\n\nvar addSourceDecorator = require(\"@storybook/source-loader/preview\").addSource; // @ts-ignore\n\n\nvar __SOURCE_PREFIX__ = \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/molecules/InlinePopup\"; // @ts-ignore\n\nvar __STORY__ = \"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/molecules/InlinePopup\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"import React from 'react'\\\\nimport {\\\\n  boolean,\\\\n  text,\\\\n  object,\\\\n  withKnobs,\\\\n  number\\\\n} from '@storybook/addon-knobs'\\\\nimport { action } from '@storybook/addon-actions'\\\\nimport { path } from '..'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport InlinePopup from '.'\\\\nimport IconButton from '../../atoms/IconButton'\\\\nimport Box from '../../atoms/Box'\\\\nimport Position from '../Position'\\\\n\\\\nexport default {\\\\n  title: `${path}/InlinePopup`,\\\\n  decorators: [withKnobs],\\\\n  component: InlinePopup\\\\n}\\\\n\\\\nexport const InlinePopupStories = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Position display='block'>\\\\n        <Box m='10em'>Sample Card</Box>\\\\n        <Box m='10em'>Sample Card</Box>\\\\n\\\\n        <InlinePopup\\\\n          isOpen={boolean('isOpen', false)}\\\\n          title={text('title', 'Inline Popup Header')}\\\\n          onClose={action('close called')}\\\\n          width={number('width', 500)}\\\\n          height={number('height', 200)}\\\\n          style={object('style', {\\\\n            position: 'absolute'\\\\n          })}\\\\n          content={\\\\n            <Box p='1em' m='1em'>\\\\n              This is something inside the InlinePopup\\\\n            </Box>\\\\n          }\\\\n          id={text('id', 'InlinePopupID')}\\\\n          className={text('className', 'InlinePopupclassName')}\\\\n          draggable={boolean('draggable', false)}\\\\n        >\\\\n          <IconButton\\\\n            intent='default'\\\\n            iconVariant='icomoon-add'\\\\n            children='Add'\\\\n          />\\\\n        </InlinePopup>\\\\n      </Position>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/InlinePopup.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\nimport React from 'react'\\nimport {\\n  boolean,\\n  text,\\n  object,\\n  withKnobs,\\n  number\\n} from '@storybook/addon-knobs'\\nimport { action } from '@storybook/addon-actions'\\nimport { path } from '..'\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\nimport InlinePopup from '.'\\nimport IconButton from '../../atoms/IconButton'\\nimport Box from '../../atoms/Box'\\nimport Position from '../Position'\\n\\nexport default {parameters: {\\\"storySource\\\":{\\\"source\\\":\\\"import React from 'react'\\\\nimport {\\\\n  boolean,\\\\n  text,\\\\n  object,\\\\n  withKnobs,\\\\n  number\\\\n} from '@storybook/addon-knobs'\\\\nimport { action } from '@storybook/addon-actions'\\\\nimport { path } from '..'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport InlinePopup from '.'\\\\nimport IconButton from '../../atoms/IconButton'\\\\nimport Box from '../../atoms/Box'\\\\nimport Position from '../Position'\\\\n\\\\nexport default {\\\\n  title: `${path}/InlinePopup`,\\\\n  decorators: [withKnobs],\\\\n  component: InlinePopup\\\\n}\\\\n\\\\nexport const InlinePopupStories = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Position display='block'>\\\\n        <Box m='10em'>Sample Card</Box>\\\\n        <Box m='10em'>Sample Card</Box>\\\\n\\\\n        <InlinePopup\\\\n          isOpen={boolean('isOpen', false)}\\\\n          title={text('title', 'Inline Popup Header')}\\\\n          onClose={action('close called')}\\\\n          width={number('width', 500)}\\\\n          height={number('height', 200)}\\\\n          style={object('style', {\\\\n            position: 'absolute'\\\\n          })}\\\\n          content={\\\\n            <Box p='1em' m='1em'>\\\\n              This is something inside the InlinePopup\\\\n            </Box>\\\\n          }\\\\n          id={text('id', 'InlinePopupID')}\\\\n          className={text('className', 'InlinePopupclassName')}\\\\n          draggable={boolean('draggable', false)}\\\\n        >\\\\n          <IconButton\\\\n            intent='default'\\\\n            iconVariant='icomoon-add'\\\\n            children='Add'\\\\n          />\\\\n        </InlinePopup>\\\\n      </Position>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\",\\\"locationsMap\\\":{}},},\\n  title: `${path}/InlinePopup`,\\n  decorators: [withKnobs],\\n  component: InlinePopup\\n}\\n\\nexport const InlinePopupStories = addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <Position display='block'>\\n        <Box m='10em'>Sample Card</Box>\\n        <Box m='10em'>Sample Card</Box>\\n\\n        <InlinePopup\\n          isOpen={boolean('isOpen', false)}\\n          title={text('title', 'Inline Popup Header')}\\n          onClose={action('close called')}\\n          width={number('width', 500)}\\n          height={number('height', 200)}\\n          style={object('style', {\\n            position: 'absolute'\\n          })}\\n          content={\\n            <Box p='1em' m='1em'>\\n              This is something inside the InlinePopup\\n            </Box>\\n          }\\n          id={text('id', 'InlinePopupID')}\\n          className={text('className', 'InlinePopupclassName')}\\n          draggable={boolean('draggable', false)}\\n        >\\n          <IconButton\\n            intent='default'\\n            iconVariant='icomoon-add'\\n            children='Add'\\n          />\\n        </InlinePopup>\\n      </Position>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\"; // @ts-ignore\n\nvar __ADDS_MAP__ = {}; // @ts-ignore\n\nvar __MAIN_FILE_LOCATION__ = \"/InlinePopup.stories.tsx\"; // @ts-ignore\n\nvar __MODULE_DEPENDENCIES__ = []; // @ts-ignore\n\nvar __LOCAL_DEPENDENCIES__ = {}; // @ts-ignore\n\nvar __IDS_TO_FRAMEWORKS__ = {};\n/* eslint-disable */\n// @ts-nocheck\n// @ts-ignore\n\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource; // @ts-ignore\n\n\nvar addSourceDecorator = require(\"@storybook/source-loader/preview\").addSource; // @ts-ignore\n\n\nvar __SOURCE_PREFIX__ = \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/molecules/InlinePopup\"; // @ts-ignore\n\nvar __STORY__ = \"import React from 'react'\\nimport {\\n  boolean,\\n  text,\\n  object,\\n  withKnobs,\\n  number\\n} from '@storybook/addon-knobs'\\nimport { action } from '@storybook/addon-actions'\\nimport { path } from '..'\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\nimport InlinePopup from '.'\\nimport IconButton from '../../atoms/IconButton'\\nimport Box from '../../atoms/Box'\\nimport Position from '../Position'\\n\\nexport default {\\n  title: `${path}/InlinePopup`,\\n  decorators: [withKnobs],\\n  component: InlinePopup\\n}\\n\\nexport const InlinePopupStories = () => {\\n  return (\\n    <ThemeWrapper>\\n      <Position display='block'>\\n        <Box m='10em'>Sample Card</Box>\\n        <Box m='10em'>Sample Card</Box>\\n\\n        <InlinePopup\\n          isOpen={boolean('isOpen', false)}\\n          title={text('title', 'Inline Popup Header')}\\n          onClose={action('close called')}\\n          width={number('width', 500)}\\n          height={number('height', 200)}\\n          style={object('style', {\\n            position: 'absolute'\\n          })}\\n          content={\\n            <Box p='1em' m='1em'>\\n              This is something inside the InlinePopup\\n            </Box>\\n          }\\n          id={text('id', 'InlinePopupID')}\\n          className={text('className', 'InlinePopupclassName')}\\n          draggable={boolean('draggable', false)}\\n        >\\n          <IconButton\\n            intent='default'\\n            iconVariant='icomoon-add'\\n            children='Add'\\n          />\\n        </InlinePopup>\\n      </Position>\\n    </ThemeWrapper>\\n  )\\n}\\n\"; // @ts-ignore\n\nvar __ADDS_MAP__ = {}; // @ts-ignore\n\nvar __MAIN_FILE_LOCATION__ = \"/InlinePopup.stories.tsx\"; // @ts-ignore\n\nvar __MODULE_DEPENDENCIES__ = []; // @ts-ignore\n\nvar __LOCAL_DEPENDENCIES__ = {}; // @ts-ignore\n\nvar __IDS_TO_FRAMEWORKS__ = {};\nimport React from 'react';\nimport { boolean as _boolean, text, object, withKnobs, number } from '@storybook/addon-knobs';\nimport { action } from '@storybook/addon-actions';\nimport { path } from '..';\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper';\nimport InlinePopup from '.';\nimport IconButton from '../../atoms/IconButton';\nimport Box from '../../atoms/Box';\nimport Position from '../Position';\nexport default {\n  parameters: (_parameters = {\n    \"storySource\": {\n      \"source\": \"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/molecules/InlinePopup\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"\\\\n\\\\n// @ts-nocheck\\\\n// @ts-ignore\\\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\\\n// @ts-ignore\\\\nvar addSourceDecorator = require(\\\\\\\"@storybook/source-loader/preview\\\\\\\").addSource;\\\\n// @ts-ignore\\\\nvar __SOURCE_PREFIX__ = \\\\\\\"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/molecules/InlinePopup\\\\\\\";\\\\n// @ts-ignore\\\\nvar __STORY__ = \\\\\\\"import React from 'react'\\\\\\\\nimport {\\\\\\\\n  boolean,\\\\\\\\n  text,\\\\\\\\n  object,\\\\\\\\n  withKnobs,\\\\\\\\n  number\\\\\\\\n} from '@storybook/addon-knobs'\\\\\\\\nimport { action } from '@storybook/addon-actions'\\\\\\\\nimport { path } from '..'\\\\\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\\\\\nimport InlinePopup from '.'\\\\\\\\nimport IconButton from '../../atoms/IconButton'\\\\\\\\nimport Box from '../../atoms/Box'\\\\\\\\nimport Position from '../Position'\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/InlinePopup`,\\\\\\\\n  decorators: [withKnobs],\\\\\\\\n  component: InlinePopup\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const InlinePopupStories = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Position display='block'>\\\\\\\\n        <Box m='10em'>Sample Card</Box>\\\\\\\\n        <Box m='10em'>Sample Card</Box>\\\\\\\\n\\\\\\\\n        <InlinePopup\\\\\\\\n          isOpen={boolean('isOpen', false)}\\\\\\\\n          title={text('title', 'Inline Popup Header')}\\\\\\\\n          onClose={action('close called')}\\\\\\\\n          width={number('width', 500)}\\\\\\\\n          height={number('height', 200)}\\\\\\\\n          style={object('style', {\\\\\\\\n            position: 'absolute'\\\\\\\\n          })}\\\\\\\\n          content={\\\\\\\\n            <Box p='1em' m='1em'>\\\\\\\\n              This is something inside the InlinePopup\\\\\\\\n            </Box>\\\\\\\\n          }\\\\\\\\n          id={text('id', 'InlinePopupID')}\\\\\\\\n          className={text('className', 'InlinePopupclassName')}\\\\\\\\n          draggable={boolean('draggable', false)}\\\\\\\\n        >\\\\\\\\n          <IconButton\\\\\\\\n            intent='default'\\\\\\\\n            iconVariant='icomoon-add'\\\\\\\\n            children='Add'\\\\\\\\n          />\\\\\\\\n        </InlinePopup>\\\\\\\\n      </Position>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\";\\\\n// @ts-ignore\\\\nvar __ADDS_MAP__ = {};\\\\n// @ts-ignore\\\\nvar __MAIN_FILE_LOCATION__ = \\\\\\\"/InlinePopup.stories.tsx\\\\\\\";\\\\n// @ts-ignore\\\\nvar __MODULE_DEPENDENCIES__ = [];\\\\n// @ts-ignore\\\\nvar __LOCAL_DEPENDENCIES__ = {};\\\\n// @ts-ignore\\\\nvar __IDS_TO_FRAMEWORKS__ = {};\\\\n        \\\\nimport React from 'react'\\\\nimport {\\\\n  boolean,\\\\n  text,\\\\n  object,\\\\n  withKnobs,\\\\n  number\\\\n} from '@storybook/addon-knobs'\\\\nimport { action } from '@storybook/addon-actions'\\\\nimport { path } from '..'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport InlinePopup from '.'\\\\nimport IconButton from '../../atoms/IconButton'\\\\nimport Box from '../../atoms/Box'\\\\nimport Position from '../Position'\\\\n\\\\nexport default {parameters: {\\\\\\\"storySource\\\\\\\":{\\\\\\\"source\\\\\\\":\\\\\\\"import React from 'react'\\\\\\\\nimport {\\\\\\\\n  boolean,\\\\\\\\n  text,\\\\\\\\n  object,\\\\\\\\n  withKnobs,\\\\\\\\n  number\\\\\\\\n} from '@storybook/addon-knobs'\\\\\\\\nimport { action } from '@storybook/addon-actions'\\\\\\\\nimport { path } from '..'\\\\\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\\\\\nimport InlinePopup from '.'\\\\\\\\nimport IconButton from '../../atoms/IconButton'\\\\\\\\nimport Box from '../../atoms/Box'\\\\\\\\nimport Position from '../Position'\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/InlinePopup`,\\\\\\\\n  decorators: [withKnobs],\\\\\\\\n  component: InlinePopup\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const InlinePopupStories = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Position display='block'>\\\\\\\\n        <Box m='10em'>Sample Card</Box>\\\\\\\\n        <Box m='10em'>Sample Card</Box>\\\\\\\\n\\\\\\\\n        <InlinePopup\\\\\\\\n          isOpen={boolean('isOpen', false)}\\\\\\\\n          title={text('title', 'Inline Popup Header')}\\\\\\\\n          onClose={action('close called')}\\\\\\\\n          width={number('width', 500)}\\\\\\\\n          height={number('height', 200)}\\\\\\\\n          style={object('style', {\\\\\\\\n            position: 'absolute'\\\\\\\\n          })}\\\\\\\\n          content={\\\\\\\\n            <Box p='1em' m='1em'>\\\\\\\\n              This is something inside the InlinePopup\\\\\\\\n            </Box>\\\\\\\\n          }\\\\\\\\n          id={text('id', 'InlinePopupID')}\\\\\\\\n          className={text('className', 'InlinePopupclassName')}\\\\\\\\n          draggable={boolean('draggable', false)}\\\\\\\\n        >\\\\\\\\n          <IconButton\\\\\\\\n            intent='default'\\\\\\\\n            iconVariant='icomoon-add'\\\\\\\\n            children='Add'\\\\\\\\n          />\\\\\\\\n        </InlinePopup>\\\\\\\\n      </Position>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\",\\\\\\\"locationsMap\\\\\\\":{}},},\\\\n  title: `${path}/InlinePopup`,\\\\n  decorators: [withKnobs],\\\\n  component: InlinePopup\\\\n}\\\\n\\\\nexport const InlinePopupStories = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Position display='block'>\\\\n        <Box m='10em'>Sample Card</Box>\\\\n        <Box m='10em'>Sample Card</Box>\\\\n\\\\n        <InlinePopup\\\\n          isOpen={boolean('isOpen', false)}\\\\n          title={text('title', 'Inline Popup Header')}\\\\n          onClose={action('close called')}\\\\n          width={number('width', 500)}\\\\n          height={number('height', 200)}\\\\n          style={object('style', {\\\\n            position: 'absolute'\\\\n          })}\\\\n          content={\\\\n            <Box p='1em' m='1em'>\\\\n              This is something inside the InlinePopup\\\\n            </Box>\\\\n          }\\\\n          id={text('id', 'InlinePopupID')}\\\\n          className={text('className', 'InlinePopupclassName')}\\\\n          draggable={boolean('draggable', false)}\\\\n        >\\\\n          <IconButton\\\\n            intent='default'\\\\n            iconVariant='icomoon-add'\\\\n            children='Add'\\\\n          />\\\\n        </InlinePopup>\\\\n      </Position>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/InlinePopup.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\n\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/molecules/InlinePopup\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"import React from 'react'\\\\nimport {\\\\n  boolean,\\\\n  text,\\\\n  object,\\\\n  withKnobs,\\\\n  number\\\\n} from '@storybook/addon-knobs'\\\\nimport { action } from '@storybook/addon-actions'\\\\nimport { path } from '..'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport InlinePopup from '.'\\\\nimport IconButton from '../../atoms/IconButton'\\\\nimport Box from '../../atoms/Box'\\\\nimport Position from '../Position'\\\\n\\\\nexport default {\\\\n  title: `${path}/InlinePopup`,\\\\n  decorators: [withKnobs],\\\\n  component: InlinePopup\\\\n}\\\\n\\\\nexport const InlinePopupStories = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Position display='block'>\\\\n        <Box m='10em'>Sample Card</Box>\\\\n        <Box m='10em'>Sample Card</Box>\\\\n\\\\n        <InlinePopup\\\\n          isOpen={boolean('isOpen', false)}\\\\n          title={text('title', 'Inline Popup Header')}\\\\n          onClose={action('close called')}\\\\n          width={number('width', 500)}\\\\n          height={number('height', 200)}\\\\n          style={object('style', {\\\\n            position: 'absolute'\\\\n          })}\\\\n          content={\\\\n            <Box p='1em' m='1em'>\\\\n              This is something inside the InlinePopup\\\\n            </Box>\\\\n          }\\\\n          id={text('id', 'InlinePopupID')}\\\\n          className={text('className', 'InlinePopupclassName')}\\\\n          draggable={boolean('draggable', false)}\\\\n        >\\\\n          <IconButton\\\\n            intent='default'\\\\n            iconVariant='icomoon-add'\\\\n            children='Add'\\\\n          />\\\\n        </InlinePopup>\\\\n      </Position>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/InlinePopup.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\nimport React from 'react'\\nimport {\\n  boolean,\\n  text,\\n  object,\\n  withKnobs,\\n  number\\n} from '@storybook/addon-knobs'\\nimport { action } from '@storybook/addon-actions'\\nimport { path } from '..'\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\nimport InlinePopup from '.'\\nimport IconButton from '../../atoms/IconButton'\\nimport Box from '../../atoms/Box'\\nimport Position from '../Position'\\n\\nexport default {parameters: {\\\"storySource\\\":{\\\"source\\\":\\\"\\\\n\\\\n// @ts-nocheck\\\\n// @ts-ignore\\\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\\\n// @ts-ignore\\\\nvar addSourceDecorator = require(\\\\\\\"@storybook/source-loader/preview\\\\\\\").addSource;\\\\n// @ts-ignore\\\\nvar __SOURCE_PREFIX__ = \\\\\\\"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/molecules/InlinePopup\\\\\\\";\\\\n// @ts-ignore\\\\nvar __STORY__ = \\\\\\\"import React from 'react'\\\\\\\\nimport {\\\\\\\\n  boolean,\\\\\\\\n  text,\\\\\\\\n  object,\\\\\\\\n  withKnobs,\\\\\\\\n  number\\\\\\\\n} from '@storybook/addon-knobs'\\\\\\\\nimport { action } from '@storybook/addon-actions'\\\\\\\\nimport { path } from '..'\\\\\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\\\\\nimport InlinePopup from '.'\\\\\\\\nimport IconButton from '../../atoms/IconButton'\\\\\\\\nimport Box from '../../atoms/Box'\\\\\\\\nimport Position from '../Position'\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/InlinePopup`,\\\\\\\\n  decorators: [withKnobs],\\\\\\\\n  component: InlinePopup\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const InlinePopupStories = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Position display='block'>\\\\\\\\n        <Box m='10em'>Sample Card</Box>\\\\\\\\n        <Box m='10em'>Sample Card</Box>\\\\\\\\n\\\\\\\\n        <InlinePopup\\\\\\\\n          isOpen={boolean('isOpen', false)}\\\\\\\\n          title={text('title', 'Inline Popup Header')}\\\\\\\\n          onClose={action('close called')}\\\\\\\\n          width={number('width', 500)}\\\\\\\\n          height={number('height', 200)}\\\\\\\\n          style={object('style', {\\\\\\\\n            position: 'absolute'\\\\\\\\n          })}\\\\\\\\n          content={\\\\\\\\n            <Box p='1em' m='1em'>\\\\\\\\n              This is something inside the InlinePopup\\\\\\\\n            </Box>\\\\\\\\n          }\\\\\\\\n          id={text('id', 'InlinePopupID')}\\\\\\\\n          className={text('className', 'InlinePopupclassName')}\\\\\\\\n          draggable={boolean('draggable', false)}\\\\\\\\n        >\\\\\\\\n          <IconButton\\\\\\\\n            intent='default'\\\\\\\\n            iconVariant='icomoon-add'\\\\\\\\n            children='Add'\\\\\\\\n          />\\\\\\\\n        </InlinePopup>\\\\\\\\n      </Position>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\";\\\\n// @ts-ignore\\\\nvar __ADDS_MAP__ = {};\\\\n// @ts-ignore\\\\nvar __MAIN_FILE_LOCATION__ = \\\\\\\"/InlinePopup.stories.tsx\\\\\\\";\\\\n// @ts-ignore\\\\nvar __MODULE_DEPENDENCIES__ = [];\\\\n// @ts-ignore\\\\nvar __LOCAL_DEPENDENCIES__ = {};\\\\n// @ts-ignore\\\\nvar __IDS_TO_FRAMEWORKS__ = {};\\\\n        \\\\nimport React from 'react'\\\\nimport {\\\\n  boolean,\\\\n  text,\\\\n  object,\\\\n  withKnobs,\\\\n  number\\\\n} from '@storybook/addon-knobs'\\\\nimport { action } from '@storybook/addon-actions'\\\\nimport { path } from '..'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport InlinePopup from '.'\\\\nimport IconButton from '../../atoms/IconButton'\\\\nimport Box from '../../atoms/Box'\\\\nimport Position from '../Position'\\\\n\\\\nexport default {parameters: {\\\\\\\"storySource\\\\\\\":{\\\\\\\"source\\\\\\\":\\\\\\\"import React from 'react'\\\\\\\\nimport {\\\\\\\\n  boolean,\\\\\\\\n  text,\\\\\\\\n  object,\\\\\\\\n  withKnobs,\\\\\\\\n  number\\\\\\\\n} from '@storybook/addon-knobs'\\\\\\\\nimport { action } from '@storybook/addon-actions'\\\\\\\\nimport { path } from '..'\\\\\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\\\\\nimport InlinePopup from '.'\\\\\\\\nimport IconButton from '../../atoms/IconButton'\\\\\\\\nimport Box from '../../atoms/Box'\\\\\\\\nimport Position from '../Position'\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/InlinePopup`,\\\\\\\\n  decorators: [withKnobs],\\\\\\\\n  component: InlinePopup\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const InlinePopupStories = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Position display='block'>\\\\\\\\n        <Box m='10em'>Sample Card</Box>\\\\\\\\n        <Box m='10em'>Sample Card</Box>\\\\\\\\n\\\\\\\\n        <InlinePopup\\\\\\\\n          isOpen={boolean('isOpen', false)}\\\\\\\\n          title={text('title', 'Inline Popup Header')}\\\\\\\\n          onClose={action('close called')}\\\\\\\\n          width={number('width', 500)}\\\\\\\\n          height={number('height', 200)}\\\\\\\\n          style={object('style', {\\\\\\\\n            position: 'absolute'\\\\\\\\n          })}\\\\\\\\n          content={\\\\\\\\n            <Box p='1em' m='1em'>\\\\\\\\n              This is something inside the InlinePopup\\\\\\\\n            </Box>\\\\\\\\n          }\\\\\\\\n          id={text('id', 'InlinePopupID')}\\\\\\\\n          className={text('className', 'InlinePopupclassName')}\\\\\\\\n          draggable={boolean('draggable', false)}\\\\\\\\n        >\\\\\\\\n          <IconButton\\\\\\\\n            intent='default'\\\\\\\\n            iconVariant='icomoon-add'\\\\\\\\n            children='Add'\\\\\\\\n          />\\\\\\\\n        </InlinePopup>\\\\\\\\n      </Position>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\",\\\\\\\"locationsMap\\\\\\\":{}},},\\\\n  title: `${path}/InlinePopup`,\\\\n  decorators: [withKnobs],\\\\n  component: InlinePopup\\\\n}\\\\n\\\\nexport const InlinePopupStories = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Position display='block'>\\\\n        <Box m='10em'>Sample Card</Box>\\\\n        <Box m='10em'>Sample Card</Box>\\\\n\\\\n        <InlinePopup\\\\n          isOpen={boolean('isOpen', false)}\\\\n          title={text('title', 'Inline Popup Header')}\\\\n          onClose={action('close called')}\\\\n          width={number('width', 500)}\\\\n          height={number('height', 200)}\\\\n          style={object('style', {\\\\n            position: 'absolute'\\\\n          })}\\\\n          content={\\\\n            <Box p='1em' m='1em'>\\\\n              This is something inside the InlinePopup\\\\n            </Box>\\\\n          }\\\\n          id={text('id', 'InlinePopupID')}\\\\n          className={text('className', 'InlinePopupclassName')}\\\\n          draggable={boolean('draggable', false)}\\\\n        >\\\\n          <IconButton\\\\n            intent='default'\\\\n            iconVariant='icomoon-add'\\\\n            children='Add'\\\\n          />\\\\n        </InlinePopup>\\\\n      </Position>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\",\\\"locationsMap\\\":{}},\\\"storySource\\\":{\\\"source\\\":\\\"import React from 'react'\\\\nimport {\\\\n  boolean,\\\\n  text,\\\\n  object,\\\\n  withKnobs,\\\\n  number\\\\n} from '@storybook/addon-knobs'\\\\nimport { action } from '@storybook/addon-actions'\\\\nimport { path } from '..'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport InlinePopup from '.'\\\\nimport IconButton from '../../atoms/IconButton'\\\\nimport Box from '../../atoms/Box'\\\\nimport Position from '../Position'\\\\n\\\\nexport default {\\\\n  title: `${path}/InlinePopup`,\\\\n  decorators: [withKnobs],\\\\n  component: InlinePopup\\\\n}\\\\n\\\\nexport const InlinePopupStories = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Position display='block'>\\\\n        <Box m='10em'>Sample Card</Box>\\\\n        <Box m='10em'>Sample Card</Box>\\\\n\\\\n        <InlinePopup\\\\n          isOpen={boolean('isOpen', false)}\\\\n          title={text('title', 'Inline Popup Header')}\\\\n          onClose={action('close called')}\\\\n          width={number('width', 500)}\\\\n          height={number('height', 200)}\\\\n          style={object('style', {\\\\n            position: 'absolute'\\\\n          })}\\\\n          content={\\\\n            <Box p='1em' m='1em'>\\\\n              This is something inside the InlinePopup\\\\n            </Box>\\\\n          }\\\\n          id={text('id', 'InlinePopupID')}\\\\n          className={text('className', 'InlinePopupclassName')}\\\\n          draggable={boolean('draggable', false)}\\\\n        >\\\\n          <IconButton\\\\n            intent='default'\\\\n            iconVariant='icomoon-add'\\\\n            children='Add'\\\\n          />\\\\n        </InlinePopup>\\\\n      </Position>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\",\\\"locationsMap\\\":{}},},\\n  title: `${path}/InlinePopup`,\\n  decorators: [withKnobs],\\n  component: InlinePopup\\n}\\n\\nexport const InlinePopupStories = addSourceDecorator(addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <Position display='block'>\\n        <Box m='10em'>Sample Card</Box>\\n        <Box m='10em'>Sample Card</Box>\\n\\n        <InlinePopup\\n          isOpen={boolean('isOpen', false)}\\n          title={text('title', 'Inline Popup Header')}\\n          onClose={action('close called')}\\n          width={number('width', 500)}\\n          height={number('height', 200)}\\n          style={object('style', {\\n            position: 'absolute'\\n          })}\\n          content={\\n            <Box p='1em' m='1em'>\\n              This is something inside the InlinePopup\\n            </Box>\\n          }\\n          id={text('id', 'InlinePopupID')}\\n          className={text('className', 'InlinePopupclassName')}\\n          draggable={boolean('draggable', false)}\\n        >\\n          <IconButton\\n            intent='default'\\n            iconVariant='icomoon-add'\\n            children='Add'\\n          />\\n        </InlinePopup>\\n      </Position>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\",\n      \"locationsMap\": {}\n    }\n  }, _defineProperty(_parameters, \"storySource\", {\n    \"source\": \"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/molecules/InlinePopup\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"import React from 'react'\\\\nimport {\\\\n  boolean,\\\\n  text,\\\\n  object,\\\\n  withKnobs,\\\\n  number\\\\n} from '@storybook/addon-knobs'\\\\nimport { action } from '@storybook/addon-actions'\\\\nimport { path } from '..'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport InlinePopup from '.'\\\\nimport IconButton from '../../atoms/IconButton'\\\\nimport Box from '../../atoms/Box'\\\\nimport Position from '../Position'\\\\n\\\\nexport default {\\\\n  title: `${path}/InlinePopup`,\\\\n  decorators: [withKnobs],\\\\n  component: InlinePopup\\\\n}\\\\n\\\\nexport const InlinePopupStories = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Position display='block'>\\\\n        <Box m='10em'>Sample Card</Box>\\\\n        <Box m='10em'>Sample Card</Box>\\\\n\\\\n        <InlinePopup\\\\n          isOpen={boolean('isOpen', false)}\\\\n          title={text('title', 'Inline Popup Header')}\\\\n          onClose={action('close called')}\\\\n          width={number('width', 500)}\\\\n          height={number('height', 200)}\\\\n          style={object('style', {\\\\n            position: 'absolute'\\\\n          })}\\\\n          content={\\\\n            <Box p='1em' m='1em'>\\\\n              This is something inside the InlinePopup\\\\n            </Box>\\\\n          }\\\\n          id={text('id', 'InlinePopupID')}\\\\n          className={text('className', 'InlinePopupclassName')}\\\\n          draggable={boolean('draggable', false)}\\\\n        >\\\\n          <IconButton\\\\n            intent='default'\\\\n            iconVariant='icomoon-add'\\\\n            children='Add'\\\\n          />\\\\n        </InlinePopup>\\\\n      </Position>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/InlinePopup.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\nimport React from 'react'\\nimport {\\n  boolean,\\n  text,\\n  object,\\n  withKnobs,\\n  number\\n} from '@storybook/addon-knobs'\\nimport { action } from '@storybook/addon-actions'\\nimport { path } from '..'\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\nimport InlinePopup from '.'\\nimport IconButton from '../../atoms/IconButton'\\nimport Box from '../../atoms/Box'\\nimport Position from '../Position'\\n\\nexport default {parameters: {\\\"storySource\\\":{\\\"source\\\":\\\"import React from 'react'\\\\nimport {\\\\n  boolean,\\\\n  text,\\\\n  object,\\\\n  withKnobs,\\\\n  number\\\\n} from '@storybook/addon-knobs'\\\\nimport { action } from '@storybook/addon-actions'\\\\nimport { path } from '..'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport InlinePopup from '.'\\\\nimport IconButton from '../../atoms/IconButton'\\\\nimport Box from '../../atoms/Box'\\\\nimport Position from '../Position'\\\\n\\\\nexport default {\\\\n  title: `${path}/InlinePopup`,\\\\n  decorators: [withKnobs],\\\\n  component: InlinePopup\\\\n}\\\\n\\\\nexport const InlinePopupStories = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Position display='block'>\\\\n        <Box m='10em'>Sample Card</Box>\\\\n        <Box m='10em'>Sample Card</Box>\\\\n\\\\n        <InlinePopup\\\\n          isOpen={boolean('isOpen', false)}\\\\n          title={text('title', 'Inline Popup Header')}\\\\n          onClose={action('close called')}\\\\n          width={number('width', 500)}\\\\n          height={number('height', 200)}\\\\n          style={object('style', {\\\\n            position: 'absolute'\\\\n          })}\\\\n          content={\\\\n            <Box p='1em' m='1em'>\\\\n              This is something inside the InlinePopup\\\\n            </Box>\\\\n          }\\\\n          id={text('id', 'InlinePopupID')}\\\\n          className={text('className', 'InlinePopupclassName')}\\\\n          draggable={boolean('draggable', false)}\\\\n        >\\\\n          <IconButton\\\\n            intent='default'\\\\n            iconVariant='icomoon-add'\\\\n            children='Add'\\\\n          />\\\\n        </InlinePopup>\\\\n      </Position>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\",\\\"locationsMap\\\":{}},},\\n  title: `${path}/InlinePopup`,\\n  decorators: [withKnobs],\\n  component: InlinePopup\\n}\\n\\nexport const InlinePopupStories = addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <Position display='block'>\\n        <Box m='10em'>Sample Card</Box>\\n        <Box m='10em'>Sample Card</Box>\\n\\n        <InlinePopup\\n          isOpen={boolean('isOpen', false)}\\n          title={text('title', 'Inline Popup Header')}\\n          onClose={action('close called')}\\n          width={number('width', 500)}\\n          height={number('height', 200)}\\n          style={object('style', {\\n            position: 'absolute'\\n          })}\\n          content={\\n            <Box p='1em' m='1em'>\\n              This is something inside the InlinePopup\\n            </Box>\\n          }\\n          id={text('id', 'InlinePopupID')}\\n          className={text('className', 'InlinePopupclassName')}\\n          draggable={boolean('draggable', false)}\\n        >\\n          <IconButton\\n            intent='default'\\n            iconVariant='icomoon-add'\\n            children='Add'\\n          />\\n        </InlinePopup>\\n      </Position>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\",\n    \"locationsMap\": {}\n  }), _defineProperty(_parameters, \"storySource\", {\n    \"source\": \"import React from 'react'\\nimport {\\n  boolean,\\n  text,\\n  object,\\n  withKnobs,\\n  number\\n} from '@storybook/addon-knobs'\\nimport { action } from '@storybook/addon-actions'\\nimport { path } from '..'\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\nimport InlinePopup from '.'\\nimport IconButton from '../../atoms/IconButton'\\nimport Box from '../../atoms/Box'\\nimport Position from '../Position'\\n\\nexport default {\\n  title: `${path}/InlinePopup`,\\n  decorators: [withKnobs],\\n  component: InlinePopup\\n}\\n\\nexport const InlinePopupStories = () => {\\n  return (\\n    <ThemeWrapper>\\n      <Position display='block'>\\n        <Box m='10em'>Sample Card</Box>\\n        <Box m='10em'>Sample Card</Box>\\n\\n        <InlinePopup\\n          isOpen={boolean('isOpen', false)}\\n          title={text('title', 'Inline Popup Header')}\\n          onClose={action('close called')}\\n          width={number('width', 500)}\\n          height={number('height', 200)}\\n          style={object('style', {\\n            position: 'absolute'\\n          })}\\n          content={\\n            <Box p='1em' m='1em'>\\n              This is something inside the InlinePopup\\n            </Box>\\n          }\\n          id={text('id', 'InlinePopupID')}\\n          className={text('className', 'InlinePopupclassName')}\\n          draggable={boolean('draggable', false)}\\n        >\\n          <IconButton\\n            intent='default'\\n            iconVariant='icomoon-add'\\n            children='Add'\\n          />\\n        </InlinePopup>\\n      </Position>\\n    </ThemeWrapper>\\n  )\\n}\\n\",\n    \"locationsMap\": {}\n  }), _parameters),\n  title: path + \"/InlinePopup\",\n  decorators: [withKnobs],\n  component: InlinePopup\n};\nexport var InlinePopupStories = addSourceDecorator(addSourceDecorator(addSourceDecorator(function () {\n  return React.createElement(ThemeWrapper, null, React.createElement(Position, {\n    display: 'block'\n  }, React.createElement(Box, {\n    m: '10em'\n  }, \"Sample Card\"), React.createElement(Box, {\n    m: '10em'\n  }, \"Sample Card\"), React.createElement(InlinePopup, {\n    isOpen: _boolean('isOpen', false),\n    title: text('title', 'Inline Popup Header'),\n    onClose: action('close called'),\n    width: number('width', 500),\n    height: number('height', 200),\n    style: object('style', {\n      position: 'absolute'\n    }),\n    content: React.createElement(Box, {\n      p: '1em',\n      m: '1em'\n    }, \"This is something inside the InlinePopup\"),\n    id: text('id', 'InlinePopupID'),\n    className: text('className', 'InlinePopupclassName'),\n    draggable: _boolean('draggable', false)\n  }, React.createElement(IconButton, {\n    intent: 'default',\n    iconVariant: 'icomoon-add',\n    children: 'Add'\n  }))));\n}, {\n  __STORY__: __STORY__,\n  __ADDS_MAP__: __ADDS_MAP__,\n  __MAIN_FILE_LOCATION__: __MAIN_FILE_LOCATION__,\n  __MODULE_DEPENDENCIES__: __MODULE_DEPENDENCIES__,\n  __LOCAL_DEPENDENCIES__: __LOCAL_DEPENDENCIES__,\n  __SOURCE_PREFIX__: __SOURCE_PREFIX__,\n  __IDS_TO_FRAMEWORKS__: __IDS_TO_FRAMEWORKS__\n}), {\n  __STORY__: __STORY__,\n  __ADDS_MAP__: __ADDS_MAP__,\n  __MAIN_FILE_LOCATION__: __MAIN_FILE_LOCATION__,\n  __MODULE_DEPENDENCIES__: __MODULE_DEPENDENCIES__,\n  __LOCAL_DEPENDENCIES__: __LOCAL_DEPENDENCIES__,\n  __SOURCE_PREFIX__: __SOURCE_PREFIX__,\n  __IDS_TO_FRAMEWORKS__: __IDS_TO_FRAMEWORKS__\n}), {\n  __STORY__: __STORY__,\n  __ADDS_MAP__: __ADDS_MAP__,\n  __MAIN_FILE_LOCATION__: __MAIN_FILE_LOCATION__,\n  __MODULE_DEPENDENCIES__: __MODULE_DEPENDENCIES__,\n  __LOCAL_DEPENDENCIES__: __LOCAL_DEPENDENCIES__,\n  __SOURCE_PREFIX__: __SOURCE_PREFIX__,\n  __IDS_TO_FRAMEWORKS__: __IDS_TO_FRAMEWORKS__\n});","map":{"version":3,"sources":["/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/node_modules/react-docgen-typescript-loader/dist/index.js!/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/node_modules/eslint-loader/dist/cjs.js??ref--6-0!/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/node_modules/@storybook/source-loader/dist/server/index.js??ref--11!/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/node_modules/@storybook/source-loader/dist/server/index.js!/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/node_modules/@storybook/source-loader/dist/server/index.js!/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/molecules/InlinePopup/InlinePopup.stories.tsx"],"names":[],"mappings":";;;;AACA;AACA;AACA;AACA,IAAI,gBAAgB,GAAG,OAAO,CAAC,kCAAD,CAAP,CAA4C,UAAnE,C,CACA;;;AACA,IAAI,kBAAkB,GAAG,OAAO,CAAC,kCAAD,CAAP,CAA4C,SAArE,C,CACA;;;AACA,IAAI,iBAAiB,GAAG,iHAAxB,C,CACA;;AACA,IAAI,SAAS,GAAG,u8kBAAhB,C,CACA;;AACA,IAAI,YAAY,GAAG,EAAnB,C,CACA;;AACA,IAAI,sBAAsB,GAAG,0BAA7B,C,CACA;;AACA,IAAI,uBAAuB,GAAG,EAA9B,C,CACA;;AACA,IAAI,sBAAsB,GAAG,EAA7B,C,CACA;;AACA,IAAI,qBAAqB,GAAG,EAA5B;AAGA;AACA;AACA;;AACA,IAAI,gBAAgB,GAAG,OAAO,CAAC,kCAAD,CAAP,CAA4C,UAAnE,C,CACA;;;AACA,IAAI,kBAAkB,GAAG,OAAO,CAAC,kCAAD,CAAP,CAA4C,SAArE,C,CACA;;;AACA,IAAI,iBAAiB,GAAG,iHAAxB,C,CACA;;AACA,IAAI,SAAS,GAAG,+oLAAhB,C,CACA;;AACA,IAAI,YAAY,GAAG,EAAnB,C,CACA;;AACA,IAAI,sBAAsB,GAAG,0BAA7B,C,CACA;;AACA,IAAI,uBAAuB,GAAG,EAA9B,C,CACA;;AACA,IAAI,sBAAsB,GAAG,EAA7B,C,CACA;;AACA,IAAI,qBAAqB,GAAG,EAA5B;AAGA;AACA;AACA;;AACA,IAAI,gBAAgB,GAAG,OAAO,CAAC,kCAAD,CAAP,CAA4C,UAAnE,C,CACA;;;AACA,IAAI,kBAAkB,GAAG,OAAO,CAAC,kCAAD,CAAP,CAA4C,SAArE,C,CACA;;;AACA,IAAI,iBAAiB,GAAG,iHAAxB,C,CACA;;AACA,IAAI,SAAS,GAAG,mjDAAhB,C,CACA;;AACA,IAAI,YAAY,GAAG,EAAnB,C,CACA;;AACA,IAAI,sBAAsB,GAAG,0BAA7B,C,CACA;;AACA,IAAI,uBAAuB,GAAG,EAA9B,C,CACA;;AACA,IAAI,sBAAsB,GAAG,EAA7B,C,CACA;;AACA,IAAI,qBAAqB,GAAG,EAA5B;AAEA,OAAO,KAAP,MAAkB,OAAlB;AACA,SACE,OAAO,IAAP,QADF,EAEE,IAFF,EAGE,MAHF,EAIE,SAJF,EAKE,MALF,QAMO,wBANP;AAOA,SAAS,MAAT,QAAuB,0BAAvB;AACA,SAAS,IAAT,QAAqB,IAArB;AACA,OAAO,YAAP,MAAyB,4CAAzB;AACA,OAAO,WAAP,MAAwB,GAAxB;AACA,OAAO,UAAP,MAAuB,wBAAvB;AACA,OAAO,GAAP,MAAgB,iBAAhB;AACA,OAAO,QAAP,MAAqB,aAArB;AAEA,eAAe;AAAC,EAAA,UAAU;AAAG,mBAAc;AAAC,gBAAS,u8kBAAV;AAAk9kB,sBAAe;AAAj+kB;AAAjB,iDAAoglB;AAAC,cAAS,+oLAAV;AAA0pL,oBAAe;AAAzqL,GAApglB,+CAA+rwB;AAAC,cAAS,mjDAAV;AAA8jD,oBAAe;AAA7kD,GAA/rwB,eAAX;AACb,EAAA,KAAK,EAAK,IAAI,GAAA,cADD;AAEb,EAAA,UAAU,EAAE,CAAC,SAAD,CAFC;AAGb,EAAA,SAAS,EAAE;AAHE,CAAf;AAMA,OAAO,IAAM,kBAAkB,GAAG,kBAAkB,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,YAAA;AACzF,SACE,KAAA,CAAA,aAAA,CAAC,YAAD,EAAa,IAAb,EACE,KAAA,CAAA,aAAA,CAAC,QAAD,EAAS;AAAC,IAAA,OAAO,EAAC;AAAT,GAAT,EACE,KAAA,CAAA,aAAA,CAAC,GAAD,EAAI;AAAC,IAAA,CAAC,EAAC;AAAH,GAAJ,EAAa,aAAb,CADF,EAEE,KAAA,CAAA,aAAA,CAAC,GAAD,EAAI;AAAC,IAAA,CAAC,EAAC;AAAH,GAAJ,EAAa,aAAb,CAFF,EAIE,KAAA,CAAA,aAAA,CAAC,WAAD,EAAY;AACV,IAAA,MAAM,EAAE,QAAO,CAAC,QAAD,EAAW,KAAX,CADL;AAEV,IAAA,KAAK,EAAE,IAAI,CAAC,OAAD,EAAU,qBAAV,CAFD;AAGV,IAAA,OAAO,EAAE,MAAM,CAAC,cAAD,CAHL;AAIV,IAAA,KAAK,EAAE,MAAM,CAAC,OAAD,EAAU,GAAV,CAJH;AAKV,IAAA,MAAM,EAAE,MAAM,CAAC,QAAD,EAAW,GAAX,CALJ;AAMV,IAAA,KAAK,EAAE,MAAM,CAAC,OAAD,EAAU;AACrB,MAAA,QAAQ,EAAE;AADW,KAAV,CANH;AASV,IAAA,OAAO,EACL,KAAA,CAAA,aAAA,CAAC,GAAD,EAAI;AAAC,MAAA,CAAC,EAAC,KAAH;AAAS,MAAA,CAAC,EAAC;AAAX,KAAJ,EAAoB,0CAApB,CAVQ;AAcV,IAAA,EAAE,EAAE,IAAI,CAAC,IAAD,EAAO,eAAP,CAdE;AAeV,IAAA,SAAS,EAAE,IAAI,CAAC,WAAD,EAAc,sBAAd,CAfL;AAgBV,IAAA,SAAS,EAAE,QAAO,CAAC,WAAD,EAAc,KAAd;AAhBR,GAAZ,EAkBE,KAAA,CAAA,aAAA,CAAC,UAAD,EAAW;AACT,IAAA,MAAM,EAAC,SADE;AAET,IAAA,WAAW,EAAC,aAFH;AAGT,IAAA,QAAQ,EAAC;AAHA,GAAX,CAlBF,CAJF,CADF,CADF;AAiCD,CAlCyF,EAkCvF;AAAC,EAAA,SAAS,EAAA,SAAV;AAAY,EAAA,YAAY,EAAA,YAAxB;AAAyB,EAAA,sBAAsB,EAAA,sBAA/C;AAAgD,EAAA,uBAAuB,EAAA,uBAAvE;AAAwE,EAAA,sBAAsB,EAAA,sBAA9F;AAA+F,EAAA,iBAAiB,EAAA,iBAAhH;AAAiH,EAAA,qBAAqB,EAAA;AAAtI,CAlCuF,CAAnB,EAkCsE;AAAC,EAAA,SAAS,EAAA,SAAV;AAAY,EAAA,YAAY,EAAA,YAAxB;AAAyB,EAAA,sBAAsB,EAAA,sBAA/C;AAAgD,EAAA,uBAAuB,EAAA,uBAAvE;AAAwE,EAAA,sBAAsB,EAAA,sBAA9F;AAA+F,EAAA,iBAAiB,EAAA,iBAAhH;AAAiH,EAAA,qBAAqB,EAAA;AAAtI,CAlCtE,CAAnB,EAkCmO;AAAC,EAAA,SAAS,EAAA,SAAV;AAAY,EAAA,YAAY,EAAA,YAAxB;AAAyB,EAAA,sBAAsB,EAAA,sBAA/C;AAAgD,EAAA,uBAAuB,EAAA,uBAAvE;AAAwE,EAAA,sBAAsB,EAAA,sBAA9F;AAA+F,EAAA,iBAAiB,EAAA,iBAAhH;AAAiH,EAAA,qBAAqB,EAAA;AAAtI,CAlCnO,CAA7C","sourcesContent":["\n/* eslint-disable */\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\n// @ts-ignore\nvar addSourceDecorator = require(\"@storybook/source-loader/preview\").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/molecules/InlinePopup\";\n// @ts-ignore\nvar __STORY__ = \"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/molecules/InlinePopup\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"\\\\n\\\\n// @ts-nocheck\\\\n// @ts-ignore\\\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\\\n// @ts-ignore\\\\nvar addSourceDecorator = require(\\\\\\\"@storybook/source-loader/preview\\\\\\\").addSource;\\\\n// @ts-ignore\\\\nvar __SOURCE_PREFIX__ = \\\\\\\"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/molecules/InlinePopup\\\\\\\";\\\\n// @ts-ignore\\\\nvar __STORY__ = \\\\\\\"import React from 'react'\\\\\\\\nimport {\\\\\\\\n  boolean,\\\\\\\\n  text,\\\\\\\\n  object,\\\\\\\\n  withKnobs,\\\\\\\\n  number\\\\\\\\n} from '@storybook/addon-knobs'\\\\\\\\nimport { action } from '@storybook/addon-actions'\\\\\\\\nimport { path } from '..'\\\\\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\\\\\nimport InlinePopup from '.'\\\\\\\\nimport IconButton from '../../atoms/IconButton'\\\\\\\\nimport Box from '../../atoms/Box'\\\\\\\\nimport Position from '../Position'\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/InlinePopup`,\\\\\\\\n  decorators: [withKnobs],\\\\\\\\n  component: InlinePopup\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const InlinePopupStories = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Position display='block'>\\\\\\\\n        <Box m='10em'>Sample Card</Box>\\\\\\\\n        <Box m='10em'>Sample Card</Box>\\\\\\\\n\\\\\\\\n        <InlinePopup\\\\\\\\n          isOpen={boolean('isOpen', false)}\\\\\\\\n          title={text('title', 'Inline Popup Header')}\\\\\\\\n          onClose={action('close called')}\\\\\\\\n          width={number('width', 500)}\\\\\\\\n          height={number('height', 200)}\\\\\\\\n          style={object('style', {\\\\\\\\n            position: 'absolute'\\\\\\\\n          })}\\\\\\\\n          content={\\\\\\\\n            <Box p='1em' m='1em'>\\\\\\\\n              This is something inside the InlinePopup\\\\\\\\n            </Box>\\\\\\\\n          }\\\\\\\\n          id={text('id', 'InlinePopupID')}\\\\\\\\n          className={text('className', 'InlinePopupclassName')}\\\\\\\\n          draggable={boolean('draggable', false)}\\\\\\\\n        >\\\\\\\\n          <IconButton\\\\\\\\n            intent='default'\\\\\\\\n            iconVariant='icomoon-add'\\\\\\\\n            children='Add'\\\\\\\\n          />\\\\\\\\n        </InlinePopup>\\\\\\\\n      </Position>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\";\\\\n// @ts-ignore\\\\nvar __ADDS_MAP__ = {};\\\\n// @ts-ignore\\\\nvar __MAIN_FILE_LOCATION__ = \\\\\\\"/InlinePopup.stories.tsx\\\\\\\";\\\\n// @ts-ignore\\\\nvar __MODULE_DEPENDENCIES__ = [];\\\\n// @ts-ignore\\\\nvar __LOCAL_DEPENDENCIES__ = {};\\\\n// @ts-ignore\\\\nvar __IDS_TO_FRAMEWORKS__ = {};\\\\n        \\\\nimport React from 'react'\\\\nimport {\\\\n  boolean,\\\\n  text,\\\\n  object,\\\\n  withKnobs,\\\\n  number\\\\n} from '@storybook/addon-knobs'\\\\nimport { action } from '@storybook/addon-actions'\\\\nimport { path } from '..'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport InlinePopup from '.'\\\\nimport IconButton from '../../atoms/IconButton'\\\\nimport Box from '../../atoms/Box'\\\\nimport Position from '../Position'\\\\n\\\\nexport default {parameters: {\\\\\\\"storySource\\\\\\\":{\\\\\\\"source\\\\\\\":\\\\\\\"import React from 'react'\\\\\\\\nimport {\\\\\\\\n  boolean,\\\\\\\\n  text,\\\\\\\\n  object,\\\\\\\\n  withKnobs,\\\\\\\\n  number\\\\\\\\n} from '@storybook/addon-knobs'\\\\\\\\nimport { action } from '@storybook/addon-actions'\\\\\\\\nimport { path } from '..'\\\\\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\\\\\nimport InlinePopup from '.'\\\\\\\\nimport IconButton from '../../atoms/IconButton'\\\\\\\\nimport Box from '../../atoms/Box'\\\\\\\\nimport Position from '../Position'\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/InlinePopup`,\\\\\\\\n  decorators: [withKnobs],\\\\\\\\n  component: InlinePopup\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const InlinePopupStories = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Position display='block'>\\\\\\\\n        <Box m='10em'>Sample Card</Box>\\\\\\\\n        <Box m='10em'>Sample Card</Box>\\\\\\\\n\\\\\\\\n        <InlinePopup\\\\\\\\n          isOpen={boolean('isOpen', false)}\\\\\\\\n          title={text('title', 'Inline Popup Header')}\\\\\\\\n          onClose={action('close called')}\\\\\\\\n          width={number('width', 500)}\\\\\\\\n          height={number('height', 200)}\\\\\\\\n          style={object('style', {\\\\\\\\n            position: 'absolute'\\\\\\\\n          })}\\\\\\\\n          content={\\\\\\\\n            <Box p='1em' m='1em'>\\\\\\\\n              This is something inside the InlinePopup\\\\\\\\n            </Box>\\\\\\\\n          }\\\\\\\\n          id={text('id', 'InlinePopupID')}\\\\\\\\n          className={text('className', 'InlinePopupclassName')}\\\\\\\\n          draggable={boolean('draggable', false)}\\\\\\\\n        >\\\\\\\\n          <IconButton\\\\\\\\n            intent='default'\\\\\\\\n            iconVariant='icomoon-add'\\\\\\\\n            children='Add'\\\\\\\\n          />\\\\\\\\n        </InlinePopup>\\\\\\\\n      </Position>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\",\\\\\\\"locationsMap\\\\\\\":{}},},\\\\n  title: `${path}/InlinePopup`,\\\\n  decorators: [withKnobs],\\\\n  component: InlinePopup\\\\n}\\\\n\\\\nexport const InlinePopupStories = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Position display='block'>\\\\n        <Box m='10em'>Sample Card</Box>\\\\n        <Box m='10em'>Sample Card</Box>\\\\n\\\\n        <InlinePopup\\\\n          isOpen={boolean('isOpen', false)}\\\\n          title={text('title', 'Inline Popup Header')}\\\\n          onClose={action('close called')}\\\\n          width={number('width', 500)}\\\\n          height={number('height', 200)}\\\\n          style={object('style', {\\\\n            position: 'absolute'\\\\n          })}\\\\n          content={\\\\n            <Box p='1em' m='1em'>\\\\n              This is something inside the InlinePopup\\\\n            </Box>\\\\n          }\\\\n          id={text('id', 'InlinePopupID')}\\\\n          className={text('className', 'InlinePopupclassName')}\\\\n          draggable={boolean('draggable', false)}\\\\n        >\\\\n          <IconButton\\\\n            intent='default'\\\\n            iconVariant='icomoon-add'\\\\n            children='Add'\\\\n          />\\\\n        </InlinePopup>\\\\n      </Position>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/InlinePopup.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\n\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/molecules/InlinePopup\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"import React from 'react'\\\\nimport {\\\\n  boolean,\\\\n  text,\\\\n  object,\\\\n  withKnobs,\\\\n  number\\\\n} from '@storybook/addon-knobs'\\\\nimport { action } from '@storybook/addon-actions'\\\\nimport { path } from '..'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport InlinePopup from '.'\\\\nimport IconButton from '../../atoms/IconButton'\\\\nimport Box from '../../atoms/Box'\\\\nimport Position from '../Position'\\\\n\\\\nexport default {\\\\n  title: `${path}/InlinePopup`,\\\\n  decorators: [withKnobs],\\\\n  component: InlinePopup\\\\n}\\\\n\\\\nexport const InlinePopupStories = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Position display='block'>\\\\n        <Box m='10em'>Sample Card</Box>\\\\n        <Box m='10em'>Sample Card</Box>\\\\n\\\\n        <InlinePopup\\\\n          isOpen={boolean('isOpen', false)}\\\\n          title={text('title', 'Inline Popup Header')}\\\\n          onClose={action('close called')}\\\\n          width={number('width', 500)}\\\\n          height={number('height', 200)}\\\\n          style={object('style', {\\\\n            position: 'absolute'\\\\n          })}\\\\n          content={\\\\n            <Box p='1em' m='1em'>\\\\n              This is something inside the InlinePopup\\\\n            </Box>\\\\n          }\\\\n          id={text('id', 'InlinePopupID')}\\\\n          className={text('className', 'InlinePopupclassName')}\\\\n          draggable={boolean('draggable', false)}\\\\n        >\\\\n          <IconButton\\\\n            intent='default'\\\\n            iconVariant='icomoon-add'\\\\n            children='Add'\\\\n          />\\\\n        </InlinePopup>\\\\n      </Position>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/InlinePopup.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\nimport React from 'react'\\nimport {\\n  boolean,\\n  text,\\n  object,\\n  withKnobs,\\n  number\\n} from '@storybook/addon-knobs'\\nimport { action } from '@storybook/addon-actions'\\nimport { path } from '..'\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\nimport InlinePopup from '.'\\nimport IconButton from '../../atoms/IconButton'\\nimport Box from '../../atoms/Box'\\nimport Position from '../Position'\\n\\nexport default {parameters: {\\\"storySource\\\":{\\\"source\\\":\\\"\\\\n\\\\n// @ts-nocheck\\\\n// @ts-ignore\\\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\\\n// @ts-ignore\\\\nvar addSourceDecorator = require(\\\\\\\"@storybook/source-loader/preview\\\\\\\").addSource;\\\\n// @ts-ignore\\\\nvar __SOURCE_PREFIX__ = \\\\\\\"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/molecules/InlinePopup\\\\\\\";\\\\n// @ts-ignore\\\\nvar __STORY__ = \\\\\\\"import React from 'react'\\\\\\\\nimport {\\\\\\\\n  boolean,\\\\\\\\n  text,\\\\\\\\n  object,\\\\\\\\n  withKnobs,\\\\\\\\n  number\\\\\\\\n} from '@storybook/addon-knobs'\\\\\\\\nimport { action } from '@storybook/addon-actions'\\\\\\\\nimport { path } from '..'\\\\\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\\\\\nimport InlinePopup from '.'\\\\\\\\nimport IconButton from '../../atoms/IconButton'\\\\\\\\nimport Box from '../../atoms/Box'\\\\\\\\nimport Position from '../Position'\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/InlinePopup`,\\\\\\\\n  decorators: [withKnobs],\\\\\\\\n  component: InlinePopup\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const InlinePopupStories = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Position display='block'>\\\\\\\\n        <Box m='10em'>Sample Card</Box>\\\\\\\\n        <Box m='10em'>Sample Card</Box>\\\\\\\\n\\\\\\\\n        <InlinePopup\\\\\\\\n          isOpen={boolean('isOpen', false)}\\\\\\\\n          title={text('title', 'Inline Popup Header')}\\\\\\\\n          onClose={action('close called')}\\\\\\\\n          width={number('width', 500)}\\\\\\\\n          height={number('height', 200)}\\\\\\\\n          style={object('style', {\\\\\\\\n            position: 'absolute'\\\\\\\\n          })}\\\\\\\\n          content={\\\\\\\\n            <Box p='1em' m='1em'>\\\\\\\\n              This is something inside the InlinePopup\\\\\\\\n            </Box>\\\\\\\\n          }\\\\\\\\n          id={text('id', 'InlinePopupID')}\\\\\\\\n          className={text('className', 'InlinePopupclassName')}\\\\\\\\n          draggable={boolean('draggable', false)}\\\\\\\\n        >\\\\\\\\n          <IconButton\\\\\\\\n            intent='default'\\\\\\\\n            iconVariant='icomoon-add'\\\\\\\\n            children='Add'\\\\\\\\n          />\\\\\\\\n        </InlinePopup>\\\\\\\\n      </Position>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\";\\\\n// @ts-ignore\\\\nvar __ADDS_MAP__ = {};\\\\n// @ts-ignore\\\\nvar __MAIN_FILE_LOCATION__ = \\\\\\\"/InlinePopup.stories.tsx\\\\\\\";\\\\n// @ts-ignore\\\\nvar __MODULE_DEPENDENCIES__ = [];\\\\n// @ts-ignore\\\\nvar __LOCAL_DEPENDENCIES__ = {};\\\\n// @ts-ignore\\\\nvar __IDS_TO_FRAMEWORKS__ = {};\\\\n        \\\\nimport React from 'react'\\\\nimport {\\\\n  boolean,\\\\n  text,\\\\n  object,\\\\n  withKnobs,\\\\n  number\\\\n} from '@storybook/addon-knobs'\\\\nimport { action } from '@storybook/addon-actions'\\\\nimport { path } from '..'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport InlinePopup from '.'\\\\nimport IconButton from '../../atoms/IconButton'\\\\nimport Box from '../../atoms/Box'\\\\nimport Position from '../Position'\\\\n\\\\nexport default {parameters: {\\\\\\\"storySource\\\\\\\":{\\\\\\\"source\\\\\\\":\\\\\\\"import React from 'react'\\\\\\\\nimport {\\\\\\\\n  boolean,\\\\\\\\n  text,\\\\\\\\n  object,\\\\\\\\n  withKnobs,\\\\\\\\n  number\\\\\\\\n} from '@storybook/addon-knobs'\\\\\\\\nimport { action } from '@storybook/addon-actions'\\\\\\\\nimport { path } from '..'\\\\\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\\\\\nimport InlinePopup from '.'\\\\\\\\nimport IconButton from '../../atoms/IconButton'\\\\\\\\nimport Box from '../../atoms/Box'\\\\\\\\nimport Position from '../Position'\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/InlinePopup`,\\\\\\\\n  decorators: [withKnobs],\\\\\\\\n  component: InlinePopup\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const InlinePopupStories = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Position display='block'>\\\\\\\\n        <Box m='10em'>Sample Card</Box>\\\\\\\\n        <Box m='10em'>Sample Card</Box>\\\\\\\\n\\\\\\\\n        <InlinePopup\\\\\\\\n          isOpen={boolean('isOpen', false)}\\\\\\\\n          title={text('title', 'Inline Popup Header')}\\\\\\\\n          onClose={action('close called')}\\\\\\\\n          width={number('width', 500)}\\\\\\\\n          height={number('height', 200)}\\\\\\\\n          style={object('style', {\\\\\\\\n            position: 'absolute'\\\\\\\\n          })}\\\\\\\\n          content={\\\\\\\\n            <Box p='1em' m='1em'>\\\\\\\\n              This is something inside the InlinePopup\\\\\\\\n            </Box>\\\\\\\\n          }\\\\\\\\n          id={text('id', 'InlinePopupID')}\\\\\\\\n          className={text('className', 'InlinePopupclassName')}\\\\\\\\n          draggable={boolean('draggable', false)}\\\\\\\\n        >\\\\\\\\n          <IconButton\\\\\\\\n            intent='default'\\\\\\\\n            iconVariant='icomoon-add'\\\\\\\\n            children='Add'\\\\\\\\n          />\\\\\\\\n        </InlinePopup>\\\\\\\\n      </Position>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\",\\\\\\\"locationsMap\\\\\\\":{}},},\\\\n  title: `${path}/InlinePopup`,\\\\n  decorators: [withKnobs],\\\\n  component: InlinePopup\\\\n}\\\\n\\\\nexport const InlinePopupStories = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Position display='block'>\\\\n        <Box m='10em'>Sample Card</Box>\\\\n        <Box m='10em'>Sample Card</Box>\\\\n\\\\n        <InlinePopup\\\\n          isOpen={boolean('isOpen', false)}\\\\n          title={text('title', 'Inline Popup Header')}\\\\n          onClose={action('close called')}\\\\n          width={number('width', 500)}\\\\n          height={number('height', 200)}\\\\n          style={object('style', {\\\\n            position: 'absolute'\\\\n          })}\\\\n          content={\\\\n            <Box p='1em' m='1em'>\\\\n              This is something inside the InlinePopup\\\\n            </Box>\\\\n          }\\\\n          id={text('id', 'InlinePopupID')}\\\\n          className={text('className', 'InlinePopupclassName')}\\\\n          draggable={boolean('draggable', false)}\\\\n        >\\\\n          <IconButton\\\\n            intent='default'\\\\n            iconVariant='icomoon-add'\\\\n            children='Add'\\\\n          />\\\\n        </InlinePopup>\\\\n      </Position>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\",\\\"locationsMap\\\":{}},\\\"storySource\\\":{\\\"source\\\":\\\"import React from 'react'\\\\nimport {\\\\n  boolean,\\\\n  text,\\\\n  object,\\\\n  withKnobs,\\\\n  number\\\\n} from '@storybook/addon-knobs'\\\\nimport { action } from '@storybook/addon-actions'\\\\nimport { path } from '..'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport InlinePopup from '.'\\\\nimport IconButton from '../../atoms/IconButton'\\\\nimport Box from '../../atoms/Box'\\\\nimport Position from '../Position'\\\\n\\\\nexport default {\\\\n  title: `${path}/InlinePopup`,\\\\n  decorators: [withKnobs],\\\\n  component: InlinePopup\\\\n}\\\\n\\\\nexport const InlinePopupStories = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Position display='block'>\\\\n        <Box m='10em'>Sample Card</Box>\\\\n        <Box m='10em'>Sample Card</Box>\\\\n\\\\n        <InlinePopup\\\\n          isOpen={boolean('isOpen', false)}\\\\n          title={text('title', 'Inline Popup Header')}\\\\n          onClose={action('close called')}\\\\n          width={number('width', 500)}\\\\n          height={number('height', 200)}\\\\n          style={object('style', {\\\\n            position: 'absolute'\\\\n          })}\\\\n          content={\\\\n            <Box p='1em' m='1em'>\\\\n              This is something inside the InlinePopup\\\\n            </Box>\\\\n          }\\\\n          id={text('id', 'InlinePopupID')}\\\\n          className={text('className', 'InlinePopupclassName')}\\\\n          draggable={boolean('draggable', false)}\\\\n        >\\\\n          <IconButton\\\\n            intent='default'\\\\n            iconVariant='icomoon-add'\\\\n            children='Add'\\\\n          />\\\\n        </InlinePopup>\\\\n      </Position>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\",\\\"locationsMap\\\":{}},},\\n  title: `${path}/InlinePopup`,\\n  decorators: [withKnobs],\\n  component: InlinePopup\\n}\\n\\nexport const InlinePopupStories = addSourceDecorator(addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <Position display='block'>\\n        <Box m='10em'>Sample Card</Box>\\n        <Box m='10em'>Sample Card</Box>\\n\\n        <InlinePopup\\n          isOpen={boolean('isOpen', false)}\\n          title={text('title', 'Inline Popup Header')}\\n          onClose={action('close called')}\\n          width={number('width', 500)}\\n          height={number('height', 200)}\\n          style={object('style', {\\n            position: 'absolute'\\n          })}\\n          content={\\n            <Box p='1em' m='1em'>\\n              This is something inside the InlinePopup\\n            </Box>\\n          }\\n          id={text('id', 'InlinePopupID')}\\n          className={text('className', 'InlinePopupclassName')}\\n          draggable={boolean('draggable', false)}\\n        >\\n          <IconButton\\n            intent='default'\\n            iconVariant='icomoon-add'\\n            children='Add'\\n          />\\n        </InlinePopup>\\n      </Position>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\";\n// @ts-ignore\nvar __ADDS_MAP__ = {};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = \"/InlinePopup.stories.tsx\";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \n\n/* eslint-disable */\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\n// @ts-ignore\nvar addSourceDecorator = require(\"@storybook/source-loader/preview\").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/molecules/InlinePopup\";\n// @ts-ignore\nvar __STORY__ = \"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/molecules/InlinePopup\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"import React from 'react'\\\\nimport {\\\\n  boolean,\\\\n  text,\\\\n  object,\\\\n  withKnobs,\\\\n  number\\\\n} from '@storybook/addon-knobs'\\\\nimport { action } from '@storybook/addon-actions'\\\\nimport { path } from '..'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport InlinePopup from '.'\\\\nimport IconButton from '../../atoms/IconButton'\\\\nimport Box from '../../atoms/Box'\\\\nimport Position from '../Position'\\\\n\\\\nexport default {\\\\n  title: `${path}/InlinePopup`,\\\\n  decorators: [withKnobs],\\\\n  component: InlinePopup\\\\n}\\\\n\\\\nexport const InlinePopupStories = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Position display='block'>\\\\n        <Box m='10em'>Sample Card</Box>\\\\n        <Box m='10em'>Sample Card</Box>\\\\n\\\\n        <InlinePopup\\\\n          isOpen={boolean('isOpen', false)}\\\\n          title={text('title', 'Inline Popup Header')}\\\\n          onClose={action('close called')}\\\\n          width={number('width', 500)}\\\\n          height={number('height', 200)}\\\\n          style={object('style', {\\\\n            position: 'absolute'\\\\n          })}\\\\n          content={\\\\n            <Box p='1em' m='1em'>\\\\n              This is something inside the InlinePopup\\\\n            </Box>\\\\n          }\\\\n          id={text('id', 'InlinePopupID')}\\\\n          className={text('className', 'InlinePopupclassName')}\\\\n          draggable={boolean('draggable', false)}\\\\n        >\\\\n          <IconButton\\\\n            intent='default'\\\\n            iconVariant='icomoon-add'\\\\n            children='Add'\\\\n          />\\\\n        </InlinePopup>\\\\n      </Position>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/InlinePopup.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\nimport React from 'react'\\nimport {\\n  boolean,\\n  text,\\n  object,\\n  withKnobs,\\n  number\\n} from '@storybook/addon-knobs'\\nimport { action } from '@storybook/addon-actions'\\nimport { path } from '..'\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\nimport InlinePopup from '.'\\nimport IconButton from '../../atoms/IconButton'\\nimport Box from '../../atoms/Box'\\nimport Position from '../Position'\\n\\nexport default {parameters: {\\\"storySource\\\":{\\\"source\\\":\\\"import React from 'react'\\\\nimport {\\\\n  boolean,\\\\n  text,\\\\n  object,\\\\n  withKnobs,\\\\n  number\\\\n} from '@storybook/addon-knobs'\\\\nimport { action } from '@storybook/addon-actions'\\\\nimport { path } from '..'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport InlinePopup from '.'\\\\nimport IconButton from '../../atoms/IconButton'\\\\nimport Box from '../../atoms/Box'\\\\nimport Position from '../Position'\\\\n\\\\nexport default {\\\\n  title: `${path}/InlinePopup`,\\\\n  decorators: [withKnobs],\\\\n  component: InlinePopup\\\\n}\\\\n\\\\nexport const InlinePopupStories = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Position display='block'>\\\\n        <Box m='10em'>Sample Card</Box>\\\\n        <Box m='10em'>Sample Card</Box>\\\\n\\\\n        <InlinePopup\\\\n          isOpen={boolean('isOpen', false)}\\\\n          title={text('title', 'Inline Popup Header')}\\\\n          onClose={action('close called')}\\\\n          width={number('width', 500)}\\\\n          height={number('height', 200)}\\\\n          style={object('style', {\\\\n            position: 'absolute'\\\\n          })}\\\\n          content={\\\\n            <Box p='1em' m='1em'>\\\\n              This is something inside the InlinePopup\\\\n            </Box>\\\\n          }\\\\n          id={text('id', 'InlinePopupID')}\\\\n          className={text('className', 'InlinePopupclassName')}\\\\n          draggable={boolean('draggable', false)}\\\\n        >\\\\n          <IconButton\\\\n            intent='default'\\\\n            iconVariant='icomoon-add'\\\\n            children='Add'\\\\n          />\\\\n        </InlinePopup>\\\\n      </Position>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\",\\\"locationsMap\\\":{}},},\\n  title: `${path}/InlinePopup`,\\n  decorators: [withKnobs],\\n  component: InlinePopup\\n}\\n\\nexport const InlinePopupStories = addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <Position display='block'>\\n        <Box m='10em'>Sample Card</Box>\\n        <Box m='10em'>Sample Card</Box>\\n\\n        <InlinePopup\\n          isOpen={boolean('isOpen', false)}\\n          title={text('title', 'Inline Popup Header')}\\n          onClose={action('close called')}\\n          width={number('width', 500)}\\n          height={number('height', 200)}\\n          style={object('style', {\\n            position: 'absolute'\\n          })}\\n          content={\\n            <Box p='1em' m='1em'>\\n              This is something inside the InlinePopup\\n            </Box>\\n          }\\n          id={text('id', 'InlinePopupID')}\\n          className={text('className', 'InlinePopupclassName')}\\n          draggable={boolean('draggable', false)}\\n        >\\n          <IconButton\\n            intent='default'\\n            iconVariant='icomoon-add'\\n            children='Add'\\n          />\\n        </InlinePopup>\\n      </Position>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\";\n// @ts-ignore\nvar __ADDS_MAP__ = {};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = \"/InlinePopup.stories.tsx\";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \n\n/* eslint-disable */\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\n// @ts-ignore\nvar addSourceDecorator = require(\"@storybook/source-loader/preview\").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/molecules/InlinePopup\";\n// @ts-ignore\nvar __STORY__ = \"import React from 'react'\\nimport {\\n  boolean,\\n  text,\\n  object,\\n  withKnobs,\\n  number\\n} from '@storybook/addon-knobs'\\nimport { action } from '@storybook/addon-actions'\\nimport { path } from '..'\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\nimport InlinePopup from '.'\\nimport IconButton from '../../atoms/IconButton'\\nimport Box from '../../atoms/Box'\\nimport Position from '../Position'\\n\\nexport default {\\n  title: `${path}/InlinePopup`,\\n  decorators: [withKnobs],\\n  component: InlinePopup\\n}\\n\\nexport const InlinePopupStories = () => {\\n  return (\\n    <ThemeWrapper>\\n      <Position display='block'>\\n        <Box m='10em'>Sample Card</Box>\\n        <Box m='10em'>Sample Card</Box>\\n\\n        <InlinePopup\\n          isOpen={boolean('isOpen', false)}\\n          title={text('title', 'Inline Popup Header')}\\n          onClose={action('close called')}\\n          width={number('width', 500)}\\n          height={number('height', 200)}\\n          style={object('style', {\\n            position: 'absolute'\\n          })}\\n          content={\\n            <Box p='1em' m='1em'>\\n              This is something inside the InlinePopup\\n            </Box>\\n          }\\n          id={text('id', 'InlinePopupID')}\\n          className={text('className', 'InlinePopupclassName')}\\n          draggable={boolean('draggable', false)}\\n        >\\n          <IconButton\\n            intent='default'\\n            iconVariant='icomoon-add'\\n            children='Add'\\n          />\\n        </InlinePopup>\\n      </Position>\\n    </ThemeWrapper>\\n  )\\n}\\n\";\n// @ts-ignore\nvar __ADDS_MAP__ = {};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = \"/InlinePopup.stories.tsx\";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \nimport React from 'react'\nimport {\n  boolean,\n  text,\n  object,\n  withKnobs,\n  number\n} from '@storybook/addon-knobs'\nimport { action } from '@storybook/addon-actions'\nimport { path } from '..'\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\nimport InlinePopup from '.'\nimport IconButton from '../../atoms/IconButton'\nimport Box from '../../atoms/Box'\nimport Position from '../Position'\n\nexport default {parameters: {\"storySource\":{\"source\":\"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/molecules/InlinePopup\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"\\\\n\\\\n// @ts-nocheck\\\\n// @ts-ignore\\\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\\\n// @ts-ignore\\\\nvar addSourceDecorator = require(\\\\\\\"@storybook/source-loader/preview\\\\\\\").addSource;\\\\n// @ts-ignore\\\\nvar __SOURCE_PREFIX__ = \\\\\\\"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/molecules/InlinePopup\\\\\\\";\\\\n// @ts-ignore\\\\nvar __STORY__ = \\\\\\\"import React from 'react'\\\\\\\\nimport {\\\\\\\\n  boolean,\\\\\\\\n  text,\\\\\\\\n  object,\\\\\\\\n  withKnobs,\\\\\\\\n  number\\\\\\\\n} from '@storybook/addon-knobs'\\\\\\\\nimport { action } from '@storybook/addon-actions'\\\\\\\\nimport { path } from '..'\\\\\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\\\\\nimport InlinePopup from '.'\\\\\\\\nimport IconButton from '../../atoms/IconButton'\\\\\\\\nimport Box from '../../atoms/Box'\\\\\\\\nimport Position from '../Position'\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/InlinePopup`,\\\\\\\\n  decorators: [withKnobs],\\\\\\\\n  component: InlinePopup\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const InlinePopupStories = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Position display='block'>\\\\\\\\n        <Box m='10em'>Sample Card</Box>\\\\\\\\n        <Box m='10em'>Sample Card</Box>\\\\\\\\n\\\\\\\\n        <InlinePopup\\\\\\\\n          isOpen={boolean('isOpen', false)}\\\\\\\\n          title={text('title', 'Inline Popup Header')}\\\\\\\\n          onClose={action('close called')}\\\\\\\\n          width={number('width', 500)}\\\\\\\\n          height={number('height', 200)}\\\\\\\\n          style={object('style', {\\\\\\\\n            position: 'absolute'\\\\\\\\n          })}\\\\\\\\n          content={\\\\\\\\n            <Box p='1em' m='1em'>\\\\\\\\n              This is something inside the InlinePopup\\\\\\\\n            </Box>\\\\\\\\n          }\\\\\\\\n          id={text('id', 'InlinePopupID')}\\\\\\\\n          className={text('className', 'InlinePopupclassName')}\\\\\\\\n          draggable={boolean('draggable', false)}\\\\\\\\n        >\\\\\\\\n          <IconButton\\\\\\\\n            intent='default'\\\\\\\\n            iconVariant='icomoon-add'\\\\\\\\n            children='Add'\\\\\\\\n          />\\\\\\\\n        </InlinePopup>\\\\\\\\n      </Position>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\";\\\\n// @ts-ignore\\\\nvar __ADDS_MAP__ = {};\\\\n// @ts-ignore\\\\nvar __MAIN_FILE_LOCATION__ = \\\\\\\"/InlinePopup.stories.tsx\\\\\\\";\\\\n// @ts-ignore\\\\nvar __MODULE_DEPENDENCIES__ = [];\\\\n// @ts-ignore\\\\nvar __LOCAL_DEPENDENCIES__ = {};\\\\n// @ts-ignore\\\\nvar __IDS_TO_FRAMEWORKS__ = {};\\\\n        \\\\nimport React from 'react'\\\\nimport {\\\\n  boolean,\\\\n  text,\\\\n  object,\\\\n  withKnobs,\\\\n  number\\\\n} from '@storybook/addon-knobs'\\\\nimport { action } from '@storybook/addon-actions'\\\\nimport { path } from '..'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport InlinePopup from '.'\\\\nimport IconButton from '../../atoms/IconButton'\\\\nimport Box from '../../atoms/Box'\\\\nimport Position from '../Position'\\\\n\\\\nexport default {parameters: {\\\\\\\"storySource\\\\\\\":{\\\\\\\"source\\\\\\\":\\\\\\\"import React from 'react'\\\\\\\\nimport {\\\\\\\\n  boolean,\\\\\\\\n  text,\\\\\\\\n  object,\\\\\\\\n  withKnobs,\\\\\\\\n  number\\\\\\\\n} from '@storybook/addon-knobs'\\\\\\\\nimport { action } from '@storybook/addon-actions'\\\\\\\\nimport { path } from '..'\\\\\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\\\\\nimport InlinePopup from '.'\\\\\\\\nimport IconButton from '../../atoms/IconButton'\\\\\\\\nimport Box from '../../atoms/Box'\\\\\\\\nimport Position from '../Position'\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/InlinePopup`,\\\\\\\\n  decorators: [withKnobs],\\\\\\\\n  component: InlinePopup\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const InlinePopupStories = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Position display='block'>\\\\\\\\n        <Box m='10em'>Sample Card</Box>\\\\\\\\n        <Box m='10em'>Sample Card</Box>\\\\\\\\n\\\\\\\\n        <InlinePopup\\\\\\\\n          isOpen={boolean('isOpen', false)}\\\\\\\\n          title={text('title', 'Inline Popup Header')}\\\\\\\\n          onClose={action('close called')}\\\\\\\\n          width={number('width', 500)}\\\\\\\\n          height={number('height', 200)}\\\\\\\\n          style={object('style', {\\\\\\\\n            position: 'absolute'\\\\\\\\n          })}\\\\\\\\n          content={\\\\\\\\n            <Box p='1em' m='1em'>\\\\\\\\n              This is something inside the InlinePopup\\\\\\\\n            </Box>\\\\\\\\n          }\\\\\\\\n          id={text('id', 'InlinePopupID')}\\\\\\\\n          className={text('className', 'InlinePopupclassName')}\\\\\\\\n          draggable={boolean('draggable', false)}\\\\\\\\n        >\\\\\\\\n          <IconButton\\\\\\\\n            intent='default'\\\\\\\\n            iconVariant='icomoon-add'\\\\\\\\n            children='Add'\\\\\\\\n          />\\\\\\\\n        </InlinePopup>\\\\\\\\n      </Position>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\",\\\\\\\"locationsMap\\\\\\\":{}},},\\\\n  title: `${path}/InlinePopup`,\\\\n  decorators: [withKnobs],\\\\n  component: InlinePopup\\\\n}\\\\n\\\\nexport const InlinePopupStories = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Position display='block'>\\\\n        <Box m='10em'>Sample Card</Box>\\\\n        <Box m='10em'>Sample Card</Box>\\\\n\\\\n        <InlinePopup\\\\n          isOpen={boolean('isOpen', false)}\\\\n          title={text('title', 'Inline Popup Header')}\\\\n          onClose={action('close called')}\\\\n          width={number('width', 500)}\\\\n          height={number('height', 200)}\\\\n          style={object('style', {\\\\n            position: 'absolute'\\\\n          })}\\\\n          content={\\\\n            <Box p='1em' m='1em'>\\\\n              This is something inside the InlinePopup\\\\n            </Box>\\\\n          }\\\\n          id={text('id', 'InlinePopupID')}\\\\n          className={text('className', 'InlinePopupclassName')}\\\\n          draggable={boolean('draggable', false)}\\\\n        >\\\\n          <IconButton\\\\n            intent='default'\\\\n            iconVariant='icomoon-add'\\\\n            children='Add'\\\\n          />\\\\n        </InlinePopup>\\\\n      </Position>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/InlinePopup.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\n\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/molecules/InlinePopup\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"import React from 'react'\\\\nimport {\\\\n  boolean,\\\\n  text,\\\\n  object,\\\\n  withKnobs,\\\\n  number\\\\n} from '@storybook/addon-knobs'\\\\nimport { action } from '@storybook/addon-actions'\\\\nimport { path } from '..'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport InlinePopup from '.'\\\\nimport IconButton from '../../atoms/IconButton'\\\\nimport Box from '../../atoms/Box'\\\\nimport Position from '../Position'\\\\n\\\\nexport default {\\\\n  title: `${path}/InlinePopup`,\\\\n  decorators: [withKnobs],\\\\n  component: InlinePopup\\\\n}\\\\n\\\\nexport const InlinePopupStories = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Position display='block'>\\\\n        <Box m='10em'>Sample Card</Box>\\\\n        <Box m='10em'>Sample Card</Box>\\\\n\\\\n        <InlinePopup\\\\n          isOpen={boolean('isOpen', false)}\\\\n          title={text('title', 'Inline Popup Header')}\\\\n          onClose={action('close called')}\\\\n          width={number('width', 500)}\\\\n          height={number('height', 200)}\\\\n          style={object('style', {\\\\n            position: 'absolute'\\\\n          })}\\\\n          content={\\\\n            <Box p='1em' m='1em'>\\\\n              This is something inside the InlinePopup\\\\n            </Box>\\\\n          }\\\\n          id={text('id', 'InlinePopupID')}\\\\n          className={text('className', 'InlinePopupclassName')}\\\\n          draggable={boolean('draggable', false)}\\\\n        >\\\\n          <IconButton\\\\n            intent='default'\\\\n            iconVariant='icomoon-add'\\\\n            children='Add'\\\\n          />\\\\n        </InlinePopup>\\\\n      </Position>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/InlinePopup.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\nimport React from 'react'\\nimport {\\n  boolean,\\n  text,\\n  object,\\n  withKnobs,\\n  number\\n} from '@storybook/addon-knobs'\\nimport { action } from '@storybook/addon-actions'\\nimport { path } from '..'\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\nimport InlinePopup from '.'\\nimport IconButton from '../../atoms/IconButton'\\nimport Box from '../../atoms/Box'\\nimport Position from '../Position'\\n\\nexport default {parameters: {\\\"storySource\\\":{\\\"source\\\":\\\"\\\\n\\\\n// @ts-nocheck\\\\n// @ts-ignore\\\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\\\n// @ts-ignore\\\\nvar addSourceDecorator = require(\\\\\\\"@storybook/source-loader/preview\\\\\\\").addSource;\\\\n// @ts-ignore\\\\nvar __SOURCE_PREFIX__ = \\\\\\\"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/molecules/InlinePopup\\\\\\\";\\\\n// @ts-ignore\\\\nvar __STORY__ = \\\\\\\"import React from 'react'\\\\\\\\nimport {\\\\\\\\n  boolean,\\\\\\\\n  text,\\\\\\\\n  object,\\\\\\\\n  withKnobs,\\\\\\\\n  number\\\\\\\\n} from '@storybook/addon-knobs'\\\\\\\\nimport { action } from '@storybook/addon-actions'\\\\\\\\nimport { path } from '..'\\\\\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\\\\\nimport InlinePopup from '.'\\\\\\\\nimport IconButton from '../../atoms/IconButton'\\\\\\\\nimport Box from '../../atoms/Box'\\\\\\\\nimport Position from '../Position'\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/InlinePopup`,\\\\\\\\n  decorators: [withKnobs],\\\\\\\\n  component: InlinePopup\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const InlinePopupStories = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Position display='block'>\\\\\\\\n        <Box m='10em'>Sample Card</Box>\\\\\\\\n        <Box m='10em'>Sample Card</Box>\\\\\\\\n\\\\\\\\n        <InlinePopup\\\\\\\\n          isOpen={boolean('isOpen', false)}\\\\\\\\n          title={text('title', 'Inline Popup Header')}\\\\\\\\n          onClose={action('close called')}\\\\\\\\n          width={number('width', 500)}\\\\\\\\n          height={number('height', 200)}\\\\\\\\n          style={object('style', {\\\\\\\\n            position: 'absolute'\\\\\\\\n          })}\\\\\\\\n          content={\\\\\\\\n            <Box p='1em' m='1em'>\\\\\\\\n              This is something inside the InlinePopup\\\\\\\\n            </Box>\\\\\\\\n          }\\\\\\\\n          id={text('id', 'InlinePopupID')}\\\\\\\\n          className={text('className', 'InlinePopupclassName')}\\\\\\\\n          draggable={boolean('draggable', false)}\\\\\\\\n        >\\\\\\\\n          <IconButton\\\\\\\\n            intent='default'\\\\\\\\n            iconVariant='icomoon-add'\\\\\\\\n            children='Add'\\\\\\\\n          />\\\\\\\\n        </InlinePopup>\\\\\\\\n      </Position>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\";\\\\n// @ts-ignore\\\\nvar __ADDS_MAP__ = {};\\\\n// @ts-ignore\\\\nvar __MAIN_FILE_LOCATION__ = \\\\\\\"/InlinePopup.stories.tsx\\\\\\\";\\\\n// @ts-ignore\\\\nvar __MODULE_DEPENDENCIES__ = [];\\\\n// @ts-ignore\\\\nvar __LOCAL_DEPENDENCIES__ = {};\\\\n// @ts-ignore\\\\nvar __IDS_TO_FRAMEWORKS__ = {};\\\\n        \\\\nimport React from 'react'\\\\nimport {\\\\n  boolean,\\\\n  text,\\\\n  object,\\\\n  withKnobs,\\\\n  number\\\\n} from '@storybook/addon-knobs'\\\\nimport { action } from '@storybook/addon-actions'\\\\nimport { path } from '..'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport InlinePopup from '.'\\\\nimport IconButton from '../../atoms/IconButton'\\\\nimport Box from '../../atoms/Box'\\\\nimport Position from '../Position'\\\\n\\\\nexport default {parameters: {\\\\\\\"storySource\\\\\\\":{\\\\\\\"source\\\\\\\":\\\\\\\"import React from 'react'\\\\\\\\nimport {\\\\\\\\n  boolean,\\\\\\\\n  text,\\\\\\\\n  object,\\\\\\\\n  withKnobs,\\\\\\\\n  number\\\\\\\\n} from '@storybook/addon-knobs'\\\\\\\\nimport { action } from '@storybook/addon-actions'\\\\\\\\nimport { path } from '..'\\\\\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\\\\\nimport InlinePopup from '.'\\\\\\\\nimport IconButton from '../../atoms/IconButton'\\\\\\\\nimport Box from '../../atoms/Box'\\\\\\\\nimport Position from '../Position'\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/InlinePopup`,\\\\\\\\n  decorators: [withKnobs],\\\\\\\\n  component: InlinePopup\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const InlinePopupStories = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Position display='block'>\\\\\\\\n        <Box m='10em'>Sample Card</Box>\\\\\\\\n        <Box m='10em'>Sample Card</Box>\\\\\\\\n\\\\\\\\n        <InlinePopup\\\\\\\\n          isOpen={boolean('isOpen', false)}\\\\\\\\n          title={text('title', 'Inline Popup Header')}\\\\\\\\n          onClose={action('close called')}\\\\\\\\n          width={number('width', 500)}\\\\\\\\n          height={number('height', 200)}\\\\\\\\n          style={object('style', {\\\\\\\\n            position: 'absolute'\\\\\\\\n          })}\\\\\\\\n          content={\\\\\\\\n            <Box p='1em' m='1em'>\\\\\\\\n              This is something inside the InlinePopup\\\\\\\\n            </Box>\\\\\\\\n          }\\\\\\\\n          id={text('id', 'InlinePopupID')}\\\\\\\\n          className={text('className', 'InlinePopupclassName')}\\\\\\\\n          draggable={boolean('draggable', false)}\\\\\\\\n        >\\\\\\\\n          <IconButton\\\\\\\\n            intent='default'\\\\\\\\n            iconVariant='icomoon-add'\\\\\\\\n            children='Add'\\\\\\\\n          />\\\\\\\\n        </InlinePopup>\\\\\\\\n      </Position>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\",\\\\\\\"locationsMap\\\\\\\":{}},},\\\\n  title: `${path}/InlinePopup`,\\\\n  decorators: [withKnobs],\\\\n  component: InlinePopup\\\\n}\\\\n\\\\nexport const InlinePopupStories = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Position display='block'>\\\\n        <Box m='10em'>Sample Card</Box>\\\\n        <Box m='10em'>Sample Card</Box>\\\\n\\\\n        <InlinePopup\\\\n          isOpen={boolean('isOpen', false)}\\\\n          title={text('title', 'Inline Popup Header')}\\\\n          onClose={action('close called')}\\\\n          width={number('width', 500)}\\\\n          height={number('height', 200)}\\\\n          style={object('style', {\\\\n            position: 'absolute'\\\\n          })}\\\\n          content={\\\\n            <Box p='1em' m='1em'>\\\\n              This is something inside the InlinePopup\\\\n            </Box>\\\\n          }\\\\n          id={text('id', 'InlinePopupID')}\\\\n          className={text('className', 'InlinePopupclassName')}\\\\n          draggable={boolean('draggable', false)}\\\\n        >\\\\n          <IconButton\\\\n            intent='default'\\\\n            iconVariant='icomoon-add'\\\\n            children='Add'\\\\n          />\\\\n        </InlinePopup>\\\\n      </Position>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\",\\\"locationsMap\\\":{}},\\\"storySource\\\":{\\\"source\\\":\\\"import React from 'react'\\\\nimport {\\\\n  boolean,\\\\n  text,\\\\n  object,\\\\n  withKnobs,\\\\n  number\\\\n} from '@storybook/addon-knobs'\\\\nimport { action } from '@storybook/addon-actions'\\\\nimport { path } from '..'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport InlinePopup from '.'\\\\nimport IconButton from '../../atoms/IconButton'\\\\nimport Box from '../../atoms/Box'\\\\nimport Position from '../Position'\\\\n\\\\nexport default {\\\\n  title: `${path}/InlinePopup`,\\\\n  decorators: [withKnobs],\\\\n  component: InlinePopup\\\\n}\\\\n\\\\nexport const InlinePopupStories = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Position display='block'>\\\\n        <Box m='10em'>Sample Card</Box>\\\\n        <Box m='10em'>Sample Card</Box>\\\\n\\\\n        <InlinePopup\\\\n          isOpen={boolean('isOpen', false)}\\\\n          title={text('title', 'Inline Popup Header')}\\\\n          onClose={action('close called')}\\\\n          width={number('width', 500)}\\\\n          height={number('height', 200)}\\\\n          style={object('style', {\\\\n            position: 'absolute'\\\\n          })}\\\\n          content={\\\\n            <Box p='1em' m='1em'>\\\\n              This is something inside the InlinePopup\\\\n            </Box>\\\\n          }\\\\n          id={text('id', 'InlinePopupID')}\\\\n          className={text('className', 'InlinePopupclassName')}\\\\n          draggable={boolean('draggable', false)}\\\\n        >\\\\n          <IconButton\\\\n            intent='default'\\\\n            iconVariant='icomoon-add'\\\\n            children='Add'\\\\n          />\\\\n        </InlinePopup>\\\\n      </Position>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\",\\\"locationsMap\\\":{}},},\\n  title: `${path}/InlinePopup`,\\n  decorators: [withKnobs],\\n  component: InlinePopup\\n}\\n\\nexport const InlinePopupStories = addSourceDecorator(addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <Position display='block'>\\n        <Box m='10em'>Sample Card</Box>\\n        <Box m='10em'>Sample Card</Box>\\n\\n        <InlinePopup\\n          isOpen={boolean('isOpen', false)}\\n          title={text('title', 'Inline Popup Header')}\\n          onClose={action('close called')}\\n          width={number('width', 500)}\\n          height={number('height', 200)}\\n          style={object('style', {\\n            position: 'absolute'\\n          })}\\n          content={\\n            <Box p='1em' m='1em'>\\n              This is something inside the InlinePopup\\n            </Box>\\n          }\\n          id={text('id', 'InlinePopupID')}\\n          className={text('className', 'InlinePopupclassName')}\\n          draggable={boolean('draggable', false)}\\n        >\\n          <IconButton\\n            intent='default'\\n            iconVariant='icomoon-add'\\n            children='Add'\\n          />\\n        </InlinePopup>\\n      </Position>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\",\"locationsMap\":{}},\"storySource\":{\"source\":\"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/molecules/InlinePopup\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"import React from 'react'\\\\nimport {\\\\n  boolean,\\\\n  text,\\\\n  object,\\\\n  withKnobs,\\\\n  number\\\\n} from '@storybook/addon-knobs'\\\\nimport { action } from '@storybook/addon-actions'\\\\nimport { path } from '..'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport InlinePopup from '.'\\\\nimport IconButton from '../../atoms/IconButton'\\\\nimport Box from '../../atoms/Box'\\\\nimport Position from '../Position'\\\\n\\\\nexport default {\\\\n  title: `${path}/InlinePopup`,\\\\n  decorators: [withKnobs],\\\\n  component: InlinePopup\\\\n}\\\\n\\\\nexport const InlinePopupStories = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Position display='block'>\\\\n        <Box m='10em'>Sample Card</Box>\\\\n        <Box m='10em'>Sample Card</Box>\\\\n\\\\n        <InlinePopup\\\\n          isOpen={boolean('isOpen', false)}\\\\n          title={text('title', 'Inline Popup Header')}\\\\n          onClose={action('close called')}\\\\n          width={number('width', 500)}\\\\n          height={number('height', 200)}\\\\n          style={object('style', {\\\\n            position: 'absolute'\\\\n          })}\\\\n          content={\\\\n            <Box p='1em' m='1em'>\\\\n              This is something inside the InlinePopup\\\\n            </Box>\\\\n          }\\\\n          id={text('id', 'InlinePopupID')}\\\\n          className={text('className', 'InlinePopupclassName')}\\\\n          draggable={boolean('draggable', false)}\\\\n        >\\\\n          <IconButton\\\\n            intent='default'\\\\n            iconVariant='icomoon-add'\\\\n            children='Add'\\\\n          />\\\\n        </InlinePopup>\\\\n      </Position>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/InlinePopup.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\nimport React from 'react'\\nimport {\\n  boolean,\\n  text,\\n  object,\\n  withKnobs,\\n  number\\n} from '@storybook/addon-knobs'\\nimport { action } from '@storybook/addon-actions'\\nimport { path } from '..'\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\nimport InlinePopup from '.'\\nimport IconButton from '../../atoms/IconButton'\\nimport Box from '../../atoms/Box'\\nimport Position from '../Position'\\n\\nexport default {parameters: {\\\"storySource\\\":{\\\"source\\\":\\\"import React from 'react'\\\\nimport {\\\\n  boolean,\\\\n  text,\\\\n  object,\\\\n  withKnobs,\\\\n  number\\\\n} from '@storybook/addon-knobs'\\\\nimport { action } from '@storybook/addon-actions'\\\\nimport { path } from '..'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport InlinePopup from '.'\\\\nimport IconButton from '../../atoms/IconButton'\\\\nimport Box from '../../atoms/Box'\\\\nimport Position from '../Position'\\\\n\\\\nexport default {\\\\n  title: `${path}/InlinePopup`,\\\\n  decorators: [withKnobs],\\\\n  component: InlinePopup\\\\n}\\\\n\\\\nexport const InlinePopupStories = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Position display='block'>\\\\n        <Box m='10em'>Sample Card</Box>\\\\n        <Box m='10em'>Sample Card</Box>\\\\n\\\\n        <InlinePopup\\\\n          isOpen={boolean('isOpen', false)}\\\\n          title={text('title', 'Inline Popup Header')}\\\\n          onClose={action('close called')}\\\\n          width={number('width', 500)}\\\\n          height={number('height', 200)}\\\\n          style={object('style', {\\\\n            position: 'absolute'\\\\n          })}\\\\n          content={\\\\n            <Box p='1em' m='1em'>\\\\n              This is something inside the InlinePopup\\\\n            </Box>\\\\n          }\\\\n          id={text('id', 'InlinePopupID')}\\\\n          className={text('className', 'InlinePopupclassName')}\\\\n          draggable={boolean('draggable', false)}\\\\n        >\\\\n          <IconButton\\\\n            intent='default'\\\\n            iconVariant='icomoon-add'\\\\n            children='Add'\\\\n          />\\\\n        </InlinePopup>\\\\n      </Position>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\",\\\"locationsMap\\\":{}},},\\n  title: `${path}/InlinePopup`,\\n  decorators: [withKnobs],\\n  component: InlinePopup\\n}\\n\\nexport const InlinePopupStories = addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <Position display='block'>\\n        <Box m='10em'>Sample Card</Box>\\n        <Box m='10em'>Sample Card</Box>\\n\\n        <InlinePopup\\n          isOpen={boolean('isOpen', false)}\\n          title={text('title', 'Inline Popup Header')}\\n          onClose={action('close called')}\\n          width={number('width', 500)}\\n          height={number('height', 200)}\\n          style={object('style', {\\n            position: 'absolute'\\n          })}\\n          content={\\n            <Box p='1em' m='1em'>\\n              This is something inside the InlinePopup\\n            </Box>\\n          }\\n          id={text('id', 'InlinePopupID')}\\n          className={text('className', 'InlinePopupclassName')}\\n          draggable={boolean('draggable', false)}\\n        >\\n          <IconButton\\n            intent='default'\\n            iconVariant='icomoon-add'\\n            children='Add'\\n          />\\n        </InlinePopup>\\n      </Position>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\",\"locationsMap\":{}},\"storySource\":{\"source\":\"import React from 'react'\\nimport {\\n  boolean,\\n  text,\\n  object,\\n  withKnobs,\\n  number\\n} from '@storybook/addon-knobs'\\nimport { action } from '@storybook/addon-actions'\\nimport { path } from '..'\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\nimport InlinePopup from '.'\\nimport IconButton from '../../atoms/IconButton'\\nimport Box from '../../atoms/Box'\\nimport Position from '../Position'\\n\\nexport default {\\n  title: `${path}/InlinePopup`,\\n  decorators: [withKnobs],\\n  component: InlinePopup\\n}\\n\\nexport const InlinePopupStories = () => {\\n  return (\\n    <ThemeWrapper>\\n      <Position display='block'>\\n        <Box m='10em'>Sample Card</Box>\\n        <Box m='10em'>Sample Card</Box>\\n\\n        <InlinePopup\\n          isOpen={boolean('isOpen', false)}\\n          title={text('title', 'Inline Popup Header')}\\n          onClose={action('close called')}\\n          width={number('width', 500)}\\n          height={number('height', 200)}\\n          style={object('style', {\\n            position: 'absolute'\\n          })}\\n          content={\\n            <Box p='1em' m='1em'>\\n              This is something inside the InlinePopup\\n            </Box>\\n          }\\n          id={text('id', 'InlinePopupID')}\\n          className={text('className', 'InlinePopupclassName')}\\n          draggable={boolean('draggable', false)}\\n        >\\n          <IconButton\\n            intent='default'\\n            iconVariant='icomoon-add'\\n            children='Add'\\n          />\\n        </InlinePopup>\\n      </Position>\\n    </ThemeWrapper>\\n  )\\n}\\n\",\"locationsMap\":{}},},\n  title: `${path}/InlinePopup`,\n  decorators: [withKnobs],\n  component: InlinePopup\n}\n\nexport const InlinePopupStories = addSourceDecorator(addSourceDecorator(addSourceDecorator(() => {\n  return (\n    <ThemeWrapper>\n      <Position display='block'>\n        <Box m='10em'>Sample Card</Box>\n        <Box m='10em'>Sample Card</Box>\n\n        <InlinePopup\n          isOpen={boolean('isOpen', false)}\n          title={text('title', 'Inline Popup Header')}\n          onClose={action('close called')}\n          width={number('width', 500)}\n          height={number('height', 200)}\n          style={object('style', {\n            position: 'absolute'\n          })}\n          content={\n            <Box p='1em' m='1em'>\n              This is something inside the InlinePopup\n            </Box>\n          }\n          id={text('id', 'InlinePopupID')}\n          className={text('className', 'InlinePopupclassName')}\n          draggable={boolean('draggable', false)}\n        >\n          <IconButton\n            intent='default'\n            iconVariant='icomoon-add'\n            children='Add'\n          />\n        </InlinePopup>\n      </Position>\n    </ThemeWrapper>\n  )\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});"],"sourceRoot":""},"metadata":{},"sourceType":"module"}