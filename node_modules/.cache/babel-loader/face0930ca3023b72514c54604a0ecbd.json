{"ast":null,"code":"import _regeneratorRuntime from \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/atoms/Map/utils/GoogleIntegration/googleRoute.tsx\";\n\nimport React, { useState, useEffect } from 'react';\nimport 'google-maps-react';\nimport AntPath from 'react-leaflet-ant-path';\nimport googleRouteCall from './googleRouteCall';\nimport prepareCallStack from './prepareRouteCallStack';\n\nvar GoogleRouteContainer = function GoogleRouteContainer(props) {\n  // INPUT - set on 'n' waypoints\n  // OUTPUT - set of route components for the waypoints (not necessarily 1)\n  // ALGO\n  // A : prepareCallStack\n  // 1. Internally, from the n waypoints received, batch the waypoints into a threshold of 8 calls\n  // 2. For all batches, maintain a map where key is the stringified lat - lng, and value is the markers received from call\n  // 3. Fire the calls using the function (googleRouteCall)\n  // 4. If QUERY limit is reached, give this call a 2 second timeout and then resend, untill the attempt count for that call RECURSIVE_CALL_ATTEMPT_LIMIT is maxed out.\n  // 5. If NULL response(no routes) is received, just return the aerial route of the points and update latLngPathMapping & pendingCallsStack\n  // 6. If a response of routes is recieved, then iteratively extract the waypoints / route out of the response and update latLngPathMapping & pendingCallsStack\n  // C :\n  // 9. In parallel, keep plotting the AntPath from latLngPathMapping.\n  // 10. Later Optimization: Use use-memo + In localStorage/sessionStorage = cache the pendingCallsStack for reducing the google calls as well.\n  var _useState = useState(prepareCallStack(props.positions)),\n      _useState2 = _slicedToArray(_useState, 2),\n      paths = _useState2[0],\n      setPaths = _useState2[1];\n\n  useEffect(function () {\n    var newPaths = prepareCallStack(props.positions);\n    newPaths.forEach( /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(path, index) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return googleRouteCall(props, path.points);\n\n              case 2:\n                newPaths[index].path = _context.sent;\n                console.log(newPaths[index].path);\n                setPaths(newPaths);\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n  }, [props]);\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(GoogleRoutePresentation, Object.assign({}, props, {\n    paths: paths,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }\n  })));\n};\n\nvar GoogleRoutePresentation = function GoogleRoutePresentation(props) {\n  var _props$paths;\n\n  console.log('GoogleRoutePresentation', props);\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }\n  }, (_props$paths = props.paths) === null || _props$paths === void 0 ? void 0 : _props$paths.map(function (route, index) {\n    if (!route.path.length) {\n      return /*#__PURE__*/React.createElement(AntPath, {\n        key: index,\n        positions: route.points,\n        options: {\n          color: props.color[index]\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 18\n        }\n      });\n    } else {\n      return /*#__PURE__*/React.createElement(AntPath, {\n        key: index,\n        positions: route.path,\n        options: {\n          color: props.color[index]\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 18\n        }\n      });\n    }\n  }));\n};\n\nexport default GoogleRouteContainer;","map":{"version":3,"sources":["/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/atoms/Map/utils/GoogleIntegration/googleRoute.tsx"],"names":["React","useState","useEffect","AntPath","googleRouteCall","prepareCallStack","GoogleRouteContainer","props","positions","paths","setPaths","newPaths","forEach","path","index","points","console","log","GoogleRoutePresentation","map","route","length","color"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAO,mBAAP;AACA,OAAOC,OAAP,MAAoB,wBAApB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,gBAAP,MAA6B,yBAA7B;;AAEA,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACC,KAAD,EAAgB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAb2C,kBAejBN,QAAQ,CAACI,gBAAgB,CAACE,KAAK,CAACC,SAAP,CAAjB,CAfS;AAAA;AAAA,MAepCC,KAfoC;AAAA,MAe7BC,QAf6B;;AAiB3CR,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMS,QAAQ,GAAGN,gBAAgB,CAACE,KAAK,CAACC,SAAP,CAAjC;AACAG,IAAAA,QAAQ,CAACC,OAAT;AAAA,0EAAiB,iBAAOC,IAAP,EAAkBC,KAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACcV,eAAe,CAACG,KAAD,EAAQM,IAAI,CAACE,MAAb,CAD7B;;AAAA;AACfJ,gBAAAA,QAAQ,CAACG,KAAD,CAAR,CAAgBD,IADD;AAEfG,gBAAAA,OAAO,CAACC,GAAR,CAAYN,QAAQ,CAACG,KAAD,CAAR,CAAgBD,IAA5B;AACAH,gBAAAA,QAAQ,CAACC,QAAD,CAAR;;AAHe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAjB;;AAAA;AAAA;AAAA;AAAA;AAKD,GAPQ,EAON,CAACJ,KAAD,CAPM,CAAT;AASA,sBACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,uBAAD,oBAA6BA,KAA7B;AAAoC,IAAA,KAAK,EAAEE,KAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF,CADF;AAKD,CA/BD;;AAiCA,IAAMS,uBAAuB,GAAG,SAA1BA,uBAA0B,CAACX,KAAD,EAAgB;AAAA;;AAC9CS,EAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAsCV,KAAtC;AAEA,sBACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACGA,KAAK,CAACE,KADT,iDACG,aAAaU,GAAb,CAAiB,UAACC,KAAD,EAAaN,KAAb,EAA+B;AAC/C,QAAI,CAACM,KAAK,CAACP,IAAN,CAAWQ,MAAhB,EAAwB;AACtB,0BAAO,oBAAC,OAAD;AAAS,QAAA,GAAG,EAAEP,KAAd;AAAqB,QAAA,SAAS,EAAEM,KAAK,CAACL,MAAtC;AAA8C,QAAA,OAAO,EAAE;AAACO,UAAAA,KAAK,EAACf,KAAK,CAACe,KAAN,CAAYR,KAAZ;AAAP,SAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD,KAFD,MAEO;AACL,0BAAO,oBAAC,OAAD;AAAS,QAAA,GAAG,EAAEA,KAAd;AAAqB,QAAA,SAAS,EAAEM,KAAK,CAACP,IAAtC;AAA4C,QAAA,OAAO,EAAE;AAACS,UAAAA,KAAK,EAACf,KAAK,CAACe,KAAN,CAAYR,KAAZ;AAAP,SAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD;AACF,GANA,CADH,CADF;AAWD,CAdD;;AAgBA,eAAeR,oBAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport 'google-maps-react'\nimport AntPath from 'react-leaflet-ant-path'\nimport googleRouteCall from './googleRouteCall'\nimport prepareCallStack from './prepareRouteCallStack'\n\nconst GoogleRouteContainer = (props: any) => {\n  // INPUT - set on 'n' waypoints\n  // OUTPUT - set of route components for the waypoints (not necessarily 1)\n  // ALGO\n  // A : prepareCallStack\n  // 1. Internally, from the n waypoints received, batch the waypoints into a threshold of 8 calls\n  // 2. For all batches, maintain a map where key is the stringified lat - lng, and value is the markers received from call\n  // 3. Fire the calls using the function (googleRouteCall)\n  // 4. If QUERY limit is reached, give this call a 2 second timeout and then resend, untill the attempt count for that call RECURSIVE_CALL_ATTEMPT_LIMIT is maxed out.\n  // 5. If NULL response(no routes) is received, just return the aerial route of the points and update latLngPathMapping & pendingCallsStack\n  // 6. If a response of routes is recieved, then iteratively extract the waypoints / route out of the response and update latLngPathMapping & pendingCallsStack\n  // C :\n  // 9. In parallel, keep plotting the AntPath from latLngPathMapping.\n  // 10. Later Optimization: Use use-memo + In localStorage/sessionStorage = cache the pendingCallsStack for reducing the google calls as well.\n\n  const [paths, setPaths] = useState(prepareCallStack(props.positions) as any)\n\n  useEffect(() => {\n    const newPaths = prepareCallStack(props.positions)\n    newPaths.forEach(async (path: any, index: number) => {\n      newPaths[index].path = await googleRouteCall(props, path.points)\n      console.log(newPaths[index].path)\n      setPaths(newPaths)\n    })\n  }, [props])\n\n  return (\n    <React.Fragment>\n      <GoogleRoutePresentation {...props} paths={paths} />\n    </React.Fragment>\n  )\n}\n\nconst GoogleRoutePresentation = (props: any) => {\n  console.log('GoogleRoutePresentation',props);\n\n  return (\n    <React.Fragment>\n      {props.paths?.map((route: any, index: number) => {\n        if (!route.path.length) {\n          return <AntPath key={index} positions={route.points} options={{color:props.color[index]}}/>\n        } else {\n          return <AntPath key={index} positions={route.path} options={{color:props.color[index]}}/>\n        }\n      })}\n    </React.Fragment>\n  )\n}\n\nexport default GoogleRouteContainer\n"]},"metadata":{},"sourceType":"module"}