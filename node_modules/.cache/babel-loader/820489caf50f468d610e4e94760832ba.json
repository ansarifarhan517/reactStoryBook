{"ast":null,"code":"import _objectSpread from \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _defineProperty from \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/organisms/ListView/utils/components/RowSelectCell.tsx\";\n\nimport React, { useState, useEffect } from 'react';\nimport Position from '../../../../molecules/Position';\nimport IconButton from '../../../../atoms/IconButton';\nimport Checkbox from '../../../../atoms/Checkbox';\nimport ReactTooltipCustom from '../../../../../utilities/components/ReactTooltip';\nimport Radio from '../../../../atoms/Radio';\n\nvar RowSelectCell = function RowSelectCell(_ref) {\n  var rowCount = _ref.rowCount,\n      row = _ref.row,\n      selectedRows = _ref.selectedRows,\n      setSelectedRows = _ref.setSelectedRows,\n      hasRowSelectionWithEdit = _ref.hasRowSelectionWithEdit,\n      loading = _ref.loading,\n      isEditMode = _ref.isEditMode,\n      rowIdentifier = _ref.rowIdentifier,\n      onRowSelect = _ref.onRowSelect,\n      onRowEditClick = _ref.onRowEditClick,\n      hasRadioSelection = _ref.hasRadioSelection;\n\n  var _useState = useState(!!selectedRows[row.original[rowIdentifier]]),\n      _useState2 = _slicedToArray(_useState, 2),\n      checked = _useState2[0],\n      setChecked = _useState2[1];\n\n  useEffect(function () {\n    setChecked(!!selectedRows[row.original[rowIdentifier]]);\n  }, [selectedRows]);\n  return /*#__PURE__*/React.createElement(Position, {\n    display: \"flex\",\n    justifyContent: \"flex-end\",\n    type: \"absolute\",\n    right: \"5px\",\n    top: \"calc(50% - \".concat(hasRowSelectionWithEdit && !loading ? '12px' : '9px', \")\"),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }\n  }, hasRowSelectionWithEdit && !loading && /*#__PURE__*/React.createElement(IconButton, Object.assign({\n    iconVariant: \"icomoon-edit-empty\",\n    iconSize: \"sm\",\n    onlyIcon: true,\n    hoverFeedback: false,\n    className: \"editIcon\",\n    color: \"primary.main\",\n    style: {\n      paddingRight: '5px',\n      paddingBottom: '2px'\n    },\n    title: \"Update\",\n    onClick: function onClick() {\n      return onRowEditClick(row.original);\n    }\n  }, row.original.editIconButtonProps || {}, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    // title={row.original.checkboxTooltipText || undefined}\n    \"data-tip\": true,\n    \"data-for\": \"tt_checkbox-\".concat(row.original[rowIdentifier]),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }\n  }, hasRadioSelection ? /*#__PURE__*/React.createElement(Radio, Object.assign({\n    id: \"\".concat(row.original[rowIdentifier], \"-selectAll\"),\n    radioSize: \"md\",\n    name: \"ListViewradio\",\n    disabled: row.original.hasSelectionDisabled || loading || isEditMode // {...row.getToggleRowSelectedProps()}\n    ,\n    checked: checked,\n    onChange: function onChange(e) {\n      var isChecked = e.target.checked;\n      setChecked(isChecked);\n      setTimeout(function () {\n        setSelectedRows(function (_s) {\n          // setSelectedRows((s) => {\n          var newSelection = _defineProperty({}, row.original[rowIdentifier], row.original);\n\n          if (!isChecked) {\n            delete newSelection[row.original[rowIdentifier]];\n          }\n\n          setTimeout(function () {\n            onRowSelect(newSelection);\n          }, 100);\n          return newSelection;\n        });\n      }, rowCount >= 100 ? 20 : 0);\n    }\n  }, row.original.hasSelectionDisabled ? {\n    checked: false\n  } : {}, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 11\n    }\n  })) : /*#__PURE__*/React.createElement(Checkbox, Object.assign({\n    id: \"\".concat(row.original[rowIdentifier], \"-selectAll\"),\n    checkboxSize: \"md\",\n    disabled: row.original.hasSelectionDisabled || loading || isEditMode // {...row.getToggleRowSelectedProps()}\n    ,\n    checked: checked,\n    onChange: function onChange(e) {\n      var isChecked = e.target.checked;\n      setChecked(isChecked);\n      setTimeout(function () {\n        setSelectedRows(function (s) {\n          var newSelection = _objectSpread(_objectSpread({}, s), {}, _defineProperty({}, row.original[rowIdentifier], row.original));\n\n          if (!isChecked) {\n            delete newSelection[row.original[rowIdentifier]];\n          }\n\n          setTimeout(function () {\n            onRowSelect(newSelection);\n          }, 100);\n          return newSelection;\n        });\n      }, rowCount >= 100 ? 20 : 0);\n    }\n  }, row.original.hasSelectionDisabled ? {\n    checked: false\n  } : {}, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 11\n    }\n  }))), row.original.checkboxTooltipText && /*#__PURE__*/React.createElement(ReactTooltipCustom, {\n    id: \"tt_checkbox-\".concat(row.original[rowIdentifier]) // type='info'\n    ,\n    effect: \"float\",\n    arrowColor: \"transparent\",\n    place: \"bottom\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 9\n    }\n  }, row.original.checkboxTooltipText || undefined));\n};\n\nRowSelectCell.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"RowSelectCell\",\n  \"props\": {\n    \"rowCount\": {\n      \"required\": true,\n      \"tsType\": {\n        \"name\": \"number\"\n      },\n      \"description\": \"\"\n    },\n    \"row\": {\n      \"required\": true,\n      \"tsType\": {\n        \"name\": \"Row\",\n        \"elements\": [{\n          \"name\": \"IListViewRow\"\n        }],\n        \"raw\": \"Row<IListViewRow>\"\n      },\n      \"description\": \"\"\n    },\n    \"selectedRows\": {\n      \"required\": true,\n      \"tsType\": {\n        \"name\": \"ISelectedRows\"\n      },\n      \"description\": \"\"\n    },\n    \"setSelectedRows\": {\n      \"required\": true,\n      \"tsType\": {\n        \"name\": \"ReactDispatch\",\n        \"raw\": \"React.Dispatch<React.SetStateAction<ISelectedRows>>\",\n        \"elements\": [{\n          \"name\": \"ReactSetStateAction\",\n          \"raw\": \"React.SetStateAction<ISelectedRows>\",\n          \"elements\": [{\n            \"name\": \"ISelectedRows\"\n          }]\n        }]\n      },\n      \"description\": \"\"\n    },\n    \"hasRowSelectionWithEdit\": {\n      \"required\": true,\n      \"tsType\": {\n        \"name\": \"boolean\"\n      },\n      \"description\": \"\"\n    },\n    \"loading\": {\n      \"required\": true,\n      \"tsType\": {\n        \"name\": \"boolean\"\n      },\n      \"description\": \"\"\n    },\n    \"isEditMode\": {\n      \"required\": true,\n      \"tsType\": {\n        \"name\": \"boolean\"\n      },\n      \"description\": \"\"\n    },\n    \"rowIdentifier\": {\n      \"required\": true,\n      \"tsType\": {\n        \"name\": \"string\"\n      },\n      \"description\": \"\"\n    },\n    \"onRowSelect\": {\n      \"required\": true,\n      \"tsType\": {\n        \"name\": \"signature\",\n        \"type\": \"function\",\n        \"raw\": \"(selectedRows: ISelectedRows) => void\",\n        \"signature\": {\n          \"arguments\": [{\n            \"name\": \"selectedRows\",\n            \"type\": {\n              \"name\": \"ISelectedRows\"\n            }\n          }],\n          \"return\": {\n            \"name\": \"void\"\n          }\n        }\n      },\n      \"description\": \"\"\n    },\n    \"onRowEditClick\": {\n      \"required\": true,\n      \"tsType\": {\n        \"name\": \"signature\",\n        \"type\": \"function\",\n        \"raw\": \"(row: IListViewRow) => void\",\n        \"signature\": {\n          \"arguments\": [{\n            \"name\": \"row\",\n            \"type\": {\n              \"name\": \"IListViewRow\"\n            }\n          }],\n          \"return\": {\n            \"name\": \"void\"\n          }\n        }\n      },\n      \"description\": \"\"\n    },\n    \"hasRadioSelection\": {\n      \"required\": true,\n      \"tsType\": {\n        \"name\": \"boolean\"\n      },\n      \"description\": \"\"\n    }\n  }\n};\nexport default React.memo(RowSelectCell);\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src/components/organisms/ListView/utils/components/RowSelectCell.tsx\"] = {\n    name: \"RowSelectCell\",\n    docgenInfo: RowSelectCell.__docgenInfo,\n    path: \"src/components/organisms/ListView/utils/components/RowSelectCell.tsx\"\n  };\n}","map":{"version":3,"sources":["/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/organisms/ListView/utils/components/RowSelectCell.tsx"],"names":["React","useState","useEffect","Position","IconButton","Checkbox","ReactTooltipCustom","Radio","RowSelectCell","rowCount","row","selectedRows","setSelectedRows","hasRowSelectionWithEdit","loading","isEditMode","rowIdentifier","onRowSelect","onRowEditClick","hasRadioSelection","original","checked","setChecked","paddingRight","paddingBottom","editIconButtonProps","hasSelectionDisabled","e","isChecked","target","setTimeout","_s","newSelection","s","checkboxTooltipText","undefined","memo"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AAGA,OAAOC,QAAP,MAAqB,gCAArB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,kBAAP,MAA+B,kDAA/B;AACA,OAAOC,KAAP,MAAkB,yBAAlB;;AAgBA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,OAYK;AAAA,MAXzBC,QAWyB,QAXzBA,QAWyB;AAAA,MAVzBC,GAUyB,QAVzBA,GAUyB;AAAA,MATzBC,YASyB,QATzBA,YASyB;AAAA,MARzBC,eAQyB,QARzBA,eAQyB;AAAA,MAPzBC,uBAOyB,QAPzBA,uBAOyB;AAAA,MANzBC,OAMyB,QANzBA,OAMyB;AAAA,MALzBC,UAKyB,QALzBA,UAKyB;AAAA,MAJzBC,aAIyB,QAJzBA,aAIyB;AAAA,MAHzBC,WAGyB,QAHzBA,WAGyB;AAAA,MAFzBC,cAEyB,QAFzBA,cAEyB;AAAA,MADzBC,iBACyB,QADzBA,iBACyB;;AAAA,kBACKlB,QAAQ,CACpC,CAAC,CAACU,YAAY,CAACD,GAAG,CAACU,QAAJ,CAAaJ,aAAb,CAAD,CADsB,CADb;AAAA;AAAA,MAClBK,OADkB;AAAA,MACTC,UADS;;AAKzBpB,EAAAA,SAAS,CAAC,YAAM;AACdoB,IAAAA,UAAU,CAAC,CAAC,CAACX,YAAY,CAACD,GAAG,CAACU,QAAJ,CAAaJ,aAAb,CAAD,CAAf,CAAV;AACD,GAFQ,EAEN,CAACL,YAAD,CAFM,CAAT;AAIA,sBACE,oBAAC,QAAD;AACE,IAAA,OAAO,EAAC,MADV;AAEE,IAAA,cAAc,EAAC,UAFjB;AAGE,IAAA,IAAI,EAAC,UAHP;AAIE,IAAA,KAAK,EAAC,KAJR;AAKE,IAAA,GAAG,uBACDE,uBAAuB,IAAI,CAACC,OAA5B,GAAsC,MAAtC,GAA+C,KAD9C,MALL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KASGD,uBAAuB,IAAI,CAACC,OAA5B,iBACC,oBAAC,UAAD;AACE,IAAA,WAAW,EAAC,oBADd;AAEE,IAAA,QAAQ,EAAC,IAFX;AAGE,IAAA,QAAQ,MAHV;AAIE,IAAA,aAAa,EAAE,KAJjB;AAKE,IAAA,SAAS,EAAC,UALZ;AAME,IAAA,KAAK,EAAC,cANR;AAOE,IAAA,KAAK,EAAE;AAAES,MAAAA,YAAY,EAAE,KAAhB;AAAuBC,MAAAA,aAAa,EAAE;AAAtC,KAPT;AAQE,IAAA,KAAK,EAAC,QARR;AASE,IAAA,OAAO,EAAE;AAAA,aAAMN,cAAc,CAACR,GAAG,CAACU,QAAL,CAApB;AAAA;AATX,KAUOV,GAAG,CAACU,QAAJ,CAAaK,mBAAb,IAAoC,EAV3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAVJ,eAuBE;AACE;AACA,oBAFF;AAGE,sCAAyBf,GAAG,CAACU,QAAJ,CAAaJ,aAAb,CAAzB,CAHF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKGG,iBAAiB,gBAChB,oBAAC,KAAD;AACE,IAAA,EAAE,YAAKT,GAAG,CAACU,QAAJ,CAAaJ,aAAb,CAAL,eADJ;AAEE,IAAA,SAAS,EAAC,IAFZ;AAGE,IAAA,IAAI,EAAC,eAHP;AAIE,IAAA,QAAQ,EACNN,GAAG,CAACU,QAAJ,CAAaM,oBAAb,IAAqCZ,OAArC,IAAgDC,UALpD,CAOE;AAPF;AAQE,IAAA,OAAO,EAAEM,OARX;AASE,IAAA,QAAQ,EAAE,kBAACM,CAAD,EAA4C;AACpD,UAAMC,SAAS,GAAGD,CAAC,CAACE,MAAF,CAASR,OAA3B;AACAC,MAAAA,UAAU,CAACM,SAAD,CAAV;AACAE,MAAAA,UAAU,CACR,YAAM;AACJlB,QAAAA,eAAe,CAAC,UAACmB,EAAD,EAAQ;AACtB;AACA,cAAMC,YAAY,uBACftB,GAAG,CAACU,QAAJ,CAAaJ,aAAb,CADe,EACeN,GAAG,CAACU,QADnB,CAAlB;;AAGA,cAAI,CAACQ,SAAL,EAAgB;AACd,mBAAOI,YAAY,CAACtB,GAAG,CAACU,QAAJ,CAAaJ,aAAb,CAAD,CAAnB;AACD;;AAEDc,UAAAA,UAAU,CAAC,YAAM;AACfb,YAAAA,WAAW,CAACe,YAAD,CAAX;AACD,WAFS,EAEP,GAFO,CAAV;AAGA,iBAAOA,YAAP;AACD,SAbc,CAAf;AAcD,OAhBO,EAiBRvB,QAAQ,IAAI,GAAZ,GAAkB,EAAlB,GAAuB,CAjBf,CAAV;AAmBD;AA/BH,KAgCOC,GAAG,CAACU,QAAJ,CAAaM,oBAAb,GAAoC;AAAEL,IAAAA,OAAO,EAAE;AAAX,GAApC,GAAyD,EAhChE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADgB,gBAoChB,oBAAC,QAAD;AACE,IAAA,EAAE,YAAKX,GAAG,CAACU,QAAJ,CAAaJ,aAAb,CAAL,eADJ;AAEE,IAAA,YAAY,EAAC,IAFf;AAGE,IAAA,QAAQ,EACNN,GAAG,CAACU,QAAJ,CAAaM,oBAAb,IAAqCZ,OAArC,IAAgDC,UAJpD,CAME;AANF;AAOE,IAAA,OAAO,EAAEM,OAPX;AAQE,IAAA,QAAQ,EAAE,kBAACM,CAAD,EAA4C;AACpD,UAAMC,SAAS,GAAGD,CAAC,CAACE,MAAF,CAASR,OAA3B;AACAC,MAAAA,UAAU,CAACM,SAAD,CAAV;AACAE,MAAAA,UAAU,CACR,YAAM;AACJlB,QAAAA,eAAe,CAAC,UAACqB,CAAD,EAAO;AACrB,cAAMD,YAAY,mCACbC,CADa,2BAEfvB,GAAG,CAACU,QAAJ,CAAaJ,aAAb,CAFe,EAEeN,GAAG,CAACU,QAFnB,EAAlB;;AAIA,cAAI,CAACQ,SAAL,EAAgB;AACd,mBAAOI,YAAY,CAACtB,GAAG,CAACU,QAAJ,CAAaJ,aAAb,CAAD,CAAnB;AACD;;AAEDc,UAAAA,UAAU,CAAC,YAAM;AACfb,YAAAA,WAAW,CAACe,YAAD,CAAX;AACD,WAFS,EAEP,GAFO,CAAV;AAGA,iBAAOA,YAAP;AACD,SAbc,CAAf;AAcD,OAhBO,EAiBRvB,QAAQ,IAAI,GAAZ,GAAkB,EAAlB,GAAuB,CAjBf,CAAV;AAmBD;AA9BH,KA+BOC,GAAG,CAACU,QAAJ,CAAaM,oBAAb,GAAoC;AAAEL,IAAAA,OAAO,EAAE;AAAX,GAApC,GAAyD,EA/BhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAzCJ,CAvBF,EAmGGX,GAAG,CAACU,QAAJ,CAAac,mBAAb,iBACC,oBAAC,kBAAD;AACE,IAAA,EAAE,wBAAiBxB,GAAG,CAACU,QAAJ,CAAaJ,aAAb,CAAjB,CADJ,CAEE;AAFF;AAGE,IAAA,MAAM,EAAC,OAHT;AAIE,IAAA,UAAU,EAAC,aAJb;AAKE,IAAA,KAAK,EAAC,QALR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOGN,GAAG,CAACU,QAAJ,CAAac,mBAAb,IAAoCC,SAPvC,CApGJ,CADF;AAiHD,CAtID;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwIA,eAAenC,KAAK,CAACoC,IAAN,CAAW5B,aAAX,CAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Row } from 'react-table'\nimport { IListViewRow, ISelectedRows } from '../../interfaces'\nimport Position from '../../../../molecules/Position'\nimport IconButton from '../../../../atoms/IconButton'\nimport Checkbox from '../../../../atoms/Checkbox'\nimport ReactTooltipCustom from '../../../../../utilities/components/ReactTooltip'\nimport Radio from '../../../../atoms/Radio'\n\nexport interface IRowSelectCellProps {\n  rowCount: number\n  row: Row<IListViewRow>\n  selectedRows: ISelectedRows\n  setSelectedRows: React.Dispatch<React.SetStateAction<ISelectedRows>>\n  hasRowSelectionWithEdit: boolean\n  loading: boolean\n  isEditMode: boolean\n  rowIdentifier: string\n  onRowSelect: (selectedRows: ISelectedRows) => void\n  onRowEditClick: (row: IListViewRow) => void\n  hasRadioSelection: boolean\n}\n\nconst RowSelectCell = ({\n  rowCount,\n  row,\n  selectedRows,\n  setSelectedRows,\n  hasRowSelectionWithEdit,\n  loading,\n  isEditMode,\n  rowIdentifier,\n  onRowSelect,\n  onRowEditClick,\n  hasRadioSelection\n}: IRowSelectCellProps) => {\n  const [checked, setChecked] = useState<boolean>(\n    !!selectedRows[row.original[rowIdentifier]]\n  )\n\n  useEffect(() => {\n    setChecked(!!selectedRows[row.original[rowIdentifier]])\n  }, [selectedRows])\n\n  return (\n    <Position\n      display='flex'\n      justifyContent='flex-end'\n      type='absolute'\n      right='5px'\n      top={`calc(50% - ${\n        hasRowSelectionWithEdit && !loading ? '12px' : '9px'\n      })`}\n    >\n      {hasRowSelectionWithEdit && !loading && (\n        <IconButton\n          iconVariant='icomoon-edit-empty'\n          iconSize='sm'\n          onlyIcon\n          hoverFeedback={false}\n          className='editIcon'\n          color='primary.main'\n          style={{ paddingRight: '5px', paddingBottom: '2px' }}\n          title='Update'\n          onClick={() => onRowEditClick(row.original)}\n          {...(row.original.editIconButtonProps || {})}\n        />\n      )}\n      <div\n        // title={row.original.checkboxTooltipText || undefined}\n        data-tip\n        data-for={`tt_checkbox-${row.original[rowIdentifier]}`}\n      >\n        {hasRadioSelection ? (\n          <Radio\n            id={`${row.original[rowIdentifier]}-selectAll`}\n            radioSize='md'\n            name='ListViewradio'\n            disabled={\n              row.original.hasSelectionDisabled || loading || isEditMode\n            }\n            // {...row.getToggleRowSelectedProps()}\n            checked={checked}\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n              const isChecked = e.target.checked\n              setChecked(isChecked)\n              setTimeout(\n                () => {\n                  setSelectedRows((_s) => {\n                    // setSelectedRows((s) => {\n                    const newSelection = {\n                      [row.original[rowIdentifier]]: row.original\n                    }\n                    if (!isChecked) {\n                      delete newSelection[row.original[rowIdentifier]]\n                    }\n\n                    setTimeout(() => {\n                      onRowSelect(newSelection)\n                    }, 100)\n                    return newSelection\n                  })\n                },\n                rowCount >= 100 ? 20 : 0\n              )\n            }}\n            {...(row.original.hasSelectionDisabled ? { checked: false } : {})}\n          />\n        ) : (\n          <Checkbox\n            id={`${row.original[rowIdentifier]}-selectAll`}\n            checkboxSize='md'\n            disabled={\n              row.original.hasSelectionDisabled || loading || isEditMode\n            }\n            // {...row.getToggleRowSelectedProps()}\n            checked={checked}\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n              const isChecked = e.target.checked\n              setChecked(isChecked)\n              setTimeout(\n                () => {\n                  setSelectedRows((s) => {\n                    const newSelection = {\n                      ...s,\n                      [row.original[rowIdentifier]]: row.original\n                    }\n                    if (!isChecked) {\n                      delete newSelection[row.original[rowIdentifier]]\n                    }\n\n                    setTimeout(() => {\n                      onRowSelect(newSelection)\n                    }, 100)\n                    return newSelection\n                  })\n                },\n                rowCount >= 100 ? 20 : 0\n              )\n            }}\n            {...(row.original.hasSelectionDisabled ? { checked: false } : {})}\n          />\n        )}\n      </div>\n      {row.original.checkboxTooltipText && (\n        <ReactTooltipCustom\n          id={`tt_checkbox-${row.original[rowIdentifier]}`}\n          // type='info'\n          effect='float'\n          arrowColor='transparent'\n          place='bottom'\n        >\n          {row.original.checkboxTooltipText || undefined}\n        </ReactTooltipCustom>\n      )}\n    </Position>\n  )\n}\n\nexport default React.memo(RowSelectCell)\n"]},"metadata":{},"sourceType":"module"}