{"ast":null,"code":"import _slicedToArray from \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/molecules/IconDropdown/Variant/MultiLevelButtonDropdown.tsx\";\n\nimport React, { useRef, useState } from 'react';\nimport { StyledSelectWrapper, IconButtonStyled, StyledDropdownContainer, StyledDropdownItem, StyledMultiLevelItem } from '../StyledIconDropdown';\nimport FontIcon from '../../../atoms/FontIcon';\nimport Position from '../../Position';\nimport Tooltip from '../../Tooltip';\n\nvar StyledButton = function StyledButton(_ref) {\n  var primary = _ref.primary,\n      intent = _ref.intent,\n      iconButtonDetails = _ref.iconButtonDetails,\n      theme = _ref.theme,\n      menuIsOpen = _ref.menuIsOpen,\n      disabled = _ref.disabled,\n      id = _ref.id,\n      rest = _objectWithoutProperties(_ref, [\"primary\", \"intent\", \"iconButtonDetails\", \"theme\", \"menuIsOpen\", \"disabled\", \"id\"]);\n\n  return /*#__PURE__*/React.createElement(IconButtonStyled, Object.assign({\n    disabled: disabled,\n    primary: primary,\n    intent: intent,\n    theme: theme,\n    menuIsOpen: menuIsOpen,\n    id: id\n  }, rest, {\n    style: {\n      padding: '0px 10px'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(FontIcon, {\n    variant: iconButtonDetails[0],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }\n  }, iconButtonDetails[1]), /*#__PURE__*/React.createElement(FontIcon, {\n    variant: iconButtonDetails[2],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }));\n};\n\nvar MultiLevelButtonDropdown = function MultiLevelButtonDropdown(_ref2) {\n  var defaultProps = _ref2.defaultProps;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      menuIsOpen = _useState2[0],\n      setMenuIsOpen = _useState2[1]; // we are keeping this to send to button as on open we have to make button blue\n\n\n  var options = defaultProps.options,\n      primary = defaultProps.primary,\n      intent = defaultProps.intent,\n      iconButtonDetails = defaultProps.iconButtonDetails,\n      width = defaultProps.width,\n      theme = defaultProps.theme,\n      tooltipMessage = defaultProps.tooltipMessage,\n      _defaultProps$disable = defaultProps.disabled,\n      disabled = _defaultProps$disable === void 0 ? false : _defaultProps$disable,\n      _defaultProps$default = defaultProps.defaultOpen,\n      defaultOpen = _defaultProps$default === void 0 ? 'left' : _defaultProps$default,\n      handleClick = defaultProps.handleClick,\n      _defaultProps$tooltip = defaultProps.tooltipProps,\n      tooltipProps = _defaultProps$tooltip === void 0 ? {} : _defaultProps$tooltip,\n      id = defaultProps.id; // interface IOptionModel {\n  //   id:string,\n  //   label:string,\n  //   value:string,\n  //   options?:any\n  // }\n\n  //   function isInViewport(element) {\n  //     const rect = element.getBoundingClientRect();\n  //     return (\n  //         rect.top >= 0 &&\n  //         rect.left >= 0 &&\n  //         rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&\n  //         rect.right <= (window.innerWidth || document.documentElement.clientWidth)\n  //     );\n  // }\n  var MultiLevelButtonsList = function MultiLevelButtonsList(_ref3) {\n    var options = _ref3.options,\n        _ref3$defaultOpen = _ref3.defaultOpen,\n        defaultOpen = _ref3$defaultOpen === void 0 ? 'right' : _ref3$defaultOpen,\n        childLevel = _ref3.childLevel,\n        handleOnClick = _ref3.handleOnClick,\n        id = _ref3.id;\n    var dropdronRef = useRef(null);\n    console.log(defaultOpen);\n    console.log(id);\n    return /*#__PURE__*/React.createElement(StyledDropdownContainer, {\n      className: childLevel ? defaultOpen == 'right' ? \"dropdown-item-right-\".concat(childLevel) : \"dropdown-item-left-\".concat(childLevel) : '' // style={alignmentStyles.container}\n      ,\n      ref: dropdronRef,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 7\n      }\n    }, options.map(function (item) {\n      var _item$options;\n\n      if (item === null || item === void 0 ? void 0 : (_item$options = item.options) === null || _item$options === void 0 ? void 0 : _item$options.length) {\n        return /*#__PURE__*/React.createElement(StyledMultiLevelItem, {\n          containterIdentifier: \"child-\".concat(item.id),\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 15\n          }\n        }, /*#__PURE__*/React.createElement(StyledDropdownItem, {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"hasChildren\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 19\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 21\n          }\n        }, item.label), /*#__PURE__*/React.createElement(\"i\", {\n          className: \"icon ui-library-icons icon-angle-right\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 21\n          }\n        })), /*#__PURE__*/React.createElement(MultiLevelButtonsList, {\n          options: item.options,\n          defaultOpen: defaultOpen,\n          childLevel: \"child-\".concat(item.id),\n          handleOnClick: handleOnClick,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 19\n          }\n        })));\n      }\n\n      return /*#__PURE__*/React.createElement(StyledDropdownItem, {\n        onClick: function onClick() {\n          handleOnClick && handleOnClick(item.id);\n        },\n        title: item.label,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 13\n        }\n      }, item.label);\n    }));\n  };\n\n  return /*#__PURE__*/React.createElement(Position, {\n    type: \"relative\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Tooltip, Object.assign({\n    message: tooltipMessage,\n    hover: true,\n    hide: !tooltipMessage || menuIsOpen\n  }, tooltipProps, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(StyledButton, {\n    primary: primary,\n    width: \"unset\",\n    intent: intent,\n    iconButtonDetails: iconButtonDetails,\n    theme: theme,\n    disabled: disabled,\n    menuIsOpen: menuIsOpen,\n    id: id,\n    onClick: function onClick() {\n      setMenuIsOpen(function (o) {\n        return !o;\n      });\n    },\n    onBlur: function onBlur() {\n      setTimeout(function () {\n        setMenuIsOpen(false);\n      }, 350);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(StyledSelectWrapper, {\n    width: width,\n    onClick: function onClick(e) {\n      e.stopPropagation();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }\n  }, menuIsOpen && /*#__PURE__*/React.createElement(MultiLevelButtonsList, {\n    options: options,\n    defaultOpen: defaultOpen,\n    handleOnClick: handleClick,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 11\n    }\n  })));\n};\n\nexport default React.memo(MultiLevelButtonDropdown);","map":{"version":3,"sources":["/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/molecules/IconDropdown/Variant/MultiLevelButtonDropdown.tsx"],"names":["React","useRef","useState","StyledSelectWrapper","IconButtonStyled","StyledDropdownContainer","StyledDropdownItem","StyledMultiLevelItem","FontIcon","Position","Tooltip","StyledButton","primary","intent","iconButtonDetails","theme","menuIsOpen","disabled","id","rest","padding","MultiLevelButtonDropdown","defaultProps","setMenuIsOpen","options","width","tooltipMessage","defaultOpen","handleClick","tooltipProps","MultiLevelButtonsList","childLevel","handleOnClick","dropdronRef","console","log","map","item","length","label","o","setTimeout","e","stopPropagation","memo"],"mappings":"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","sourcesContent":["import React, { useRef, useState } from 'react'\nimport { IIconMultilevelDropdown } from '../../DropDown/interface'\nimport {\n  StyledSelectWrapper,\n  IconButtonStyled,\n  StyledDropdownContainer,\n  StyledDropdownItem,\n  StyledMultiLevelItem\n} from '../StyledIconDropdown'\nimport { tIntent } from '../../../atoms/Button'\nimport FontIcon from '../../../atoms/FontIcon'\nimport Position from '../../Position'\nimport Tooltip from '../../Tooltip'\n\nconst StyledButton = ({\n  primary,\n  intent,\n  iconButtonDetails,\n  theme,\n  menuIsOpen,\n  disabled,\n  id,\n  ...rest\n}: any) => {\n  return (\n    <IconButtonStyled\n      disabled={disabled}\n      primary={primary}\n      intent={intent as tIntent}\n      theme={theme}\n      menuIsOpen={menuIsOpen}\n      id={id}\n      {...rest}\n      style={{ padding: '0px 10px' }}\n    >\n      <FontIcon variant={iconButtonDetails[0]} />\n      <span>{iconButtonDetails[1]}</span>\n      <FontIcon variant={iconButtonDetails[2]} />\n    </IconButtonStyled>\n  )\n}\n\nconst MultiLevelButtonDropdown = ({\n  defaultProps\n}: {\n  defaultProps: IIconMultilevelDropdown\n}) => {\n  const [menuIsOpen, setMenuIsOpen] = useState(false) // we are keeping this to send to button as on open we have to make button blue\n  const {\n    options,\n    primary,\n    intent,\n    iconButtonDetails,\n    width,\n    theme,\n    tooltipMessage,\n    disabled = false,\n    defaultOpen = 'left',\n    handleClick,\n    tooltipProps = {},\n    id\n  } = defaultProps\n\n  // interface IOptionModel {\n  //   id:string,\n  //   label:string,\n  //   value:string,\n  //   options?:any\n  // }\n  interface IRecursiveProps extends React.HTMLAttributes<HTMLDivElement> {\n    options: any\n    defaultOpen?: 'right' | 'left'\n    childLevel?: string\n    handleOnClick: (id: string) => void\n    id?:any\n  }\n  //   function isInViewport(element) {\n  //     const rect = element.getBoundingClientRect();\n  //     return (\n  //         rect.top >= 0 &&\n  //         rect.left >= 0 &&\n  //         rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&\n  //         rect.right <= (window.innerWidth || document.documentElement.clientWidth)\n  //     );\n  // }\n  const MultiLevelButtonsList = ({\n    options,\n    defaultOpen = 'right',\n    childLevel,\n    handleOnClick,\n    id\n  }: IRecursiveProps) => {\n    const dropdronRef = useRef(null)\n    console.log(defaultOpen)\n    console.log(id)\n\n    return (\n      <StyledDropdownContainer\n        className={\n          childLevel\n          ? defaultOpen == 'right'\n              ? `dropdown-item-right-${childLevel}`\n              : `dropdown-item-left-${childLevel}`\n            : ''\n        }\n        // style={alignmentStyles.container}\n        ref={dropdronRef}\n      >\n        {options.map((item: any) => {\n          if (item?.options?.length) {\n            return (\n              <StyledMultiLevelItem containterIdentifier={`child-${item.id}`}>\n                <StyledDropdownItem>\n                  <div className='hasChildren'>\n                    <div>{item.label}</div>\n                    <i className='icon ui-library-icons icon-angle-right' />\n                  </div>\n                  <MultiLevelButtonsList\n                    options={item.options}\n                    defaultOpen={defaultOpen}\n                    childLevel={`child-${item.id}`}\n                    handleOnClick={handleOnClick}\n                  />\n                </StyledDropdownItem>\n              </StyledMultiLevelItem>\n            )\n          }\n\n          return (\n            <StyledDropdownItem\n              onClick={() => {\n                handleOnClick && handleOnClick(item.id)\n              }}\n              title={item.label}\n            >\n              {item.label}\n            </StyledDropdownItem>\n          )\n        })}\n      </StyledDropdownContainer>\n    )\n  }\n\n  return (\n    <Position type='relative'>\n      <Tooltip\n        message={tooltipMessage}\n        hover\n        hide={!tooltipMessage || menuIsOpen}\n        {...tooltipProps}\n      >\n        <StyledButton\n          primary={primary}\n          width='unset'\n          intent={intent}\n          iconButtonDetails={iconButtonDetails}\n          theme={theme}\n          disabled={disabled}\n          menuIsOpen={menuIsOpen}\n          id={id}\n          onClick={() => {\n            setMenuIsOpen((o) => !o)\n          }}\n          onBlur={() => {\n            setTimeout(() => {\n              setMenuIsOpen(false)\n            }, 350)\n          }}\n          \n        />\n      </Tooltip>\n      <StyledSelectWrapper\n        width={width}\n        onClick={(e: any) => {\n          e.stopPropagation()\n        }}\n      >\n        {menuIsOpen && (\n          <MultiLevelButtonsList\n            options={options}\n            defaultOpen={defaultOpen}\n            handleOnClick={handleClick}\n          />\n        )}\n      </StyledSelectWrapper>\n    </Position>\n  )\n}\n\nexport default React.memo(MultiLevelButtonDropdown)\n"]},"metadata":{},"sourceType":"module"}