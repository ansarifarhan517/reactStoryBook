{"ast":null,"code":"import _objectSpread from \"/Users/farhanansari/Code/ui-library/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/Users/farhanansari/Code/ui-library/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/farhanansari/Code/ui-library/src/components/organisms/ListView/utils/components/HeaderSelectAll.tsx\";\n\nimport React, { useState, useEffect } from 'react';\nimport Position from '../../../../molecules/Position';\nimport Checkbox from '../../../../atoms/Checkbox';\n\nvar defaultCallback = function defaultCallback() {};\n\nvar HeaderSelectAll = function HeaderSelectAll(_ref) {\n  var _ref$rowIdentifier = _ref.rowIdentifier,\n      rowIdentifier = _ref$rowIdentifier === void 0 ? 'id' : _ref$rowIdentifier,\n      _ref$data = _ref.data,\n      data = _ref$data === void 0 ? [] : _ref$data,\n      _ref$loading = _ref.loading,\n      loading = _ref$loading === void 0 ? false : _ref$loading,\n      _ref$isEditMode = _ref.isEditMode,\n      isEditMode = _ref$isEditMode === void 0 ? false : _ref$isEditMode,\n      _ref$selectedRows = _ref.selectedRows,\n      selectedRows = _ref$selectedRows === void 0 ? {} : _ref$selectedRows,\n      _ref$setSelectedRows = _ref.setSelectedRows,\n      setSelectedRows = _ref$setSelectedRows === void 0 ? defaultCallback : _ref$setSelectedRows,\n      _ref$onRowSelect = _ref.onRowSelect,\n      onRowSelect = _ref$onRowSelect === void 0 ? defaultCallback : _ref$onRowSelect,\n      hasSelectAllRows = _ref.hasSelectAllRows,\n      hasRadioSelection = _ref.hasRadioSelection;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      checked = _useState2[0],\n      setChecked = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      byPassUseEffect = _useState4[0],\n      setByPassUseEffect = _useState4[1];\n\n  var selectionCount = React.useMemo(function () {\n    return Object.keys(selectedRows).length;\n  }, [selectedRows]);\n  useEffect(function () {\n    if (byPassUseEffect) {\n      setByPassUseEffect(false);\n      return;\n    }\n\n    setChecked(!!data.length && selectionCount > 0 && !data.some(function (row) {\n      return !row.ignoreSelectAll && !row.hasSelectionDisabled && !selectedRows[row[rowIdentifier]];\n    }));\n  }, [selectedRows, data]);\n\n  var handleChange = function handleChange(e) {\n    var newSelection = _objectSpread({}, selectedRows);\n\n    var checkedValue = e.target.checked;\n    data.forEach(function (row) {\n      if (checkedValue && !row.ignoreSelectAll && !row.hasSelectionDisabled) {\n        newSelection[row[rowIdentifier]] = row;\n      } else {\n        delete newSelection[row[rowIdentifier]];\n      }\n    });\n    setByPassUseEffect(true);\n    setChecked(checkedValue);\n    setSelectedRows(newSelection);\n    onRowSelect(newSelection);\n  };\n\n  return /*#__PURE__*/React.createElement(Position, {\n    display: \"flex\",\n    justifyContent: \"flex-end\",\n    type: \"absolute\",\n    top: \"0\",\n    right: \"0\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 5\n    }\n  }, !hasRadioSelection && hasSelectAllRows && /*#__PURE__*/React.createElement(Checkbox, {\n    id: \"listView-selectAll\",\n    checkboxSize: \"md\",\n    checked: checked,\n    onChange: handleChange,\n    disabled: loading || isEditMode // disabled={loading}\n    // {...getToggleAllRowsSelectedProps()}\n    ,\n    title: undefined,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  }));\n};\n\nHeaderSelectAll.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"HeaderSelectAll\",\n  \"props\": {\n    \"rowIdentifier\": {\n      \"defaultValue\": {\n        \"value\": \"'id'\",\n        \"computed\": false\n      },\n      \"required\": false,\n      \"tsType\": {\n        \"name\": \"string\"\n      },\n      \"description\": \"\"\n    },\n    \"data\": {\n      \"defaultValue\": {\n        \"value\": \"[]\",\n        \"computed\": false\n      },\n      \"required\": false,\n      \"tsType\": {\n        \"name\": \"Array\",\n        \"elements\": [{\n          \"name\": \"IListViewRow\"\n        }],\n        \"raw\": \"IListViewRow[]\"\n      },\n      \"description\": \"\"\n    },\n    \"loading\": {\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      },\n      \"required\": false,\n      \"tsType\": {\n        \"name\": \"boolean\"\n      },\n      \"description\": \"\"\n    },\n    \"isEditMode\": {\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      },\n      \"required\": false,\n      \"tsType\": {\n        \"name\": \"boolean\"\n      },\n      \"description\": \"\"\n    },\n    \"selectedRows\": {\n      \"defaultValue\": {\n        \"value\": \"{}\",\n        \"computed\": false\n      },\n      \"required\": false,\n      \"tsType\": {\n        \"name\": \"ISelectedRows\"\n      },\n      \"description\": \"\"\n    },\n    \"setSelectedRows\": {\n      \"defaultValue\": {\n        \"value\": \"() => {}\",\n        \"computed\": false\n      },\n      \"required\": false,\n      \"tsType\": {\n        \"name\": \"ReactDispatch\",\n        \"raw\": \"React.Dispatch<React.SetStateAction<ISelectedRows>>\",\n        \"elements\": [{\n          \"name\": \"ReactSetStateAction\",\n          \"raw\": \"React.SetStateAction<ISelectedRows>\",\n          \"elements\": [{\n            \"name\": \"ISelectedRows\"\n          }]\n        }]\n      },\n      \"description\": \"\"\n    },\n    \"onRowSelect\": {\n      \"defaultValue\": {\n        \"value\": \"() => {}\",\n        \"computed\": false\n      },\n      \"required\": false\n    },\n    \"hasSelectAllRows\": {\n      \"required\": true,\n      \"tsType\": {\n        \"name\": \"boolean\"\n      },\n      \"description\": \"\"\n    },\n    \"hasRadioSelection\": {\n      \"required\": true,\n      \"tsType\": {\n        \"name\": \"boolean\"\n      },\n      \"description\": \"\"\n    }\n  }\n};\nexport default React.memo(HeaderSelectAll);\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src/components/organisms/ListView/utils/components/HeaderSelectAll.tsx\"] = {\n    name: \"HeaderSelectAll\",\n    docgenInfo: HeaderSelectAll.__docgenInfo,\n    path: \"src/components/organisms/ListView/utils/components/HeaderSelectAll.tsx\"\n  };\n}","map":{"version":3,"sources":["/Users/farhanansari/Code/ui-library/src/components/organisms/ListView/utils/components/HeaderSelectAll.tsx"],"names":["React","useState","useEffect","Position","Checkbox","defaultCallback","HeaderSelectAll","rowIdentifier","data","loading","isEditMode","selectedRows","setSelectedRows","onRowSelect","hasSelectAllRows","hasRadioSelection","checked","setChecked","byPassUseEffect","setByPassUseEffect","selectionCount","useMemo","Object","keys","length","some","row","ignoreSelectAll","hasSelectionDisabled","handleChange","e","newSelection","checkedValue","target","forEach","undefined","memo"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { ISelectedRows, IListViewRow } from '../../interfaces'\nimport Position from '../../../../molecules/Position'\nimport Checkbox from '../../../../atoms/Checkbox'\n\nexport interface IHeaderSelectAllProps {\n  selectedRows: ISelectedRows\n  setSelectedRows: React.Dispatch<React.SetStateAction<ISelectedRows>>\n  data: IListViewRow[]\n  loading: boolean\n  isEditMode: boolean\n  rowIdentifier: string\n  hasSelectAllRows: boolean\n  onRowSelect(selectedRows: ISelectedRows): void\n  hasRadioSelection: boolean\n}\n\nconst defaultCallback = () => {}\nconst HeaderSelectAll = ({\n  rowIdentifier = 'id',\n  data = [],\n  loading = false,\n  isEditMode = false,\n  selectedRows = {},\n  setSelectedRows = defaultCallback,\n  onRowSelect = defaultCallback,\n  hasSelectAllRows,\n  hasRadioSelection\n}: IHeaderSelectAllProps) => {\n  const [checked, setChecked] = useState<boolean>(false)\n  const [byPassUseEffect, setByPassUseEffect] = useState<boolean>(false)\n\n  const selectionCount: number = React.useMemo(\n    () => Object.keys(selectedRows).length,\n    [selectedRows]\n  )\n\n  useEffect(() => {\n    if (byPassUseEffect) {\n      setByPassUseEffect(false)\n      return\n    }\n\n    setChecked(\n      !!data.length &&\n        selectionCount > 0 &&\n        !data.some(\n          (row) =>\n            !row.ignoreSelectAll &&\n            !row.hasSelectionDisabled &&\n            !selectedRows[row[rowIdentifier]]\n        )\n    )\n  }, [selectedRows, data])\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const newSelection = { ...selectedRows }\n    const checkedValue = e.target.checked\n\n    data.forEach((row) => {\n      if (checkedValue && !row.ignoreSelectAll && !row.hasSelectionDisabled) {\n        newSelection[row[rowIdentifier]] = row\n      } else {\n        delete newSelection[row[rowIdentifier]]\n      }\n    })\n    setByPassUseEffect(true)\n    setChecked(checkedValue)\n    setSelectedRows(newSelection)\n    onRowSelect(newSelection)\n  }\n\n  return (\n    <Position\n      display='flex'\n      justifyContent='flex-end'\n      type='absolute'\n      top='0'\n      right='0'\n    >\n      {!hasRadioSelection && hasSelectAllRows && (\n        <Checkbox\n          id='listView-selectAll'\n          checkboxSize='md'\n          checked={checked}\n          onChange={handleChange}\n          disabled={loading || isEditMode}\n          // disabled={loading}\n          // {...getToggleAllRowsSelectedProps()}\n          title={undefined}\n        />\n      )}\n    </Position>\n  )\n}\n\nexport default React.memo(HeaderSelectAll)\n"]},"metadata":{},"sourceType":"module"}