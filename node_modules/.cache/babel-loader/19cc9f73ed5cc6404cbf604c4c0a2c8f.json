{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/atoms/Map/layers/LeafletPolygonPlottingLayer.tsx\";\n\nimport LL from 'leaflet';\nimport React, { Fragment } from 'react';\nimport { FeatureGroup, Polygon, Tooltip } from 'react-leaflet';\nimport { StyledPopUp } from '../StyledMap';\nimport LeafletInfowindow from '../utils/LeafletInfowindow';\n\nvar LeafletPolygonPlottingLayer = function LeafletPolygonPlottingLayer(_ref) {\n  var polygon = _ref.polygon,\n      popupRef = _ref.popupRef,\n      google = _ref.google,\n      popupCustomComponent = _ref.popupCustomComponent;\n  var polyGeoFenceData = polygon.data; // geofence data\n\n  var popupRefType = polygon.popupRef; // type which we are mapping in popupRef object\n\n  var toolTipKey = polygon.toolTipKey; // tooltip key to be shown\n\n  var positionCoordinateKey = polygon.positionCoordinateKey; // in data which key gives coordinates\n\n  var colorKey = polygon.colorKey; // the color of polygon\n\n  var styleKeys = polygon === null || polygon === void 0 ? void 0 : polygon.styleKey; // circle style\n\n  var renderer = LL.canvas({\n    padding: 0.5\n  }); // adding renderer if canvasRenderer present in polygon\n\n  return /*#__PURE__*/React.createElement(FeatureGroup, {\n    color: \"#3388ff\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 5\n    }\n  }, polyGeoFenceData.map(function (option, dataIndex) {\n    var coordinates = option[positionCoordinateKey];\n    var pointPositions = coordinates.map(function (entity) {\n      var pointCoordinate = [entity === null || entity === void 0 ? void 0 : entity.latitude, entity === null || entity === void 0 ? void 0 : entity.longitude];\n      return pointCoordinate;\n    });\n    return /*#__PURE__*/React.createElement(Fragment, {\n      key: dataIndex,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Polygon, {\n      color: colorKey ? option[colorKey] : '#3388ff',\n      positions: pointPositions,\n      stroke: true,\n      weight: 1.5,\n      riseOnHover: true,\n      fillColor: (styleKeys === null || styleKeys === void 0 ? void 0 : styleKeys.fillColor) && option[styleKeys === null || styleKeys === void 0 ? void 0 : styleKeys.fillColor] ? option[styleKeys === null || styleKeys === void 0 ? void 0 : styleKeys.fillColor] : '',\n      fillOpacity: (styleKeys === null || styleKeys === void 0 ? void 0 : styleKeys.fillOpacity) && option[styleKeys === null || styleKeys === void 0 ? void 0 : styleKeys.fillOpacity] ? option[styleKeys === null || styleKeys === void 0 ? void 0 : styleKeys.fillOpacity] : 0.2,\n      smoothFactor: (styleKeys === null || styleKeys === void 0 ? void 0 : styleKeys.smoothFactor) && option[styleKeys === null || styleKeys === void 0 ? void 0 : styleKeys.smoothFactor] ? option[styleKeys === null || styleKeys === void 0 ? void 0 : styleKeys.smoothFactor] : 1,\n      renderer: (option === null || option === void 0 ? void 0 : option.canvasRenderer) ? renderer : null,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Tooltip, {\n      sticky: true,\n      direction: \"auto\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }\n    }, option[toolTipKey])), popupRef && popupRefType && /*#__PURE__*/React.createElement(StyledPopUp, {\n      keepInView: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(LeafletInfowindow, {\n      structures: popupRef,\n      popupRef: popupRefType,\n      data: option,\n      google: google,\n      popupCustomComponent: popupCustomComponent,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 19\n      }\n    }))));\n  }));\n};\n\nexport default LeafletPolygonPlottingLayer;","map":{"version":3,"sources":["/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/atoms/Map/layers/LeafletPolygonPlottingLayer.tsx"],"names":["LL","React","Fragment","FeatureGroup","Polygon","Tooltip","StyledPopUp","LeafletInfowindow","LeafletPolygonPlottingLayer","polygon","popupRef","google","popupCustomComponent","polyGeoFenceData","data","popupRefType","toolTipKey","positionCoordinateKey","colorKey","styleKeys","styleKey","renderer","canvas","padding","map","option","dataIndex","coordinates","pointPositions","entity","pointCoordinate","latitude","longitude","fillColor","fillOpacity","smoothFactor","canvasRenderer"],"mappings":"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","sourcesContent":["import LL from 'leaflet'\nimport React, { Fragment } from 'react'\nimport { FeatureGroup, Polygon, Tooltip } from 'react-leaflet'\nimport { StyledPopUp } from '../StyledMap'\nimport LeafletInfowindow from '../utils/LeafletInfowindow'\nimport { ILeafletShapeLayer } from './LeafletPolygonLayer'\n\nconst LeafletPolygonPlottingLayer = ({\n  polygon,\n  popupRef,\n  google,\n  popupCustomComponent\n}: ILeafletShapeLayer) => {\n  const polyGeoFenceData = polygon.data // geofence data\n  const popupRefType = polygon.popupRef // type which we are mapping in popupRef object\n  const toolTipKey = polygon.toolTipKey // tooltip key to be shown\n  const positionCoordinateKey = polygon.positionCoordinateKey // in data which key gives coordinates\n  const colorKey = polygon.colorKey // the color of polygon\n  const styleKeys = polygon?.styleKey // circle style\n  const renderer: any = LL.canvas({ padding: 0.5 }) // adding renderer if canvasRenderer present in polygon\n  return (\n    <FeatureGroup color='#3388ff'>\n      {polyGeoFenceData.map((option: any, dataIndex: number) => {\n        const coordinates = option[positionCoordinateKey]\n        const pointPositions = coordinates.map((entity: any) => {\n          const pointCoordinate = [entity?.latitude, entity?.longitude]\n          return pointCoordinate\n        })\n\n        return (\n          <Fragment key={dataIndex}>\n            <Polygon\n              color={colorKey ? option[colorKey] : '#3388ff'}\n              positions={pointPositions}\n              stroke\n              weight={1.5}\n              riseOnHover\n              fillColor={\n                styleKeys?.fillColor && option[styleKeys?.fillColor]\n                  ? option[styleKeys?.fillColor]\n                  : ''\n              }\n              fillOpacity={\n                styleKeys?.fillOpacity && option[styleKeys?.fillOpacity]\n                  ? option[styleKeys?.fillOpacity]\n                  : 0.2\n              }\n              smoothFactor={\n                styleKeys?.smoothFactor && option[styleKeys?.smoothFactor]\n                  ? option[styleKeys?.smoothFactor]\n                  : 1\n              }\n              renderer={option?.canvasRenderer ? renderer : null}\n            >\n              <Tooltip sticky direction='auto'>\n                <span>{option[toolTipKey]}</span>\n              </Tooltip>\n              {/* Popup which opens up on marker click */}\n              {popupRef && popupRefType && (\n                <StyledPopUp keepInView>\n                  <LeafletInfowindow\n                    structures={popupRef}\n                    popupRef={popupRefType}\n                    data={option}\n                    google={google}\n                    popupCustomComponent={popupCustomComponent}\n                  />\n                </StyledPopUp>\n              )}\n            </Polygon>\n          </Fragment>\n        )\n      })}\n    </FeatureGroup>\n  )\n}\n\nexport default LeafletPolygonPlottingLayer\n"]},"metadata":{},"sourceType":"module"}