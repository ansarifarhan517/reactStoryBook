{"ast":null,"code":"import _defineProperty from \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nvar _parameters;\n\n/* eslint-disable */\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource; // @ts-ignore\n\n\nvar addSourceDecorator = require(\"@storybook/source-loader/preview\").addSource; // @ts-ignore\n\n\nvar __SOURCE_PREFIX__ = \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/molecules/DropDown\"; // @ts-ignore\n\nvar __STORY__ = \"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/molecules/DropDown\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"\\\\n\\\\n// @ts-nocheck\\\\n// @ts-ignore\\\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\\\n// @ts-ignore\\\\nvar addSourceDecorator = require(\\\\\\\"@storybook/source-loader/preview\\\\\\\").addSource;\\\\n// @ts-ignore\\\\nvar __SOURCE_PREFIX__ = \\\\\\\"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/molecules/DropDown\\\\\\\";\\\\n// @ts-ignore\\\\nvar __STORY__ = \\\\\\\"import { action } from '@storybook/addon-actions'\\\\\\\\nimport { boolean, object, text } from '@storybook/addon-knobs'\\\\\\\\nimport React from 'react'\\\\\\\\nimport DropDown from '.'\\\\\\\\nimport { path } from '..'\\\\\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\\\\\nimport Box from '../../atoms/Box'\\\\\\\\nimport { tSelectVariant } from './interface'\\\\\\\\n// import { InputActionMeta } from 'react-select'\\\\\\\\n// import AsyncSelect from 'react-select/async'\\\\\\\\nimport { OptionsType } from 'react-select'\\\\\\\\nimport AsyncFormSelect from './AsyncFormSelect'\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/DropDown`,\\\\\\\\n  component: DropDown\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst options = [\\\\\\\\n  {\\\\\\\\n    value: 'emailVerificationPending',\\\\\\\\n    label: 'Email Verification Pending Shipper',\\\\\\\\n    title: 'Email Verification Pending Shipper'\\\\\\\\n  },\\\\\\\\n  { value: 'allShippers', label: 'All Shippers', title: 'All Shippers' },\\\\\\\\n  {\\\\\\\\n    value: 'approvalPendingShippers',\\\\\\\\n    label: 'Approval Pending Shippers',\\\\\\\\n    title: 'Approval Pending Shippers'\\\\\\\\n  }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst ListViewOption = [\\\\\\\\n  { value: 'Available', label: 'Available', title: 'Available' },\\\\\\\\n  { value: 'Dispatched', label: 'Dispatched', title: 'Dispatched' },\\\\\\\\n  { value: 'Inactive', label: 'Inactive', title: 'Inactive' }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst FormSelectOption = [\\\\\\\\n  {\\\\\\\\n    value: 'Credit',\\\\\\\\n    label: 'Credit',\\\\\\\\n    title: 'Credit',\\\\\\\\n    description:\\\\\\\\n      'Credit transaction will add to the outstanding amount of (Delivery Associate)'\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    value: 'Debit',\\\\\\\\n    label: 'Debit',\\\\\\\\n    title: 'Debit',\\\\\\\\n    description:\\\\\\\\n      'Credit transaction will deduct from the outstanding amount of (Delivery Associate)'\\\\\\\\n  }\\\\\\\\n]\\\\\\\\nexport const DefaultSelect = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='6em' bgColor='grey.50'>\\\\\\\\n        <DropDown\\\\\\\\n          variant={text('variant', 'default-select') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', options)}\\\\\\\\n          label={text('label', 'Name')}\\\\\\\\n          required={boolean('required', true)}\\\\\\\\n          loading={boolean('loading', true)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          error={boolean('error', false)}\\\\\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\\\\\n          placeholder={text('placeholder', 'Select')}\\\\\\\\n          value={text('value', 'chocolate')}\\\\\\\\n          width={text('width', '300px')}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const FormSelectPlayground = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='6em' bgColor='grey.50'>\\\\\\\\n        <DropDown\\\\\\\\n          variant={text('variant', 'form-select') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', FormSelectOption)}\\\\\\\\n          label={text('label', 'Name')}\\\\\\\\n          required={boolean('required', true)}\\\\\\\\n          loading={boolean('loading', false)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          error={boolean('error', false)}\\\\\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\\\\\n          placeholder={text('placeholder', 'Select')}\\\\\\\\n          value={text('value', 'emailVerificationPending')}\\\\\\\\n          width={text('width', '300px')}\\\\\\\\n          onMenuOpen={action('Menu Open')}\\\\\\\\n          onMenuClose={action('Menu Close')}\\\\\\\\n          showDescription={boolean('Show Description', true)}\\\\\\\\n          tooltipMessage={text('tooltipMessage', 'i am form select tooltip')}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\nexport const FormSelectDeferred = () => {\\\\\\\\n  const [isLoading, setIsLoading] = React.useState<boolean>(false)\\\\\\\\n  const [menuIsOpen, setMenuIsOpen] = React.useState<boolean | undefined>(\\\\\\\\n    undefined\\\\\\\\n  )\\\\\\\\n  const [dropdownOptions, setDropdownOptions] = React.useState<\\\\\\\\n    { label: string; value: string }[]\\\\\\\\n  >([])\\\\\\\\n\\\\\\\\n  const [selectedValue, setSelectedValue] = React.useState<string>()\\\\\\\\n\\\\\\\\n  const handleMenuOpen = () => {\\\\\\\\n    action('Menu Opened!')()\\\\\\\\n    // setMenuIsOpen(true)\\\\\\\\n    if (dropdownOptions.length === 0) {\\\\\\\\n      setIsLoading(true)\\\\\\\\n      setTimeout(() => {\\\\\\\\n        setDropdownOptions(options)\\\\\\\\n        setIsLoading(false)\\\\\\\\n        setMenuIsOpen(true)\\\\\\\\n      }, 2000)\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  const handleMenuClose = () => {\\\\\\\\n    action('Menu Closed!')()\\\\\\\\n    setMenuIsOpen(undefined)\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  const handleChange = (value?: string) => {\\\\\\\\n    action('Value selected')(value)\\\\\\\\n    setSelectedValue(value)\\\\\\\\n    setMenuIsOpen(undefined)\\\\\\\\n  }\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box py='3em' bgColor='grey.50'>\\\\\\\\n        <DropDown\\\\\\\\n          variant={text('variant', 'form-select') as tSelectVariant}\\\\\\\\n          optionList={dropdownOptions}\\\\\\\\n          label={text('label', 'Name')}\\\\\\\\n          required={boolean('required', true)}\\\\\\\\n          loading={isLoading}\\\\\\\\n          onChange={handleChange}\\\\\\\\n          error={boolean('error', false)}\\\\\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\\\\\n          placeholder={text('placeholder', 'Select')}\\\\\\\\n          value={selectedValue}\\\\\\\\n          isMenuOpen={menuIsOpen}\\\\\\\\n          width={text('width', '300px')}\\\\\\\\n          onMenuOpen={handleMenuOpen}\\\\\\\\n          onMenuClose={handleMenuClose}\\\\\\\\n          onInputChange={action('onInputChange')}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n          limitOptionsList={50}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const FormSelectAsync = () => {\\\\\\\\n  // const [menuIsOpen, setMenuIsOpen] = React.useState<boolean>()\\\\\\\\n  const [options] = React.useState<OptionsType<any>>([])\\\\\\\\n  const handleLoadOptions = React.useCallback(\\\\\\\\n    (inputValue: string, callback: (options: OptionsType<any>) => void) => {\\\\\\\\n      console.log(inputValue)\\\\\\\\n      if (inputValue.length >= 3) {\\\\\\\\n        const newOptions = [\\\\\\\\n          {\\\\\\\\n            label: inputValue + ' - Option 1',\\\\\\\\n            value: inputValue + '1',\\\\\\\\n            description: inputValue + ' - Option 1'\\\\\\\\n          },\\\\\\\\n          {\\\\\\\\n            label: inputValue + ' - Option 2',\\\\\\\\n            value: inputValue + '2',\\\\\\\\n            description: inputValue + ' - Option 2'\\\\\\\\n          }\\\\\\\\n        ]\\\\\\\\n        // setOptions(newOptions)\\\\\\\\n        callback(newOptions)\\\\\\\\n      } else {\\\\\\\\n        callback(options)\\\\\\\\n      }\\\\\\\\n    },\\\\\\\\n    []\\\\\\\\n  )\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box py='3em' bgColor='grey.50'>\\\\\\\\n        <div style={{ width: '350px' }}>\\\\\\\\n          <AsyncFormSelect\\\\\\\\n            loadOptions={handleLoadOptions}\\\\\\\\n            cacheOptions\\\\\\\\n            label={text('label', 'Postal Code')}\\\\\\\\n            required={boolean('required', false)}\\\\\\\\n            error={boolean('error', false)}\\\\\\\\n            errorMessage={text('errorMessage', 'Postal Code is required')}\\\\\\\\n            disabled={boolean('disabled', false)}\\\\\\\\n            showDescription={boolean('showDescription', false)}\\\\\\\\n          />\\\\\\\\n        </div>\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const ListView = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='6em' bgColor='grey.50'>\\\\\\\\n        <DropDown\\\\\\\\n          variant={text('variant', 'list-view') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', ListViewOption)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          width={text('width', '120px')}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n          limitOptionsList={50}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\nexport const EditedListView = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='6em' bgColor='grey.50'>\\\\\\\\n        <DropDown\\\\\\\\n          variant={text('variant', 'inline-edit') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', ListViewOption)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          width={text('width', '100%')}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n          limitOptionsList={50}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\nexport const DashedDropdown = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='6em' bgColor='grey.50'>\\\\\\\\n        <DropDown\\\\\\\\n          variant={text('variant', 'dashed-dropdown') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', ListViewOption)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          width={text('width', '100%')}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n          value={text('value', '') as tSelectVariant}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\";\\\\n// @ts-ignore\\\\nvar __ADDS_MAP__ = {};\\\\n// @ts-ignore\\\\nvar __MAIN_FILE_LOCATION__ = \\\\\\\"/DropDown.stories.tsx\\\\\\\";\\\\n// @ts-ignore\\\\nvar __MODULE_DEPENDENCIES__ = [];\\\\n// @ts-ignore\\\\nvar __LOCAL_DEPENDENCIES__ = {};\\\\n// @ts-ignore\\\\nvar __IDS_TO_FRAMEWORKS__ = {};\\\\n        \\\\nimport { action } from '@storybook/addon-actions'\\\\nimport { boolean, object, text } from '@storybook/addon-knobs'\\\\nimport React from 'react'\\\\nimport DropDown from '.'\\\\nimport { path } from '..'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport Box from '../../atoms/Box'\\\\nimport { tSelectVariant } from './interface'\\\\n// import { InputActionMeta } from 'react-select'\\\\n// import AsyncSelect from 'react-select/async'\\\\nimport { OptionsType } from 'react-select'\\\\nimport AsyncFormSelect from './AsyncFormSelect'\\\\n\\\\nexport default {parameters: {\\\\\\\"storySource\\\\\\\":{\\\\\\\"source\\\\\\\":\\\\\\\"import { action } from '@storybook/addon-actions'\\\\\\\\nimport { boolean, object, text } from '@storybook/addon-knobs'\\\\\\\\nimport React from 'react'\\\\\\\\nimport DropDown from '.'\\\\\\\\nimport { path } from '..'\\\\\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\\\\\nimport Box from '../../atoms/Box'\\\\\\\\nimport { tSelectVariant } from './interface'\\\\\\\\n// import { InputActionMeta } from 'react-select'\\\\\\\\n// import AsyncSelect from 'react-select/async'\\\\\\\\nimport { OptionsType } from 'react-select'\\\\\\\\nimport AsyncFormSelect from './AsyncFormSelect'\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/DropDown`,\\\\\\\\n  component: DropDown\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst options = [\\\\\\\\n  {\\\\\\\\n    value: 'emailVerificationPending',\\\\\\\\n    label: 'Email Verification Pending Shipper',\\\\\\\\n    title: 'Email Verification Pending Shipper'\\\\\\\\n  },\\\\\\\\n  { value: 'allShippers', label: 'All Shippers', title: 'All Shippers' },\\\\\\\\n  {\\\\\\\\n    value: 'approvalPendingShippers',\\\\\\\\n    label: 'Approval Pending Shippers',\\\\\\\\n    title: 'Approval Pending Shippers'\\\\\\\\n  }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst ListViewOption = [\\\\\\\\n  { value: 'Available', label: 'Available', title: 'Available' },\\\\\\\\n  { value: 'Dispatched', label: 'Dispatched', title: 'Dispatched' },\\\\\\\\n  { value: 'Inactive', label: 'Inactive', title: 'Inactive' }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst FormSelectOption = [\\\\\\\\n  {\\\\\\\\n    value: 'Credit',\\\\\\\\n    label: 'Credit',\\\\\\\\n    title: 'Credit',\\\\\\\\n    description:\\\\\\\\n      'Credit transaction will add to the outstanding amount of (Delivery Associate)'\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    value: 'Debit',\\\\\\\\n    label: 'Debit',\\\\\\\\n    title: 'Debit',\\\\\\\\n    description:\\\\\\\\n      'Credit transaction will deduct from the outstanding amount of (Delivery Associate)'\\\\\\\\n  }\\\\\\\\n]\\\\\\\\nexport const DefaultSelect = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='6em' bgColor='grey.50'>\\\\\\\\n        <DropDown\\\\\\\\n          variant={text('variant', 'default-select') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', options)}\\\\\\\\n          label={text('label', 'Name')}\\\\\\\\n          required={boolean('required', true)}\\\\\\\\n          loading={boolean('loading', true)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          error={boolean('error', false)}\\\\\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\\\\\n          placeholder={text('placeholder', 'Select')}\\\\\\\\n          value={text('value', 'chocolate')}\\\\\\\\n          width={text('width', '300px')}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const FormSelectPlayground = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='6em' bgColor='grey.50'>\\\\\\\\n        <DropDown\\\\\\\\n          variant={text('variant', 'form-select') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', FormSelectOption)}\\\\\\\\n          label={text('label', 'Name')}\\\\\\\\n          required={boolean('required', true)}\\\\\\\\n          loading={boolean('loading', false)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          error={boolean('error', false)}\\\\\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\\\\\n          placeholder={text('placeholder', 'Select')}\\\\\\\\n          value={text('value', 'emailVerificationPending')}\\\\\\\\n          width={text('width', '300px')}\\\\\\\\n          onMenuOpen={action('Menu Open')}\\\\\\\\n          onMenuClose={action('Menu Close')}\\\\\\\\n          showDescription={boolean('Show Description', true)}\\\\\\\\n          tooltipMessage={text('tooltipMessage', 'i am form select tooltip')}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\nexport const FormSelectDeferred = () => {\\\\\\\\n  const [isLoading, setIsLoading] = React.useState<boolean>(false)\\\\\\\\n  const [menuIsOpen, setMenuIsOpen] = React.useState<boolean | undefined>(\\\\\\\\n    undefined\\\\\\\\n  )\\\\\\\\n  const [dropdownOptions, setDropdownOptions] = React.useState<\\\\\\\\n    { label: string; value: string }[]\\\\\\\\n  >([])\\\\\\\\n\\\\\\\\n  const [selectedValue, setSelectedValue] = React.useState<string>()\\\\\\\\n\\\\\\\\n  const handleMenuOpen = () => {\\\\\\\\n    action('Menu Opened!')()\\\\\\\\n    // setMenuIsOpen(true)\\\\\\\\n    if (dropdownOptions.length === 0) {\\\\\\\\n      setIsLoading(true)\\\\\\\\n      setTimeout(() => {\\\\\\\\n        setDropdownOptions(options)\\\\\\\\n        setIsLoading(false)\\\\\\\\n        setMenuIsOpen(true)\\\\\\\\n      }, 2000)\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  const handleMenuClose = () => {\\\\\\\\n    action('Menu Closed!')()\\\\\\\\n    setMenuIsOpen(undefined)\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  const handleChange = (value?: string) => {\\\\\\\\n    action('Value selected')(value)\\\\\\\\n    setSelectedValue(value)\\\\\\\\n    setMenuIsOpen(undefined)\\\\\\\\n  }\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box py='3em' bgColor='grey.50'>\\\\\\\\n        <DropDown\\\\\\\\n          variant={text('variant', 'form-select') as tSelectVariant}\\\\\\\\n          optionList={dropdownOptions}\\\\\\\\n          label={text('label', 'Name')}\\\\\\\\n          required={boolean('required', true)}\\\\\\\\n          loading={isLoading}\\\\\\\\n          onChange={handleChange}\\\\\\\\n          error={boolean('error', false)}\\\\\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\\\\\n          placeholder={text('placeholder', 'Select')}\\\\\\\\n          value={selectedValue}\\\\\\\\n          isMenuOpen={menuIsOpen}\\\\\\\\n          width={text('width', '300px')}\\\\\\\\n          onMenuOpen={handleMenuOpen}\\\\\\\\n          onMenuClose={handleMenuClose}\\\\\\\\n          onInputChange={action('onInputChange')}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n          limitOptionsList={50}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const FormSelectAsync = () => {\\\\\\\\n  // const [menuIsOpen, setMenuIsOpen] = React.useState<boolean>()\\\\\\\\n  const [options] = React.useState<OptionsType<any>>([])\\\\\\\\n  const handleLoadOptions = React.useCallback(\\\\\\\\n    (inputValue: string, callback: (options: OptionsType<any>) => void) => {\\\\\\\\n      console.log(inputValue)\\\\\\\\n      if (inputValue.length >= 3) {\\\\\\\\n        const newOptions = [\\\\\\\\n          {\\\\\\\\n            label: inputValue + ' - Option 1',\\\\\\\\n            value: inputValue + '1',\\\\\\\\n            description: inputValue + ' - Option 1'\\\\\\\\n          },\\\\\\\\n          {\\\\\\\\n            label: inputValue + ' - Option 2',\\\\\\\\n            value: inputValue + '2',\\\\\\\\n            description: inputValue + ' - Option 2'\\\\\\\\n          }\\\\\\\\n        ]\\\\\\\\n        // setOptions(newOptions)\\\\\\\\n        callback(newOptions)\\\\\\\\n      } else {\\\\\\\\n        callback(options)\\\\\\\\n      }\\\\\\\\n    },\\\\\\\\n    []\\\\\\\\n  )\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box py='3em' bgColor='grey.50'>\\\\\\\\n        <div style={{ width: '350px' }}>\\\\\\\\n          <AsyncFormSelect\\\\\\\\n            loadOptions={handleLoadOptions}\\\\\\\\n            cacheOptions\\\\\\\\n            label={text('label', 'Postal Code')}\\\\\\\\n            required={boolean('required', false)}\\\\\\\\n            error={boolean('error', false)}\\\\\\\\n            errorMessage={text('errorMessage', 'Postal Code is required')}\\\\\\\\n            disabled={boolean('disabled', false)}\\\\\\\\n            showDescription={boolean('showDescription', false)}\\\\\\\\n          />\\\\\\\\n        </div>\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const ListView = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='6em' bgColor='grey.50'>\\\\\\\\n        <DropDown\\\\\\\\n          variant={text('variant', 'list-view') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', ListViewOption)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          width={text('width', '120px')}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n          limitOptionsList={50}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\nexport const EditedListView = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='6em' bgColor='grey.50'>\\\\\\\\n        <DropDown\\\\\\\\n          variant={text('variant', 'inline-edit') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', ListViewOption)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          width={text('width', '100%')}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n          limitOptionsList={50}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\nexport const DashedDropdown = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='6em' bgColor='grey.50'>\\\\\\\\n        <DropDown\\\\\\\\n          variant={text('variant', 'dashed-dropdown') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', ListViewOption)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          width={text('width', '100%')}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n          value={text('value', '') as tSelectVariant}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\",\\\\\\\"locationsMap\\\\\\\":{}},},\\\\n  title: `${path}/DropDown`,\\\\n  component: DropDown\\\\n}\\\\n\\\\nconst options = [\\\\n  {\\\\n    value: 'emailVerificationPending',\\\\n    label: 'Email Verification Pending Shipper',\\\\n    title: 'Email Verification Pending Shipper'\\\\n  },\\\\n  { value: 'allShippers', label: 'All Shippers', title: 'All Shippers' },\\\\n  {\\\\n    value: 'approvalPendingShippers',\\\\n    label: 'Approval Pending Shippers',\\\\n    title: 'Approval Pending Shippers'\\\\n  }\\\\n]\\\\n\\\\nconst ListViewOption = [\\\\n  { value: 'Available', label: 'Available', title: 'Available' },\\\\n  { value: 'Dispatched', label: 'Dispatched', title: 'Dispatched' },\\\\n  { value: 'Inactive', label: 'Inactive', title: 'Inactive' }\\\\n]\\\\n\\\\nconst FormSelectOption = [\\\\n  {\\\\n    value: 'Credit',\\\\n    label: 'Credit',\\\\n    title: 'Credit',\\\\n    description:\\\\n      'Credit transaction will add to the outstanding amount of (Delivery Associate)'\\\\n  },\\\\n  {\\\\n    value: 'Debit',\\\\n    label: 'Debit',\\\\n    title: 'Debit',\\\\n    description:\\\\n      'Credit transaction will deduct from the outstanding amount of (Delivery Associate)'\\\\n  }\\\\n]\\\\nexport const DefaultSelect = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'default-select') as tSelectVariant}\\\\n          optionList={object('optionList', options)}\\\\n          label={text('label', 'Name')}\\\\n          required={boolean('required', true)}\\\\n          loading={boolean('loading', true)}\\\\n          onChange={action('Value selected')}\\\\n          error={boolean('error', false)}\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\n          placeholder={text('placeholder', 'Select')}\\\\n          value={text('value', 'chocolate')}\\\\n          width={text('width', '300px')}\\\\n          disabled={boolean('disabled', false)}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const FormSelectPlayground = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'form-select') as tSelectVariant}\\\\n          optionList={object('optionList', FormSelectOption)}\\\\n          label={text('label', 'Name')}\\\\n          required={boolean('required', true)}\\\\n          loading={boolean('loading', false)}\\\\n          onChange={action('Value selected')}\\\\n          error={boolean('error', false)}\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\n          placeholder={text('placeholder', 'Select')}\\\\n          value={text('value', 'emailVerificationPending')}\\\\n          width={text('width', '300px')}\\\\n          onMenuOpen={action('Menu Open')}\\\\n          onMenuClose={action('Menu Close')}\\\\n          showDescription={boolean('Show Description', true)}\\\\n          tooltipMessage={text('tooltipMessage', 'i am form select tooltip')}\\\\n          disabled={boolean('disabled', false)}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\nexport const FormSelectDeferred = addSourceDecorator(() => {\\\\n  const [isLoading, setIsLoading] = React.useState<boolean>(false)\\\\n  const [menuIsOpen, setMenuIsOpen] = React.useState<boolean | undefined>(\\\\n    undefined\\\\n  )\\\\n  const [dropdownOptions, setDropdownOptions] = React.useState<\\\\n    { label: string; value: string }[]\\\\n  >([])\\\\n\\\\n  const [selectedValue, setSelectedValue] = React.useState<string>()\\\\n\\\\n  const handleMenuOpen = () => {\\\\n    action('Menu Opened!')()\\\\n    // setMenuIsOpen(true)\\\\n    if (dropdownOptions.length === 0) {\\\\n      setIsLoading(true)\\\\n      setTimeout(() => {\\\\n        setDropdownOptions(options)\\\\n        setIsLoading(false)\\\\n        setMenuIsOpen(true)\\\\n      }, 2000)\\\\n    }\\\\n  }\\\\n\\\\n  const handleMenuClose = () => {\\\\n    action('Menu Closed!')()\\\\n    setMenuIsOpen(undefined)\\\\n  }\\\\n\\\\n  const handleChange = (value?: string) => {\\\\n    action('Value selected')(value)\\\\n    setSelectedValue(value)\\\\n    setMenuIsOpen(undefined)\\\\n  }\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box py='3em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'form-select') as tSelectVariant}\\\\n          optionList={dropdownOptions}\\\\n          label={text('label', 'Name')}\\\\n          required={boolean('required', true)}\\\\n          loading={isLoading}\\\\n          onChange={handleChange}\\\\n          error={boolean('error', false)}\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\n          placeholder={text('placeholder', 'Select')}\\\\n          value={selectedValue}\\\\n          isMenuOpen={menuIsOpen}\\\\n          width={text('width', '300px')}\\\\n          onMenuOpen={handleMenuOpen}\\\\n          onMenuClose={handleMenuClose}\\\\n          onInputChange={action('onInputChange')}\\\\n          disabled={boolean('disabled', false)}\\\\n          limitOptionsList={50}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const FormSelectAsync = addSourceDecorator(() => {\\\\n  // const [menuIsOpen, setMenuIsOpen] = React.useState<boolean>()\\\\n  const [options] = React.useState<OptionsType<any>>([])\\\\n  const handleLoadOptions = React.useCallback(\\\\n    (inputValue: string, callback: (options: OptionsType<any>) => void) => {\\\\n      console.log(inputValue)\\\\n      if (inputValue.length >= 3) {\\\\n        const newOptions = [\\\\n          {\\\\n            label: inputValue + ' - Option 1',\\\\n            value: inputValue + '1',\\\\n            description: inputValue + ' - Option 1'\\\\n          },\\\\n          {\\\\n            label: inputValue + ' - Option 2',\\\\n            value: inputValue + '2',\\\\n            description: inputValue + ' - Option 2'\\\\n          }\\\\n        ]\\\\n        // setOptions(newOptions)\\\\n        callback(newOptions)\\\\n      } else {\\\\n        callback(options)\\\\n      }\\\\n    },\\\\n    []\\\\n  )\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box py='3em' bgColor='grey.50'>\\\\n        <div style={{ width: '350px' }}>\\\\n          <AsyncFormSelect\\\\n            loadOptions={handleLoadOptions}\\\\n            cacheOptions\\\\n            label={text('label', 'Postal Code')}\\\\n            required={boolean('required', false)}\\\\n            error={boolean('error', false)}\\\\n            errorMessage={text('errorMessage', 'Postal Code is required')}\\\\n            disabled={boolean('disabled', false)}\\\\n            showDescription={boolean('showDescription', false)}\\\\n          />\\\\n        </div>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const ListView = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'list-view') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          onChange={action('Value selected')}\\\\n          width={text('width', '120px')}\\\\n          disabled={boolean('disabled', false)}\\\\n          limitOptionsList={50}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\nexport const EditedListView = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'inline-edit') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          onChange={action('Value selected')}\\\\n          width={text('width', '100%')}\\\\n          disabled={boolean('disabled', false)}\\\\n          limitOptionsList={50}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\nexport const DashedDropdown = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'dashed-dropdown') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          onChange={action('Value selected')}\\\\n          width={text('width', '100%')}\\\\n          disabled={boolean('disabled', false)}\\\\n          value={text('value', '') as tSelectVariant}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/DropDown.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\n\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/molecules/DropDown\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"import { action } from '@storybook/addon-actions'\\\\nimport { boolean, object, text } from '@storybook/addon-knobs'\\\\nimport React from 'react'\\\\nimport DropDown from '.'\\\\nimport { path } from '..'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport Box from '../../atoms/Box'\\\\nimport { tSelectVariant } from './interface'\\\\n// import { InputActionMeta } from 'react-select'\\\\n// import AsyncSelect from 'react-select/async'\\\\nimport { OptionsType } from 'react-select'\\\\nimport AsyncFormSelect from './AsyncFormSelect'\\\\n\\\\nexport default {\\\\n  title: `${path}/DropDown`,\\\\n  component: DropDown\\\\n}\\\\n\\\\nconst options = [\\\\n  {\\\\n    value: 'emailVerificationPending',\\\\n    label: 'Email Verification Pending Shipper',\\\\n    title: 'Email Verification Pending Shipper'\\\\n  },\\\\n  { value: 'allShippers', label: 'All Shippers', title: 'All Shippers' },\\\\n  {\\\\n    value: 'approvalPendingShippers',\\\\n    label: 'Approval Pending Shippers',\\\\n    title: 'Approval Pending Shippers'\\\\n  }\\\\n]\\\\n\\\\nconst ListViewOption = [\\\\n  { value: 'Available', label: 'Available', title: 'Available' },\\\\n  { value: 'Dispatched', label: 'Dispatched', title: 'Dispatched' },\\\\n  { value: 'Inactive', label: 'Inactive', title: 'Inactive' }\\\\n]\\\\n\\\\nconst FormSelectOption = [\\\\n  {\\\\n    value: 'Credit',\\\\n    label: 'Credit',\\\\n    title: 'Credit',\\\\n    description:\\\\n      'Credit transaction will add to the outstanding amount of (Delivery Associate)'\\\\n  },\\\\n  {\\\\n    value: 'Debit',\\\\n    label: 'Debit',\\\\n    title: 'Debit',\\\\n    description:\\\\n      'Credit transaction will deduct from the outstanding amount of (Delivery Associate)'\\\\n  }\\\\n]\\\\nexport const DefaultSelect = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'default-select') as tSelectVariant}\\\\n          optionList={object('optionList', options)}\\\\n          label={text('label', 'Name')}\\\\n          required={boolean('required', true)}\\\\n          loading={boolean('loading', true)}\\\\n          onChange={action('Value selected')}\\\\n          error={boolean('error', false)}\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\n          placeholder={text('placeholder', 'Select')}\\\\n          value={text('value', 'chocolate')}\\\\n          width={text('width', '300px')}\\\\n          disabled={boolean('disabled', false)}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const FormSelectPlayground = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'form-select') as tSelectVariant}\\\\n          optionList={object('optionList', FormSelectOption)}\\\\n          label={text('label', 'Name')}\\\\n          required={boolean('required', true)}\\\\n          loading={boolean('loading', false)}\\\\n          onChange={action('Value selected')}\\\\n          error={boolean('error', false)}\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\n          placeholder={text('placeholder', 'Select')}\\\\n          value={text('value', 'emailVerificationPending')}\\\\n          width={text('width', '300px')}\\\\n          onMenuOpen={action('Menu Open')}\\\\n          onMenuClose={action('Menu Close')}\\\\n          showDescription={boolean('Show Description', true)}\\\\n          tooltipMessage={text('tooltipMessage', 'i am form select tooltip')}\\\\n          disabled={boolean('disabled', false)}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\nexport const FormSelectDeferred = () => {\\\\n  const [isLoading, setIsLoading] = React.useState<boolean>(false)\\\\n  const [menuIsOpen, setMenuIsOpen] = React.useState<boolean | undefined>(\\\\n    undefined\\\\n  )\\\\n  const [dropdownOptions, setDropdownOptions] = React.useState<\\\\n    { label: string; value: string }[]\\\\n  >([])\\\\n\\\\n  const [selectedValue, setSelectedValue] = React.useState<string>()\\\\n\\\\n  const handleMenuOpen = () => {\\\\n    action('Menu Opened!')()\\\\n    // setMenuIsOpen(true)\\\\n    if (dropdownOptions.length === 0) {\\\\n      setIsLoading(true)\\\\n      setTimeout(() => {\\\\n        setDropdownOptions(options)\\\\n        setIsLoading(false)\\\\n        setMenuIsOpen(true)\\\\n      }, 2000)\\\\n    }\\\\n  }\\\\n\\\\n  const handleMenuClose = () => {\\\\n    action('Menu Closed!')()\\\\n    setMenuIsOpen(undefined)\\\\n  }\\\\n\\\\n  const handleChange = (value?: string) => {\\\\n    action('Value selected')(value)\\\\n    setSelectedValue(value)\\\\n    setMenuIsOpen(undefined)\\\\n  }\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box py='3em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'form-select') as tSelectVariant}\\\\n          optionList={dropdownOptions}\\\\n          label={text('label', 'Name')}\\\\n          required={boolean('required', true)}\\\\n          loading={isLoading}\\\\n          onChange={handleChange}\\\\n          error={boolean('error', false)}\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\n          placeholder={text('placeholder', 'Select')}\\\\n          value={selectedValue}\\\\n          isMenuOpen={menuIsOpen}\\\\n          width={text('width', '300px')}\\\\n          onMenuOpen={handleMenuOpen}\\\\n          onMenuClose={handleMenuClose}\\\\n          onInputChange={action('onInputChange')}\\\\n          disabled={boolean('disabled', false)}\\\\n          limitOptionsList={50}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const FormSelectAsync = () => {\\\\n  // const [menuIsOpen, setMenuIsOpen] = React.useState<boolean>()\\\\n  const [options] = React.useState<OptionsType<any>>([])\\\\n  const handleLoadOptions = React.useCallback(\\\\n    (inputValue: string, callback: (options: OptionsType<any>) => void) => {\\\\n      console.log(inputValue)\\\\n      if (inputValue.length >= 3) {\\\\n        const newOptions = [\\\\n          {\\\\n            label: inputValue + ' - Option 1',\\\\n            value: inputValue + '1',\\\\n            description: inputValue + ' - Option 1'\\\\n          },\\\\n          {\\\\n            label: inputValue + ' - Option 2',\\\\n            value: inputValue + '2',\\\\n            description: inputValue + ' - Option 2'\\\\n          }\\\\n        ]\\\\n        // setOptions(newOptions)\\\\n        callback(newOptions)\\\\n      } else {\\\\n        callback(options)\\\\n      }\\\\n    },\\\\n    []\\\\n  )\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box py='3em' bgColor='grey.50'>\\\\n        <div style={{ width: '350px' }}>\\\\n          <AsyncFormSelect\\\\n            loadOptions={handleLoadOptions}\\\\n            cacheOptions\\\\n            label={text('label', 'Postal Code')}\\\\n            required={boolean('required', false)}\\\\n            error={boolean('error', false)}\\\\n            errorMessage={text('errorMessage', 'Postal Code is required')}\\\\n            disabled={boolean('disabled', false)}\\\\n            showDescription={boolean('showDescription', false)}\\\\n          />\\\\n        </div>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const ListView = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'list-view') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          onChange={action('Value selected')}\\\\n          width={text('width', '120px')}\\\\n          disabled={boolean('disabled', false)}\\\\n          limitOptionsList={50}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\nexport const EditedListView = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'inline-edit') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          onChange={action('Value selected')}\\\\n          width={text('width', '100%')}\\\\n          disabled={boolean('disabled', false)}\\\\n          limitOptionsList={50}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\nexport const DashedDropdown = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'dashed-dropdown') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          onChange={action('Value selected')}\\\\n          width={text('width', '100%')}\\\\n          disabled={boolean('disabled', false)}\\\\n          value={text('value', '') as tSelectVariant}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/DropDown.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\nimport { action } from '@storybook/addon-actions'\\nimport { boolean, object, text } from '@storybook/addon-knobs'\\nimport React from 'react'\\nimport DropDown from '.'\\nimport { path } from '..'\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\nimport Box from '../../atoms/Box'\\nimport { tSelectVariant } from './interface'\\n// import { InputActionMeta } from 'react-select'\\n// import AsyncSelect from 'react-select/async'\\nimport { OptionsType } from 'react-select'\\nimport AsyncFormSelect from './AsyncFormSelect'\\n\\nexport default {parameters: {\\\"storySource\\\":{\\\"source\\\":\\\"\\\\n\\\\n// @ts-nocheck\\\\n// @ts-ignore\\\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\\\n// @ts-ignore\\\\nvar addSourceDecorator = require(\\\\\\\"@storybook/source-loader/preview\\\\\\\").addSource;\\\\n// @ts-ignore\\\\nvar __SOURCE_PREFIX__ = \\\\\\\"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/molecules/DropDown\\\\\\\";\\\\n// @ts-ignore\\\\nvar __STORY__ = \\\\\\\"import { action } from '@storybook/addon-actions'\\\\\\\\nimport { boolean, object, text } from '@storybook/addon-knobs'\\\\\\\\nimport React from 'react'\\\\\\\\nimport DropDown from '.'\\\\\\\\nimport { path } from '..'\\\\\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\\\\\nimport Box from '../../atoms/Box'\\\\\\\\nimport { tSelectVariant } from './interface'\\\\\\\\n// import { InputActionMeta } from 'react-select'\\\\\\\\n// import AsyncSelect from 'react-select/async'\\\\\\\\nimport { OptionsType } from 'react-select'\\\\\\\\nimport AsyncFormSelect from './AsyncFormSelect'\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/DropDown`,\\\\\\\\n  component: DropDown\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst options = [\\\\\\\\n  {\\\\\\\\n    value: 'emailVerificationPending',\\\\\\\\n    label: 'Email Verification Pending Shipper',\\\\\\\\n    title: 'Email Verification Pending Shipper'\\\\\\\\n  },\\\\\\\\n  { value: 'allShippers', label: 'All Shippers', title: 'All Shippers' },\\\\\\\\n  {\\\\\\\\n    value: 'approvalPendingShippers',\\\\\\\\n    label: 'Approval Pending Shippers',\\\\\\\\n    title: 'Approval Pending Shippers'\\\\\\\\n  }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst ListViewOption = [\\\\\\\\n  { value: 'Available', label: 'Available', title: 'Available' },\\\\\\\\n  { value: 'Dispatched', label: 'Dispatched', title: 'Dispatched' },\\\\\\\\n  { value: 'Inactive', label: 'Inactive', title: 'Inactive' }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst FormSelectOption = [\\\\\\\\n  {\\\\\\\\n    value: 'Credit',\\\\\\\\n    label: 'Credit',\\\\\\\\n    title: 'Credit',\\\\\\\\n    description:\\\\\\\\n      'Credit transaction will add to the outstanding amount of (Delivery Associate)'\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    value: 'Debit',\\\\\\\\n    label: 'Debit',\\\\\\\\n    title: 'Debit',\\\\\\\\n    description:\\\\\\\\n      'Credit transaction will deduct from the outstanding amount of (Delivery Associate)'\\\\\\\\n  }\\\\\\\\n]\\\\\\\\nexport const DefaultSelect = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='6em' bgColor='grey.50'>\\\\\\\\n        <DropDown\\\\\\\\n          variant={text('variant', 'default-select') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', options)}\\\\\\\\n          label={text('label', 'Name')}\\\\\\\\n          required={boolean('required', true)}\\\\\\\\n          loading={boolean('loading', true)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          error={boolean('error', false)}\\\\\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\\\\\n          placeholder={text('placeholder', 'Select')}\\\\\\\\n          value={text('value', 'chocolate')}\\\\\\\\n          width={text('width', '300px')}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const FormSelectPlayground = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='6em' bgColor='grey.50'>\\\\\\\\n        <DropDown\\\\\\\\n          variant={text('variant', 'form-select') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', FormSelectOption)}\\\\\\\\n          label={text('label', 'Name')}\\\\\\\\n          required={boolean('required', true)}\\\\\\\\n          loading={boolean('loading', false)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          error={boolean('error', false)}\\\\\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\\\\\n          placeholder={text('placeholder', 'Select')}\\\\\\\\n          value={text('value', 'emailVerificationPending')}\\\\\\\\n          width={text('width', '300px')}\\\\\\\\n          onMenuOpen={action('Menu Open')}\\\\\\\\n          onMenuClose={action('Menu Close')}\\\\\\\\n          showDescription={boolean('Show Description', true)}\\\\\\\\n          tooltipMessage={text('tooltipMessage', 'i am form select tooltip')}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\nexport const FormSelectDeferred = () => {\\\\\\\\n  const [isLoading, setIsLoading] = React.useState<boolean>(false)\\\\\\\\n  const [menuIsOpen, setMenuIsOpen] = React.useState<boolean | undefined>(\\\\\\\\n    undefined\\\\\\\\n  )\\\\\\\\n  const [dropdownOptions, setDropdownOptions] = React.useState<\\\\\\\\n    { label: string; value: string }[]\\\\\\\\n  >([])\\\\\\\\n\\\\\\\\n  const [selectedValue, setSelectedValue] = React.useState<string>()\\\\\\\\n\\\\\\\\n  const handleMenuOpen = () => {\\\\\\\\n    action('Menu Opened!')()\\\\\\\\n    // setMenuIsOpen(true)\\\\\\\\n    if (dropdownOptions.length === 0) {\\\\\\\\n      setIsLoading(true)\\\\\\\\n      setTimeout(() => {\\\\\\\\n        setDropdownOptions(options)\\\\\\\\n        setIsLoading(false)\\\\\\\\n        setMenuIsOpen(true)\\\\\\\\n      }, 2000)\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  const handleMenuClose = () => {\\\\\\\\n    action('Menu Closed!')()\\\\\\\\n    setMenuIsOpen(undefined)\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  const handleChange = (value?: string) => {\\\\\\\\n    action('Value selected')(value)\\\\\\\\n    setSelectedValue(value)\\\\\\\\n    setMenuIsOpen(undefined)\\\\\\\\n  }\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box py='3em' bgColor='grey.50'>\\\\\\\\n        <DropDown\\\\\\\\n          variant={text('variant', 'form-select') as tSelectVariant}\\\\\\\\n          optionList={dropdownOptions}\\\\\\\\n          label={text('label', 'Name')}\\\\\\\\n          required={boolean('required', true)}\\\\\\\\n          loading={isLoading}\\\\\\\\n          onChange={handleChange}\\\\\\\\n          error={boolean('error', false)}\\\\\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\\\\\n          placeholder={text('placeholder', 'Select')}\\\\\\\\n          value={selectedValue}\\\\\\\\n          isMenuOpen={menuIsOpen}\\\\\\\\n          width={text('width', '300px')}\\\\\\\\n          onMenuOpen={handleMenuOpen}\\\\\\\\n          onMenuClose={handleMenuClose}\\\\\\\\n          onInputChange={action('onInputChange')}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n          limitOptionsList={50}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const FormSelectAsync = () => {\\\\\\\\n  // const [menuIsOpen, setMenuIsOpen] = React.useState<boolean>()\\\\\\\\n  const [options] = React.useState<OptionsType<any>>([])\\\\\\\\n  const handleLoadOptions = React.useCallback(\\\\\\\\n    (inputValue: string, callback: (options: OptionsType<any>) => void) => {\\\\\\\\n      console.log(inputValue)\\\\\\\\n      if (inputValue.length >= 3) {\\\\\\\\n        const newOptions = [\\\\\\\\n          {\\\\\\\\n            label: inputValue + ' - Option 1',\\\\\\\\n            value: inputValue + '1',\\\\\\\\n            description: inputValue + ' - Option 1'\\\\\\\\n          },\\\\\\\\n          {\\\\\\\\n            label: inputValue + ' - Option 2',\\\\\\\\n            value: inputValue + '2',\\\\\\\\n            description: inputValue + ' - Option 2'\\\\\\\\n          }\\\\\\\\n        ]\\\\\\\\n        // setOptions(newOptions)\\\\\\\\n        callback(newOptions)\\\\\\\\n      } else {\\\\\\\\n        callback(options)\\\\\\\\n      }\\\\\\\\n    },\\\\\\\\n    []\\\\\\\\n  )\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box py='3em' bgColor='grey.50'>\\\\\\\\n        <div style={{ width: '350px' }}>\\\\\\\\n          <AsyncFormSelect\\\\\\\\n            loadOptions={handleLoadOptions}\\\\\\\\n            cacheOptions\\\\\\\\n            label={text('label', 'Postal Code')}\\\\\\\\n            required={boolean('required', false)}\\\\\\\\n            error={boolean('error', false)}\\\\\\\\n            errorMessage={text('errorMessage', 'Postal Code is required')}\\\\\\\\n            disabled={boolean('disabled', false)}\\\\\\\\n            showDescription={boolean('showDescription', false)}\\\\\\\\n          />\\\\\\\\n        </div>\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const ListView = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='6em' bgColor='grey.50'>\\\\\\\\n        <DropDown\\\\\\\\n          variant={text('variant', 'list-view') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', ListViewOption)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          width={text('width', '120px')}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n          limitOptionsList={50}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\nexport const EditedListView = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='6em' bgColor='grey.50'>\\\\\\\\n        <DropDown\\\\\\\\n          variant={text('variant', 'inline-edit') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', ListViewOption)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          width={text('width', '100%')}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n          limitOptionsList={50}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\nexport const DashedDropdown = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='6em' bgColor='grey.50'>\\\\\\\\n        <DropDown\\\\\\\\n          variant={text('variant', 'dashed-dropdown') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', ListViewOption)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          width={text('width', '100%')}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n          value={text('value', '') as tSelectVariant}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\";\\\\n// @ts-ignore\\\\nvar __ADDS_MAP__ = {};\\\\n// @ts-ignore\\\\nvar __MAIN_FILE_LOCATION__ = \\\\\\\"/DropDown.stories.tsx\\\\\\\";\\\\n// @ts-ignore\\\\nvar __MODULE_DEPENDENCIES__ = [];\\\\n// @ts-ignore\\\\nvar __LOCAL_DEPENDENCIES__ = {};\\\\n// @ts-ignore\\\\nvar __IDS_TO_FRAMEWORKS__ = {};\\\\n        \\\\nimport { action } from '@storybook/addon-actions'\\\\nimport { boolean, object, text } from '@storybook/addon-knobs'\\\\nimport React from 'react'\\\\nimport DropDown from '.'\\\\nimport { path } from '..'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport Box from '../../atoms/Box'\\\\nimport { tSelectVariant } from './interface'\\\\n// import { InputActionMeta } from 'react-select'\\\\n// import AsyncSelect from 'react-select/async'\\\\nimport { OptionsType } from 'react-select'\\\\nimport AsyncFormSelect from './AsyncFormSelect'\\\\n\\\\nexport default {parameters: {\\\\\\\"storySource\\\\\\\":{\\\\\\\"source\\\\\\\":\\\\\\\"import { action } from '@storybook/addon-actions'\\\\\\\\nimport { boolean, object, text } from '@storybook/addon-knobs'\\\\\\\\nimport React from 'react'\\\\\\\\nimport DropDown from '.'\\\\\\\\nimport { path } from '..'\\\\\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\\\\\nimport Box from '../../atoms/Box'\\\\\\\\nimport { tSelectVariant } from './interface'\\\\\\\\n// import { InputActionMeta } from 'react-select'\\\\\\\\n// import AsyncSelect from 'react-select/async'\\\\\\\\nimport { OptionsType } from 'react-select'\\\\\\\\nimport AsyncFormSelect from './AsyncFormSelect'\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/DropDown`,\\\\\\\\n  component: DropDown\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst options = [\\\\\\\\n  {\\\\\\\\n    value: 'emailVerificationPending',\\\\\\\\n    label: 'Email Verification Pending Shipper',\\\\\\\\n    title: 'Email Verification Pending Shipper'\\\\\\\\n  },\\\\\\\\n  { value: 'allShippers', label: 'All Shippers', title: 'All Shippers' },\\\\\\\\n  {\\\\\\\\n    value: 'approvalPendingShippers',\\\\\\\\n    label: 'Approval Pending Shippers',\\\\\\\\n    title: 'Approval Pending Shippers'\\\\\\\\n  }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst ListViewOption = [\\\\\\\\n  { value: 'Available', label: 'Available', title: 'Available' },\\\\\\\\n  { value: 'Dispatched', label: 'Dispatched', title: 'Dispatched' },\\\\\\\\n  { value: 'Inactive', label: 'Inactive', title: 'Inactive' }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst FormSelectOption = [\\\\\\\\n  {\\\\\\\\n    value: 'Credit',\\\\\\\\n    label: 'Credit',\\\\\\\\n    title: 'Credit',\\\\\\\\n    description:\\\\\\\\n      'Credit transaction will add to the outstanding amount of (Delivery Associate)'\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    value: 'Debit',\\\\\\\\n    label: 'Debit',\\\\\\\\n    title: 'Debit',\\\\\\\\n    description:\\\\\\\\n      'Credit transaction will deduct from the outstanding amount of (Delivery Associate)'\\\\\\\\n  }\\\\\\\\n]\\\\\\\\nexport const DefaultSelect = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='6em' bgColor='grey.50'>\\\\\\\\n        <DropDown\\\\\\\\n          variant={text('variant', 'default-select') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', options)}\\\\\\\\n          label={text('label', 'Name')}\\\\\\\\n          required={boolean('required', true)}\\\\\\\\n          loading={boolean('loading', true)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          error={boolean('error', false)}\\\\\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\\\\\n          placeholder={text('placeholder', 'Select')}\\\\\\\\n          value={text('value', 'chocolate')}\\\\\\\\n          width={text('width', '300px')}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const FormSelectPlayground = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='6em' bgColor='grey.50'>\\\\\\\\n        <DropDown\\\\\\\\n          variant={text('variant', 'form-select') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', FormSelectOption)}\\\\\\\\n          label={text('label', 'Name')}\\\\\\\\n          required={boolean('required', true)}\\\\\\\\n          loading={boolean('loading', false)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          error={boolean('error', false)}\\\\\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\\\\\n          placeholder={text('placeholder', 'Select')}\\\\\\\\n          value={text('value', 'emailVerificationPending')}\\\\\\\\n          width={text('width', '300px')}\\\\\\\\n          onMenuOpen={action('Menu Open')}\\\\\\\\n          onMenuClose={action('Menu Close')}\\\\\\\\n          showDescription={boolean('Show Description', true)}\\\\\\\\n          tooltipMessage={text('tooltipMessage', 'i am form select tooltip')}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\nexport const FormSelectDeferred = () => {\\\\\\\\n  const [isLoading, setIsLoading] = React.useState<boolean>(false)\\\\\\\\n  const [menuIsOpen, setMenuIsOpen] = React.useState<boolean | undefined>(\\\\\\\\n    undefined\\\\\\\\n  )\\\\\\\\n  const [dropdownOptions, setDropdownOptions] = React.useState<\\\\\\\\n    { label: string; value: string }[]\\\\\\\\n  >([])\\\\\\\\n\\\\\\\\n  const [selectedValue, setSelectedValue] = React.useState<string>()\\\\\\\\n\\\\\\\\n  const handleMenuOpen = () => {\\\\\\\\n    action('Menu Opened!')()\\\\\\\\n    // setMenuIsOpen(true)\\\\\\\\n    if (dropdownOptions.length === 0) {\\\\\\\\n      setIsLoading(true)\\\\\\\\n      setTimeout(() => {\\\\\\\\n        setDropdownOptions(options)\\\\\\\\n        setIsLoading(false)\\\\\\\\n        setMenuIsOpen(true)\\\\\\\\n      }, 2000)\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  const handleMenuClose = () => {\\\\\\\\n    action('Menu Closed!')()\\\\\\\\n    setMenuIsOpen(undefined)\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  const handleChange = (value?: string) => {\\\\\\\\n    action('Value selected')(value)\\\\\\\\n    setSelectedValue(value)\\\\\\\\n    setMenuIsOpen(undefined)\\\\\\\\n  }\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box py='3em' bgColor='grey.50'>\\\\\\\\n        <DropDown\\\\\\\\n          variant={text('variant', 'form-select') as tSelectVariant}\\\\\\\\n          optionList={dropdownOptions}\\\\\\\\n          label={text('label', 'Name')}\\\\\\\\n          required={boolean('required', true)}\\\\\\\\n          loading={isLoading}\\\\\\\\n          onChange={handleChange}\\\\\\\\n          error={boolean('error', false)}\\\\\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\\\\\n          placeholder={text('placeholder', 'Select')}\\\\\\\\n          value={selectedValue}\\\\\\\\n          isMenuOpen={menuIsOpen}\\\\\\\\n          width={text('width', '300px')}\\\\\\\\n          onMenuOpen={handleMenuOpen}\\\\\\\\n          onMenuClose={handleMenuClose}\\\\\\\\n          onInputChange={action('onInputChange')}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n          limitOptionsList={50}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const FormSelectAsync = () => {\\\\\\\\n  // const [menuIsOpen, setMenuIsOpen] = React.useState<boolean>()\\\\\\\\n  const [options] = React.useState<OptionsType<any>>([])\\\\\\\\n  const handleLoadOptions = React.useCallback(\\\\\\\\n    (inputValue: string, callback: (options: OptionsType<any>) => void) => {\\\\\\\\n      console.log(inputValue)\\\\\\\\n      if (inputValue.length >= 3) {\\\\\\\\n        const newOptions = [\\\\\\\\n          {\\\\\\\\n            label: inputValue + ' - Option 1',\\\\\\\\n            value: inputValue + '1',\\\\\\\\n            description: inputValue + ' - Option 1'\\\\\\\\n          },\\\\\\\\n          {\\\\\\\\n            label: inputValue + ' - Option 2',\\\\\\\\n            value: inputValue + '2',\\\\\\\\n            description: inputValue + ' - Option 2'\\\\\\\\n          }\\\\\\\\n        ]\\\\\\\\n        // setOptions(newOptions)\\\\\\\\n        callback(newOptions)\\\\\\\\n      } else {\\\\\\\\n        callback(options)\\\\\\\\n      }\\\\\\\\n    },\\\\\\\\n    []\\\\\\\\n  )\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box py='3em' bgColor='grey.50'>\\\\\\\\n        <div style={{ width: '350px' }}>\\\\\\\\n          <AsyncFormSelect\\\\\\\\n            loadOptions={handleLoadOptions}\\\\\\\\n            cacheOptions\\\\\\\\n            label={text('label', 'Postal Code')}\\\\\\\\n            required={boolean('required', false)}\\\\\\\\n            error={boolean('error', false)}\\\\\\\\n            errorMessage={text('errorMessage', 'Postal Code is required')}\\\\\\\\n            disabled={boolean('disabled', false)}\\\\\\\\n            showDescription={boolean('showDescription', false)}\\\\\\\\n          />\\\\\\\\n        </div>\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const ListView = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='6em' bgColor='grey.50'>\\\\\\\\n        <DropDown\\\\\\\\n          variant={text('variant', 'list-view') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', ListViewOption)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          width={text('width', '120px')}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n          limitOptionsList={50}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\nexport const EditedListView = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='6em' bgColor='grey.50'>\\\\\\\\n        <DropDown\\\\\\\\n          variant={text('variant', 'inline-edit') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', ListViewOption)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          width={text('width', '100%')}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n          limitOptionsList={50}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\nexport const DashedDropdown = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='6em' bgColor='grey.50'>\\\\\\\\n        <DropDown\\\\\\\\n          variant={text('variant', 'dashed-dropdown') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', ListViewOption)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          width={text('width', '100%')}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n          value={text('value', '') as tSelectVariant}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\",\\\\\\\"locationsMap\\\\\\\":{}},},\\\\n  title: `${path}/DropDown`,\\\\n  component: DropDown\\\\n}\\\\n\\\\nconst options = [\\\\n  {\\\\n    value: 'emailVerificationPending',\\\\n    label: 'Email Verification Pending Shipper',\\\\n    title: 'Email Verification Pending Shipper'\\\\n  },\\\\n  { value: 'allShippers', label: 'All Shippers', title: 'All Shippers' },\\\\n  {\\\\n    value: 'approvalPendingShippers',\\\\n    label: 'Approval Pending Shippers',\\\\n    title: 'Approval Pending Shippers'\\\\n  }\\\\n]\\\\n\\\\nconst ListViewOption = [\\\\n  { value: 'Available', label: 'Available', title: 'Available' },\\\\n  { value: 'Dispatched', label: 'Dispatched', title: 'Dispatched' },\\\\n  { value: 'Inactive', label: 'Inactive', title: 'Inactive' }\\\\n]\\\\n\\\\nconst FormSelectOption = [\\\\n  {\\\\n    value: 'Credit',\\\\n    label: 'Credit',\\\\n    title: 'Credit',\\\\n    description:\\\\n      'Credit transaction will add to the outstanding amount of (Delivery Associate)'\\\\n  },\\\\n  {\\\\n    value: 'Debit',\\\\n    label: 'Debit',\\\\n    title: 'Debit',\\\\n    description:\\\\n      'Credit transaction will deduct from the outstanding amount of (Delivery Associate)'\\\\n  }\\\\n]\\\\nexport const DefaultSelect = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'default-select') as tSelectVariant}\\\\n          optionList={object('optionList', options)}\\\\n          label={text('label', 'Name')}\\\\n          required={boolean('required', true)}\\\\n          loading={boolean('loading', true)}\\\\n          onChange={action('Value selected')}\\\\n          error={boolean('error', false)}\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\n          placeholder={text('placeholder', 'Select')}\\\\n          value={text('value', 'chocolate')}\\\\n          width={text('width', '300px')}\\\\n          disabled={boolean('disabled', false)}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const FormSelectPlayground = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'form-select') as tSelectVariant}\\\\n          optionList={object('optionList', FormSelectOption)}\\\\n          label={text('label', 'Name')}\\\\n          required={boolean('required', true)}\\\\n          loading={boolean('loading', false)}\\\\n          onChange={action('Value selected')}\\\\n          error={boolean('error', false)}\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\n          placeholder={text('placeholder', 'Select')}\\\\n          value={text('value', 'emailVerificationPending')}\\\\n          width={text('width', '300px')}\\\\n          onMenuOpen={action('Menu Open')}\\\\n          onMenuClose={action('Menu Close')}\\\\n          showDescription={boolean('Show Description', true)}\\\\n          tooltipMessage={text('tooltipMessage', 'i am form select tooltip')}\\\\n          disabled={boolean('disabled', false)}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\nexport const FormSelectDeferred = addSourceDecorator(() => {\\\\n  const [isLoading, setIsLoading] = React.useState<boolean>(false)\\\\n  const [menuIsOpen, setMenuIsOpen] = React.useState<boolean | undefined>(\\\\n    undefined\\\\n  )\\\\n  const [dropdownOptions, setDropdownOptions] = React.useState<\\\\n    { label: string; value: string }[]\\\\n  >([])\\\\n\\\\n  const [selectedValue, setSelectedValue] = React.useState<string>()\\\\n\\\\n  const handleMenuOpen = () => {\\\\n    action('Menu Opened!')()\\\\n    // setMenuIsOpen(true)\\\\n    if (dropdownOptions.length === 0) {\\\\n      setIsLoading(true)\\\\n      setTimeout(() => {\\\\n        setDropdownOptions(options)\\\\n        setIsLoading(false)\\\\n        setMenuIsOpen(true)\\\\n      }, 2000)\\\\n    }\\\\n  }\\\\n\\\\n  const handleMenuClose = () => {\\\\n    action('Menu Closed!')()\\\\n    setMenuIsOpen(undefined)\\\\n  }\\\\n\\\\n  const handleChange = (value?: string) => {\\\\n    action('Value selected')(value)\\\\n    setSelectedValue(value)\\\\n    setMenuIsOpen(undefined)\\\\n  }\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box py='3em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'form-select') as tSelectVariant}\\\\n          optionList={dropdownOptions}\\\\n          label={text('label', 'Name')}\\\\n          required={boolean('required', true)}\\\\n          loading={isLoading}\\\\n          onChange={handleChange}\\\\n          error={boolean('error', false)}\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\n          placeholder={text('placeholder', 'Select')}\\\\n          value={selectedValue}\\\\n          isMenuOpen={menuIsOpen}\\\\n          width={text('width', '300px')}\\\\n          onMenuOpen={handleMenuOpen}\\\\n          onMenuClose={handleMenuClose}\\\\n          onInputChange={action('onInputChange')}\\\\n          disabled={boolean('disabled', false)}\\\\n          limitOptionsList={50}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const FormSelectAsync = addSourceDecorator(() => {\\\\n  // const [menuIsOpen, setMenuIsOpen] = React.useState<boolean>()\\\\n  const [options] = React.useState<OptionsType<any>>([])\\\\n  const handleLoadOptions = React.useCallback(\\\\n    (inputValue: string, callback: (options: OptionsType<any>) => void) => {\\\\n      console.log(inputValue)\\\\n      if (inputValue.length >= 3) {\\\\n        const newOptions = [\\\\n          {\\\\n            label: inputValue + ' - Option 1',\\\\n            value: inputValue + '1',\\\\n            description: inputValue + ' - Option 1'\\\\n          },\\\\n          {\\\\n            label: inputValue + ' - Option 2',\\\\n            value: inputValue + '2',\\\\n            description: inputValue + ' - Option 2'\\\\n          }\\\\n        ]\\\\n        // setOptions(newOptions)\\\\n        callback(newOptions)\\\\n      } else {\\\\n        callback(options)\\\\n      }\\\\n    },\\\\n    []\\\\n  )\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box py='3em' bgColor='grey.50'>\\\\n        <div style={{ width: '350px' }}>\\\\n          <AsyncFormSelect\\\\n            loadOptions={handleLoadOptions}\\\\n            cacheOptions\\\\n            label={text('label', 'Postal Code')}\\\\n            required={boolean('required', false)}\\\\n            error={boolean('error', false)}\\\\n            errorMessage={text('errorMessage', 'Postal Code is required')}\\\\n            disabled={boolean('disabled', false)}\\\\n            showDescription={boolean('showDescription', false)}\\\\n          />\\\\n        </div>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const ListView = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'list-view') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          onChange={action('Value selected')}\\\\n          width={text('width', '120px')}\\\\n          disabled={boolean('disabled', false)}\\\\n          limitOptionsList={50}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\nexport const EditedListView = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'inline-edit') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          onChange={action('Value selected')}\\\\n          width={text('width', '100%')}\\\\n          disabled={boolean('disabled', false)}\\\\n          limitOptionsList={50}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\nexport const DashedDropdown = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'dashed-dropdown') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          onChange={action('Value selected')}\\\\n          width={text('width', '100%')}\\\\n          disabled={boolean('disabled', false)}\\\\n          value={text('value', '') as tSelectVariant}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\",\\\"locationsMap\\\":{}},\\\"storySource\\\":{\\\"source\\\":\\\"import { action } from '@storybook/addon-actions'\\\\nimport { boolean, object, text } from '@storybook/addon-knobs'\\\\nimport React from 'react'\\\\nimport DropDown from '.'\\\\nimport { path } from '..'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport Box from '../../atoms/Box'\\\\nimport { tSelectVariant } from './interface'\\\\n// import { InputActionMeta } from 'react-select'\\\\n// import AsyncSelect from 'react-select/async'\\\\nimport { OptionsType } from 'react-select'\\\\nimport AsyncFormSelect from './AsyncFormSelect'\\\\n\\\\nexport default {\\\\n  title: `${path}/DropDown`,\\\\n  component: DropDown\\\\n}\\\\n\\\\nconst options = [\\\\n  {\\\\n    value: 'emailVerificationPending',\\\\n    label: 'Email Verification Pending Shipper',\\\\n    title: 'Email Verification Pending Shipper'\\\\n  },\\\\n  { value: 'allShippers', label: 'All Shippers', title: 'All Shippers' },\\\\n  {\\\\n    value: 'approvalPendingShippers',\\\\n    label: 'Approval Pending Shippers',\\\\n    title: 'Approval Pending Shippers'\\\\n  }\\\\n]\\\\n\\\\nconst ListViewOption = [\\\\n  { value: 'Available', label: 'Available', title: 'Available' },\\\\n  { value: 'Dispatched', label: 'Dispatched', title: 'Dispatched' },\\\\n  { value: 'Inactive', label: 'Inactive', title: 'Inactive' }\\\\n]\\\\n\\\\nconst FormSelectOption = [\\\\n  {\\\\n    value: 'Credit',\\\\n    label: 'Credit',\\\\n    title: 'Credit',\\\\n    description:\\\\n      'Credit transaction will add to the outstanding amount of (Delivery Associate)'\\\\n  },\\\\n  {\\\\n    value: 'Debit',\\\\n    label: 'Debit',\\\\n    title: 'Debit',\\\\n    description:\\\\n      'Credit transaction will deduct from the outstanding amount of (Delivery Associate)'\\\\n  }\\\\n]\\\\nexport const DefaultSelect = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'default-select') as tSelectVariant}\\\\n          optionList={object('optionList', options)}\\\\n          label={text('label', 'Name')}\\\\n          required={boolean('required', true)}\\\\n          loading={boolean('loading', true)}\\\\n          onChange={action('Value selected')}\\\\n          error={boolean('error', false)}\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\n          placeholder={text('placeholder', 'Select')}\\\\n          value={text('value', 'chocolate')}\\\\n          width={text('width', '300px')}\\\\n          disabled={boolean('disabled', false)}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const FormSelectPlayground = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'form-select') as tSelectVariant}\\\\n          optionList={object('optionList', FormSelectOption)}\\\\n          label={text('label', 'Name')}\\\\n          required={boolean('required', true)}\\\\n          loading={boolean('loading', false)}\\\\n          onChange={action('Value selected')}\\\\n          error={boolean('error', false)}\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\n          placeholder={text('placeholder', 'Select')}\\\\n          value={text('value', 'emailVerificationPending')}\\\\n          width={text('width', '300px')}\\\\n          onMenuOpen={action('Menu Open')}\\\\n          onMenuClose={action('Menu Close')}\\\\n          showDescription={boolean('Show Description', true)}\\\\n          tooltipMessage={text('tooltipMessage', 'i am form select tooltip')}\\\\n          disabled={boolean('disabled', false)}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\nexport const FormSelectDeferred = () => {\\\\n  const [isLoading, setIsLoading] = React.useState<boolean>(false)\\\\n  const [menuIsOpen, setMenuIsOpen] = React.useState<boolean | undefined>(\\\\n    undefined\\\\n  )\\\\n  const [dropdownOptions, setDropdownOptions] = React.useState<\\\\n    { label: string; value: string }[]\\\\n  >([])\\\\n\\\\n  const [selectedValue, setSelectedValue] = React.useState<string>()\\\\n\\\\n  const handleMenuOpen = () => {\\\\n    action('Menu Opened!')()\\\\n    // setMenuIsOpen(true)\\\\n    if (dropdownOptions.length === 0) {\\\\n      setIsLoading(true)\\\\n      setTimeout(() => {\\\\n        setDropdownOptions(options)\\\\n        setIsLoading(false)\\\\n        setMenuIsOpen(true)\\\\n      }, 2000)\\\\n    }\\\\n  }\\\\n\\\\n  const handleMenuClose = () => {\\\\n    action('Menu Closed!')()\\\\n    setMenuIsOpen(undefined)\\\\n  }\\\\n\\\\n  const handleChange = (value?: string) => {\\\\n    action('Value selected')(value)\\\\n    setSelectedValue(value)\\\\n    setMenuIsOpen(undefined)\\\\n  }\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box py='3em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'form-select') as tSelectVariant}\\\\n          optionList={dropdownOptions}\\\\n          label={text('label', 'Name')}\\\\n          required={boolean('required', true)}\\\\n          loading={isLoading}\\\\n          onChange={handleChange}\\\\n          error={boolean('error', false)}\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\n          placeholder={text('placeholder', 'Select')}\\\\n          value={selectedValue}\\\\n          isMenuOpen={menuIsOpen}\\\\n          width={text('width', '300px')}\\\\n          onMenuOpen={handleMenuOpen}\\\\n          onMenuClose={handleMenuClose}\\\\n          onInputChange={action('onInputChange')}\\\\n          disabled={boolean('disabled', false)}\\\\n          limitOptionsList={50}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const FormSelectAsync = () => {\\\\n  // const [menuIsOpen, setMenuIsOpen] = React.useState<boolean>()\\\\n  const [options] = React.useState<OptionsType<any>>([])\\\\n  const handleLoadOptions = React.useCallback(\\\\n    (inputValue: string, callback: (options: OptionsType<any>) => void) => {\\\\n      console.log(inputValue)\\\\n      if (inputValue.length >= 3) {\\\\n        const newOptions = [\\\\n          {\\\\n            label: inputValue + ' - Option 1',\\\\n            value: inputValue + '1',\\\\n            description: inputValue + ' - Option 1'\\\\n          },\\\\n          {\\\\n            label: inputValue + ' - Option 2',\\\\n            value: inputValue + '2',\\\\n            description: inputValue + ' - Option 2'\\\\n          }\\\\n        ]\\\\n        // setOptions(newOptions)\\\\n        callback(newOptions)\\\\n      } else {\\\\n        callback(options)\\\\n      }\\\\n    },\\\\n    []\\\\n  )\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box py='3em' bgColor='grey.50'>\\\\n        <div style={{ width: '350px' }}>\\\\n          <AsyncFormSelect\\\\n            loadOptions={handleLoadOptions}\\\\n            cacheOptions\\\\n            label={text('label', 'Postal Code')}\\\\n            required={boolean('required', false)}\\\\n            error={boolean('error', false)}\\\\n            errorMessage={text('errorMessage', 'Postal Code is required')}\\\\n            disabled={boolean('disabled', false)}\\\\n            showDescription={boolean('showDescription', false)}\\\\n          />\\\\n        </div>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const ListView = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'list-view') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          onChange={action('Value selected')}\\\\n          width={text('width', '120px')}\\\\n          disabled={boolean('disabled', false)}\\\\n          limitOptionsList={50}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\nexport const EditedListView = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'inline-edit') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          onChange={action('Value selected')}\\\\n          width={text('width', '100%')}\\\\n          disabled={boolean('disabled', false)}\\\\n          limitOptionsList={50}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\nexport const DashedDropdown = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'dashed-dropdown') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          onChange={action('Value selected')}\\\\n          width={text('width', '100%')}\\\\n          disabled={boolean('disabled', false)}\\\\n          value={text('value', '') as tSelectVariant}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\",\\\"locationsMap\\\":{}},},\\n  title: `${path}/DropDown`,\\n  component: DropDown\\n}\\n\\nconst options = [\\n  {\\n    value: 'emailVerificationPending',\\n    label: 'Email Verification Pending Shipper',\\n    title: 'Email Verification Pending Shipper'\\n  },\\n  { value: 'allShippers', label: 'All Shippers', title: 'All Shippers' },\\n  {\\n    value: 'approvalPendingShippers',\\n    label: 'Approval Pending Shippers',\\n    title: 'Approval Pending Shippers'\\n  }\\n]\\n\\nconst ListViewOption = [\\n  { value: 'Available', label: 'Available', title: 'Available' },\\n  { value: 'Dispatched', label: 'Dispatched', title: 'Dispatched' },\\n  { value: 'Inactive', label: 'Inactive', title: 'Inactive' }\\n]\\n\\nconst FormSelectOption = [\\n  {\\n    value: 'Credit',\\n    label: 'Credit',\\n    title: 'Credit',\\n    description:\\n      'Credit transaction will add to the outstanding amount of (Delivery Associate)'\\n  },\\n  {\\n    value: 'Debit',\\n    label: 'Debit',\\n    title: 'Debit',\\n    description:\\n      'Credit transaction will deduct from the outstanding amount of (Delivery Associate)'\\n  }\\n]\\nexport const DefaultSelect = addSourceDecorator(addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='6em' bgColor='grey.50'>\\n        <DropDown\\n          variant={text('variant', 'default-select') as tSelectVariant}\\n          optionList={object('optionList', options)}\\n          label={text('label', 'Name')}\\n          required={boolean('required', true)}\\n          loading={boolean('loading', true)}\\n          onChange={action('Value selected')}\\n          error={boolean('error', false)}\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\n          placeholder={text('placeholder', 'Select')}\\n          value={text('value', 'chocolate')}\\n          width={text('width', '300px')}\\n          disabled={boolean('disabled', false)}\\n        />\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const FormSelectPlayground = addSourceDecorator(addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='6em' bgColor='grey.50'>\\n        <DropDown\\n          variant={text('variant', 'form-select') as tSelectVariant}\\n          optionList={object('optionList', FormSelectOption)}\\n          label={text('label', 'Name')}\\n          required={boolean('required', true)}\\n          loading={boolean('loading', false)}\\n          onChange={action('Value selected')}\\n          error={boolean('error', false)}\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\n          placeholder={text('placeholder', 'Select')}\\n          value={text('value', 'emailVerificationPending')}\\n          width={text('width', '300px')}\\n          onMenuOpen={action('Menu Open')}\\n          onMenuClose={action('Menu Close')}\\n          showDescription={boolean('Show Description', true)}\\n          tooltipMessage={text('tooltipMessage', 'i am form select tooltip')}\\n          disabled={boolean('disabled', false)}\\n        />\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\nexport const FormSelectDeferred = addSourceDecorator(addSourceDecorator(() => {\\n  const [isLoading, setIsLoading] = React.useState<boolean>(false)\\n  const [menuIsOpen, setMenuIsOpen] = React.useState<boolean | undefined>(\\n    undefined\\n  )\\n  const [dropdownOptions, setDropdownOptions] = React.useState<\\n    { label: string; value: string }[]\\n  >([])\\n\\n  const [selectedValue, setSelectedValue] = React.useState<string>()\\n\\n  const handleMenuOpen = () => {\\n    action('Menu Opened!')()\\n    // setMenuIsOpen(true)\\n    if (dropdownOptions.length === 0) {\\n      setIsLoading(true)\\n      setTimeout(() => {\\n        setDropdownOptions(options)\\n        setIsLoading(false)\\n        setMenuIsOpen(true)\\n      }, 2000)\\n    }\\n  }\\n\\n  const handleMenuClose = () => {\\n    action('Menu Closed!')()\\n    setMenuIsOpen(undefined)\\n  }\\n\\n  const handleChange = (value?: string) => {\\n    action('Value selected')(value)\\n    setSelectedValue(value)\\n    setMenuIsOpen(undefined)\\n  }\\n  return (\\n    <ThemeWrapper>\\n      <Box py='3em' bgColor='grey.50'>\\n        <DropDown\\n          variant={text('variant', 'form-select') as tSelectVariant}\\n          optionList={dropdownOptions}\\n          label={text('label', 'Name')}\\n          required={boolean('required', true)}\\n          loading={isLoading}\\n          onChange={handleChange}\\n          error={boolean('error', false)}\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\n          placeholder={text('placeholder', 'Select')}\\n          value={selectedValue}\\n          isMenuOpen={menuIsOpen}\\n          width={text('width', '300px')}\\n          onMenuOpen={handleMenuOpen}\\n          onMenuClose={handleMenuClose}\\n          onInputChange={action('onInputChange')}\\n          disabled={boolean('disabled', false)}\\n          limitOptionsList={50}\\n        />\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const FormSelectAsync = addSourceDecorator(addSourceDecorator(() => {\\n  // const [menuIsOpen, setMenuIsOpen] = React.useState<boolean>()\\n  const [options] = React.useState<OptionsType<any>>([])\\n  const handleLoadOptions = React.useCallback(\\n    (inputValue: string, callback: (options: OptionsType<any>) => void) => {\\n      console.log(inputValue)\\n      if (inputValue.length >= 3) {\\n        const newOptions = [\\n          {\\n            label: inputValue + ' - Option 1',\\n            value: inputValue + '1',\\n            description: inputValue + ' - Option 1'\\n          },\\n          {\\n            label: inputValue + ' - Option 2',\\n            value: inputValue + '2',\\n            description: inputValue + ' - Option 2'\\n          }\\n        ]\\n        // setOptions(newOptions)\\n        callback(newOptions)\\n      } else {\\n        callback(options)\\n      }\\n    },\\n    []\\n  )\\n\\n  return (\\n    <ThemeWrapper>\\n      <Box py='3em' bgColor='grey.50'>\\n        <div style={{ width: '350px' }}>\\n          <AsyncFormSelect\\n            loadOptions={handleLoadOptions}\\n            cacheOptions\\n            label={text('label', 'Postal Code')}\\n            required={boolean('required', false)}\\n            error={boolean('error', false)}\\n            errorMessage={text('errorMessage', 'Postal Code is required')}\\n            disabled={boolean('disabled', false)}\\n            showDescription={boolean('showDescription', false)}\\n          />\\n        </div>\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const ListView = addSourceDecorator(addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='6em' bgColor='grey.50'>\\n        <DropDown\\n          variant={text('variant', 'list-view') as tSelectVariant}\\n          optionList={object('optionList', ListViewOption)}\\n          onChange={action('Value selected')}\\n          width={text('width', '120px')}\\n          disabled={boolean('disabled', false)}\\n          limitOptionsList={50}\\n        />\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\nexport const EditedListView = addSourceDecorator(addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='6em' bgColor='grey.50'>\\n        <DropDown\\n          variant={text('variant', 'inline-edit') as tSelectVariant}\\n          optionList={object('optionList', ListViewOption)}\\n          onChange={action('Value selected')}\\n          width={text('width', '100%')}\\n          disabled={boolean('disabled', false)}\\n          limitOptionsList={50}\\n        />\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\nexport const DashedDropdown = addSourceDecorator(addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='6em' bgColor='grey.50'>\\n        <DropDown\\n          variant={text('variant', 'dashed-dropdown') as tSelectVariant}\\n          optionList={object('optionList', ListViewOption)}\\n          onChange={action('Value selected')}\\n          width={text('width', '100%')}\\n          disabled={boolean('disabled', false)}\\n          value={text('value', '') as tSelectVariant}\\n        />\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\"; // @ts-ignore\n\nvar __ADDS_MAP__ = {}; // @ts-ignore\n\nvar __MAIN_FILE_LOCATION__ = \"/DropDown.stories.tsx\"; // @ts-ignore\n\nvar __MODULE_DEPENDENCIES__ = []; // @ts-ignore\n\nvar __LOCAL_DEPENDENCIES__ = {}; // @ts-ignore\n\nvar __IDS_TO_FRAMEWORKS__ = {};\n/* eslint-disable */\n// @ts-nocheck\n// @ts-ignore\n\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource; // @ts-ignore\n\n\nvar addSourceDecorator = require(\"@storybook/source-loader/preview\").addSource; // @ts-ignore\n\n\nvar __SOURCE_PREFIX__ = \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/molecules/DropDown\"; // @ts-ignore\n\nvar __STORY__ = \"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/molecules/DropDown\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"import { action } from '@storybook/addon-actions'\\\\nimport { boolean, object, text } from '@storybook/addon-knobs'\\\\nimport React from 'react'\\\\nimport DropDown from '.'\\\\nimport { path } from '..'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport Box from '../../atoms/Box'\\\\nimport { tSelectVariant } from './interface'\\\\n// import { InputActionMeta } from 'react-select'\\\\n// import AsyncSelect from 'react-select/async'\\\\nimport { OptionsType } from 'react-select'\\\\nimport AsyncFormSelect from './AsyncFormSelect'\\\\n\\\\nexport default {\\\\n  title: `${path}/DropDown`,\\\\n  component: DropDown\\\\n}\\\\n\\\\nconst options = [\\\\n  {\\\\n    value: 'emailVerificationPending',\\\\n    label: 'Email Verification Pending Shipper',\\\\n    title: 'Email Verification Pending Shipper'\\\\n  },\\\\n  { value: 'allShippers', label: 'All Shippers', title: 'All Shippers' },\\\\n  {\\\\n    value: 'approvalPendingShippers',\\\\n    label: 'Approval Pending Shippers',\\\\n    title: 'Approval Pending Shippers'\\\\n  }\\\\n]\\\\n\\\\nconst ListViewOption = [\\\\n  { value: 'Available', label: 'Available', title: 'Available' },\\\\n  { value: 'Dispatched', label: 'Dispatched', title: 'Dispatched' },\\\\n  { value: 'Inactive', label: 'Inactive', title: 'Inactive' }\\\\n]\\\\n\\\\nconst FormSelectOption = [\\\\n  {\\\\n    value: 'Credit',\\\\n    label: 'Credit',\\\\n    title: 'Credit',\\\\n    description:\\\\n      'Credit transaction will add to the outstanding amount of (Delivery Associate)'\\\\n  },\\\\n  {\\\\n    value: 'Debit',\\\\n    label: 'Debit',\\\\n    title: 'Debit',\\\\n    description:\\\\n      'Credit transaction will deduct from the outstanding amount of (Delivery Associate)'\\\\n  }\\\\n]\\\\nexport const DefaultSelect = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'default-select') as tSelectVariant}\\\\n          optionList={object('optionList', options)}\\\\n          label={text('label', 'Name')}\\\\n          required={boolean('required', true)}\\\\n          loading={boolean('loading', true)}\\\\n          onChange={action('Value selected')}\\\\n          error={boolean('error', false)}\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\n          placeholder={text('placeholder', 'Select')}\\\\n          value={text('value', 'chocolate')}\\\\n          width={text('width', '300px')}\\\\n          disabled={boolean('disabled', false)}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const FormSelectPlayground = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'form-select') as tSelectVariant}\\\\n          optionList={object('optionList', FormSelectOption)}\\\\n          label={text('label', 'Name')}\\\\n          required={boolean('required', true)}\\\\n          loading={boolean('loading', false)}\\\\n          onChange={action('Value selected')}\\\\n          error={boolean('error', false)}\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\n          placeholder={text('placeholder', 'Select')}\\\\n          value={text('value', 'emailVerificationPending')}\\\\n          width={text('width', '300px')}\\\\n          onMenuOpen={action('Menu Open')}\\\\n          onMenuClose={action('Menu Close')}\\\\n          showDescription={boolean('Show Description', true)}\\\\n          tooltipMessage={text('tooltipMessage', 'i am form select tooltip')}\\\\n          disabled={boolean('disabled', false)}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\nexport const FormSelectDeferred = () => {\\\\n  const [isLoading, setIsLoading] = React.useState<boolean>(false)\\\\n  const [menuIsOpen, setMenuIsOpen] = React.useState<boolean | undefined>(\\\\n    undefined\\\\n  )\\\\n  const [dropdownOptions, setDropdownOptions] = React.useState<\\\\n    { label: string; value: string }[]\\\\n  >([])\\\\n\\\\n  const [selectedValue, setSelectedValue] = React.useState<string>()\\\\n\\\\n  const handleMenuOpen = () => {\\\\n    action('Menu Opened!')()\\\\n    // setMenuIsOpen(true)\\\\n    if (dropdownOptions.length === 0) {\\\\n      setIsLoading(true)\\\\n      setTimeout(() => {\\\\n        setDropdownOptions(options)\\\\n        setIsLoading(false)\\\\n        setMenuIsOpen(true)\\\\n      }, 2000)\\\\n    }\\\\n  }\\\\n\\\\n  const handleMenuClose = () => {\\\\n    action('Menu Closed!')()\\\\n    setMenuIsOpen(undefined)\\\\n  }\\\\n\\\\n  const handleChange = (value?: string) => {\\\\n    action('Value selected')(value)\\\\n    setSelectedValue(value)\\\\n    setMenuIsOpen(undefined)\\\\n  }\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box py='3em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'form-select') as tSelectVariant}\\\\n          optionList={dropdownOptions}\\\\n          label={text('label', 'Name')}\\\\n          required={boolean('required', true)}\\\\n          loading={isLoading}\\\\n          onChange={handleChange}\\\\n          error={boolean('error', false)}\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\n          placeholder={text('placeholder', 'Select')}\\\\n          value={selectedValue}\\\\n          isMenuOpen={menuIsOpen}\\\\n          width={text('width', '300px')}\\\\n          onMenuOpen={handleMenuOpen}\\\\n          onMenuClose={handleMenuClose}\\\\n          onInputChange={action('onInputChange')}\\\\n          disabled={boolean('disabled', false)}\\\\n          limitOptionsList={50}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const FormSelectAsync = () => {\\\\n  // const [menuIsOpen, setMenuIsOpen] = React.useState<boolean>()\\\\n  const [options] = React.useState<OptionsType<any>>([])\\\\n  const handleLoadOptions = React.useCallback(\\\\n    (inputValue: string, callback: (options: OptionsType<any>) => void) => {\\\\n      console.log(inputValue)\\\\n      if (inputValue.length >= 3) {\\\\n        const newOptions = [\\\\n          {\\\\n            label: inputValue + ' - Option 1',\\\\n            value: inputValue + '1',\\\\n            description: inputValue + ' - Option 1'\\\\n          },\\\\n          {\\\\n            label: inputValue + ' - Option 2',\\\\n            value: inputValue + '2',\\\\n            description: inputValue + ' - Option 2'\\\\n          }\\\\n        ]\\\\n        // setOptions(newOptions)\\\\n        callback(newOptions)\\\\n      } else {\\\\n        callback(options)\\\\n      }\\\\n    },\\\\n    []\\\\n  )\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box py='3em' bgColor='grey.50'>\\\\n        <div style={{ width: '350px' }}>\\\\n          <AsyncFormSelect\\\\n            loadOptions={handleLoadOptions}\\\\n            cacheOptions\\\\n            label={text('label', 'Postal Code')}\\\\n            required={boolean('required', false)}\\\\n            error={boolean('error', false)}\\\\n            errorMessage={text('errorMessage', 'Postal Code is required')}\\\\n            disabled={boolean('disabled', false)}\\\\n            showDescription={boolean('showDescription', false)}\\\\n          />\\\\n        </div>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const ListView = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'list-view') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          onChange={action('Value selected')}\\\\n          width={text('width', '120px')}\\\\n          disabled={boolean('disabled', false)}\\\\n          limitOptionsList={50}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\nexport const EditedListView = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'inline-edit') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          onChange={action('Value selected')}\\\\n          width={text('width', '100%')}\\\\n          disabled={boolean('disabled', false)}\\\\n          limitOptionsList={50}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\nexport const DashedDropdown = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'dashed-dropdown') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          onChange={action('Value selected')}\\\\n          width={text('width', '100%')}\\\\n          disabled={boolean('disabled', false)}\\\\n          value={text('value', '') as tSelectVariant}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/DropDown.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\nimport { action } from '@storybook/addon-actions'\\nimport { boolean, object, text } from '@storybook/addon-knobs'\\nimport React from 'react'\\nimport DropDown from '.'\\nimport { path } from '..'\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\nimport Box from '../../atoms/Box'\\nimport { tSelectVariant } from './interface'\\n// import { InputActionMeta } from 'react-select'\\n// import AsyncSelect from 'react-select/async'\\nimport { OptionsType } from 'react-select'\\nimport AsyncFormSelect from './AsyncFormSelect'\\n\\nexport default {parameters: {\\\"storySource\\\":{\\\"source\\\":\\\"import { action } from '@storybook/addon-actions'\\\\nimport { boolean, object, text } from '@storybook/addon-knobs'\\\\nimport React from 'react'\\\\nimport DropDown from '.'\\\\nimport { path } from '..'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport Box from '../../atoms/Box'\\\\nimport { tSelectVariant } from './interface'\\\\n// import { InputActionMeta } from 'react-select'\\\\n// import AsyncSelect from 'react-select/async'\\\\nimport { OptionsType } from 'react-select'\\\\nimport AsyncFormSelect from './AsyncFormSelect'\\\\n\\\\nexport default {\\\\n  title: `${path}/DropDown`,\\\\n  component: DropDown\\\\n}\\\\n\\\\nconst options = [\\\\n  {\\\\n    value: 'emailVerificationPending',\\\\n    label: 'Email Verification Pending Shipper',\\\\n    title: 'Email Verification Pending Shipper'\\\\n  },\\\\n  { value: 'allShippers', label: 'All Shippers', title: 'All Shippers' },\\\\n  {\\\\n    value: 'approvalPendingShippers',\\\\n    label: 'Approval Pending Shippers',\\\\n    title: 'Approval Pending Shippers'\\\\n  }\\\\n]\\\\n\\\\nconst ListViewOption = [\\\\n  { value: 'Available', label: 'Available', title: 'Available' },\\\\n  { value: 'Dispatched', label: 'Dispatched', title: 'Dispatched' },\\\\n  { value: 'Inactive', label: 'Inactive', title: 'Inactive' }\\\\n]\\\\n\\\\nconst FormSelectOption = [\\\\n  {\\\\n    value: 'Credit',\\\\n    label: 'Credit',\\\\n    title: 'Credit',\\\\n    description:\\\\n      'Credit transaction will add to the outstanding amount of (Delivery Associate)'\\\\n  },\\\\n  {\\\\n    value: 'Debit',\\\\n    label: 'Debit',\\\\n    title: 'Debit',\\\\n    description:\\\\n      'Credit transaction will deduct from the outstanding amount of (Delivery Associate)'\\\\n  }\\\\n]\\\\nexport const DefaultSelect = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'default-select') as tSelectVariant}\\\\n          optionList={object('optionList', options)}\\\\n          label={text('label', 'Name')}\\\\n          required={boolean('required', true)}\\\\n          loading={boolean('loading', true)}\\\\n          onChange={action('Value selected')}\\\\n          error={boolean('error', false)}\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\n          placeholder={text('placeholder', 'Select')}\\\\n          value={text('value', 'chocolate')}\\\\n          width={text('width', '300px')}\\\\n          disabled={boolean('disabled', false)}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const FormSelectPlayground = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'form-select') as tSelectVariant}\\\\n          optionList={object('optionList', FormSelectOption)}\\\\n          label={text('label', 'Name')}\\\\n          required={boolean('required', true)}\\\\n          loading={boolean('loading', false)}\\\\n          onChange={action('Value selected')}\\\\n          error={boolean('error', false)}\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\n          placeholder={text('placeholder', 'Select')}\\\\n          value={text('value', 'emailVerificationPending')}\\\\n          width={text('width', '300px')}\\\\n          onMenuOpen={action('Menu Open')}\\\\n          onMenuClose={action('Menu Close')}\\\\n          showDescription={boolean('Show Description', true)}\\\\n          tooltipMessage={text('tooltipMessage', 'i am form select tooltip')}\\\\n          disabled={boolean('disabled', false)}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\nexport const FormSelectDeferred = () => {\\\\n  const [isLoading, setIsLoading] = React.useState<boolean>(false)\\\\n  const [menuIsOpen, setMenuIsOpen] = React.useState<boolean | undefined>(\\\\n    undefined\\\\n  )\\\\n  const [dropdownOptions, setDropdownOptions] = React.useState<\\\\n    { label: string; value: string }[]\\\\n  >([])\\\\n\\\\n  const [selectedValue, setSelectedValue] = React.useState<string>()\\\\n\\\\n  const handleMenuOpen = () => {\\\\n    action('Menu Opened!')()\\\\n    // setMenuIsOpen(true)\\\\n    if (dropdownOptions.length === 0) {\\\\n      setIsLoading(true)\\\\n      setTimeout(() => {\\\\n        setDropdownOptions(options)\\\\n        setIsLoading(false)\\\\n        setMenuIsOpen(true)\\\\n      }, 2000)\\\\n    }\\\\n  }\\\\n\\\\n  const handleMenuClose = () => {\\\\n    action('Menu Closed!')()\\\\n    setMenuIsOpen(undefined)\\\\n  }\\\\n\\\\n  const handleChange = (value?: string) => {\\\\n    action('Value selected')(value)\\\\n    setSelectedValue(value)\\\\n    setMenuIsOpen(undefined)\\\\n  }\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box py='3em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'form-select') as tSelectVariant}\\\\n          optionList={dropdownOptions}\\\\n          label={text('label', 'Name')}\\\\n          required={boolean('required', true)}\\\\n          loading={isLoading}\\\\n          onChange={handleChange}\\\\n          error={boolean('error', false)}\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\n          placeholder={text('placeholder', 'Select')}\\\\n          value={selectedValue}\\\\n          isMenuOpen={menuIsOpen}\\\\n          width={text('width', '300px')}\\\\n          onMenuOpen={handleMenuOpen}\\\\n          onMenuClose={handleMenuClose}\\\\n          onInputChange={action('onInputChange')}\\\\n          disabled={boolean('disabled', false)}\\\\n          limitOptionsList={50}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const FormSelectAsync = () => {\\\\n  // const [menuIsOpen, setMenuIsOpen] = React.useState<boolean>()\\\\n  const [options] = React.useState<OptionsType<any>>([])\\\\n  const handleLoadOptions = React.useCallback(\\\\n    (inputValue: string, callback: (options: OptionsType<any>) => void) => {\\\\n      console.log(inputValue)\\\\n      if (inputValue.length >= 3) {\\\\n        const newOptions = [\\\\n          {\\\\n            label: inputValue + ' - Option 1',\\\\n            value: inputValue + '1',\\\\n            description: inputValue + ' - Option 1'\\\\n          },\\\\n          {\\\\n            label: inputValue + ' - Option 2',\\\\n            value: inputValue + '2',\\\\n            description: inputValue + ' - Option 2'\\\\n          }\\\\n        ]\\\\n        // setOptions(newOptions)\\\\n        callback(newOptions)\\\\n      } else {\\\\n        callback(options)\\\\n      }\\\\n    },\\\\n    []\\\\n  )\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box py='3em' bgColor='grey.50'>\\\\n        <div style={{ width: '350px' }}>\\\\n          <AsyncFormSelect\\\\n            loadOptions={handleLoadOptions}\\\\n            cacheOptions\\\\n            label={text('label', 'Postal Code')}\\\\n            required={boolean('required', false)}\\\\n            error={boolean('error', false)}\\\\n            errorMessage={text('errorMessage', 'Postal Code is required')}\\\\n            disabled={boolean('disabled', false)}\\\\n            showDescription={boolean('showDescription', false)}\\\\n          />\\\\n        </div>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const ListView = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'list-view') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          onChange={action('Value selected')}\\\\n          width={text('width', '120px')}\\\\n          disabled={boolean('disabled', false)}\\\\n          limitOptionsList={50}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\nexport const EditedListView = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'inline-edit') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          onChange={action('Value selected')}\\\\n          width={text('width', '100%')}\\\\n          disabled={boolean('disabled', false)}\\\\n          limitOptionsList={50}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\nexport const DashedDropdown = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'dashed-dropdown') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          onChange={action('Value selected')}\\\\n          width={text('width', '100%')}\\\\n          disabled={boolean('disabled', false)}\\\\n          value={text('value', '') as tSelectVariant}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\",\\\"locationsMap\\\":{}},},\\n  title: `${path}/DropDown`,\\n  component: DropDown\\n}\\n\\nconst options = [\\n  {\\n    value: 'emailVerificationPending',\\n    label: 'Email Verification Pending Shipper',\\n    title: 'Email Verification Pending Shipper'\\n  },\\n  { value: 'allShippers', label: 'All Shippers', title: 'All Shippers' },\\n  {\\n    value: 'approvalPendingShippers',\\n    label: 'Approval Pending Shippers',\\n    title: 'Approval Pending Shippers'\\n  }\\n]\\n\\nconst ListViewOption = [\\n  { value: 'Available', label: 'Available', title: 'Available' },\\n  { value: 'Dispatched', label: 'Dispatched', title: 'Dispatched' },\\n  { value: 'Inactive', label: 'Inactive', title: 'Inactive' }\\n]\\n\\nconst FormSelectOption = [\\n  {\\n    value: 'Credit',\\n    label: 'Credit',\\n    title: 'Credit',\\n    description:\\n      'Credit transaction will add to the outstanding amount of (Delivery Associate)'\\n  },\\n  {\\n    value: 'Debit',\\n    label: 'Debit',\\n    title: 'Debit',\\n    description:\\n      'Credit transaction will deduct from the outstanding amount of (Delivery Associate)'\\n  }\\n]\\nexport const DefaultSelect = addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='6em' bgColor='grey.50'>\\n        <DropDown\\n          variant={text('variant', 'default-select') as tSelectVariant}\\n          optionList={object('optionList', options)}\\n          label={text('label', 'Name')}\\n          required={boolean('required', true)}\\n          loading={boolean('loading', true)}\\n          onChange={action('Value selected')}\\n          error={boolean('error', false)}\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\n          placeholder={text('placeholder', 'Select')}\\n          value={text('value', 'chocolate')}\\n          width={text('width', '300px')}\\n          disabled={boolean('disabled', false)}\\n        />\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nexport const FormSelectPlayground = addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='6em' bgColor='grey.50'>\\n        <DropDown\\n          variant={text('variant', 'form-select') as tSelectVariant}\\n          optionList={object('optionList', FormSelectOption)}\\n          label={text('label', 'Name')}\\n          required={boolean('required', true)}\\n          loading={boolean('loading', false)}\\n          onChange={action('Value selected')}\\n          error={boolean('error', false)}\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\n          placeholder={text('placeholder', 'Select')}\\n          value={text('value', 'emailVerificationPending')}\\n          width={text('width', '300px')}\\n          onMenuOpen={action('Menu Open')}\\n          onMenuClose={action('Menu Close')}\\n          showDescription={boolean('Show Description', true)}\\n          tooltipMessage={text('tooltipMessage', 'i am form select tooltip')}\\n          disabled={boolean('disabled', false)}\\n        />\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\nexport const FormSelectDeferred = addSourceDecorator(() => {\\n  const [isLoading, setIsLoading] = React.useState<boolean>(false)\\n  const [menuIsOpen, setMenuIsOpen] = React.useState<boolean | undefined>(\\n    undefined\\n  )\\n  const [dropdownOptions, setDropdownOptions] = React.useState<\\n    { label: string; value: string }[]\\n  >([])\\n\\n  const [selectedValue, setSelectedValue] = React.useState<string>()\\n\\n  const handleMenuOpen = () => {\\n    action('Menu Opened!')()\\n    // setMenuIsOpen(true)\\n    if (dropdownOptions.length === 0) {\\n      setIsLoading(true)\\n      setTimeout(() => {\\n        setDropdownOptions(options)\\n        setIsLoading(false)\\n        setMenuIsOpen(true)\\n      }, 2000)\\n    }\\n  }\\n\\n  const handleMenuClose = () => {\\n    action('Menu Closed!')()\\n    setMenuIsOpen(undefined)\\n  }\\n\\n  const handleChange = (value?: string) => {\\n    action('Value selected')(value)\\n    setSelectedValue(value)\\n    setMenuIsOpen(undefined)\\n  }\\n  return (\\n    <ThemeWrapper>\\n      <Box py='3em' bgColor='grey.50'>\\n        <DropDown\\n          variant={text('variant', 'form-select') as tSelectVariant}\\n          optionList={dropdownOptions}\\n          label={text('label', 'Name')}\\n          required={boolean('required', true)}\\n          loading={isLoading}\\n          onChange={handleChange}\\n          error={boolean('error', false)}\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\n          placeholder={text('placeholder', 'Select')}\\n          value={selectedValue}\\n          isMenuOpen={menuIsOpen}\\n          width={text('width', '300px')}\\n          onMenuOpen={handleMenuOpen}\\n          onMenuClose={handleMenuClose}\\n          onInputChange={action('onInputChange')}\\n          disabled={boolean('disabled', false)}\\n          limitOptionsList={50}\\n        />\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nexport const FormSelectAsync = addSourceDecorator(() => {\\n  // const [menuIsOpen, setMenuIsOpen] = React.useState<boolean>()\\n  const [options] = React.useState<OptionsType<any>>([])\\n  const handleLoadOptions = React.useCallback(\\n    (inputValue: string, callback: (options: OptionsType<any>) => void) => {\\n      console.log(inputValue)\\n      if (inputValue.length >= 3) {\\n        const newOptions = [\\n          {\\n            label: inputValue + ' - Option 1',\\n            value: inputValue + '1',\\n            description: inputValue + ' - Option 1'\\n          },\\n          {\\n            label: inputValue + ' - Option 2',\\n            value: inputValue + '2',\\n            description: inputValue + ' - Option 2'\\n          }\\n        ]\\n        // setOptions(newOptions)\\n        callback(newOptions)\\n      } else {\\n        callback(options)\\n      }\\n    },\\n    []\\n  )\\n\\n  return (\\n    <ThemeWrapper>\\n      <Box py='3em' bgColor='grey.50'>\\n        <div style={{ width: '350px' }}>\\n          <AsyncFormSelect\\n            loadOptions={handleLoadOptions}\\n            cacheOptions\\n            label={text('label', 'Postal Code')}\\n            required={boolean('required', false)}\\n            error={boolean('error', false)}\\n            errorMessage={text('errorMessage', 'Postal Code is required')}\\n            disabled={boolean('disabled', false)}\\n            showDescription={boolean('showDescription', false)}\\n          />\\n        </div>\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nexport const ListView = addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='6em' bgColor='grey.50'>\\n        <DropDown\\n          variant={text('variant', 'list-view') as tSelectVariant}\\n          optionList={object('optionList', ListViewOption)}\\n          onChange={action('Value selected')}\\n          width={text('width', '120px')}\\n          disabled={boolean('disabled', false)}\\n          limitOptionsList={50}\\n        />\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\nexport const EditedListView = addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='6em' bgColor='grey.50'>\\n        <DropDown\\n          variant={text('variant', 'inline-edit') as tSelectVariant}\\n          optionList={object('optionList', ListViewOption)}\\n          onChange={action('Value selected')}\\n          width={text('width', '100%')}\\n          disabled={boolean('disabled', false)}\\n          limitOptionsList={50}\\n        />\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\nexport const DashedDropdown = addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='6em' bgColor='grey.50'>\\n        <DropDown\\n          variant={text('variant', 'dashed-dropdown') as tSelectVariant}\\n          optionList={object('optionList', ListViewOption)}\\n          onChange={action('Value selected')}\\n          width={text('width', '100%')}\\n          disabled={boolean('disabled', false)}\\n          value={text('value', '') as tSelectVariant}\\n        />\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\"; // @ts-ignore\n\nvar __ADDS_MAP__ = {}; // @ts-ignore\n\nvar __MAIN_FILE_LOCATION__ = \"/DropDown.stories.tsx\"; // @ts-ignore\n\nvar __MODULE_DEPENDENCIES__ = []; // @ts-ignore\n\nvar __LOCAL_DEPENDENCIES__ = {}; // @ts-ignore\n\nvar __IDS_TO_FRAMEWORKS__ = {};\n/* eslint-disable */\n// @ts-nocheck\n// @ts-ignore\n\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource; // @ts-ignore\n\n\nvar addSourceDecorator = require(\"@storybook/source-loader/preview\").addSource; // @ts-ignore\n\n\nvar __SOURCE_PREFIX__ = \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/molecules/DropDown\"; // @ts-ignore\n\nvar __STORY__ = \"import { action } from '@storybook/addon-actions'\\nimport { boolean, object, text } from '@storybook/addon-knobs'\\nimport React from 'react'\\nimport DropDown from '.'\\nimport { path } from '..'\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\nimport Box from '../../atoms/Box'\\nimport { tSelectVariant } from './interface'\\n// import { InputActionMeta } from 'react-select'\\n// import AsyncSelect from 'react-select/async'\\nimport { OptionsType } from 'react-select'\\nimport AsyncFormSelect from './AsyncFormSelect'\\n\\nexport default {\\n  title: `${path}/DropDown`,\\n  component: DropDown\\n}\\n\\nconst options = [\\n  {\\n    value: 'emailVerificationPending',\\n    label: 'Email Verification Pending Shipper',\\n    title: 'Email Verification Pending Shipper'\\n  },\\n  { value: 'allShippers', label: 'All Shippers', title: 'All Shippers' },\\n  {\\n    value: 'approvalPendingShippers',\\n    label: 'Approval Pending Shippers',\\n    title: 'Approval Pending Shippers'\\n  }\\n]\\n\\nconst ListViewOption = [\\n  { value: 'Available', label: 'Available', title: 'Available' },\\n  { value: 'Dispatched', label: 'Dispatched', title: 'Dispatched' },\\n  { value: 'Inactive', label: 'Inactive', title: 'Inactive' }\\n]\\n\\nconst FormSelectOption = [\\n  {\\n    value: 'Credit',\\n    label: 'Credit',\\n    title: 'Credit',\\n    description:\\n      'Credit transaction will add to the outstanding amount of (Delivery Associate)'\\n  },\\n  {\\n    value: 'Debit',\\n    label: 'Debit',\\n    title: 'Debit',\\n    description:\\n      'Credit transaction will deduct from the outstanding amount of (Delivery Associate)'\\n  }\\n]\\nexport const DefaultSelect = () => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='6em' bgColor='grey.50'>\\n        <DropDown\\n          variant={text('variant', 'default-select') as tSelectVariant}\\n          optionList={object('optionList', options)}\\n          label={text('label', 'Name')}\\n          required={boolean('required', true)}\\n          loading={boolean('loading', true)}\\n          onChange={action('Value selected')}\\n          error={boolean('error', false)}\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\n          placeholder={text('placeholder', 'Select')}\\n          value={text('value', 'chocolate')}\\n          width={text('width', '300px')}\\n          disabled={boolean('disabled', false)}\\n        />\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}\\n\\nexport const FormSelectPlayground = () => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='6em' bgColor='grey.50'>\\n        <DropDown\\n          variant={text('variant', 'form-select') as tSelectVariant}\\n          optionList={object('optionList', FormSelectOption)}\\n          label={text('label', 'Name')}\\n          required={boolean('required', true)}\\n          loading={boolean('loading', false)}\\n          onChange={action('Value selected')}\\n          error={boolean('error', false)}\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\n          placeholder={text('placeholder', 'Select')}\\n          value={text('value', 'emailVerificationPending')}\\n          width={text('width', '300px')}\\n          onMenuOpen={action('Menu Open')}\\n          onMenuClose={action('Menu Close')}\\n          showDescription={boolean('Show Description', true)}\\n          tooltipMessage={text('tooltipMessage', 'i am form select tooltip')}\\n          disabled={boolean('disabled', false)}\\n        />\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}\\nexport const FormSelectDeferred = () => {\\n  const [isLoading, setIsLoading] = React.useState<boolean>(false)\\n  const [menuIsOpen, setMenuIsOpen] = React.useState<boolean | undefined>(\\n    undefined\\n  )\\n  const [dropdownOptions, setDropdownOptions] = React.useState<\\n    { label: string; value: string }[]\\n  >([])\\n\\n  const [selectedValue, setSelectedValue] = React.useState<string>()\\n\\n  const handleMenuOpen = () => {\\n    action('Menu Opened!')()\\n    // setMenuIsOpen(true)\\n    if (dropdownOptions.length === 0) {\\n      setIsLoading(true)\\n      setTimeout(() => {\\n        setDropdownOptions(options)\\n        setIsLoading(false)\\n        setMenuIsOpen(true)\\n      }, 2000)\\n    }\\n  }\\n\\n  const handleMenuClose = () => {\\n    action('Menu Closed!')()\\n    setMenuIsOpen(undefined)\\n  }\\n\\n  const handleChange = (value?: string) => {\\n    action('Value selected')(value)\\n    setSelectedValue(value)\\n    setMenuIsOpen(undefined)\\n  }\\n  return (\\n    <ThemeWrapper>\\n      <Box py='3em' bgColor='grey.50'>\\n        <DropDown\\n          variant={text('variant', 'form-select') as tSelectVariant}\\n          optionList={dropdownOptions}\\n          label={text('label', 'Name')}\\n          required={boolean('required', true)}\\n          loading={isLoading}\\n          onChange={handleChange}\\n          error={boolean('error', false)}\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\n          placeholder={text('placeholder', 'Select')}\\n          value={selectedValue}\\n          isMenuOpen={menuIsOpen}\\n          width={text('width', '300px')}\\n          onMenuOpen={handleMenuOpen}\\n          onMenuClose={handleMenuClose}\\n          onInputChange={action('onInputChange')}\\n          disabled={boolean('disabled', false)}\\n          limitOptionsList={50}\\n        />\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}\\n\\nexport const FormSelectAsync = () => {\\n  // const [menuIsOpen, setMenuIsOpen] = React.useState<boolean>()\\n  const [options] = React.useState<OptionsType<any>>([])\\n  const handleLoadOptions = React.useCallback(\\n    (inputValue: string, callback: (options: OptionsType<any>) => void) => {\\n      console.log(inputValue)\\n      if (inputValue.length >= 3) {\\n        const newOptions = [\\n          {\\n            label: inputValue + ' - Option 1',\\n            value: inputValue + '1',\\n            description: inputValue + ' - Option 1'\\n          },\\n          {\\n            label: inputValue + ' - Option 2',\\n            value: inputValue + '2',\\n            description: inputValue + ' - Option 2'\\n          }\\n        ]\\n        // setOptions(newOptions)\\n        callback(newOptions)\\n      } else {\\n        callback(options)\\n      }\\n    },\\n    []\\n  )\\n\\n  return (\\n    <ThemeWrapper>\\n      <Box py='3em' bgColor='grey.50'>\\n        <div style={{ width: '350px' }}>\\n          <AsyncFormSelect\\n            loadOptions={handleLoadOptions}\\n            cacheOptions\\n            label={text('label', 'Postal Code')}\\n            required={boolean('required', false)}\\n            error={boolean('error', false)}\\n            errorMessage={text('errorMessage', 'Postal Code is required')}\\n            disabled={boolean('disabled', false)}\\n            showDescription={boolean('showDescription', false)}\\n          />\\n        </div>\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}\\n\\nexport const ListView = () => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='6em' bgColor='grey.50'>\\n        <DropDown\\n          variant={text('variant', 'list-view') as tSelectVariant}\\n          optionList={object('optionList', ListViewOption)}\\n          onChange={action('Value selected')}\\n          width={text('width', '120px')}\\n          disabled={boolean('disabled', false)}\\n          limitOptionsList={50}\\n        />\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}\\nexport const EditedListView = () => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='6em' bgColor='grey.50'>\\n        <DropDown\\n          variant={text('variant', 'inline-edit') as tSelectVariant}\\n          optionList={object('optionList', ListViewOption)}\\n          onChange={action('Value selected')}\\n          width={text('width', '100%')}\\n          disabled={boolean('disabled', false)}\\n          limitOptionsList={50}\\n        />\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}\\nexport const DashedDropdown = () => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='6em' bgColor='grey.50'>\\n        <DropDown\\n          variant={text('variant', 'dashed-dropdown') as tSelectVariant}\\n          optionList={object('optionList', ListViewOption)}\\n          onChange={action('Value selected')}\\n          width={text('width', '100%')}\\n          disabled={boolean('disabled', false)}\\n          value={text('value', '') as tSelectVariant}\\n        />\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}\\n\"; // @ts-ignore\n\nvar __ADDS_MAP__ = {}; // @ts-ignore\n\nvar __MAIN_FILE_LOCATION__ = \"/DropDown.stories.tsx\"; // @ts-ignore\n\nvar __MODULE_DEPENDENCIES__ = []; // @ts-ignore\n\nvar __LOCAL_DEPENDENCIES__ = {}; // @ts-ignore\n\nvar __IDS_TO_FRAMEWORKS__ = {};\nimport { action } from '@storybook/addon-actions';\nimport { boolean as _boolean, object, text } from '@storybook/addon-knobs';\nimport React from 'react';\nimport DropDown from '.';\nimport { path } from '..';\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper';\nimport Box from '../../atoms/Box';\nimport AsyncFormSelect from './AsyncFormSelect';\nexport default {\n  parameters: (_parameters = {\n    \"storySource\": {\n      \"source\": \"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/molecules/DropDown\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"\\\\n\\\\n// @ts-nocheck\\\\n// @ts-ignore\\\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\\\n// @ts-ignore\\\\nvar addSourceDecorator = require(\\\\\\\"@storybook/source-loader/preview\\\\\\\").addSource;\\\\n// @ts-ignore\\\\nvar __SOURCE_PREFIX__ = \\\\\\\"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/molecules/DropDown\\\\\\\";\\\\n// @ts-ignore\\\\nvar __STORY__ = \\\\\\\"import { action } from '@storybook/addon-actions'\\\\\\\\nimport { boolean, object, text } from '@storybook/addon-knobs'\\\\\\\\nimport React from 'react'\\\\\\\\nimport DropDown from '.'\\\\\\\\nimport { path } from '..'\\\\\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\\\\\nimport Box from '../../atoms/Box'\\\\\\\\nimport { tSelectVariant } from './interface'\\\\\\\\n// import { InputActionMeta } from 'react-select'\\\\\\\\n// import AsyncSelect from 'react-select/async'\\\\\\\\nimport { OptionsType } from 'react-select'\\\\\\\\nimport AsyncFormSelect from './AsyncFormSelect'\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/DropDown`,\\\\\\\\n  component: DropDown\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst options = [\\\\\\\\n  {\\\\\\\\n    value: 'emailVerificationPending',\\\\\\\\n    label: 'Email Verification Pending Shipper',\\\\\\\\n    title: 'Email Verification Pending Shipper'\\\\\\\\n  },\\\\\\\\n  { value: 'allShippers', label: 'All Shippers', title: 'All Shippers' },\\\\\\\\n  {\\\\\\\\n    value: 'approvalPendingShippers',\\\\\\\\n    label: 'Approval Pending Shippers',\\\\\\\\n    title: 'Approval Pending Shippers'\\\\\\\\n  }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst ListViewOption = [\\\\\\\\n  { value: 'Available', label: 'Available', title: 'Available' },\\\\\\\\n  { value: 'Dispatched', label: 'Dispatched', title: 'Dispatched' },\\\\\\\\n  { value: 'Inactive', label: 'Inactive', title: 'Inactive' }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst FormSelectOption = [\\\\\\\\n  {\\\\\\\\n    value: 'Credit',\\\\\\\\n    label: 'Credit',\\\\\\\\n    title: 'Credit',\\\\\\\\n    description:\\\\\\\\n      'Credit transaction will add to the outstanding amount of (Delivery Associate)'\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    value: 'Debit',\\\\\\\\n    label: 'Debit',\\\\\\\\n    title: 'Debit',\\\\\\\\n    description:\\\\\\\\n      'Credit transaction will deduct from the outstanding amount of (Delivery Associate)'\\\\\\\\n  }\\\\\\\\n]\\\\\\\\nexport const DefaultSelect = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='6em' bgColor='grey.50'>\\\\\\\\n        <DropDown\\\\\\\\n          variant={text('variant', 'default-select') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', options)}\\\\\\\\n          label={text('label', 'Name')}\\\\\\\\n          required={boolean('required', true)}\\\\\\\\n          loading={boolean('loading', true)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          error={boolean('error', false)}\\\\\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\\\\\n          placeholder={text('placeholder', 'Select')}\\\\\\\\n          value={text('value', 'chocolate')}\\\\\\\\n          width={text('width', '300px')}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const FormSelectPlayground = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='6em' bgColor='grey.50'>\\\\\\\\n        <DropDown\\\\\\\\n          variant={text('variant', 'form-select') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', FormSelectOption)}\\\\\\\\n          label={text('label', 'Name')}\\\\\\\\n          required={boolean('required', true)}\\\\\\\\n          loading={boolean('loading', false)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          error={boolean('error', false)}\\\\\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\\\\\n          placeholder={text('placeholder', 'Select')}\\\\\\\\n          value={text('value', 'emailVerificationPending')}\\\\\\\\n          width={text('width', '300px')}\\\\\\\\n          onMenuOpen={action('Menu Open')}\\\\\\\\n          onMenuClose={action('Menu Close')}\\\\\\\\n          showDescription={boolean('Show Description', true)}\\\\\\\\n          tooltipMessage={text('tooltipMessage', 'i am form select tooltip')}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\nexport const FormSelectDeferred = () => {\\\\\\\\n  const [isLoading, setIsLoading] = React.useState<boolean>(false)\\\\\\\\n  const [menuIsOpen, setMenuIsOpen] = React.useState<boolean | undefined>(\\\\\\\\n    undefined\\\\\\\\n  )\\\\\\\\n  const [dropdownOptions, setDropdownOptions] = React.useState<\\\\\\\\n    { label: string; value: string }[]\\\\\\\\n  >([])\\\\\\\\n\\\\\\\\n  const [selectedValue, setSelectedValue] = React.useState<string>()\\\\\\\\n\\\\\\\\n  const handleMenuOpen = () => {\\\\\\\\n    action('Menu Opened!')()\\\\\\\\n    // setMenuIsOpen(true)\\\\\\\\n    if (dropdownOptions.length === 0) {\\\\\\\\n      setIsLoading(true)\\\\\\\\n      setTimeout(() => {\\\\\\\\n        setDropdownOptions(options)\\\\\\\\n        setIsLoading(false)\\\\\\\\n        setMenuIsOpen(true)\\\\\\\\n      }, 2000)\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  const handleMenuClose = () => {\\\\\\\\n    action('Menu Closed!')()\\\\\\\\n    setMenuIsOpen(undefined)\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  const handleChange = (value?: string) => {\\\\\\\\n    action('Value selected')(value)\\\\\\\\n    setSelectedValue(value)\\\\\\\\n    setMenuIsOpen(undefined)\\\\\\\\n  }\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box py='3em' bgColor='grey.50'>\\\\\\\\n        <DropDown\\\\\\\\n          variant={text('variant', 'form-select') as tSelectVariant}\\\\\\\\n          optionList={dropdownOptions}\\\\\\\\n          label={text('label', 'Name')}\\\\\\\\n          required={boolean('required', true)}\\\\\\\\n          loading={isLoading}\\\\\\\\n          onChange={handleChange}\\\\\\\\n          error={boolean('error', false)}\\\\\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\\\\\n          placeholder={text('placeholder', 'Select')}\\\\\\\\n          value={selectedValue}\\\\\\\\n          isMenuOpen={menuIsOpen}\\\\\\\\n          width={text('width', '300px')}\\\\\\\\n          onMenuOpen={handleMenuOpen}\\\\\\\\n          onMenuClose={handleMenuClose}\\\\\\\\n          onInputChange={action('onInputChange')}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n          limitOptionsList={50}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const FormSelectAsync = () => {\\\\\\\\n  // const [menuIsOpen, setMenuIsOpen] = React.useState<boolean>()\\\\\\\\n  const [options] = React.useState<OptionsType<any>>([])\\\\\\\\n  const handleLoadOptions = React.useCallback(\\\\\\\\n    (inputValue: string, callback: (options: OptionsType<any>) => void) => {\\\\\\\\n      console.log(inputValue)\\\\\\\\n      if (inputValue.length >= 3) {\\\\\\\\n        const newOptions = [\\\\\\\\n          {\\\\\\\\n            label: inputValue + ' - Option 1',\\\\\\\\n            value: inputValue + '1',\\\\\\\\n            description: inputValue + ' - Option 1'\\\\\\\\n          },\\\\\\\\n          {\\\\\\\\n            label: inputValue + ' - Option 2',\\\\\\\\n            value: inputValue + '2',\\\\\\\\n            description: inputValue + ' - Option 2'\\\\\\\\n          }\\\\\\\\n        ]\\\\\\\\n        // setOptions(newOptions)\\\\\\\\n        callback(newOptions)\\\\\\\\n      } else {\\\\\\\\n        callback(options)\\\\\\\\n      }\\\\\\\\n    },\\\\\\\\n    []\\\\\\\\n  )\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box py='3em' bgColor='grey.50'>\\\\\\\\n        <div style={{ width: '350px' }}>\\\\\\\\n          <AsyncFormSelect\\\\\\\\n            loadOptions={handleLoadOptions}\\\\\\\\n            cacheOptions\\\\\\\\n            label={text('label', 'Postal Code')}\\\\\\\\n            required={boolean('required', false)}\\\\\\\\n            error={boolean('error', false)}\\\\\\\\n            errorMessage={text('errorMessage', 'Postal Code is required')}\\\\\\\\n            disabled={boolean('disabled', false)}\\\\\\\\n            showDescription={boolean('showDescription', false)}\\\\\\\\n          />\\\\\\\\n        </div>\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const ListView = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='6em' bgColor='grey.50'>\\\\\\\\n        <DropDown\\\\\\\\n          variant={text('variant', 'list-view') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', ListViewOption)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          width={text('width', '120px')}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n          limitOptionsList={50}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\nexport const EditedListView = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='6em' bgColor='grey.50'>\\\\\\\\n        <DropDown\\\\\\\\n          variant={text('variant', 'inline-edit') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', ListViewOption)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          width={text('width', '100%')}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n          limitOptionsList={50}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\nexport const DashedDropdown = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='6em' bgColor='grey.50'>\\\\\\\\n        <DropDown\\\\\\\\n          variant={text('variant', 'dashed-dropdown') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', ListViewOption)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          width={text('width', '100%')}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n          value={text('value', '') as tSelectVariant}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\";\\\\n// @ts-ignore\\\\nvar __ADDS_MAP__ = {};\\\\n// @ts-ignore\\\\nvar __MAIN_FILE_LOCATION__ = \\\\\\\"/DropDown.stories.tsx\\\\\\\";\\\\n// @ts-ignore\\\\nvar __MODULE_DEPENDENCIES__ = [];\\\\n// @ts-ignore\\\\nvar __LOCAL_DEPENDENCIES__ = {};\\\\n// @ts-ignore\\\\nvar __IDS_TO_FRAMEWORKS__ = {};\\\\n        \\\\nimport { action } from '@storybook/addon-actions'\\\\nimport { boolean, object, text } from '@storybook/addon-knobs'\\\\nimport React from 'react'\\\\nimport DropDown from '.'\\\\nimport { path } from '..'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport Box from '../../atoms/Box'\\\\nimport { tSelectVariant } from './interface'\\\\n// import { InputActionMeta } from 'react-select'\\\\n// import AsyncSelect from 'react-select/async'\\\\nimport { OptionsType } from 'react-select'\\\\nimport AsyncFormSelect from './AsyncFormSelect'\\\\n\\\\nexport default {parameters: {\\\\\\\"storySource\\\\\\\":{\\\\\\\"source\\\\\\\":\\\\\\\"import { action } from '@storybook/addon-actions'\\\\\\\\nimport { boolean, object, text } from '@storybook/addon-knobs'\\\\\\\\nimport React from 'react'\\\\\\\\nimport DropDown from '.'\\\\\\\\nimport { path } from '..'\\\\\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\\\\\nimport Box from '../../atoms/Box'\\\\\\\\nimport { tSelectVariant } from './interface'\\\\\\\\n// import { InputActionMeta } from 'react-select'\\\\\\\\n// import AsyncSelect from 'react-select/async'\\\\\\\\nimport { OptionsType } from 'react-select'\\\\\\\\nimport AsyncFormSelect from './AsyncFormSelect'\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/DropDown`,\\\\\\\\n  component: DropDown\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst options = [\\\\\\\\n  {\\\\\\\\n    value: 'emailVerificationPending',\\\\\\\\n    label: 'Email Verification Pending Shipper',\\\\\\\\n    title: 'Email Verification Pending Shipper'\\\\\\\\n  },\\\\\\\\n  { value: 'allShippers', label: 'All Shippers', title: 'All Shippers' },\\\\\\\\n  {\\\\\\\\n    value: 'approvalPendingShippers',\\\\\\\\n    label: 'Approval Pending Shippers',\\\\\\\\n    title: 'Approval Pending Shippers'\\\\\\\\n  }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst ListViewOption = [\\\\\\\\n  { value: 'Available', label: 'Available', title: 'Available' },\\\\\\\\n  { value: 'Dispatched', label: 'Dispatched', title: 'Dispatched' },\\\\\\\\n  { value: 'Inactive', label: 'Inactive', title: 'Inactive' }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst FormSelectOption = [\\\\\\\\n  {\\\\\\\\n    value: 'Credit',\\\\\\\\n    label: 'Credit',\\\\\\\\n    title: 'Credit',\\\\\\\\n    description:\\\\\\\\n      'Credit transaction will add to the outstanding amount of (Delivery Associate)'\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    value: 'Debit',\\\\\\\\n    label: 'Debit',\\\\\\\\n    title: 'Debit',\\\\\\\\n    description:\\\\\\\\n      'Credit transaction will deduct from the outstanding amount of (Delivery Associate)'\\\\\\\\n  }\\\\\\\\n]\\\\\\\\nexport const DefaultSelect = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='6em' bgColor='grey.50'>\\\\\\\\n        <DropDown\\\\\\\\n          variant={text('variant', 'default-select') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', options)}\\\\\\\\n          label={text('label', 'Name')}\\\\\\\\n          required={boolean('required', true)}\\\\\\\\n          loading={boolean('loading', true)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          error={boolean('error', false)}\\\\\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\\\\\n          placeholder={text('placeholder', 'Select')}\\\\\\\\n          value={text('value', 'chocolate')}\\\\\\\\n          width={text('width', '300px')}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const FormSelectPlayground = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='6em' bgColor='grey.50'>\\\\\\\\n        <DropDown\\\\\\\\n          variant={text('variant', 'form-select') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', FormSelectOption)}\\\\\\\\n          label={text('label', 'Name')}\\\\\\\\n          required={boolean('required', true)}\\\\\\\\n          loading={boolean('loading', false)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          error={boolean('error', false)}\\\\\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\\\\\n          placeholder={text('placeholder', 'Select')}\\\\\\\\n          value={text('value', 'emailVerificationPending')}\\\\\\\\n          width={text('width', '300px')}\\\\\\\\n          onMenuOpen={action('Menu Open')}\\\\\\\\n          onMenuClose={action('Menu Close')}\\\\\\\\n          showDescription={boolean('Show Description', true)}\\\\\\\\n          tooltipMessage={text('tooltipMessage', 'i am form select tooltip')}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\nexport const FormSelectDeferred = () => {\\\\\\\\n  const [isLoading, setIsLoading] = React.useState<boolean>(false)\\\\\\\\n  const [menuIsOpen, setMenuIsOpen] = React.useState<boolean | undefined>(\\\\\\\\n    undefined\\\\\\\\n  )\\\\\\\\n  const [dropdownOptions, setDropdownOptions] = React.useState<\\\\\\\\n    { label: string; value: string }[]\\\\\\\\n  >([])\\\\\\\\n\\\\\\\\n  const [selectedValue, setSelectedValue] = React.useState<string>()\\\\\\\\n\\\\\\\\n  const handleMenuOpen = () => {\\\\\\\\n    action('Menu Opened!')()\\\\\\\\n    // setMenuIsOpen(true)\\\\\\\\n    if (dropdownOptions.length === 0) {\\\\\\\\n      setIsLoading(true)\\\\\\\\n      setTimeout(() => {\\\\\\\\n        setDropdownOptions(options)\\\\\\\\n        setIsLoading(false)\\\\\\\\n        setMenuIsOpen(true)\\\\\\\\n      }, 2000)\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  const handleMenuClose = () => {\\\\\\\\n    action('Menu Closed!')()\\\\\\\\n    setMenuIsOpen(undefined)\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  const handleChange = (value?: string) => {\\\\\\\\n    action('Value selected')(value)\\\\\\\\n    setSelectedValue(value)\\\\\\\\n    setMenuIsOpen(undefined)\\\\\\\\n  }\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box py='3em' bgColor='grey.50'>\\\\\\\\n        <DropDown\\\\\\\\n          variant={text('variant', 'form-select') as tSelectVariant}\\\\\\\\n          optionList={dropdownOptions}\\\\\\\\n          label={text('label', 'Name')}\\\\\\\\n          required={boolean('required', true)}\\\\\\\\n          loading={isLoading}\\\\\\\\n          onChange={handleChange}\\\\\\\\n          error={boolean('error', false)}\\\\\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\\\\\n          placeholder={text('placeholder', 'Select')}\\\\\\\\n          value={selectedValue}\\\\\\\\n          isMenuOpen={menuIsOpen}\\\\\\\\n          width={text('width', '300px')}\\\\\\\\n          onMenuOpen={handleMenuOpen}\\\\\\\\n          onMenuClose={handleMenuClose}\\\\\\\\n          onInputChange={action('onInputChange')}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n          limitOptionsList={50}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const FormSelectAsync = () => {\\\\\\\\n  // const [menuIsOpen, setMenuIsOpen] = React.useState<boolean>()\\\\\\\\n  const [options] = React.useState<OptionsType<any>>([])\\\\\\\\n  const handleLoadOptions = React.useCallback(\\\\\\\\n    (inputValue: string, callback: (options: OptionsType<any>) => void) => {\\\\\\\\n      console.log(inputValue)\\\\\\\\n      if (inputValue.length >= 3) {\\\\\\\\n        const newOptions = [\\\\\\\\n          {\\\\\\\\n            label: inputValue + ' - Option 1',\\\\\\\\n            value: inputValue + '1',\\\\\\\\n            description: inputValue + ' - Option 1'\\\\\\\\n          },\\\\\\\\n          {\\\\\\\\n            label: inputValue + ' - Option 2',\\\\\\\\n            value: inputValue + '2',\\\\\\\\n            description: inputValue + ' - Option 2'\\\\\\\\n          }\\\\\\\\n        ]\\\\\\\\n        // setOptions(newOptions)\\\\\\\\n        callback(newOptions)\\\\\\\\n      } else {\\\\\\\\n        callback(options)\\\\\\\\n      }\\\\\\\\n    },\\\\\\\\n    []\\\\\\\\n  )\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box py='3em' bgColor='grey.50'>\\\\\\\\n        <div style={{ width: '350px' }}>\\\\\\\\n          <AsyncFormSelect\\\\\\\\n            loadOptions={handleLoadOptions}\\\\\\\\n            cacheOptions\\\\\\\\n            label={text('label', 'Postal Code')}\\\\\\\\n            required={boolean('required', false)}\\\\\\\\n            error={boolean('error', false)}\\\\\\\\n            errorMessage={text('errorMessage', 'Postal Code is required')}\\\\\\\\n            disabled={boolean('disabled', false)}\\\\\\\\n            showDescription={boolean('showDescription', false)}\\\\\\\\n          />\\\\\\\\n        </div>\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const ListView = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='6em' bgColor='grey.50'>\\\\\\\\n        <DropDown\\\\\\\\n          variant={text('variant', 'list-view') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', ListViewOption)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          width={text('width', '120px')}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n          limitOptionsList={50}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\nexport const EditedListView = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='6em' bgColor='grey.50'>\\\\\\\\n        <DropDown\\\\\\\\n          variant={text('variant', 'inline-edit') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', ListViewOption)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          width={text('width', '100%')}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n          limitOptionsList={50}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\nexport const DashedDropdown = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='6em' bgColor='grey.50'>\\\\\\\\n        <DropDown\\\\\\\\n          variant={text('variant', 'dashed-dropdown') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', ListViewOption)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          width={text('width', '100%')}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n          value={text('value', '') as tSelectVariant}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\",\\\\\\\"locationsMap\\\\\\\":{}},},\\\\n  title: `${path}/DropDown`,\\\\n  component: DropDown\\\\n}\\\\n\\\\nconst options = [\\\\n  {\\\\n    value: 'emailVerificationPending',\\\\n    label: 'Email Verification Pending Shipper',\\\\n    title: 'Email Verification Pending Shipper'\\\\n  },\\\\n  { value: 'allShippers', label: 'All Shippers', title: 'All Shippers' },\\\\n  {\\\\n    value: 'approvalPendingShippers',\\\\n    label: 'Approval Pending Shippers',\\\\n    title: 'Approval Pending Shippers'\\\\n  }\\\\n]\\\\n\\\\nconst ListViewOption = [\\\\n  { value: 'Available', label: 'Available', title: 'Available' },\\\\n  { value: 'Dispatched', label: 'Dispatched', title: 'Dispatched' },\\\\n  { value: 'Inactive', label: 'Inactive', title: 'Inactive' }\\\\n]\\\\n\\\\nconst FormSelectOption = [\\\\n  {\\\\n    value: 'Credit',\\\\n    label: 'Credit',\\\\n    title: 'Credit',\\\\n    description:\\\\n      'Credit transaction will add to the outstanding amount of (Delivery Associate)'\\\\n  },\\\\n  {\\\\n    value: 'Debit',\\\\n    label: 'Debit',\\\\n    title: 'Debit',\\\\n    description:\\\\n      'Credit transaction will deduct from the outstanding amount of (Delivery Associate)'\\\\n  }\\\\n]\\\\nexport const DefaultSelect = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'default-select') as tSelectVariant}\\\\n          optionList={object('optionList', options)}\\\\n          label={text('label', 'Name')}\\\\n          required={boolean('required', true)}\\\\n          loading={boolean('loading', true)}\\\\n          onChange={action('Value selected')}\\\\n          error={boolean('error', false)}\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\n          placeholder={text('placeholder', 'Select')}\\\\n          value={text('value', 'chocolate')}\\\\n          width={text('width', '300px')}\\\\n          disabled={boolean('disabled', false)}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const FormSelectPlayground = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'form-select') as tSelectVariant}\\\\n          optionList={object('optionList', FormSelectOption)}\\\\n          label={text('label', 'Name')}\\\\n          required={boolean('required', true)}\\\\n          loading={boolean('loading', false)}\\\\n          onChange={action('Value selected')}\\\\n          error={boolean('error', false)}\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\n          placeholder={text('placeholder', 'Select')}\\\\n          value={text('value', 'emailVerificationPending')}\\\\n          width={text('width', '300px')}\\\\n          onMenuOpen={action('Menu Open')}\\\\n          onMenuClose={action('Menu Close')}\\\\n          showDescription={boolean('Show Description', true)}\\\\n          tooltipMessage={text('tooltipMessage', 'i am form select tooltip')}\\\\n          disabled={boolean('disabled', false)}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\nexport const FormSelectDeferred = addSourceDecorator(() => {\\\\n  const [isLoading, setIsLoading] = React.useState<boolean>(false)\\\\n  const [menuIsOpen, setMenuIsOpen] = React.useState<boolean | undefined>(\\\\n    undefined\\\\n  )\\\\n  const [dropdownOptions, setDropdownOptions] = React.useState<\\\\n    { label: string; value: string }[]\\\\n  >([])\\\\n\\\\n  const [selectedValue, setSelectedValue] = React.useState<string>()\\\\n\\\\n  const handleMenuOpen = () => {\\\\n    action('Menu Opened!')()\\\\n    // setMenuIsOpen(true)\\\\n    if (dropdownOptions.length === 0) {\\\\n      setIsLoading(true)\\\\n      setTimeout(() => {\\\\n        setDropdownOptions(options)\\\\n        setIsLoading(false)\\\\n        setMenuIsOpen(true)\\\\n      }, 2000)\\\\n    }\\\\n  }\\\\n\\\\n  const handleMenuClose = () => {\\\\n    action('Menu Closed!')()\\\\n    setMenuIsOpen(undefined)\\\\n  }\\\\n\\\\n  const handleChange = (value?: string) => {\\\\n    action('Value selected')(value)\\\\n    setSelectedValue(value)\\\\n    setMenuIsOpen(undefined)\\\\n  }\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box py='3em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'form-select') as tSelectVariant}\\\\n          optionList={dropdownOptions}\\\\n          label={text('label', 'Name')}\\\\n          required={boolean('required', true)}\\\\n          loading={isLoading}\\\\n          onChange={handleChange}\\\\n          error={boolean('error', false)}\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\n          placeholder={text('placeholder', 'Select')}\\\\n          value={selectedValue}\\\\n          isMenuOpen={menuIsOpen}\\\\n          width={text('width', '300px')}\\\\n          onMenuOpen={handleMenuOpen}\\\\n          onMenuClose={handleMenuClose}\\\\n          onInputChange={action('onInputChange')}\\\\n          disabled={boolean('disabled', false)}\\\\n          limitOptionsList={50}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const FormSelectAsync = addSourceDecorator(() => {\\\\n  // const [menuIsOpen, setMenuIsOpen] = React.useState<boolean>()\\\\n  const [options] = React.useState<OptionsType<any>>([])\\\\n  const handleLoadOptions = React.useCallback(\\\\n    (inputValue: string, callback: (options: OptionsType<any>) => void) => {\\\\n      console.log(inputValue)\\\\n      if (inputValue.length >= 3) {\\\\n        const newOptions = [\\\\n          {\\\\n            label: inputValue + ' - Option 1',\\\\n            value: inputValue + '1',\\\\n            description: inputValue + ' - Option 1'\\\\n          },\\\\n          {\\\\n            label: inputValue + ' - Option 2',\\\\n            value: inputValue + '2',\\\\n            description: inputValue + ' - Option 2'\\\\n          }\\\\n        ]\\\\n        // setOptions(newOptions)\\\\n        callback(newOptions)\\\\n      } else {\\\\n        callback(options)\\\\n      }\\\\n    },\\\\n    []\\\\n  )\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box py='3em' bgColor='grey.50'>\\\\n        <div style={{ width: '350px' }}>\\\\n          <AsyncFormSelect\\\\n            loadOptions={handleLoadOptions}\\\\n            cacheOptions\\\\n            label={text('label', 'Postal Code')}\\\\n            required={boolean('required', false)}\\\\n            error={boolean('error', false)}\\\\n            errorMessage={text('errorMessage', 'Postal Code is required')}\\\\n            disabled={boolean('disabled', false)}\\\\n            showDescription={boolean('showDescription', false)}\\\\n          />\\\\n        </div>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const ListView = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'list-view') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          onChange={action('Value selected')}\\\\n          width={text('width', '120px')}\\\\n          disabled={boolean('disabled', false)}\\\\n          limitOptionsList={50}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\nexport const EditedListView = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'inline-edit') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          onChange={action('Value selected')}\\\\n          width={text('width', '100%')}\\\\n          disabled={boolean('disabled', false)}\\\\n          limitOptionsList={50}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\nexport const DashedDropdown = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'dashed-dropdown') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          onChange={action('Value selected')}\\\\n          width={text('width', '100%')}\\\\n          disabled={boolean('disabled', false)}\\\\n          value={text('value', '') as tSelectVariant}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/DropDown.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\n\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/molecules/DropDown\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"import { action } from '@storybook/addon-actions'\\\\nimport { boolean, object, text } from '@storybook/addon-knobs'\\\\nimport React from 'react'\\\\nimport DropDown from '.'\\\\nimport { path } from '..'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport Box from '../../atoms/Box'\\\\nimport { tSelectVariant } from './interface'\\\\n// import { InputActionMeta } from 'react-select'\\\\n// import AsyncSelect from 'react-select/async'\\\\nimport { OptionsType } from 'react-select'\\\\nimport AsyncFormSelect from './AsyncFormSelect'\\\\n\\\\nexport default {\\\\n  title: `${path}/DropDown`,\\\\n  component: DropDown\\\\n}\\\\n\\\\nconst options = [\\\\n  {\\\\n    value: 'emailVerificationPending',\\\\n    label: 'Email Verification Pending Shipper',\\\\n    title: 'Email Verification Pending Shipper'\\\\n  },\\\\n  { value: 'allShippers', label: 'All Shippers', title: 'All Shippers' },\\\\n  {\\\\n    value: 'approvalPendingShippers',\\\\n    label: 'Approval Pending Shippers',\\\\n    title: 'Approval Pending Shippers'\\\\n  }\\\\n]\\\\n\\\\nconst ListViewOption = [\\\\n  { value: 'Available', label: 'Available', title: 'Available' },\\\\n  { value: 'Dispatched', label: 'Dispatched', title: 'Dispatched' },\\\\n  { value: 'Inactive', label: 'Inactive', title: 'Inactive' }\\\\n]\\\\n\\\\nconst FormSelectOption = [\\\\n  {\\\\n    value: 'Credit',\\\\n    label: 'Credit',\\\\n    title: 'Credit',\\\\n    description:\\\\n      'Credit transaction will add to the outstanding amount of (Delivery Associate)'\\\\n  },\\\\n  {\\\\n    value: 'Debit',\\\\n    label: 'Debit',\\\\n    title: 'Debit',\\\\n    description:\\\\n      'Credit transaction will deduct from the outstanding amount of (Delivery Associate)'\\\\n  }\\\\n]\\\\nexport const DefaultSelect = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'default-select') as tSelectVariant}\\\\n          optionList={object('optionList', options)}\\\\n          label={text('label', 'Name')}\\\\n          required={boolean('required', true)}\\\\n          loading={boolean('loading', true)}\\\\n          onChange={action('Value selected')}\\\\n          error={boolean('error', false)}\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\n          placeholder={text('placeholder', 'Select')}\\\\n          value={text('value', 'chocolate')}\\\\n          width={text('width', '300px')}\\\\n          disabled={boolean('disabled', false)}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const FormSelectPlayground = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'form-select') as tSelectVariant}\\\\n          optionList={object('optionList', FormSelectOption)}\\\\n          label={text('label', 'Name')}\\\\n          required={boolean('required', true)}\\\\n          loading={boolean('loading', false)}\\\\n          onChange={action('Value selected')}\\\\n          error={boolean('error', false)}\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\n          placeholder={text('placeholder', 'Select')}\\\\n          value={text('value', 'emailVerificationPending')}\\\\n          width={text('width', '300px')}\\\\n          onMenuOpen={action('Menu Open')}\\\\n          onMenuClose={action('Menu Close')}\\\\n          showDescription={boolean('Show Description', true)}\\\\n          tooltipMessage={text('tooltipMessage', 'i am form select tooltip')}\\\\n          disabled={boolean('disabled', false)}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\nexport const FormSelectDeferred = () => {\\\\n  const [isLoading, setIsLoading] = React.useState<boolean>(false)\\\\n  const [menuIsOpen, setMenuIsOpen] = React.useState<boolean | undefined>(\\\\n    undefined\\\\n  )\\\\n  const [dropdownOptions, setDropdownOptions] = React.useState<\\\\n    { label: string; value: string }[]\\\\n  >([])\\\\n\\\\n  const [selectedValue, setSelectedValue] = React.useState<string>()\\\\n\\\\n  const handleMenuOpen = () => {\\\\n    action('Menu Opened!')()\\\\n    // setMenuIsOpen(true)\\\\n    if (dropdownOptions.length === 0) {\\\\n      setIsLoading(true)\\\\n      setTimeout(() => {\\\\n        setDropdownOptions(options)\\\\n        setIsLoading(false)\\\\n        setMenuIsOpen(true)\\\\n      }, 2000)\\\\n    }\\\\n  }\\\\n\\\\n  const handleMenuClose = () => {\\\\n    action('Menu Closed!')()\\\\n    setMenuIsOpen(undefined)\\\\n  }\\\\n\\\\n  const handleChange = (value?: string) => {\\\\n    action('Value selected')(value)\\\\n    setSelectedValue(value)\\\\n    setMenuIsOpen(undefined)\\\\n  }\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box py='3em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'form-select') as tSelectVariant}\\\\n          optionList={dropdownOptions}\\\\n          label={text('label', 'Name')}\\\\n          required={boolean('required', true)}\\\\n          loading={isLoading}\\\\n          onChange={handleChange}\\\\n          error={boolean('error', false)}\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\n          placeholder={text('placeholder', 'Select')}\\\\n          value={selectedValue}\\\\n          isMenuOpen={menuIsOpen}\\\\n          width={text('width', '300px')}\\\\n          onMenuOpen={handleMenuOpen}\\\\n          onMenuClose={handleMenuClose}\\\\n          onInputChange={action('onInputChange')}\\\\n          disabled={boolean('disabled', false)}\\\\n          limitOptionsList={50}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const FormSelectAsync = () => {\\\\n  // const [menuIsOpen, setMenuIsOpen] = React.useState<boolean>()\\\\n  const [options] = React.useState<OptionsType<any>>([])\\\\n  const handleLoadOptions = React.useCallback(\\\\n    (inputValue: string, callback: (options: OptionsType<any>) => void) => {\\\\n      console.log(inputValue)\\\\n      if (inputValue.length >= 3) {\\\\n        const newOptions = [\\\\n          {\\\\n            label: inputValue + ' - Option 1',\\\\n            value: inputValue + '1',\\\\n            description: inputValue + ' - Option 1'\\\\n          },\\\\n          {\\\\n            label: inputValue + ' - Option 2',\\\\n            value: inputValue + '2',\\\\n            description: inputValue + ' - Option 2'\\\\n          }\\\\n        ]\\\\n        // setOptions(newOptions)\\\\n        callback(newOptions)\\\\n      } else {\\\\n        callback(options)\\\\n      }\\\\n    },\\\\n    []\\\\n  )\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box py='3em' bgColor='grey.50'>\\\\n        <div style={{ width: '350px' }}>\\\\n          <AsyncFormSelect\\\\n            loadOptions={handleLoadOptions}\\\\n            cacheOptions\\\\n            label={text('label', 'Postal Code')}\\\\n            required={boolean('required', false)}\\\\n            error={boolean('error', false)}\\\\n            errorMessage={text('errorMessage', 'Postal Code is required')}\\\\n            disabled={boolean('disabled', false)}\\\\n            showDescription={boolean('showDescription', false)}\\\\n          />\\\\n        </div>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const ListView = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'list-view') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          onChange={action('Value selected')}\\\\n          width={text('width', '120px')}\\\\n          disabled={boolean('disabled', false)}\\\\n          limitOptionsList={50}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\nexport const EditedListView = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'inline-edit') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          onChange={action('Value selected')}\\\\n          width={text('width', '100%')}\\\\n          disabled={boolean('disabled', false)}\\\\n          limitOptionsList={50}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\nexport const DashedDropdown = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'dashed-dropdown') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          onChange={action('Value selected')}\\\\n          width={text('width', '100%')}\\\\n          disabled={boolean('disabled', false)}\\\\n          value={text('value', '') as tSelectVariant}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/DropDown.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\nimport { action } from '@storybook/addon-actions'\\nimport { boolean, object, text } from '@storybook/addon-knobs'\\nimport React from 'react'\\nimport DropDown from '.'\\nimport { path } from '..'\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\nimport Box from '../../atoms/Box'\\nimport { tSelectVariant } from './interface'\\n// import { InputActionMeta } from 'react-select'\\n// import AsyncSelect from 'react-select/async'\\nimport { OptionsType } from 'react-select'\\nimport AsyncFormSelect from './AsyncFormSelect'\\n\\nexport default {parameters: {\\\"storySource\\\":{\\\"source\\\":\\\"\\\\n\\\\n// @ts-nocheck\\\\n// @ts-ignore\\\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\\\n// @ts-ignore\\\\nvar addSourceDecorator = require(\\\\\\\"@storybook/source-loader/preview\\\\\\\").addSource;\\\\n// @ts-ignore\\\\nvar __SOURCE_PREFIX__ = \\\\\\\"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/molecules/DropDown\\\\\\\";\\\\n// @ts-ignore\\\\nvar __STORY__ = \\\\\\\"import { action } from '@storybook/addon-actions'\\\\\\\\nimport { boolean, object, text } from '@storybook/addon-knobs'\\\\\\\\nimport React from 'react'\\\\\\\\nimport DropDown from '.'\\\\\\\\nimport { path } from '..'\\\\\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\\\\\nimport Box from '../../atoms/Box'\\\\\\\\nimport { tSelectVariant } from './interface'\\\\\\\\n// import { InputActionMeta } from 'react-select'\\\\\\\\n// import AsyncSelect from 'react-select/async'\\\\\\\\nimport { OptionsType } from 'react-select'\\\\\\\\nimport AsyncFormSelect from './AsyncFormSelect'\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/DropDown`,\\\\\\\\n  component: DropDown\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst options = [\\\\\\\\n  {\\\\\\\\n    value: 'emailVerificationPending',\\\\\\\\n    label: 'Email Verification Pending Shipper',\\\\\\\\n    title: 'Email Verification Pending Shipper'\\\\\\\\n  },\\\\\\\\n  { value: 'allShippers', label: 'All Shippers', title: 'All Shippers' },\\\\\\\\n  {\\\\\\\\n    value: 'approvalPendingShippers',\\\\\\\\n    label: 'Approval Pending Shippers',\\\\\\\\n    title: 'Approval Pending Shippers'\\\\\\\\n  }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst ListViewOption = [\\\\\\\\n  { value: 'Available', label: 'Available', title: 'Available' },\\\\\\\\n  { value: 'Dispatched', label: 'Dispatched', title: 'Dispatched' },\\\\\\\\n  { value: 'Inactive', label: 'Inactive', title: 'Inactive' }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst FormSelectOption = [\\\\\\\\n  {\\\\\\\\n    value: 'Credit',\\\\\\\\n    label: 'Credit',\\\\\\\\n    title: 'Credit',\\\\\\\\n    description:\\\\\\\\n      'Credit transaction will add to the outstanding amount of (Delivery Associate)'\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    value: 'Debit',\\\\\\\\n    label: 'Debit',\\\\\\\\n    title: 'Debit',\\\\\\\\n    description:\\\\\\\\n      'Credit transaction will deduct from the outstanding amount of (Delivery Associate)'\\\\\\\\n  }\\\\\\\\n]\\\\\\\\nexport const DefaultSelect = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='6em' bgColor='grey.50'>\\\\\\\\n        <DropDown\\\\\\\\n          variant={text('variant', 'default-select') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', options)}\\\\\\\\n          label={text('label', 'Name')}\\\\\\\\n          required={boolean('required', true)}\\\\\\\\n          loading={boolean('loading', true)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          error={boolean('error', false)}\\\\\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\\\\\n          placeholder={text('placeholder', 'Select')}\\\\\\\\n          value={text('value', 'chocolate')}\\\\\\\\n          width={text('width', '300px')}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const FormSelectPlayground = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='6em' bgColor='grey.50'>\\\\\\\\n        <DropDown\\\\\\\\n          variant={text('variant', 'form-select') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', FormSelectOption)}\\\\\\\\n          label={text('label', 'Name')}\\\\\\\\n          required={boolean('required', true)}\\\\\\\\n          loading={boolean('loading', false)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          error={boolean('error', false)}\\\\\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\\\\\n          placeholder={text('placeholder', 'Select')}\\\\\\\\n          value={text('value', 'emailVerificationPending')}\\\\\\\\n          width={text('width', '300px')}\\\\\\\\n          onMenuOpen={action('Menu Open')}\\\\\\\\n          onMenuClose={action('Menu Close')}\\\\\\\\n          showDescription={boolean('Show Description', true)}\\\\\\\\n          tooltipMessage={text('tooltipMessage', 'i am form select tooltip')}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\nexport const FormSelectDeferred = () => {\\\\\\\\n  const [isLoading, setIsLoading] = React.useState<boolean>(false)\\\\\\\\n  const [menuIsOpen, setMenuIsOpen] = React.useState<boolean | undefined>(\\\\\\\\n    undefined\\\\\\\\n  )\\\\\\\\n  const [dropdownOptions, setDropdownOptions] = React.useState<\\\\\\\\n    { label: string; value: string }[]\\\\\\\\n  >([])\\\\\\\\n\\\\\\\\n  const [selectedValue, setSelectedValue] = React.useState<string>()\\\\\\\\n\\\\\\\\n  const handleMenuOpen = () => {\\\\\\\\n    action('Menu Opened!')()\\\\\\\\n    // setMenuIsOpen(true)\\\\\\\\n    if (dropdownOptions.length === 0) {\\\\\\\\n      setIsLoading(true)\\\\\\\\n      setTimeout(() => {\\\\\\\\n        setDropdownOptions(options)\\\\\\\\n        setIsLoading(false)\\\\\\\\n        setMenuIsOpen(true)\\\\\\\\n      }, 2000)\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  const handleMenuClose = () => {\\\\\\\\n    action('Menu Closed!')()\\\\\\\\n    setMenuIsOpen(undefined)\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  const handleChange = (value?: string) => {\\\\\\\\n    action('Value selected')(value)\\\\\\\\n    setSelectedValue(value)\\\\\\\\n    setMenuIsOpen(undefined)\\\\\\\\n  }\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box py='3em' bgColor='grey.50'>\\\\\\\\n        <DropDown\\\\\\\\n          variant={text('variant', 'form-select') as tSelectVariant}\\\\\\\\n          optionList={dropdownOptions}\\\\\\\\n          label={text('label', 'Name')}\\\\\\\\n          required={boolean('required', true)}\\\\\\\\n          loading={isLoading}\\\\\\\\n          onChange={handleChange}\\\\\\\\n          error={boolean('error', false)}\\\\\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\\\\\n          placeholder={text('placeholder', 'Select')}\\\\\\\\n          value={selectedValue}\\\\\\\\n          isMenuOpen={menuIsOpen}\\\\\\\\n          width={text('width', '300px')}\\\\\\\\n          onMenuOpen={handleMenuOpen}\\\\\\\\n          onMenuClose={handleMenuClose}\\\\\\\\n          onInputChange={action('onInputChange')}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n          limitOptionsList={50}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const FormSelectAsync = () => {\\\\\\\\n  // const [menuIsOpen, setMenuIsOpen] = React.useState<boolean>()\\\\\\\\n  const [options] = React.useState<OptionsType<any>>([])\\\\\\\\n  const handleLoadOptions = React.useCallback(\\\\\\\\n    (inputValue: string, callback: (options: OptionsType<any>) => void) => {\\\\\\\\n      console.log(inputValue)\\\\\\\\n      if (inputValue.length >= 3) {\\\\\\\\n        const newOptions = [\\\\\\\\n          {\\\\\\\\n            label: inputValue + ' - Option 1',\\\\\\\\n            value: inputValue + '1',\\\\\\\\n            description: inputValue + ' - Option 1'\\\\\\\\n          },\\\\\\\\n          {\\\\\\\\n            label: inputValue + ' - Option 2',\\\\\\\\n            value: inputValue + '2',\\\\\\\\n            description: inputValue + ' - Option 2'\\\\\\\\n          }\\\\\\\\n        ]\\\\\\\\n        // setOptions(newOptions)\\\\\\\\n        callback(newOptions)\\\\\\\\n      } else {\\\\\\\\n        callback(options)\\\\\\\\n      }\\\\\\\\n    },\\\\\\\\n    []\\\\\\\\n  )\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box py='3em' bgColor='grey.50'>\\\\\\\\n        <div style={{ width: '350px' }}>\\\\\\\\n          <AsyncFormSelect\\\\\\\\n            loadOptions={handleLoadOptions}\\\\\\\\n            cacheOptions\\\\\\\\n            label={text('label', 'Postal Code')}\\\\\\\\n            required={boolean('required', false)}\\\\\\\\n            error={boolean('error', false)}\\\\\\\\n            errorMessage={text('errorMessage', 'Postal Code is required')}\\\\\\\\n            disabled={boolean('disabled', false)}\\\\\\\\n            showDescription={boolean('showDescription', false)}\\\\\\\\n          />\\\\\\\\n        </div>\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const ListView = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='6em' bgColor='grey.50'>\\\\\\\\n        <DropDown\\\\\\\\n          variant={text('variant', 'list-view') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', ListViewOption)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          width={text('width', '120px')}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n          limitOptionsList={50}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\nexport const EditedListView = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='6em' bgColor='grey.50'>\\\\\\\\n        <DropDown\\\\\\\\n          variant={text('variant', 'inline-edit') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', ListViewOption)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          width={text('width', '100%')}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n          limitOptionsList={50}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\nexport const DashedDropdown = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='6em' bgColor='grey.50'>\\\\\\\\n        <DropDown\\\\\\\\n          variant={text('variant', 'dashed-dropdown') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', ListViewOption)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          width={text('width', '100%')}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n          value={text('value', '') as tSelectVariant}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\";\\\\n// @ts-ignore\\\\nvar __ADDS_MAP__ = {};\\\\n// @ts-ignore\\\\nvar __MAIN_FILE_LOCATION__ = \\\\\\\"/DropDown.stories.tsx\\\\\\\";\\\\n// @ts-ignore\\\\nvar __MODULE_DEPENDENCIES__ = [];\\\\n// @ts-ignore\\\\nvar __LOCAL_DEPENDENCIES__ = {};\\\\n// @ts-ignore\\\\nvar __IDS_TO_FRAMEWORKS__ = {};\\\\n        \\\\nimport { action } from '@storybook/addon-actions'\\\\nimport { boolean, object, text } from '@storybook/addon-knobs'\\\\nimport React from 'react'\\\\nimport DropDown from '.'\\\\nimport { path } from '..'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport Box from '../../atoms/Box'\\\\nimport { tSelectVariant } from './interface'\\\\n// import { InputActionMeta } from 'react-select'\\\\n// import AsyncSelect from 'react-select/async'\\\\nimport { OptionsType } from 'react-select'\\\\nimport AsyncFormSelect from './AsyncFormSelect'\\\\n\\\\nexport default {parameters: {\\\\\\\"storySource\\\\\\\":{\\\\\\\"source\\\\\\\":\\\\\\\"import { action } from '@storybook/addon-actions'\\\\\\\\nimport { boolean, object, text } from '@storybook/addon-knobs'\\\\\\\\nimport React from 'react'\\\\\\\\nimport DropDown from '.'\\\\\\\\nimport { path } from '..'\\\\\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\\\\\nimport Box from '../../atoms/Box'\\\\\\\\nimport { tSelectVariant } from './interface'\\\\\\\\n// import { InputActionMeta } from 'react-select'\\\\\\\\n// import AsyncSelect from 'react-select/async'\\\\\\\\nimport { OptionsType } from 'react-select'\\\\\\\\nimport AsyncFormSelect from './AsyncFormSelect'\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/DropDown`,\\\\\\\\n  component: DropDown\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst options = [\\\\\\\\n  {\\\\\\\\n    value: 'emailVerificationPending',\\\\\\\\n    label: 'Email Verification Pending Shipper',\\\\\\\\n    title: 'Email Verification Pending Shipper'\\\\\\\\n  },\\\\\\\\n  { value: 'allShippers', label: 'All Shippers', title: 'All Shippers' },\\\\\\\\n  {\\\\\\\\n    value: 'approvalPendingShippers',\\\\\\\\n    label: 'Approval Pending Shippers',\\\\\\\\n    title: 'Approval Pending Shippers'\\\\\\\\n  }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst ListViewOption = [\\\\\\\\n  { value: 'Available', label: 'Available', title: 'Available' },\\\\\\\\n  { value: 'Dispatched', label: 'Dispatched', title: 'Dispatched' },\\\\\\\\n  { value: 'Inactive', label: 'Inactive', title: 'Inactive' }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst FormSelectOption = [\\\\\\\\n  {\\\\\\\\n    value: 'Credit',\\\\\\\\n    label: 'Credit',\\\\\\\\n    title: 'Credit',\\\\\\\\n    description:\\\\\\\\n      'Credit transaction will add to the outstanding amount of (Delivery Associate)'\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    value: 'Debit',\\\\\\\\n    label: 'Debit',\\\\\\\\n    title: 'Debit',\\\\\\\\n    description:\\\\\\\\n      'Credit transaction will deduct from the outstanding amount of (Delivery Associate)'\\\\\\\\n  }\\\\\\\\n]\\\\\\\\nexport const DefaultSelect = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='6em' bgColor='grey.50'>\\\\\\\\n        <DropDown\\\\\\\\n          variant={text('variant', 'default-select') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', options)}\\\\\\\\n          label={text('label', 'Name')}\\\\\\\\n          required={boolean('required', true)}\\\\\\\\n          loading={boolean('loading', true)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          error={boolean('error', false)}\\\\\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\\\\\n          placeholder={text('placeholder', 'Select')}\\\\\\\\n          value={text('value', 'chocolate')}\\\\\\\\n          width={text('width', '300px')}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const FormSelectPlayground = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='6em' bgColor='grey.50'>\\\\\\\\n        <DropDown\\\\\\\\n          variant={text('variant', 'form-select') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', FormSelectOption)}\\\\\\\\n          label={text('label', 'Name')}\\\\\\\\n          required={boolean('required', true)}\\\\\\\\n          loading={boolean('loading', false)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          error={boolean('error', false)}\\\\\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\\\\\n          placeholder={text('placeholder', 'Select')}\\\\\\\\n          value={text('value', 'emailVerificationPending')}\\\\\\\\n          width={text('width', '300px')}\\\\\\\\n          onMenuOpen={action('Menu Open')}\\\\\\\\n          onMenuClose={action('Menu Close')}\\\\\\\\n          showDescription={boolean('Show Description', true)}\\\\\\\\n          tooltipMessage={text('tooltipMessage', 'i am form select tooltip')}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\nexport const FormSelectDeferred = () => {\\\\\\\\n  const [isLoading, setIsLoading] = React.useState<boolean>(false)\\\\\\\\n  const [menuIsOpen, setMenuIsOpen] = React.useState<boolean | undefined>(\\\\\\\\n    undefined\\\\\\\\n  )\\\\\\\\n  const [dropdownOptions, setDropdownOptions] = React.useState<\\\\\\\\n    { label: string; value: string }[]\\\\\\\\n  >([])\\\\\\\\n\\\\\\\\n  const [selectedValue, setSelectedValue] = React.useState<string>()\\\\\\\\n\\\\\\\\n  const handleMenuOpen = () => {\\\\\\\\n    action('Menu Opened!')()\\\\\\\\n    // setMenuIsOpen(true)\\\\\\\\n    if (dropdownOptions.length === 0) {\\\\\\\\n      setIsLoading(true)\\\\\\\\n      setTimeout(() => {\\\\\\\\n        setDropdownOptions(options)\\\\\\\\n        setIsLoading(false)\\\\\\\\n        setMenuIsOpen(true)\\\\\\\\n      }, 2000)\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  const handleMenuClose = () => {\\\\\\\\n    action('Menu Closed!')()\\\\\\\\n    setMenuIsOpen(undefined)\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  const handleChange = (value?: string) => {\\\\\\\\n    action('Value selected')(value)\\\\\\\\n    setSelectedValue(value)\\\\\\\\n    setMenuIsOpen(undefined)\\\\\\\\n  }\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box py='3em' bgColor='grey.50'>\\\\\\\\n        <DropDown\\\\\\\\n          variant={text('variant', 'form-select') as tSelectVariant}\\\\\\\\n          optionList={dropdownOptions}\\\\\\\\n          label={text('label', 'Name')}\\\\\\\\n          required={boolean('required', true)}\\\\\\\\n          loading={isLoading}\\\\\\\\n          onChange={handleChange}\\\\\\\\n          error={boolean('error', false)}\\\\\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\\\\\n          placeholder={text('placeholder', 'Select')}\\\\\\\\n          value={selectedValue}\\\\\\\\n          isMenuOpen={menuIsOpen}\\\\\\\\n          width={text('width', '300px')}\\\\\\\\n          onMenuOpen={handleMenuOpen}\\\\\\\\n          onMenuClose={handleMenuClose}\\\\\\\\n          onInputChange={action('onInputChange')}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n          limitOptionsList={50}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const FormSelectAsync = () => {\\\\\\\\n  // const [menuIsOpen, setMenuIsOpen] = React.useState<boolean>()\\\\\\\\n  const [options] = React.useState<OptionsType<any>>([])\\\\\\\\n  const handleLoadOptions = React.useCallback(\\\\\\\\n    (inputValue: string, callback: (options: OptionsType<any>) => void) => {\\\\\\\\n      console.log(inputValue)\\\\\\\\n      if (inputValue.length >= 3) {\\\\\\\\n        const newOptions = [\\\\\\\\n          {\\\\\\\\n            label: inputValue + ' - Option 1',\\\\\\\\n            value: inputValue + '1',\\\\\\\\n            description: inputValue + ' - Option 1'\\\\\\\\n          },\\\\\\\\n          {\\\\\\\\n            label: inputValue + ' - Option 2',\\\\\\\\n            value: inputValue + '2',\\\\\\\\n            description: inputValue + ' - Option 2'\\\\\\\\n          }\\\\\\\\n        ]\\\\\\\\n        // setOptions(newOptions)\\\\\\\\n        callback(newOptions)\\\\\\\\n      } else {\\\\\\\\n        callback(options)\\\\\\\\n      }\\\\\\\\n    },\\\\\\\\n    []\\\\\\\\n  )\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box py='3em' bgColor='grey.50'>\\\\\\\\n        <div style={{ width: '350px' }}>\\\\\\\\n          <AsyncFormSelect\\\\\\\\n            loadOptions={handleLoadOptions}\\\\\\\\n            cacheOptions\\\\\\\\n            label={text('label', 'Postal Code')}\\\\\\\\n            required={boolean('required', false)}\\\\\\\\n            error={boolean('error', false)}\\\\\\\\n            errorMessage={text('errorMessage', 'Postal Code is required')}\\\\\\\\n            disabled={boolean('disabled', false)}\\\\\\\\n            showDescription={boolean('showDescription', false)}\\\\\\\\n          />\\\\\\\\n        </div>\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const ListView = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='6em' bgColor='grey.50'>\\\\\\\\n        <DropDown\\\\\\\\n          variant={text('variant', 'list-view') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', ListViewOption)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          width={text('width', '120px')}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n          limitOptionsList={50}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\nexport const EditedListView = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='6em' bgColor='grey.50'>\\\\\\\\n        <DropDown\\\\\\\\n          variant={text('variant', 'inline-edit') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', ListViewOption)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          width={text('width', '100%')}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n          limitOptionsList={50}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\nexport const DashedDropdown = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='6em' bgColor='grey.50'>\\\\\\\\n        <DropDown\\\\\\\\n          variant={text('variant', 'dashed-dropdown') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', ListViewOption)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          width={text('width', '100%')}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n          value={text('value', '') as tSelectVariant}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\",\\\\\\\"locationsMap\\\\\\\":{}},},\\\\n  title: `${path}/DropDown`,\\\\n  component: DropDown\\\\n}\\\\n\\\\nconst options = [\\\\n  {\\\\n    value: 'emailVerificationPending',\\\\n    label: 'Email Verification Pending Shipper',\\\\n    title: 'Email Verification Pending Shipper'\\\\n  },\\\\n  { value: 'allShippers', label: 'All Shippers', title: 'All Shippers' },\\\\n  {\\\\n    value: 'approvalPendingShippers',\\\\n    label: 'Approval Pending Shippers',\\\\n    title: 'Approval Pending Shippers'\\\\n  }\\\\n]\\\\n\\\\nconst ListViewOption = [\\\\n  { value: 'Available', label: 'Available', title: 'Available' },\\\\n  { value: 'Dispatched', label: 'Dispatched', title: 'Dispatched' },\\\\n  { value: 'Inactive', label: 'Inactive', title: 'Inactive' }\\\\n]\\\\n\\\\nconst FormSelectOption = [\\\\n  {\\\\n    value: 'Credit',\\\\n    label: 'Credit',\\\\n    title: 'Credit',\\\\n    description:\\\\n      'Credit transaction will add to the outstanding amount of (Delivery Associate)'\\\\n  },\\\\n  {\\\\n    value: 'Debit',\\\\n    label: 'Debit',\\\\n    title: 'Debit',\\\\n    description:\\\\n      'Credit transaction will deduct from the outstanding amount of (Delivery Associate)'\\\\n  }\\\\n]\\\\nexport const DefaultSelect = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'default-select') as tSelectVariant}\\\\n          optionList={object('optionList', options)}\\\\n          label={text('label', 'Name')}\\\\n          required={boolean('required', true)}\\\\n          loading={boolean('loading', true)}\\\\n          onChange={action('Value selected')}\\\\n          error={boolean('error', false)}\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\n          placeholder={text('placeholder', 'Select')}\\\\n          value={text('value', 'chocolate')}\\\\n          width={text('width', '300px')}\\\\n          disabled={boolean('disabled', false)}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const FormSelectPlayground = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'form-select') as tSelectVariant}\\\\n          optionList={object('optionList', FormSelectOption)}\\\\n          label={text('label', 'Name')}\\\\n          required={boolean('required', true)}\\\\n          loading={boolean('loading', false)}\\\\n          onChange={action('Value selected')}\\\\n          error={boolean('error', false)}\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\n          placeholder={text('placeholder', 'Select')}\\\\n          value={text('value', 'emailVerificationPending')}\\\\n          width={text('width', '300px')}\\\\n          onMenuOpen={action('Menu Open')}\\\\n          onMenuClose={action('Menu Close')}\\\\n          showDescription={boolean('Show Description', true)}\\\\n          tooltipMessage={text('tooltipMessage', 'i am form select tooltip')}\\\\n          disabled={boolean('disabled', false)}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\nexport const FormSelectDeferred = addSourceDecorator(() => {\\\\n  const [isLoading, setIsLoading] = React.useState<boolean>(false)\\\\n  const [menuIsOpen, setMenuIsOpen] = React.useState<boolean | undefined>(\\\\n    undefined\\\\n  )\\\\n  const [dropdownOptions, setDropdownOptions] = React.useState<\\\\n    { label: string; value: string }[]\\\\n  >([])\\\\n\\\\n  const [selectedValue, setSelectedValue] = React.useState<string>()\\\\n\\\\n  const handleMenuOpen = () => {\\\\n    action('Menu Opened!')()\\\\n    // setMenuIsOpen(true)\\\\n    if (dropdownOptions.length === 0) {\\\\n      setIsLoading(true)\\\\n      setTimeout(() => {\\\\n        setDropdownOptions(options)\\\\n        setIsLoading(false)\\\\n        setMenuIsOpen(true)\\\\n      }, 2000)\\\\n    }\\\\n  }\\\\n\\\\n  const handleMenuClose = () => {\\\\n    action('Menu Closed!')()\\\\n    setMenuIsOpen(undefined)\\\\n  }\\\\n\\\\n  const handleChange = (value?: string) => {\\\\n    action('Value selected')(value)\\\\n    setSelectedValue(value)\\\\n    setMenuIsOpen(undefined)\\\\n  }\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box py='3em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'form-select') as tSelectVariant}\\\\n          optionList={dropdownOptions}\\\\n          label={text('label', 'Name')}\\\\n          required={boolean('required', true)}\\\\n          loading={isLoading}\\\\n          onChange={handleChange}\\\\n          error={boolean('error', false)}\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\n          placeholder={text('placeholder', 'Select')}\\\\n          value={selectedValue}\\\\n          isMenuOpen={menuIsOpen}\\\\n          width={text('width', '300px')}\\\\n          onMenuOpen={handleMenuOpen}\\\\n          onMenuClose={handleMenuClose}\\\\n          onInputChange={action('onInputChange')}\\\\n          disabled={boolean('disabled', false)}\\\\n          limitOptionsList={50}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const FormSelectAsync = addSourceDecorator(() => {\\\\n  // const [menuIsOpen, setMenuIsOpen] = React.useState<boolean>()\\\\n  const [options] = React.useState<OptionsType<any>>([])\\\\n  const handleLoadOptions = React.useCallback(\\\\n    (inputValue: string, callback: (options: OptionsType<any>) => void) => {\\\\n      console.log(inputValue)\\\\n      if (inputValue.length >= 3) {\\\\n        const newOptions = [\\\\n          {\\\\n            label: inputValue + ' - Option 1',\\\\n            value: inputValue + '1',\\\\n            description: inputValue + ' - Option 1'\\\\n          },\\\\n          {\\\\n            label: inputValue + ' - Option 2',\\\\n            value: inputValue + '2',\\\\n            description: inputValue + ' - Option 2'\\\\n          }\\\\n        ]\\\\n        // setOptions(newOptions)\\\\n        callback(newOptions)\\\\n      } else {\\\\n        callback(options)\\\\n      }\\\\n    },\\\\n    []\\\\n  )\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box py='3em' bgColor='grey.50'>\\\\n        <div style={{ width: '350px' }}>\\\\n          <AsyncFormSelect\\\\n            loadOptions={handleLoadOptions}\\\\n            cacheOptions\\\\n            label={text('label', 'Postal Code')}\\\\n            required={boolean('required', false)}\\\\n            error={boolean('error', false)}\\\\n            errorMessage={text('errorMessage', 'Postal Code is required')}\\\\n            disabled={boolean('disabled', false)}\\\\n            showDescription={boolean('showDescription', false)}\\\\n          />\\\\n        </div>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const ListView = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'list-view') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          onChange={action('Value selected')}\\\\n          width={text('width', '120px')}\\\\n          disabled={boolean('disabled', false)}\\\\n          limitOptionsList={50}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\nexport const EditedListView = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'inline-edit') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          onChange={action('Value selected')}\\\\n          width={text('width', '100%')}\\\\n          disabled={boolean('disabled', false)}\\\\n          limitOptionsList={50}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\nexport const DashedDropdown = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'dashed-dropdown') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          onChange={action('Value selected')}\\\\n          width={text('width', '100%')}\\\\n          disabled={boolean('disabled', false)}\\\\n          value={text('value', '') as tSelectVariant}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\",\\\"locationsMap\\\":{}},\\\"storySource\\\":{\\\"source\\\":\\\"import { action } from '@storybook/addon-actions'\\\\nimport { boolean, object, text } from '@storybook/addon-knobs'\\\\nimport React from 'react'\\\\nimport DropDown from '.'\\\\nimport { path } from '..'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport Box from '../../atoms/Box'\\\\nimport { tSelectVariant } from './interface'\\\\n// import { InputActionMeta } from 'react-select'\\\\n// import AsyncSelect from 'react-select/async'\\\\nimport { OptionsType } from 'react-select'\\\\nimport AsyncFormSelect from './AsyncFormSelect'\\\\n\\\\nexport default {\\\\n  title: `${path}/DropDown`,\\\\n  component: DropDown\\\\n}\\\\n\\\\nconst options = [\\\\n  {\\\\n    value: 'emailVerificationPending',\\\\n    label: 'Email Verification Pending Shipper',\\\\n    title: 'Email Verification Pending Shipper'\\\\n  },\\\\n  { value: 'allShippers', label: 'All Shippers', title: 'All Shippers' },\\\\n  {\\\\n    value: 'approvalPendingShippers',\\\\n    label: 'Approval Pending Shippers',\\\\n    title: 'Approval Pending Shippers'\\\\n  }\\\\n]\\\\n\\\\nconst ListViewOption = [\\\\n  { value: 'Available', label: 'Available', title: 'Available' },\\\\n  { value: 'Dispatched', label: 'Dispatched', title: 'Dispatched' },\\\\n  { value: 'Inactive', label: 'Inactive', title: 'Inactive' }\\\\n]\\\\n\\\\nconst FormSelectOption = [\\\\n  {\\\\n    value: 'Credit',\\\\n    label: 'Credit',\\\\n    title: 'Credit',\\\\n    description:\\\\n      'Credit transaction will add to the outstanding amount of (Delivery Associate)'\\\\n  },\\\\n  {\\\\n    value: 'Debit',\\\\n    label: 'Debit',\\\\n    title: 'Debit',\\\\n    description:\\\\n      'Credit transaction will deduct from the outstanding amount of (Delivery Associate)'\\\\n  }\\\\n]\\\\nexport const DefaultSelect = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'default-select') as tSelectVariant}\\\\n          optionList={object('optionList', options)}\\\\n          label={text('label', 'Name')}\\\\n          required={boolean('required', true)}\\\\n          loading={boolean('loading', true)}\\\\n          onChange={action('Value selected')}\\\\n          error={boolean('error', false)}\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\n          placeholder={text('placeholder', 'Select')}\\\\n          value={text('value', 'chocolate')}\\\\n          width={text('width', '300px')}\\\\n          disabled={boolean('disabled', false)}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const FormSelectPlayground = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'form-select') as tSelectVariant}\\\\n          optionList={object('optionList', FormSelectOption)}\\\\n          label={text('label', 'Name')}\\\\n          required={boolean('required', true)}\\\\n          loading={boolean('loading', false)}\\\\n          onChange={action('Value selected')}\\\\n          error={boolean('error', false)}\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\n          placeholder={text('placeholder', 'Select')}\\\\n          value={text('value', 'emailVerificationPending')}\\\\n          width={text('width', '300px')}\\\\n          onMenuOpen={action('Menu Open')}\\\\n          onMenuClose={action('Menu Close')}\\\\n          showDescription={boolean('Show Description', true)}\\\\n          tooltipMessage={text('tooltipMessage', 'i am form select tooltip')}\\\\n          disabled={boolean('disabled', false)}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\nexport const FormSelectDeferred = () => {\\\\n  const [isLoading, setIsLoading] = React.useState<boolean>(false)\\\\n  const [menuIsOpen, setMenuIsOpen] = React.useState<boolean | undefined>(\\\\n    undefined\\\\n  )\\\\n  const [dropdownOptions, setDropdownOptions] = React.useState<\\\\n    { label: string; value: string }[]\\\\n  >([])\\\\n\\\\n  const [selectedValue, setSelectedValue] = React.useState<string>()\\\\n\\\\n  const handleMenuOpen = () => {\\\\n    action('Menu Opened!')()\\\\n    // setMenuIsOpen(true)\\\\n    if (dropdownOptions.length === 0) {\\\\n      setIsLoading(true)\\\\n      setTimeout(() => {\\\\n        setDropdownOptions(options)\\\\n        setIsLoading(false)\\\\n        setMenuIsOpen(true)\\\\n      }, 2000)\\\\n    }\\\\n  }\\\\n\\\\n  const handleMenuClose = () => {\\\\n    action('Menu Closed!')()\\\\n    setMenuIsOpen(undefined)\\\\n  }\\\\n\\\\n  const handleChange = (value?: string) => {\\\\n    action('Value selected')(value)\\\\n    setSelectedValue(value)\\\\n    setMenuIsOpen(undefined)\\\\n  }\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box py='3em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'form-select') as tSelectVariant}\\\\n          optionList={dropdownOptions}\\\\n          label={text('label', 'Name')}\\\\n          required={boolean('required', true)}\\\\n          loading={isLoading}\\\\n          onChange={handleChange}\\\\n          error={boolean('error', false)}\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\n          placeholder={text('placeholder', 'Select')}\\\\n          value={selectedValue}\\\\n          isMenuOpen={menuIsOpen}\\\\n          width={text('width', '300px')}\\\\n          onMenuOpen={handleMenuOpen}\\\\n          onMenuClose={handleMenuClose}\\\\n          onInputChange={action('onInputChange')}\\\\n          disabled={boolean('disabled', false)}\\\\n          limitOptionsList={50}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const FormSelectAsync = () => {\\\\n  // const [menuIsOpen, setMenuIsOpen] = React.useState<boolean>()\\\\n  const [options] = React.useState<OptionsType<any>>([])\\\\n  const handleLoadOptions = React.useCallback(\\\\n    (inputValue: string, callback: (options: OptionsType<any>) => void) => {\\\\n      console.log(inputValue)\\\\n      if (inputValue.length >= 3) {\\\\n        const newOptions = [\\\\n          {\\\\n            label: inputValue + ' - Option 1',\\\\n            value: inputValue + '1',\\\\n            description: inputValue + ' - Option 1'\\\\n          },\\\\n          {\\\\n            label: inputValue + ' - Option 2',\\\\n            value: inputValue + '2',\\\\n            description: inputValue + ' - Option 2'\\\\n          }\\\\n        ]\\\\n        // setOptions(newOptions)\\\\n        callback(newOptions)\\\\n      } else {\\\\n        callback(options)\\\\n      }\\\\n    },\\\\n    []\\\\n  )\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box py='3em' bgColor='grey.50'>\\\\n        <div style={{ width: '350px' }}>\\\\n          <AsyncFormSelect\\\\n            loadOptions={handleLoadOptions}\\\\n            cacheOptions\\\\n            label={text('label', 'Postal Code')}\\\\n            required={boolean('required', false)}\\\\n            error={boolean('error', false)}\\\\n            errorMessage={text('errorMessage', 'Postal Code is required')}\\\\n            disabled={boolean('disabled', false)}\\\\n            showDescription={boolean('showDescription', false)}\\\\n          />\\\\n        </div>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const ListView = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'list-view') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          onChange={action('Value selected')}\\\\n          width={text('width', '120px')}\\\\n          disabled={boolean('disabled', false)}\\\\n          limitOptionsList={50}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\nexport const EditedListView = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'inline-edit') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          onChange={action('Value selected')}\\\\n          width={text('width', '100%')}\\\\n          disabled={boolean('disabled', false)}\\\\n          limitOptionsList={50}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\nexport const DashedDropdown = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'dashed-dropdown') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          onChange={action('Value selected')}\\\\n          width={text('width', '100%')}\\\\n          disabled={boolean('disabled', false)}\\\\n          value={text('value', '') as tSelectVariant}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\",\\\"locationsMap\\\":{}},},\\n  title: `${path}/DropDown`,\\n  component: DropDown\\n}\\n\\nconst options = [\\n  {\\n    value: 'emailVerificationPending',\\n    label: 'Email Verification Pending Shipper',\\n    title: 'Email Verification Pending Shipper'\\n  },\\n  { value: 'allShippers', label: 'All Shippers', title: 'All Shippers' },\\n  {\\n    value: 'approvalPendingShippers',\\n    label: 'Approval Pending Shippers',\\n    title: 'Approval Pending Shippers'\\n  }\\n]\\n\\nconst ListViewOption = [\\n  { value: 'Available', label: 'Available', title: 'Available' },\\n  { value: 'Dispatched', label: 'Dispatched', title: 'Dispatched' },\\n  { value: 'Inactive', label: 'Inactive', title: 'Inactive' }\\n]\\n\\nconst FormSelectOption = [\\n  {\\n    value: 'Credit',\\n    label: 'Credit',\\n    title: 'Credit',\\n    description:\\n      'Credit transaction will add to the outstanding amount of (Delivery Associate)'\\n  },\\n  {\\n    value: 'Debit',\\n    label: 'Debit',\\n    title: 'Debit',\\n    description:\\n      'Credit transaction will deduct from the outstanding amount of (Delivery Associate)'\\n  }\\n]\\nexport const DefaultSelect = addSourceDecorator(addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='6em' bgColor='grey.50'>\\n        <DropDown\\n          variant={text('variant', 'default-select') as tSelectVariant}\\n          optionList={object('optionList', options)}\\n          label={text('label', 'Name')}\\n          required={boolean('required', true)}\\n          loading={boolean('loading', true)}\\n          onChange={action('Value selected')}\\n          error={boolean('error', false)}\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\n          placeholder={text('placeholder', 'Select')}\\n          value={text('value', 'chocolate')}\\n          width={text('width', '300px')}\\n          disabled={boolean('disabled', false)}\\n        />\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const FormSelectPlayground = addSourceDecorator(addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='6em' bgColor='grey.50'>\\n        <DropDown\\n          variant={text('variant', 'form-select') as tSelectVariant}\\n          optionList={object('optionList', FormSelectOption)}\\n          label={text('label', 'Name')}\\n          required={boolean('required', true)}\\n          loading={boolean('loading', false)}\\n          onChange={action('Value selected')}\\n          error={boolean('error', false)}\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\n          placeholder={text('placeholder', 'Select')}\\n          value={text('value', 'emailVerificationPending')}\\n          width={text('width', '300px')}\\n          onMenuOpen={action('Menu Open')}\\n          onMenuClose={action('Menu Close')}\\n          showDescription={boolean('Show Description', true)}\\n          tooltipMessage={text('tooltipMessage', 'i am form select tooltip')}\\n          disabled={boolean('disabled', false)}\\n        />\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\nexport const FormSelectDeferred = addSourceDecorator(addSourceDecorator(() => {\\n  const [isLoading, setIsLoading] = React.useState<boolean>(false)\\n  const [menuIsOpen, setMenuIsOpen] = React.useState<boolean | undefined>(\\n    undefined\\n  )\\n  const [dropdownOptions, setDropdownOptions] = React.useState<\\n    { label: string; value: string }[]\\n  >([])\\n\\n  const [selectedValue, setSelectedValue] = React.useState<string>()\\n\\n  const handleMenuOpen = () => {\\n    action('Menu Opened!')()\\n    // setMenuIsOpen(true)\\n    if (dropdownOptions.length === 0) {\\n      setIsLoading(true)\\n      setTimeout(() => {\\n        setDropdownOptions(options)\\n        setIsLoading(false)\\n        setMenuIsOpen(true)\\n      }, 2000)\\n    }\\n  }\\n\\n  const handleMenuClose = () => {\\n    action('Menu Closed!')()\\n    setMenuIsOpen(undefined)\\n  }\\n\\n  const handleChange = (value?: string) => {\\n    action('Value selected')(value)\\n    setSelectedValue(value)\\n    setMenuIsOpen(undefined)\\n  }\\n  return (\\n    <ThemeWrapper>\\n      <Box py='3em' bgColor='grey.50'>\\n        <DropDown\\n          variant={text('variant', 'form-select') as tSelectVariant}\\n          optionList={dropdownOptions}\\n          label={text('label', 'Name')}\\n          required={boolean('required', true)}\\n          loading={isLoading}\\n          onChange={handleChange}\\n          error={boolean('error', false)}\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\n          placeholder={text('placeholder', 'Select')}\\n          value={selectedValue}\\n          isMenuOpen={menuIsOpen}\\n          width={text('width', '300px')}\\n          onMenuOpen={handleMenuOpen}\\n          onMenuClose={handleMenuClose}\\n          onInputChange={action('onInputChange')}\\n          disabled={boolean('disabled', false)}\\n          limitOptionsList={50}\\n        />\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const FormSelectAsync = addSourceDecorator(addSourceDecorator(() => {\\n  // const [menuIsOpen, setMenuIsOpen] = React.useState<boolean>()\\n  const [options] = React.useState<OptionsType<any>>([])\\n  const handleLoadOptions = React.useCallback(\\n    (inputValue: string, callback: (options: OptionsType<any>) => void) => {\\n      console.log(inputValue)\\n      if (inputValue.length >= 3) {\\n        const newOptions = [\\n          {\\n            label: inputValue + ' - Option 1',\\n            value: inputValue + '1',\\n            description: inputValue + ' - Option 1'\\n          },\\n          {\\n            label: inputValue + ' - Option 2',\\n            value: inputValue + '2',\\n            description: inputValue + ' - Option 2'\\n          }\\n        ]\\n        // setOptions(newOptions)\\n        callback(newOptions)\\n      } else {\\n        callback(options)\\n      }\\n    },\\n    []\\n  )\\n\\n  return (\\n    <ThemeWrapper>\\n      <Box py='3em' bgColor='grey.50'>\\n        <div style={{ width: '350px' }}>\\n          <AsyncFormSelect\\n            loadOptions={handleLoadOptions}\\n            cacheOptions\\n            label={text('label', 'Postal Code')}\\n            required={boolean('required', false)}\\n            error={boolean('error', false)}\\n            errorMessage={text('errorMessage', 'Postal Code is required')}\\n            disabled={boolean('disabled', false)}\\n            showDescription={boolean('showDescription', false)}\\n          />\\n        </div>\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const ListView = addSourceDecorator(addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='6em' bgColor='grey.50'>\\n        <DropDown\\n          variant={text('variant', 'list-view') as tSelectVariant}\\n          optionList={object('optionList', ListViewOption)}\\n          onChange={action('Value selected')}\\n          width={text('width', '120px')}\\n          disabled={boolean('disabled', false)}\\n          limitOptionsList={50}\\n        />\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\nexport const EditedListView = addSourceDecorator(addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='6em' bgColor='grey.50'>\\n        <DropDown\\n          variant={text('variant', 'inline-edit') as tSelectVariant}\\n          optionList={object('optionList', ListViewOption)}\\n          onChange={action('Value selected')}\\n          width={text('width', '100%')}\\n          disabled={boolean('disabled', false)}\\n          limitOptionsList={50}\\n        />\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\nexport const DashedDropdown = addSourceDecorator(addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='6em' bgColor='grey.50'>\\n        <DropDown\\n          variant={text('variant', 'dashed-dropdown') as tSelectVariant}\\n          optionList={object('optionList', ListViewOption)}\\n          onChange={action('Value selected')}\\n          width={text('width', '100%')}\\n          disabled={boolean('disabled', false)}\\n          value={text('value', '') as tSelectVariant}\\n        />\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\",\n      \"locationsMap\": {}\n    }\n  }, _defineProperty(_parameters, \"storySource\", {\n    \"source\": \"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/molecules/DropDown\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"import { action } from '@storybook/addon-actions'\\\\nimport { boolean, object, text } from '@storybook/addon-knobs'\\\\nimport React from 'react'\\\\nimport DropDown from '.'\\\\nimport { path } from '..'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport Box from '../../atoms/Box'\\\\nimport { tSelectVariant } from './interface'\\\\n// import { InputActionMeta } from 'react-select'\\\\n// import AsyncSelect from 'react-select/async'\\\\nimport { OptionsType } from 'react-select'\\\\nimport AsyncFormSelect from './AsyncFormSelect'\\\\n\\\\nexport default {\\\\n  title: `${path}/DropDown`,\\\\n  component: DropDown\\\\n}\\\\n\\\\nconst options = [\\\\n  {\\\\n    value: 'emailVerificationPending',\\\\n    label: 'Email Verification Pending Shipper',\\\\n    title: 'Email Verification Pending Shipper'\\\\n  },\\\\n  { value: 'allShippers', label: 'All Shippers', title: 'All Shippers' },\\\\n  {\\\\n    value: 'approvalPendingShippers',\\\\n    label: 'Approval Pending Shippers',\\\\n    title: 'Approval Pending Shippers'\\\\n  }\\\\n]\\\\n\\\\nconst ListViewOption = [\\\\n  { value: 'Available', label: 'Available', title: 'Available' },\\\\n  { value: 'Dispatched', label: 'Dispatched', title: 'Dispatched' },\\\\n  { value: 'Inactive', label: 'Inactive', title: 'Inactive' }\\\\n]\\\\n\\\\nconst FormSelectOption = [\\\\n  {\\\\n    value: 'Credit',\\\\n    label: 'Credit',\\\\n    title: 'Credit',\\\\n    description:\\\\n      'Credit transaction will add to the outstanding amount of (Delivery Associate)'\\\\n  },\\\\n  {\\\\n    value: 'Debit',\\\\n    label: 'Debit',\\\\n    title: 'Debit',\\\\n    description:\\\\n      'Credit transaction will deduct from the outstanding amount of (Delivery Associate)'\\\\n  }\\\\n]\\\\nexport const DefaultSelect = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'default-select') as tSelectVariant}\\\\n          optionList={object('optionList', options)}\\\\n          label={text('label', 'Name')}\\\\n          required={boolean('required', true)}\\\\n          loading={boolean('loading', true)}\\\\n          onChange={action('Value selected')}\\\\n          error={boolean('error', false)}\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\n          placeholder={text('placeholder', 'Select')}\\\\n          value={text('value', 'chocolate')}\\\\n          width={text('width', '300px')}\\\\n          disabled={boolean('disabled', false)}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const FormSelectPlayground = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'form-select') as tSelectVariant}\\\\n          optionList={object('optionList', FormSelectOption)}\\\\n          label={text('label', 'Name')}\\\\n          required={boolean('required', true)}\\\\n          loading={boolean('loading', false)}\\\\n          onChange={action('Value selected')}\\\\n          error={boolean('error', false)}\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\n          placeholder={text('placeholder', 'Select')}\\\\n          value={text('value', 'emailVerificationPending')}\\\\n          width={text('width', '300px')}\\\\n          onMenuOpen={action('Menu Open')}\\\\n          onMenuClose={action('Menu Close')}\\\\n          showDescription={boolean('Show Description', true)}\\\\n          tooltipMessage={text('tooltipMessage', 'i am form select tooltip')}\\\\n          disabled={boolean('disabled', false)}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\nexport const FormSelectDeferred = () => {\\\\n  const [isLoading, setIsLoading] = React.useState<boolean>(false)\\\\n  const [menuIsOpen, setMenuIsOpen] = React.useState<boolean | undefined>(\\\\n    undefined\\\\n  )\\\\n  const [dropdownOptions, setDropdownOptions] = React.useState<\\\\n    { label: string; value: string }[]\\\\n  >([])\\\\n\\\\n  const [selectedValue, setSelectedValue] = React.useState<string>()\\\\n\\\\n  const handleMenuOpen = () => {\\\\n    action('Menu Opened!')()\\\\n    // setMenuIsOpen(true)\\\\n    if (dropdownOptions.length === 0) {\\\\n      setIsLoading(true)\\\\n      setTimeout(() => {\\\\n        setDropdownOptions(options)\\\\n        setIsLoading(false)\\\\n        setMenuIsOpen(true)\\\\n      }, 2000)\\\\n    }\\\\n  }\\\\n\\\\n  const handleMenuClose = () => {\\\\n    action('Menu Closed!')()\\\\n    setMenuIsOpen(undefined)\\\\n  }\\\\n\\\\n  const handleChange = (value?: string) => {\\\\n    action('Value selected')(value)\\\\n    setSelectedValue(value)\\\\n    setMenuIsOpen(undefined)\\\\n  }\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box py='3em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'form-select') as tSelectVariant}\\\\n          optionList={dropdownOptions}\\\\n          label={text('label', 'Name')}\\\\n          required={boolean('required', true)}\\\\n          loading={isLoading}\\\\n          onChange={handleChange}\\\\n          error={boolean('error', false)}\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\n          placeholder={text('placeholder', 'Select')}\\\\n          value={selectedValue}\\\\n          isMenuOpen={menuIsOpen}\\\\n          width={text('width', '300px')}\\\\n          onMenuOpen={handleMenuOpen}\\\\n          onMenuClose={handleMenuClose}\\\\n          onInputChange={action('onInputChange')}\\\\n          disabled={boolean('disabled', false)}\\\\n          limitOptionsList={50}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const FormSelectAsync = () => {\\\\n  // const [menuIsOpen, setMenuIsOpen] = React.useState<boolean>()\\\\n  const [options] = React.useState<OptionsType<any>>([])\\\\n  const handleLoadOptions = React.useCallback(\\\\n    (inputValue: string, callback: (options: OptionsType<any>) => void) => {\\\\n      console.log(inputValue)\\\\n      if (inputValue.length >= 3) {\\\\n        const newOptions = [\\\\n          {\\\\n            label: inputValue + ' - Option 1',\\\\n            value: inputValue + '1',\\\\n            description: inputValue + ' - Option 1'\\\\n          },\\\\n          {\\\\n            label: inputValue + ' - Option 2',\\\\n            value: inputValue + '2',\\\\n            description: inputValue + ' - Option 2'\\\\n          }\\\\n        ]\\\\n        // setOptions(newOptions)\\\\n        callback(newOptions)\\\\n      } else {\\\\n        callback(options)\\\\n      }\\\\n    },\\\\n    []\\\\n  )\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box py='3em' bgColor='grey.50'>\\\\n        <div style={{ width: '350px' }}>\\\\n          <AsyncFormSelect\\\\n            loadOptions={handleLoadOptions}\\\\n            cacheOptions\\\\n            label={text('label', 'Postal Code')}\\\\n            required={boolean('required', false)}\\\\n            error={boolean('error', false)}\\\\n            errorMessage={text('errorMessage', 'Postal Code is required')}\\\\n            disabled={boolean('disabled', false)}\\\\n            showDescription={boolean('showDescription', false)}\\\\n          />\\\\n        </div>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const ListView = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'list-view') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          onChange={action('Value selected')}\\\\n          width={text('width', '120px')}\\\\n          disabled={boolean('disabled', false)}\\\\n          limitOptionsList={50}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\nexport const EditedListView = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'inline-edit') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          onChange={action('Value selected')}\\\\n          width={text('width', '100%')}\\\\n          disabled={boolean('disabled', false)}\\\\n          limitOptionsList={50}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\nexport const DashedDropdown = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'dashed-dropdown') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          onChange={action('Value selected')}\\\\n          width={text('width', '100%')}\\\\n          disabled={boolean('disabled', false)}\\\\n          value={text('value', '') as tSelectVariant}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/DropDown.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\nimport { action } from '@storybook/addon-actions'\\nimport { boolean, object, text } from '@storybook/addon-knobs'\\nimport React from 'react'\\nimport DropDown from '.'\\nimport { path } from '..'\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\nimport Box from '../../atoms/Box'\\nimport { tSelectVariant } from './interface'\\n// import { InputActionMeta } from 'react-select'\\n// import AsyncSelect from 'react-select/async'\\nimport { OptionsType } from 'react-select'\\nimport AsyncFormSelect from './AsyncFormSelect'\\n\\nexport default {parameters: {\\\"storySource\\\":{\\\"source\\\":\\\"import { action } from '@storybook/addon-actions'\\\\nimport { boolean, object, text } from '@storybook/addon-knobs'\\\\nimport React from 'react'\\\\nimport DropDown from '.'\\\\nimport { path } from '..'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport Box from '../../atoms/Box'\\\\nimport { tSelectVariant } from './interface'\\\\n// import { InputActionMeta } from 'react-select'\\\\n// import AsyncSelect from 'react-select/async'\\\\nimport { OptionsType } from 'react-select'\\\\nimport AsyncFormSelect from './AsyncFormSelect'\\\\n\\\\nexport default {\\\\n  title: `${path}/DropDown`,\\\\n  component: DropDown\\\\n}\\\\n\\\\nconst options = [\\\\n  {\\\\n    value: 'emailVerificationPending',\\\\n    label: 'Email Verification Pending Shipper',\\\\n    title: 'Email Verification Pending Shipper'\\\\n  },\\\\n  { value: 'allShippers', label: 'All Shippers', title: 'All Shippers' },\\\\n  {\\\\n    value: 'approvalPendingShippers',\\\\n    label: 'Approval Pending Shippers',\\\\n    title: 'Approval Pending Shippers'\\\\n  }\\\\n]\\\\n\\\\nconst ListViewOption = [\\\\n  { value: 'Available', label: 'Available', title: 'Available' },\\\\n  { value: 'Dispatched', label: 'Dispatched', title: 'Dispatched' },\\\\n  { value: 'Inactive', label: 'Inactive', title: 'Inactive' }\\\\n]\\\\n\\\\nconst FormSelectOption = [\\\\n  {\\\\n    value: 'Credit',\\\\n    label: 'Credit',\\\\n    title: 'Credit',\\\\n    description:\\\\n      'Credit transaction will add to the outstanding amount of (Delivery Associate)'\\\\n  },\\\\n  {\\\\n    value: 'Debit',\\\\n    label: 'Debit',\\\\n    title: 'Debit',\\\\n    description:\\\\n      'Credit transaction will deduct from the outstanding amount of (Delivery Associate)'\\\\n  }\\\\n]\\\\nexport const DefaultSelect = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'default-select') as tSelectVariant}\\\\n          optionList={object('optionList', options)}\\\\n          label={text('label', 'Name')}\\\\n          required={boolean('required', true)}\\\\n          loading={boolean('loading', true)}\\\\n          onChange={action('Value selected')}\\\\n          error={boolean('error', false)}\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\n          placeholder={text('placeholder', 'Select')}\\\\n          value={text('value', 'chocolate')}\\\\n          width={text('width', '300px')}\\\\n          disabled={boolean('disabled', false)}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const FormSelectPlayground = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'form-select') as tSelectVariant}\\\\n          optionList={object('optionList', FormSelectOption)}\\\\n          label={text('label', 'Name')}\\\\n          required={boolean('required', true)}\\\\n          loading={boolean('loading', false)}\\\\n          onChange={action('Value selected')}\\\\n          error={boolean('error', false)}\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\n          placeholder={text('placeholder', 'Select')}\\\\n          value={text('value', 'emailVerificationPending')}\\\\n          width={text('width', '300px')}\\\\n          onMenuOpen={action('Menu Open')}\\\\n          onMenuClose={action('Menu Close')}\\\\n          showDescription={boolean('Show Description', true)}\\\\n          tooltipMessage={text('tooltipMessage', 'i am form select tooltip')}\\\\n          disabled={boolean('disabled', false)}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\nexport const FormSelectDeferred = () => {\\\\n  const [isLoading, setIsLoading] = React.useState<boolean>(false)\\\\n  const [menuIsOpen, setMenuIsOpen] = React.useState<boolean | undefined>(\\\\n    undefined\\\\n  )\\\\n  const [dropdownOptions, setDropdownOptions] = React.useState<\\\\n    { label: string; value: string }[]\\\\n  >([])\\\\n\\\\n  const [selectedValue, setSelectedValue] = React.useState<string>()\\\\n\\\\n  const handleMenuOpen = () => {\\\\n    action('Menu Opened!')()\\\\n    // setMenuIsOpen(true)\\\\n    if (dropdownOptions.length === 0) {\\\\n      setIsLoading(true)\\\\n      setTimeout(() => {\\\\n        setDropdownOptions(options)\\\\n        setIsLoading(false)\\\\n        setMenuIsOpen(true)\\\\n      }, 2000)\\\\n    }\\\\n  }\\\\n\\\\n  const handleMenuClose = () => {\\\\n    action('Menu Closed!')()\\\\n    setMenuIsOpen(undefined)\\\\n  }\\\\n\\\\n  const handleChange = (value?: string) => {\\\\n    action('Value selected')(value)\\\\n    setSelectedValue(value)\\\\n    setMenuIsOpen(undefined)\\\\n  }\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box py='3em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'form-select') as tSelectVariant}\\\\n          optionList={dropdownOptions}\\\\n          label={text('label', 'Name')}\\\\n          required={boolean('required', true)}\\\\n          loading={isLoading}\\\\n          onChange={handleChange}\\\\n          error={boolean('error', false)}\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\n          placeholder={text('placeholder', 'Select')}\\\\n          value={selectedValue}\\\\n          isMenuOpen={menuIsOpen}\\\\n          width={text('width', '300px')}\\\\n          onMenuOpen={handleMenuOpen}\\\\n          onMenuClose={handleMenuClose}\\\\n          onInputChange={action('onInputChange')}\\\\n          disabled={boolean('disabled', false)}\\\\n          limitOptionsList={50}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const FormSelectAsync = () => {\\\\n  // const [menuIsOpen, setMenuIsOpen] = React.useState<boolean>()\\\\n  const [options] = React.useState<OptionsType<any>>([])\\\\n  const handleLoadOptions = React.useCallback(\\\\n    (inputValue: string, callback: (options: OptionsType<any>) => void) => {\\\\n      console.log(inputValue)\\\\n      if (inputValue.length >= 3) {\\\\n        const newOptions = [\\\\n          {\\\\n            label: inputValue + ' - Option 1',\\\\n            value: inputValue + '1',\\\\n            description: inputValue + ' - Option 1'\\\\n          },\\\\n          {\\\\n            label: inputValue + ' - Option 2',\\\\n            value: inputValue + '2',\\\\n            description: inputValue + ' - Option 2'\\\\n          }\\\\n        ]\\\\n        // setOptions(newOptions)\\\\n        callback(newOptions)\\\\n      } else {\\\\n        callback(options)\\\\n      }\\\\n    },\\\\n    []\\\\n  )\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box py='3em' bgColor='grey.50'>\\\\n        <div style={{ width: '350px' }}>\\\\n          <AsyncFormSelect\\\\n            loadOptions={handleLoadOptions}\\\\n            cacheOptions\\\\n            label={text('label', 'Postal Code')}\\\\n            required={boolean('required', false)}\\\\n            error={boolean('error', false)}\\\\n            errorMessage={text('errorMessage', 'Postal Code is required')}\\\\n            disabled={boolean('disabled', false)}\\\\n            showDescription={boolean('showDescription', false)}\\\\n          />\\\\n        </div>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const ListView = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'list-view') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          onChange={action('Value selected')}\\\\n          width={text('width', '120px')}\\\\n          disabled={boolean('disabled', false)}\\\\n          limitOptionsList={50}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\nexport const EditedListView = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'inline-edit') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          onChange={action('Value selected')}\\\\n          width={text('width', '100%')}\\\\n          disabled={boolean('disabled', false)}\\\\n          limitOptionsList={50}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\nexport const DashedDropdown = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'dashed-dropdown') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          onChange={action('Value selected')}\\\\n          width={text('width', '100%')}\\\\n          disabled={boolean('disabled', false)}\\\\n          value={text('value', '') as tSelectVariant}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\",\\\"locationsMap\\\":{}},},\\n  title: `${path}/DropDown`,\\n  component: DropDown\\n}\\n\\nconst options = [\\n  {\\n    value: 'emailVerificationPending',\\n    label: 'Email Verification Pending Shipper',\\n    title: 'Email Verification Pending Shipper'\\n  },\\n  { value: 'allShippers', label: 'All Shippers', title: 'All Shippers' },\\n  {\\n    value: 'approvalPendingShippers',\\n    label: 'Approval Pending Shippers',\\n    title: 'Approval Pending Shippers'\\n  }\\n]\\n\\nconst ListViewOption = [\\n  { value: 'Available', label: 'Available', title: 'Available' },\\n  { value: 'Dispatched', label: 'Dispatched', title: 'Dispatched' },\\n  { value: 'Inactive', label: 'Inactive', title: 'Inactive' }\\n]\\n\\nconst FormSelectOption = [\\n  {\\n    value: 'Credit',\\n    label: 'Credit',\\n    title: 'Credit',\\n    description:\\n      'Credit transaction will add to the outstanding amount of (Delivery Associate)'\\n  },\\n  {\\n    value: 'Debit',\\n    label: 'Debit',\\n    title: 'Debit',\\n    description:\\n      'Credit transaction will deduct from the outstanding amount of (Delivery Associate)'\\n  }\\n]\\nexport const DefaultSelect = addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='6em' bgColor='grey.50'>\\n        <DropDown\\n          variant={text('variant', 'default-select') as tSelectVariant}\\n          optionList={object('optionList', options)}\\n          label={text('label', 'Name')}\\n          required={boolean('required', true)}\\n          loading={boolean('loading', true)}\\n          onChange={action('Value selected')}\\n          error={boolean('error', false)}\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\n          placeholder={text('placeholder', 'Select')}\\n          value={text('value', 'chocolate')}\\n          width={text('width', '300px')}\\n          disabled={boolean('disabled', false)}\\n        />\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nexport const FormSelectPlayground = addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='6em' bgColor='grey.50'>\\n        <DropDown\\n          variant={text('variant', 'form-select') as tSelectVariant}\\n          optionList={object('optionList', FormSelectOption)}\\n          label={text('label', 'Name')}\\n          required={boolean('required', true)}\\n          loading={boolean('loading', false)}\\n          onChange={action('Value selected')}\\n          error={boolean('error', false)}\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\n          placeholder={text('placeholder', 'Select')}\\n          value={text('value', 'emailVerificationPending')}\\n          width={text('width', '300px')}\\n          onMenuOpen={action('Menu Open')}\\n          onMenuClose={action('Menu Close')}\\n          showDescription={boolean('Show Description', true)}\\n          tooltipMessage={text('tooltipMessage', 'i am form select tooltip')}\\n          disabled={boolean('disabled', false)}\\n        />\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\nexport const FormSelectDeferred = addSourceDecorator(() => {\\n  const [isLoading, setIsLoading] = React.useState<boolean>(false)\\n  const [menuIsOpen, setMenuIsOpen] = React.useState<boolean | undefined>(\\n    undefined\\n  )\\n  const [dropdownOptions, setDropdownOptions] = React.useState<\\n    { label: string; value: string }[]\\n  >([])\\n\\n  const [selectedValue, setSelectedValue] = React.useState<string>()\\n\\n  const handleMenuOpen = () => {\\n    action('Menu Opened!')()\\n    // setMenuIsOpen(true)\\n    if (dropdownOptions.length === 0) {\\n      setIsLoading(true)\\n      setTimeout(() => {\\n        setDropdownOptions(options)\\n        setIsLoading(false)\\n        setMenuIsOpen(true)\\n      }, 2000)\\n    }\\n  }\\n\\n  const handleMenuClose = () => {\\n    action('Menu Closed!')()\\n    setMenuIsOpen(undefined)\\n  }\\n\\n  const handleChange = (value?: string) => {\\n    action('Value selected')(value)\\n    setSelectedValue(value)\\n    setMenuIsOpen(undefined)\\n  }\\n  return (\\n    <ThemeWrapper>\\n      <Box py='3em' bgColor='grey.50'>\\n        <DropDown\\n          variant={text('variant', 'form-select') as tSelectVariant}\\n          optionList={dropdownOptions}\\n          label={text('label', 'Name')}\\n          required={boolean('required', true)}\\n          loading={isLoading}\\n          onChange={handleChange}\\n          error={boolean('error', false)}\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\n          placeholder={text('placeholder', 'Select')}\\n          value={selectedValue}\\n          isMenuOpen={menuIsOpen}\\n          width={text('width', '300px')}\\n          onMenuOpen={handleMenuOpen}\\n          onMenuClose={handleMenuClose}\\n          onInputChange={action('onInputChange')}\\n          disabled={boolean('disabled', false)}\\n          limitOptionsList={50}\\n        />\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nexport const FormSelectAsync = addSourceDecorator(() => {\\n  // const [menuIsOpen, setMenuIsOpen] = React.useState<boolean>()\\n  const [options] = React.useState<OptionsType<any>>([])\\n  const handleLoadOptions = React.useCallback(\\n    (inputValue: string, callback: (options: OptionsType<any>) => void) => {\\n      console.log(inputValue)\\n      if (inputValue.length >= 3) {\\n        const newOptions = [\\n          {\\n            label: inputValue + ' - Option 1',\\n            value: inputValue + '1',\\n            description: inputValue + ' - Option 1'\\n          },\\n          {\\n            label: inputValue + ' - Option 2',\\n            value: inputValue + '2',\\n            description: inputValue + ' - Option 2'\\n          }\\n        ]\\n        // setOptions(newOptions)\\n        callback(newOptions)\\n      } else {\\n        callback(options)\\n      }\\n    },\\n    []\\n  )\\n\\n  return (\\n    <ThemeWrapper>\\n      <Box py='3em' bgColor='grey.50'>\\n        <div style={{ width: '350px' }}>\\n          <AsyncFormSelect\\n            loadOptions={handleLoadOptions}\\n            cacheOptions\\n            label={text('label', 'Postal Code')}\\n            required={boolean('required', false)}\\n            error={boolean('error', false)}\\n            errorMessage={text('errorMessage', 'Postal Code is required')}\\n            disabled={boolean('disabled', false)}\\n            showDescription={boolean('showDescription', false)}\\n          />\\n        </div>\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nexport const ListView = addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='6em' bgColor='grey.50'>\\n        <DropDown\\n          variant={text('variant', 'list-view') as tSelectVariant}\\n          optionList={object('optionList', ListViewOption)}\\n          onChange={action('Value selected')}\\n          width={text('width', '120px')}\\n          disabled={boolean('disabled', false)}\\n          limitOptionsList={50}\\n        />\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\nexport const EditedListView = addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='6em' bgColor='grey.50'>\\n        <DropDown\\n          variant={text('variant', 'inline-edit') as tSelectVariant}\\n          optionList={object('optionList', ListViewOption)}\\n          onChange={action('Value selected')}\\n          width={text('width', '100%')}\\n          disabled={boolean('disabled', false)}\\n          limitOptionsList={50}\\n        />\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\nexport const DashedDropdown = addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='6em' bgColor='grey.50'>\\n        <DropDown\\n          variant={text('variant', 'dashed-dropdown') as tSelectVariant}\\n          optionList={object('optionList', ListViewOption)}\\n          onChange={action('Value selected')}\\n          width={text('width', '100%')}\\n          disabled={boolean('disabled', false)}\\n          value={text('value', '') as tSelectVariant}\\n        />\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\",\n    \"locationsMap\": {}\n  }), _defineProperty(_parameters, \"storySource\", {\n    \"source\": \"import { action } from '@storybook/addon-actions'\\nimport { boolean, object, text } from '@storybook/addon-knobs'\\nimport React from 'react'\\nimport DropDown from '.'\\nimport { path } from '..'\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\nimport Box from '../../atoms/Box'\\nimport { tSelectVariant } from './interface'\\n// import { InputActionMeta } from 'react-select'\\n// import AsyncSelect from 'react-select/async'\\nimport { OptionsType } from 'react-select'\\nimport AsyncFormSelect from './AsyncFormSelect'\\n\\nexport default {\\n  title: `${path}/DropDown`,\\n  component: DropDown\\n}\\n\\nconst options = [\\n  {\\n    value: 'emailVerificationPending',\\n    label: 'Email Verification Pending Shipper',\\n    title: 'Email Verification Pending Shipper'\\n  },\\n  { value: 'allShippers', label: 'All Shippers', title: 'All Shippers' },\\n  {\\n    value: 'approvalPendingShippers',\\n    label: 'Approval Pending Shippers',\\n    title: 'Approval Pending Shippers'\\n  }\\n]\\n\\nconst ListViewOption = [\\n  { value: 'Available', label: 'Available', title: 'Available' },\\n  { value: 'Dispatched', label: 'Dispatched', title: 'Dispatched' },\\n  { value: 'Inactive', label: 'Inactive', title: 'Inactive' }\\n]\\n\\nconst FormSelectOption = [\\n  {\\n    value: 'Credit',\\n    label: 'Credit',\\n    title: 'Credit',\\n    description:\\n      'Credit transaction will add to the outstanding amount of (Delivery Associate)'\\n  },\\n  {\\n    value: 'Debit',\\n    label: 'Debit',\\n    title: 'Debit',\\n    description:\\n      'Credit transaction will deduct from the outstanding amount of (Delivery Associate)'\\n  }\\n]\\nexport const DefaultSelect = () => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='6em' bgColor='grey.50'>\\n        <DropDown\\n          variant={text('variant', 'default-select') as tSelectVariant}\\n          optionList={object('optionList', options)}\\n          label={text('label', 'Name')}\\n          required={boolean('required', true)}\\n          loading={boolean('loading', true)}\\n          onChange={action('Value selected')}\\n          error={boolean('error', false)}\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\n          placeholder={text('placeholder', 'Select')}\\n          value={text('value', 'chocolate')}\\n          width={text('width', '300px')}\\n          disabled={boolean('disabled', false)}\\n        />\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}\\n\\nexport const FormSelectPlayground = () => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='6em' bgColor='grey.50'>\\n        <DropDown\\n          variant={text('variant', 'form-select') as tSelectVariant}\\n          optionList={object('optionList', FormSelectOption)}\\n          label={text('label', 'Name')}\\n          required={boolean('required', true)}\\n          loading={boolean('loading', false)}\\n          onChange={action('Value selected')}\\n          error={boolean('error', false)}\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\n          placeholder={text('placeholder', 'Select')}\\n          value={text('value', 'emailVerificationPending')}\\n          width={text('width', '300px')}\\n          onMenuOpen={action('Menu Open')}\\n          onMenuClose={action('Menu Close')}\\n          showDescription={boolean('Show Description', true)}\\n          tooltipMessage={text('tooltipMessage', 'i am form select tooltip')}\\n          disabled={boolean('disabled', false)}\\n        />\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}\\nexport const FormSelectDeferred = () => {\\n  const [isLoading, setIsLoading] = React.useState<boolean>(false)\\n  const [menuIsOpen, setMenuIsOpen] = React.useState<boolean | undefined>(\\n    undefined\\n  )\\n  const [dropdownOptions, setDropdownOptions] = React.useState<\\n    { label: string; value: string }[]\\n  >([])\\n\\n  const [selectedValue, setSelectedValue] = React.useState<string>()\\n\\n  const handleMenuOpen = () => {\\n    action('Menu Opened!')()\\n    // setMenuIsOpen(true)\\n    if (dropdownOptions.length === 0) {\\n      setIsLoading(true)\\n      setTimeout(() => {\\n        setDropdownOptions(options)\\n        setIsLoading(false)\\n        setMenuIsOpen(true)\\n      }, 2000)\\n    }\\n  }\\n\\n  const handleMenuClose = () => {\\n    action('Menu Closed!')()\\n    setMenuIsOpen(undefined)\\n  }\\n\\n  const handleChange = (value?: string) => {\\n    action('Value selected')(value)\\n    setSelectedValue(value)\\n    setMenuIsOpen(undefined)\\n  }\\n  return (\\n    <ThemeWrapper>\\n      <Box py='3em' bgColor='grey.50'>\\n        <DropDown\\n          variant={text('variant', 'form-select') as tSelectVariant}\\n          optionList={dropdownOptions}\\n          label={text('label', 'Name')}\\n          required={boolean('required', true)}\\n          loading={isLoading}\\n          onChange={handleChange}\\n          error={boolean('error', false)}\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\n          placeholder={text('placeholder', 'Select')}\\n          value={selectedValue}\\n          isMenuOpen={menuIsOpen}\\n          width={text('width', '300px')}\\n          onMenuOpen={handleMenuOpen}\\n          onMenuClose={handleMenuClose}\\n          onInputChange={action('onInputChange')}\\n          disabled={boolean('disabled', false)}\\n          limitOptionsList={50}\\n        />\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}\\n\\nexport const FormSelectAsync = () => {\\n  // const [menuIsOpen, setMenuIsOpen] = React.useState<boolean>()\\n  const [options] = React.useState<OptionsType<any>>([])\\n  const handleLoadOptions = React.useCallback(\\n    (inputValue: string, callback: (options: OptionsType<any>) => void) => {\\n      console.log(inputValue)\\n      if (inputValue.length >= 3) {\\n        const newOptions = [\\n          {\\n            label: inputValue + ' - Option 1',\\n            value: inputValue + '1',\\n            description: inputValue + ' - Option 1'\\n          },\\n          {\\n            label: inputValue + ' - Option 2',\\n            value: inputValue + '2',\\n            description: inputValue + ' - Option 2'\\n          }\\n        ]\\n        // setOptions(newOptions)\\n        callback(newOptions)\\n      } else {\\n        callback(options)\\n      }\\n    },\\n    []\\n  )\\n\\n  return (\\n    <ThemeWrapper>\\n      <Box py='3em' bgColor='grey.50'>\\n        <div style={{ width: '350px' }}>\\n          <AsyncFormSelect\\n            loadOptions={handleLoadOptions}\\n            cacheOptions\\n            label={text('label', 'Postal Code')}\\n            required={boolean('required', false)}\\n            error={boolean('error', false)}\\n            errorMessage={text('errorMessage', 'Postal Code is required')}\\n            disabled={boolean('disabled', false)}\\n            showDescription={boolean('showDescription', false)}\\n          />\\n        </div>\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}\\n\\nexport const ListView = () => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='6em' bgColor='grey.50'>\\n        <DropDown\\n          variant={text('variant', 'list-view') as tSelectVariant}\\n          optionList={object('optionList', ListViewOption)}\\n          onChange={action('Value selected')}\\n          width={text('width', '120px')}\\n          disabled={boolean('disabled', false)}\\n          limitOptionsList={50}\\n        />\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}\\nexport const EditedListView = () => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='6em' bgColor='grey.50'>\\n        <DropDown\\n          variant={text('variant', 'inline-edit') as tSelectVariant}\\n          optionList={object('optionList', ListViewOption)}\\n          onChange={action('Value selected')}\\n          width={text('width', '100%')}\\n          disabled={boolean('disabled', false)}\\n          limitOptionsList={50}\\n        />\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}\\nexport const DashedDropdown = () => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='6em' bgColor='grey.50'>\\n        <DropDown\\n          variant={text('variant', 'dashed-dropdown') as tSelectVariant}\\n          optionList={object('optionList', ListViewOption)}\\n          onChange={action('Value selected')}\\n          width={text('width', '100%')}\\n          disabled={boolean('disabled', false)}\\n          value={text('value', '') as tSelectVariant}\\n        />\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}\\n\",\n    \"locationsMap\": {}\n  }), _parameters),\n  title: path + \"/DropDown\",\n  component: DropDown\n};\nvar options = [{\n  value: 'emailVerificationPending',\n  label: 'Email Verification Pending Shipper',\n  title: 'Email Verification Pending Shipper'\n}, {\n  value: 'allShippers',\n  label: 'All Shippers',\n  title: 'All Shippers'\n}, {\n  value: 'approvalPendingShippers',\n  label: 'Approval Pending Shippers',\n  title: 'Approval Pending Shippers'\n}];\nvar ListViewOption = [{\n  value: 'Available',\n  label: 'Available',\n  title: 'Available'\n}, {\n  value: 'Dispatched',\n  label: 'Dispatched',\n  title: 'Dispatched'\n}, {\n  value: 'Inactive',\n  label: 'Inactive',\n  title: 'Inactive'\n}];\nvar FormSelectOption = [{\n  value: 'Credit',\n  label: 'Credit',\n  title: 'Credit',\n  description: 'Credit transaction will add to the outstanding amount of (Delivery Associate)'\n}, {\n  value: 'Debit',\n  label: 'Debit',\n  title: 'Debit',\n  description: 'Credit transaction will deduct from the outstanding amount of (Delivery Associate)'\n}];\nexport var DefaultSelect = addSourceDecorator(addSourceDecorator(addSourceDecorator(function () {\n  return React.createElement(ThemeWrapper, null, React.createElement(Box, {\n    p: '6em',\n    bgColor: 'grey.50'\n  }, React.createElement(DropDown, {\n    variant: text('variant', 'default-select'),\n    optionList: object('optionList', options),\n    label: text('label', 'Name'),\n    required: _boolean('required', true),\n    loading: _boolean('loading', true),\n    onChange: action('Value selected'),\n    error: _boolean('error', false),\n    errorMessage: text('errorMessage', 'Mandatory field'),\n    placeholder: text('placeholder', 'Select'),\n    value: text('value', 'chocolate'),\n    width: text('width', '300px'),\n    disabled: _boolean('disabled', false)\n  })));\n}, {\n  __STORY__: __STORY__,\n  __ADDS_MAP__: __ADDS_MAP__,\n  __MAIN_FILE_LOCATION__: __MAIN_FILE_LOCATION__,\n  __MODULE_DEPENDENCIES__: __MODULE_DEPENDENCIES__,\n  __LOCAL_DEPENDENCIES__: __LOCAL_DEPENDENCIES__,\n  __SOURCE_PREFIX__: __SOURCE_PREFIX__,\n  __IDS_TO_FRAMEWORKS__: __IDS_TO_FRAMEWORKS__\n}), {\n  __STORY__: __STORY__,\n  __ADDS_MAP__: __ADDS_MAP__,\n  __MAIN_FILE_LOCATION__: __MAIN_FILE_LOCATION__,\n  __MODULE_DEPENDENCIES__: __MODULE_DEPENDENCIES__,\n  __LOCAL_DEPENDENCIES__: __LOCAL_DEPENDENCIES__,\n  __SOURCE_PREFIX__: __SOURCE_PREFIX__,\n  __IDS_TO_FRAMEWORKS__: __IDS_TO_FRAMEWORKS__\n}), {\n  __STORY__: __STORY__,\n  __ADDS_MAP__: __ADDS_MAP__,\n  __MAIN_FILE_LOCATION__: __MAIN_FILE_LOCATION__,\n  __MODULE_DEPENDENCIES__: __MODULE_DEPENDENCIES__,\n  __LOCAL_DEPENDENCIES__: __LOCAL_DEPENDENCIES__,\n  __SOURCE_PREFIX__: __SOURCE_PREFIX__,\n  __IDS_TO_FRAMEWORKS__: __IDS_TO_FRAMEWORKS__\n});\n;\n;\nexport var FormSelectPlayground = addSourceDecorator(addSourceDecorator(addSourceDecorator(function () {\n  return React.createElement(ThemeWrapper, null, React.createElement(Box, {\n    p: '6em',\n    bgColor: 'grey.50'\n  }, React.createElement(DropDown, {\n    variant: text('variant', 'form-select'),\n    optionList: object('optionList', FormSelectOption),\n    label: text('label', 'Name'),\n    required: _boolean('required', true),\n    loading: _boolean('loading', false),\n    onChange: action('Value selected'),\n    error: _boolean('error', false),\n    errorMessage: text('errorMessage', 'Mandatory field'),\n    placeholder: text('placeholder', 'Select'),\n    value: text('value', 'emailVerificationPending'),\n    width: text('width', '300px'),\n    onMenuOpen: action('Menu Open'),\n    onMenuClose: action('Menu Close'),\n    showDescription: _boolean('Show Description', true),\n    tooltipMessage: text('tooltipMessage', 'i am form select tooltip'),\n    disabled: _boolean('disabled', false)\n  })));\n}, {\n  __STORY__: __STORY__,\n  __ADDS_MAP__: __ADDS_MAP__,\n  __MAIN_FILE_LOCATION__: __MAIN_FILE_LOCATION__,\n  __MODULE_DEPENDENCIES__: __MODULE_DEPENDENCIES__,\n  __LOCAL_DEPENDENCIES__: __LOCAL_DEPENDENCIES__,\n  __SOURCE_PREFIX__: __SOURCE_PREFIX__,\n  __IDS_TO_FRAMEWORKS__: __IDS_TO_FRAMEWORKS__\n}), {\n  __STORY__: __STORY__,\n  __ADDS_MAP__: __ADDS_MAP__,\n  __MAIN_FILE_LOCATION__: __MAIN_FILE_LOCATION__,\n  __MODULE_DEPENDENCIES__: __MODULE_DEPENDENCIES__,\n  __LOCAL_DEPENDENCIES__: __LOCAL_DEPENDENCIES__,\n  __SOURCE_PREFIX__: __SOURCE_PREFIX__,\n  __IDS_TO_FRAMEWORKS__: __IDS_TO_FRAMEWORKS__\n}), {\n  __STORY__: __STORY__,\n  __ADDS_MAP__: __ADDS_MAP__,\n  __MAIN_FILE_LOCATION__: __MAIN_FILE_LOCATION__,\n  __MODULE_DEPENDENCIES__: __MODULE_DEPENDENCIES__,\n  __LOCAL_DEPENDENCIES__: __LOCAL_DEPENDENCIES__,\n  __SOURCE_PREFIX__: __SOURCE_PREFIX__,\n  __IDS_TO_FRAMEWORKS__: __IDS_TO_FRAMEWORKS__\n});\n;\n;\nexport var FormSelectDeferred = addSourceDecorator(addSourceDecorator(addSourceDecorator(function () {\n  var _a = React.useState(false),\n      isLoading = _a[0],\n      setIsLoading = _a[1];\n\n  var _b = React.useState(undefined),\n      menuIsOpen = _b[0],\n      setMenuIsOpen = _b[1];\n\n  var _c = React.useState([]),\n      dropdownOptions = _c[0],\n      setDropdownOptions = _c[1];\n\n  var _d = React.useState(),\n      selectedValue = _d[0],\n      setSelectedValue = _d[1];\n\n  var handleMenuOpen = function handleMenuOpen() {\n    action('Menu Opened!')(); // setMenuIsOpen(true)\n\n    if (dropdownOptions.length === 0) {\n      setIsLoading(true);\n      setTimeout(function () {\n        setDropdownOptions(options);\n        setIsLoading(false);\n        setMenuIsOpen(true);\n      }, 2000);\n    }\n  };\n\n  var handleMenuClose = function handleMenuClose() {\n    action('Menu Closed!')();\n    setMenuIsOpen(undefined);\n  };\n\n  var handleChange = function handleChange(value) {\n    action('Value selected')(value);\n    setSelectedValue(value);\n    setMenuIsOpen(undefined);\n  };\n\n  return React.createElement(ThemeWrapper, null, React.createElement(Box, {\n    py: '3em',\n    bgColor: 'grey.50'\n  }, React.createElement(DropDown, {\n    variant: text('variant', 'form-select'),\n    optionList: dropdownOptions,\n    label: text('label', 'Name'),\n    required: _boolean('required', true),\n    loading: isLoading,\n    onChange: handleChange,\n    error: _boolean('error', false),\n    errorMessage: text('errorMessage', 'Mandatory field'),\n    placeholder: text('placeholder', 'Select'),\n    value: selectedValue,\n    isMenuOpen: menuIsOpen,\n    width: text('width', '300px'),\n    onMenuOpen: handleMenuOpen,\n    onMenuClose: handleMenuClose,\n    onInputChange: action('onInputChange'),\n    disabled: _boolean('disabled', false),\n    limitOptionsList: 50\n  })));\n}, {\n  __STORY__: __STORY__,\n  __ADDS_MAP__: __ADDS_MAP__,\n  __MAIN_FILE_LOCATION__: __MAIN_FILE_LOCATION__,\n  __MODULE_DEPENDENCIES__: __MODULE_DEPENDENCIES__,\n  __LOCAL_DEPENDENCIES__: __LOCAL_DEPENDENCIES__,\n  __SOURCE_PREFIX__: __SOURCE_PREFIX__,\n  __IDS_TO_FRAMEWORKS__: __IDS_TO_FRAMEWORKS__\n}), {\n  __STORY__: __STORY__,\n  __ADDS_MAP__: __ADDS_MAP__,\n  __MAIN_FILE_LOCATION__: __MAIN_FILE_LOCATION__,\n  __MODULE_DEPENDENCIES__: __MODULE_DEPENDENCIES__,\n  __LOCAL_DEPENDENCIES__: __LOCAL_DEPENDENCIES__,\n  __SOURCE_PREFIX__: __SOURCE_PREFIX__,\n  __IDS_TO_FRAMEWORKS__: __IDS_TO_FRAMEWORKS__\n}), {\n  __STORY__: __STORY__,\n  __ADDS_MAP__: __ADDS_MAP__,\n  __MAIN_FILE_LOCATION__: __MAIN_FILE_LOCATION__,\n  __MODULE_DEPENDENCIES__: __MODULE_DEPENDENCIES__,\n  __LOCAL_DEPENDENCIES__: __LOCAL_DEPENDENCIES__,\n  __SOURCE_PREFIX__: __SOURCE_PREFIX__,\n  __IDS_TO_FRAMEWORKS__: __IDS_TO_FRAMEWORKS__\n});\n;\n;\nexport var FormSelectAsync = addSourceDecorator(addSourceDecorator(addSourceDecorator(function () {\n  // const [menuIsOpen, setMenuIsOpen] = React.useState<boolean>()\n  var options = React.useState([])[0];\n  var handleLoadOptions = React.useCallback(function (inputValue, callback) {\n    console.log(inputValue);\n\n    if (inputValue.length >= 3) {\n      var newOptions = [{\n        label: inputValue + ' - Option 1',\n        value: inputValue + '1',\n        description: inputValue + ' - Option 1'\n      }, {\n        label: inputValue + ' - Option 2',\n        value: inputValue + '2',\n        description: inputValue + ' - Option 2'\n      }]; // setOptions(newOptions)\n\n      callback(newOptions);\n    } else {\n      callback(options);\n    }\n  }, []);\n  return React.createElement(ThemeWrapper, null, React.createElement(Box, {\n    py: '3em',\n    bgColor: 'grey.50'\n  }, React.createElement(\"div\", {\n    style: {\n      width: '350px'\n    }\n  }, React.createElement(AsyncFormSelect, {\n    loadOptions: handleLoadOptions,\n    cacheOptions: true,\n    label: text('label', 'Postal Code'),\n    required: _boolean('required', false),\n    error: _boolean('error', false),\n    errorMessage: text('errorMessage', 'Postal Code is required'),\n    disabled: _boolean('disabled', false),\n    showDescription: _boolean('showDescription', false)\n  }))));\n}, {\n  __STORY__: __STORY__,\n  __ADDS_MAP__: __ADDS_MAP__,\n  __MAIN_FILE_LOCATION__: __MAIN_FILE_LOCATION__,\n  __MODULE_DEPENDENCIES__: __MODULE_DEPENDENCIES__,\n  __LOCAL_DEPENDENCIES__: __LOCAL_DEPENDENCIES__,\n  __SOURCE_PREFIX__: __SOURCE_PREFIX__,\n  __IDS_TO_FRAMEWORKS__: __IDS_TO_FRAMEWORKS__\n}), {\n  __STORY__: __STORY__,\n  __ADDS_MAP__: __ADDS_MAP__,\n  __MAIN_FILE_LOCATION__: __MAIN_FILE_LOCATION__,\n  __MODULE_DEPENDENCIES__: __MODULE_DEPENDENCIES__,\n  __LOCAL_DEPENDENCIES__: __LOCAL_DEPENDENCIES__,\n  __SOURCE_PREFIX__: __SOURCE_PREFIX__,\n  __IDS_TO_FRAMEWORKS__: __IDS_TO_FRAMEWORKS__\n}), {\n  __STORY__: __STORY__,\n  __ADDS_MAP__: __ADDS_MAP__,\n  __MAIN_FILE_LOCATION__: __MAIN_FILE_LOCATION__,\n  __MODULE_DEPENDENCIES__: __MODULE_DEPENDENCIES__,\n  __LOCAL_DEPENDENCIES__: __LOCAL_DEPENDENCIES__,\n  __SOURCE_PREFIX__: __SOURCE_PREFIX__,\n  __IDS_TO_FRAMEWORKS__: __IDS_TO_FRAMEWORKS__\n});\n;\n;\nexport var ListView = addSourceDecorator(addSourceDecorator(addSourceDecorator(function () {\n  return React.createElement(ThemeWrapper, null, React.createElement(Box, {\n    p: '6em',\n    bgColor: 'grey.50'\n  }, React.createElement(DropDown, {\n    variant: text('variant', 'list-view'),\n    optionList: object('optionList', ListViewOption),\n    onChange: action('Value selected'),\n    width: text('width', '120px'),\n    disabled: _boolean('disabled', false),\n    limitOptionsList: 50\n  })));\n}, {\n  __STORY__: __STORY__,\n  __ADDS_MAP__: __ADDS_MAP__,\n  __MAIN_FILE_LOCATION__: __MAIN_FILE_LOCATION__,\n  __MODULE_DEPENDENCIES__: __MODULE_DEPENDENCIES__,\n  __LOCAL_DEPENDENCIES__: __LOCAL_DEPENDENCIES__,\n  __SOURCE_PREFIX__: __SOURCE_PREFIX__,\n  __IDS_TO_FRAMEWORKS__: __IDS_TO_FRAMEWORKS__\n}), {\n  __STORY__: __STORY__,\n  __ADDS_MAP__: __ADDS_MAP__,\n  __MAIN_FILE_LOCATION__: __MAIN_FILE_LOCATION__,\n  __MODULE_DEPENDENCIES__: __MODULE_DEPENDENCIES__,\n  __LOCAL_DEPENDENCIES__: __LOCAL_DEPENDENCIES__,\n  __SOURCE_PREFIX__: __SOURCE_PREFIX__,\n  __IDS_TO_FRAMEWORKS__: __IDS_TO_FRAMEWORKS__\n}), {\n  __STORY__: __STORY__,\n  __ADDS_MAP__: __ADDS_MAP__,\n  __MAIN_FILE_LOCATION__: __MAIN_FILE_LOCATION__,\n  __MODULE_DEPENDENCIES__: __MODULE_DEPENDENCIES__,\n  __LOCAL_DEPENDENCIES__: __LOCAL_DEPENDENCIES__,\n  __SOURCE_PREFIX__: __SOURCE_PREFIX__,\n  __IDS_TO_FRAMEWORKS__: __IDS_TO_FRAMEWORKS__\n});\n;\n;\nexport var EditedListView = addSourceDecorator(addSourceDecorator(addSourceDecorator(function () {\n  return React.createElement(ThemeWrapper, null, React.createElement(Box, {\n    p: '6em',\n    bgColor: 'grey.50'\n  }, React.createElement(DropDown, {\n    variant: text('variant', 'inline-edit'),\n    optionList: object('optionList', ListViewOption),\n    onChange: action('Value selected'),\n    width: text('width', '100%'),\n    disabled: _boolean('disabled', false),\n    limitOptionsList: 50\n  })));\n}, {\n  __STORY__: __STORY__,\n  __ADDS_MAP__: __ADDS_MAP__,\n  __MAIN_FILE_LOCATION__: __MAIN_FILE_LOCATION__,\n  __MODULE_DEPENDENCIES__: __MODULE_DEPENDENCIES__,\n  __LOCAL_DEPENDENCIES__: __LOCAL_DEPENDENCIES__,\n  __SOURCE_PREFIX__: __SOURCE_PREFIX__,\n  __IDS_TO_FRAMEWORKS__: __IDS_TO_FRAMEWORKS__\n}), {\n  __STORY__: __STORY__,\n  __ADDS_MAP__: __ADDS_MAP__,\n  __MAIN_FILE_LOCATION__: __MAIN_FILE_LOCATION__,\n  __MODULE_DEPENDENCIES__: __MODULE_DEPENDENCIES__,\n  __LOCAL_DEPENDENCIES__: __LOCAL_DEPENDENCIES__,\n  __SOURCE_PREFIX__: __SOURCE_PREFIX__,\n  __IDS_TO_FRAMEWORKS__: __IDS_TO_FRAMEWORKS__\n}), {\n  __STORY__: __STORY__,\n  __ADDS_MAP__: __ADDS_MAP__,\n  __MAIN_FILE_LOCATION__: __MAIN_FILE_LOCATION__,\n  __MODULE_DEPENDENCIES__: __MODULE_DEPENDENCIES__,\n  __LOCAL_DEPENDENCIES__: __LOCAL_DEPENDENCIES__,\n  __SOURCE_PREFIX__: __SOURCE_PREFIX__,\n  __IDS_TO_FRAMEWORKS__: __IDS_TO_FRAMEWORKS__\n});\n;\n;\nexport var DashedDropdown = addSourceDecorator(addSourceDecorator(addSourceDecorator(function () {\n  return React.createElement(ThemeWrapper, null, React.createElement(Box, {\n    p: '6em',\n    bgColor: 'grey.50'\n  }, React.createElement(DropDown, {\n    variant: text('variant', 'dashed-dropdown'),\n    optionList: object('optionList', ListViewOption),\n    onChange: action('Value selected'),\n    width: text('width', '100%'),\n    disabled: _boolean('disabled', false),\n    value: text('value', '')\n  })));\n}, {\n  __STORY__: __STORY__,\n  __ADDS_MAP__: __ADDS_MAP__,\n  __MAIN_FILE_LOCATION__: __MAIN_FILE_LOCATION__,\n  __MODULE_DEPENDENCIES__: __MODULE_DEPENDENCIES__,\n  __LOCAL_DEPENDENCIES__: __LOCAL_DEPENDENCIES__,\n  __SOURCE_PREFIX__: __SOURCE_PREFIX__,\n  __IDS_TO_FRAMEWORKS__: __IDS_TO_FRAMEWORKS__\n}), {\n  __STORY__: __STORY__,\n  __ADDS_MAP__: __ADDS_MAP__,\n  __MAIN_FILE_LOCATION__: __MAIN_FILE_LOCATION__,\n  __MODULE_DEPENDENCIES__: __MODULE_DEPENDENCIES__,\n  __LOCAL_DEPENDENCIES__: __LOCAL_DEPENDENCIES__,\n  __SOURCE_PREFIX__: __SOURCE_PREFIX__,\n  __IDS_TO_FRAMEWORKS__: __IDS_TO_FRAMEWORKS__\n}), {\n  __STORY__: __STORY__,\n  __ADDS_MAP__: __ADDS_MAP__,\n  __MAIN_FILE_LOCATION__: __MAIN_FILE_LOCATION__,\n  __MODULE_DEPENDENCIES__: __MODULE_DEPENDENCIES__,\n  __LOCAL_DEPENDENCIES__: __LOCAL_DEPENDENCIES__,\n  __SOURCE_PREFIX__: __SOURCE_PREFIX__,\n  __IDS_TO_FRAMEWORKS__: __IDS_TO_FRAMEWORKS__\n});","map":{"version":3,"sources":["/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/node_modules/react-docgen-typescript-loader/dist/index.js!/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/node_modules/eslint-loader/dist/cjs.js??ref--6-0!/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/node_modules/@storybook/source-loader/dist/server/index.js??ref--11!/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/node_modules/@storybook/source-loader/dist/server/index.js!/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/node_modules/@storybook/source-loader/dist/server/index.js!/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/molecules/DropDown/DropDown.stories.tsx"],"names":[],"mappings":";;;;AACA;AACA;AACA;AACA,IAAI,gBAAgB,GAAG,OAAO,CAAC,kCAAD,CAAP,CAA4C,UAAnE,C,CACA;;;AACA,IAAI,kBAAkB,GAAG,OAAO,CAAC,kCAAD,CAAP,CAA4C,SAArE,C,CACA;;;AACA,IAAI,iBAAiB,GAAG,8GAAxB,C,CACA;;AACA,IAAI,SAAS,GAAG,yzoFAAhB,C,CACA;;AACA,IAAI,YAAY,GAAG,EAAnB,C,CACA;;AACA,IAAI,sBAAsB,GAAG,uBAA7B,C,CACA;;AACA,IAAI,uBAAuB,GAAG,EAA9B,C,CACA;;AACA,IAAI,sBAAsB,GAAG,EAA7B,C,CACA;;AACA,IAAI,qBAAqB,GAAG,EAA5B;AAGA;AACA;AACA;;AACA,IAAI,gBAAgB,GAAG,OAAO,CAAC,kCAAD,CAAP,CAA4C,UAAnE,C,CACA;;;AACA,IAAI,kBAAkB,GAAG,OAAO,CAAC,kCAAD,CAAP,CAA4C,SAArE,C,CACA;;;AACA,IAAI,iBAAiB,GAAG,8GAAxB,C,CACA;;AACA,IAAI,SAAS,GAAG,io1BAAhB,C,CACA;;AACA,IAAI,YAAY,GAAG,EAAnB,C,CACA;;AACA,IAAI,sBAAsB,GAAG,uBAA7B,C,CACA;;AACA,IAAI,uBAAuB,GAAG,EAA9B,C,CACA;;AACA,IAAI,sBAAsB,GAAG,EAA7B,C,CACA;;AACA,IAAI,qBAAqB,GAAG,EAA5B;AAGA;AACA;AACA;;AACA,IAAI,gBAAgB,GAAG,OAAO,CAAC,kCAAD,CAAP,CAA4C,UAAnE,C,CACA;;;AACA,IAAI,kBAAkB,GAAG,OAAO,CAAC,kCAAD,CAAP,CAA4C,SAArE,C,CACA;;;AACA,IAAI,iBAAiB,GAAG,8GAAxB,C,CACA;;AACA,IAAI,SAAS,GAAG,6mQAAhB,C,CACA;;AACA,IAAI,YAAY,GAAG,EAAnB,C,CACA;;AACA,IAAI,sBAAsB,GAAG,uBAA7B,C,CACA;;AACA,IAAI,uBAAuB,GAAG,EAA9B,C,CACA;;AACA,IAAI,sBAAsB,GAAG,EAA7B,C,CACA;;AACA,IAAI,qBAAqB,GAAG,EAA5B;AAEA,SAAS,MAAT,QAAuB,0BAAvB;AACA,SAAS,OAAO,IAAP,QAAT,EAAkB,MAAlB,EAA0B,IAA1B,QAAsC,wBAAtC;AACA,OAAO,KAAP,MAAkB,OAAlB;AACA,OAAO,QAAP,MAAqB,GAArB;AACA,SAAS,IAAT,QAAqB,IAArB;AACA,OAAO,YAAP,MAAyB,4CAAzB;AACA,OAAO,GAAP,MAAgB,iBAAhB;AAKA,OAAO,eAAP,MAA4B,mBAA5B;AAEA,eAAe;AAAC,EAAA,UAAU;AAAG,mBAAc;AAAC,gBAAS,yzoFAAV;AAAo0oF,sBAAe;AAAn1oF;AAAjB,iDAAs3oF;AAAC,cAAS,io1BAAV;AAA4o1B,oBAAe;AAA3p1B,GAAt3oF,+CAAmi+G;AAAC,cAAS,6mQAAV;AAAwnQ,oBAAe;AAAvoQ,GAAni+G,eAAX;AACb,EAAA,KAAK,EAAK,IAAI,GAAA,WADD;AAEb,EAAA,SAAS,EAAE;AAFE,CAAf;AAKA,IAAM,OAAO,GAAG,CACd;AACE,EAAA,KAAK,EAAE,0BADT;AAEE,EAAA,KAAK,EAAE,oCAFT;AAGE,EAAA,KAAK,EAAE;AAHT,CADc,EAMd;AAAE,EAAA,KAAK,EAAE,aAAT;AAAwB,EAAA,KAAK,EAAE,cAA/B;AAA+C,EAAA,KAAK,EAAE;AAAtD,CANc,EAOd;AACE,EAAA,KAAK,EAAE,yBADT;AAEE,EAAA,KAAK,EAAE,2BAFT;AAGE,EAAA,KAAK,EAAE;AAHT,CAPc,CAAhB;AAcA,IAAM,cAAc,GAAG,CACrB;AAAE,EAAA,KAAK,EAAE,WAAT;AAAsB,EAAA,KAAK,EAAE,WAA7B;AAA0C,EAAA,KAAK,EAAE;AAAjD,CADqB,EAErB;AAAE,EAAA,KAAK,EAAE,YAAT;AAAuB,EAAA,KAAK,EAAE,YAA9B;AAA4C,EAAA,KAAK,EAAE;AAAnD,CAFqB,EAGrB;AAAE,EAAA,KAAK,EAAE,UAAT;AAAqB,EAAA,KAAK,EAAE,UAA5B;AAAwC,EAAA,KAAK,EAAE;AAA/C,CAHqB,CAAvB;AAMA,IAAM,gBAAgB,GAAG,CACvB;AACE,EAAA,KAAK,EAAE,QADT;AAEE,EAAA,KAAK,EAAE,QAFT;AAGE,EAAA,KAAK,EAAE,QAHT;AAIE,EAAA,WAAW,EACT;AALJ,CADuB,EAQvB;AACE,EAAA,KAAK,EAAE,OADT;AAEE,EAAA,KAAK,EAAE,OAFT;AAGE,EAAA,KAAK,EAAE,OAHT;AAIE,EAAA,WAAW,EACT;AALJ,CARuB,CAAzB;AAgBA,OAAO,IAAM,aAAa,GAAG,kBAAkB,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,YAAA;AACpF,SACE,KAAA,CAAA,aAAA,CAAC,YAAD,EAAa,IAAb,EACE,KAAA,CAAA,aAAA,CAAC,GAAD,EAAI;AAAC,IAAA,CAAC,EAAC,KAAH;AAAS,IAAA,OAAO,EAAC;AAAjB,GAAJ,EACE,KAAA,CAAA,aAAA,CAAC,QAAD,EAAS;AACP,IAAA,OAAO,EAAE,IAAI,CAAC,SAAD,EAAY,gBAAZ,CADN;AAEP,IAAA,UAAU,EAAE,MAAM,CAAC,YAAD,EAAe,OAAf,CAFX;AAGP,IAAA,KAAK,EAAE,IAAI,CAAC,OAAD,EAAU,MAAV,CAHJ;AAIP,IAAA,QAAQ,EAAE,QAAO,CAAC,UAAD,EAAa,IAAb,CAJV;AAKP,IAAA,OAAO,EAAE,QAAO,CAAC,SAAD,EAAY,IAAZ,CALT;AAMP,IAAA,QAAQ,EAAE,MAAM,CAAC,gBAAD,CANT;AAOP,IAAA,KAAK,EAAE,QAAO,CAAC,OAAD,EAAU,KAAV,CAPP;AAQP,IAAA,YAAY,EAAE,IAAI,CAAC,cAAD,EAAiB,iBAAjB,CARX;AASP,IAAA,WAAW,EAAE,IAAI,CAAC,aAAD,EAAgB,QAAhB,CATV;AAUP,IAAA,KAAK,EAAE,IAAI,CAAC,OAAD,EAAU,WAAV,CAVJ;AAWP,IAAA,KAAK,EAAE,IAAI,CAAC,OAAD,EAAU,OAAV,CAXJ;AAYP,IAAA,QAAQ,EAAE,QAAO,CAAC,UAAD,EAAa,KAAb;AAZV,GAAT,CADF,CADF,CADF;AAoBD,CArBoF,EAqBlF;AAAC,EAAA,SAAS,EAAA,SAAV;AAAY,EAAA,YAAY,EAAA,YAAxB;AAAyB,EAAA,sBAAsB,EAAA,sBAA/C;AAAgD,EAAA,uBAAuB,EAAA,uBAAvE;AAAwE,EAAA,sBAAsB,EAAA,sBAA9F;AAA+F,EAAA,iBAAiB,EAAA,iBAAhH;AAAiH,EAAA,qBAAqB,EAAA;AAAtI,CArBkF,CAAnB,EAqB2E;AAAC,EAAA,SAAS,EAAA,SAAV;AAAY,EAAA,YAAY,EAAA,YAAxB;AAAyB,EAAA,sBAAsB,EAAA,sBAA/C;AAAgD,EAAA,uBAAuB,EAAA,uBAAvE;AAAwE,EAAA,sBAAsB,EAAA,sBAA9F;AAA+F,EAAA,iBAAiB,EAAA,iBAAhH;AAAiH,EAAA,qBAAqB,EAAA;AAAtI,CArB3E,CAAnB,EAqBwO;AAAC,EAAA,SAAS,EAAA,SAAV;AAAY,EAAA,YAAY,EAAA,YAAxB;AAAyB,EAAA,sBAAsB,EAAA,sBAA/C;AAAgD,EAAA,uBAAuB,EAAA,uBAAvE;AAAwE,EAAA,sBAAsB,EAAA,sBAA9F;AAA+F,EAAA,iBAAiB,EAAA,iBAAhH;AAAiH,EAAA,qBAAqB,EAAA;AAAtI,CArBxO,CAAxC;AAqByZ;AAAC;AAEja,OAAO,IAAM,oBAAoB,GAAG,kBAAkB,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,YAAA;AAC3F,SACE,KAAA,CAAA,aAAA,CAAC,YAAD,EAAa,IAAb,EACE,KAAA,CAAA,aAAA,CAAC,GAAD,EAAI;AAAC,IAAA,CAAC,EAAC,KAAH;AAAS,IAAA,OAAO,EAAC;AAAjB,GAAJ,EACE,KAAA,CAAA,aAAA,CAAC,QAAD,EAAS;AACP,IAAA,OAAO,EAAE,IAAI,CAAC,SAAD,EAAY,aAAZ,CADN;AAEP,IAAA,UAAU,EAAE,MAAM,CAAC,YAAD,EAAe,gBAAf,CAFX;AAGP,IAAA,KAAK,EAAE,IAAI,CAAC,OAAD,EAAU,MAAV,CAHJ;AAIP,IAAA,QAAQ,EAAE,QAAO,CAAC,UAAD,EAAa,IAAb,CAJV;AAKP,IAAA,OAAO,EAAE,QAAO,CAAC,SAAD,EAAY,KAAZ,CALT;AAMP,IAAA,QAAQ,EAAE,MAAM,CAAC,gBAAD,CANT;AAOP,IAAA,KAAK,EAAE,QAAO,CAAC,OAAD,EAAU,KAAV,CAPP;AAQP,IAAA,YAAY,EAAE,IAAI,CAAC,cAAD,EAAiB,iBAAjB,CARX;AASP,IAAA,WAAW,EAAE,IAAI,CAAC,aAAD,EAAgB,QAAhB,CATV;AAUP,IAAA,KAAK,EAAE,IAAI,CAAC,OAAD,EAAU,0BAAV,CAVJ;AAWP,IAAA,KAAK,EAAE,IAAI,CAAC,OAAD,EAAU,OAAV,CAXJ;AAYP,IAAA,UAAU,EAAE,MAAM,CAAC,WAAD,CAZX;AAaP,IAAA,WAAW,EAAE,MAAM,CAAC,YAAD,CAbZ;AAcP,IAAA,eAAe,EAAE,QAAO,CAAC,kBAAD,EAAqB,IAArB,CAdjB;AAeP,IAAA,cAAc,EAAE,IAAI,CAAC,gBAAD,EAAmB,0BAAnB,CAfb;AAgBP,IAAA,QAAQ,EAAE,QAAO,CAAC,UAAD,EAAa,KAAb;AAhBV,GAAT,CADF,CADF,CADF;AAwBD,CAzB2F,EAyBzF;AAAC,EAAA,SAAS,EAAA,SAAV;AAAY,EAAA,YAAY,EAAA,YAAxB;AAAyB,EAAA,sBAAsB,EAAA,sBAA/C;AAAgD,EAAA,uBAAuB,EAAA,uBAAvE;AAAwE,EAAA,sBAAsB,EAAA,sBAA9F;AAA+F,EAAA,iBAAiB,EAAA,iBAAhH;AAAiH,EAAA,qBAAqB,EAAA;AAAtI,CAzByF,CAAnB,EAyBoE;AAAC,EAAA,SAAS,EAAA,SAAV;AAAY,EAAA,YAAY,EAAA,YAAxB;AAAyB,EAAA,sBAAsB,EAAA,sBAA/C;AAAgD,EAAA,uBAAuB,EAAA,uBAAvE;AAAwE,EAAA,sBAAsB,EAAA,sBAA9F;AAA+F,EAAA,iBAAiB,EAAA,iBAAhH;AAAiH,EAAA,qBAAqB,EAAA;AAAtI,CAzBpE,CAAnB,EAyBiO;AAAC,EAAA,SAAS,EAAA,SAAV;AAAY,EAAA,YAAY,EAAA,YAAxB;AAAyB,EAAA,sBAAsB,EAAA,sBAA/C;AAAgD,EAAA,uBAAuB,EAAA,uBAAvE;AAAwE,EAAA,sBAAsB,EAAA,sBAA9F;AAA+F,EAAA,iBAAiB,EAAA,iBAAhH;AAAiH,EAAA,qBAAqB,EAAA;AAAtI,CAzBjO,CAA/C;AAyByZ;AAAC;AACja,OAAO,IAAM,kBAAkB,GAAG,kBAAkB,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,YAAA;AACnF,MAAA,EAAA,GAA4B,KAAK,CAAC,QAAN,CAAwB,KAAxB,CAA5B;AAAA,MAAC,SAAS,GAAA,EAAA,CAAA,CAAA,CAAV;AAAA,MAAY,YAAY,GAAA,EAAA,CAAA,CAAA,CAAxB;;AACA,MAAA,EAAA,GAA8B,KAAK,CAAC,QAAN,CAClC,SADkC,CAA9B;AAAA,MAAC,UAAU,GAAA,EAAA,CAAA,CAAA,CAAX;AAAA,MAAa,aAAa,GAAA,EAAA,CAAA,CAAA,CAA1B;;AAGA,MAAA,EAAA,GAAwC,KAAK,CAAC,QAAN,CAE5C,EAF4C,CAAxC;AAAA,MAAC,eAAe,GAAA,EAAA,CAAA,CAAA,CAAhB;AAAA,MAAkB,kBAAkB,GAAA,EAAA,CAAA,CAAA,CAApC;;AAIA,MAAA,EAAA,GAAoC,KAAK,CAAC,QAAN,EAApC;AAAA,MAAC,aAAa,GAAA,EAAA,CAAA,CAAA,CAAd;AAAA,MAAgB,gBAAgB,GAAA,EAAA,CAAA,CAAA,CAAhC;;AAEN,MAAM,cAAc,GAAG,SAAjB,cAAiB,GAAA;AACrB,IAAA,MAAM,CAAC,cAAD,CAAN,GADqB,CAErB;;AACA,QAAI,eAAe,CAAC,MAAhB,KAA2B,CAA/B,EAAkC;AAChC,MAAA,YAAY,CAAC,IAAD,CAAZ;AACA,MAAA,UAAU,CAAC,YAAA;AACT,QAAA,kBAAkB,CAAC,OAAD,CAAlB;AACA,QAAA,YAAY,CAAC,KAAD,CAAZ;AACA,QAAA,aAAa,CAAC,IAAD,CAAb;AACD,OAJS,EAIP,IAJO,CAAV;AAKD;AACF,GAXD;;AAaA,MAAM,eAAe,GAAG,SAAlB,eAAkB,GAAA;AACtB,IAAA,MAAM,CAAC,cAAD,CAAN;AACA,IAAA,aAAa,CAAC,SAAD,CAAb;AACD,GAHD;;AAKA,MAAM,YAAY,GAAG,SAAf,YAAe,CAAC,KAAD,EAAe;AAClC,IAAA,MAAM,CAAC,gBAAD,CAAN,CAAyB,KAAzB;AACA,IAAA,gBAAgB,CAAC,KAAD,CAAhB;AACA,IAAA,aAAa,CAAC,SAAD,CAAb;AACD,GAJD;;AAKA,SACE,KAAA,CAAA,aAAA,CAAC,YAAD,EAAa,IAAb,EACE,KAAA,CAAA,aAAA,CAAC,GAAD,EAAI;AAAC,IAAA,EAAE,EAAC,KAAJ;AAAU,IAAA,OAAO,EAAC;AAAlB,GAAJ,EACE,KAAA,CAAA,aAAA,CAAC,QAAD,EAAS;AACP,IAAA,OAAO,EAAE,IAAI,CAAC,SAAD,EAAY,aAAZ,CADN;AAEP,IAAA,UAAU,EAAE,eAFL;AAGP,IAAA,KAAK,EAAE,IAAI,CAAC,OAAD,EAAU,MAAV,CAHJ;AAIP,IAAA,QAAQ,EAAE,QAAO,CAAC,UAAD,EAAa,IAAb,CAJV;AAKP,IAAA,OAAO,EAAE,SALF;AAMP,IAAA,QAAQ,EAAE,YANH;AAOP,IAAA,KAAK,EAAE,QAAO,CAAC,OAAD,EAAU,KAAV,CAPP;AAQP,IAAA,YAAY,EAAE,IAAI,CAAC,cAAD,EAAiB,iBAAjB,CARX;AASP,IAAA,WAAW,EAAE,IAAI,CAAC,aAAD,EAAgB,QAAhB,CATV;AAUP,IAAA,KAAK,EAAE,aAVA;AAWP,IAAA,UAAU,EAAE,UAXL;AAYP,IAAA,KAAK,EAAE,IAAI,CAAC,OAAD,EAAU,OAAV,CAZJ;AAaP,IAAA,UAAU,EAAE,cAbL;AAcP,IAAA,WAAW,EAAE,eAdN;AAeP,IAAA,aAAa,EAAE,MAAM,CAAC,eAAD,CAfd;AAgBP,IAAA,QAAQ,EAAE,QAAO,CAAC,UAAD,EAAa,KAAb,CAhBV;AAiBP,IAAA,gBAAgB,EAAE;AAjBX,GAAT,CADF,CADF,CADF;AAyBD,CA3DyF,EA2DvF;AAAC,EAAA,SAAS,EAAA,SAAV;AAAY,EAAA,YAAY,EAAA,YAAxB;AAAyB,EAAA,sBAAsB,EAAA,sBAA/C;AAAgD,EAAA,uBAAuB,EAAA,uBAAvE;AAAwE,EAAA,sBAAsB,EAAA,sBAA9F;AAA+F,EAAA,iBAAiB,EAAA,iBAAhH;AAAiH,EAAA,qBAAqB,EAAA;AAAtI,CA3DuF,CAAnB,EA2DsE;AAAC,EAAA,SAAS,EAAA,SAAV;AAAY,EAAA,YAAY,EAAA,YAAxB;AAAyB,EAAA,sBAAsB,EAAA,sBAA/C;AAAgD,EAAA,uBAAuB,EAAA,uBAAvE;AAAwE,EAAA,sBAAsB,EAAA,sBAA9F;AAA+F,EAAA,iBAAiB,EAAA,iBAAhH;AAAiH,EAAA,qBAAqB,EAAA;AAAtI,CA3DtE,CAAnB,EA2DmO;AAAC,EAAA,SAAS,EAAA,SAAV;AAAY,EAAA,YAAY,EAAA,YAAxB;AAAyB,EAAA,sBAAsB,EAAA,sBAA/C;AAAgD,EAAA,uBAAuB,EAAA,uBAAvE;AAAwE,EAAA,sBAAsB,EAAA,sBAA9F;AAA+F,EAAA,iBAAiB,EAAA,iBAAhH;AAAiH,EAAA,qBAAqB,EAAA;AAAtI,CA3DnO,CAA7C;AA2DyZ;AAAC;AAEja,OAAO,IAAM,eAAe,GAAG,kBAAkB,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,YAAA;AACtF;AACO,MAAA,OAAO,GAAI,KAAK,CAAC,QAAN,CAAiC,EAAjC,EAAJ,CAAI,CAAX;AACP,MAAM,iBAAiB,GAAG,KAAK,CAAC,WAAN,CACxB,UAAC,UAAD,EAAqB,QAArB,EAAkE;AAChE,IAAA,OAAO,CAAC,GAAR,CAAY,UAAZ;;AACA,QAAI,UAAU,CAAC,MAAX,IAAqB,CAAzB,EAA4B;AAC1B,UAAM,UAAU,GAAG,CACjB;AACE,QAAA,KAAK,EAAE,UAAU,GAAG,aADtB;AAEE,QAAA,KAAK,EAAE,UAAU,GAAG,GAFtB;AAGE,QAAA,WAAW,EAAE,UAAU,GAAG;AAH5B,OADiB,EAMjB;AACE,QAAA,KAAK,EAAE,UAAU,GAAG,aADtB;AAEE,QAAA,KAAK,EAAE,UAAU,GAAG,GAFtB;AAGE,QAAA,WAAW,EAAE,UAAU,GAAG;AAH5B,OANiB,CAAnB,CAD0B,CAa1B;;AACA,MAAA,QAAQ,CAAC,UAAD,CAAR;AACD,KAfD,MAeO;AACL,MAAA,QAAQ,CAAC,OAAD,CAAR;AACD;AACF,GArBuB,EAsBxB,EAtBwB,CAA1B;AAyBA,SACE,KAAA,CAAA,aAAA,CAAC,YAAD,EAAa,IAAb,EACE,KAAA,CAAA,aAAA,CAAC,GAAD,EAAI;AAAC,IAAA,EAAE,EAAC,KAAJ;AAAU,IAAA,OAAO,EAAC;AAAlB,GAAJ,EACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,IAAA,KAAK,EAAE;AAAE,MAAA,KAAK,EAAE;AAAT;AAAZ,GAAA,EACE,KAAA,CAAA,aAAA,CAAC,eAAD,EAAgB;AACd,IAAA,WAAW,EAAE,iBADC;AAEd,IAAA,YAAY,EAAA,IAFE;AAGd,IAAA,KAAK,EAAE,IAAI,CAAC,OAAD,EAAU,aAAV,CAHG;AAId,IAAA,QAAQ,EAAE,QAAO,CAAC,UAAD,EAAa,KAAb,CAJH;AAKd,IAAA,KAAK,EAAE,QAAO,CAAC,OAAD,EAAU,KAAV,CALA;AAMd,IAAA,YAAY,EAAE,IAAI,CAAC,cAAD,EAAiB,yBAAjB,CANJ;AAOd,IAAA,QAAQ,EAAE,QAAO,CAAC,UAAD,EAAa,KAAb,CAPH;AAQd,IAAA,eAAe,EAAE,QAAO,CAAC,iBAAD,EAAoB,KAApB;AARV,GAAhB,CADF,CADF,CADF,CADF;AAkBD,CA9CsF,EA8CpF;AAAC,EAAA,SAAS,EAAA,SAAV;AAAY,EAAA,YAAY,EAAA,YAAxB;AAAyB,EAAA,sBAAsB,EAAA,sBAA/C;AAAgD,EAAA,uBAAuB,EAAA,uBAAvE;AAAwE,EAAA,sBAAsB,EAAA,sBAA9F;AAA+F,EAAA,iBAAiB,EAAA,iBAAhH;AAAiH,EAAA,qBAAqB,EAAA;AAAtI,CA9CoF,CAAnB,EA8CyE;AAAC,EAAA,SAAS,EAAA,SAAV;AAAY,EAAA,YAAY,EAAA,YAAxB;AAAyB,EAAA,sBAAsB,EAAA,sBAA/C;AAAgD,EAAA,uBAAuB,EAAA,uBAAvE;AAAwE,EAAA,sBAAsB,EAAA,sBAA9F;AAA+F,EAAA,iBAAiB,EAAA,iBAAhH;AAAiH,EAAA,qBAAqB,EAAA;AAAtI,CA9CzE,CAAnB,EA8CsO;AAAC,EAAA,SAAS,EAAA,SAAV;AAAY,EAAA,YAAY,EAAA,YAAxB;AAAyB,EAAA,sBAAsB,EAAA,sBAA/C;AAAgD,EAAA,uBAAuB,EAAA,uBAAvE;AAAwE,EAAA,sBAAsB,EAAA,sBAA9F;AAA+F,EAAA,iBAAiB,EAAA,iBAAhH;AAAiH,EAAA,qBAAqB,EAAA;AAAtI,CA9CtO,CAA1C;AA8CyZ;AAAC;AAEja,OAAO,IAAM,QAAQ,GAAG,kBAAkB,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,YAAA;AAC/E,SACE,KAAA,CAAA,aAAA,CAAC,YAAD,EAAa,IAAb,EACE,KAAA,CAAA,aAAA,CAAC,GAAD,EAAI;AAAC,IAAA,CAAC,EAAC,KAAH;AAAS,IAAA,OAAO,EAAC;AAAjB,GAAJ,EACE,KAAA,CAAA,aAAA,CAAC,QAAD,EAAS;AACP,IAAA,OAAO,EAAE,IAAI,CAAC,SAAD,EAAY,WAAZ,CADN;AAEP,IAAA,UAAU,EAAE,MAAM,CAAC,YAAD,EAAe,cAAf,CAFX;AAGP,IAAA,QAAQ,EAAE,MAAM,CAAC,gBAAD,CAHT;AAIP,IAAA,KAAK,EAAE,IAAI,CAAC,OAAD,EAAU,OAAV,CAJJ;AAKP,IAAA,QAAQ,EAAE,QAAO,CAAC,UAAD,EAAa,KAAb,CALV;AAMP,IAAA,gBAAgB,EAAE;AANX,GAAT,CADF,CADF,CADF;AAcD,CAf+E,EAe7E;AAAC,EAAA,SAAS,EAAA,SAAV;AAAY,EAAA,YAAY,EAAA,YAAxB;AAAyB,EAAA,sBAAsB,EAAA,sBAA/C;AAAgD,EAAA,uBAAuB,EAAA,uBAAvE;AAAwE,EAAA,sBAAsB,EAAA,sBAA9F;AAA+F,EAAA,iBAAiB,EAAA,iBAAhH;AAAiH,EAAA,qBAAqB,EAAA;AAAtI,CAf6E,CAAnB,EAegF;AAAC,EAAA,SAAS,EAAA,SAAV;AAAY,EAAA,YAAY,EAAA,YAAxB;AAAyB,EAAA,sBAAsB,EAAA,sBAA/C;AAAgD,EAAA,uBAAuB,EAAA,uBAAvE;AAAwE,EAAA,sBAAsB,EAAA,sBAA9F;AAA+F,EAAA,iBAAiB,EAAA,iBAAhH;AAAiH,EAAA,qBAAqB,EAAA;AAAtI,CAfhF,CAAnB,EAe6O;AAAC,EAAA,SAAS,EAAA,SAAV;AAAY,EAAA,YAAY,EAAA,YAAxB;AAAyB,EAAA,sBAAsB,EAAA,sBAA/C;AAAgD,EAAA,uBAAuB,EAAA,uBAAvE;AAAwE,EAAA,sBAAsB,EAAA,sBAA9F;AAA+F,EAAA,iBAAiB,EAAA,iBAAhH;AAAiH,EAAA,qBAAqB,EAAA;AAAtI,CAf7O,CAAnC;AAeyZ;AAAC;AACja,OAAO,IAAM,cAAc,GAAG,kBAAkB,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,YAAA;AACrF,SACE,KAAA,CAAA,aAAA,CAAC,YAAD,EAAa,IAAb,EACE,KAAA,CAAA,aAAA,CAAC,GAAD,EAAI;AAAC,IAAA,CAAC,EAAC,KAAH;AAAS,IAAA,OAAO,EAAC;AAAjB,GAAJ,EACE,KAAA,CAAA,aAAA,CAAC,QAAD,EAAS;AACP,IAAA,OAAO,EAAE,IAAI,CAAC,SAAD,EAAY,aAAZ,CADN;AAEP,IAAA,UAAU,EAAE,MAAM,CAAC,YAAD,EAAe,cAAf,CAFX;AAGP,IAAA,QAAQ,EAAE,MAAM,CAAC,gBAAD,CAHT;AAIP,IAAA,KAAK,EAAE,IAAI,CAAC,OAAD,EAAU,MAAV,CAJJ;AAKP,IAAA,QAAQ,EAAE,QAAO,CAAC,UAAD,EAAa,KAAb,CALV;AAMP,IAAA,gBAAgB,EAAE;AANX,GAAT,CADF,CADF,CADF;AAcD,CAfqF,EAenF;AAAC,EAAA,SAAS,EAAA,SAAV;AAAY,EAAA,YAAY,EAAA,YAAxB;AAAyB,EAAA,sBAAsB,EAAA,sBAA/C;AAAgD,EAAA,uBAAuB,EAAA,uBAAvE;AAAwE,EAAA,sBAAsB,EAAA,sBAA9F;AAA+F,EAAA,iBAAiB,EAAA,iBAAhH;AAAiH,EAAA,qBAAqB,EAAA;AAAtI,CAfmF,CAAnB,EAe0E;AAAC,EAAA,SAAS,EAAA,SAAV;AAAY,EAAA,YAAY,EAAA,YAAxB;AAAyB,EAAA,sBAAsB,EAAA,sBAA/C;AAAgD,EAAA,uBAAuB,EAAA,uBAAvE;AAAwE,EAAA,sBAAsB,EAAA,sBAA9F;AAA+F,EAAA,iBAAiB,EAAA,iBAAhH;AAAiH,EAAA,qBAAqB,EAAA;AAAtI,CAf1E,CAAnB,EAeuO;AAAC,EAAA,SAAS,EAAA,SAAV;AAAY,EAAA,YAAY,EAAA,YAAxB;AAAyB,EAAA,sBAAsB,EAAA,sBAA/C;AAAgD,EAAA,uBAAuB,EAAA,uBAAvE;AAAwE,EAAA,sBAAsB,EAAA,sBAA9F;AAA+F,EAAA,iBAAiB,EAAA,iBAAhH;AAAiH,EAAA,qBAAqB,EAAA;AAAtI,CAfvO,CAAzC;AAeyZ;AAAC;AACja,OAAO,IAAM,cAAc,GAAG,kBAAkB,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,YAAA;AACrF,SACE,KAAA,CAAA,aAAA,CAAC,YAAD,EAAa,IAAb,EACE,KAAA,CAAA,aAAA,CAAC,GAAD,EAAI;AAAC,IAAA,CAAC,EAAC,KAAH;AAAS,IAAA,OAAO,EAAC;AAAjB,GAAJ,EACE,KAAA,CAAA,aAAA,CAAC,QAAD,EAAS;AACP,IAAA,OAAO,EAAE,IAAI,CAAC,SAAD,EAAY,iBAAZ,CADN;AAEP,IAAA,UAAU,EAAE,MAAM,CAAC,YAAD,EAAe,cAAf,CAFX;AAGP,IAAA,QAAQ,EAAE,MAAM,CAAC,gBAAD,CAHT;AAIP,IAAA,KAAK,EAAE,IAAI,CAAC,OAAD,EAAU,MAAV,CAJJ;AAKP,IAAA,QAAQ,EAAE,QAAO,CAAC,UAAD,EAAa,KAAb,CALV;AAMP,IAAA,KAAK,EAAE,IAAI,CAAC,OAAD,EAAU,EAAV;AANJ,GAAT,CADF,CADF,CADF;AAcD,CAfqF,EAenF;AAAC,EAAA,SAAS,EAAA,SAAV;AAAY,EAAA,YAAY,EAAA,YAAxB;AAAyB,EAAA,sBAAsB,EAAA,sBAA/C;AAAgD,EAAA,uBAAuB,EAAA,uBAAvE;AAAwE,EAAA,sBAAsB,EAAA,sBAA9F;AAA+F,EAAA,iBAAiB,EAAA,iBAAhH;AAAiH,EAAA,qBAAqB,EAAA;AAAtI,CAfmF,CAAnB,EAe0E;AAAC,EAAA,SAAS,EAAA,SAAV;AAAY,EAAA,YAAY,EAAA,YAAxB;AAAyB,EAAA,sBAAsB,EAAA,sBAA/C;AAAgD,EAAA,uBAAuB,EAAA,uBAAvE;AAAwE,EAAA,sBAAsB,EAAA,sBAA9F;AAA+F,EAAA,iBAAiB,EAAA,iBAAhH;AAAiH,EAAA,qBAAqB,EAAA;AAAtI,CAf1E,CAAnB,EAeuO;AAAC,EAAA,SAAS,EAAA,SAAV;AAAY,EAAA,YAAY,EAAA,YAAxB;AAAyB,EAAA,sBAAsB,EAAA,sBAA/C;AAAgD,EAAA,uBAAuB,EAAA,uBAAvE;AAAwE,EAAA,sBAAsB,EAAA,sBAA9F;AAA+F,EAAA,iBAAiB,EAAA,iBAAhH;AAAiH,EAAA,qBAAqB,EAAA;AAAtI,CAfvO,CAAzC","sourcesContent":["\n/* eslint-disable */\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\n// @ts-ignore\nvar addSourceDecorator = require(\"@storybook/source-loader/preview\").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/molecules/DropDown\";\n// @ts-ignore\nvar __STORY__ = \"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/molecules/DropDown\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"\\\\n\\\\n// @ts-nocheck\\\\n// @ts-ignore\\\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\\\n// @ts-ignore\\\\nvar addSourceDecorator = require(\\\\\\\"@storybook/source-loader/preview\\\\\\\").addSource;\\\\n// @ts-ignore\\\\nvar __SOURCE_PREFIX__ = \\\\\\\"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/molecules/DropDown\\\\\\\";\\\\n// @ts-ignore\\\\nvar __STORY__ = \\\\\\\"import { action } from '@storybook/addon-actions'\\\\\\\\nimport { boolean, object, text } from '@storybook/addon-knobs'\\\\\\\\nimport React from 'react'\\\\\\\\nimport DropDown from '.'\\\\\\\\nimport { path } from '..'\\\\\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\\\\\nimport Box from '../../atoms/Box'\\\\\\\\nimport { tSelectVariant } from './interface'\\\\\\\\n// import { InputActionMeta } from 'react-select'\\\\\\\\n// import AsyncSelect from 'react-select/async'\\\\\\\\nimport { OptionsType } from 'react-select'\\\\\\\\nimport AsyncFormSelect from './AsyncFormSelect'\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/DropDown`,\\\\\\\\n  component: DropDown\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst options = [\\\\\\\\n  {\\\\\\\\n    value: 'emailVerificationPending',\\\\\\\\n    label: 'Email Verification Pending Shipper',\\\\\\\\n    title: 'Email Verification Pending Shipper'\\\\\\\\n  },\\\\\\\\n  { value: 'allShippers', label: 'All Shippers', title: 'All Shippers' },\\\\\\\\n  {\\\\\\\\n    value: 'approvalPendingShippers',\\\\\\\\n    label: 'Approval Pending Shippers',\\\\\\\\n    title: 'Approval Pending Shippers'\\\\\\\\n  }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst ListViewOption = [\\\\\\\\n  { value: 'Available', label: 'Available', title: 'Available' },\\\\\\\\n  { value: 'Dispatched', label: 'Dispatched', title: 'Dispatched' },\\\\\\\\n  { value: 'Inactive', label: 'Inactive', title: 'Inactive' }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst FormSelectOption = [\\\\\\\\n  {\\\\\\\\n    value: 'Credit',\\\\\\\\n    label: 'Credit',\\\\\\\\n    title: 'Credit',\\\\\\\\n    description:\\\\\\\\n      'Credit transaction will add to the outstanding amount of (Delivery Associate)'\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    value: 'Debit',\\\\\\\\n    label: 'Debit',\\\\\\\\n    title: 'Debit',\\\\\\\\n    description:\\\\\\\\n      'Credit transaction will deduct from the outstanding amount of (Delivery Associate)'\\\\\\\\n  }\\\\\\\\n]\\\\\\\\nexport const DefaultSelect = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='6em' bgColor='grey.50'>\\\\\\\\n        <DropDown\\\\\\\\n          variant={text('variant', 'default-select') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', options)}\\\\\\\\n          label={text('label', 'Name')}\\\\\\\\n          required={boolean('required', true)}\\\\\\\\n          loading={boolean('loading', true)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          error={boolean('error', false)}\\\\\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\\\\\n          placeholder={text('placeholder', 'Select')}\\\\\\\\n          value={text('value', 'chocolate')}\\\\\\\\n          width={text('width', '300px')}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const FormSelectPlayground = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='6em' bgColor='grey.50'>\\\\\\\\n        <DropDown\\\\\\\\n          variant={text('variant', 'form-select') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', FormSelectOption)}\\\\\\\\n          label={text('label', 'Name')}\\\\\\\\n          required={boolean('required', true)}\\\\\\\\n          loading={boolean('loading', false)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          error={boolean('error', false)}\\\\\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\\\\\n          placeholder={text('placeholder', 'Select')}\\\\\\\\n          value={text('value', 'emailVerificationPending')}\\\\\\\\n          width={text('width', '300px')}\\\\\\\\n          onMenuOpen={action('Menu Open')}\\\\\\\\n          onMenuClose={action('Menu Close')}\\\\\\\\n          showDescription={boolean('Show Description', true)}\\\\\\\\n          tooltipMessage={text('tooltipMessage', 'i am form select tooltip')}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\nexport const FormSelectDeferred = () => {\\\\\\\\n  const [isLoading, setIsLoading] = React.useState<boolean>(false)\\\\\\\\n  const [menuIsOpen, setMenuIsOpen] = React.useState<boolean | undefined>(\\\\\\\\n    undefined\\\\\\\\n  )\\\\\\\\n  const [dropdownOptions, setDropdownOptions] = React.useState<\\\\\\\\n    { label: string; value: string }[]\\\\\\\\n  >([])\\\\\\\\n\\\\\\\\n  const [selectedValue, setSelectedValue] = React.useState<string>()\\\\\\\\n\\\\\\\\n  const handleMenuOpen = () => {\\\\\\\\n    action('Menu Opened!')()\\\\\\\\n    // setMenuIsOpen(true)\\\\\\\\n    if (dropdownOptions.length === 0) {\\\\\\\\n      setIsLoading(true)\\\\\\\\n      setTimeout(() => {\\\\\\\\n        setDropdownOptions(options)\\\\\\\\n        setIsLoading(false)\\\\\\\\n        setMenuIsOpen(true)\\\\\\\\n      }, 2000)\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  const handleMenuClose = () => {\\\\\\\\n    action('Menu Closed!')()\\\\\\\\n    setMenuIsOpen(undefined)\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  const handleChange = (value?: string) => {\\\\\\\\n    action('Value selected')(value)\\\\\\\\n    setSelectedValue(value)\\\\\\\\n    setMenuIsOpen(undefined)\\\\\\\\n  }\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box py='3em' bgColor='grey.50'>\\\\\\\\n        <DropDown\\\\\\\\n          variant={text('variant', 'form-select') as tSelectVariant}\\\\\\\\n          optionList={dropdownOptions}\\\\\\\\n          label={text('label', 'Name')}\\\\\\\\n          required={boolean('required', true)}\\\\\\\\n          loading={isLoading}\\\\\\\\n          onChange={handleChange}\\\\\\\\n          error={boolean('error', false)}\\\\\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\\\\\n          placeholder={text('placeholder', 'Select')}\\\\\\\\n          value={selectedValue}\\\\\\\\n          isMenuOpen={menuIsOpen}\\\\\\\\n          width={text('width', '300px')}\\\\\\\\n          onMenuOpen={handleMenuOpen}\\\\\\\\n          onMenuClose={handleMenuClose}\\\\\\\\n          onInputChange={action('onInputChange')}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n          limitOptionsList={50}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const FormSelectAsync = () => {\\\\\\\\n  // const [menuIsOpen, setMenuIsOpen] = React.useState<boolean>()\\\\\\\\n  const [options] = React.useState<OptionsType<any>>([])\\\\\\\\n  const handleLoadOptions = React.useCallback(\\\\\\\\n    (inputValue: string, callback: (options: OptionsType<any>) => void) => {\\\\\\\\n      console.log(inputValue)\\\\\\\\n      if (inputValue.length >= 3) {\\\\\\\\n        const newOptions = [\\\\\\\\n          {\\\\\\\\n            label: inputValue + ' - Option 1',\\\\\\\\n            value: inputValue + '1',\\\\\\\\n            description: inputValue + ' - Option 1'\\\\\\\\n          },\\\\\\\\n          {\\\\\\\\n            label: inputValue + ' - Option 2',\\\\\\\\n            value: inputValue + '2',\\\\\\\\n            description: inputValue + ' - Option 2'\\\\\\\\n          }\\\\\\\\n        ]\\\\\\\\n        // setOptions(newOptions)\\\\\\\\n        callback(newOptions)\\\\\\\\n      } else {\\\\\\\\n        callback(options)\\\\\\\\n      }\\\\\\\\n    },\\\\\\\\n    []\\\\\\\\n  )\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box py='3em' bgColor='grey.50'>\\\\\\\\n        <div style={{ width: '350px' }}>\\\\\\\\n          <AsyncFormSelect\\\\\\\\n            loadOptions={handleLoadOptions}\\\\\\\\n            cacheOptions\\\\\\\\n            label={text('label', 'Postal Code')}\\\\\\\\n            required={boolean('required', false)}\\\\\\\\n            error={boolean('error', false)}\\\\\\\\n            errorMessage={text('errorMessage', 'Postal Code is required')}\\\\\\\\n            disabled={boolean('disabled', false)}\\\\\\\\n            showDescription={boolean('showDescription', false)}\\\\\\\\n          />\\\\\\\\n        </div>\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const ListView = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='6em' bgColor='grey.50'>\\\\\\\\n        <DropDown\\\\\\\\n          variant={text('variant', 'list-view') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', ListViewOption)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          width={text('width', '120px')}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n          limitOptionsList={50}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\nexport const EditedListView = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='6em' bgColor='grey.50'>\\\\\\\\n        <DropDown\\\\\\\\n          variant={text('variant', 'inline-edit') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', ListViewOption)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          width={text('width', '100%')}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n          limitOptionsList={50}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\nexport const DashedDropdown = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='6em' bgColor='grey.50'>\\\\\\\\n        <DropDown\\\\\\\\n          variant={text('variant', 'dashed-dropdown') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', ListViewOption)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          width={text('width', '100%')}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n          value={text('value', '') as tSelectVariant}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\";\\\\n// @ts-ignore\\\\nvar __ADDS_MAP__ = {};\\\\n// @ts-ignore\\\\nvar __MAIN_FILE_LOCATION__ = \\\\\\\"/DropDown.stories.tsx\\\\\\\";\\\\n// @ts-ignore\\\\nvar __MODULE_DEPENDENCIES__ = [];\\\\n// @ts-ignore\\\\nvar __LOCAL_DEPENDENCIES__ = {};\\\\n// @ts-ignore\\\\nvar __IDS_TO_FRAMEWORKS__ = {};\\\\n        \\\\nimport { action } from '@storybook/addon-actions'\\\\nimport { boolean, object, text } from '@storybook/addon-knobs'\\\\nimport React from 'react'\\\\nimport DropDown from '.'\\\\nimport { path } from '..'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport Box from '../../atoms/Box'\\\\nimport { tSelectVariant } from './interface'\\\\n// import { InputActionMeta } from 'react-select'\\\\n// import AsyncSelect from 'react-select/async'\\\\nimport { OptionsType } from 'react-select'\\\\nimport AsyncFormSelect from './AsyncFormSelect'\\\\n\\\\nexport default {parameters: {\\\\\\\"storySource\\\\\\\":{\\\\\\\"source\\\\\\\":\\\\\\\"import { action } from '@storybook/addon-actions'\\\\\\\\nimport { boolean, object, text } from '@storybook/addon-knobs'\\\\\\\\nimport React from 'react'\\\\\\\\nimport DropDown from '.'\\\\\\\\nimport { path } from '..'\\\\\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\\\\\nimport Box from '../../atoms/Box'\\\\\\\\nimport { tSelectVariant } from './interface'\\\\\\\\n// import { InputActionMeta } from 'react-select'\\\\\\\\n// import AsyncSelect from 'react-select/async'\\\\\\\\nimport { OptionsType } from 'react-select'\\\\\\\\nimport AsyncFormSelect from './AsyncFormSelect'\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/DropDown`,\\\\\\\\n  component: DropDown\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst options = [\\\\\\\\n  {\\\\\\\\n    value: 'emailVerificationPending',\\\\\\\\n    label: 'Email Verification Pending Shipper',\\\\\\\\n    title: 'Email Verification Pending Shipper'\\\\\\\\n  },\\\\\\\\n  { value: 'allShippers', label: 'All Shippers', title: 'All Shippers' },\\\\\\\\n  {\\\\\\\\n    value: 'approvalPendingShippers',\\\\\\\\n    label: 'Approval Pending Shippers',\\\\\\\\n    title: 'Approval Pending Shippers'\\\\\\\\n  }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst ListViewOption = [\\\\\\\\n  { value: 'Available', label: 'Available', title: 'Available' },\\\\\\\\n  { value: 'Dispatched', label: 'Dispatched', title: 'Dispatched' },\\\\\\\\n  { value: 'Inactive', label: 'Inactive', title: 'Inactive' }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst FormSelectOption = [\\\\\\\\n  {\\\\\\\\n    value: 'Credit',\\\\\\\\n    label: 'Credit',\\\\\\\\n    title: 'Credit',\\\\\\\\n    description:\\\\\\\\n      'Credit transaction will add to the outstanding amount of (Delivery Associate)'\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    value: 'Debit',\\\\\\\\n    label: 'Debit',\\\\\\\\n    title: 'Debit',\\\\\\\\n    description:\\\\\\\\n      'Credit transaction will deduct from the outstanding amount of (Delivery Associate)'\\\\\\\\n  }\\\\\\\\n]\\\\\\\\nexport const DefaultSelect = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='6em' bgColor='grey.50'>\\\\\\\\n        <DropDown\\\\\\\\n          variant={text('variant', 'default-select') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', options)}\\\\\\\\n          label={text('label', 'Name')}\\\\\\\\n          required={boolean('required', true)}\\\\\\\\n          loading={boolean('loading', true)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          error={boolean('error', false)}\\\\\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\\\\\n          placeholder={text('placeholder', 'Select')}\\\\\\\\n          value={text('value', 'chocolate')}\\\\\\\\n          width={text('width', '300px')}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const FormSelectPlayground = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='6em' bgColor='grey.50'>\\\\\\\\n        <DropDown\\\\\\\\n          variant={text('variant', 'form-select') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', FormSelectOption)}\\\\\\\\n          label={text('label', 'Name')}\\\\\\\\n          required={boolean('required', true)}\\\\\\\\n          loading={boolean('loading', false)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          error={boolean('error', false)}\\\\\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\\\\\n          placeholder={text('placeholder', 'Select')}\\\\\\\\n          value={text('value', 'emailVerificationPending')}\\\\\\\\n          width={text('width', '300px')}\\\\\\\\n          onMenuOpen={action('Menu Open')}\\\\\\\\n          onMenuClose={action('Menu Close')}\\\\\\\\n          showDescription={boolean('Show Description', true)}\\\\\\\\n          tooltipMessage={text('tooltipMessage', 'i am form select tooltip')}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\nexport const FormSelectDeferred = () => {\\\\\\\\n  const [isLoading, setIsLoading] = React.useState<boolean>(false)\\\\\\\\n  const [menuIsOpen, setMenuIsOpen] = React.useState<boolean | undefined>(\\\\\\\\n    undefined\\\\\\\\n  )\\\\\\\\n  const [dropdownOptions, setDropdownOptions] = React.useState<\\\\\\\\n    { label: string; value: string }[]\\\\\\\\n  >([])\\\\\\\\n\\\\\\\\n  const [selectedValue, setSelectedValue] = React.useState<string>()\\\\\\\\n\\\\\\\\n  const handleMenuOpen = () => {\\\\\\\\n    action('Menu Opened!')()\\\\\\\\n    // setMenuIsOpen(true)\\\\\\\\n    if (dropdownOptions.length === 0) {\\\\\\\\n      setIsLoading(true)\\\\\\\\n      setTimeout(() => {\\\\\\\\n        setDropdownOptions(options)\\\\\\\\n        setIsLoading(false)\\\\\\\\n        setMenuIsOpen(true)\\\\\\\\n      }, 2000)\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  const handleMenuClose = () => {\\\\\\\\n    action('Menu Closed!')()\\\\\\\\n    setMenuIsOpen(undefined)\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  const handleChange = (value?: string) => {\\\\\\\\n    action('Value selected')(value)\\\\\\\\n    setSelectedValue(value)\\\\\\\\n    setMenuIsOpen(undefined)\\\\\\\\n  }\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box py='3em' bgColor='grey.50'>\\\\\\\\n        <DropDown\\\\\\\\n          variant={text('variant', 'form-select') as tSelectVariant}\\\\\\\\n          optionList={dropdownOptions}\\\\\\\\n          label={text('label', 'Name')}\\\\\\\\n          required={boolean('required', true)}\\\\\\\\n          loading={isLoading}\\\\\\\\n          onChange={handleChange}\\\\\\\\n          error={boolean('error', false)}\\\\\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\\\\\n          placeholder={text('placeholder', 'Select')}\\\\\\\\n          value={selectedValue}\\\\\\\\n          isMenuOpen={menuIsOpen}\\\\\\\\n          width={text('width', '300px')}\\\\\\\\n          onMenuOpen={handleMenuOpen}\\\\\\\\n          onMenuClose={handleMenuClose}\\\\\\\\n          onInputChange={action('onInputChange')}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n          limitOptionsList={50}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const FormSelectAsync = () => {\\\\\\\\n  // const [menuIsOpen, setMenuIsOpen] = React.useState<boolean>()\\\\\\\\n  const [options] = React.useState<OptionsType<any>>([])\\\\\\\\n  const handleLoadOptions = React.useCallback(\\\\\\\\n    (inputValue: string, callback: (options: OptionsType<any>) => void) => {\\\\\\\\n      console.log(inputValue)\\\\\\\\n      if (inputValue.length >= 3) {\\\\\\\\n        const newOptions = [\\\\\\\\n          {\\\\\\\\n            label: inputValue + ' - Option 1',\\\\\\\\n            value: inputValue + '1',\\\\\\\\n            description: inputValue + ' - Option 1'\\\\\\\\n          },\\\\\\\\n          {\\\\\\\\n            label: inputValue + ' - Option 2',\\\\\\\\n            value: inputValue + '2',\\\\\\\\n            description: inputValue + ' - Option 2'\\\\\\\\n          }\\\\\\\\n        ]\\\\\\\\n        // setOptions(newOptions)\\\\\\\\n        callback(newOptions)\\\\\\\\n      } else {\\\\\\\\n        callback(options)\\\\\\\\n      }\\\\\\\\n    },\\\\\\\\n    []\\\\\\\\n  )\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box py='3em' bgColor='grey.50'>\\\\\\\\n        <div style={{ width: '350px' }}>\\\\\\\\n          <AsyncFormSelect\\\\\\\\n            loadOptions={handleLoadOptions}\\\\\\\\n            cacheOptions\\\\\\\\n            label={text('label', 'Postal Code')}\\\\\\\\n            required={boolean('required', false)}\\\\\\\\n            error={boolean('error', false)}\\\\\\\\n            errorMessage={text('errorMessage', 'Postal Code is required')}\\\\\\\\n            disabled={boolean('disabled', false)}\\\\\\\\n            showDescription={boolean('showDescription', false)}\\\\\\\\n          />\\\\\\\\n        </div>\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const ListView = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='6em' bgColor='grey.50'>\\\\\\\\n        <DropDown\\\\\\\\n          variant={text('variant', 'list-view') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', ListViewOption)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          width={text('width', '120px')}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n          limitOptionsList={50}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\nexport const EditedListView = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='6em' bgColor='grey.50'>\\\\\\\\n        <DropDown\\\\\\\\n          variant={text('variant', 'inline-edit') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', ListViewOption)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          width={text('width', '100%')}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n          limitOptionsList={50}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\nexport const DashedDropdown = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='6em' bgColor='grey.50'>\\\\\\\\n        <DropDown\\\\\\\\n          variant={text('variant', 'dashed-dropdown') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', ListViewOption)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          width={text('width', '100%')}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n          value={text('value', '') as tSelectVariant}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\",\\\\\\\"locationsMap\\\\\\\":{}},},\\\\n  title: `${path}/DropDown`,\\\\n  component: DropDown\\\\n}\\\\n\\\\nconst options = [\\\\n  {\\\\n    value: 'emailVerificationPending',\\\\n    label: 'Email Verification Pending Shipper',\\\\n    title: 'Email Verification Pending Shipper'\\\\n  },\\\\n  { value: 'allShippers', label: 'All Shippers', title: 'All Shippers' },\\\\n  {\\\\n    value: 'approvalPendingShippers',\\\\n    label: 'Approval Pending Shippers',\\\\n    title: 'Approval Pending Shippers'\\\\n  }\\\\n]\\\\n\\\\nconst ListViewOption = [\\\\n  { value: 'Available', label: 'Available', title: 'Available' },\\\\n  { value: 'Dispatched', label: 'Dispatched', title: 'Dispatched' },\\\\n  { value: 'Inactive', label: 'Inactive', title: 'Inactive' }\\\\n]\\\\n\\\\nconst FormSelectOption = [\\\\n  {\\\\n    value: 'Credit',\\\\n    label: 'Credit',\\\\n    title: 'Credit',\\\\n    description:\\\\n      'Credit transaction will add to the outstanding amount of (Delivery Associate)'\\\\n  },\\\\n  {\\\\n    value: 'Debit',\\\\n    label: 'Debit',\\\\n    title: 'Debit',\\\\n    description:\\\\n      'Credit transaction will deduct from the outstanding amount of (Delivery Associate)'\\\\n  }\\\\n]\\\\nexport const DefaultSelect = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'default-select') as tSelectVariant}\\\\n          optionList={object('optionList', options)}\\\\n          label={text('label', 'Name')}\\\\n          required={boolean('required', true)}\\\\n          loading={boolean('loading', true)}\\\\n          onChange={action('Value selected')}\\\\n          error={boolean('error', false)}\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\n          placeholder={text('placeholder', 'Select')}\\\\n          value={text('value', 'chocolate')}\\\\n          width={text('width', '300px')}\\\\n          disabled={boolean('disabled', false)}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const FormSelectPlayground = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'form-select') as tSelectVariant}\\\\n          optionList={object('optionList', FormSelectOption)}\\\\n          label={text('label', 'Name')}\\\\n          required={boolean('required', true)}\\\\n          loading={boolean('loading', false)}\\\\n          onChange={action('Value selected')}\\\\n          error={boolean('error', false)}\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\n          placeholder={text('placeholder', 'Select')}\\\\n          value={text('value', 'emailVerificationPending')}\\\\n          width={text('width', '300px')}\\\\n          onMenuOpen={action('Menu Open')}\\\\n          onMenuClose={action('Menu Close')}\\\\n          showDescription={boolean('Show Description', true)}\\\\n          tooltipMessage={text('tooltipMessage', 'i am form select tooltip')}\\\\n          disabled={boolean('disabled', false)}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\nexport const FormSelectDeferred = addSourceDecorator(() => {\\\\n  const [isLoading, setIsLoading] = React.useState<boolean>(false)\\\\n  const [menuIsOpen, setMenuIsOpen] = React.useState<boolean | undefined>(\\\\n    undefined\\\\n  )\\\\n  const [dropdownOptions, setDropdownOptions] = React.useState<\\\\n    { label: string; value: string }[]\\\\n  >([])\\\\n\\\\n  const [selectedValue, setSelectedValue] = React.useState<string>()\\\\n\\\\n  const handleMenuOpen = () => {\\\\n    action('Menu Opened!')()\\\\n    // setMenuIsOpen(true)\\\\n    if (dropdownOptions.length === 0) {\\\\n      setIsLoading(true)\\\\n      setTimeout(() => {\\\\n        setDropdownOptions(options)\\\\n        setIsLoading(false)\\\\n        setMenuIsOpen(true)\\\\n      }, 2000)\\\\n    }\\\\n  }\\\\n\\\\n  const handleMenuClose = () => {\\\\n    action('Menu Closed!')()\\\\n    setMenuIsOpen(undefined)\\\\n  }\\\\n\\\\n  const handleChange = (value?: string) => {\\\\n    action('Value selected')(value)\\\\n    setSelectedValue(value)\\\\n    setMenuIsOpen(undefined)\\\\n  }\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box py='3em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'form-select') as tSelectVariant}\\\\n          optionList={dropdownOptions}\\\\n          label={text('label', 'Name')}\\\\n          required={boolean('required', true)}\\\\n          loading={isLoading}\\\\n          onChange={handleChange}\\\\n          error={boolean('error', false)}\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\n          placeholder={text('placeholder', 'Select')}\\\\n          value={selectedValue}\\\\n          isMenuOpen={menuIsOpen}\\\\n          width={text('width', '300px')}\\\\n          onMenuOpen={handleMenuOpen}\\\\n          onMenuClose={handleMenuClose}\\\\n          onInputChange={action('onInputChange')}\\\\n          disabled={boolean('disabled', false)}\\\\n          limitOptionsList={50}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const FormSelectAsync = addSourceDecorator(() => {\\\\n  // const [menuIsOpen, setMenuIsOpen] = React.useState<boolean>()\\\\n  const [options] = React.useState<OptionsType<any>>([])\\\\n  const handleLoadOptions = React.useCallback(\\\\n    (inputValue: string, callback: (options: OptionsType<any>) => void) => {\\\\n      console.log(inputValue)\\\\n      if (inputValue.length >= 3) {\\\\n        const newOptions = [\\\\n          {\\\\n            label: inputValue + ' - Option 1',\\\\n            value: inputValue + '1',\\\\n            description: inputValue + ' - Option 1'\\\\n          },\\\\n          {\\\\n            label: inputValue + ' - Option 2',\\\\n            value: inputValue + '2',\\\\n            description: inputValue + ' - Option 2'\\\\n          }\\\\n        ]\\\\n        // setOptions(newOptions)\\\\n        callback(newOptions)\\\\n      } else {\\\\n        callback(options)\\\\n      }\\\\n    },\\\\n    []\\\\n  )\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box py='3em' bgColor='grey.50'>\\\\n        <div style={{ width: '350px' }}>\\\\n          <AsyncFormSelect\\\\n            loadOptions={handleLoadOptions}\\\\n            cacheOptions\\\\n            label={text('label', 'Postal Code')}\\\\n            required={boolean('required', false)}\\\\n            error={boolean('error', false)}\\\\n            errorMessage={text('errorMessage', 'Postal Code is required')}\\\\n            disabled={boolean('disabled', false)}\\\\n            showDescription={boolean('showDescription', false)}\\\\n          />\\\\n        </div>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const ListView = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'list-view') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          onChange={action('Value selected')}\\\\n          width={text('width', '120px')}\\\\n          disabled={boolean('disabled', false)}\\\\n          limitOptionsList={50}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\nexport const EditedListView = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'inline-edit') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          onChange={action('Value selected')}\\\\n          width={text('width', '100%')}\\\\n          disabled={boolean('disabled', false)}\\\\n          limitOptionsList={50}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\nexport const DashedDropdown = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'dashed-dropdown') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          onChange={action('Value selected')}\\\\n          width={text('width', '100%')}\\\\n          disabled={boolean('disabled', false)}\\\\n          value={text('value', '') as tSelectVariant}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/DropDown.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\n\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/molecules/DropDown\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"import { action } from '@storybook/addon-actions'\\\\nimport { boolean, object, text } from '@storybook/addon-knobs'\\\\nimport React from 'react'\\\\nimport DropDown from '.'\\\\nimport { path } from '..'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport Box from '../../atoms/Box'\\\\nimport { tSelectVariant } from './interface'\\\\n// import { InputActionMeta } from 'react-select'\\\\n// import AsyncSelect from 'react-select/async'\\\\nimport { OptionsType } from 'react-select'\\\\nimport AsyncFormSelect from './AsyncFormSelect'\\\\n\\\\nexport default {\\\\n  title: `${path}/DropDown`,\\\\n  component: DropDown\\\\n}\\\\n\\\\nconst options = [\\\\n  {\\\\n    value: 'emailVerificationPending',\\\\n    label: 'Email Verification Pending Shipper',\\\\n    title: 'Email Verification Pending Shipper'\\\\n  },\\\\n  { value: 'allShippers', label: 'All Shippers', title: 'All Shippers' },\\\\n  {\\\\n    value: 'approvalPendingShippers',\\\\n    label: 'Approval Pending Shippers',\\\\n    title: 'Approval Pending Shippers'\\\\n  }\\\\n]\\\\n\\\\nconst ListViewOption = [\\\\n  { value: 'Available', label: 'Available', title: 'Available' },\\\\n  { value: 'Dispatched', label: 'Dispatched', title: 'Dispatched' },\\\\n  { value: 'Inactive', label: 'Inactive', title: 'Inactive' }\\\\n]\\\\n\\\\nconst FormSelectOption = [\\\\n  {\\\\n    value: 'Credit',\\\\n    label: 'Credit',\\\\n    title: 'Credit',\\\\n    description:\\\\n      'Credit transaction will add to the outstanding amount of (Delivery Associate)'\\\\n  },\\\\n  {\\\\n    value: 'Debit',\\\\n    label: 'Debit',\\\\n    title: 'Debit',\\\\n    description:\\\\n      'Credit transaction will deduct from the outstanding amount of (Delivery Associate)'\\\\n  }\\\\n]\\\\nexport const DefaultSelect = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'default-select') as tSelectVariant}\\\\n          optionList={object('optionList', options)}\\\\n          label={text('label', 'Name')}\\\\n          required={boolean('required', true)}\\\\n          loading={boolean('loading', true)}\\\\n          onChange={action('Value selected')}\\\\n          error={boolean('error', false)}\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\n          placeholder={text('placeholder', 'Select')}\\\\n          value={text('value', 'chocolate')}\\\\n          width={text('width', '300px')}\\\\n          disabled={boolean('disabled', false)}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const FormSelectPlayground = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'form-select') as tSelectVariant}\\\\n          optionList={object('optionList', FormSelectOption)}\\\\n          label={text('label', 'Name')}\\\\n          required={boolean('required', true)}\\\\n          loading={boolean('loading', false)}\\\\n          onChange={action('Value selected')}\\\\n          error={boolean('error', false)}\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\n          placeholder={text('placeholder', 'Select')}\\\\n          value={text('value', 'emailVerificationPending')}\\\\n          width={text('width', '300px')}\\\\n          onMenuOpen={action('Menu Open')}\\\\n          onMenuClose={action('Menu Close')}\\\\n          showDescription={boolean('Show Description', true)}\\\\n          tooltipMessage={text('tooltipMessage', 'i am form select tooltip')}\\\\n          disabled={boolean('disabled', false)}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\nexport const FormSelectDeferred = () => {\\\\n  const [isLoading, setIsLoading] = React.useState<boolean>(false)\\\\n  const [menuIsOpen, setMenuIsOpen] = React.useState<boolean | undefined>(\\\\n    undefined\\\\n  )\\\\n  const [dropdownOptions, setDropdownOptions] = React.useState<\\\\n    { label: string; value: string }[]\\\\n  >([])\\\\n\\\\n  const [selectedValue, setSelectedValue] = React.useState<string>()\\\\n\\\\n  const handleMenuOpen = () => {\\\\n    action('Menu Opened!')()\\\\n    // setMenuIsOpen(true)\\\\n    if (dropdownOptions.length === 0) {\\\\n      setIsLoading(true)\\\\n      setTimeout(() => {\\\\n        setDropdownOptions(options)\\\\n        setIsLoading(false)\\\\n        setMenuIsOpen(true)\\\\n      }, 2000)\\\\n    }\\\\n  }\\\\n\\\\n  const handleMenuClose = () => {\\\\n    action('Menu Closed!')()\\\\n    setMenuIsOpen(undefined)\\\\n  }\\\\n\\\\n  const handleChange = (value?: string) => {\\\\n    action('Value selected')(value)\\\\n    setSelectedValue(value)\\\\n    setMenuIsOpen(undefined)\\\\n  }\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box py='3em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'form-select') as tSelectVariant}\\\\n          optionList={dropdownOptions}\\\\n          label={text('label', 'Name')}\\\\n          required={boolean('required', true)}\\\\n          loading={isLoading}\\\\n          onChange={handleChange}\\\\n          error={boolean('error', false)}\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\n          placeholder={text('placeholder', 'Select')}\\\\n          value={selectedValue}\\\\n          isMenuOpen={menuIsOpen}\\\\n          width={text('width', '300px')}\\\\n          onMenuOpen={handleMenuOpen}\\\\n          onMenuClose={handleMenuClose}\\\\n          onInputChange={action('onInputChange')}\\\\n          disabled={boolean('disabled', false)}\\\\n          limitOptionsList={50}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const FormSelectAsync = () => {\\\\n  // const [menuIsOpen, setMenuIsOpen] = React.useState<boolean>()\\\\n  const [options] = React.useState<OptionsType<any>>([])\\\\n  const handleLoadOptions = React.useCallback(\\\\n    (inputValue: string, callback: (options: OptionsType<any>) => void) => {\\\\n      console.log(inputValue)\\\\n      if (inputValue.length >= 3) {\\\\n        const newOptions = [\\\\n          {\\\\n            label: inputValue + ' - Option 1',\\\\n            value: inputValue + '1',\\\\n            description: inputValue + ' - Option 1'\\\\n          },\\\\n          {\\\\n            label: inputValue + ' - Option 2',\\\\n            value: inputValue + '2',\\\\n            description: inputValue + ' - Option 2'\\\\n          }\\\\n        ]\\\\n        // setOptions(newOptions)\\\\n        callback(newOptions)\\\\n      } else {\\\\n        callback(options)\\\\n      }\\\\n    },\\\\n    []\\\\n  )\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box py='3em' bgColor='grey.50'>\\\\n        <div style={{ width: '350px' }}>\\\\n          <AsyncFormSelect\\\\n            loadOptions={handleLoadOptions}\\\\n            cacheOptions\\\\n            label={text('label', 'Postal Code')}\\\\n            required={boolean('required', false)}\\\\n            error={boolean('error', false)}\\\\n            errorMessage={text('errorMessage', 'Postal Code is required')}\\\\n            disabled={boolean('disabled', false)}\\\\n            showDescription={boolean('showDescription', false)}\\\\n          />\\\\n        </div>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const ListView = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'list-view') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          onChange={action('Value selected')}\\\\n          width={text('width', '120px')}\\\\n          disabled={boolean('disabled', false)}\\\\n          limitOptionsList={50}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\nexport const EditedListView = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'inline-edit') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          onChange={action('Value selected')}\\\\n          width={text('width', '100%')}\\\\n          disabled={boolean('disabled', false)}\\\\n          limitOptionsList={50}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\nexport const DashedDropdown = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'dashed-dropdown') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          onChange={action('Value selected')}\\\\n          width={text('width', '100%')}\\\\n          disabled={boolean('disabled', false)}\\\\n          value={text('value', '') as tSelectVariant}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/DropDown.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\nimport { action } from '@storybook/addon-actions'\\nimport { boolean, object, text } from '@storybook/addon-knobs'\\nimport React from 'react'\\nimport DropDown from '.'\\nimport { path } from '..'\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\nimport Box from '../../atoms/Box'\\nimport { tSelectVariant } from './interface'\\n// import { InputActionMeta } from 'react-select'\\n// import AsyncSelect from 'react-select/async'\\nimport { OptionsType } from 'react-select'\\nimport AsyncFormSelect from './AsyncFormSelect'\\n\\nexport default {parameters: {\\\"storySource\\\":{\\\"source\\\":\\\"\\\\n\\\\n// @ts-nocheck\\\\n// @ts-ignore\\\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\\\n// @ts-ignore\\\\nvar addSourceDecorator = require(\\\\\\\"@storybook/source-loader/preview\\\\\\\").addSource;\\\\n// @ts-ignore\\\\nvar __SOURCE_PREFIX__ = \\\\\\\"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/molecules/DropDown\\\\\\\";\\\\n// @ts-ignore\\\\nvar __STORY__ = \\\\\\\"import { action } from '@storybook/addon-actions'\\\\\\\\nimport { boolean, object, text } from '@storybook/addon-knobs'\\\\\\\\nimport React from 'react'\\\\\\\\nimport DropDown from '.'\\\\\\\\nimport { path } from '..'\\\\\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\\\\\nimport Box from '../../atoms/Box'\\\\\\\\nimport { tSelectVariant } from './interface'\\\\\\\\n// import { InputActionMeta } from 'react-select'\\\\\\\\n// import AsyncSelect from 'react-select/async'\\\\\\\\nimport { OptionsType } from 'react-select'\\\\\\\\nimport AsyncFormSelect from './AsyncFormSelect'\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/DropDown`,\\\\\\\\n  component: DropDown\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst options = [\\\\\\\\n  {\\\\\\\\n    value: 'emailVerificationPending',\\\\\\\\n    label: 'Email Verification Pending Shipper',\\\\\\\\n    title: 'Email Verification Pending Shipper'\\\\\\\\n  },\\\\\\\\n  { value: 'allShippers', label: 'All Shippers', title: 'All Shippers' },\\\\\\\\n  {\\\\\\\\n    value: 'approvalPendingShippers',\\\\\\\\n    label: 'Approval Pending Shippers',\\\\\\\\n    title: 'Approval Pending Shippers'\\\\\\\\n  }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst ListViewOption = [\\\\\\\\n  { value: 'Available', label: 'Available', title: 'Available' },\\\\\\\\n  { value: 'Dispatched', label: 'Dispatched', title: 'Dispatched' },\\\\\\\\n  { value: 'Inactive', label: 'Inactive', title: 'Inactive' }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst FormSelectOption = [\\\\\\\\n  {\\\\\\\\n    value: 'Credit',\\\\\\\\n    label: 'Credit',\\\\\\\\n    title: 'Credit',\\\\\\\\n    description:\\\\\\\\n      'Credit transaction will add to the outstanding amount of (Delivery Associate)'\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    value: 'Debit',\\\\\\\\n    label: 'Debit',\\\\\\\\n    title: 'Debit',\\\\\\\\n    description:\\\\\\\\n      'Credit transaction will deduct from the outstanding amount of (Delivery Associate)'\\\\\\\\n  }\\\\\\\\n]\\\\\\\\nexport const DefaultSelect = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='6em' bgColor='grey.50'>\\\\\\\\n        <DropDown\\\\\\\\n          variant={text('variant', 'default-select') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', options)}\\\\\\\\n          label={text('label', 'Name')}\\\\\\\\n          required={boolean('required', true)}\\\\\\\\n          loading={boolean('loading', true)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          error={boolean('error', false)}\\\\\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\\\\\n          placeholder={text('placeholder', 'Select')}\\\\\\\\n          value={text('value', 'chocolate')}\\\\\\\\n          width={text('width', '300px')}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const FormSelectPlayground = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='6em' bgColor='grey.50'>\\\\\\\\n        <DropDown\\\\\\\\n          variant={text('variant', 'form-select') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', FormSelectOption)}\\\\\\\\n          label={text('label', 'Name')}\\\\\\\\n          required={boolean('required', true)}\\\\\\\\n          loading={boolean('loading', false)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          error={boolean('error', false)}\\\\\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\\\\\n          placeholder={text('placeholder', 'Select')}\\\\\\\\n          value={text('value', 'emailVerificationPending')}\\\\\\\\n          width={text('width', '300px')}\\\\\\\\n          onMenuOpen={action('Menu Open')}\\\\\\\\n          onMenuClose={action('Menu Close')}\\\\\\\\n          showDescription={boolean('Show Description', true)}\\\\\\\\n          tooltipMessage={text('tooltipMessage', 'i am form select tooltip')}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\nexport const FormSelectDeferred = () => {\\\\\\\\n  const [isLoading, setIsLoading] = React.useState<boolean>(false)\\\\\\\\n  const [menuIsOpen, setMenuIsOpen] = React.useState<boolean | undefined>(\\\\\\\\n    undefined\\\\\\\\n  )\\\\\\\\n  const [dropdownOptions, setDropdownOptions] = React.useState<\\\\\\\\n    { label: string; value: string }[]\\\\\\\\n  >([])\\\\\\\\n\\\\\\\\n  const [selectedValue, setSelectedValue] = React.useState<string>()\\\\\\\\n\\\\\\\\n  const handleMenuOpen = () => {\\\\\\\\n    action('Menu Opened!')()\\\\\\\\n    // setMenuIsOpen(true)\\\\\\\\n    if (dropdownOptions.length === 0) {\\\\\\\\n      setIsLoading(true)\\\\\\\\n      setTimeout(() => {\\\\\\\\n        setDropdownOptions(options)\\\\\\\\n        setIsLoading(false)\\\\\\\\n        setMenuIsOpen(true)\\\\\\\\n      }, 2000)\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  const handleMenuClose = () => {\\\\\\\\n    action('Menu Closed!')()\\\\\\\\n    setMenuIsOpen(undefined)\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  const handleChange = (value?: string) => {\\\\\\\\n    action('Value selected')(value)\\\\\\\\n    setSelectedValue(value)\\\\\\\\n    setMenuIsOpen(undefined)\\\\\\\\n  }\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box py='3em' bgColor='grey.50'>\\\\\\\\n        <DropDown\\\\\\\\n          variant={text('variant', 'form-select') as tSelectVariant}\\\\\\\\n          optionList={dropdownOptions}\\\\\\\\n          label={text('label', 'Name')}\\\\\\\\n          required={boolean('required', true)}\\\\\\\\n          loading={isLoading}\\\\\\\\n          onChange={handleChange}\\\\\\\\n          error={boolean('error', false)}\\\\\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\\\\\n          placeholder={text('placeholder', 'Select')}\\\\\\\\n          value={selectedValue}\\\\\\\\n          isMenuOpen={menuIsOpen}\\\\\\\\n          width={text('width', '300px')}\\\\\\\\n          onMenuOpen={handleMenuOpen}\\\\\\\\n          onMenuClose={handleMenuClose}\\\\\\\\n          onInputChange={action('onInputChange')}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n          limitOptionsList={50}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const FormSelectAsync = () => {\\\\\\\\n  // const [menuIsOpen, setMenuIsOpen] = React.useState<boolean>()\\\\\\\\n  const [options] = React.useState<OptionsType<any>>([])\\\\\\\\n  const handleLoadOptions = React.useCallback(\\\\\\\\n    (inputValue: string, callback: (options: OptionsType<any>) => void) => {\\\\\\\\n      console.log(inputValue)\\\\\\\\n      if (inputValue.length >= 3) {\\\\\\\\n        const newOptions = [\\\\\\\\n          {\\\\\\\\n            label: inputValue + ' - Option 1',\\\\\\\\n            value: inputValue + '1',\\\\\\\\n            description: inputValue + ' - Option 1'\\\\\\\\n          },\\\\\\\\n          {\\\\\\\\n            label: inputValue + ' - Option 2',\\\\\\\\n            value: inputValue + '2',\\\\\\\\n            description: inputValue + ' - Option 2'\\\\\\\\n          }\\\\\\\\n        ]\\\\\\\\n        // setOptions(newOptions)\\\\\\\\n        callback(newOptions)\\\\\\\\n      } else {\\\\\\\\n        callback(options)\\\\\\\\n      }\\\\\\\\n    },\\\\\\\\n    []\\\\\\\\n  )\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box py='3em' bgColor='grey.50'>\\\\\\\\n        <div style={{ width: '350px' }}>\\\\\\\\n          <AsyncFormSelect\\\\\\\\n            loadOptions={handleLoadOptions}\\\\\\\\n            cacheOptions\\\\\\\\n            label={text('label', 'Postal Code')}\\\\\\\\n            required={boolean('required', false)}\\\\\\\\n            error={boolean('error', false)}\\\\\\\\n            errorMessage={text('errorMessage', 'Postal Code is required')}\\\\\\\\n            disabled={boolean('disabled', false)}\\\\\\\\n            showDescription={boolean('showDescription', false)}\\\\\\\\n          />\\\\\\\\n        </div>\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const ListView = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='6em' bgColor='grey.50'>\\\\\\\\n        <DropDown\\\\\\\\n          variant={text('variant', 'list-view') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', ListViewOption)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          width={text('width', '120px')}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n          limitOptionsList={50}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\nexport const EditedListView = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='6em' bgColor='grey.50'>\\\\\\\\n        <DropDown\\\\\\\\n          variant={text('variant', 'inline-edit') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', ListViewOption)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          width={text('width', '100%')}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n          limitOptionsList={50}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\nexport const DashedDropdown = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='6em' bgColor='grey.50'>\\\\\\\\n        <DropDown\\\\\\\\n          variant={text('variant', 'dashed-dropdown') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', ListViewOption)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          width={text('width', '100%')}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n          value={text('value', '') as tSelectVariant}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\";\\\\n// @ts-ignore\\\\nvar __ADDS_MAP__ = {};\\\\n// @ts-ignore\\\\nvar __MAIN_FILE_LOCATION__ = \\\\\\\"/DropDown.stories.tsx\\\\\\\";\\\\n// @ts-ignore\\\\nvar __MODULE_DEPENDENCIES__ = [];\\\\n// @ts-ignore\\\\nvar __LOCAL_DEPENDENCIES__ = {};\\\\n// @ts-ignore\\\\nvar __IDS_TO_FRAMEWORKS__ = {};\\\\n        \\\\nimport { action } from '@storybook/addon-actions'\\\\nimport { boolean, object, text } from '@storybook/addon-knobs'\\\\nimport React from 'react'\\\\nimport DropDown from '.'\\\\nimport { path } from '..'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport Box from '../../atoms/Box'\\\\nimport { tSelectVariant } from './interface'\\\\n// import { InputActionMeta } from 'react-select'\\\\n// import AsyncSelect from 'react-select/async'\\\\nimport { OptionsType } from 'react-select'\\\\nimport AsyncFormSelect from './AsyncFormSelect'\\\\n\\\\nexport default {parameters: {\\\\\\\"storySource\\\\\\\":{\\\\\\\"source\\\\\\\":\\\\\\\"import { action } from '@storybook/addon-actions'\\\\\\\\nimport { boolean, object, text } from '@storybook/addon-knobs'\\\\\\\\nimport React from 'react'\\\\\\\\nimport DropDown from '.'\\\\\\\\nimport { path } from '..'\\\\\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\\\\\nimport Box from '../../atoms/Box'\\\\\\\\nimport { tSelectVariant } from './interface'\\\\\\\\n// import { InputActionMeta } from 'react-select'\\\\\\\\n// import AsyncSelect from 'react-select/async'\\\\\\\\nimport { OptionsType } from 'react-select'\\\\\\\\nimport AsyncFormSelect from './AsyncFormSelect'\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/DropDown`,\\\\\\\\n  component: DropDown\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst options = [\\\\\\\\n  {\\\\\\\\n    value: 'emailVerificationPending',\\\\\\\\n    label: 'Email Verification Pending Shipper',\\\\\\\\n    title: 'Email Verification Pending Shipper'\\\\\\\\n  },\\\\\\\\n  { value: 'allShippers', label: 'All Shippers', title: 'All Shippers' },\\\\\\\\n  {\\\\\\\\n    value: 'approvalPendingShippers',\\\\\\\\n    label: 'Approval Pending Shippers',\\\\\\\\n    title: 'Approval Pending Shippers'\\\\\\\\n  }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst ListViewOption = [\\\\\\\\n  { value: 'Available', label: 'Available', title: 'Available' },\\\\\\\\n  { value: 'Dispatched', label: 'Dispatched', title: 'Dispatched' },\\\\\\\\n  { value: 'Inactive', label: 'Inactive', title: 'Inactive' }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst FormSelectOption = [\\\\\\\\n  {\\\\\\\\n    value: 'Credit',\\\\\\\\n    label: 'Credit',\\\\\\\\n    title: 'Credit',\\\\\\\\n    description:\\\\\\\\n      'Credit transaction will add to the outstanding amount of (Delivery Associate)'\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    value: 'Debit',\\\\\\\\n    label: 'Debit',\\\\\\\\n    title: 'Debit',\\\\\\\\n    description:\\\\\\\\n      'Credit transaction will deduct from the outstanding amount of (Delivery Associate)'\\\\\\\\n  }\\\\\\\\n]\\\\\\\\nexport const DefaultSelect = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='6em' bgColor='grey.50'>\\\\\\\\n        <DropDown\\\\\\\\n          variant={text('variant', 'default-select') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', options)}\\\\\\\\n          label={text('label', 'Name')}\\\\\\\\n          required={boolean('required', true)}\\\\\\\\n          loading={boolean('loading', true)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          error={boolean('error', false)}\\\\\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\\\\\n          placeholder={text('placeholder', 'Select')}\\\\\\\\n          value={text('value', 'chocolate')}\\\\\\\\n          width={text('width', '300px')}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const FormSelectPlayground = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='6em' bgColor='grey.50'>\\\\\\\\n        <DropDown\\\\\\\\n          variant={text('variant', 'form-select') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', FormSelectOption)}\\\\\\\\n          label={text('label', 'Name')}\\\\\\\\n          required={boolean('required', true)}\\\\\\\\n          loading={boolean('loading', false)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          error={boolean('error', false)}\\\\\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\\\\\n          placeholder={text('placeholder', 'Select')}\\\\\\\\n          value={text('value', 'emailVerificationPending')}\\\\\\\\n          width={text('width', '300px')}\\\\\\\\n          onMenuOpen={action('Menu Open')}\\\\\\\\n          onMenuClose={action('Menu Close')}\\\\\\\\n          showDescription={boolean('Show Description', true)}\\\\\\\\n          tooltipMessage={text('tooltipMessage', 'i am form select tooltip')}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\nexport const FormSelectDeferred = () => {\\\\\\\\n  const [isLoading, setIsLoading] = React.useState<boolean>(false)\\\\\\\\n  const [menuIsOpen, setMenuIsOpen] = React.useState<boolean | undefined>(\\\\\\\\n    undefined\\\\\\\\n  )\\\\\\\\n  const [dropdownOptions, setDropdownOptions] = React.useState<\\\\\\\\n    { label: string; value: string }[]\\\\\\\\n  >([])\\\\\\\\n\\\\\\\\n  const [selectedValue, setSelectedValue] = React.useState<string>()\\\\\\\\n\\\\\\\\n  const handleMenuOpen = () => {\\\\\\\\n    action('Menu Opened!')()\\\\\\\\n    // setMenuIsOpen(true)\\\\\\\\n    if (dropdownOptions.length === 0) {\\\\\\\\n      setIsLoading(true)\\\\\\\\n      setTimeout(() => {\\\\\\\\n        setDropdownOptions(options)\\\\\\\\n        setIsLoading(false)\\\\\\\\n        setMenuIsOpen(true)\\\\\\\\n      }, 2000)\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  const handleMenuClose = () => {\\\\\\\\n    action('Menu Closed!')()\\\\\\\\n    setMenuIsOpen(undefined)\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  const handleChange = (value?: string) => {\\\\\\\\n    action('Value selected')(value)\\\\\\\\n    setSelectedValue(value)\\\\\\\\n    setMenuIsOpen(undefined)\\\\\\\\n  }\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box py='3em' bgColor='grey.50'>\\\\\\\\n        <DropDown\\\\\\\\n          variant={text('variant', 'form-select') as tSelectVariant}\\\\\\\\n          optionList={dropdownOptions}\\\\\\\\n          label={text('label', 'Name')}\\\\\\\\n          required={boolean('required', true)}\\\\\\\\n          loading={isLoading}\\\\\\\\n          onChange={handleChange}\\\\\\\\n          error={boolean('error', false)}\\\\\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\\\\\n          placeholder={text('placeholder', 'Select')}\\\\\\\\n          value={selectedValue}\\\\\\\\n          isMenuOpen={menuIsOpen}\\\\\\\\n          width={text('width', '300px')}\\\\\\\\n          onMenuOpen={handleMenuOpen}\\\\\\\\n          onMenuClose={handleMenuClose}\\\\\\\\n          onInputChange={action('onInputChange')}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n          limitOptionsList={50}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const FormSelectAsync = () => {\\\\\\\\n  // const [menuIsOpen, setMenuIsOpen] = React.useState<boolean>()\\\\\\\\n  const [options] = React.useState<OptionsType<any>>([])\\\\\\\\n  const handleLoadOptions = React.useCallback(\\\\\\\\n    (inputValue: string, callback: (options: OptionsType<any>) => void) => {\\\\\\\\n      console.log(inputValue)\\\\\\\\n      if (inputValue.length >= 3) {\\\\\\\\n        const newOptions = [\\\\\\\\n          {\\\\\\\\n            label: inputValue + ' - Option 1',\\\\\\\\n            value: inputValue + '1',\\\\\\\\n            description: inputValue + ' - Option 1'\\\\\\\\n          },\\\\\\\\n          {\\\\\\\\n            label: inputValue + ' - Option 2',\\\\\\\\n            value: inputValue + '2',\\\\\\\\n            description: inputValue + ' - Option 2'\\\\\\\\n          }\\\\\\\\n        ]\\\\\\\\n        // setOptions(newOptions)\\\\\\\\n        callback(newOptions)\\\\\\\\n      } else {\\\\\\\\n        callback(options)\\\\\\\\n      }\\\\\\\\n    },\\\\\\\\n    []\\\\\\\\n  )\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box py='3em' bgColor='grey.50'>\\\\\\\\n        <div style={{ width: '350px' }}>\\\\\\\\n          <AsyncFormSelect\\\\\\\\n            loadOptions={handleLoadOptions}\\\\\\\\n            cacheOptions\\\\\\\\n            label={text('label', 'Postal Code')}\\\\\\\\n            required={boolean('required', false)}\\\\\\\\n            error={boolean('error', false)}\\\\\\\\n            errorMessage={text('errorMessage', 'Postal Code is required')}\\\\\\\\n            disabled={boolean('disabled', false)}\\\\\\\\n            showDescription={boolean('showDescription', false)}\\\\\\\\n          />\\\\\\\\n        </div>\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const ListView = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='6em' bgColor='grey.50'>\\\\\\\\n        <DropDown\\\\\\\\n          variant={text('variant', 'list-view') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', ListViewOption)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          width={text('width', '120px')}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n          limitOptionsList={50}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\nexport const EditedListView = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='6em' bgColor='grey.50'>\\\\\\\\n        <DropDown\\\\\\\\n          variant={text('variant', 'inline-edit') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', ListViewOption)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          width={text('width', '100%')}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n          limitOptionsList={50}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\nexport const DashedDropdown = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='6em' bgColor='grey.50'>\\\\\\\\n        <DropDown\\\\\\\\n          variant={text('variant', 'dashed-dropdown') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', ListViewOption)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          width={text('width', '100%')}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n          value={text('value', '') as tSelectVariant}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\",\\\\\\\"locationsMap\\\\\\\":{}},},\\\\n  title: `${path}/DropDown`,\\\\n  component: DropDown\\\\n}\\\\n\\\\nconst options = [\\\\n  {\\\\n    value: 'emailVerificationPending',\\\\n    label: 'Email Verification Pending Shipper',\\\\n    title: 'Email Verification Pending Shipper'\\\\n  },\\\\n  { value: 'allShippers', label: 'All Shippers', title: 'All Shippers' },\\\\n  {\\\\n    value: 'approvalPendingShippers',\\\\n    label: 'Approval Pending Shippers',\\\\n    title: 'Approval Pending Shippers'\\\\n  }\\\\n]\\\\n\\\\nconst ListViewOption = [\\\\n  { value: 'Available', label: 'Available', title: 'Available' },\\\\n  { value: 'Dispatched', label: 'Dispatched', title: 'Dispatched' },\\\\n  { value: 'Inactive', label: 'Inactive', title: 'Inactive' }\\\\n]\\\\n\\\\nconst FormSelectOption = [\\\\n  {\\\\n    value: 'Credit',\\\\n    label: 'Credit',\\\\n    title: 'Credit',\\\\n    description:\\\\n      'Credit transaction will add to the outstanding amount of (Delivery Associate)'\\\\n  },\\\\n  {\\\\n    value: 'Debit',\\\\n    label: 'Debit',\\\\n    title: 'Debit',\\\\n    description:\\\\n      'Credit transaction will deduct from the outstanding amount of (Delivery Associate)'\\\\n  }\\\\n]\\\\nexport const DefaultSelect = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'default-select') as tSelectVariant}\\\\n          optionList={object('optionList', options)}\\\\n          label={text('label', 'Name')}\\\\n          required={boolean('required', true)}\\\\n          loading={boolean('loading', true)}\\\\n          onChange={action('Value selected')}\\\\n          error={boolean('error', false)}\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\n          placeholder={text('placeholder', 'Select')}\\\\n          value={text('value', 'chocolate')}\\\\n          width={text('width', '300px')}\\\\n          disabled={boolean('disabled', false)}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const FormSelectPlayground = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'form-select') as tSelectVariant}\\\\n          optionList={object('optionList', FormSelectOption)}\\\\n          label={text('label', 'Name')}\\\\n          required={boolean('required', true)}\\\\n          loading={boolean('loading', false)}\\\\n          onChange={action('Value selected')}\\\\n          error={boolean('error', false)}\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\n          placeholder={text('placeholder', 'Select')}\\\\n          value={text('value', 'emailVerificationPending')}\\\\n          width={text('width', '300px')}\\\\n          onMenuOpen={action('Menu Open')}\\\\n          onMenuClose={action('Menu Close')}\\\\n          showDescription={boolean('Show Description', true)}\\\\n          tooltipMessage={text('tooltipMessage', 'i am form select tooltip')}\\\\n          disabled={boolean('disabled', false)}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\nexport const FormSelectDeferred = addSourceDecorator(() => {\\\\n  const [isLoading, setIsLoading] = React.useState<boolean>(false)\\\\n  const [menuIsOpen, setMenuIsOpen] = React.useState<boolean | undefined>(\\\\n    undefined\\\\n  )\\\\n  const [dropdownOptions, setDropdownOptions] = React.useState<\\\\n    { label: string; value: string }[]\\\\n  >([])\\\\n\\\\n  const [selectedValue, setSelectedValue] = React.useState<string>()\\\\n\\\\n  const handleMenuOpen = () => {\\\\n    action('Menu Opened!')()\\\\n    // setMenuIsOpen(true)\\\\n    if (dropdownOptions.length === 0) {\\\\n      setIsLoading(true)\\\\n      setTimeout(() => {\\\\n        setDropdownOptions(options)\\\\n        setIsLoading(false)\\\\n        setMenuIsOpen(true)\\\\n      }, 2000)\\\\n    }\\\\n  }\\\\n\\\\n  const handleMenuClose = () => {\\\\n    action('Menu Closed!')()\\\\n    setMenuIsOpen(undefined)\\\\n  }\\\\n\\\\n  const handleChange = (value?: string) => {\\\\n    action('Value selected')(value)\\\\n    setSelectedValue(value)\\\\n    setMenuIsOpen(undefined)\\\\n  }\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box py='3em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'form-select') as tSelectVariant}\\\\n          optionList={dropdownOptions}\\\\n          label={text('label', 'Name')}\\\\n          required={boolean('required', true)}\\\\n          loading={isLoading}\\\\n          onChange={handleChange}\\\\n          error={boolean('error', false)}\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\n          placeholder={text('placeholder', 'Select')}\\\\n          value={selectedValue}\\\\n          isMenuOpen={menuIsOpen}\\\\n          width={text('width', '300px')}\\\\n          onMenuOpen={handleMenuOpen}\\\\n          onMenuClose={handleMenuClose}\\\\n          onInputChange={action('onInputChange')}\\\\n          disabled={boolean('disabled', false)}\\\\n          limitOptionsList={50}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const FormSelectAsync = addSourceDecorator(() => {\\\\n  // const [menuIsOpen, setMenuIsOpen] = React.useState<boolean>()\\\\n  const [options] = React.useState<OptionsType<any>>([])\\\\n  const handleLoadOptions = React.useCallback(\\\\n    (inputValue: string, callback: (options: OptionsType<any>) => void) => {\\\\n      console.log(inputValue)\\\\n      if (inputValue.length >= 3) {\\\\n        const newOptions = [\\\\n          {\\\\n            label: inputValue + ' - Option 1',\\\\n            value: inputValue + '1',\\\\n            description: inputValue + ' - Option 1'\\\\n          },\\\\n          {\\\\n            label: inputValue + ' - Option 2',\\\\n            value: inputValue + '2',\\\\n            description: inputValue + ' - Option 2'\\\\n          }\\\\n        ]\\\\n        // setOptions(newOptions)\\\\n        callback(newOptions)\\\\n      } else {\\\\n        callback(options)\\\\n      }\\\\n    },\\\\n    []\\\\n  )\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box py='3em' bgColor='grey.50'>\\\\n        <div style={{ width: '350px' }}>\\\\n          <AsyncFormSelect\\\\n            loadOptions={handleLoadOptions}\\\\n            cacheOptions\\\\n            label={text('label', 'Postal Code')}\\\\n            required={boolean('required', false)}\\\\n            error={boolean('error', false)}\\\\n            errorMessage={text('errorMessage', 'Postal Code is required')}\\\\n            disabled={boolean('disabled', false)}\\\\n            showDescription={boolean('showDescription', false)}\\\\n          />\\\\n        </div>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const ListView = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'list-view') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          onChange={action('Value selected')}\\\\n          width={text('width', '120px')}\\\\n          disabled={boolean('disabled', false)}\\\\n          limitOptionsList={50}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\nexport const EditedListView = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'inline-edit') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          onChange={action('Value selected')}\\\\n          width={text('width', '100%')}\\\\n          disabled={boolean('disabled', false)}\\\\n          limitOptionsList={50}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\nexport const DashedDropdown = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'dashed-dropdown') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          onChange={action('Value selected')}\\\\n          width={text('width', '100%')}\\\\n          disabled={boolean('disabled', false)}\\\\n          value={text('value', '') as tSelectVariant}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\",\\\"locationsMap\\\":{}},\\\"storySource\\\":{\\\"source\\\":\\\"import { action } from '@storybook/addon-actions'\\\\nimport { boolean, object, text } from '@storybook/addon-knobs'\\\\nimport React from 'react'\\\\nimport DropDown from '.'\\\\nimport { path } from '..'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport Box from '../../atoms/Box'\\\\nimport { tSelectVariant } from './interface'\\\\n// import { InputActionMeta } from 'react-select'\\\\n// import AsyncSelect from 'react-select/async'\\\\nimport { OptionsType } from 'react-select'\\\\nimport AsyncFormSelect from './AsyncFormSelect'\\\\n\\\\nexport default {\\\\n  title: `${path}/DropDown`,\\\\n  component: DropDown\\\\n}\\\\n\\\\nconst options = [\\\\n  {\\\\n    value: 'emailVerificationPending',\\\\n    label: 'Email Verification Pending Shipper',\\\\n    title: 'Email Verification Pending Shipper'\\\\n  },\\\\n  { value: 'allShippers', label: 'All Shippers', title: 'All Shippers' },\\\\n  {\\\\n    value: 'approvalPendingShippers',\\\\n    label: 'Approval Pending Shippers',\\\\n    title: 'Approval Pending Shippers'\\\\n  }\\\\n]\\\\n\\\\nconst ListViewOption = [\\\\n  { value: 'Available', label: 'Available', title: 'Available' },\\\\n  { value: 'Dispatched', label: 'Dispatched', title: 'Dispatched' },\\\\n  { value: 'Inactive', label: 'Inactive', title: 'Inactive' }\\\\n]\\\\n\\\\nconst FormSelectOption = [\\\\n  {\\\\n    value: 'Credit',\\\\n    label: 'Credit',\\\\n    title: 'Credit',\\\\n    description:\\\\n      'Credit transaction will add to the outstanding amount of (Delivery Associate)'\\\\n  },\\\\n  {\\\\n    value: 'Debit',\\\\n    label: 'Debit',\\\\n    title: 'Debit',\\\\n    description:\\\\n      'Credit transaction will deduct from the outstanding amount of (Delivery Associate)'\\\\n  }\\\\n]\\\\nexport const DefaultSelect = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'default-select') as tSelectVariant}\\\\n          optionList={object('optionList', options)}\\\\n          label={text('label', 'Name')}\\\\n          required={boolean('required', true)}\\\\n          loading={boolean('loading', true)}\\\\n          onChange={action('Value selected')}\\\\n          error={boolean('error', false)}\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\n          placeholder={text('placeholder', 'Select')}\\\\n          value={text('value', 'chocolate')}\\\\n          width={text('width', '300px')}\\\\n          disabled={boolean('disabled', false)}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const FormSelectPlayground = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'form-select') as tSelectVariant}\\\\n          optionList={object('optionList', FormSelectOption)}\\\\n          label={text('label', 'Name')}\\\\n          required={boolean('required', true)}\\\\n          loading={boolean('loading', false)}\\\\n          onChange={action('Value selected')}\\\\n          error={boolean('error', false)}\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\n          placeholder={text('placeholder', 'Select')}\\\\n          value={text('value', 'emailVerificationPending')}\\\\n          width={text('width', '300px')}\\\\n          onMenuOpen={action('Menu Open')}\\\\n          onMenuClose={action('Menu Close')}\\\\n          showDescription={boolean('Show Description', true)}\\\\n          tooltipMessage={text('tooltipMessage', 'i am form select tooltip')}\\\\n          disabled={boolean('disabled', false)}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\nexport const FormSelectDeferred = () => {\\\\n  const [isLoading, setIsLoading] = React.useState<boolean>(false)\\\\n  const [menuIsOpen, setMenuIsOpen] = React.useState<boolean | undefined>(\\\\n    undefined\\\\n  )\\\\n  const [dropdownOptions, setDropdownOptions] = React.useState<\\\\n    { label: string; value: string }[]\\\\n  >([])\\\\n\\\\n  const [selectedValue, setSelectedValue] = React.useState<string>()\\\\n\\\\n  const handleMenuOpen = () => {\\\\n    action('Menu Opened!')()\\\\n    // setMenuIsOpen(true)\\\\n    if (dropdownOptions.length === 0) {\\\\n      setIsLoading(true)\\\\n      setTimeout(() => {\\\\n        setDropdownOptions(options)\\\\n        setIsLoading(false)\\\\n        setMenuIsOpen(true)\\\\n      }, 2000)\\\\n    }\\\\n  }\\\\n\\\\n  const handleMenuClose = () => {\\\\n    action('Menu Closed!')()\\\\n    setMenuIsOpen(undefined)\\\\n  }\\\\n\\\\n  const handleChange = (value?: string) => {\\\\n    action('Value selected')(value)\\\\n    setSelectedValue(value)\\\\n    setMenuIsOpen(undefined)\\\\n  }\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box py='3em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'form-select') as tSelectVariant}\\\\n          optionList={dropdownOptions}\\\\n          label={text('label', 'Name')}\\\\n          required={boolean('required', true)}\\\\n          loading={isLoading}\\\\n          onChange={handleChange}\\\\n          error={boolean('error', false)}\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\n          placeholder={text('placeholder', 'Select')}\\\\n          value={selectedValue}\\\\n          isMenuOpen={menuIsOpen}\\\\n          width={text('width', '300px')}\\\\n          onMenuOpen={handleMenuOpen}\\\\n          onMenuClose={handleMenuClose}\\\\n          onInputChange={action('onInputChange')}\\\\n          disabled={boolean('disabled', false)}\\\\n          limitOptionsList={50}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const FormSelectAsync = () => {\\\\n  // const [menuIsOpen, setMenuIsOpen] = React.useState<boolean>()\\\\n  const [options] = React.useState<OptionsType<any>>([])\\\\n  const handleLoadOptions = React.useCallback(\\\\n    (inputValue: string, callback: (options: OptionsType<any>) => void) => {\\\\n      console.log(inputValue)\\\\n      if (inputValue.length >= 3) {\\\\n        const newOptions = [\\\\n          {\\\\n            label: inputValue + ' - Option 1',\\\\n            value: inputValue + '1',\\\\n            description: inputValue + ' - Option 1'\\\\n          },\\\\n          {\\\\n            label: inputValue + ' - Option 2',\\\\n            value: inputValue + '2',\\\\n            description: inputValue + ' - Option 2'\\\\n          }\\\\n        ]\\\\n        // setOptions(newOptions)\\\\n        callback(newOptions)\\\\n      } else {\\\\n        callback(options)\\\\n      }\\\\n    },\\\\n    []\\\\n  )\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box py='3em' bgColor='grey.50'>\\\\n        <div style={{ width: '350px' }}>\\\\n          <AsyncFormSelect\\\\n            loadOptions={handleLoadOptions}\\\\n            cacheOptions\\\\n            label={text('label', 'Postal Code')}\\\\n            required={boolean('required', false)}\\\\n            error={boolean('error', false)}\\\\n            errorMessage={text('errorMessage', 'Postal Code is required')}\\\\n            disabled={boolean('disabled', false)}\\\\n            showDescription={boolean('showDescription', false)}\\\\n          />\\\\n        </div>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const ListView = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'list-view') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          onChange={action('Value selected')}\\\\n          width={text('width', '120px')}\\\\n          disabled={boolean('disabled', false)}\\\\n          limitOptionsList={50}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\nexport const EditedListView = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'inline-edit') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          onChange={action('Value selected')}\\\\n          width={text('width', '100%')}\\\\n          disabled={boolean('disabled', false)}\\\\n          limitOptionsList={50}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\nexport const DashedDropdown = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'dashed-dropdown') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          onChange={action('Value selected')}\\\\n          width={text('width', '100%')}\\\\n          disabled={boolean('disabled', false)}\\\\n          value={text('value', '') as tSelectVariant}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\",\\\"locationsMap\\\":{}},},\\n  title: `${path}/DropDown`,\\n  component: DropDown\\n}\\n\\nconst options = [\\n  {\\n    value: 'emailVerificationPending',\\n    label: 'Email Verification Pending Shipper',\\n    title: 'Email Verification Pending Shipper'\\n  },\\n  { value: 'allShippers', label: 'All Shippers', title: 'All Shippers' },\\n  {\\n    value: 'approvalPendingShippers',\\n    label: 'Approval Pending Shippers',\\n    title: 'Approval Pending Shippers'\\n  }\\n]\\n\\nconst ListViewOption = [\\n  { value: 'Available', label: 'Available', title: 'Available' },\\n  { value: 'Dispatched', label: 'Dispatched', title: 'Dispatched' },\\n  { value: 'Inactive', label: 'Inactive', title: 'Inactive' }\\n]\\n\\nconst FormSelectOption = [\\n  {\\n    value: 'Credit',\\n    label: 'Credit',\\n    title: 'Credit',\\n    description:\\n      'Credit transaction will add to the outstanding amount of (Delivery Associate)'\\n  },\\n  {\\n    value: 'Debit',\\n    label: 'Debit',\\n    title: 'Debit',\\n    description:\\n      'Credit transaction will deduct from the outstanding amount of (Delivery Associate)'\\n  }\\n]\\nexport const DefaultSelect = addSourceDecorator(addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='6em' bgColor='grey.50'>\\n        <DropDown\\n          variant={text('variant', 'default-select') as tSelectVariant}\\n          optionList={object('optionList', options)}\\n          label={text('label', 'Name')}\\n          required={boolean('required', true)}\\n          loading={boolean('loading', true)}\\n          onChange={action('Value selected')}\\n          error={boolean('error', false)}\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\n          placeholder={text('placeholder', 'Select')}\\n          value={text('value', 'chocolate')}\\n          width={text('width', '300px')}\\n          disabled={boolean('disabled', false)}\\n        />\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const FormSelectPlayground = addSourceDecorator(addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='6em' bgColor='grey.50'>\\n        <DropDown\\n          variant={text('variant', 'form-select') as tSelectVariant}\\n          optionList={object('optionList', FormSelectOption)}\\n          label={text('label', 'Name')}\\n          required={boolean('required', true)}\\n          loading={boolean('loading', false)}\\n          onChange={action('Value selected')}\\n          error={boolean('error', false)}\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\n          placeholder={text('placeholder', 'Select')}\\n          value={text('value', 'emailVerificationPending')}\\n          width={text('width', '300px')}\\n          onMenuOpen={action('Menu Open')}\\n          onMenuClose={action('Menu Close')}\\n          showDescription={boolean('Show Description', true)}\\n          tooltipMessage={text('tooltipMessage', 'i am form select tooltip')}\\n          disabled={boolean('disabled', false)}\\n        />\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\nexport const FormSelectDeferred = addSourceDecorator(addSourceDecorator(() => {\\n  const [isLoading, setIsLoading] = React.useState<boolean>(false)\\n  const [menuIsOpen, setMenuIsOpen] = React.useState<boolean | undefined>(\\n    undefined\\n  )\\n  const [dropdownOptions, setDropdownOptions] = React.useState<\\n    { label: string; value: string }[]\\n  >([])\\n\\n  const [selectedValue, setSelectedValue] = React.useState<string>()\\n\\n  const handleMenuOpen = () => {\\n    action('Menu Opened!')()\\n    // setMenuIsOpen(true)\\n    if (dropdownOptions.length === 0) {\\n      setIsLoading(true)\\n      setTimeout(() => {\\n        setDropdownOptions(options)\\n        setIsLoading(false)\\n        setMenuIsOpen(true)\\n      }, 2000)\\n    }\\n  }\\n\\n  const handleMenuClose = () => {\\n    action('Menu Closed!')()\\n    setMenuIsOpen(undefined)\\n  }\\n\\n  const handleChange = (value?: string) => {\\n    action('Value selected')(value)\\n    setSelectedValue(value)\\n    setMenuIsOpen(undefined)\\n  }\\n  return (\\n    <ThemeWrapper>\\n      <Box py='3em' bgColor='grey.50'>\\n        <DropDown\\n          variant={text('variant', 'form-select') as tSelectVariant}\\n          optionList={dropdownOptions}\\n          label={text('label', 'Name')}\\n          required={boolean('required', true)}\\n          loading={isLoading}\\n          onChange={handleChange}\\n          error={boolean('error', false)}\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\n          placeholder={text('placeholder', 'Select')}\\n          value={selectedValue}\\n          isMenuOpen={menuIsOpen}\\n          width={text('width', '300px')}\\n          onMenuOpen={handleMenuOpen}\\n          onMenuClose={handleMenuClose}\\n          onInputChange={action('onInputChange')}\\n          disabled={boolean('disabled', false)}\\n          limitOptionsList={50}\\n        />\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const FormSelectAsync = addSourceDecorator(addSourceDecorator(() => {\\n  // const [menuIsOpen, setMenuIsOpen] = React.useState<boolean>()\\n  const [options] = React.useState<OptionsType<any>>([])\\n  const handleLoadOptions = React.useCallback(\\n    (inputValue: string, callback: (options: OptionsType<any>) => void) => {\\n      console.log(inputValue)\\n      if (inputValue.length >= 3) {\\n        const newOptions = [\\n          {\\n            label: inputValue + ' - Option 1',\\n            value: inputValue + '1',\\n            description: inputValue + ' - Option 1'\\n          },\\n          {\\n            label: inputValue + ' - Option 2',\\n            value: inputValue + '2',\\n            description: inputValue + ' - Option 2'\\n          }\\n        ]\\n        // setOptions(newOptions)\\n        callback(newOptions)\\n      } else {\\n        callback(options)\\n      }\\n    },\\n    []\\n  )\\n\\n  return (\\n    <ThemeWrapper>\\n      <Box py='3em' bgColor='grey.50'>\\n        <div style={{ width: '350px' }}>\\n          <AsyncFormSelect\\n            loadOptions={handleLoadOptions}\\n            cacheOptions\\n            label={text('label', 'Postal Code')}\\n            required={boolean('required', false)}\\n            error={boolean('error', false)}\\n            errorMessage={text('errorMessage', 'Postal Code is required')}\\n            disabled={boolean('disabled', false)}\\n            showDescription={boolean('showDescription', false)}\\n          />\\n        </div>\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const ListView = addSourceDecorator(addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='6em' bgColor='grey.50'>\\n        <DropDown\\n          variant={text('variant', 'list-view') as tSelectVariant}\\n          optionList={object('optionList', ListViewOption)}\\n          onChange={action('Value selected')}\\n          width={text('width', '120px')}\\n          disabled={boolean('disabled', false)}\\n          limitOptionsList={50}\\n        />\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\nexport const EditedListView = addSourceDecorator(addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='6em' bgColor='grey.50'>\\n        <DropDown\\n          variant={text('variant', 'inline-edit') as tSelectVariant}\\n          optionList={object('optionList', ListViewOption)}\\n          onChange={action('Value selected')}\\n          width={text('width', '100%')}\\n          disabled={boolean('disabled', false)}\\n          limitOptionsList={50}\\n        />\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\nexport const DashedDropdown = addSourceDecorator(addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='6em' bgColor='grey.50'>\\n        <DropDown\\n          variant={text('variant', 'dashed-dropdown') as tSelectVariant}\\n          optionList={object('optionList', ListViewOption)}\\n          onChange={action('Value selected')}\\n          width={text('width', '100%')}\\n          disabled={boolean('disabled', false)}\\n          value={text('value', '') as tSelectVariant}\\n        />\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\";\n// @ts-ignore\nvar __ADDS_MAP__ = {};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = \"/DropDown.stories.tsx\";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \n\n/* eslint-disable */\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\n// @ts-ignore\nvar addSourceDecorator = require(\"@storybook/source-loader/preview\").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/molecules/DropDown\";\n// @ts-ignore\nvar __STORY__ = \"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/molecules/DropDown\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"import { action } from '@storybook/addon-actions'\\\\nimport { boolean, object, text } from '@storybook/addon-knobs'\\\\nimport React from 'react'\\\\nimport DropDown from '.'\\\\nimport { path } from '..'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport Box from '../../atoms/Box'\\\\nimport { tSelectVariant } from './interface'\\\\n// import { InputActionMeta } from 'react-select'\\\\n// import AsyncSelect from 'react-select/async'\\\\nimport { OptionsType } from 'react-select'\\\\nimport AsyncFormSelect from './AsyncFormSelect'\\\\n\\\\nexport default {\\\\n  title: `${path}/DropDown`,\\\\n  component: DropDown\\\\n}\\\\n\\\\nconst options = [\\\\n  {\\\\n    value: 'emailVerificationPending',\\\\n    label: 'Email Verification Pending Shipper',\\\\n    title: 'Email Verification Pending Shipper'\\\\n  },\\\\n  { value: 'allShippers', label: 'All Shippers', title: 'All Shippers' },\\\\n  {\\\\n    value: 'approvalPendingShippers',\\\\n    label: 'Approval Pending Shippers',\\\\n    title: 'Approval Pending Shippers'\\\\n  }\\\\n]\\\\n\\\\nconst ListViewOption = [\\\\n  { value: 'Available', label: 'Available', title: 'Available' },\\\\n  { value: 'Dispatched', label: 'Dispatched', title: 'Dispatched' },\\\\n  { value: 'Inactive', label: 'Inactive', title: 'Inactive' }\\\\n]\\\\n\\\\nconst FormSelectOption = [\\\\n  {\\\\n    value: 'Credit',\\\\n    label: 'Credit',\\\\n    title: 'Credit',\\\\n    description:\\\\n      'Credit transaction will add to the outstanding amount of (Delivery Associate)'\\\\n  },\\\\n  {\\\\n    value: 'Debit',\\\\n    label: 'Debit',\\\\n    title: 'Debit',\\\\n    description:\\\\n      'Credit transaction will deduct from the outstanding amount of (Delivery Associate)'\\\\n  }\\\\n]\\\\nexport const DefaultSelect = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'default-select') as tSelectVariant}\\\\n          optionList={object('optionList', options)}\\\\n          label={text('label', 'Name')}\\\\n          required={boolean('required', true)}\\\\n          loading={boolean('loading', true)}\\\\n          onChange={action('Value selected')}\\\\n          error={boolean('error', false)}\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\n          placeholder={text('placeholder', 'Select')}\\\\n          value={text('value', 'chocolate')}\\\\n          width={text('width', '300px')}\\\\n          disabled={boolean('disabled', false)}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const FormSelectPlayground = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'form-select') as tSelectVariant}\\\\n          optionList={object('optionList', FormSelectOption)}\\\\n          label={text('label', 'Name')}\\\\n          required={boolean('required', true)}\\\\n          loading={boolean('loading', false)}\\\\n          onChange={action('Value selected')}\\\\n          error={boolean('error', false)}\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\n          placeholder={text('placeholder', 'Select')}\\\\n          value={text('value', 'emailVerificationPending')}\\\\n          width={text('width', '300px')}\\\\n          onMenuOpen={action('Menu Open')}\\\\n          onMenuClose={action('Menu Close')}\\\\n          showDescription={boolean('Show Description', true)}\\\\n          tooltipMessage={text('tooltipMessage', 'i am form select tooltip')}\\\\n          disabled={boolean('disabled', false)}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\nexport const FormSelectDeferred = () => {\\\\n  const [isLoading, setIsLoading] = React.useState<boolean>(false)\\\\n  const [menuIsOpen, setMenuIsOpen] = React.useState<boolean | undefined>(\\\\n    undefined\\\\n  )\\\\n  const [dropdownOptions, setDropdownOptions] = React.useState<\\\\n    { label: string; value: string }[]\\\\n  >([])\\\\n\\\\n  const [selectedValue, setSelectedValue] = React.useState<string>()\\\\n\\\\n  const handleMenuOpen = () => {\\\\n    action('Menu Opened!')()\\\\n    // setMenuIsOpen(true)\\\\n    if (dropdownOptions.length === 0) {\\\\n      setIsLoading(true)\\\\n      setTimeout(() => {\\\\n        setDropdownOptions(options)\\\\n        setIsLoading(false)\\\\n        setMenuIsOpen(true)\\\\n      }, 2000)\\\\n    }\\\\n  }\\\\n\\\\n  const handleMenuClose = () => {\\\\n    action('Menu Closed!')()\\\\n    setMenuIsOpen(undefined)\\\\n  }\\\\n\\\\n  const handleChange = (value?: string) => {\\\\n    action('Value selected')(value)\\\\n    setSelectedValue(value)\\\\n    setMenuIsOpen(undefined)\\\\n  }\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box py='3em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'form-select') as tSelectVariant}\\\\n          optionList={dropdownOptions}\\\\n          label={text('label', 'Name')}\\\\n          required={boolean('required', true)}\\\\n          loading={isLoading}\\\\n          onChange={handleChange}\\\\n          error={boolean('error', false)}\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\n          placeholder={text('placeholder', 'Select')}\\\\n          value={selectedValue}\\\\n          isMenuOpen={menuIsOpen}\\\\n          width={text('width', '300px')}\\\\n          onMenuOpen={handleMenuOpen}\\\\n          onMenuClose={handleMenuClose}\\\\n          onInputChange={action('onInputChange')}\\\\n          disabled={boolean('disabled', false)}\\\\n          limitOptionsList={50}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const FormSelectAsync = () => {\\\\n  // const [menuIsOpen, setMenuIsOpen] = React.useState<boolean>()\\\\n  const [options] = React.useState<OptionsType<any>>([])\\\\n  const handleLoadOptions = React.useCallback(\\\\n    (inputValue: string, callback: (options: OptionsType<any>) => void) => {\\\\n      console.log(inputValue)\\\\n      if (inputValue.length >= 3) {\\\\n        const newOptions = [\\\\n          {\\\\n            label: inputValue + ' - Option 1',\\\\n            value: inputValue + '1',\\\\n            description: inputValue + ' - Option 1'\\\\n          },\\\\n          {\\\\n            label: inputValue + ' - Option 2',\\\\n            value: inputValue + '2',\\\\n            description: inputValue + ' - Option 2'\\\\n          }\\\\n        ]\\\\n        // setOptions(newOptions)\\\\n        callback(newOptions)\\\\n      } else {\\\\n        callback(options)\\\\n      }\\\\n    },\\\\n    []\\\\n  )\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box py='3em' bgColor='grey.50'>\\\\n        <div style={{ width: '350px' }}>\\\\n          <AsyncFormSelect\\\\n            loadOptions={handleLoadOptions}\\\\n            cacheOptions\\\\n            label={text('label', 'Postal Code')}\\\\n            required={boolean('required', false)}\\\\n            error={boolean('error', false)}\\\\n            errorMessage={text('errorMessage', 'Postal Code is required')}\\\\n            disabled={boolean('disabled', false)}\\\\n            showDescription={boolean('showDescription', false)}\\\\n          />\\\\n        </div>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const ListView = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'list-view') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          onChange={action('Value selected')}\\\\n          width={text('width', '120px')}\\\\n          disabled={boolean('disabled', false)}\\\\n          limitOptionsList={50}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\nexport const EditedListView = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'inline-edit') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          onChange={action('Value selected')}\\\\n          width={text('width', '100%')}\\\\n          disabled={boolean('disabled', false)}\\\\n          limitOptionsList={50}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\nexport const DashedDropdown = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'dashed-dropdown') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          onChange={action('Value selected')}\\\\n          width={text('width', '100%')}\\\\n          disabled={boolean('disabled', false)}\\\\n          value={text('value', '') as tSelectVariant}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/DropDown.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\nimport { action } from '@storybook/addon-actions'\\nimport { boolean, object, text } from '@storybook/addon-knobs'\\nimport React from 'react'\\nimport DropDown from '.'\\nimport { path } from '..'\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\nimport Box from '../../atoms/Box'\\nimport { tSelectVariant } from './interface'\\n// import { InputActionMeta } from 'react-select'\\n// import AsyncSelect from 'react-select/async'\\nimport { OptionsType } from 'react-select'\\nimport AsyncFormSelect from './AsyncFormSelect'\\n\\nexport default {parameters: {\\\"storySource\\\":{\\\"source\\\":\\\"import { action } from '@storybook/addon-actions'\\\\nimport { boolean, object, text } from '@storybook/addon-knobs'\\\\nimport React from 'react'\\\\nimport DropDown from '.'\\\\nimport { path } from '..'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport Box from '../../atoms/Box'\\\\nimport { tSelectVariant } from './interface'\\\\n// import { InputActionMeta } from 'react-select'\\\\n// import AsyncSelect from 'react-select/async'\\\\nimport { OptionsType } from 'react-select'\\\\nimport AsyncFormSelect from './AsyncFormSelect'\\\\n\\\\nexport default {\\\\n  title: `${path}/DropDown`,\\\\n  component: DropDown\\\\n}\\\\n\\\\nconst options = [\\\\n  {\\\\n    value: 'emailVerificationPending',\\\\n    label: 'Email Verification Pending Shipper',\\\\n    title: 'Email Verification Pending Shipper'\\\\n  },\\\\n  { value: 'allShippers', label: 'All Shippers', title: 'All Shippers' },\\\\n  {\\\\n    value: 'approvalPendingShippers',\\\\n    label: 'Approval Pending Shippers',\\\\n    title: 'Approval Pending Shippers'\\\\n  }\\\\n]\\\\n\\\\nconst ListViewOption = [\\\\n  { value: 'Available', label: 'Available', title: 'Available' },\\\\n  { value: 'Dispatched', label: 'Dispatched', title: 'Dispatched' },\\\\n  { value: 'Inactive', label: 'Inactive', title: 'Inactive' }\\\\n]\\\\n\\\\nconst FormSelectOption = [\\\\n  {\\\\n    value: 'Credit',\\\\n    label: 'Credit',\\\\n    title: 'Credit',\\\\n    description:\\\\n      'Credit transaction will add to the outstanding amount of (Delivery Associate)'\\\\n  },\\\\n  {\\\\n    value: 'Debit',\\\\n    label: 'Debit',\\\\n    title: 'Debit',\\\\n    description:\\\\n      'Credit transaction will deduct from the outstanding amount of (Delivery Associate)'\\\\n  }\\\\n]\\\\nexport const DefaultSelect = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'default-select') as tSelectVariant}\\\\n          optionList={object('optionList', options)}\\\\n          label={text('label', 'Name')}\\\\n          required={boolean('required', true)}\\\\n          loading={boolean('loading', true)}\\\\n          onChange={action('Value selected')}\\\\n          error={boolean('error', false)}\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\n          placeholder={text('placeholder', 'Select')}\\\\n          value={text('value', 'chocolate')}\\\\n          width={text('width', '300px')}\\\\n          disabled={boolean('disabled', false)}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const FormSelectPlayground = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'form-select') as tSelectVariant}\\\\n          optionList={object('optionList', FormSelectOption)}\\\\n          label={text('label', 'Name')}\\\\n          required={boolean('required', true)}\\\\n          loading={boolean('loading', false)}\\\\n          onChange={action('Value selected')}\\\\n          error={boolean('error', false)}\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\n          placeholder={text('placeholder', 'Select')}\\\\n          value={text('value', 'emailVerificationPending')}\\\\n          width={text('width', '300px')}\\\\n          onMenuOpen={action('Menu Open')}\\\\n          onMenuClose={action('Menu Close')}\\\\n          showDescription={boolean('Show Description', true)}\\\\n          tooltipMessage={text('tooltipMessage', 'i am form select tooltip')}\\\\n          disabled={boolean('disabled', false)}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\nexport const FormSelectDeferred = () => {\\\\n  const [isLoading, setIsLoading] = React.useState<boolean>(false)\\\\n  const [menuIsOpen, setMenuIsOpen] = React.useState<boolean | undefined>(\\\\n    undefined\\\\n  )\\\\n  const [dropdownOptions, setDropdownOptions] = React.useState<\\\\n    { label: string; value: string }[]\\\\n  >([])\\\\n\\\\n  const [selectedValue, setSelectedValue] = React.useState<string>()\\\\n\\\\n  const handleMenuOpen = () => {\\\\n    action('Menu Opened!')()\\\\n    // setMenuIsOpen(true)\\\\n    if (dropdownOptions.length === 0) {\\\\n      setIsLoading(true)\\\\n      setTimeout(() => {\\\\n        setDropdownOptions(options)\\\\n        setIsLoading(false)\\\\n        setMenuIsOpen(true)\\\\n      }, 2000)\\\\n    }\\\\n  }\\\\n\\\\n  const handleMenuClose = () => {\\\\n    action('Menu Closed!')()\\\\n    setMenuIsOpen(undefined)\\\\n  }\\\\n\\\\n  const handleChange = (value?: string) => {\\\\n    action('Value selected')(value)\\\\n    setSelectedValue(value)\\\\n    setMenuIsOpen(undefined)\\\\n  }\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box py='3em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'form-select') as tSelectVariant}\\\\n          optionList={dropdownOptions}\\\\n          label={text('label', 'Name')}\\\\n          required={boolean('required', true)}\\\\n          loading={isLoading}\\\\n          onChange={handleChange}\\\\n          error={boolean('error', false)}\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\n          placeholder={text('placeholder', 'Select')}\\\\n          value={selectedValue}\\\\n          isMenuOpen={menuIsOpen}\\\\n          width={text('width', '300px')}\\\\n          onMenuOpen={handleMenuOpen}\\\\n          onMenuClose={handleMenuClose}\\\\n          onInputChange={action('onInputChange')}\\\\n          disabled={boolean('disabled', false)}\\\\n          limitOptionsList={50}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const FormSelectAsync = () => {\\\\n  // const [menuIsOpen, setMenuIsOpen] = React.useState<boolean>()\\\\n  const [options] = React.useState<OptionsType<any>>([])\\\\n  const handleLoadOptions = React.useCallback(\\\\n    (inputValue: string, callback: (options: OptionsType<any>) => void) => {\\\\n      console.log(inputValue)\\\\n      if (inputValue.length >= 3) {\\\\n        const newOptions = [\\\\n          {\\\\n            label: inputValue + ' - Option 1',\\\\n            value: inputValue + '1',\\\\n            description: inputValue + ' - Option 1'\\\\n          },\\\\n          {\\\\n            label: inputValue + ' - Option 2',\\\\n            value: inputValue + '2',\\\\n            description: inputValue + ' - Option 2'\\\\n          }\\\\n        ]\\\\n        // setOptions(newOptions)\\\\n        callback(newOptions)\\\\n      } else {\\\\n        callback(options)\\\\n      }\\\\n    },\\\\n    []\\\\n  )\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box py='3em' bgColor='grey.50'>\\\\n        <div style={{ width: '350px' }}>\\\\n          <AsyncFormSelect\\\\n            loadOptions={handleLoadOptions}\\\\n            cacheOptions\\\\n            label={text('label', 'Postal Code')}\\\\n            required={boolean('required', false)}\\\\n            error={boolean('error', false)}\\\\n            errorMessage={text('errorMessage', 'Postal Code is required')}\\\\n            disabled={boolean('disabled', false)}\\\\n            showDescription={boolean('showDescription', false)}\\\\n          />\\\\n        </div>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const ListView = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'list-view') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          onChange={action('Value selected')}\\\\n          width={text('width', '120px')}\\\\n          disabled={boolean('disabled', false)}\\\\n          limitOptionsList={50}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\nexport const EditedListView = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'inline-edit') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          onChange={action('Value selected')}\\\\n          width={text('width', '100%')}\\\\n          disabled={boolean('disabled', false)}\\\\n          limitOptionsList={50}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\nexport const DashedDropdown = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'dashed-dropdown') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          onChange={action('Value selected')}\\\\n          width={text('width', '100%')}\\\\n          disabled={boolean('disabled', false)}\\\\n          value={text('value', '') as tSelectVariant}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\",\\\"locationsMap\\\":{}},},\\n  title: `${path}/DropDown`,\\n  component: DropDown\\n}\\n\\nconst options = [\\n  {\\n    value: 'emailVerificationPending',\\n    label: 'Email Verification Pending Shipper',\\n    title: 'Email Verification Pending Shipper'\\n  },\\n  { value: 'allShippers', label: 'All Shippers', title: 'All Shippers' },\\n  {\\n    value: 'approvalPendingShippers',\\n    label: 'Approval Pending Shippers',\\n    title: 'Approval Pending Shippers'\\n  }\\n]\\n\\nconst ListViewOption = [\\n  { value: 'Available', label: 'Available', title: 'Available' },\\n  { value: 'Dispatched', label: 'Dispatched', title: 'Dispatched' },\\n  { value: 'Inactive', label: 'Inactive', title: 'Inactive' }\\n]\\n\\nconst FormSelectOption = [\\n  {\\n    value: 'Credit',\\n    label: 'Credit',\\n    title: 'Credit',\\n    description:\\n      'Credit transaction will add to the outstanding amount of (Delivery Associate)'\\n  },\\n  {\\n    value: 'Debit',\\n    label: 'Debit',\\n    title: 'Debit',\\n    description:\\n      'Credit transaction will deduct from the outstanding amount of (Delivery Associate)'\\n  }\\n]\\nexport const DefaultSelect = addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='6em' bgColor='grey.50'>\\n        <DropDown\\n          variant={text('variant', 'default-select') as tSelectVariant}\\n          optionList={object('optionList', options)}\\n          label={text('label', 'Name')}\\n          required={boolean('required', true)}\\n          loading={boolean('loading', true)}\\n          onChange={action('Value selected')}\\n          error={boolean('error', false)}\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\n          placeholder={text('placeholder', 'Select')}\\n          value={text('value', 'chocolate')}\\n          width={text('width', '300px')}\\n          disabled={boolean('disabled', false)}\\n        />\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nexport const FormSelectPlayground = addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='6em' bgColor='grey.50'>\\n        <DropDown\\n          variant={text('variant', 'form-select') as tSelectVariant}\\n          optionList={object('optionList', FormSelectOption)}\\n          label={text('label', 'Name')}\\n          required={boolean('required', true)}\\n          loading={boolean('loading', false)}\\n          onChange={action('Value selected')}\\n          error={boolean('error', false)}\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\n          placeholder={text('placeholder', 'Select')}\\n          value={text('value', 'emailVerificationPending')}\\n          width={text('width', '300px')}\\n          onMenuOpen={action('Menu Open')}\\n          onMenuClose={action('Menu Close')}\\n          showDescription={boolean('Show Description', true)}\\n          tooltipMessage={text('tooltipMessage', 'i am form select tooltip')}\\n          disabled={boolean('disabled', false)}\\n        />\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\nexport const FormSelectDeferred = addSourceDecorator(() => {\\n  const [isLoading, setIsLoading] = React.useState<boolean>(false)\\n  const [menuIsOpen, setMenuIsOpen] = React.useState<boolean | undefined>(\\n    undefined\\n  )\\n  const [dropdownOptions, setDropdownOptions] = React.useState<\\n    { label: string; value: string }[]\\n  >([])\\n\\n  const [selectedValue, setSelectedValue] = React.useState<string>()\\n\\n  const handleMenuOpen = () => {\\n    action('Menu Opened!')()\\n    // setMenuIsOpen(true)\\n    if (dropdownOptions.length === 0) {\\n      setIsLoading(true)\\n      setTimeout(() => {\\n        setDropdownOptions(options)\\n        setIsLoading(false)\\n        setMenuIsOpen(true)\\n      }, 2000)\\n    }\\n  }\\n\\n  const handleMenuClose = () => {\\n    action('Menu Closed!')()\\n    setMenuIsOpen(undefined)\\n  }\\n\\n  const handleChange = (value?: string) => {\\n    action('Value selected')(value)\\n    setSelectedValue(value)\\n    setMenuIsOpen(undefined)\\n  }\\n  return (\\n    <ThemeWrapper>\\n      <Box py='3em' bgColor='grey.50'>\\n        <DropDown\\n          variant={text('variant', 'form-select') as tSelectVariant}\\n          optionList={dropdownOptions}\\n          label={text('label', 'Name')}\\n          required={boolean('required', true)}\\n          loading={isLoading}\\n          onChange={handleChange}\\n          error={boolean('error', false)}\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\n          placeholder={text('placeholder', 'Select')}\\n          value={selectedValue}\\n          isMenuOpen={menuIsOpen}\\n          width={text('width', '300px')}\\n          onMenuOpen={handleMenuOpen}\\n          onMenuClose={handleMenuClose}\\n          onInputChange={action('onInputChange')}\\n          disabled={boolean('disabled', false)}\\n          limitOptionsList={50}\\n        />\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nexport const FormSelectAsync = addSourceDecorator(() => {\\n  // const [menuIsOpen, setMenuIsOpen] = React.useState<boolean>()\\n  const [options] = React.useState<OptionsType<any>>([])\\n  const handleLoadOptions = React.useCallback(\\n    (inputValue: string, callback: (options: OptionsType<any>) => void) => {\\n      console.log(inputValue)\\n      if (inputValue.length >= 3) {\\n        const newOptions = [\\n          {\\n            label: inputValue + ' - Option 1',\\n            value: inputValue + '1',\\n            description: inputValue + ' - Option 1'\\n          },\\n          {\\n            label: inputValue + ' - Option 2',\\n            value: inputValue + '2',\\n            description: inputValue + ' - Option 2'\\n          }\\n        ]\\n        // setOptions(newOptions)\\n        callback(newOptions)\\n      } else {\\n        callback(options)\\n      }\\n    },\\n    []\\n  )\\n\\n  return (\\n    <ThemeWrapper>\\n      <Box py='3em' bgColor='grey.50'>\\n        <div style={{ width: '350px' }}>\\n          <AsyncFormSelect\\n            loadOptions={handleLoadOptions}\\n            cacheOptions\\n            label={text('label', 'Postal Code')}\\n            required={boolean('required', false)}\\n            error={boolean('error', false)}\\n            errorMessage={text('errorMessage', 'Postal Code is required')}\\n            disabled={boolean('disabled', false)}\\n            showDescription={boolean('showDescription', false)}\\n          />\\n        </div>\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nexport const ListView = addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='6em' bgColor='grey.50'>\\n        <DropDown\\n          variant={text('variant', 'list-view') as tSelectVariant}\\n          optionList={object('optionList', ListViewOption)}\\n          onChange={action('Value selected')}\\n          width={text('width', '120px')}\\n          disabled={boolean('disabled', false)}\\n          limitOptionsList={50}\\n        />\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\nexport const EditedListView = addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='6em' bgColor='grey.50'>\\n        <DropDown\\n          variant={text('variant', 'inline-edit') as tSelectVariant}\\n          optionList={object('optionList', ListViewOption)}\\n          onChange={action('Value selected')}\\n          width={text('width', '100%')}\\n          disabled={boolean('disabled', false)}\\n          limitOptionsList={50}\\n        />\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\nexport const DashedDropdown = addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='6em' bgColor='grey.50'>\\n        <DropDown\\n          variant={text('variant', 'dashed-dropdown') as tSelectVariant}\\n          optionList={object('optionList', ListViewOption)}\\n          onChange={action('Value selected')}\\n          width={text('width', '100%')}\\n          disabled={boolean('disabled', false)}\\n          value={text('value', '') as tSelectVariant}\\n        />\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\";\n// @ts-ignore\nvar __ADDS_MAP__ = {};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = \"/DropDown.stories.tsx\";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \n\n/* eslint-disable */\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\n// @ts-ignore\nvar addSourceDecorator = require(\"@storybook/source-loader/preview\").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/molecules/DropDown\";\n// @ts-ignore\nvar __STORY__ = \"import { action } from '@storybook/addon-actions'\\nimport { boolean, object, text } from '@storybook/addon-knobs'\\nimport React from 'react'\\nimport DropDown from '.'\\nimport { path } from '..'\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\nimport Box from '../../atoms/Box'\\nimport { tSelectVariant } from './interface'\\n// import { InputActionMeta } from 'react-select'\\n// import AsyncSelect from 'react-select/async'\\nimport { OptionsType } from 'react-select'\\nimport AsyncFormSelect from './AsyncFormSelect'\\n\\nexport default {\\n  title: `${path}/DropDown`,\\n  component: DropDown\\n}\\n\\nconst options = [\\n  {\\n    value: 'emailVerificationPending',\\n    label: 'Email Verification Pending Shipper',\\n    title: 'Email Verification Pending Shipper'\\n  },\\n  { value: 'allShippers', label: 'All Shippers', title: 'All Shippers' },\\n  {\\n    value: 'approvalPendingShippers',\\n    label: 'Approval Pending Shippers',\\n    title: 'Approval Pending Shippers'\\n  }\\n]\\n\\nconst ListViewOption = [\\n  { value: 'Available', label: 'Available', title: 'Available' },\\n  { value: 'Dispatched', label: 'Dispatched', title: 'Dispatched' },\\n  { value: 'Inactive', label: 'Inactive', title: 'Inactive' }\\n]\\n\\nconst FormSelectOption = [\\n  {\\n    value: 'Credit',\\n    label: 'Credit',\\n    title: 'Credit',\\n    description:\\n      'Credit transaction will add to the outstanding amount of (Delivery Associate)'\\n  },\\n  {\\n    value: 'Debit',\\n    label: 'Debit',\\n    title: 'Debit',\\n    description:\\n      'Credit transaction will deduct from the outstanding amount of (Delivery Associate)'\\n  }\\n]\\nexport const DefaultSelect = () => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='6em' bgColor='grey.50'>\\n        <DropDown\\n          variant={text('variant', 'default-select') as tSelectVariant}\\n          optionList={object('optionList', options)}\\n          label={text('label', 'Name')}\\n          required={boolean('required', true)}\\n          loading={boolean('loading', true)}\\n          onChange={action('Value selected')}\\n          error={boolean('error', false)}\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\n          placeholder={text('placeholder', 'Select')}\\n          value={text('value', 'chocolate')}\\n          width={text('width', '300px')}\\n          disabled={boolean('disabled', false)}\\n        />\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}\\n\\nexport const FormSelectPlayground = () => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='6em' bgColor='grey.50'>\\n        <DropDown\\n          variant={text('variant', 'form-select') as tSelectVariant}\\n          optionList={object('optionList', FormSelectOption)}\\n          label={text('label', 'Name')}\\n          required={boolean('required', true)}\\n          loading={boolean('loading', false)}\\n          onChange={action('Value selected')}\\n          error={boolean('error', false)}\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\n          placeholder={text('placeholder', 'Select')}\\n          value={text('value', 'emailVerificationPending')}\\n          width={text('width', '300px')}\\n          onMenuOpen={action('Menu Open')}\\n          onMenuClose={action('Menu Close')}\\n          showDescription={boolean('Show Description', true)}\\n          tooltipMessage={text('tooltipMessage', 'i am form select tooltip')}\\n          disabled={boolean('disabled', false)}\\n        />\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}\\nexport const FormSelectDeferred = () => {\\n  const [isLoading, setIsLoading] = React.useState<boolean>(false)\\n  const [menuIsOpen, setMenuIsOpen] = React.useState<boolean | undefined>(\\n    undefined\\n  )\\n  const [dropdownOptions, setDropdownOptions] = React.useState<\\n    { label: string; value: string }[]\\n  >([])\\n\\n  const [selectedValue, setSelectedValue] = React.useState<string>()\\n\\n  const handleMenuOpen = () => {\\n    action('Menu Opened!')()\\n    // setMenuIsOpen(true)\\n    if (dropdownOptions.length === 0) {\\n      setIsLoading(true)\\n      setTimeout(() => {\\n        setDropdownOptions(options)\\n        setIsLoading(false)\\n        setMenuIsOpen(true)\\n      }, 2000)\\n    }\\n  }\\n\\n  const handleMenuClose = () => {\\n    action('Menu Closed!')()\\n    setMenuIsOpen(undefined)\\n  }\\n\\n  const handleChange = (value?: string) => {\\n    action('Value selected')(value)\\n    setSelectedValue(value)\\n    setMenuIsOpen(undefined)\\n  }\\n  return (\\n    <ThemeWrapper>\\n      <Box py='3em' bgColor='grey.50'>\\n        <DropDown\\n          variant={text('variant', 'form-select') as tSelectVariant}\\n          optionList={dropdownOptions}\\n          label={text('label', 'Name')}\\n          required={boolean('required', true)}\\n          loading={isLoading}\\n          onChange={handleChange}\\n          error={boolean('error', false)}\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\n          placeholder={text('placeholder', 'Select')}\\n          value={selectedValue}\\n          isMenuOpen={menuIsOpen}\\n          width={text('width', '300px')}\\n          onMenuOpen={handleMenuOpen}\\n          onMenuClose={handleMenuClose}\\n          onInputChange={action('onInputChange')}\\n          disabled={boolean('disabled', false)}\\n          limitOptionsList={50}\\n        />\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}\\n\\nexport const FormSelectAsync = () => {\\n  // const [menuIsOpen, setMenuIsOpen] = React.useState<boolean>()\\n  const [options] = React.useState<OptionsType<any>>([])\\n  const handleLoadOptions = React.useCallback(\\n    (inputValue: string, callback: (options: OptionsType<any>) => void) => {\\n      console.log(inputValue)\\n      if (inputValue.length >= 3) {\\n        const newOptions = [\\n          {\\n            label: inputValue + ' - Option 1',\\n            value: inputValue + '1',\\n            description: inputValue + ' - Option 1'\\n          },\\n          {\\n            label: inputValue + ' - Option 2',\\n            value: inputValue + '2',\\n            description: inputValue + ' - Option 2'\\n          }\\n        ]\\n        // setOptions(newOptions)\\n        callback(newOptions)\\n      } else {\\n        callback(options)\\n      }\\n    },\\n    []\\n  )\\n\\n  return (\\n    <ThemeWrapper>\\n      <Box py='3em' bgColor='grey.50'>\\n        <div style={{ width: '350px' }}>\\n          <AsyncFormSelect\\n            loadOptions={handleLoadOptions}\\n            cacheOptions\\n            label={text('label', 'Postal Code')}\\n            required={boolean('required', false)}\\n            error={boolean('error', false)}\\n            errorMessage={text('errorMessage', 'Postal Code is required')}\\n            disabled={boolean('disabled', false)}\\n            showDescription={boolean('showDescription', false)}\\n          />\\n        </div>\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}\\n\\nexport const ListView = () => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='6em' bgColor='grey.50'>\\n        <DropDown\\n          variant={text('variant', 'list-view') as tSelectVariant}\\n          optionList={object('optionList', ListViewOption)}\\n          onChange={action('Value selected')}\\n          width={text('width', '120px')}\\n          disabled={boolean('disabled', false)}\\n          limitOptionsList={50}\\n        />\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}\\nexport const EditedListView = () => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='6em' bgColor='grey.50'>\\n        <DropDown\\n          variant={text('variant', 'inline-edit') as tSelectVariant}\\n          optionList={object('optionList', ListViewOption)}\\n          onChange={action('Value selected')}\\n          width={text('width', '100%')}\\n          disabled={boolean('disabled', false)}\\n          limitOptionsList={50}\\n        />\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}\\nexport const DashedDropdown = () => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='6em' bgColor='grey.50'>\\n        <DropDown\\n          variant={text('variant', 'dashed-dropdown') as tSelectVariant}\\n          optionList={object('optionList', ListViewOption)}\\n          onChange={action('Value selected')}\\n          width={text('width', '100%')}\\n          disabled={boolean('disabled', false)}\\n          value={text('value', '') as tSelectVariant}\\n        />\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}\\n\";\n// @ts-ignore\nvar __ADDS_MAP__ = {};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = \"/DropDown.stories.tsx\";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \nimport { action } from '@storybook/addon-actions'\nimport { boolean, object, text } from '@storybook/addon-knobs'\nimport React from 'react'\nimport DropDown from '.'\nimport { path } from '..'\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\nimport Box from '../../atoms/Box'\nimport { tSelectVariant } from './interface'\n// import { InputActionMeta } from 'react-select'\n// import AsyncSelect from 'react-select/async'\nimport { OptionsType } from 'react-select'\nimport AsyncFormSelect from './AsyncFormSelect'\n\nexport default {parameters: {\"storySource\":{\"source\":\"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/molecules/DropDown\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"\\\\n\\\\n// @ts-nocheck\\\\n// @ts-ignore\\\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\\\n// @ts-ignore\\\\nvar addSourceDecorator = require(\\\\\\\"@storybook/source-loader/preview\\\\\\\").addSource;\\\\n// @ts-ignore\\\\nvar __SOURCE_PREFIX__ = \\\\\\\"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/molecules/DropDown\\\\\\\";\\\\n// @ts-ignore\\\\nvar __STORY__ = \\\\\\\"import { action } from '@storybook/addon-actions'\\\\\\\\nimport { boolean, object, text } from '@storybook/addon-knobs'\\\\\\\\nimport React from 'react'\\\\\\\\nimport DropDown from '.'\\\\\\\\nimport { path } from '..'\\\\\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\\\\\nimport Box from '../../atoms/Box'\\\\\\\\nimport { tSelectVariant } from './interface'\\\\\\\\n// import { InputActionMeta } from 'react-select'\\\\\\\\n// import AsyncSelect from 'react-select/async'\\\\\\\\nimport { OptionsType } from 'react-select'\\\\\\\\nimport AsyncFormSelect from './AsyncFormSelect'\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/DropDown`,\\\\\\\\n  component: DropDown\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst options = [\\\\\\\\n  {\\\\\\\\n    value: 'emailVerificationPending',\\\\\\\\n    label: 'Email Verification Pending Shipper',\\\\\\\\n    title: 'Email Verification Pending Shipper'\\\\\\\\n  },\\\\\\\\n  { value: 'allShippers', label: 'All Shippers', title: 'All Shippers' },\\\\\\\\n  {\\\\\\\\n    value: 'approvalPendingShippers',\\\\\\\\n    label: 'Approval Pending Shippers',\\\\\\\\n    title: 'Approval Pending Shippers'\\\\\\\\n  }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst ListViewOption = [\\\\\\\\n  { value: 'Available', label: 'Available', title: 'Available' },\\\\\\\\n  { value: 'Dispatched', label: 'Dispatched', title: 'Dispatched' },\\\\\\\\n  { value: 'Inactive', label: 'Inactive', title: 'Inactive' }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst FormSelectOption = [\\\\\\\\n  {\\\\\\\\n    value: 'Credit',\\\\\\\\n    label: 'Credit',\\\\\\\\n    title: 'Credit',\\\\\\\\n    description:\\\\\\\\n      'Credit transaction will add to the outstanding amount of (Delivery Associate)'\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    value: 'Debit',\\\\\\\\n    label: 'Debit',\\\\\\\\n    title: 'Debit',\\\\\\\\n    description:\\\\\\\\n      'Credit transaction will deduct from the outstanding amount of (Delivery Associate)'\\\\\\\\n  }\\\\\\\\n]\\\\\\\\nexport const DefaultSelect = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='6em' bgColor='grey.50'>\\\\\\\\n        <DropDown\\\\\\\\n          variant={text('variant', 'default-select') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', options)}\\\\\\\\n          label={text('label', 'Name')}\\\\\\\\n          required={boolean('required', true)}\\\\\\\\n          loading={boolean('loading', true)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          error={boolean('error', false)}\\\\\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\\\\\n          placeholder={text('placeholder', 'Select')}\\\\\\\\n          value={text('value', 'chocolate')}\\\\\\\\n          width={text('width', '300px')}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const FormSelectPlayground = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='6em' bgColor='grey.50'>\\\\\\\\n        <DropDown\\\\\\\\n          variant={text('variant', 'form-select') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', FormSelectOption)}\\\\\\\\n          label={text('label', 'Name')}\\\\\\\\n          required={boolean('required', true)}\\\\\\\\n          loading={boolean('loading', false)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          error={boolean('error', false)}\\\\\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\\\\\n          placeholder={text('placeholder', 'Select')}\\\\\\\\n          value={text('value', 'emailVerificationPending')}\\\\\\\\n          width={text('width', '300px')}\\\\\\\\n          onMenuOpen={action('Menu Open')}\\\\\\\\n          onMenuClose={action('Menu Close')}\\\\\\\\n          showDescription={boolean('Show Description', true)}\\\\\\\\n          tooltipMessage={text('tooltipMessage', 'i am form select tooltip')}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\nexport const FormSelectDeferred = () => {\\\\\\\\n  const [isLoading, setIsLoading] = React.useState<boolean>(false)\\\\\\\\n  const [menuIsOpen, setMenuIsOpen] = React.useState<boolean | undefined>(\\\\\\\\n    undefined\\\\\\\\n  )\\\\\\\\n  const [dropdownOptions, setDropdownOptions] = React.useState<\\\\\\\\n    { label: string; value: string }[]\\\\\\\\n  >([])\\\\\\\\n\\\\\\\\n  const [selectedValue, setSelectedValue] = React.useState<string>()\\\\\\\\n\\\\\\\\n  const handleMenuOpen = () => {\\\\\\\\n    action('Menu Opened!')()\\\\\\\\n    // setMenuIsOpen(true)\\\\\\\\n    if (dropdownOptions.length === 0) {\\\\\\\\n      setIsLoading(true)\\\\\\\\n      setTimeout(() => {\\\\\\\\n        setDropdownOptions(options)\\\\\\\\n        setIsLoading(false)\\\\\\\\n        setMenuIsOpen(true)\\\\\\\\n      }, 2000)\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  const handleMenuClose = () => {\\\\\\\\n    action('Menu Closed!')()\\\\\\\\n    setMenuIsOpen(undefined)\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  const handleChange = (value?: string) => {\\\\\\\\n    action('Value selected')(value)\\\\\\\\n    setSelectedValue(value)\\\\\\\\n    setMenuIsOpen(undefined)\\\\\\\\n  }\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box py='3em' bgColor='grey.50'>\\\\\\\\n        <DropDown\\\\\\\\n          variant={text('variant', 'form-select') as tSelectVariant}\\\\\\\\n          optionList={dropdownOptions}\\\\\\\\n          label={text('label', 'Name')}\\\\\\\\n          required={boolean('required', true)}\\\\\\\\n          loading={isLoading}\\\\\\\\n          onChange={handleChange}\\\\\\\\n          error={boolean('error', false)}\\\\\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\\\\\n          placeholder={text('placeholder', 'Select')}\\\\\\\\n          value={selectedValue}\\\\\\\\n          isMenuOpen={menuIsOpen}\\\\\\\\n          width={text('width', '300px')}\\\\\\\\n          onMenuOpen={handleMenuOpen}\\\\\\\\n          onMenuClose={handleMenuClose}\\\\\\\\n          onInputChange={action('onInputChange')}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n          limitOptionsList={50}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const FormSelectAsync = () => {\\\\\\\\n  // const [menuIsOpen, setMenuIsOpen] = React.useState<boolean>()\\\\\\\\n  const [options] = React.useState<OptionsType<any>>([])\\\\\\\\n  const handleLoadOptions = React.useCallback(\\\\\\\\n    (inputValue: string, callback: (options: OptionsType<any>) => void) => {\\\\\\\\n      console.log(inputValue)\\\\\\\\n      if (inputValue.length >= 3) {\\\\\\\\n        const newOptions = [\\\\\\\\n          {\\\\\\\\n            label: inputValue + ' - Option 1',\\\\\\\\n            value: inputValue + '1',\\\\\\\\n            description: inputValue + ' - Option 1'\\\\\\\\n          },\\\\\\\\n          {\\\\\\\\n            label: inputValue + ' - Option 2',\\\\\\\\n            value: inputValue + '2',\\\\\\\\n            description: inputValue + ' - Option 2'\\\\\\\\n          }\\\\\\\\n        ]\\\\\\\\n        // setOptions(newOptions)\\\\\\\\n        callback(newOptions)\\\\\\\\n      } else {\\\\\\\\n        callback(options)\\\\\\\\n      }\\\\\\\\n    },\\\\\\\\n    []\\\\\\\\n  )\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box py='3em' bgColor='grey.50'>\\\\\\\\n        <div style={{ width: '350px' }}>\\\\\\\\n          <AsyncFormSelect\\\\\\\\n            loadOptions={handleLoadOptions}\\\\\\\\n            cacheOptions\\\\\\\\n            label={text('label', 'Postal Code')}\\\\\\\\n            required={boolean('required', false)}\\\\\\\\n            error={boolean('error', false)}\\\\\\\\n            errorMessage={text('errorMessage', 'Postal Code is required')}\\\\\\\\n            disabled={boolean('disabled', false)}\\\\\\\\n            showDescription={boolean('showDescription', false)}\\\\\\\\n          />\\\\\\\\n        </div>\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const ListView = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='6em' bgColor='grey.50'>\\\\\\\\n        <DropDown\\\\\\\\n          variant={text('variant', 'list-view') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', ListViewOption)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          width={text('width', '120px')}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n          limitOptionsList={50}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\nexport const EditedListView = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='6em' bgColor='grey.50'>\\\\\\\\n        <DropDown\\\\\\\\n          variant={text('variant', 'inline-edit') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', ListViewOption)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          width={text('width', '100%')}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n          limitOptionsList={50}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\nexport const DashedDropdown = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='6em' bgColor='grey.50'>\\\\\\\\n        <DropDown\\\\\\\\n          variant={text('variant', 'dashed-dropdown') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', ListViewOption)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          width={text('width', '100%')}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n          value={text('value', '') as tSelectVariant}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\";\\\\n// @ts-ignore\\\\nvar __ADDS_MAP__ = {};\\\\n// @ts-ignore\\\\nvar __MAIN_FILE_LOCATION__ = \\\\\\\"/DropDown.stories.tsx\\\\\\\";\\\\n// @ts-ignore\\\\nvar __MODULE_DEPENDENCIES__ = [];\\\\n// @ts-ignore\\\\nvar __LOCAL_DEPENDENCIES__ = {};\\\\n// @ts-ignore\\\\nvar __IDS_TO_FRAMEWORKS__ = {};\\\\n        \\\\nimport { action } from '@storybook/addon-actions'\\\\nimport { boolean, object, text } from '@storybook/addon-knobs'\\\\nimport React from 'react'\\\\nimport DropDown from '.'\\\\nimport { path } from '..'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport Box from '../../atoms/Box'\\\\nimport { tSelectVariant } from './interface'\\\\n// import { InputActionMeta } from 'react-select'\\\\n// import AsyncSelect from 'react-select/async'\\\\nimport { OptionsType } from 'react-select'\\\\nimport AsyncFormSelect from './AsyncFormSelect'\\\\n\\\\nexport default {parameters: {\\\\\\\"storySource\\\\\\\":{\\\\\\\"source\\\\\\\":\\\\\\\"import { action } from '@storybook/addon-actions'\\\\\\\\nimport { boolean, object, text } from '@storybook/addon-knobs'\\\\\\\\nimport React from 'react'\\\\\\\\nimport DropDown from '.'\\\\\\\\nimport { path } from '..'\\\\\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\\\\\nimport Box from '../../atoms/Box'\\\\\\\\nimport { tSelectVariant } from './interface'\\\\\\\\n// import { InputActionMeta } from 'react-select'\\\\\\\\n// import AsyncSelect from 'react-select/async'\\\\\\\\nimport { OptionsType } from 'react-select'\\\\\\\\nimport AsyncFormSelect from './AsyncFormSelect'\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/DropDown`,\\\\\\\\n  component: DropDown\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst options = [\\\\\\\\n  {\\\\\\\\n    value: 'emailVerificationPending',\\\\\\\\n    label: 'Email Verification Pending Shipper',\\\\\\\\n    title: 'Email Verification Pending Shipper'\\\\\\\\n  },\\\\\\\\n  { value: 'allShippers', label: 'All Shippers', title: 'All Shippers' },\\\\\\\\n  {\\\\\\\\n    value: 'approvalPendingShippers',\\\\\\\\n    label: 'Approval Pending Shippers',\\\\\\\\n    title: 'Approval Pending Shippers'\\\\\\\\n  }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst ListViewOption = [\\\\\\\\n  { value: 'Available', label: 'Available', title: 'Available' },\\\\\\\\n  { value: 'Dispatched', label: 'Dispatched', title: 'Dispatched' },\\\\\\\\n  { value: 'Inactive', label: 'Inactive', title: 'Inactive' }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst FormSelectOption = [\\\\\\\\n  {\\\\\\\\n    value: 'Credit',\\\\\\\\n    label: 'Credit',\\\\\\\\n    title: 'Credit',\\\\\\\\n    description:\\\\\\\\n      'Credit transaction will add to the outstanding amount of (Delivery Associate)'\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    value: 'Debit',\\\\\\\\n    label: 'Debit',\\\\\\\\n    title: 'Debit',\\\\\\\\n    description:\\\\\\\\n      'Credit transaction will deduct from the outstanding amount of (Delivery Associate)'\\\\\\\\n  }\\\\\\\\n]\\\\\\\\nexport const DefaultSelect = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='6em' bgColor='grey.50'>\\\\\\\\n        <DropDown\\\\\\\\n          variant={text('variant', 'default-select') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', options)}\\\\\\\\n          label={text('label', 'Name')}\\\\\\\\n          required={boolean('required', true)}\\\\\\\\n          loading={boolean('loading', true)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          error={boolean('error', false)}\\\\\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\\\\\n          placeholder={text('placeholder', 'Select')}\\\\\\\\n          value={text('value', 'chocolate')}\\\\\\\\n          width={text('width', '300px')}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const FormSelectPlayground = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='6em' bgColor='grey.50'>\\\\\\\\n        <DropDown\\\\\\\\n          variant={text('variant', 'form-select') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', FormSelectOption)}\\\\\\\\n          label={text('label', 'Name')}\\\\\\\\n          required={boolean('required', true)}\\\\\\\\n          loading={boolean('loading', false)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          error={boolean('error', false)}\\\\\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\\\\\n          placeholder={text('placeholder', 'Select')}\\\\\\\\n          value={text('value', 'emailVerificationPending')}\\\\\\\\n          width={text('width', '300px')}\\\\\\\\n          onMenuOpen={action('Menu Open')}\\\\\\\\n          onMenuClose={action('Menu Close')}\\\\\\\\n          showDescription={boolean('Show Description', true)}\\\\\\\\n          tooltipMessage={text('tooltipMessage', 'i am form select tooltip')}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\nexport const FormSelectDeferred = () => {\\\\\\\\n  const [isLoading, setIsLoading] = React.useState<boolean>(false)\\\\\\\\n  const [menuIsOpen, setMenuIsOpen] = React.useState<boolean | undefined>(\\\\\\\\n    undefined\\\\\\\\n  )\\\\\\\\n  const [dropdownOptions, setDropdownOptions] = React.useState<\\\\\\\\n    { label: string; value: string }[]\\\\\\\\n  >([])\\\\\\\\n\\\\\\\\n  const [selectedValue, setSelectedValue] = React.useState<string>()\\\\\\\\n\\\\\\\\n  const handleMenuOpen = () => {\\\\\\\\n    action('Menu Opened!')()\\\\\\\\n    // setMenuIsOpen(true)\\\\\\\\n    if (dropdownOptions.length === 0) {\\\\\\\\n      setIsLoading(true)\\\\\\\\n      setTimeout(() => {\\\\\\\\n        setDropdownOptions(options)\\\\\\\\n        setIsLoading(false)\\\\\\\\n        setMenuIsOpen(true)\\\\\\\\n      }, 2000)\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  const handleMenuClose = () => {\\\\\\\\n    action('Menu Closed!')()\\\\\\\\n    setMenuIsOpen(undefined)\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  const handleChange = (value?: string) => {\\\\\\\\n    action('Value selected')(value)\\\\\\\\n    setSelectedValue(value)\\\\\\\\n    setMenuIsOpen(undefined)\\\\\\\\n  }\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box py='3em' bgColor='grey.50'>\\\\\\\\n        <DropDown\\\\\\\\n          variant={text('variant', 'form-select') as tSelectVariant}\\\\\\\\n          optionList={dropdownOptions}\\\\\\\\n          label={text('label', 'Name')}\\\\\\\\n          required={boolean('required', true)}\\\\\\\\n          loading={isLoading}\\\\\\\\n          onChange={handleChange}\\\\\\\\n          error={boolean('error', false)}\\\\\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\\\\\n          placeholder={text('placeholder', 'Select')}\\\\\\\\n          value={selectedValue}\\\\\\\\n          isMenuOpen={menuIsOpen}\\\\\\\\n          width={text('width', '300px')}\\\\\\\\n          onMenuOpen={handleMenuOpen}\\\\\\\\n          onMenuClose={handleMenuClose}\\\\\\\\n          onInputChange={action('onInputChange')}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n          limitOptionsList={50}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const FormSelectAsync = () => {\\\\\\\\n  // const [menuIsOpen, setMenuIsOpen] = React.useState<boolean>()\\\\\\\\n  const [options] = React.useState<OptionsType<any>>([])\\\\\\\\n  const handleLoadOptions = React.useCallback(\\\\\\\\n    (inputValue: string, callback: (options: OptionsType<any>) => void) => {\\\\\\\\n      console.log(inputValue)\\\\\\\\n      if (inputValue.length >= 3) {\\\\\\\\n        const newOptions = [\\\\\\\\n          {\\\\\\\\n            label: inputValue + ' - Option 1',\\\\\\\\n            value: inputValue + '1',\\\\\\\\n            description: inputValue + ' - Option 1'\\\\\\\\n          },\\\\\\\\n          {\\\\\\\\n            label: inputValue + ' - Option 2',\\\\\\\\n            value: inputValue + '2',\\\\\\\\n            description: inputValue + ' - Option 2'\\\\\\\\n          }\\\\\\\\n        ]\\\\\\\\n        // setOptions(newOptions)\\\\\\\\n        callback(newOptions)\\\\\\\\n      } else {\\\\\\\\n        callback(options)\\\\\\\\n      }\\\\\\\\n    },\\\\\\\\n    []\\\\\\\\n  )\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box py='3em' bgColor='grey.50'>\\\\\\\\n        <div style={{ width: '350px' }}>\\\\\\\\n          <AsyncFormSelect\\\\\\\\n            loadOptions={handleLoadOptions}\\\\\\\\n            cacheOptions\\\\\\\\n            label={text('label', 'Postal Code')}\\\\\\\\n            required={boolean('required', false)}\\\\\\\\n            error={boolean('error', false)}\\\\\\\\n            errorMessage={text('errorMessage', 'Postal Code is required')}\\\\\\\\n            disabled={boolean('disabled', false)}\\\\\\\\n            showDescription={boolean('showDescription', false)}\\\\\\\\n          />\\\\\\\\n        </div>\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const ListView = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='6em' bgColor='grey.50'>\\\\\\\\n        <DropDown\\\\\\\\n          variant={text('variant', 'list-view') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', ListViewOption)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          width={text('width', '120px')}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n          limitOptionsList={50}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\nexport const EditedListView = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='6em' bgColor='grey.50'>\\\\\\\\n        <DropDown\\\\\\\\n          variant={text('variant', 'inline-edit') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', ListViewOption)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          width={text('width', '100%')}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n          limitOptionsList={50}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\nexport const DashedDropdown = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='6em' bgColor='grey.50'>\\\\\\\\n        <DropDown\\\\\\\\n          variant={text('variant', 'dashed-dropdown') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', ListViewOption)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          width={text('width', '100%')}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n          value={text('value', '') as tSelectVariant}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\",\\\\\\\"locationsMap\\\\\\\":{}},},\\\\n  title: `${path}/DropDown`,\\\\n  component: DropDown\\\\n}\\\\n\\\\nconst options = [\\\\n  {\\\\n    value: 'emailVerificationPending',\\\\n    label: 'Email Verification Pending Shipper',\\\\n    title: 'Email Verification Pending Shipper'\\\\n  },\\\\n  { value: 'allShippers', label: 'All Shippers', title: 'All Shippers' },\\\\n  {\\\\n    value: 'approvalPendingShippers',\\\\n    label: 'Approval Pending Shippers',\\\\n    title: 'Approval Pending Shippers'\\\\n  }\\\\n]\\\\n\\\\nconst ListViewOption = [\\\\n  { value: 'Available', label: 'Available', title: 'Available' },\\\\n  { value: 'Dispatched', label: 'Dispatched', title: 'Dispatched' },\\\\n  { value: 'Inactive', label: 'Inactive', title: 'Inactive' }\\\\n]\\\\n\\\\nconst FormSelectOption = [\\\\n  {\\\\n    value: 'Credit',\\\\n    label: 'Credit',\\\\n    title: 'Credit',\\\\n    description:\\\\n      'Credit transaction will add to the outstanding amount of (Delivery Associate)'\\\\n  },\\\\n  {\\\\n    value: 'Debit',\\\\n    label: 'Debit',\\\\n    title: 'Debit',\\\\n    description:\\\\n      'Credit transaction will deduct from the outstanding amount of (Delivery Associate)'\\\\n  }\\\\n]\\\\nexport const DefaultSelect = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'default-select') as tSelectVariant}\\\\n          optionList={object('optionList', options)}\\\\n          label={text('label', 'Name')}\\\\n          required={boolean('required', true)}\\\\n          loading={boolean('loading', true)}\\\\n          onChange={action('Value selected')}\\\\n          error={boolean('error', false)}\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\n          placeholder={text('placeholder', 'Select')}\\\\n          value={text('value', 'chocolate')}\\\\n          width={text('width', '300px')}\\\\n          disabled={boolean('disabled', false)}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const FormSelectPlayground = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'form-select') as tSelectVariant}\\\\n          optionList={object('optionList', FormSelectOption)}\\\\n          label={text('label', 'Name')}\\\\n          required={boolean('required', true)}\\\\n          loading={boolean('loading', false)}\\\\n          onChange={action('Value selected')}\\\\n          error={boolean('error', false)}\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\n          placeholder={text('placeholder', 'Select')}\\\\n          value={text('value', 'emailVerificationPending')}\\\\n          width={text('width', '300px')}\\\\n          onMenuOpen={action('Menu Open')}\\\\n          onMenuClose={action('Menu Close')}\\\\n          showDescription={boolean('Show Description', true)}\\\\n          tooltipMessage={text('tooltipMessage', 'i am form select tooltip')}\\\\n          disabled={boolean('disabled', false)}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\nexport const FormSelectDeferred = addSourceDecorator(() => {\\\\n  const [isLoading, setIsLoading] = React.useState<boolean>(false)\\\\n  const [menuIsOpen, setMenuIsOpen] = React.useState<boolean | undefined>(\\\\n    undefined\\\\n  )\\\\n  const [dropdownOptions, setDropdownOptions] = React.useState<\\\\n    { label: string; value: string }[]\\\\n  >([])\\\\n\\\\n  const [selectedValue, setSelectedValue] = React.useState<string>()\\\\n\\\\n  const handleMenuOpen = () => {\\\\n    action('Menu Opened!')()\\\\n    // setMenuIsOpen(true)\\\\n    if (dropdownOptions.length === 0) {\\\\n      setIsLoading(true)\\\\n      setTimeout(() => {\\\\n        setDropdownOptions(options)\\\\n        setIsLoading(false)\\\\n        setMenuIsOpen(true)\\\\n      }, 2000)\\\\n    }\\\\n  }\\\\n\\\\n  const handleMenuClose = () => {\\\\n    action('Menu Closed!')()\\\\n    setMenuIsOpen(undefined)\\\\n  }\\\\n\\\\n  const handleChange = (value?: string) => {\\\\n    action('Value selected')(value)\\\\n    setSelectedValue(value)\\\\n    setMenuIsOpen(undefined)\\\\n  }\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box py='3em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'form-select') as tSelectVariant}\\\\n          optionList={dropdownOptions}\\\\n          label={text('label', 'Name')}\\\\n          required={boolean('required', true)}\\\\n          loading={isLoading}\\\\n          onChange={handleChange}\\\\n          error={boolean('error', false)}\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\n          placeholder={text('placeholder', 'Select')}\\\\n          value={selectedValue}\\\\n          isMenuOpen={menuIsOpen}\\\\n          width={text('width', '300px')}\\\\n          onMenuOpen={handleMenuOpen}\\\\n          onMenuClose={handleMenuClose}\\\\n          onInputChange={action('onInputChange')}\\\\n          disabled={boolean('disabled', false)}\\\\n          limitOptionsList={50}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const FormSelectAsync = addSourceDecorator(() => {\\\\n  // const [menuIsOpen, setMenuIsOpen] = React.useState<boolean>()\\\\n  const [options] = React.useState<OptionsType<any>>([])\\\\n  const handleLoadOptions = React.useCallback(\\\\n    (inputValue: string, callback: (options: OptionsType<any>) => void) => {\\\\n      console.log(inputValue)\\\\n      if (inputValue.length >= 3) {\\\\n        const newOptions = [\\\\n          {\\\\n            label: inputValue + ' - Option 1',\\\\n            value: inputValue + '1',\\\\n            description: inputValue + ' - Option 1'\\\\n          },\\\\n          {\\\\n            label: inputValue + ' - Option 2',\\\\n            value: inputValue + '2',\\\\n            description: inputValue + ' - Option 2'\\\\n          }\\\\n        ]\\\\n        // setOptions(newOptions)\\\\n        callback(newOptions)\\\\n      } else {\\\\n        callback(options)\\\\n      }\\\\n    },\\\\n    []\\\\n  )\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box py='3em' bgColor='grey.50'>\\\\n        <div style={{ width: '350px' }}>\\\\n          <AsyncFormSelect\\\\n            loadOptions={handleLoadOptions}\\\\n            cacheOptions\\\\n            label={text('label', 'Postal Code')}\\\\n            required={boolean('required', false)}\\\\n            error={boolean('error', false)}\\\\n            errorMessage={text('errorMessage', 'Postal Code is required')}\\\\n            disabled={boolean('disabled', false)}\\\\n            showDescription={boolean('showDescription', false)}\\\\n          />\\\\n        </div>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const ListView = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'list-view') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          onChange={action('Value selected')}\\\\n          width={text('width', '120px')}\\\\n          disabled={boolean('disabled', false)}\\\\n          limitOptionsList={50}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\nexport const EditedListView = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'inline-edit') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          onChange={action('Value selected')}\\\\n          width={text('width', '100%')}\\\\n          disabled={boolean('disabled', false)}\\\\n          limitOptionsList={50}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\nexport const DashedDropdown = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'dashed-dropdown') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          onChange={action('Value selected')}\\\\n          width={text('width', '100%')}\\\\n          disabled={boolean('disabled', false)}\\\\n          value={text('value', '') as tSelectVariant}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/DropDown.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\n\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/molecules/DropDown\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"import { action } from '@storybook/addon-actions'\\\\nimport { boolean, object, text } from '@storybook/addon-knobs'\\\\nimport React from 'react'\\\\nimport DropDown from '.'\\\\nimport { path } from '..'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport Box from '../../atoms/Box'\\\\nimport { tSelectVariant } from './interface'\\\\n// import { InputActionMeta } from 'react-select'\\\\n// import AsyncSelect from 'react-select/async'\\\\nimport { OptionsType } from 'react-select'\\\\nimport AsyncFormSelect from './AsyncFormSelect'\\\\n\\\\nexport default {\\\\n  title: `${path}/DropDown`,\\\\n  component: DropDown\\\\n}\\\\n\\\\nconst options = [\\\\n  {\\\\n    value: 'emailVerificationPending',\\\\n    label: 'Email Verification Pending Shipper',\\\\n    title: 'Email Verification Pending Shipper'\\\\n  },\\\\n  { value: 'allShippers', label: 'All Shippers', title: 'All Shippers' },\\\\n  {\\\\n    value: 'approvalPendingShippers',\\\\n    label: 'Approval Pending Shippers',\\\\n    title: 'Approval Pending Shippers'\\\\n  }\\\\n]\\\\n\\\\nconst ListViewOption = [\\\\n  { value: 'Available', label: 'Available', title: 'Available' },\\\\n  { value: 'Dispatched', label: 'Dispatched', title: 'Dispatched' },\\\\n  { value: 'Inactive', label: 'Inactive', title: 'Inactive' }\\\\n]\\\\n\\\\nconst FormSelectOption = [\\\\n  {\\\\n    value: 'Credit',\\\\n    label: 'Credit',\\\\n    title: 'Credit',\\\\n    description:\\\\n      'Credit transaction will add to the outstanding amount of (Delivery Associate)'\\\\n  },\\\\n  {\\\\n    value: 'Debit',\\\\n    label: 'Debit',\\\\n    title: 'Debit',\\\\n    description:\\\\n      'Credit transaction will deduct from the outstanding amount of (Delivery Associate)'\\\\n  }\\\\n]\\\\nexport const DefaultSelect = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'default-select') as tSelectVariant}\\\\n          optionList={object('optionList', options)}\\\\n          label={text('label', 'Name')}\\\\n          required={boolean('required', true)}\\\\n          loading={boolean('loading', true)}\\\\n          onChange={action('Value selected')}\\\\n          error={boolean('error', false)}\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\n          placeholder={text('placeholder', 'Select')}\\\\n          value={text('value', 'chocolate')}\\\\n          width={text('width', '300px')}\\\\n          disabled={boolean('disabled', false)}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const FormSelectPlayground = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'form-select') as tSelectVariant}\\\\n          optionList={object('optionList', FormSelectOption)}\\\\n          label={text('label', 'Name')}\\\\n          required={boolean('required', true)}\\\\n          loading={boolean('loading', false)}\\\\n          onChange={action('Value selected')}\\\\n          error={boolean('error', false)}\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\n          placeholder={text('placeholder', 'Select')}\\\\n          value={text('value', 'emailVerificationPending')}\\\\n          width={text('width', '300px')}\\\\n          onMenuOpen={action('Menu Open')}\\\\n          onMenuClose={action('Menu Close')}\\\\n          showDescription={boolean('Show Description', true)}\\\\n          tooltipMessage={text('tooltipMessage', 'i am form select tooltip')}\\\\n          disabled={boolean('disabled', false)}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\nexport const FormSelectDeferred = () => {\\\\n  const [isLoading, setIsLoading] = React.useState<boolean>(false)\\\\n  const [menuIsOpen, setMenuIsOpen] = React.useState<boolean | undefined>(\\\\n    undefined\\\\n  )\\\\n  const [dropdownOptions, setDropdownOptions] = React.useState<\\\\n    { label: string; value: string }[]\\\\n  >([])\\\\n\\\\n  const [selectedValue, setSelectedValue] = React.useState<string>()\\\\n\\\\n  const handleMenuOpen = () => {\\\\n    action('Menu Opened!')()\\\\n    // setMenuIsOpen(true)\\\\n    if (dropdownOptions.length === 0) {\\\\n      setIsLoading(true)\\\\n      setTimeout(() => {\\\\n        setDropdownOptions(options)\\\\n        setIsLoading(false)\\\\n        setMenuIsOpen(true)\\\\n      }, 2000)\\\\n    }\\\\n  }\\\\n\\\\n  const handleMenuClose = () => {\\\\n    action('Menu Closed!')()\\\\n    setMenuIsOpen(undefined)\\\\n  }\\\\n\\\\n  const handleChange = (value?: string) => {\\\\n    action('Value selected')(value)\\\\n    setSelectedValue(value)\\\\n    setMenuIsOpen(undefined)\\\\n  }\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box py='3em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'form-select') as tSelectVariant}\\\\n          optionList={dropdownOptions}\\\\n          label={text('label', 'Name')}\\\\n          required={boolean('required', true)}\\\\n          loading={isLoading}\\\\n          onChange={handleChange}\\\\n          error={boolean('error', false)}\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\n          placeholder={text('placeholder', 'Select')}\\\\n          value={selectedValue}\\\\n          isMenuOpen={menuIsOpen}\\\\n          width={text('width', '300px')}\\\\n          onMenuOpen={handleMenuOpen}\\\\n          onMenuClose={handleMenuClose}\\\\n          onInputChange={action('onInputChange')}\\\\n          disabled={boolean('disabled', false)}\\\\n          limitOptionsList={50}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const FormSelectAsync = () => {\\\\n  // const [menuIsOpen, setMenuIsOpen] = React.useState<boolean>()\\\\n  const [options] = React.useState<OptionsType<any>>([])\\\\n  const handleLoadOptions = React.useCallback(\\\\n    (inputValue: string, callback: (options: OptionsType<any>) => void) => {\\\\n      console.log(inputValue)\\\\n      if (inputValue.length >= 3) {\\\\n        const newOptions = [\\\\n          {\\\\n            label: inputValue + ' - Option 1',\\\\n            value: inputValue + '1',\\\\n            description: inputValue + ' - Option 1'\\\\n          },\\\\n          {\\\\n            label: inputValue + ' - Option 2',\\\\n            value: inputValue + '2',\\\\n            description: inputValue + ' - Option 2'\\\\n          }\\\\n        ]\\\\n        // setOptions(newOptions)\\\\n        callback(newOptions)\\\\n      } else {\\\\n        callback(options)\\\\n      }\\\\n    },\\\\n    []\\\\n  )\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box py='3em' bgColor='grey.50'>\\\\n        <div style={{ width: '350px' }}>\\\\n          <AsyncFormSelect\\\\n            loadOptions={handleLoadOptions}\\\\n            cacheOptions\\\\n            label={text('label', 'Postal Code')}\\\\n            required={boolean('required', false)}\\\\n            error={boolean('error', false)}\\\\n            errorMessage={text('errorMessage', 'Postal Code is required')}\\\\n            disabled={boolean('disabled', false)}\\\\n            showDescription={boolean('showDescription', false)}\\\\n          />\\\\n        </div>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const ListView = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'list-view') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          onChange={action('Value selected')}\\\\n          width={text('width', '120px')}\\\\n          disabled={boolean('disabled', false)}\\\\n          limitOptionsList={50}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\nexport const EditedListView = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'inline-edit') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          onChange={action('Value selected')}\\\\n          width={text('width', '100%')}\\\\n          disabled={boolean('disabled', false)}\\\\n          limitOptionsList={50}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\nexport const DashedDropdown = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'dashed-dropdown') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          onChange={action('Value selected')}\\\\n          width={text('width', '100%')}\\\\n          disabled={boolean('disabled', false)}\\\\n          value={text('value', '') as tSelectVariant}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/DropDown.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\nimport { action } from '@storybook/addon-actions'\\nimport { boolean, object, text } from '@storybook/addon-knobs'\\nimport React from 'react'\\nimport DropDown from '.'\\nimport { path } from '..'\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\nimport Box from '../../atoms/Box'\\nimport { tSelectVariant } from './interface'\\n// import { InputActionMeta } from 'react-select'\\n// import AsyncSelect from 'react-select/async'\\nimport { OptionsType } from 'react-select'\\nimport AsyncFormSelect from './AsyncFormSelect'\\n\\nexport default {parameters: {\\\"storySource\\\":{\\\"source\\\":\\\"\\\\n\\\\n// @ts-nocheck\\\\n// @ts-ignore\\\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\\\n// @ts-ignore\\\\nvar addSourceDecorator = require(\\\\\\\"@storybook/source-loader/preview\\\\\\\").addSource;\\\\n// @ts-ignore\\\\nvar __SOURCE_PREFIX__ = \\\\\\\"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/molecules/DropDown\\\\\\\";\\\\n// @ts-ignore\\\\nvar __STORY__ = \\\\\\\"import { action } from '@storybook/addon-actions'\\\\\\\\nimport { boolean, object, text } from '@storybook/addon-knobs'\\\\\\\\nimport React from 'react'\\\\\\\\nimport DropDown from '.'\\\\\\\\nimport { path } from '..'\\\\\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\\\\\nimport Box from '../../atoms/Box'\\\\\\\\nimport { tSelectVariant } from './interface'\\\\\\\\n// import { InputActionMeta } from 'react-select'\\\\\\\\n// import AsyncSelect from 'react-select/async'\\\\\\\\nimport { OptionsType } from 'react-select'\\\\\\\\nimport AsyncFormSelect from './AsyncFormSelect'\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/DropDown`,\\\\\\\\n  component: DropDown\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst options = [\\\\\\\\n  {\\\\\\\\n    value: 'emailVerificationPending',\\\\\\\\n    label: 'Email Verification Pending Shipper',\\\\\\\\n    title: 'Email Verification Pending Shipper'\\\\\\\\n  },\\\\\\\\n  { value: 'allShippers', label: 'All Shippers', title: 'All Shippers' },\\\\\\\\n  {\\\\\\\\n    value: 'approvalPendingShippers',\\\\\\\\n    label: 'Approval Pending Shippers',\\\\\\\\n    title: 'Approval Pending Shippers'\\\\\\\\n  }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst ListViewOption = [\\\\\\\\n  { value: 'Available', label: 'Available', title: 'Available' },\\\\\\\\n  { value: 'Dispatched', label: 'Dispatched', title: 'Dispatched' },\\\\\\\\n  { value: 'Inactive', label: 'Inactive', title: 'Inactive' }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst FormSelectOption = [\\\\\\\\n  {\\\\\\\\n    value: 'Credit',\\\\\\\\n    label: 'Credit',\\\\\\\\n    title: 'Credit',\\\\\\\\n    description:\\\\\\\\n      'Credit transaction will add to the outstanding amount of (Delivery Associate)'\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    value: 'Debit',\\\\\\\\n    label: 'Debit',\\\\\\\\n    title: 'Debit',\\\\\\\\n    description:\\\\\\\\n      'Credit transaction will deduct from the outstanding amount of (Delivery Associate)'\\\\\\\\n  }\\\\\\\\n]\\\\\\\\nexport const DefaultSelect = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='6em' bgColor='grey.50'>\\\\\\\\n        <DropDown\\\\\\\\n          variant={text('variant', 'default-select') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', options)}\\\\\\\\n          label={text('label', 'Name')}\\\\\\\\n          required={boolean('required', true)}\\\\\\\\n          loading={boolean('loading', true)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          error={boolean('error', false)}\\\\\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\\\\\n          placeholder={text('placeholder', 'Select')}\\\\\\\\n          value={text('value', 'chocolate')}\\\\\\\\n          width={text('width', '300px')}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const FormSelectPlayground = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='6em' bgColor='grey.50'>\\\\\\\\n        <DropDown\\\\\\\\n          variant={text('variant', 'form-select') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', FormSelectOption)}\\\\\\\\n          label={text('label', 'Name')}\\\\\\\\n          required={boolean('required', true)}\\\\\\\\n          loading={boolean('loading', false)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          error={boolean('error', false)}\\\\\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\\\\\n          placeholder={text('placeholder', 'Select')}\\\\\\\\n          value={text('value', 'emailVerificationPending')}\\\\\\\\n          width={text('width', '300px')}\\\\\\\\n          onMenuOpen={action('Menu Open')}\\\\\\\\n          onMenuClose={action('Menu Close')}\\\\\\\\n          showDescription={boolean('Show Description', true)}\\\\\\\\n          tooltipMessage={text('tooltipMessage', 'i am form select tooltip')}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\nexport const FormSelectDeferred = () => {\\\\\\\\n  const [isLoading, setIsLoading] = React.useState<boolean>(false)\\\\\\\\n  const [menuIsOpen, setMenuIsOpen] = React.useState<boolean | undefined>(\\\\\\\\n    undefined\\\\\\\\n  )\\\\\\\\n  const [dropdownOptions, setDropdownOptions] = React.useState<\\\\\\\\n    { label: string; value: string }[]\\\\\\\\n  >([])\\\\\\\\n\\\\\\\\n  const [selectedValue, setSelectedValue] = React.useState<string>()\\\\\\\\n\\\\\\\\n  const handleMenuOpen = () => {\\\\\\\\n    action('Menu Opened!')()\\\\\\\\n    // setMenuIsOpen(true)\\\\\\\\n    if (dropdownOptions.length === 0) {\\\\\\\\n      setIsLoading(true)\\\\\\\\n      setTimeout(() => {\\\\\\\\n        setDropdownOptions(options)\\\\\\\\n        setIsLoading(false)\\\\\\\\n        setMenuIsOpen(true)\\\\\\\\n      }, 2000)\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  const handleMenuClose = () => {\\\\\\\\n    action('Menu Closed!')()\\\\\\\\n    setMenuIsOpen(undefined)\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  const handleChange = (value?: string) => {\\\\\\\\n    action('Value selected')(value)\\\\\\\\n    setSelectedValue(value)\\\\\\\\n    setMenuIsOpen(undefined)\\\\\\\\n  }\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box py='3em' bgColor='grey.50'>\\\\\\\\n        <DropDown\\\\\\\\n          variant={text('variant', 'form-select') as tSelectVariant}\\\\\\\\n          optionList={dropdownOptions}\\\\\\\\n          label={text('label', 'Name')}\\\\\\\\n          required={boolean('required', true)}\\\\\\\\n          loading={isLoading}\\\\\\\\n          onChange={handleChange}\\\\\\\\n          error={boolean('error', false)}\\\\\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\\\\\n          placeholder={text('placeholder', 'Select')}\\\\\\\\n          value={selectedValue}\\\\\\\\n          isMenuOpen={menuIsOpen}\\\\\\\\n          width={text('width', '300px')}\\\\\\\\n          onMenuOpen={handleMenuOpen}\\\\\\\\n          onMenuClose={handleMenuClose}\\\\\\\\n          onInputChange={action('onInputChange')}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n          limitOptionsList={50}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const FormSelectAsync = () => {\\\\\\\\n  // const [menuIsOpen, setMenuIsOpen] = React.useState<boolean>()\\\\\\\\n  const [options] = React.useState<OptionsType<any>>([])\\\\\\\\n  const handleLoadOptions = React.useCallback(\\\\\\\\n    (inputValue: string, callback: (options: OptionsType<any>) => void) => {\\\\\\\\n      console.log(inputValue)\\\\\\\\n      if (inputValue.length >= 3) {\\\\\\\\n        const newOptions = [\\\\\\\\n          {\\\\\\\\n            label: inputValue + ' - Option 1',\\\\\\\\n            value: inputValue + '1',\\\\\\\\n            description: inputValue + ' - Option 1'\\\\\\\\n          },\\\\\\\\n          {\\\\\\\\n            label: inputValue + ' - Option 2',\\\\\\\\n            value: inputValue + '2',\\\\\\\\n            description: inputValue + ' - Option 2'\\\\\\\\n          }\\\\\\\\n        ]\\\\\\\\n        // setOptions(newOptions)\\\\\\\\n        callback(newOptions)\\\\\\\\n      } else {\\\\\\\\n        callback(options)\\\\\\\\n      }\\\\\\\\n    },\\\\\\\\n    []\\\\\\\\n  )\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box py='3em' bgColor='grey.50'>\\\\\\\\n        <div style={{ width: '350px' }}>\\\\\\\\n          <AsyncFormSelect\\\\\\\\n            loadOptions={handleLoadOptions}\\\\\\\\n            cacheOptions\\\\\\\\n            label={text('label', 'Postal Code')}\\\\\\\\n            required={boolean('required', false)}\\\\\\\\n            error={boolean('error', false)}\\\\\\\\n            errorMessage={text('errorMessage', 'Postal Code is required')}\\\\\\\\n            disabled={boolean('disabled', false)}\\\\\\\\n            showDescription={boolean('showDescription', false)}\\\\\\\\n          />\\\\\\\\n        </div>\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const ListView = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='6em' bgColor='grey.50'>\\\\\\\\n        <DropDown\\\\\\\\n          variant={text('variant', 'list-view') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', ListViewOption)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          width={text('width', '120px')}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n          limitOptionsList={50}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\nexport const EditedListView = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='6em' bgColor='grey.50'>\\\\\\\\n        <DropDown\\\\\\\\n          variant={text('variant', 'inline-edit') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', ListViewOption)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          width={text('width', '100%')}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n          limitOptionsList={50}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\nexport const DashedDropdown = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='6em' bgColor='grey.50'>\\\\\\\\n        <DropDown\\\\\\\\n          variant={text('variant', 'dashed-dropdown') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', ListViewOption)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          width={text('width', '100%')}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n          value={text('value', '') as tSelectVariant}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\";\\\\n// @ts-ignore\\\\nvar __ADDS_MAP__ = {};\\\\n// @ts-ignore\\\\nvar __MAIN_FILE_LOCATION__ = \\\\\\\"/DropDown.stories.tsx\\\\\\\";\\\\n// @ts-ignore\\\\nvar __MODULE_DEPENDENCIES__ = [];\\\\n// @ts-ignore\\\\nvar __LOCAL_DEPENDENCIES__ = {};\\\\n// @ts-ignore\\\\nvar __IDS_TO_FRAMEWORKS__ = {};\\\\n        \\\\nimport { action } from '@storybook/addon-actions'\\\\nimport { boolean, object, text } from '@storybook/addon-knobs'\\\\nimport React from 'react'\\\\nimport DropDown from '.'\\\\nimport { path } from '..'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport Box from '../../atoms/Box'\\\\nimport { tSelectVariant } from './interface'\\\\n// import { InputActionMeta } from 'react-select'\\\\n// import AsyncSelect from 'react-select/async'\\\\nimport { OptionsType } from 'react-select'\\\\nimport AsyncFormSelect from './AsyncFormSelect'\\\\n\\\\nexport default {parameters: {\\\\\\\"storySource\\\\\\\":{\\\\\\\"source\\\\\\\":\\\\\\\"import { action } from '@storybook/addon-actions'\\\\\\\\nimport { boolean, object, text } from '@storybook/addon-knobs'\\\\\\\\nimport React from 'react'\\\\\\\\nimport DropDown from '.'\\\\\\\\nimport { path } from '..'\\\\\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\\\\\nimport Box from '../../atoms/Box'\\\\\\\\nimport { tSelectVariant } from './interface'\\\\\\\\n// import { InputActionMeta } from 'react-select'\\\\\\\\n// import AsyncSelect from 'react-select/async'\\\\\\\\nimport { OptionsType } from 'react-select'\\\\\\\\nimport AsyncFormSelect from './AsyncFormSelect'\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/DropDown`,\\\\\\\\n  component: DropDown\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst options = [\\\\\\\\n  {\\\\\\\\n    value: 'emailVerificationPending',\\\\\\\\n    label: 'Email Verification Pending Shipper',\\\\\\\\n    title: 'Email Verification Pending Shipper'\\\\\\\\n  },\\\\\\\\n  { value: 'allShippers', label: 'All Shippers', title: 'All Shippers' },\\\\\\\\n  {\\\\\\\\n    value: 'approvalPendingShippers',\\\\\\\\n    label: 'Approval Pending Shippers',\\\\\\\\n    title: 'Approval Pending Shippers'\\\\\\\\n  }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst ListViewOption = [\\\\\\\\n  { value: 'Available', label: 'Available', title: 'Available' },\\\\\\\\n  { value: 'Dispatched', label: 'Dispatched', title: 'Dispatched' },\\\\\\\\n  { value: 'Inactive', label: 'Inactive', title: 'Inactive' }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst FormSelectOption = [\\\\\\\\n  {\\\\\\\\n    value: 'Credit',\\\\\\\\n    label: 'Credit',\\\\\\\\n    title: 'Credit',\\\\\\\\n    description:\\\\\\\\n      'Credit transaction will add to the outstanding amount of (Delivery Associate)'\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    value: 'Debit',\\\\\\\\n    label: 'Debit',\\\\\\\\n    title: 'Debit',\\\\\\\\n    description:\\\\\\\\n      'Credit transaction will deduct from the outstanding amount of (Delivery Associate)'\\\\\\\\n  }\\\\\\\\n]\\\\\\\\nexport const DefaultSelect = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='6em' bgColor='grey.50'>\\\\\\\\n        <DropDown\\\\\\\\n          variant={text('variant', 'default-select') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', options)}\\\\\\\\n          label={text('label', 'Name')}\\\\\\\\n          required={boolean('required', true)}\\\\\\\\n          loading={boolean('loading', true)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          error={boolean('error', false)}\\\\\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\\\\\n          placeholder={text('placeholder', 'Select')}\\\\\\\\n          value={text('value', 'chocolate')}\\\\\\\\n          width={text('width', '300px')}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const FormSelectPlayground = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='6em' bgColor='grey.50'>\\\\\\\\n        <DropDown\\\\\\\\n          variant={text('variant', 'form-select') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', FormSelectOption)}\\\\\\\\n          label={text('label', 'Name')}\\\\\\\\n          required={boolean('required', true)}\\\\\\\\n          loading={boolean('loading', false)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          error={boolean('error', false)}\\\\\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\\\\\n          placeholder={text('placeholder', 'Select')}\\\\\\\\n          value={text('value', 'emailVerificationPending')}\\\\\\\\n          width={text('width', '300px')}\\\\\\\\n          onMenuOpen={action('Menu Open')}\\\\\\\\n          onMenuClose={action('Menu Close')}\\\\\\\\n          showDescription={boolean('Show Description', true)}\\\\\\\\n          tooltipMessage={text('tooltipMessage', 'i am form select tooltip')}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\nexport const FormSelectDeferred = () => {\\\\\\\\n  const [isLoading, setIsLoading] = React.useState<boolean>(false)\\\\\\\\n  const [menuIsOpen, setMenuIsOpen] = React.useState<boolean | undefined>(\\\\\\\\n    undefined\\\\\\\\n  )\\\\\\\\n  const [dropdownOptions, setDropdownOptions] = React.useState<\\\\\\\\n    { label: string; value: string }[]\\\\\\\\n  >([])\\\\\\\\n\\\\\\\\n  const [selectedValue, setSelectedValue] = React.useState<string>()\\\\\\\\n\\\\\\\\n  const handleMenuOpen = () => {\\\\\\\\n    action('Menu Opened!')()\\\\\\\\n    // setMenuIsOpen(true)\\\\\\\\n    if (dropdownOptions.length === 0) {\\\\\\\\n      setIsLoading(true)\\\\\\\\n      setTimeout(() => {\\\\\\\\n        setDropdownOptions(options)\\\\\\\\n        setIsLoading(false)\\\\\\\\n        setMenuIsOpen(true)\\\\\\\\n      }, 2000)\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  const handleMenuClose = () => {\\\\\\\\n    action('Menu Closed!')()\\\\\\\\n    setMenuIsOpen(undefined)\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  const handleChange = (value?: string) => {\\\\\\\\n    action('Value selected')(value)\\\\\\\\n    setSelectedValue(value)\\\\\\\\n    setMenuIsOpen(undefined)\\\\\\\\n  }\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box py='3em' bgColor='grey.50'>\\\\\\\\n        <DropDown\\\\\\\\n          variant={text('variant', 'form-select') as tSelectVariant}\\\\\\\\n          optionList={dropdownOptions}\\\\\\\\n          label={text('label', 'Name')}\\\\\\\\n          required={boolean('required', true)}\\\\\\\\n          loading={isLoading}\\\\\\\\n          onChange={handleChange}\\\\\\\\n          error={boolean('error', false)}\\\\\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\\\\\n          placeholder={text('placeholder', 'Select')}\\\\\\\\n          value={selectedValue}\\\\\\\\n          isMenuOpen={menuIsOpen}\\\\\\\\n          width={text('width', '300px')}\\\\\\\\n          onMenuOpen={handleMenuOpen}\\\\\\\\n          onMenuClose={handleMenuClose}\\\\\\\\n          onInputChange={action('onInputChange')}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n          limitOptionsList={50}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const FormSelectAsync = () => {\\\\\\\\n  // const [menuIsOpen, setMenuIsOpen] = React.useState<boolean>()\\\\\\\\n  const [options] = React.useState<OptionsType<any>>([])\\\\\\\\n  const handleLoadOptions = React.useCallback(\\\\\\\\n    (inputValue: string, callback: (options: OptionsType<any>) => void) => {\\\\\\\\n      console.log(inputValue)\\\\\\\\n      if (inputValue.length >= 3) {\\\\\\\\n        const newOptions = [\\\\\\\\n          {\\\\\\\\n            label: inputValue + ' - Option 1',\\\\\\\\n            value: inputValue + '1',\\\\\\\\n            description: inputValue + ' - Option 1'\\\\\\\\n          },\\\\\\\\n          {\\\\\\\\n            label: inputValue + ' - Option 2',\\\\\\\\n            value: inputValue + '2',\\\\\\\\n            description: inputValue + ' - Option 2'\\\\\\\\n          }\\\\\\\\n        ]\\\\\\\\n        // setOptions(newOptions)\\\\\\\\n        callback(newOptions)\\\\\\\\n      } else {\\\\\\\\n        callback(options)\\\\\\\\n      }\\\\\\\\n    },\\\\\\\\n    []\\\\\\\\n  )\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box py='3em' bgColor='grey.50'>\\\\\\\\n        <div style={{ width: '350px' }}>\\\\\\\\n          <AsyncFormSelect\\\\\\\\n            loadOptions={handleLoadOptions}\\\\\\\\n            cacheOptions\\\\\\\\n            label={text('label', 'Postal Code')}\\\\\\\\n            required={boolean('required', false)}\\\\\\\\n            error={boolean('error', false)}\\\\\\\\n            errorMessage={text('errorMessage', 'Postal Code is required')}\\\\\\\\n            disabled={boolean('disabled', false)}\\\\\\\\n            showDescription={boolean('showDescription', false)}\\\\\\\\n          />\\\\\\\\n        </div>\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const ListView = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='6em' bgColor='grey.50'>\\\\\\\\n        <DropDown\\\\\\\\n          variant={text('variant', 'list-view') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', ListViewOption)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          width={text('width', '120px')}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n          limitOptionsList={50}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\nexport const EditedListView = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='6em' bgColor='grey.50'>\\\\\\\\n        <DropDown\\\\\\\\n          variant={text('variant', 'inline-edit') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', ListViewOption)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          width={text('width', '100%')}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n          limitOptionsList={50}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\nexport const DashedDropdown = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='6em' bgColor='grey.50'>\\\\\\\\n        <DropDown\\\\\\\\n          variant={text('variant', 'dashed-dropdown') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', ListViewOption)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          width={text('width', '100%')}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n          value={text('value', '') as tSelectVariant}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\",\\\\\\\"locationsMap\\\\\\\":{}},},\\\\n  title: `${path}/DropDown`,\\\\n  component: DropDown\\\\n}\\\\n\\\\nconst options = [\\\\n  {\\\\n    value: 'emailVerificationPending',\\\\n    label: 'Email Verification Pending Shipper',\\\\n    title: 'Email Verification Pending Shipper'\\\\n  },\\\\n  { value: 'allShippers', label: 'All Shippers', title: 'All Shippers' },\\\\n  {\\\\n    value: 'approvalPendingShippers',\\\\n    label: 'Approval Pending Shippers',\\\\n    title: 'Approval Pending Shippers'\\\\n  }\\\\n]\\\\n\\\\nconst ListViewOption = [\\\\n  { value: 'Available', label: 'Available', title: 'Available' },\\\\n  { value: 'Dispatched', label: 'Dispatched', title: 'Dispatched' },\\\\n  { value: 'Inactive', label: 'Inactive', title: 'Inactive' }\\\\n]\\\\n\\\\nconst FormSelectOption = [\\\\n  {\\\\n    value: 'Credit',\\\\n    label: 'Credit',\\\\n    title: 'Credit',\\\\n    description:\\\\n      'Credit transaction will add to the outstanding amount of (Delivery Associate)'\\\\n  },\\\\n  {\\\\n    value: 'Debit',\\\\n    label: 'Debit',\\\\n    title: 'Debit',\\\\n    description:\\\\n      'Credit transaction will deduct from the outstanding amount of (Delivery Associate)'\\\\n  }\\\\n]\\\\nexport const DefaultSelect = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'default-select') as tSelectVariant}\\\\n          optionList={object('optionList', options)}\\\\n          label={text('label', 'Name')}\\\\n          required={boolean('required', true)}\\\\n          loading={boolean('loading', true)}\\\\n          onChange={action('Value selected')}\\\\n          error={boolean('error', false)}\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\n          placeholder={text('placeholder', 'Select')}\\\\n          value={text('value', 'chocolate')}\\\\n          width={text('width', '300px')}\\\\n          disabled={boolean('disabled', false)}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const FormSelectPlayground = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'form-select') as tSelectVariant}\\\\n          optionList={object('optionList', FormSelectOption)}\\\\n          label={text('label', 'Name')}\\\\n          required={boolean('required', true)}\\\\n          loading={boolean('loading', false)}\\\\n          onChange={action('Value selected')}\\\\n          error={boolean('error', false)}\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\n          placeholder={text('placeholder', 'Select')}\\\\n          value={text('value', 'emailVerificationPending')}\\\\n          width={text('width', '300px')}\\\\n          onMenuOpen={action('Menu Open')}\\\\n          onMenuClose={action('Menu Close')}\\\\n          showDescription={boolean('Show Description', true)}\\\\n          tooltipMessage={text('tooltipMessage', 'i am form select tooltip')}\\\\n          disabled={boolean('disabled', false)}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\nexport const FormSelectDeferred = addSourceDecorator(() => {\\\\n  const [isLoading, setIsLoading] = React.useState<boolean>(false)\\\\n  const [menuIsOpen, setMenuIsOpen] = React.useState<boolean | undefined>(\\\\n    undefined\\\\n  )\\\\n  const [dropdownOptions, setDropdownOptions] = React.useState<\\\\n    { label: string; value: string }[]\\\\n  >([])\\\\n\\\\n  const [selectedValue, setSelectedValue] = React.useState<string>()\\\\n\\\\n  const handleMenuOpen = () => {\\\\n    action('Menu Opened!')()\\\\n    // setMenuIsOpen(true)\\\\n    if (dropdownOptions.length === 0) {\\\\n      setIsLoading(true)\\\\n      setTimeout(() => {\\\\n        setDropdownOptions(options)\\\\n        setIsLoading(false)\\\\n        setMenuIsOpen(true)\\\\n      }, 2000)\\\\n    }\\\\n  }\\\\n\\\\n  const handleMenuClose = () => {\\\\n    action('Menu Closed!')()\\\\n    setMenuIsOpen(undefined)\\\\n  }\\\\n\\\\n  const handleChange = (value?: string) => {\\\\n    action('Value selected')(value)\\\\n    setSelectedValue(value)\\\\n    setMenuIsOpen(undefined)\\\\n  }\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box py='3em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'form-select') as tSelectVariant}\\\\n          optionList={dropdownOptions}\\\\n          label={text('label', 'Name')}\\\\n          required={boolean('required', true)}\\\\n          loading={isLoading}\\\\n          onChange={handleChange}\\\\n          error={boolean('error', false)}\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\n          placeholder={text('placeholder', 'Select')}\\\\n          value={selectedValue}\\\\n          isMenuOpen={menuIsOpen}\\\\n          width={text('width', '300px')}\\\\n          onMenuOpen={handleMenuOpen}\\\\n          onMenuClose={handleMenuClose}\\\\n          onInputChange={action('onInputChange')}\\\\n          disabled={boolean('disabled', false)}\\\\n          limitOptionsList={50}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const FormSelectAsync = addSourceDecorator(() => {\\\\n  // const [menuIsOpen, setMenuIsOpen] = React.useState<boolean>()\\\\n  const [options] = React.useState<OptionsType<any>>([])\\\\n  const handleLoadOptions = React.useCallback(\\\\n    (inputValue: string, callback: (options: OptionsType<any>) => void) => {\\\\n      console.log(inputValue)\\\\n      if (inputValue.length >= 3) {\\\\n        const newOptions = [\\\\n          {\\\\n            label: inputValue + ' - Option 1',\\\\n            value: inputValue + '1',\\\\n            description: inputValue + ' - Option 1'\\\\n          },\\\\n          {\\\\n            label: inputValue + ' - Option 2',\\\\n            value: inputValue + '2',\\\\n            description: inputValue + ' - Option 2'\\\\n          }\\\\n        ]\\\\n        // setOptions(newOptions)\\\\n        callback(newOptions)\\\\n      } else {\\\\n        callback(options)\\\\n      }\\\\n    },\\\\n    []\\\\n  )\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box py='3em' bgColor='grey.50'>\\\\n        <div style={{ width: '350px' }}>\\\\n          <AsyncFormSelect\\\\n            loadOptions={handleLoadOptions}\\\\n            cacheOptions\\\\n            label={text('label', 'Postal Code')}\\\\n            required={boolean('required', false)}\\\\n            error={boolean('error', false)}\\\\n            errorMessage={text('errorMessage', 'Postal Code is required')}\\\\n            disabled={boolean('disabled', false)}\\\\n            showDescription={boolean('showDescription', false)}\\\\n          />\\\\n        </div>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const ListView = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'list-view') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          onChange={action('Value selected')}\\\\n          width={text('width', '120px')}\\\\n          disabled={boolean('disabled', false)}\\\\n          limitOptionsList={50}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\nexport const EditedListView = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'inline-edit') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          onChange={action('Value selected')}\\\\n          width={text('width', '100%')}\\\\n          disabled={boolean('disabled', false)}\\\\n          limitOptionsList={50}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\nexport const DashedDropdown = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'dashed-dropdown') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          onChange={action('Value selected')}\\\\n          width={text('width', '100%')}\\\\n          disabled={boolean('disabled', false)}\\\\n          value={text('value', '') as tSelectVariant}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\",\\\"locationsMap\\\":{}},\\\"storySource\\\":{\\\"source\\\":\\\"import { action } from '@storybook/addon-actions'\\\\nimport { boolean, object, text } from '@storybook/addon-knobs'\\\\nimport React from 'react'\\\\nimport DropDown from '.'\\\\nimport { path } from '..'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport Box from '../../atoms/Box'\\\\nimport { tSelectVariant } from './interface'\\\\n// import { InputActionMeta } from 'react-select'\\\\n// import AsyncSelect from 'react-select/async'\\\\nimport { OptionsType } from 'react-select'\\\\nimport AsyncFormSelect from './AsyncFormSelect'\\\\n\\\\nexport default {\\\\n  title: `${path}/DropDown`,\\\\n  component: DropDown\\\\n}\\\\n\\\\nconst options = [\\\\n  {\\\\n    value: 'emailVerificationPending',\\\\n    label: 'Email Verification Pending Shipper',\\\\n    title: 'Email Verification Pending Shipper'\\\\n  },\\\\n  { value: 'allShippers', label: 'All Shippers', title: 'All Shippers' },\\\\n  {\\\\n    value: 'approvalPendingShippers',\\\\n    label: 'Approval Pending Shippers',\\\\n    title: 'Approval Pending Shippers'\\\\n  }\\\\n]\\\\n\\\\nconst ListViewOption = [\\\\n  { value: 'Available', label: 'Available', title: 'Available' },\\\\n  { value: 'Dispatched', label: 'Dispatched', title: 'Dispatched' },\\\\n  { value: 'Inactive', label: 'Inactive', title: 'Inactive' }\\\\n]\\\\n\\\\nconst FormSelectOption = [\\\\n  {\\\\n    value: 'Credit',\\\\n    label: 'Credit',\\\\n    title: 'Credit',\\\\n    description:\\\\n      'Credit transaction will add to the outstanding amount of (Delivery Associate)'\\\\n  },\\\\n  {\\\\n    value: 'Debit',\\\\n    label: 'Debit',\\\\n    title: 'Debit',\\\\n    description:\\\\n      'Credit transaction will deduct from the outstanding amount of (Delivery Associate)'\\\\n  }\\\\n]\\\\nexport const DefaultSelect = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'default-select') as tSelectVariant}\\\\n          optionList={object('optionList', options)}\\\\n          label={text('label', 'Name')}\\\\n          required={boolean('required', true)}\\\\n          loading={boolean('loading', true)}\\\\n          onChange={action('Value selected')}\\\\n          error={boolean('error', false)}\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\n          placeholder={text('placeholder', 'Select')}\\\\n          value={text('value', 'chocolate')}\\\\n          width={text('width', '300px')}\\\\n          disabled={boolean('disabled', false)}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const FormSelectPlayground = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'form-select') as tSelectVariant}\\\\n          optionList={object('optionList', FormSelectOption)}\\\\n          label={text('label', 'Name')}\\\\n          required={boolean('required', true)}\\\\n          loading={boolean('loading', false)}\\\\n          onChange={action('Value selected')}\\\\n          error={boolean('error', false)}\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\n          placeholder={text('placeholder', 'Select')}\\\\n          value={text('value', 'emailVerificationPending')}\\\\n          width={text('width', '300px')}\\\\n          onMenuOpen={action('Menu Open')}\\\\n          onMenuClose={action('Menu Close')}\\\\n          showDescription={boolean('Show Description', true)}\\\\n          tooltipMessage={text('tooltipMessage', 'i am form select tooltip')}\\\\n          disabled={boolean('disabled', false)}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\nexport const FormSelectDeferred = () => {\\\\n  const [isLoading, setIsLoading] = React.useState<boolean>(false)\\\\n  const [menuIsOpen, setMenuIsOpen] = React.useState<boolean | undefined>(\\\\n    undefined\\\\n  )\\\\n  const [dropdownOptions, setDropdownOptions] = React.useState<\\\\n    { label: string; value: string }[]\\\\n  >([])\\\\n\\\\n  const [selectedValue, setSelectedValue] = React.useState<string>()\\\\n\\\\n  const handleMenuOpen = () => {\\\\n    action('Menu Opened!')()\\\\n    // setMenuIsOpen(true)\\\\n    if (dropdownOptions.length === 0) {\\\\n      setIsLoading(true)\\\\n      setTimeout(() => {\\\\n        setDropdownOptions(options)\\\\n        setIsLoading(false)\\\\n        setMenuIsOpen(true)\\\\n      }, 2000)\\\\n    }\\\\n  }\\\\n\\\\n  const handleMenuClose = () => {\\\\n    action('Menu Closed!')()\\\\n    setMenuIsOpen(undefined)\\\\n  }\\\\n\\\\n  const handleChange = (value?: string) => {\\\\n    action('Value selected')(value)\\\\n    setSelectedValue(value)\\\\n    setMenuIsOpen(undefined)\\\\n  }\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box py='3em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'form-select') as tSelectVariant}\\\\n          optionList={dropdownOptions}\\\\n          label={text('label', 'Name')}\\\\n          required={boolean('required', true)}\\\\n          loading={isLoading}\\\\n          onChange={handleChange}\\\\n          error={boolean('error', false)}\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\n          placeholder={text('placeholder', 'Select')}\\\\n          value={selectedValue}\\\\n          isMenuOpen={menuIsOpen}\\\\n          width={text('width', '300px')}\\\\n          onMenuOpen={handleMenuOpen}\\\\n          onMenuClose={handleMenuClose}\\\\n          onInputChange={action('onInputChange')}\\\\n          disabled={boolean('disabled', false)}\\\\n          limitOptionsList={50}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const FormSelectAsync = () => {\\\\n  // const [menuIsOpen, setMenuIsOpen] = React.useState<boolean>()\\\\n  const [options] = React.useState<OptionsType<any>>([])\\\\n  const handleLoadOptions = React.useCallback(\\\\n    (inputValue: string, callback: (options: OptionsType<any>) => void) => {\\\\n      console.log(inputValue)\\\\n      if (inputValue.length >= 3) {\\\\n        const newOptions = [\\\\n          {\\\\n            label: inputValue + ' - Option 1',\\\\n            value: inputValue + '1',\\\\n            description: inputValue + ' - Option 1'\\\\n          },\\\\n          {\\\\n            label: inputValue + ' - Option 2',\\\\n            value: inputValue + '2',\\\\n            description: inputValue + ' - Option 2'\\\\n          }\\\\n        ]\\\\n        // setOptions(newOptions)\\\\n        callback(newOptions)\\\\n      } else {\\\\n        callback(options)\\\\n      }\\\\n    },\\\\n    []\\\\n  )\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box py='3em' bgColor='grey.50'>\\\\n        <div style={{ width: '350px' }}>\\\\n          <AsyncFormSelect\\\\n            loadOptions={handleLoadOptions}\\\\n            cacheOptions\\\\n            label={text('label', 'Postal Code')}\\\\n            required={boolean('required', false)}\\\\n            error={boolean('error', false)}\\\\n            errorMessage={text('errorMessage', 'Postal Code is required')}\\\\n            disabled={boolean('disabled', false)}\\\\n            showDescription={boolean('showDescription', false)}\\\\n          />\\\\n        </div>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const ListView = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'list-view') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          onChange={action('Value selected')}\\\\n          width={text('width', '120px')}\\\\n          disabled={boolean('disabled', false)}\\\\n          limitOptionsList={50}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\nexport const EditedListView = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'inline-edit') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          onChange={action('Value selected')}\\\\n          width={text('width', '100%')}\\\\n          disabled={boolean('disabled', false)}\\\\n          limitOptionsList={50}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\nexport const DashedDropdown = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'dashed-dropdown') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          onChange={action('Value selected')}\\\\n          width={text('width', '100%')}\\\\n          disabled={boolean('disabled', false)}\\\\n          value={text('value', '') as tSelectVariant}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\",\\\"locationsMap\\\":{}},},\\n  title: `${path}/DropDown`,\\n  component: DropDown\\n}\\n\\nconst options = [\\n  {\\n    value: 'emailVerificationPending',\\n    label: 'Email Verification Pending Shipper',\\n    title: 'Email Verification Pending Shipper'\\n  },\\n  { value: 'allShippers', label: 'All Shippers', title: 'All Shippers' },\\n  {\\n    value: 'approvalPendingShippers',\\n    label: 'Approval Pending Shippers',\\n    title: 'Approval Pending Shippers'\\n  }\\n]\\n\\nconst ListViewOption = [\\n  { value: 'Available', label: 'Available', title: 'Available' },\\n  { value: 'Dispatched', label: 'Dispatched', title: 'Dispatched' },\\n  { value: 'Inactive', label: 'Inactive', title: 'Inactive' }\\n]\\n\\nconst FormSelectOption = [\\n  {\\n    value: 'Credit',\\n    label: 'Credit',\\n    title: 'Credit',\\n    description:\\n      'Credit transaction will add to the outstanding amount of (Delivery Associate)'\\n  },\\n  {\\n    value: 'Debit',\\n    label: 'Debit',\\n    title: 'Debit',\\n    description:\\n      'Credit transaction will deduct from the outstanding amount of (Delivery Associate)'\\n  }\\n]\\nexport const DefaultSelect = addSourceDecorator(addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='6em' bgColor='grey.50'>\\n        <DropDown\\n          variant={text('variant', 'default-select') as tSelectVariant}\\n          optionList={object('optionList', options)}\\n          label={text('label', 'Name')}\\n          required={boolean('required', true)}\\n          loading={boolean('loading', true)}\\n          onChange={action('Value selected')}\\n          error={boolean('error', false)}\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\n          placeholder={text('placeholder', 'Select')}\\n          value={text('value', 'chocolate')}\\n          width={text('width', '300px')}\\n          disabled={boolean('disabled', false)}\\n        />\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const FormSelectPlayground = addSourceDecorator(addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='6em' bgColor='grey.50'>\\n        <DropDown\\n          variant={text('variant', 'form-select') as tSelectVariant}\\n          optionList={object('optionList', FormSelectOption)}\\n          label={text('label', 'Name')}\\n          required={boolean('required', true)}\\n          loading={boolean('loading', false)}\\n          onChange={action('Value selected')}\\n          error={boolean('error', false)}\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\n          placeholder={text('placeholder', 'Select')}\\n          value={text('value', 'emailVerificationPending')}\\n          width={text('width', '300px')}\\n          onMenuOpen={action('Menu Open')}\\n          onMenuClose={action('Menu Close')}\\n          showDescription={boolean('Show Description', true)}\\n          tooltipMessage={text('tooltipMessage', 'i am form select tooltip')}\\n          disabled={boolean('disabled', false)}\\n        />\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\nexport const FormSelectDeferred = addSourceDecorator(addSourceDecorator(() => {\\n  const [isLoading, setIsLoading] = React.useState<boolean>(false)\\n  const [menuIsOpen, setMenuIsOpen] = React.useState<boolean | undefined>(\\n    undefined\\n  )\\n  const [dropdownOptions, setDropdownOptions] = React.useState<\\n    { label: string; value: string }[]\\n  >([])\\n\\n  const [selectedValue, setSelectedValue] = React.useState<string>()\\n\\n  const handleMenuOpen = () => {\\n    action('Menu Opened!')()\\n    // setMenuIsOpen(true)\\n    if (dropdownOptions.length === 0) {\\n      setIsLoading(true)\\n      setTimeout(() => {\\n        setDropdownOptions(options)\\n        setIsLoading(false)\\n        setMenuIsOpen(true)\\n      }, 2000)\\n    }\\n  }\\n\\n  const handleMenuClose = () => {\\n    action('Menu Closed!')()\\n    setMenuIsOpen(undefined)\\n  }\\n\\n  const handleChange = (value?: string) => {\\n    action('Value selected')(value)\\n    setSelectedValue(value)\\n    setMenuIsOpen(undefined)\\n  }\\n  return (\\n    <ThemeWrapper>\\n      <Box py='3em' bgColor='grey.50'>\\n        <DropDown\\n          variant={text('variant', 'form-select') as tSelectVariant}\\n          optionList={dropdownOptions}\\n          label={text('label', 'Name')}\\n          required={boolean('required', true)}\\n          loading={isLoading}\\n          onChange={handleChange}\\n          error={boolean('error', false)}\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\n          placeholder={text('placeholder', 'Select')}\\n          value={selectedValue}\\n          isMenuOpen={menuIsOpen}\\n          width={text('width', '300px')}\\n          onMenuOpen={handleMenuOpen}\\n          onMenuClose={handleMenuClose}\\n          onInputChange={action('onInputChange')}\\n          disabled={boolean('disabled', false)}\\n          limitOptionsList={50}\\n        />\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const FormSelectAsync = addSourceDecorator(addSourceDecorator(() => {\\n  // const [menuIsOpen, setMenuIsOpen] = React.useState<boolean>()\\n  const [options] = React.useState<OptionsType<any>>([])\\n  const handleLoadOptions = React.useCallback(\\n    (inputValue: string, callback: (options: OptionsType<any>) => void) => {\\n      console.log(inputValue)\\n      if (inputValue.length >= 3) {\\n        const newOptions = [\\n          {\\n            label: inputValue + ' - Option 1',\\n            value: inputValue + '1',\\n            description: inputValue + ' - Option 1'\\n          },\\n          {\\n            label: inputValue + ' - Option 2',\\n            value: inputValue + '2',\\n            description: inputValue + ' - Option 2'\\n          }\\n        ]\\n        // setOptions(newOptions)\\n        callback(newOptions)\\n      } else {\\n        callback(options)\\n      }\\n    },\\n    []\\n  )\\n\\n  return (\\n    <ThemeWrapper>\\n      <Box py='3em' bgColor='grey.50'>\\n        <div style={{ width: '350px' }}>\\n          <AsyncFormSelect\\n            loadOptions={handleLoadOptions}\\n            cacheOptions\\n            label={text('label', 'Postal Code')}\\n            required={boolean('required', false)}\\n            error={boolean('error', false)}\\n            errorMessage={text('errorMessage', 'Postal Code is required')}\\n            disabled={boolean('disabled', false)}\\n            showDescription={boolean('showDescription', false)}\\n          />\\n        </div>\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const ListView = addSourceDecorator(addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='6em' bgColor='grey.50'>\\n        <DropDown\\n          variant={text('variant', 'list-view') as tSelectVariant}\\n          optionList={object('optionList', ListViewOption)}\\n          onChange={action('Value selected')}\\n          width={text('width', '120px')}\\n          disabled={boolean('disabled', false)}\\n          limitOptionsList={50}\\n        />\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\nexport const EditedListView = addSourceDecorator(addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='6em' bgColor='grey.50'>\\n        <DropDown\\n          variant={text('variant', 'inline-edit') as tSelectVariant}\\n          optionList={object('optionList', ListViewOption)}\\n          onChange={action('Value selected')}\\n          width={text('width', '100%')}\\n          disabled={boolean('disabled', false)}\\n          limitOptionsList={50}\\n        />\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\nexport const DashedDropdown = addSourceDecorator(addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='6em' bgColor='grey.50'>\\n        <DropDown\\n          variant={text('variant', 'dashed-dropdown') as tSelectVariant}\\n          optionList={object('optionList', ListViewOption)}\\n          onChange={action('Value selected')}\\n          width={text('width', '100%')}\\n          disabled={boolean('disabled', false)}\\n          value={text('value', '') as tSelectVariant}\\n        />\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\",\"locationsMap\":{}},\"storySource\":{\"source\":\"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/molecules/DropDown\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"import { action } from '@storybook/addon-actions'\\\\nimport { boolean, object, text } from '@storybook/addon-knobs'\\\\nimport React from 'react'\\\\nimport DropDown from '.'\\\\nimport { path } from '..'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport Box from '../../atoms/Box'\\\\nimport { tSelectVariant } from './interface'\\\\n// import { InputActionMeta } from 'react-select'\\\\n// import AsyncSelect from 'react-select/async'\\\\nimport { OptionsType } from 'react-select'\\\\nimport AsyncFormSelect from './AsyncFormSelect'\\\\n\\\\nexport default {\\\\n  title: `${path}/DropDown`,\\\\n  component: DropDown\\\\n}\\\\n\\\\nconst options = [\\\\n  {\\\\n    value: 'emailVerificationPending',\\\\n    label: 'Email Verification Pending Shipper',\\\\n    title: 'Email Verification Pending Shipper'\\\\n  },\\\\n  { value: 'allShippers', label: 'All Shippers', title: 'All Shippers' },\\\\n  {\\\\n    value: 'approvalPendingShippers',\\\\n    label: 'Approval Pending Shippers',\\\\n    title: 'Approval Pending Shippers'\\\\n  }\\\\n]\\\\n\\\\nconst ListViewOption = [\\\\n  { value: 'Available', label: 'Available', title: 'Available' },\\\\n  { value: 'Dispatched', label: 'Dispatched', title: 'Dispatched' },\\\\n  { value: 'Inactive', label: 'Inactive', title: 'Inactive' }\\\\n]\\\\n\\\\nconst FormSelectOption = [\\\\n  {\\\\n    value: 'Credit',\\\\n    label: 'Credit',\\\\n    title: 'Credit',\\\\n    description:\\\\n      'Credit transaction will add to the outstanding amount of (Delivery Associate)'\\\\n  },\\\\n  {\\\\n    value: 'Debit',\\\\n    label: 'Debit',\\\\n    title: 'Debit',\\\\n    description:\\\\n      'Credit transaction will deduct from the outstanding amount of (Delivery Associate)'\\\\n  }\\\\n]\\\\nexport const DefaultSelect = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'default-select') as tSelectVariant}\\\\n          optionList={object('optionList', options)}\\\\n          label={text('label', 'Name')}\\\\n          required={boolean('required', true)}\\\\n          loading={boolean('loading', true)}\\\\n          onChange={action('Value selected')}\\\\n          error={boolean('error', false)}\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\n          placeholder={text('placeholder', 'Select')}\\\\n          value={text('value', 'chocolate')}\\\\n          width={text('width', '300px')}\\\\n          disabled={boolean('disabled', false)}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const FormSelectPlayground = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'form-select') as tSelectVariant}\\\\n          optionList={object('optionList', FormSelectOption)}\\\\n          label={text('label', 'Name')}\\\\n          required={boolean('required', true)}\\\\n          loading={boolean('loading', false)}\\\\n          onChange={action('Value selected')}\\\\n          error={boolean('error', false)}\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\n          placeholder={text('placeholder', 'Select')}\\\\n          value={text('value', 'emailVerificationPending')}\\\\n          width={text('width', '300px')}\\\\n          onMenuOpen={action('Menu Open')}\\\\n          onMenuClose={action('Menu Close')}\\\\n          showDescription={boolean('Show Description', true)}\\\\n          tooltipMessage={text('tooltipMessage', 'i am form select tooltip')}\\\\n          disabled={boolean('disabled', false)}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\nexport const FormSelectDeferred = () => {\\\\n  const [isLoading, setIsLoading] = React.useState<boolean>(false)\\\\n  const [menuIsOpen, setMenuIsOpen] = React.useState<boolean | undefined>(\\\\n    undefined\\\\n  )\\\\n  const [dropdownOptions, setDropdownOptions] = React.useState<\\\\n    { label: string; value: string }[]\\\\n  >([])\\\\n\\\\n  const [selectedValue, setSelectedValue] = React.useState<string>()\\\\n\\\\n  const handleMenuOpen = () => {\\\\n    action('Menu Opened!')()\\\\n    // setMenuIsOpen(true)\\\\n    if (dropdownOptions.length === 0) {\\\\n      setIsLoading(true)\\\\n      setTimeout(() => {\\\\n        setDropdownOptions(options)\\\\n        setIsLoading(false)\\\\n        setMenuIsOpen(true)\\\\n      }, 2000)\\\\n    }\\\\n  }\\\\n\\\\n  const handleMenuClose = () => {\\\\n    action('Menu Closed!')()\\\\n    setMenuIsOpen(undefined)\\\\n  }\\\\n\\\\n  const handleChange = (value?: string) => {\\\\n    action('Value selected')(value)\\\\n    setSelectedValue(value)\\\\n    setMenuIsOpen(undefined)\\\\n  }\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box py='3em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'form-select') as tSelectVariant}\\\\n          optionList={dropdownOptions}\\\\n          label={text('label', 'Name')}\\\\n          required={boolean('required', true)}\\\\n          loading={isLoading}\\\\n          onChange={handleChange}\\\\n          error={boolean('error', false)}\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\n          placeholder={text('placeholder', 'Select')}\\\\n          value={selectedValue}\\\\n          isMenuOpen={menuIsOpen}\\\\n          width={text('width', '300px')}\\\\n          onMenuOpen={handleMenuOpen}\\\\n          onMenuClose={handleMenuClose}\\\\n          onInputChange={action('onInputChange')}\\\\n          disabled={boolean('disabled', false)}\\\\n          limitOptionsList={50}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const FormSelectAsync = () => {\\\\n  // const [menuIsOpen, setMenuIsOpen] = React.useState<boolean>()\\\\n  const [options] = React.useState<OptionsType<any>>([])\\\\n  const handleLoadOptions = React.useCallback(\\\\n    (inputValue: string, callback: (options: OptionsType<any>) => void) => {\\\\n      console.log(inputValue)\\\\n      if (inputValue.length >= 3) {\\\\n        const newOptions = [\\\\n          {\\\\n            label: inputValue + ' - Option 1',\\\\n            value: inputValue + '1',\\\\n            description: inputValue + ' - Option 1'\\\\n          },\\\\n          {\\\\n            label: inputValue + ' - Option 2',\\\\n            value: inputValue + '2',\\\\n            description: inputValue + ' - Option 2'\\\\n          }\\\\n        ]\\\\n        // setOptions(newOptions)\\\\n        callback(newOptions)\\\\n      } else {\\\\n        callback(options)\\\\n      }\\\\n    },\\\\n    []\\\\n  )\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box py='3em' bgColor='grey.50'>\\\\n        <div style={{ width: '350px' }}>\\\\n          <AsyncFormSelect\\\\n            loadOptions={handleLoadOptions}\\\\n            cacheOptions\\\\n            label={text('label', 'Postal Code')}\\\\n            required={boolean('required', false)}\\\\n            error={boolean('error', false)}\\\\n            errorMessage={text('errorMessage', 'Postal Code is required')}\\\\n            disabled={boolean('disabled', false)}\\\\n            showDescription={boolean('showDescription', false)}\\\\n          />\\\\n        </div>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const ListView = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'list-view') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          onChange={action('Value selected')}\\\\n          width={text('width', '120px')}\\\\n          disabled={boolean('disabled', false)}\\\\n          limitOptionsList={50}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\nexport const EditedListView = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'inline-edit') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          onChange={action('Value selected')}\\\\n          width={text('width', '100%')}\\\\n          disabled={boolean('disabled', false)}\\\\n          limitOptionsList={50}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\nexport const DashedDropdown = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'dashed-dropdown') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          onChange={action('Value selected')}\\\\n          width={text('width', '100%')}\\\\n          disabled={boolean('disabled', false)}\\\\n          value={text('value', '') as tSelectVariant}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/DropDown.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\nimport { action } from '@storybook/addon-actions'\\nimport { boolean, object, text } from '@storybook/addon-knobs'\\nimport React from 'react'\\nimport DropDown from '.'\\nimport { path } from '..'\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\nimport Box from '../../atoms/Box'\\nimport { tSelectVariant } from './interface'\\n// import { InputActionMeta } from 'react-select'\\n// import AsyncSelect from 'react-select/async'\\nimport { OptionsType } from 'react-select'\\nimport AsyncFormSelect from './AsyncFormSelect'\\n\\nexport default {parameters: {\\\"storySource\\\":{\\\"source\\\":\\\"import { action } from '@storybook/addon-actions'\\\\nimport { boolean, object, text } from '@storybook/addon-knobs'\\\\nimport React from 'react'\\\\nimport DropDown from '.'\\\\nimport { path } from '..'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport Box from '../../atoms/Box'\\\\nimport { tSelectVariant } from './interface'\\\\n// import { InputActionMeta } from 'react-select'\\\\n// import AsyncSelect from 'react-select/async'\\\\nimport { OptionsType } from 'react-select'\\\\nimport AsyncFormSelect from './AsyncFormSelect'\\\\n\\\\nexport default {\\\\n  title: `${path}/DropDown`,\\\\n  component: DropDown\\\\n}\\\\n\\\\nconst options = [\\\\n  {\\\\n    value: 'emailVerificationPending',\\\\n    label: 'Email Verification Pending Shipper',\\\\n    title: 'Email Verification Pending Shipper'\\\\n  },\\\\n  { value: 'allShippers', label: 'All Shippers', title: 'All Shippers' },\\\\n  {\\\\n    value: 'approvalPendingShippers',\\\\n    label: 'Approval Pending Shippers',\\\\n    title: 'Approval Pending Shippers'\\\\n  }\\\\n]\\\\n\\\\nconst ListViewOption = [\\\\n  { value: 'Available', label: 'Available', title: 'Available' },\\\\n  { value: 'Dispatched', label: 'Dispatched', title: 'Dispatched' },\\\\n  { value: 'Inactive', label: 'Inactive', title: 'Inactive' }\\\\n]\\\\n\\\\nconst FormSelectOption = [\\\\n  {\\\\n    value: 'Credit',\\\\n    label: 'Credit',\\\\n    title: 'Credit',\\\\n    description:\\\\n      'Credit transaction will add to the outstanding amount of (Delivery Associate)'\\\\n  },\\\\n  {\\\\n    value: 'Debit',\\\\n    label: 'Debit',\\\\n    title: 'Debit',\\\\n    description:\\\\n      'Credit transaction will deduct from the outstanding amount of (Delivery Associate)'\\\\n  }\\\\n]\\\\nexport const DefaultSelect = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'default-select') as tSelectVariant}\\\\n          optionList={object('optionList', options)}\\\\n          label={text('label', 'Name')}\\\\n          required={boolean('required', true)}\\\\n          loading={boolean('loading', true)}\\\\n          onChange={action('Value selected')}\\\\n          error={boolean('error', false)}\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\n          placeholder={text('placeholder', 'Select')}\\\\n          value={text('value', 'chocolate')}\\\\n          width={text('width', '300px')}\\\\n          disabled={boolean('disabled', false)}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const FormSelectPlayground = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'form-select') as tSelectVariant}\\\\n          optionList={object('optionList', FormSelectOption)}\\\\n          label={text('label', 'Name')}\\\\n          required={boolean('required', true)}\\\\n          loading={boolean('loading', false)}\\\\n          onChange={action('Value selected')}\\\\n          error={boolean('error', false)}\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\n          placeholder={text('placeholder', 'Select')}\\\\n          value={text('value', 'emailVerificationPending')}\\\\n          width={text('width', '300px')}\\\\n          onMenuOpen={action('Menu Open')}\\\\n          onMenuClose={action('Menu Close')}\\\\n          showDescription={boolean('Show Description', true)}\\\\n          tooltipMessage={text('tooltipMessage', 'i am form select tooltip')}\\\\n          disabled={boolean('disabled', false)}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\nexport const FormSelectDeferred = () => {\\\\n  const [isLoading, setIsLoading] = React.useState<boolean>(false)\\\\n  const [menuIsOpen, setMenuIsOpen] = React.useState<boolean | undefined>(\\\\n    undefined\\\\n  )\\\\n  const [dropdownOptions, setDropdownOptions] = React.useState<\\\\n    { label: string; value: string }[]\\\\n  >([])\\\\n\\\\n  const [selectedValue, setSelectedValue] = React.useState<string>()\\\\n\\\\n  const handleMenuOpen = () => {\\\\n    action('Menu Opened!')()\\\\n    // setMenuIsOpen(true)\\\\n    if (dropdownOptions.length === 0) {\\\\n      setIsLoading(true)\\\\n      setTimeout(() => {\\\\n        setDropdownOptions(options)\\\\n        setIsLoading(false)\\\\n        setMenuIsOpen(true)\\\\n      }, 2000)\\\\n    }\\\\n  }\\\\n\\\\n  const handleMenuClose = () => {\\\\n    action('Menu Closed!')()\\\\n    setMenuIsOpen(undefined)\\\\n  }\\\\n\\\\n  const handleChange = (value?: string) => {\\\\n    action('Value selected')(value)\\\\n    setSelectedValue(value)\\\\n    setMenuIsOpen(undefined)\\\\n  }\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box py='3em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'form-select') as tSelectVariant}\\\\n          optionList={dropdownOptions}\\\\n          label={text('label', 'Name')}\\\\n          required={boolean('required', true)}\\\\n          loading={isLoading}\\\\n          onChange={handleChange}\\\\n          error={boolean('error', false)}\\\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\\\n          placeholder={text('placeholder', 'Select')}\\\\n          value={selectedValue}\\\\n          isMenuOpen={menuIsOpen}\\\\n          width={text('width', '300px')}\\\\n          onMenuOpen={handleMenuOpen}\\\\n          onMenuClose={handleMenuClose}\\\\n          onInputChange={action('onInputChange')}\\\\n          disabled={boolean('disabled', false)}\\\\n          limitOptionsList={50}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const FormSelectAsync = () => {\\\\n  // const [menuIsOpen, setMenuIsOpen] = React.useState<boolean>()\\\\n  const [options] = React.useState<OptionsType<any>>([])\\\\n  const handleLoadOptions = React.useCallback(\\\\n    (inputValue: string, callback: (options: OptionsType<any>) => void) => {\\\\n      console.log(inputValue)\\\\n      if (inputValue.length >= 3) {\\\\n        const newOptions = [\\\\n          {\\\\n            label: inputValue + ' - Option 1',\\\\n            value: inputValue + '1',\\\\n            description: inputValue + ' - Option 1'\\\\n          },\\\\n          {\\\\n            label: inputValue + ' - Option 2',\\\\n            value: inputValue + '2',\\\\n            description: inputValue + ' - Option 2'\\\\n          }\\\\n        ]\\\\n        // setOptions(newOptions)\\\\n        callback(newOptions)\\\\n      } else {\\\\n        callback(options)\\\\n      }\\\\n    },\\\\n    []\\\\n  )\\\\n\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box py='3em' bgColor='grey.50'>\\\\n        <div style={{ width: '350px' }}>\\\\n          <AsyncFormSelect\\\\n            loadOptions={handleLoadOptions}\\\\n            cacheOptions\\\\n            label={text('label', 'Postal Code')}\\\\n            required={boolean('required', false)}\\\\n            error={boolean('error', false)}\\\\n            errorMessage={text('errorMessage', 'Postal Code is required')}\\\\n            disabled={boolean('disabled', false)}\\\\n            showDescription={boolean('showDescription', false)}\\\\n          />\\\\n        </div>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const ListView = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'list-view') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          onChange={action('Value selected')}\\\\n          width={text('width', '120px')}\\\\n          disabled={boolean('disabled', false)}\\\\n          limitOptionsList={50}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\nexport const EditedListView = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'inline-edit') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          onChange={action('Value selected')}\\\\n          width={text('width', '100%')}\\\\n          disabled={boolean('disabled', false)}\\\\n          limitOptionsList={50}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\nexport const DashedDropdown = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='6em' bgColor='grey.50'>\\\\n        <DropDown\\\\n          variant={text('variant', 'dashed-dropdown') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          onChange={action('Value selected')}\\\\n          width={text('width', '100%')}\\\\n          disabled={boolean('disabled', false)}\\\\n          value={text('value', '') as tSelectVariant}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\",\\\"locationsMap\\\":{}},},\\n  title: `${path}/DropDown`,\\n  component: DropDown\\n}\\n\\nconst options = [\\n  {\\n    value: 'emailVerificationPending',\\n    label: 'Email Verification Pending Shipper',\\n    title: 'Email Verification Pending Shipper'\\n  },\\n  { value: 'allShippers', label: 'All Shippers', title: 'All Shippers' },\\n  {\\n    value: 'approvalPendingShippers',\\n    label: 'Approval Pending Shippers',\\n    title: 'Approval Pending Shippers'\\n  }\\n]\\n\\nconst ListViewOption = [\\n  { value: 'Available', label: 'Available', title: 'Available' },\\n  { value: 'Dispatched', label: 'Dispatched', title: 'Dispatched' },\\n  { value: 'Inactive', label: 'Inactive', title: 'Inactive' }\\n]\\n\\nconst FormSelectOption = [\\n  {\\n    value: 'Credit',\\n    label: 'Credit',\\n    title: 'Credit',\\n    description:\\n      'Credit transaction will add to the outstanding amount of (Delivery Associate)'\\n  },\\n  {\\n    value: 'Debit',\\n    label: 'Debit',\\n    title: 'Debit',\\n    description:\\n      'Credit transaction will deduct from the outstanding amount of (Delivery Associate)'\\n  }\\n]\\nexport const DefaultSelect = addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='6em' bgColor='grey.50'>\\n        <DropDown\\n          variant={text('variant', 'default-select') as tSelectVariant}\\n          optionList={object('optionList', options)}\\n          label={text('label', 'Name')}\\n          required={boolean('required', true)}\\n          loading={boolean('loading', true)}\\n          onChange={action('Value selected')}\\n          error={boolean('error', false)}\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\n          placeholder={text('placeholder', 'Select')}\\n          value={text('value', 'chocolate')}\\n          width={text('width', '300px')}\\n          disabled={boolean('disabled', false)}\\n        />\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nexport const FormSelectPlayground = addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='6em' bgColor='grey.50'>\\n        <DropDown\\n          variant={text('variant', 'form-select') as tSelectVariant}\\n          optionList={object('optionList', FormSelectOption)}\\n          label={text('label', 'Name')}\\n          required={boolean('required', true)}\\n          loading={boolean('loading', false)}\\n          onChange={action('Value selected')}\\n          error={boolean('error', false)}\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\n          placeholder={text('placeholder', 'Select')}\\n          value={text('value', 'emailVerificationPending')}\\n          width={text('width', '300px')}\\n          onMenuOpen={action('Menu Open')}\\n          onMenuClose={action('Menu Close')}\\n          showDescription={boolean('Show Description', true)}\\n          tooltipMessage={text('tooltipMessage', 'i am form select tooltip')}\\n          disabled={boolean('disabled', false)}\\n        />\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\nexport const FormSelectDeferred = addSourceDecorator(() => {\\n  const [isLoading, setIsLoading] = React.useState<boolean>(false)\\n  const [menuIsOpen, setMenuIsOpen] = React.useState<boolean | undefined>(\\n    undefined\\n  )\\n  const [dropdownOptions, setDropdownOptions] = React.useState<\\n    { label: string; value: string }[]\\n  >([])\\n\\n  const [selectedValue, setSelectedValue] = React.useState<string>()\\n\\n  const handleMenuOpen = () => {\\n    action('Menu Opened!')()\\n    // setMenuIsOpen(true)\\n    if (dropdownOptions.length === 0) {\\n      setIsLoading(true)\\n      setTimeout(() => {\\n        setDropdownOptions(options)\\n        setIsLoading(false)\\n        setMenuIsOpen(true)\\n      }, 2000)\\n    }\\n  }\\n\\n  const handleMenuClose = () => {\\n    action('Menu Closed!')()\\n    setMenuIsOpen(undefined)\\n  }\\n\\n  const handleChange = (value?: string) => {\\n    action('Value selected')(value)\\n    setSelectedValue(value)\\n    setMenuIsOpen(undefined)\\n  }\\n  return (\\n    <ThemeWrapper>\\n      <Box py='3em' bgColor='grey.50'>\\n        <DropDown\\n          variant={text('variant', 'form-select') as tSelectVariant}\\n          optionList={dropdownOptions}\\n          label={text('label', 'Name')}\\n          required={boolean('required', true)}\\n          loading={isLoading}\\n          onChange={handleChange}\\n          error={boolean('error', false)}\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\n          placeholder={text('placeholder', 'Select')}\\n          value={selectedValue}\\n          isMenuOpen={menuIsOpen}\\n          width={text('width', '300px')}\\n          onMenuOpen={handleMenuOpen}\\n          onMenuClose={handleMenuClose}\\n          onInputChange={action('onInputChange')}\\n          disabled={boolean('disabled', false)}\\n          limitOptionsList={50}\\n        />\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nexport const FormSelectAsync = addSourceDecorator(() => {\\n  // const [menuIsOpen, setMenuIsOpen] = React.useState<boolean>()\\n  const [options] = React.useState<OptionsType<any>>([])\\n  const handleLoadOptions = React.useCallback(\\n    (inputValue: string, callback: (options: OptionsType<any>) => void) => {\\n      console.log(inputValue)\\n      if (inputValue.length >= 3) {\\n        const newOptions = [\\n          {\\n            label: inputValue + ' - Option 1',\\n            value: inputValue + '1',\\n            description: inputValue + ' - Option 1'\\n          },\\n          {\\n            label: inputValue + ' - Option 2',\\n            value: inputValue + '2',\\n            description: inputValue + ' - Option 2'\\n          }\\n        ]\\n        // setOptions(newOptions)\\n        callback(newOptions)\\n      } else {\\n        callback(options)\\n      }\\n    },\\n    []\\n  )\\n\\n  return (\\n    <ThemeWrapper>\\n      <Box py='3em' bgColor='grey.50'>\\n        <div style={{ width: '350px' }}>\\n          <AsyncFormSelect\\n            loadOptions={handleLoadOptions}\\n            cacheOptions\\n            label={text('label', 'Postal Code')}\\n            required={boolean('required', false)}\\n            error={boolean('error', false)}\\n            errorMessage={text('errorMessage', 'Postal Code is required')}\\n            disabled={boolean('disabled', false)}\\n            showDescription={boolean('showDescription', false)}\\n          />\\n        </div>\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nexport const ListView = addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='6em' bgColor='grey.50'>\\n        <DropDown\\n          variant={text('variant', 'list-view') as tSelectVariant}\\n          optionList={object('optionList', ListViewOption)}\\n          onChange={action('Value selected')}\\n          width={text('width', '120px')}\\n          disabled={boolean('disabled', false)}\\n          limitOptionsList={50}\\n        />\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\nexport const EditedListView = addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='6em' bgColor='grey.50'>\\n        <DropDown\\n          variant={text('variant', 'inline-edit') as tSelectVariant}\\n          optionList={object('optionList', ListViewOption)}\\n          onChange={action('Value selected')}\\n          width={text('width', '100%')}\\n          disabled={boolean('disabled', false)}\\n          limitOptionsList={50}\\n        />\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\nexport const DashedDropdown = addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='6em' bgColor='grey.50'>\\n        <DropDown\\n          variant={text('variant', 'dashed-dropdown') as tSelectVariant}\\n          optionList={object('optionList', ListViewOption)}\\n          onChange={action('Value selected')}\\n          width={text('width', '100%')}\\n          disabled={boolean('disabled', false)}\\n          value={text('value', '') as tSelectVariant}\\n        />\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\",\"locationsMap\":{}},\"storySource\":{\"source\":\"import { action } from '@storybook/addon-actions'\\nimport { boolean, object, text } from '@storybook/addon-knobs'\\nimport React from 'react'\\nimport DropDown from '.'\\nimport { path } from '..'\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\nimport Box from '../../atoms/Box'\\nimport { tSelectVariant } from './interface'\\n// import { InputActionMeta } from 'react-select'\\n// import AsyncSelect from 'react-select/async'\\nimport { OptionsType } from 'react-select'\\nimport AsyncFormSelect from './AsyncFormSelect'\\n\\nexport default {\\n  title: `${path}/DropDown`,\\n  component: DropDown\\n}\\n\\nconst options = [\\n  {\\n    value: 'emailVerificationPending',\\n    label: 'Email Verification Pending Shipper',\\n    title: 'Email Verification Pending Shipper'\\n  },\\n  { value: 'allShippers', label: 'All Shippers', title: 'All Shippers' },\\n  {\\n    value: 'approvalPendingShippers',\\n    label: 'Approval Pending Shippers',\\n    title: 'Approval Pending Shippers'\\n  }\\n]\\n\\nconst ListViewOption = [\\n  { value: 'Available', label: 'Available', title: 'Available' },\\n  { value: 'Dispatched', label: 'Dispatched', title: 'Dispatched' },\\n  { value: 'Inactive', label: 'Inactive', title: 'Inactive' }\\n]\\n\\nconst FormSelectOption = [\\n  {\\n    value: 'Credit',\\n    label: 'Credit',\\n    title: 'Credit',\\n    description:\\n      'Credit transaction will add to the outstanding amount of (Delivery Associate)'\\n  },\\n  {\\n    value: 'Debit',\\n    label: 'Debit',\\n    title: 'Debit',\\n    description:\\n      'Credit transaction will deduct from the outstanding amount of (Delivery Associate)'\\n  }\\n]\\nexport const DefaultSelect = () => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='6em' bgColor='grey.50'>\\n        <DropDown\\n          variant={text('variant', 'default-select') as tSelectVariant}\\n          optionList={object('optionList', options)}\\n          label={text('label', 'Name')}\\n          required={boolean('required', true)}\\n          loading={boolean('loading', true)}\\n          onChange={action('Value selected')}\\n          error={boolean('error', false)}\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\n          placeholder={text('placeholder', 'Select')}\\n          value={text('value', 'chocolate')}\\n          width={text('width', '300px')}\\n          disabled={boolean('disabled', false)}\\n        />\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}\\n\\nexport const FormSelectPlayground = () => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='6em' bgColor='grey.50'>\\n        <DropDown\\n          variant={text('variant', 'form-select') as tSelectVariant}\\n          optionList={object('optionList', FormSelectOption)}\\n          label={text('label', 'Name')}\\n          required={boolean('required', true)}\\n          loading={boolean('loading', false)}\\n          onChange={action('Value selected')}\\n          error={boolean('error', false)}\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\n          placeholder={text('placeholder', 'Select')}\\n          value={text('value', 'emailVerificationPending')}\\n          width={text('width', '300px')}\\n          onMenuOpen={action('Menu Open')}\\n          onMenuClose={action('Menu Close')}\\n          showDescription={boolean('Show Description', true)}\\n          tooltipMessage={text('tooltipMessage', 'i am form select tooltip')}\\n          disabled={boolean('disabled', false)}\\n        />\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}\\nexport const FormSelectDeferred = () => {\\n  const [isLoading, setIsLoading] = React.useState<boolean>(false)\\n  const [menuIsOpen, setMenuIsOpen] = React.useState<boolean | undefined>(\\n    undefined\\n  )\\n  const [dropdownOptions, setDropdownOptions] = React.useState<\\n    { label: string; value: string }[]\\n  >([])\\n\\n  const [selectedValue, setSelectedValue] = React.useState<string>()\\n\\n  const handleMenuOpen = () => {\\n    action('Menu Opened!')()\\n    // setMenuIsOpen(true)\\n    if (dropdownOptions.length === 0) {\\n      setIsLoading(true)\\n      setTimeout(() => {\\n        setDropdownOptions(options)\\n        setIsLoading(false)\\n        setMenuIsOpen(true)\\n      }, 2000)\\n    }\\n  }\\n\\n  const handleMenuClose = () => {\\n    action('Menu Closed!')()\\n    setMenuIsOpen(undefined)\\n  }\\n\\n  const handleChange = (value?: string) => {\\n    action('Value selected')(value)\\n    setSelectedValue(value)\\n    setMenuIsOpen(undefined)\\n  }\\n  return (\\n    <ThemeWrapper>\\n      <Box py='3em' bgColor='grey.50'>\\n        <DropDown\\n          variant={text('variant', 'form-select') as tSelectVariant}\\n          optionList={dropdownOptions}\\n          label={text('label', 'Name')}\\n          required={boolean('required', true)}\\n          loading={isLoading}\\n          onChange={handleChange}\\n          error={boolean('error', false)}\\n          errorMessage={text('errorMessage', 'Mandatory field')}\\n          placeholder={text('placeholder', 'Select')}\\n          value={selectedValue}\\n          isMenuOpen={menuIsOpen}\\n          width={text('width', '300px')}\\n          onMenuOpen={handleMenuOpen}\\n          onMenuClose={handleMenuClose}\\n          onInputChange={action('onInputChange')}\\n          disabled={boolean('disabled', false)}\\n          limitOptionsList={50}\\n        />\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}\\n\\nexport const FormSelectAsync = () => {\\n  // const [menuIsOpen, setMenuIsOpen] = React.useState<boolean>()\\n  const [options] = React.useState<OptionsType<any>>([])\\n  const handleLoadOptions = React.useCallback(\\n    (inputValue: string, callback: (options: OptionsType<any>) => void) => {\\n      console.log(inputValue)\\n      if (inputValue.length >= 3) {\\n        const newOptions = [\\n          {\\n            label: inputValue + ' - Option 1',\\n            value: inputValue + '1',\\n            description: inputValue + ' - Option 1'\\n          },\\n          {\\n            label: inputValue + ' - Option 2',\\n            value: inputValue + '2',\\n            description: inputValue + ' - Option 2'\\n          }\\n        ]\\n        // setOptions(newOptions)\\n        callback(newOptions)\\n      } else {\\n        callback(options)\\n      }\\n    },\\n    []\\n  )\\n\\n  return (\\n    <ThemeWrapper>\\n      <Box py='3em' bgColor='grey.50'>\\n        <div style={{ width: '350px' }}>\\n          <AsyncFormSelect\\n            loadOptions={handleLoadOptions}\\n            cacheOptions\\n            label={text('label', 'Postal Code')}\\n            required={boolean('required', false)}\\n            error={boolean('error', false)}\\n            errorMessage={text('errorMessage', 'Postal Code is required')}\\n            disabled={boolean('disabled', false)}\\n            showDescription={boolean('showDescription', false)}\\n          />\\n        </div>\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}\\n\\nexport const ListView = () => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='6em' bgColor='grey.50'>\\n        <DropDown\\n          variant={text('variant', 'list-view') as tSelectVariant}\\n          optionList={object('optionList', ListViewOption)}\\n          onChange={action('Value selected')}\\n          width={text('width', '120px')}\\n          disabled={boolean('disabled', false)}\\n          limitOptionsList={50}\\n        />\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}\\nexport const EditedListView = () => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='6em' bgColor='grey.50'>\\n        <DropDown\\n          variant={text('variant', 'inline-edit') as tSelectVariant}\\n          optionList={object('optionList', ListViewOption)}\\n          onChange={action('Value selected')}\\n          width={text('width', '100%')}\\n          disabled={boolean('disabled', false)}\\n          limitOptionsList={50}\\n        />\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}\\nexport const DashedDropdown = () => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='6em' bgColor='grey.50'>\\n        <DropDown\\n          variant={text('variant', 'dashed-dropdown') as tSelectVariant}\\n          optionList={object('optionList', ListViewOption)}\\n          onChange={action('Value selected')}\\n          width={text('width', '100%')}\\n          disabled={boolean('disabled', false)}\\n          value={text('value', '') as tSelectVariant}\\n        />\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}\\n\",\"locationsMap\":{}},},\n  title: `${path}/DropDown`,\n  component: DropDown\n}\n\nconst options = [\n  {\n    value: 'emailVerificationPending',\n    label: 'Email Verification Pending Shipper',\n    title: 'Email Verification Pending Shipper'\n  },\n  { value: 'allShippers', label: 'All Shippers', title: 'All Shippers' },\n  {\n    value: 'approvalPendingShippers',\n    label: 'Approval Pending Shippers',\n    title: 'Approval Pending Shippers'\n  }\n]\n\nconst ListViewOption = [\n  { value: 'Available', label: 'Available', title: 'Available' },\n  { value: 'Dispatched', label: 'Dispatched', title: 'Dispatched' },\n  { value: 'Inactive', label: 'Inactive', title: 'Inactive' }\n]\n\nconst FormSelectOption = [\n  {\n    value: 'Credit',\n    label: 'Credit',\n    title: 'Credit',\n    description:\n      'Credit transaction will add to the outstanding amount of (Delivery Associate)'\n  },\n  {\n    value: 'Debit',\n    label: 'Debit',\n    title: 'Debit',\n    description:\n      'Credit transaction will deduct from the outstanding amount of (Delivery Associate)'\n  }\n]\nexport const DefaultSelect = addSourceDecorator(addSourceDecorator(addSourceDecorator(() => {\n  return (\n    <ThemeWrapper>\n      <Box p='6em' bgColor='grey.50'>\n        <DropDown\n          variant={text('variant', 'default-select') as tSelectVariant}\n          optionList={object('optionList', options)}\n          label={text('label', 'Name')}\n          required={boolean('required', true)}\n          loading={boolean('loading', true)}\n          onChange={action('Value selected')}\n          error={boolean('error', false)}\n          errorMessage={text('errorMessage', 'Mandatory field')}\n          placeholder={text('placeholder', 'Select')}\n          value={text('value', 'chocolate')}\n          width={text('width', '300px')}\n          disabled={boolean('disabled', false)}\n        />\n      </Box>\n    </ThemeWrapper>\n  )\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;;\n\nexport const FormSelectPlayground = addSourceDecorator(addSourceDecorator(addSourceDecorator(() => {\n  return (\n    <ThemeWrapper>\n      <Box p='6em' bgColor='grey.50'>\n        <DropDown\n          variant={text('variant', 'form-select') as tSelectVariant}\n          optionList={object('optionList', FormSelectOption)}\n          label={text('label', 'Name')}\n          required={boolean('required', true)}\n          loading={boolean('loading', false)}\n          onChange={action('Value selected')}\n          error={boolean('error', false)}\n          errorMessage={text('errorMessage', 'Mandatory field')}\n          placeholder={text('placeholder', 'Select')}\n          value={text('value', 'emailVerificationPending')}\n          width={text('width', '300px')}\n          onMenuOpen={action('Menu Open')}\n          onMenuClose={action('Menu Close')}\n          showDescription={boolean('Show Description', true)}\n          tooltipMessage={text('tooltipMessage', 'i am form select tooltip')}\n          disabled={boolean('disabled', false)}\n        />\n      </Box>\n    </ThemeWrapper>\n  )\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;;\nexport const FormSelectDeferred = addSourceDecorator(addSourceDecorator(addSourceDecorator(() => {\n  const [isLoading, setIsLoading] = React.useState<boolean>(false)\n  const [menuIsOpen, setMenuIsOpen] = React.useState<boolean | undefined>(\n    undefined\n  )\n  const [dropdownOptions, setDropdownOptions] = React.useState<\n    { label: string; value: string }[]\n  >([])\n\n  const [selectedValue, setSelectedValue] = React.useState<string>()\n\n  const handleMenuOpen = () => {\n    action('Menu Opened!')()\n    // setMenuIsOpen(true)\n    if (dropdownOptions.length === 0) {\n      setIsLoading(true)\n      setTimeout(() => {\n        setDropdownOptions(options)\n        setIsLoading(false)\n        setMenuIsOpen(true)\n      }, 2000)\n    }\n  }\n\n  const handleMenuClose = () => {\n    action('Menu Closed!')()\n    setMenuIsOpen(undefined)\n  }\n\n  const handleChange = (value?: string) => {\n    action('Value selected')(value)\n    setSelectedValue(value)\n    setMenuIsOpen(undefined)\n  }\n  return (\n    <ThemeWrapper>\n      <Box py='3em' bgColor='grey.50'>\n        <DropDown\n          variant={text('variant', 'form-select') as tSelectVariant}\n          optionList={dropdownOptions}\n          label={text('label', 'Name')}\n          required={boolean('required', true)}\n          loading={isLoading}\n          onChange={handleChange}\n          error={boolean('error', false)}\n          errorMessage={text('errorMessage', 'Mandatory field')}\n          placeholder={text('placeholder', 'Select')}\n          value={selectedValue}\n          isMenuOpen={menuIsOpen}\n          width={text('width', '300px')}\n          onMenuOpen={handleMenuOpen}\n          onMenuClose={handleMenuClose}\n          onInputChange={action('onInputChange')}\n          disabled={boolean('disabled', false)}\n          limitOptionsList={50}\n        />\n      </Box>\n    </ThemeWrapper>\n  )\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;;\n\nexport const FormSelectAsync = addSourceDecorator(addSourceDecorator(addSourceDecorator(() => {\n  // const [menuIsOpen, setMenuIsOpen] = React.useState<boolean>()\n  const [options] = React.useState<OptionsType<any>>([])\n  const handleLoadOptions = React.useCallback(\n    (inputValue: string, callback: (options: OptionsType<any>) => void) => {\n      console.log(inputValue)\n      if (inputValue.length >= 3) {\n        const newOptions = [\n          {\n            label: inputValue + ' - Option 1',\n            value: inputValue + '1',\n            description: inputValue + ' - Option 1'\n          },\n          {\n            label: inputValue + ' - Option 2',\n            value: inputValue + '2',\n            description: inputValue + ' - Option 2'\n          }\n        ]\n        // setOptions(newOptions)\n        callback(newOptions)\n      } else {\n        callback(options)\n      }\n    },\n    []\n  )\n\n  return (\n    <ThemeWrapper>\n      <Box py='3em' bgColor='grey.50'>\n        <div style={{ width: '350px' }}>\n          <AsyncFormSelect\n            loadOptions={handleLoadOptions}\n            cacheOptions\n            label={text('label', 'Postal Code')}\n            required={boolean('required', false)}\n            error={boolean('error', false)}\n            errorMessage={text('errorMessage', 'Postal Code is required')}\n            disabled={boolean('disabled', false)}\n            showDescription={boolean('showDescription', false)}\n          />\n        </div>\n      </Box>\n    </ThemeWrapper>\n  )\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;;\n\nexport const ListView = addSourceDecorator(addSourceDecorator(addSourceDecorator(() => {\n  return (\n    <ThemeWrapper>\n      <Box p='6em' bgColor='grey.50'>\n        <DropDown\n          variant={text('variant', 'list-view') as tSelectVariant}\n          optionList={object('optionList', ListViewOption)}\n          onChange={action('Value selected')}\n          width={text('width', '120px')}\n          disabled={boolean('disabled', false)}\n          limitOptionsList={50}\n        />\n      </Box>\n    </ThemeWrapper>\n  )\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;;\nexport const EditedListView = addSourceDecorator(addSourceDecorator(addSourceDecorator(() => {\n  return (\n    <ThemeWrapper>\n      <Box p='6em' bgColor='grey.50'>\n        <DropDown\n          variant={text('variant', 'inline-edit') as tSelectVariant}\n          optionList={object('optionList', ListViewOption)}\n          onChange={action('Value selected')}\n          width={text('width', '100%')}\n          disabled={boolean('disabled', false)}\n          limitOptionsList={50}\n        />\n      </Box>\n    </ThemeWrapper>\n  )\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;;\nexport const DashedDropdown = addSourceDecorator(addSourceDecorator(addSourceDecorator(() => {\n  return (\n    <ThemeWrapper>\n      <Box p='6em' bgColor='grey.50'>\n        <DropDown\n          variant={text('variant', 'dashed-dropdown') as tSelectVariant}\n          optionList={object('optionList', ListViewOption)}\n          onChange={action('Value selected')}\n          width={text('width', '100%')}\n          disabled={boolean('disabled', false)}\n          value={text('value', '') as tSelectVariant}\n        />\n      </Box>\n    </ThemeWrapper>\n  )\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});"],"sourceRoot":""},"metadata":{},"sourceType":"module"}