{"ast":null,"code":"import _slicedToArray from \"/Users/farhanansari/Code/ui-library/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/farhanansari/Code/ui-library/src/components/molecules/DropDown/index.tsx\";\n\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { StyledDropDown } from './StyledDropDown';\nimport DefaultSelect from './Variants/DefaultSelect';\nimport InlineEditDropdown from './Variants/InlineEditDropdown';\nimport FormSelect from './Variants/FormSelect';\nimport ListView from './Variants/ListView';\nimport InlineDashedDropdown from './Variants/InlineDashedDropdown';\n\nvar DropDown = function DropDown(_ref) {\n  var _ref$variant = _ref.variant,\n      variant = _ref$variant === void 0 ? 'form-select' : _ref$variant,\n      _ref$optionList = _ref.optionList,\n      optionList = _ref$optionList === void 0 ? [] : _ref$optionList,\n      _ref$required = _ref.required,\n      required = _ref$required === void 0 ? false : _ref$required,\n      _ref$label = _ref.label,\n      label = _ref$label === void 0 ? '' : _ref$label,\n      _ref$error = _ref.error,\n      error = _ref$error === void 0 ? false : _ref$error,\n      _ref$errorMessage = _ref.errorMessage,\n      errorMessage = _ref$errorMessage === void 0 ? '' : _ref$errorMessage,\n      _ref$placeholder = _ref.placeholder,\n      placeholder = _ref$placeholder === void 0 ? '' : _ref$placeholder,\n      _ref$loading = _ref.loading,\n      loading = _ref$loading === void 0 ? false : _ref$loading,\n      isMenuOpen = _ref.isMenuOpen,\n      _ref$onChange = _ref.onChange,\n      onChange = _ref$onChange === void 0 ? function () {} : _ref$onChange,\n      _ref$onInputChange = _ref.onInputChange,\n      onInputChange = _ref$onInputChange === void 0 ? function () {} : _ref$onInputChange,\n      value = _ref.value,\n      _ref$width = _ref.width,\n      width = _ref$width === void 0 ? '100%' : _ref$width,\n      _ref$onMenuOpen = _ref.onMenuOpen,\n      onMenuOpen = _ref$onMenuOpen === void 0 ? function () {} : _ref$onMenuOpen,\n      _ref$onMenuClose = _ref.onMenuClose,\n      onMenuClose = _ref$onMenuClose === void 0 ? function () {} : _ref$onMenuClose,\n      _ref$showDescription = _ref.showDescription,\n      showDescription = _ref$showDescription === void 0 ? false : _ref$showDescription,\n      tooltipMessage = _ref.tooltipMessage,\n      _ref$disabled = _ref.disabled,\n      disabled = _ref$disabled === void 0 ? false : _ref$disabled,\n      labelColor = _ref.labelColor,\n      _ref$showDropdownIndi = _ref.showDropdownIndicator,\n      showDropdownIndicator = _ref$showDropdownIndi === void 0 ? true : _ref$showDropdownIndi,\n      _ref$showNoDataText = _ref.showNoDataText,\n      showNoDataText = _ref$showNoDataText === void 0 ? true : _ref$showNoDataText,\n      _ref$showCrossIcon = _ref.showCrossIcon,\n      showCrossIcon = _ref$showCrossIcon === void 0 ? true : _ref$showCrossIcon,\n      limitOptionsList = _ref.limitOptionsList,\n      align = _ref.align,\n      _ref$withIcon = _ref.withIcon,\n      withIcon = _ref$withIcon === void 0 ? false : _ref$withIcon,\n      _ref$iconVariant = _ref.iconVariant,\n      iconVariant = _ref$iconVariant === void 0 ? '' : _ref$iconVariant,\n      iconSize = _ref.iconSize,\n      iconStyle = _ref.iconStyle,\n      _ref$iconBorder = _ref.iconBorder,\n      iconBorder = _ref$iconBorder === void 0 ? true : _ref$iconBorder,\n      onIconClick = _ref.onIconClick,\n      _ref$isSortable = _ref.isSortable,\n      isSortable = _ref$isSortable === void 0 ? true : _ref$isSortable;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      selectedOption = _useState2[0],\n      setSelectedOption = _useState2[1];\n\n  var _useState3 = useState(loading),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isLoading = _useState4[0],\n      setIsLoading = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isCrossVisible = _useState6[0],\n      setIsCrossVisible = _useState6[1];\n\n  var _useState7 = useState(optionList),\n      _useState8 = _slicedToArray(_useState7, 2),\n      _optionList = _useState8[0],\n      setOptionList = _useState8[1];\n\n  useEffect(function () {\n    setIsLoading(loading);\n  }, [loading]); // useEffect(() => {\n  //   if (optionList.length < 0) {\n  //     setIsLoading(true)\n  //   } else setIsLoading(false)\n  // }, [optionList])\n\n  /* In the case of Date picker , I externally pass selected value which will be string.\n  As react-select wants {label, value} format.\n  Selection is done below */\n\n  useEffect(function () {\n    var optionSelected = optionList.find(function (_ref2) {\n      var optionValue = _ref2.value;\n      return optionValue === value;\n    }); // setIsCrossVisible(!!value)\n\n    setIsCrossVisible(!!value && !!optionSelected);\n    setSelectedOption(optionSelected || null);\n    setOptionList(optionList);\n  }, [value, optionList]);\n  /* eslint-disable */\n\n  var handleDeviceChange = useCallback(function (input) {\n    var option = input;\n    var previousOption = selectedOption;\n\n    if ((option === null || option === void 0 ? void 0 : option.value) !== (previousOption === null || previousOption === void 0 ? void 0 : previousOption.value)) {\n      // setIsLoading(false)\n      setSelectedOption(input);\n      setIsCrossVisible(true);\n      option ? onChange(option === null || option === void 0 ? void 0 : option.value) : onChange(undefined);\n    }\n  }, [selectedOption, onChange]); // const handleInputChange = () => {\n  // setIsLoading(true)\n  // setTimeout(() => {\n  //   setIsLoading(false)\n  // }, 500)\n  // }\n\n  var handleCloseChange = function handleCloseChange(e) {\n    e.stopPropagation();\n    setSelectedOption(null);\n    setIsCrossVisible(false);\n    onChange(undefined);\n  }; // default props\n\n\n  var defaultProps = {\n    options: _optionList,\n    value: selectedOption,\n    isLoading: isLoading,\n    placeholder: placeholder,\n    // onInputChange: () => handleInputChange(),\n    onInputChange: onInputChange,\n    onChange: function onChange(input) {\n      return handleDeviceChange(input);\n    },\n    onFocus: function onFocus() {// setIsLoading(false)\n    },\n    isSearchable: true,\n    isMenuOpen: isMenuOpen,\n    variant: variant,\n    onMenuOpen: onMenuOpen,\n    onMenuClose: onMenuClose,\n    tooltipMessage: tooltipMessage,\n    disabled: disabled,\n    labelColor: labelColor,\n    limitOptionsList: limitOptionsList,\n    align: align,\n    iconBorder: iconBorder,\n    withIcon: withIcon,\n    iconVariant: iconVariant,\n    iconSize: iconSize,\n    iconStyle: iconStyle,\n    onIconClick: onIconClick\n  };\n  var selectComponent = {\n    'form-select': /*#__PURE__*/React.createElement(FormSelect, {\n      defaultProps: defaultProps,\n      error: error,\n      errorMessage: errorMessage,\n      label: label,\n      required: required,\n      showDescription: showDescription,\n      showDropdownIndicator: showDropdownIndicator,\n      showNoDataText: showNoDataText,\n      showCrossIcon: showCrossIcon,\n      isSortable: isSortable,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 7\n      }\n    }),\n    'default-select': /*#__PURE__*/React.createElement(DefaultSelect, {\n      defaultProps: defaultProps,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 23\n      }\n    }),\n    'list-view': /*#__PURE__*/React.createElement(ListView, {\n      defaultProps: defaultProps,\n      setIsCrossVisible: setIsCrossVisible,\n      isCrossVisible: isCrossVisible,\n      handleCloseChange: handleCloseChange,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 7\n      }\n    }),\n    'inline-edit': /*#__PURE__*/React.createElement(InlineEditDropdown, {\n      defaultProps: defaultProps,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 20\n      }\n    }),\n    'dashed-dropdown': /*#__PURE__*/React.createElement(InlineDashedDropdown, {\n      defaultProps: defaultProps,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 24\n      }\n    })\n  };\n  return /*#__PURE__*/React.createElement(StyledDropDown, {\n    width: width,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 5\n    }\n  }, selectComponent[variant] || 'No varaint', ' ');\n};\n\nexport default DropDown;","map":{"version":3,"sources":["/Users/farhanansari/Code/ui-library/src/components/molecules/DropDown/index.tsx"],"names":["React","useCallback","useEffect","useState","StyledDropDown","DefaultSelect","InlineEditDropdown","FormSelect","ListView","InlineDashedDropdown","DropDown","variant","optionList","required","label","error","errorMessage","placeholder","loading","isMenuOpen","onChange","onInputChange","value","width","onMenuOpen","onMenuClose","showDescription","tooltipMessage","disabled","labelColor","showDropdownIndicator","showNoDataText","showCrossIcon","limitOptionsList","align","withIcon","iconVariant","iconSize","iconStyle","iconBorder","onIconClick","isSortable","selectedOption","setSelectedOption","isLoading","setIsLoading","isCrossVisible","setIsCrossVisible","_optionList","setOptionList","optionSelected","find","optionValue","handleDeviceChange","input","option","previousOption","undefined","handleCloseChange","e","stopPropagation","defaultProps","options","onFocus","isSearchable","selectComponent"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react'\nimport { ValueType } from 'react-select'\nimport { ISelectProps, OptionType } from './interface'\nimport { StyledDropDown } from './StyledDropDown'\nimport DefaultSelect from './Variants/DefaultSelect'\nimport InlineEditDropdown from './Variants/InlineEditDropdown'\nimport FormSelect from './Variants/FormSelect'\nimport ListView from './Variants/ListView'\nimport InlineDashedDropdown from './Variants/InlineDashedDropdown'\n\nconst DropDown = ({\n  variant = 'form-select',\n  optionList = [],\n  required = false,\n  label = '',\n  error = false,\n  errorMessage = '',\n  placeholder = '',\n  loading = false,\n  isMenuOpen,\n  onChange = () => {},\n  onInputChange = () => {},\n  value,\n  width = '100%',\n  onMenuOpen = () => {},\n  onMenuClose = () => {},\n  showDescription = false,\n  tooltipMessage,\n  disabled = false,\n  labelColor,\n  showDropdownIndicator = true,\n  showNoDataText = true,\n  showCrossIcon = true,\n  limitOptionsList,\n  align,\n  withIcon = false,\n  iconVariant = '',\n  iconSize,\n  iconStyle,\n  iconBorder = true,\n  onIconClick,\n  isSortable = true\n}: ISelectProps) => {\n  const [selectedOption, setSelectedOption] = useState<ValueType<\n    OptionType\n  > | null>(null)\n\n  const [isLoading, setIsLoading] = useState(loading)\n  const [isCrossVisible, setIsCrossVisible] = useState(false)\n  const [_optionList, setOptionList] = useState(optionList)\n\n  useEffect(() => {\n    setIsLoading(loading)\n  }, [loading])\n  // useEffect(() => {\n  //   if (optionList.length < 0) {\n  //     setIsLoading(true)\n  //   } else setIsLoading(false)\n  // }, [optionList])\n\n  /* In the case of Date picker , I externally pass selected value which will be string.\n  As react-select wants {label, value} format.\n  Selection is done below */\n\n  useEffect(() => {\n    const optionSelected = optionList.find(\n      ({ value: optionValue }: { value: string }) => optionValue === value\n    )\n    // setIsCrossVisible(!!value)\n    setIsCrossVisible(!!value && !!optionSelected)\n    setSelectedOption(optionSelected || null)\n    setOptionList(optionList)\n  }, [value, optionList])\n\n  /* eslint-disable */\n  const handleDeviceChange = useCallback(\n    (input: ValueType<OptionType>) => {\n      const option = input as OptionType\n      const previousOption = selectedOption as OptionType\n      if (option?.value !== previousOption?.value) {\n        // setIsLoading(false)\n        setSelectedOption(input)\n        setIsCrossVisible(true)\n\n        option ? onChange(option?.value as string) : onChange(undefined)\n      }\n    },\n    [selectedOption, onChange]\n  )\n\n  // const handleInputChange = () => {\n  // setIsLoading(true)\n  // setTimeout(() => {\n  //   setIsLoading(false)\n  // }, 500)\n  // }\n  const handleCloseChange = (e: any) => {\n    e.stopPropagation()\n    setSelectedOption(null)\n    setIsCrossVisible(false)\n    onChange(undefined)\n  }\n\n  // default props\n  const defaultProps = {\n    options: _optionList,\n    value: selectedOption,\n    isLoading,\n    placeholder,\n    // onInputChange: () => handleInputChange(),\n    onInputChange,\n    onChange: (input: ValueType<OptionType>) => handleDeviceChange(input),\n    onFocus: () => {\n      // setIsLoading(false)\n    },\n    isSearchable: true,\n    isMenuOpen,\n    variant,\n    onMenuOpen,\n    onMenuClose,\n    tooltipMessage,\n    disabled,\n    labelColor,\n    limitOptionsList,\n    align,\n    iconBorder,\n    withIcon,\n    iconVariant,\n    iconSize,\n    iconStyle,\n    onIconClick\n  }\n\n  const selectComponent = {\n    'form-select': (\n      <FormSelect\n        defaultProps={defaultProps}\n        error={error}\n        errorMessage={errorMessage}\n        label={label}\n        required={required}\n        showDescription={showDescription}\n        showDropdownIndicator={showDropdownIndicator}\n        showNoDataText={showNoDataText}\n        showCrossIcon={showCrossIcon}\n        isSortable={isSortable}\n      />\n    ),\n    'default-select': <DefaultSelect defaultProps={defaultProps} />,\n    'list-view': (\n      <ListView\n        defaultProps={defaultProps}\n        setIsCrossVisible={setIsCrossVisible}\n        isCrossVisible={isCrossVisible}\n        handleCloseChange={handleCloseChange}\n      />\n    ),\n    'inline-edit': <InlineEditDropdown defaultProps={defaultProps} />,\n    'dashed-dropdown': <InlineDashedDropdown defaultProps={defaultProps} />\n  }\n  return (\n    <StyledDropDown width={width}>\n      {selectComponent[variant] || 'No varaint'}{' '}\n    </StyledDropDown>\n  )\n}\n\nexport default DropDown\n"]},"metadata":{},"sourceType":"module"}