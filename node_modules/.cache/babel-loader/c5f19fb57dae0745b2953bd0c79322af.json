{"ast":null,"code":"import _objectWithoutProperties from \"/Users/farhanansari/Code/ui-library/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _objectSpread from \"/Users/farhanansari/Code/ui-library/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/Users/farhanansari/Code/ui-library/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/farhanansari/Code/ui-library/src/components/atoms/SettingBox/Type/RadioOption.tsx\";\n\nimport React, { Fragment, useState } from 'react';\nimport Radio from '../../../atoms/Radio';\nimport { RadioLabel } from '../../Radio/Radio.styled';\nimport RadioGroup from '../../RadioGroup';\nimport { StyledImage, StyledSettingOption } from '../StyledSettingBox';\n\nvar RadioOption = function RadioOption(_ref) {\n  var settingOption = _ref.settingOption,\n      onChange = _ref.onChange,\n      settingConfig = _ref.settingConfig,\n      disabled = _ref.disabled,\n      _ref$listOfDisabledTi = _ref.listOfDisabledTitle,\n      listOfDisabledTitle = _ref$listOfDisabledTi === void 0 ? [] : _ref$listOfDisabledTi;\n\n  var _useState = useState(settingOption),\n      _useState2 = _slicedToArray(_useState, 2),\n      settings = _useState2[0],\n      setSettingOptions = _useState2[1]; // for hatmap and marker- map mode , if both the values  dont have permission,dont show section or else show whatever have permission\n\n\n  var _settings$permission = settings.permission,\n      permission = _settings$permission === void 0 ? true : _settings$permission;\n\n  var handleChange = function handleChange(entry) {\n    // once we change the parent we have to change whole data and send to parent settingbody\n    // update parent radio selection in object\n    var newOption = settings.option.map(function (option) {\n      option.selected = option.name === entry.name;\n      return option;\n    });\n\n    var radioOptionGroup = _objectSpread(_objectSpread({}, settings), {}, {\n      option: newOption\n    });\n\n    setSettingOptions(radioOptionGroup); // new option group will be updated in setting config to pass it to map\n\n    var newSetting = settingConfig.map(function (option) {\n      return option.title === radioOptionGroup.title ? radioOptionGroup : option;\n    }); // updated data config will be sent to body to send it to map component\n\n    onChange(newSetting);\n  };\n\n  return permission ? /*#__PURE__*/React.createElement(StyledSettingOption, {\n    disabled: disabled && listOfDisabledTitle.includes(settings.title),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"title\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }, settings.label || settings.title), /*#__PURE__*/React.createElement(RadioGroup, {\n    id: \"radio\",\n    orientation: true,\n    spacing: 10,\n    variant: \"default\",\n    width: \"400px\",\n    label: settings.title,\n    labelColor: \"black\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  }, settings.option.map(function (_ref2, index) {\n    var image = _ref2.image,\n        _ref2$permission = _ref2.permission,\n        permission = _ref2$permission === void 0 ? true : _ref2$permission,\n        entry = _objectWithoutProperties(_ref2, [\"image\", \"permission\"]);\n\n    if (permission) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: \"\".concat(entry === null || entry === void 0 ? void 0 : entry.name, \"-\").concat(index, \"-\").concat(entry === null || entry === void 0 ? void 0 : entry.id),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Radio, {\n        id: entry.name,\n        onChange: function onChange() {\n          return handleChange(entry);\n        },\n        disabled: disabled && listOfDisabledTitle.includes(settings.title),\n        checked: entry.selected,\n        name: entry.name,\n        value: entry.name,\n        label: entry.label || entry.name,\n        radioSize: 13,\n        labelColor: \"black\",\n        labelComponent: /*#__PURE__*/React.createElement(Fragment, {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 23\n          }\n        }, /*#__PURE__*/React.createElement(StyledImage, {\n          src: image,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 25\n          }\n        }), /*#__PURE__*/React.createElement(RadioLabel, {\n          style: {\n            fontSize: '13px',\n            marginBottom: '6px'\n          },\n          htmlFor: entry.name,\n          color: \"black\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 25\n          }\n        }, entry.label || entry.name)),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 19\n        }\n      }));\n    } else return /*#__PURE__*/React.createElement(Fragment, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 27\n      }\n    });\n  }))) : null;\n};\n\nexport default RadioOption;","map":{"version":3,"sources":["/Users/farhanansari/Code/ui-library/src/components/atoms/SettingBox/Type/RadioOption.tsx"],"names":["React","Fragment","useState","Radio","RadioLabel","RadioGroup","StyledImage","StyledSettingOption","RadioOption","settingOption","onChange","settingConfig","disabled","listOfDisabledTitle","settings","setSettingOptions","permission","handleChange","entry","newOption","option","map","selected","name","radioOptionGroup","newSetting","title","includes","label","index","image","id","fontSize","marginBottom"],"mappings":"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","sourcesContent":["import React, { Fragment, useState } from 'react'\nimport Radio from '../../../atoms/Radio'\nimport { RadioLabel } from '../../Radio/Radio.styled'\nimport RadioGroup from '../../RadioGroup'\nimport { IOption, ISettingOption, ISubComponent } from '../interface'\nimport { StyledImage, StyledSettingOption } from '../StyledSettingBox'\n\nconst RadioOption = ({\n  settingOption,\n  onChange,\n  settingConfig,\n  disabled,\n  listOfDisabledTitle = []\n}: ISubComponent) => {\n  const [settings, setSettingOptions] = useState<ISettingOption>(settingOption)\n  // for hatmap and marker- map mode , if both the values  dont have permission,dont show section or else show whatever have permission\n  const { permission = true } = settings\n\n  const handleChange = (entry: IOption) => {\n    // once we change the parent we have to change whole data and send to parent settingbody\n    // update parent radio selection in object\n    const newOption = settings.option.map((option: IOption) => {\n      option.selected = option.name === entry.name\n      return option\n    })\n\n    const radioOptionGroup = { ...settings, option: newOption }\n    setSettingOptions(radioOptionGroup)\n    // new option group will be updated in setting config to pass it to map\n    const newSetting = settingConfig.map((option: ISettingOption) =>\n      option.title === radioOptionGroup.title ? radioOptionGroup : option\n    )\n    // updated data config will be sent to body to send it to map component\n    onChange(newSetting)\n  }\n\n  return permission ? (\n    <StyledSettingOption\n      disabled={disabled && listOfDisabledTitle.includes(settings.title)}\n    >\n      <div className='title'>{settings.label || settings.title}</div>\n      <RadioGroup\n        id='radio'\n        orientation\n        spacing={10}\n        variant='default'\n        width='400px'\n        label={settings.title}\n        labelColor='black'\n      >\n        {settings.option.map(\n          ({ image, permission = true, ...entry }: IOption, index: number) => {\n            if (permission) {\n              return (\n                <div key={`${entry?.name}-${index}-${entry?.id}`}>\n                  <Radio\n                    id={entry.name}\n                    onChange={() => handleChange(entry)}\n                    disabled={\n                      disabled && listOfDisabledTitle.includes(settings.title)\n                    }\n                    checked={entry.selected}\n                    name={entry.name}\n                    value={entry.name}\n                    label={entry.label || entry.name}\n                    radioSize={13}\n                    labelColor='black'\n                    labelComponent={\n                      <Fragment>\n                        <StyledImage src={image} />\n                        <RadioLabel\n                          style={{ fontSize: '13px', marginBottom: '6px' }}\n                          htmlFor={entry.name}\n                          color='black'\n                        >\n                          {entry.label || entry.name}\n                        </RadioLabel>\n                      </Fragment>\n                    }\n                  />\n                </div>\n              )\n            } else return <Fragment />\n          }\n        )}\n      </RadioGroup>\n    </StyledSettingOption>\n  ) : null\n}\nexport default RadioOption\n"]},"metadata":{},"sourceType":"module"}