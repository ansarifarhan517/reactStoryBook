{"ast":null,"code":"","map":{"version":3,"sources":[],"names":[],"mappings":"","sourcesContent":["import { ReactNode } from 'react'\n\nexport interface tDropDownOptions {\n  id: string\n  label: string | number\n  labelKey?: string | number\n  value: string | number\n  fieldType?: string\n  [key: string]: string | number | undefined\n}\n\nexport interface tFieldTypeObject {\n  [key: string]: tTypeObject[]\n}\n\nexport interface tTypeObject {\n  operation: string\n  operationSymbol: string\n  labelKey?: string\n  label: string\n  value: string\n}\n\nexport interface IFilter {\n  id: string\n  multiFilter?: string[]\n  isFavourite?: boolean\n  favouriteSections?: string[]\n  filterName?: string\n  filterObject?: IDropdownData[]\n  filterMasterCondition?: string\n  filterSortable?: boolean\n  filterApplied?: boolean\n  sortable?: {\n    columnName?: tDropDownOptions | string\n    sortOrder?: tDropDownOptions | string\n  }\n  allowSort?: boolean\n  advanceFilterTagReferenceIds?: string[]\n}\n\nexport interface IDropdownData {\n  columnName?: string | Object\n  operationType?: string | Object\n  element?: string\n  value?: string | number\n  label?: string | number\n}\n\nexport interface IThirdElementValue {\n  type: string\n  [key: string]: any\n}\n\nexport interface IAdvancedFilter {\n  id?: any\n  chipsArray: IFilterData[]\n  dropDownOptions: IColumnsStructure\n  fieldOperation: IOperationTypes\n  masterCondition?: boolean\n  backButton?: boolean\n  backButtonCallback?: () => void\n  children: ({ open, setOpen, chips }: tAdvancedFilterChildren) => ReactNode\n  onApply?: (filter: IExposeFilters) => void\n  onRemove?: (id: string) => void\n  onDelete?: (id: string) => void\n  onSave?: (filter: IExposeFilters) => void\n  onUpdate?: (filter: IExposeFilters) => void\n  onFavourite?: (filter: IFilterData) => void\n  onAddFilter?: () => void\n  onAddCondition?: () => void\n  ThirdElement: React.ComponentType<IThirdElementProps>\n  style?: React.CSSProperties\n  allowFavourites?: boolean\n  allowSort?: boolean\n  allowMultipleFilters?: boolean\n  showOpen?: boolean\n  // tooltip props\n  saveTooltip?: string\n  duplicateTooltip?: string\n  cancelTooltip?: string\n  removeFavouriteTooltip?: string\n  markAsfavouriteTooltip?: string\n  appliedFilterId?: string\n  ThirdElementFormatter?: (data: IThirdElementValue) => void\n}\n\nexport interface tAdvancedFilterChildren {\n  open: boolean\n  setOpen: React.Dispatch<React.SetStateAction<boolean>>\n  chips?: IFilter[]\n}\n\nexport interface IAdvancedFilterCardHeader {\n  id: string\n  label: string\n  name?: string\n  setName?: (name: string) => void\n  save?: () => void\n\n  favourite?: () => void\n  allowFavourites?: boolean\n  isFavourite?: boolean\n  duplicate?: () => void\n  close?: () => void\n  // tooltip\n  saveTooltip?: string\n  duplicateTooltip?: string\n  cancelTooltip?: string\n  favouriteTooltip?: string\n}\n\nexport interface IThirdElementProps {\n  columnName: string | tDropDownOptions\n  operationType: string | tTypeObject\n  value: any\n  setValue: any\n  fieldType?: string\n  label?: any\n  setLabel?: any\n}\n\nexport interface IHashSetColumnsData {\n  [key: string]: tDropDownOptions\n}\nexport interface IAdvancedFilterBodyProps {\n  columnsData: tDropDownOptions[]\n  HSetColumnData: IHashSetColumnsData\n  fieldOperation: tFieldTypeObject\n  chipsArray?: IFilter[]\n  handleDelete?: (id: string) => void\n  newFilterCard?: boolean\n  setNewFilterCard?: (status?: boolean) => void\n  showCard?: boolean\n  setShowCard?: (status?: boolean) => void\n  clearCard?: number\n  handleUpdateAndSave?: (filter: IRawExposedData) => void\n  onFavourite?: (filter: IRawExposedData) => void\n  openCard?: (filter: IFilter) => void\n  updateData?: (filters: IRawExposedData) => void\n  onAddCondition?: () => void\n  masterCondition?: boolean\n  sortDropdown?: tDropDownOptions[]\n  ThirdElement: React.ComponentType<IThirdElementProps>\n  allowFavourites?: boolean\n  allowSort?: boolean\n  allowMultipleFilters?: boolean\n  // tooltip props\n  saveTooltip?: string\n  duplicateTooltip?: string\n  cancelTooltip?: string\n  removeFavouriteTooltip?: string\n  markAsfavouriteTooltip?: string\n  showCardId?: string\n  ThirdElementFormatter?: (data: IThirdElementValue) => void\n}\nexport interface IFilterConditions {\n  id: string\n  readMode?: boolean\n  dropdownOptions: string\n  operationalOptions: {\n    options: tTypeObject[] | null\n    value: string\n    operationSymbol?: string\n    operation?: string\n  }\n  thirdElement: {\n    type: ReactNode | JSX.Element | undefined\n    value: any\n    label:any\n  }\n  fieldType?: string\n}\n\n/** *** Raw Data interfaces *****/\n\n// Pre defined Filters\nexport interface IExposedFilters {\n  fieldId?: string\n  filterData?: string | Record<string, string>\n  operationSymbol?: string\n  operationLabelKey?: string\n  fieldLabelKey?: string | number\n  customField?: boolean\n}\n\nexport interface IExposeFilters {\n  id?: string\n  filterName: string\n  isFavourite?: boolean\n  filters: IExposedFilters[]\n  operationLogic?: string\n}\n\nexport interface IRawExposedData {\n  filterData: IFilter\n  filterConditions: IFilterConditions[]\n}\nexport interface IFilterData {\n  id: string\n  filterName: string\n  ownerUserId?: number\n  pageName?: string\n  sectionName?: string\n  userGroupId?: number[]\n  userIds?: number[]\n  operationLogic?: string\n  advanceFilterTagReferenceIds?: string[]\n  filters?: IExposedFilters[]\n  sortCriteria?: IExposedFilters[]\n  isFavourite?: boolean\n  favouriteSections?: string[] | never[]\n  filterApplied?: boolean\n  [key: string]: any\n}\n\n// operation Types\nexport type tOperations = {\n  operation: string\n  operationSymbol: string\n  labelKey: string\n  labelValue: string // visible on dropdown\n}\nexport interface IOperationTypes {\n  [key: string]: tOperations[]\n}\n\nexport interface IColumnsStructure {\n  [key: string]: IColumnObject\n}\n\nexport interface IChildNode {\n  id?: string\n  label?: string\n  childLength?: number\n  childNodes?: IEmptyChildNode\n  customField?: boolean\n  searchable?: boolean\n  sortable?: boolean\n  fieldName?: string\n  fieldType?: string\n  [key: string]: any\n}\nexport type IEmptyChildNode = {}\n// column Structure\nexport interface IColumnObject {\n  id: string\n  label: string\n  childLength?: number\n  fieldName?: string\n  fieldType?: string\n  childNodes?: IEmptyChildNode | IChildNode\n  customField?: boolean\n  searchable?: boolean\n  sortable?: boolean\n  [key: string]: any\n}\n"]},"metadata":{},"sourceType":"module"}