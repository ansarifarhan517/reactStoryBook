{"ast":null,"code":"import _slicedToArray from \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/molecules/ExpandableListView/index.tsx\";\n\nimport React, { useMemo, useState } from 'react';\nimport { useTable, usePagination } from 'react-table';\nimport { ShowMoreContainer, StyledTable } from './ExpandableListView.styles';\n\nvar ExpandableListView = function ExpandableListView(_ref) {\n  var initialRows = _ref.initialRows,\n      tableData = _ref.tableData,\n      headers = _ref.headers;\n  var columns = useMemo(function () {\n    return headers;\n  }, [headers]);\n  var data = useMemo(function () {\n    return tableData;\n  }, [tableData]);\n\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      more = _useState2[0],\n      setMore = _useState2[1];\n\n  var handleClick = function handleClick() {\n    more ? setPageSize(data.length) : setPageSize(initialRows);\n    more ? setMore(false) : setMore(true);\n  };\n\n  var _useTable = useTable({\n    columns: columns,\n    data: data,\n    initialState: {\n      pageSize: initialRows\n    }\n  }, usePagination),\n      getTableProps = _useTable.getTableProps,\n      getTableBodyProps = _useTable.getTableBodyProps,\n      headerGroups = _useTable.headerGroups,\n      page = _useTable.page,\n      prepareRow = _useTable.prepareRow,\n      setPageSize = _useTable.setPageSize;\n\n  return /*#__PURE__*/React.createElement(StyledTable, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"table\", Object.assign({}, getTableProps(), {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"thead\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  }, headerGroups.map(function (headerGroup, i) {\n    return /*#__PURE__*/React.createElement(\"tr\", Object.assign({}, headerGroup.getHeaderGroupProps, {\n      key: i,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 13\n      }\n    }), headerGroup.headers.map(function (column, i) {\n      return /*#__PURE__*/React.createElement(\"th\", Object.assign({}, column.getHeaderProps({\n        style: {\n          minWidth: column.minWidth,\n          width: column.width,\n          maxWidth: column.maxWidth\n        }\n      }), {\n        key: i,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 17\n        }\n      }), column.render('Header'));\n    }));\n  })), /*#__PURE__*/React.createElement(\"tbody\", Object.assign({}, getTableBodyProps(), {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }), page.map(function (row, i) {\n    prepareRow(row);\n    return /*#__PURE__*/React.createElement(\"tr\", Object.assign({}, row.getRowProps(), {\n      key: i,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 15\n      }\n    }), row.cells.map(function (cell, i) {\n      return /*#__PURE__*/React.createElement(\"td\", Object.assign({}, cell.getCellProps, {\n        key: i,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 21\n        }\n      }), cell.render('Cell'));\n    }));\n  }))), initialRows < data.length && /*#__PURE__*/React.createElement(ShowMoreContainer, {\n    onClick: handleClick,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }, \"View \", more ? 'All' : 'Less'));\n};\n\nExpandableListView.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"ExpandableListView\"\n};\nexport default ExpandableListView;\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src/components/molecules/ExpandableListView/index.tsx\"] = {\n    name: \"ExpandableListView\",\n    docgenInfo: ExpandableListView.__docgenInfo,\n    path: \"src/components/molecules/ExpandableListView/index.tsx\"\n  };\n}","map":{"version":3,"sources":["/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/molecules/ExpandableListView/index.tsx"],"names":["React","useMemo","useState","useTable","usePagination","ShowMoreContainer","StyledTable","ExpandableListView","initialRows","tableData","headers","columns","data","more","setMore","handleClick","setPageSize","length","initialState","pageSize","getTableProps","getTableBodyProps","headerGroups","page","prepareRow","map","headerGroup","i","getHeaderGroupProps","column","getHeaderProps","style","minWidth","width","maxWidth","render","row","getRowProps","cells","cell","getCellProps"],"mappings":"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","sourcesContent":["import React, { useMemo, useState } from 'react'\nimport { useTable, usePagination } from 'react-table'\nimport { IExpandableTableProps } from './ExpandableListView.interfaces'\nimport { ShowMoreContainer, StyledTable } from './ExpandableListView.styles'\n\nconst ExpandableListView = ({\n  initialRows,\n  tableData,\n  headers\n}: IExpandableTableProps) => {\n  const columns = useMemo(() => headers, [headers])\n  const data = useMemo(() => tableData, [tableData])\n\n  const [more, setMore] = useState(true)\n\n  const handleClick = () => {\n    more ? setPageSize(data.length) : setPageSize(initialRows)\n    more ? setMore(false) : setMore(true)\n  }\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    page,\n    prepareRow,\n    setPageSize\n  } = useTable(\n    {\n      columns,\n      data,\n      initialState: { pageSize: initialRows }\n    },\n    usePagination\n  )\n\n  return (\n    <StyledTable>\n      <table {...getTableProps()}>\n        <thead>\n          {headerGroups.map((headerGroup: any, i: number) => (\n            <tr {...headerGroup.getHeaderGroupProps} key={i}>\n              {headerGroup.headers.map((column: any, i: number) => (\n                <th\n                  {...column.getHeaderProps({\n                    style: {\n                      minWidth: column.minWidth,\n                      width: column.width,\n                      maxWidth: column.maxWidth\n                    }\n                  })}\n                  key={i}\n                >\n                  {column.render('Header')}\n                </th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          {page.map((row: any, i: number) => {\n            prepareRow(row)\n            return (\n              <tr {...row.getRowProps()} key={i}>\n                {row.cells.map((cell: any, i: number) => {\n                  return (\n                    <td {...cell.getCellProps} key={i}>\n                      {cell.render('Cell')}\n                    </td>\n                  )\n                })}\n              </tr>\n            )\n          })}\n        </tbody>\n      </table>\n      {initialRows < data.length && (\n        <ShowMoreContainer onClick={handleClick}>\n          View {more ? 'All' : 'Less'}\n        </ShowMoreContainer>\n      )}\n    </StyledTable>\n  )\n}\n\nexport default ExpandableListView\n"]},"metadata":{},"sourceType":"module"}