{"ast":null,"code":"import _slicedToArray from \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useEffect, useState } from 'react';\nexport default function useDebounce(value, delay) {\n  // State and setters for debounced value\n  var _useState = useState(value),\n      _useState2 = _slicedToArray(_useState, 2),\n      debouncedValue = _useState2[0],\n      setDebouncedValue = _useState2[1];\n\n  useEffect(function () {\n    // Set debouncedValue to value (passed in) after the specified delay\n    var handler = setTimeout(function () {\n      setDebouncedValue(value);\n    }, delay); // Return a cleanup function that will be called every time ...\n    // ... useEffect is re-called. useEffect will only be re-called ...\n    // ... if value changes (see the inputs array below).\n    // This is how we prevent debouncedValue from changing if value is ...\n    // ... changed within the delay period. Timeout gets cleared and restarted.\n    // To put it in context, if the user is typing within our app's ...\n    // ... search box, we don't want the debouncedValue to update until ...\n    // ... they've stopped typing for more than 500ms.\n\n    return function () {\n      clearTimeout(handler);\n    };\n  }, // Only re-call effect if value changes\n  // You could also add the \"delay\" var to inputs array if you ...\n  // ... need to be able to change that dynamically.\n  [value]);\n  return debouncedValue;\n}","map":{"version":3,"sources":["/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/utilities/useDebounce.ts"],"names":["useEffect","useState","useDebounce","value","delay","debouncedValue","setDebouncedValue","handler","setTimeout","clearTimeout"],"mappings":";AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAEA,eAAe,SAASC,WAAT,CAAqBC,KAArB,EAAiCC,KAAjC,EAAgD;AAC7D;AAD6D,kBAEjBH,QAAQ,CAACE,KAAD,CAFS;AAAA;AAAA,MAEtDE,cAFsD;AAAA,MAEtCC,iBAFsC;;AAI7DN,EAAAA,SAAS,CACP,YAAM;AACJ;AACA,QAAMO,OAAO,GAAGC,UAAU,CAAC,YAAM;AAC/BF,MAAAA,iBAAiB,CAACH,KAAD,CAAjB;AACD,KAFyB,EAEvBC,KAFuB,CAA1B,CAFI,CAMJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,WAAO,YAAM;AACXK,MAAAA,YAAY,CAACF,OAAD,CAAZ;AACD,KAFD;AAGD,GAlBM,EAmBP;AACA;AACA;AACA,GAACJ,KAAD,CAtBO,CAAT;AAyBA,SAAOE,cAAP;AACD","sourcesContent":["import { useEffect, useState } from 'react'\n\nexport default function useDebounce(value: any, delay: number) {\n  // State and setters for debounced value\n  const [debouncedValue, setDebouncedValue] = useState(value)\n\n  useEffect(\n    () => {\n      // Set debouncedValue to value (passed in) after the specified delay\n      const handler = setTimeout(() => {\n        setDebouncedValue(value)\n      }, delay)\n\n      // Return a cleanup function that will be called every time ...\n      // ... useEffect is re-called. useEffect will only be re-called ...\n      // ... if value changes (see the inputs array below).\n      // This is how we prevent debouncedValue from changing if value is ...\n      // ... changed within the delay period. Timeout gets cleared and restarted.\n      // To put it in context, if the user is typing within our app's ...\n      // ... search box, we don't want the debouncedValue to update until ...\n      // ... they've stopped typing for more than 500ms.\n      return () => {\n        clearTimeout(handler)\n      }\n    },\n    // Only re-call effect if value changes\n    // You could also add the \"delay\" var to inputs array if you ...\n    // ... need to be able to change that dynamically.\n    [value]\n  )\n\n  return debouncedValue\n}\n"]},"metadata":{},"sourceType":"module"}