{"ast":null,"code":"import _slicedToArray from \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/atoms/Map/utils/LocationSearch/LocationSearch.tsx\";\n\n// The Component which displays Search input with suggestions\nimport React, { useEffect, useRef, useState, useContext } from 'react';\nimport GooglePlacesAutocomplete, { geocodeByPlaceId } from 'react-google-places-autocomplete';\nimport 'react-google-places-autocomplete/dist/index.min.css';\nimport { LocationSearchContainer, LocationSearchInput, ResultsContainer, Results, SearchIcon, CloseSuggestionIcon, StyledResult } from './StyledLocationSearch';\nimport { getDefaultTheme } from './../../../../../utilities/theme';\nimport FontIcon from '../../../FontIcon';\nimport { useLeaflet } from 'react-leaflet';\nimport { GeocodingContext } from '../..';\nimport { getAddressInfo } from '../../helperMethods';\nvar theme = getDefaultTheme();\n/****\n * suggestion example\n * {\n  \"description\": \"Powai Lake, Powai, Mumbai, Maharashtra\",\n  \"matched_substrings\": [\n    {\n      \"length\": 10,\n      \"offset\": 0\n    }\n  ],\n  \"place_id\": \"ChIJo6xQ__vH5zsRbDRmJ3PrN4Q\",\n  \"reference\": \"ChIJo6xQ__vH5zsRbDRmJ3PrN4Q\",\n  \"structured_formatting\": {\n    \"main_text\": \"Powai Lake\",\n    \"main_text_matched_substrings\": [\n      {\n        \"length\": 10,\n        \"offset\": 0\n      }\n    ],\n    \"secondary_text\": \"Powai, Mumbai, Maharashtra\"\n  },\n  \"terms\": [\n    {\n      \"offset\": 0,\n      \"value\": \"Powai Lake\"\n    },\n    {\n      \"offset\": 12,\n      \"value\": \"Powai\"\n    },\n    {\n      \"offset\": 19,\n      \"value\": \"Mumbai\"\n    },\n    {\n      \"offset\": 27,\n      \"value\": \"Maharashtra\"\n    }\n  ],\n  \"types\": [\n    \"natural_feature\",\n    \"establishment\"\n  ]\n}\n */\n\nvar LocationSearch = function LocationSearch(props) {\n  var _geocodingContext$geo, _geocodingContext$geo2, _geocodingContext$geo3, _googlePlacesAutocomp4, _googlePlacesAutocomp5;\n\n  var google = props.google,\n      onLocationSelect = props.onLocationSelect,\n      focusSearchPlace = props.focusSearchPlace,\n      isMarkerDragged = props.isMarkerDragged,\n      setIsMarkerDragged = props.setIsMarkerDragged,\n      setSearchFieldAddressInfo = props.setSearchFieldAddressInfo,\n      setIsMapSearched = props.setIsMapSearched,\n      isMapSearched = props.isMapSearched;\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      curser = _useState2[0],\n      setCursor = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      clickedSuggestion = _useState4[0],\n      setClickedSuggestion = _useState4[1];\n\n  var listOfsuggestions = [];\n\n  var _useLeaflet = useLeaflet(),\n      map = _useLeaflet.map;\n\n  var geocodingContext = useContext(GeocodingContext);\n  var position = geocodingContext === null || geocodingContext === void 0 ? void 0 : (_geocodingContext$geo = geocodingContext.geocoding) === null || _geocodingContext$geo === void 0 ? void 0 : _geocodingContext$geo.position;\n  var searchText = geocodingContext === null || geocodingContext === void 0 ? void 0 : (_geocodingContext$geo2 = geocodingContext.geocoding) === null || _geocodingContext$geo2 === void 0 ? void 0 : _geocodingContext$geo2.searchText;\n\n  var _useState5 = useState(geocodingContext === null || geocodingContext === void 0 ? void 0 : (_geocodingContext$geo3 = geocodingContext.geocoding) === null || _geocodingContext$geo3 === void 0 ? void 0 : _geocodingContext$geo3.position),\n      _useState6 = _slicedToArray(_useState5, 2),\n      currentPosition = _useState6[0],\n      setCurrentPosition = _useState6[1];\n\n  var _useState7 = useState(''),\n      _useState8 = _slicedToArray(_useState7, 2),\n      searchValue = _useState8[0],\n      setSearchValue = _useState8[1];\n\n  useEffect(function () {\n    var _geocodingContext$geo4;\n\n    setSearchValue((geocodingContext === null || geocodingContext === void 0 ? void 0 : (_geocodingContext$geo4 = geocodingContext.geocoding) === null || _geocodingContext$geo4 === void 0 ? void 0 : _geocodingContext$geo4.searchText) || '');\n  }, []);\n  useEffect(function () {\n    // is position getting changed then only go and find a loaction\n    try {\n      if (position && Number(currentPosition === null || currentPosition === void 0 ? void 0 : currentPosition[0]) !== Number(position === null || position === void 0 ? void 0 : position[0]) && Number(currentPosition === null || currentPosition === void 0 ? void 0 : currentPosition[1]) !== Number(position === null || position === void 0 ? void 0 : position[1])) {\n        // if(!Number.isNaN(position[0]) ){\n        setCurrentPosition(position);\n        var geocoder = new google.maps.Geocoder();\n        var latlngObj = {\n          lat: Number(position === null || position === void 0 ? void 0 : position[0]),\n          lng: Number(position === null || position === void 0 ? void 0 : position[1])\n        };\n        geocoder === null || geocoder === void 0 ? void 0 : geocoder.geocode({\n          latLng: latlngObj\n        }, function (responses) {\n          if (responses && responses.length > 0) {\n            var _nearestResponse;\n\n            var nearestResponse = responses['0'];\n            responses.forEach(function (res) {\n              if (res === null || res === void 0 ? void 0 : res.types.includes('premise')) {\n                nearestResponse = res;\n              }\n            });\n            var addressInfo = getAddressInfo( // eslint-disable-next-line camelcase\n            (_nearestResponse = nearestResponse) === null || _nearestResponse === void 0 ? void 0 : _nearestResponse.address_components);\n            addressInfo.position = position; // if marker dragged / geocoding location search-> send dynamic address\n            // if user searching on search field then send whatever user searched\n            // addressInfo.searchText = isMarkerDragged\n            //   ? nearestResponse.formatted_address\n            //   : geocodingContext?.geocoding?.searchText\n\n            setSearchFieldAddressInfo(addressInfo); // if dragged phenomenon explained in map file, first make it false\n            // for such case onLocationSelect  send true so that the name we are getting through this api will get\n            // reflcted in search input.If user manually search something or is coming through props then show user written value\n            // to achieve that send false as a third arg\n\n            if (isMarkerDragged) {\n              setIsMarkerDragged(false); // setSearchValue(responses['0'].formatted_address)\n            } // onLocationSelect(\n            //   [Number(position?.[0]), Number(position?.[1])],\n            //   // responses['0'].formatted_address,\n            //   isMarkerDragged\n            //     ? nearestResponse.formatted_address\n            //     : geocodingContext?.geocoding?.searchText,\n            //   !!isMarkerDragged\n            // )\n\n          }\n        });\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  }, [position]); // }, [geocodingContext?.geocoding?.position, currentPosition , searchValue])\n\n  useEffect(function () {\n    // if the searchtext is different that previous search and physically written or got through prop\n    // not dragged one then find lat long and set in map file onLocationSelect which will trigger above useEffect for lat long\n    if (position !== null && searchText !== searchValue && searchValue !== null && searchText !== '' && !isMarkerDragged) {\n      setSearchValue(searchText || ''); // only if search through map,(search text not coming as a prop)then go inside this loop\n\n      if (currentPosition && position && JSON.stringify(currentPosition) === JSON.stringify(position) && isMapSearched) {\n        return onLocationSelect(position, searchText || '', false);\n      }\n\n      var geocoder = new google.maps.Geocoder();\n      geocoder.geocode({\n        address: searchText\n      }, function (results, status) {\n        if (status === google.maps.GeocoderStatus.OK) {\n          var nearestLocation = results[0];\n          results === null || results === void 0 ? void 0 : results.forEach(function (res) {\n            if (res === null || res === void 0 ? void 0 : res.types.includes('premise')) {\n              nearestLocation = res;\n            }\n          });\n          var latitude = Number(nearestLocation.geometry.location.lat());\n          var longitude = Number(nearestLocation.geometry.location.lng());\n          onLocationSelect([latitude, longitude], searchText || '', false);\n        }\n      });\n    }\n  }, [searchText, isMarkerDragged]);\n  var googlePlacesAutocompleteRef = useRef();\n  useEffect(function () {\n    // if we dont want to focus search place. eg user wants change marker that time below variable will come false, just clear search value from search box\n    if (!focusSearchPlace) {\n      var _googlePlacesAutocomp;\n\n      googlePlacesAutocompleteRef === null || googlePlacesAutocompleteRef === void 0 ? void 0 : (_googlePlacesAutocomp = googlePlacesAutocompleteRef.current) === null || _googlePlacesAutocomp === void 0 ? void 0 : _googlePlacesAutocomp.clearValue();\n    }\n  }, [focusSearchPlace]);\n  useEffect(function () {\n    var _googlePlacesAutocomp2, _googlePlacesAutocomp3;\n\n    if (googlePlacesAutocompleteRef === null || googlePlacesAutocompleteRef === void 0 ? void 0 : (_googlePlacesAutocomp2 = googlePlacesAutocompleteRef.current) === null || _googlePlacesAutocomp2 === void 0 ? void 0 : (_googlePlacesAutocomp3 = _googlePlacesAutocomp2.state) === null || _googlePlacesAutocomp3 === void 0 ? void 0 : _googlePlacesAutocomp3.value) {\n      map === null || map === void 0 ? void 0 : map.doubleClickZoom.disable();\n      map === null || map === void 0 ? void 0 : map.boxZoom.disable();\n      map === null || map === void 0 ? void 0 : map.scrollWheelZoom.disable();\n      map === null || map === void 0 ? void 0 : map.dragging.disable();\n    }\n  }, [googlePlacesAutocompleteRef === null || googlePlacesAutocompleteRef === void 0 ? void 0 : (_googlePlacesAutocomp4 = googlePlacesAutocompleteRef.current) === null || _googlePlacesAutocomp4 === void 0 ? void 0 : (_googlePlacesAutocomp5 = _googlePlacesAutocomp4.state) === null || _googlePlacesAutocomp5 === void 0 ? void 0 : _googlePlacesAutocomp5.value]); // function when the location is selected/searched for\n\n  var selectLocation = function selectLocation(suggestion, event) {\n    event.preventDefault();\n    geocodeByPlaceId(suggestion === null || suggestion === void 0 ? void 0 : suggestion.place_id).then(function (results) {\n      var _place;\n\n      var place = results[0];\n      results === null || results === void 0 ? void 0 : results.forEach(function (res) {\n        if (res === null || res === void 0 ? void 0 : res.types.includes('premise')) {\n          place = res;\n        }\n      });\n      var loc = place.geometry.location;\n      var locBounds = place.geometry.viewport;\n      var googleBounds = new google.maps.LatLngBounds();\n      var formattedAddress = suggestion.description; // place.formatted_address\n\n      var addressInfo = getAddressInfo( // eslint-disable-next-line camelcase\n      (_place = place) === null || _place === void 0 ? void 0 : _place.address_components);\n      setCurrentPosition([loc.lat(), loc.lng()]);\n      addressInfo.position = [loc.lat(), loc.lng()];\n      addressInfo.searchText = formattedAddress;\n      setSearchFieldAddressInfo(addressInfo);\n      googleBounds.union(locBounds);\n      var bounds = [[googleBounds.getSouthWest().lat(), googleBounds.getSouthWest().lng()], [googleBounds.getNorthEast().lat(), googleBounds.getNorthEast().lng()]];\n\n      if (onLocationSelect !== undefined) {\n        onLocationSelect([loc.lat(), loc.lng()], formattedAddress, true, bounds);\n      }\n    });\n  };\n\n  var removeGeocoding = function removeGeocoding() {\n    // this is when you add some thing in lat long field(geocoding layer) and try to clear something in searchfield\n    // let geocoding layer find searchtext and then clear it\n    setTimeout(function () {\n      setSearchValue('');\n    }, 600);\n  };\n\n  var handleInputKeyPress = function handleInputKeyPress(e) {\n    // arrow up/down button should select next/previous list element\n    if (e.keyCode === 38 && curser > 0) {\n      setCursor(curser - 1);\n    } else if (e.keyCode === 40) {\n      setCursor(curser + 1);\n    }\n\n    setIsMapSearched(true);\n    map === null || map === void 0 ? void 0 : map.doubleClickZoom.disable();\n    map === null || map === void 0 ? void 0 : map.boxZoom.disable();\n    map === null || map === void 0 ? void 0 : map.scrollWheelZoom.disable();\n    map === null || map === void 0 ? void 0 : map.dragging.disable();\n\n    if (e.keyCode === 13) {\n      var _googlePlacesAutocomp6;\n\n      var selectedSuggestion = listOfsuggestions[curser] || ((_googlePlacesAutocomp6 = googlePlacesAutocompleteRef.current.state) === null || _googlePlacesAutocomp6 === void 0 ? void 0 : _googlePlacesAutocomp6.suggestions[curser]); // set hovered selected value\n\n      googlePlacesAutocompleteRef.current.changeValue(selectedSuggestion ? selectedSuggestion.description : googlePlacesAutocompleteRef.current.state.value); // set location on map\n\n      selectLocation(selectedSuggestion, e); // set cursor on 0\n\n      setCursor(0); // whenever you press enter your first value on the list gets selected so while rendering not to show any list of suggestion just set this flag\n\n      setClickedSuggestion(true);\n    } else {\n      // whenever you press any other key (its for either remove or write anthing)that time to show the list of suggestion just set this flag to false\n      setClickedSuggestion(false);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(LocationSearchContainer, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(GooglePlacesAutocomplete, {\n    placeholder: \"Search Places\",\n    ref: googlePlacesAutocompleteRef,\n    initialValue: searchValue // all the customizations for the search input\n    ,\n    renderInput: function renderInput(props) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"custom-wrapper\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 333,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(SearchIcon, {\n        className: \"icon icon-search\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 334,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 335,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(LocationSearchInput, Object.assign({}, props, {\n        placeholder: \"Search Places\",\n        onKeyDown: handleInputKeyPress,\n        onFocus: function onFocus() {\n          // whenevr focus on input disable double click zooming\n          map === null || map === void 0 ? void 0 : map.doubleClickZoom.disable();\n          map === null || map === void 0 ? void 0 : map.boxZoom.disable();\n          map === null || map === void 0 ? void 0 : map.scrollWheelZoom.disable();\n          map === null || map === void 0 ? void 0 : map.dragging.disable();\n        },\n        onBlur: function onBlur() {\n          // whenevr blue the input, enable again double click zooming\n          map === null || map === void 0 ? void 0 : map.doubleClickZoom.enable();\n          map === null || map === void 0 ? void 0 : map.boxZoom.enable();\n          map === null || map === void 0 ? void 0 : map.scrollWheelZoom.enable();\n          map === null || map === void 0 ? void 0 : map.dragging.enable();\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 17\n        }\n      })), props.value && (googlePlacesAutocompleteRef === null || googlePlacesAutocompleteRef === void 0 ? void 0 : googlePlacesAutocompleteRef.current) && /*#__PURE__*/React.createElement(CloseSuggestionIcon, {\n        onClick: function onClick() {\n          var _googlePlacesAutocomp7;\n\n          googlePlacesAutocompleteRef === null || googlePlacesAutocompleteRef === void 0 ? void 0 : (_googlePlacesAutocomp7 = googlePlacesAutocompleteRef.current) === null || _googlePlacesAutocomp7 === void 0 ? void 0 : _googlePlacesAutocomp7.clearValue();\n          removeGeocoding();\n        },\n        className: \"icon icon-close\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 356,\n          columnNumber: 19\n        }\n      })));\n    } // all the customization for the suggestions which appear\n    ,\n    renderSuggestions: function renderSuggestions(active, suggestions, onSelectSuggestion) {\n      listOfsuggestions = suggestions;\n\n      if (clickedSuggestion) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 372,\n            columnNumber: 20\n          }\n        });\n      }\n\n      return /*#__PURE__*/React.createElement(ResultsContainer, {\n        className: \"suggestions-container\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 375,\n          columnNumber: 13\n        }\n      }, suggestions && suggestions.map(function (suggestion, index) {\n        var _googlePlacesAutocomp8, _stateValue$trim;\n\n        // whatevr we type in input\n        var stateValue = googlePlacesAutocompleteRef === null || googlePlacesAutocompleteRef === void 0 ? void 0 : (_googlePlacesAutocomp8 = googlePlacesAutocompleteRef.current) === null || _googlePlacesAutocomp8 === void 0 ? void 0 : _googlePlacesAutocomp8.state.value; // as given above first text\n\n        var primaryText = suggestion.structured_formatting.main_text; // greyed text in the list of suggestion\n\n        var secondoryText = suggestion.structured_formatting.secondary_text;\n        var lengthOfString = stateValue.length;\n        var startIndexOFString = primaryText.toLowerCase().indexOf(stateValue === null || stateValue === void 0 ? void 0 : (_stateValue$trim = stateValue.trim()) === null || _stateValue$trim === void 0 ? void 0 : _stateValue$trim.toLowerCase());\n        var endIndex = startIndexOFString + lengthOfString; // in primary text whatever match with your input text make it bold\n\n        var matchedWord = primaryText.slice(0, endIndex); // unmatched one make normal but in black color\n\n        var unMatchedWord = primaryText.slice(endIndex, primaryText.length); // check stateValue is substring of description if yes then make it bold or else inactive calss apply\n\n        return /*#__PURE__*/React.createElement(StyledResult, {\n          key: index,\n          className: curser === index ? 'active suggestion' : 'suggestion',\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 402,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(FontIcon, {\n          variant: \"default-marker\",\n          color: curser === index ? 'charts.red' : 'grey.500',\n          size: 15,\n          hoverColor: \"red\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 408,\n            columnNumber: 23\n          }\n        }), /*#__PURE__*/React.createElement(Results, {\n          style: {\n            backgroundColor: active ? \"\".concat(theme === null || theme === void 0 ? void 0 : theme.colors.grey[100]) : ''\n          },\n          onClick: function onClick(event) {\n            // whatever user select, find lat lng and send it to map/index.jsx and through there to geocoding layer where we flyToBound that location\n            selectLocation(suggestion, event); // whenevr user select anything make this flag on so that we can dont show other suggestions on render\n\n            setClickedSuggestion(true); // send that suggestions to google component to handle internally\n\n            onSelectSuggestion(suggestion, event);\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 414,\n            columnNumber: 23\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            fontWeight: 'bold',\n            fontSize: '14px'\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 429,\n            columnNumber: 25\n          }\n        }, matchedWord), /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            fontWeight: 'normal',\n            fontSize: '14px',\n            color: '#000'\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 432,\n            columnNumber: 25\n          }\n        }, unMatchedWord, \" \", ', '), /*#__PURE__*/React.createElement(\"span\", {\n          className: \"inactive\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 441,\n            columnNumber: 25\n          }\n        }, secondoryText)));\n      }));\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default LocationSearch;","map":{"version":3,"sources":["/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/atoms/Map/utils/LocationSearch/LocationSearch.tsx"],"names":["React","useEffect","useRef","useState","useContext","GooglePlacesAutocomplete","geocodeByPlaceId","LocationSearchContainer","LocationSearchInput","ResultsContainer","Results","SearchIcon","CloseSuggestionIcon","StyledResult","getDefaultTheme","FontIcon","useLeaflet","GeocodingContext","getAddressInfo","theme","LocationSearch","props","google","onLocationSelect","focusSearchPlace","isMarkerDragged","setIsMarkerDragged","setSearchFieldAddressInfo","setIsMapSearched","isMapSearched","curser","setCursor","clickedSuggestion","setClickedSuggestion","listOfsuggestions","map","geocodingContext","position","geocoding","searchText","currentPosition","setCurrentPosition","searchValue","setSearchValue","Number","geocoder","maps","Geocoder","latlngObj","lat","lng","geocode","latLng","responses","length","nearestResponse","forEach","res","types","includes","addressInfo","address_components","e","console","log","JSON","stringify","address","results","status","GeocoderStatus","OK","nearestLocation","latitude","geometry","location","longitude","googlePlacesAutocompleteRef","current","clearValue","state","value","doubleClickZoom","disable","boxZoom","scrollWheelZoom","dragging","selectLocation","suggestion","event","preventDefault","place_id","then","place","loc","locBounds","viewport","googleBounds","LatLngBounds","formattedAddress","description","union","bounds","getSouthWest","getNorthEast","undefined","removeGeocoding","setTimeout","handleInputKeyPress","keyCode","selectedSuggestion","suggestions","changeValue","enable","active","onSelectSuggestion","index","stateValue","primaryText","structured_formatting","main_text","secondoryText","secondary_text","lengthOfString","startIndexOFString","toLowerCase","indexOf","trim","endIndex","matchedWord","slice","unMatchedWord","backgroundColor","colors","grey","fontWeight","fontSize","color"],"mappings":"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","sourcesContent":["// The Component which displays Search input with suggestions\n\nimport React, { useEffect, useRef, useState, useContext } from 'react'\nimport GooglePlacesAutocomplete, {\n  geocodeByPlaceId\n} from 'react-google-places-autocomplete'\nimport 'react-google-places-autocomplete/dist/index.min.css'\nimport {\n  LocationSearchContainer,\n  LocationSearchInput,\n  ResultsContainer,\n  Results,\n  SearchIcon,\n  CloseSuggestionIcon,\n  StyledResult\n} from './StyledLocationSearch'\nimport { getDefaultTheme } from './../../../../../utilities/theme'\nimport FontIcon from '../../../FontIcon'\nimport { useLeaflet } from 'react-leaflet'\nimport { GeocodingContext, IGeocodingContext } from '../..'\nimport { tSearchFieldAddressInfo } from '../../interfaces.d'\nimport { getAddressInfo } from '../../helperMethods'\nconst theme = getDefaultTheme()\n\n/****\n * suggestion example\n * {\n  \"description\": \"Powai Lake, Powai, Mumbai, Maharashtra\",\n  \"matched_substrings\": [\n    {\n      \"length\": 10,\n      \"offset\": 0\n    }\n  ],\n  \"place_id\": \"ChIJo6xQ__vH5zsRbDRmJ3PrN4Q\",\n  \"reference\": \"ChIJo6xQ__vH5zsRbDRmJ3PrN4Q\",\n  \"structured_formatting\": {\n    \"main_text\": \"Powai Lake\",\n    \"main_text_matched_substrings\": [\n      {\n        \"length\": 10,\n        \"offset\": 0\n      }\n    ],\n    \"secondary_text\": \"Powai, Mumbai, Maharashtra\"\n  },\n  \"terms\": [\n    {\n      \"offset\": 0,\n      \"value\": \"Powai Lake\"\n    },\n    {\n      \"offset\": 12,\n      \"value\": \"Powai\"\n    },\n    {\n      \"offset\": 19,\n      \"value\": \"Mumbai\"\n    },\n    {\n      \"offset\": 27,\n      \"value\": \"Maharashtra\"\n    }\n  ],\n  \"types\": [\n    \"natural_feature\",\n    \"establishment\"\n  ]\n}\n */\n\ninterface ILocationSearch {\n  google: any\n  onLocationSelect: (\n    position: any,\n    searchText?: any,\n    isMarkerDragged?: boolean,\n    bounds?: any,\n    zoom?: any,\n    isCustomSearch?: boolean\n  ) => void\n  focusSearchPlace: boolean\n  setIsMarkerDragged: (value: boolean) => void\n  isMarkerDragged: boolean\n  setSearchFieldAddressInfo: (info: tSearchFieldAddressInfo) => void\n  setIsMapSearched: (value: boolean) => void\n  isMapSearched: boolean\n}\n\nconst LocationSearch = (props: ILocationSearch) => {\n  const {\n    google,\n    onLocationSelect,\n    focusSearchPlace,\n    isMarkerDragged,\n    setIsMarkerDragged,\n    setSearchFieldAddressInfo,\n    setIsMapSearched,\n    isMapSearched\n  } = props\n  const [curser, setCursor] = useState<any>(0)\n  const [clickedSuggestion, setClickedSuggestion] = useState<boolean>(false)\n  let listOfsuggestions: any = []\n  const { map } = useLeaflet()\n  const geocodingContext: IGeocodingContext = useContext(GeocodingContext)\n  const position = geocodingContext?.geocoding?.position\n  const searchText = geocodingContext?.geocoding?.searchText\n  const [currentPosition, setCurrentPosition] = useState(\n    geocodingContext?.geocoding?.position\n  )\n  const [searchValue, setSearchValue] = useState<string>('')\n\n  useEffect(() => {\n    setSearchValue(geocodingContext?.geocoding?.searchText || '')\n  }, [])\n\n  useEffect(() => {\n    // is position getting changed then only go and find a loaction\n    try {\n      if (\n        position &&\n        Number(currentPosition?.[0]) !== Number(position?.[0]) &&\n        Number(currentPosition?.[1]) !== Number(position?.[1])\n      ) {\n        // if(!Number.isNaN(position[0]) ){\n        setCurrentPosition(position)\n        const geocoder = new google.maps.Geocoder()\n        const latlngObj: any = {\n          lat: Number(position?.[0]),\n          lng: Number(position?.[1])\n        }\n\n        geocoder?.geocode(\n          {\n            latLng: latlngObj\n          },\n          function (responses: any) {\n            if (responses && responses.length > 0) {\n              let nearestResponse = responses['0']\n              responses.forEach((res: any) => {\n                if (res?.types.includes('premise')) {\n                  nearestResponse = res\n                }\n              })\n\n              const addressInfo: tSearchFieldAddressInfo = getAddressInfo(\n                // eslint-disable-next-line camelcase\n                nearestResponse?.address_components\n              )\n              addressInfo.position = position\n              // if marker dragged / geocoding location search-> send dynamic address\n              // if user searching on search field then send whatever user searched\n              // addressInfo.searchText = isMarkerDragged\n              //   ? nearestResponse.formatted_address\n              //   : geocodingContext?.geocoding?.searchText\n              setSearchFieldAddressInfo(addressInfo)\n              // if dragged phenomenon explained in map file, first make it false\n              // for such case onLocationSelect  send true so that the name we are getting through this api will get\n              // reflcted in search input.If user manually search something or is coming through props then show user written value\n              // to achieve that send false as a third arg\n              if (isMarkerDragged) {\n                setIsMarkerDragged(false)\n                // setSearchValue(responses['0'].formatted_address)\n              }\n              // onLocationSelect(\n              //   [Number(position?.[0]), Number(position?.[1])],\n              //   // responses['0'].formatted_address,\n              //   isMarkerDragged\n              //     ? nearestResponse.formatted_address\n              //     : geocodingContext?.geocoding?.searchText,\n              //   !!isMarkerDragged\n              // )\n            }\n          }\n        )\n      }\n    } catch (e) {\n      console.log(e)\n    }\n  }, [position])\n  // }, [geocodingContext?.geocoding?.position, currentPosition , searchValue])\n\n  useEffect(() => {\n    // if the searchtext is different that previous search and physically written or got through prop\n    // not dragged one then find lat long and set in map file onLocationSelect which will trigger above useEffect for lat long\n    if (\n      position !== null &&\n      searchText !== searchValue &&\n      searchValue !== null &&\n      searchText !== '' &&\n      !isMarkerDragged\n    ) {\n      setSearchValue(searchText || '')\n      // only if search through map,(search text not coming as a prop)then go inside this loop\n      if (\n        currentPosition &&\n        position &&\n        JSON.stringify(currentPosition) === JSON.stringify(position) &&\n        isMapSearched\n      ) {\n        return onLocationSelect(position, searchText || '', false)\n      }\n\n      const geocoder = new google.maps.Geocoder()\n      geocoder.geocode({ address: searchText }, function (\n        results: any,\n        status: any\n      ) {\n        if (status === google.maps.GeocoderStatus.OK) {\n          let nearestLocation = results[0]\n          results?.forEach((res: any) => {\n            if (res?.types.includes('premise')) {\n              nearestLocation = res\n            }\n          })\n          const latitude = Number(nearestLocation.geometry.location.lat())\n          const longitude = Number(nearestLocation.geometry.location.lng())\n\n          onLocationSelect([latitude, longitude], searchText || '', false)\n        }\n      })\n    }\n  }, [searchText, isMarkerDragged])\n\n  const googlePlacesAutocompleteRef: any = useRef()\n\n  useEffect(() => {\n    // if we dont want to focus search place. eg user wants change marker that time below variable will come false, just clear search value from search box\n    if (!focusSearchPlace) {\n      googlePlacesAutocompleteRef?.current?.clearValue()\n    }\n  }, [focusSearchPlace])\n\n  useEffect(() => {\n    if (googlePlacesAutocompleteRef?.current?.state?.value) {\n      map?.doubleClickZoom.disable()\n      map?.boxZoom.disable()\n      map?.scrollWheelZoom.disable()\n      map?.dragging.disable()\n    }\n  }, [googlePlacesAutocompleteRef?.current?.state?.value])\n\n  // function when the location is selected/searched for\n  const selectLocation = (suggestion: any, event: any) => {\n    event.preventDefault()\n    geocodeByPlaceId(suggestion?.place_id).then((results) => {\n      let place = results[0]\n      results?.forEach((res: any) => {\n        if (res?.types.includes('premise')) {\n          place = res\n        }\n      })\n\n      const loc: any = place.geometry.location\n      const locBounds: any = place.geometry.viewport\n      const googleBounds = new google.maps.LatLngBounds()\n      const formattedAddress = suggestion.description\n      // place.formatted_address\n      const addressInfo: tSearchFieldAddressInfo = getAddressInfo(\n        // eslint-disable-next-line camelcase\n        place?.address_components\n      )\n\n      setCurrentPosition([loc.lat(), loc.lng()])\n      addressInfo.position = [loc.lat(), loc.lng()]\n      addressInfo.searchText = formattedAddress\n\n      setSearchFieldAddressInfo(addressInfo)\n      googleBounds.union(locBounds)\n      const bounds = [\n        [googleBounds.getSouthWest().lat(), googleBounds.getSouthWest().lng()],\n        [googleBounds.getNorthEast().lat(), googleBounds.getNorthEast().lng()]\n      ]\n      if (onLocationSelect !== undefined) {\n        onLocationSelect([loc.lat(), loc.lng()], formattedAddress, true, bounds)\n      }\n    })\n  }\n\n  const removeGeocoding = () => {\n    // this is when you add some thing in lat long field(geocoding layer) and try to clear something in searchfield\n    // let geocoding layer find searchtext and then clear it\n    setTimeout(() => {\n      setSearchValue('')\n    }, 600)\n  }\n\n  const handleInputKeyPress = (e: any) => {\n    // arrow up/down button should select next/previous list element\n    if (e.keyCode === 38 && curser > 0) {\n      setCursor(curser - 1)\n    } else if (e.keyCode === 40) {\n      setCursor(curser + 1)\n    }\n    setIsMapSearched(true)\n    map?.doubleClickZoom.disable()\n    map?.boxZoom.disable()\n    map?.scrollWheelZoom.disable()\n    map?.dragging.disable()\n    if (e.keyCode === 13) {\n      const selectedSuggestion =\n        listOfsuggestions[curser] ||\n        googlePlacesAutocompleteRef.current.state?.suggestions[curser]\n\n      // set hovered selected value\n      googlePlacesAutocompleteRef.current.changeValue(\n        selectedSuggestion\n          ? selectedSuggestion.description\n          : googlePlacesAutocompleteRef.current.state.value\n      )\n\n      // set location on map\n      selectLocation(selectedSuggestion, e)\n      // set cursor on 0\n      setCursor(0)\n      // whenever you press enter your first value on the list gets selected so while rendering not to show any list of suggestion just set this flag\n      setClickedSuggestion(true)\n    } else {\n      // whenever you press any other key (its for either remove or write anthing)that time to show the list of suggestion just set this flag to false\n      setClickedSuggestion(false)\n    }\n  }\n\n  return (\n    <LocationSearchContainer>\n      <GooglePlacesAutocomplete\n        placeholder='Search Places'\n        ref={googlePlacesAutocompleteRef}\n        initialValue={searchValue}\n        // all the customizations for the search input\n        renderInput={(props: any) => {\n          return (\n            <div className='custom-wrapper'>\n              <SearchIcon className='icon icon-search' />\n              <div>\n                <LocationSearchInput\n                  {...props}\n                  placeholder='Search Places'\n                  onKeyDown={handleInputKeyPress}\n                  onFocus={() => {\n                    // whenevr focus on input disable double click zooming\n                    map?.doubleClickZoom.disable()\n                    map?.boxZoom.disable()\n                    map?.scrollWheelZoom.disable()\n                    map?.dragging.disable()\n                  }}\n                  onBlur={() => {\n                    // whenevr blue the input, enable again double click zooming\n                    map?.doubleClickZoom.enable()\n                    map?.boxZoom.enable()\n                    map?.scrollWheelZoom.enable()\n                    map?.dragging.enable()\n                  }}\n                />\n                {props.value && googlePlacesAutocompleteRef?.current && (\n                  <CloseSuggestionIcon\n                    onClick={() => {\n                      googlePlacesAutocompleteRef?.current?.clearValue()\n                      removeGeocoding()\n                    }}\n                    className='icon icon-close'\n                  />\n                )}\n              </div>\n            </div>\n          )\n        }}\n        // all the customization for the suggestions which appear\n        renderSuggestions={(active, suggestions: any, onSelectSuggestion) => {\n          listOfsuggestions = suggestions\n          if (clickedSuggestion) {\n            return <div />\n          }\n          return (\n            <ResultsContainer className='suggestions-container'>\n              {suggestions &&\n                suggestions.map((suggestion: any, index: number) => {\n                  // whatevr we type in input\n                  const stateValue =\n                    googlePlacesAutocompleteRef?.current?.state.value\n                  // as given above first text\n                  const primaryText = suggestion.structured_formatting.main_text\n                  // greyed text in the list of suggestion\n                  const secondoryText =\n                    suggestion.structured_formatting.secondary_text\n\n                  const lengthOfString = stateValue.length\n                  const startIndexOFString = primaryText\n                    .toLowerCase()\n                    .indexOf(stateValue?.trim()?.toLowerCase())\n\n                  const endIndex = startIndexOFString + lengthOfString\n                  // in primary text whatever match with your input text make it bold\n                  const matchedWord = primaryText.slice(0, endIndex)\n                  // unmatched one make normal but in black color\n                  const unMatchedWord = primaryText.slice(\n                    endIndex,\n                    primaryText.length\n                  )\n                  // check stateValue is substring of description if yes then make it bold or else inactive calss apply\n                  return (\n                    <StyledResult\n                      key={index}\n                      className={\n                        curser === index ? 'active suggestion' : 'suggestion'\n                      }\n                    >\n                      <FontIcon\n                        variant='default-marker'\n                        color={curser === index ? 'charts.red' : 'grey.500'}\n                        size={15}\n                        hoverColor='red'\n                      />\n                      <Results\n                        style={{\n                          backgroundColor: active\n                            ? `${theme?.colors.grey[100]}`\n                            : ''\n                        }}\n                        onClick={(event: any) => {\n                          // whatever user select, find lat lng and send it to map/index.jsx and through there to geocoding layer where we flyToBound that location\n                          selectLocation(suggestion, event)\n                          // whenevr user select anything make this flag on so that we can dont show other suggestions on render\n                          setClickedSuggestion(true)\n                          // send that suggestions to google component to handle internally\n                          onSelectSuggestion(suggestion, event)\n                        }}\n                      >\n                        <span style={{ fontWeight: 'bold', fontSize: '14px' }}>\n                          {matchedWord}\n                        </span>\n                        <span\n                          style={{\n                            fontWeight: 'normal',\n                            fontSize: '14px',\n                            color: '#000'\n                          }}\n                        >\n                          {unMatchedWord} {', '}\n                        </span>\n                        <span className='inactive'>{secondoryText}</span>\n                      </Results>\n                    </StyledResult>\n                  )\n                })}\n            </ResultsContainer>\n          )\n        }}\n      />\n    </LocationSearchContainer>\n  )\n}\n\nexport default LocationSearch\n"]},"metadata":{},"sourceType":"module"}