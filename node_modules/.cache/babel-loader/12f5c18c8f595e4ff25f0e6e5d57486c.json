{"ast":null,"code":"import _toConsumableArray from \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/molecules/GroupedDropdown/Components/List.tsx\";\n\nimport React, { useEffect, useState } from 'react';\nimport TextInput from '../../TextInput';\nimport { StyledListWrapper, Option, OptionWrapper } from '../styled';\n\nvar List = function List(_ref) {\n  var options = _ref.options,\n      value = _ref.value,\n      onChange = _ref.onChange,\n      placeholder = _ref.placeholder,\n      label = _ref.label;\n\n  var _useState = useState(value),\n      _useState2 = _slicedToArray(_useState, 2),\n      searchValue = _useState2[0],\n      setSearchValue = _useState2[1];\n\n  var _useState3 = useState(options),\n      _useState4 = _slicedToArray(_useState3, 2),\n      optionList = _useState4[0],\n      setOptionList = _useState4[1];\n\n  var handleSearch = function handleSearch(e) {\n    setSearchValue(e.target.value);\n    var arr = options === null || options === void 0 ? void 0 : options.filter(function (f) {\n      var _ref2, _ref2$toLowerCase;\n\n      return (_ref2 = f.labelText || f.label) === null || _ref2 === void 0 ? void 0 : (_ref2$toLowerCase = _ref2.toLowerCase()) === null || _ref2$toLowerCase === void 0 ? void 0 : _ref2$toLowerCase.includes((e.target.value || '').toLowerCase());\n    });\n    arr && setOptionList(_toConsumableArray(arr));\n  };\n\n  useEffect(function () {\n    setOptionList(options);\n  }, [options]);\n  useEffect(function () {\n    setSearchValue(value);\n  }, [value]);\n  return /*#__PURE__*/React.createElement(StyledListWrapper, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(TextInput, {\n    id: \"groupedDropdownSearch\",\n    name: \"groupedDropdownSearch\",\n    className: \"groupedDropdownSearch\",\n    label: label,\n    placeholder: placeholder,\n    fullWidth: true,\n    onChange: handleSearch,\n    value: searchValue && (searchValue === null || searchValue === void 0 ? void 0 : searchValue.label),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(OptionWrapper, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }, optionList ? optionList.map(function (o) {\n    return /*#__PURE__*/React.createElement(Option, {\n      key: o.value,\n      onClick: function onClick() {\n        return onChange(o);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }\n    }, o.label);\n  }) : 'No Option'));\n};\n\nexport default List;","map":{"version":3,"sources":["/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/molecules/GroupedDropdown/Components/List.tsx"],"names":["React","useEffect","useState","TextInput","StyledListWrapper","Option","OptionWrapper","List","options","value","onChange","placeholder","label","searchValue","setSearchValue","optionList","setOptionList","handleSearch","e","target","arr","filter","f","labelText","toLowerCase","includes","map","o"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AAEA,SAASC,iBAAT,EAA4BC,MAA5B,EAAoCC,aAApC,QAAyD,WAAzD;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO,OAAkE;AAAA,MAA/DC,OAA+D,QAA/DA,OAA+D;AAAA,MAAtDC,KAAsD,QAAtDA,KAAsD;AAAA,MAA/CC,QAA+C,QAA/CA,QAA+C;AAAA,MAArCC,WAAqC,QAArCA,WAAqC;AAAA,MAAxBC,KAAwB,QAAxBA,KAAwB;;AAAA,kBACvCV,QAAQ,CAACO,KAAD,CAD+B;AAAA;AAAA,MACtEI,WADsE;AAAA,MACzDC,cADyD;;AAAA,mBAEzCZ,QAAQ,CAACM,OAAD,CAFiC;AAAA;AAAA,MAEtEO,UAFsE;AAAA,MAE1DC,aAF0D;;AAI7E,MAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,CAAD,EAAY;AAC/BJ,IAAAA,cAAc,CAACI,CAAC,CAACC,MAAF,CAASV,KAAV,CAAd;AACA,QAAMW,GAAG,GAAGZ,OAAH,aAAGA,OAAH,uBAAGA,OAAO,CAAEa,MAAT,CAAgB,UAACC,CAAD,EAAY;AAAA;;AACtC,sBAAQA,CAAC,CAACC,SAAF,IAAeD,CAAC,CAACV,KAAzB,+DAAO,MACHY,WADG,EAAP,sDAAO,kBAEHC,QAFG,CAEM,CAACP,CAAC,CAACC,MAAF,CAASV,KAAT,IAAkB,EAAnB,EAAuBe,WAAvB,EAFN,CAAP;AAGD,KAJW,CAAZ;AAKAJ,IAAAA,GAAG,IAAIJ,aAAa,oBAAKI,GAAL,EAApB;AACD,GARD;;AAUAnB,EAAAA,SAAS,CAAC,YAAM;AACde,IAAAA,aAAa,CAACR,OAAD,CAAb;AACD,GAFQ,EAEN,CAACA,OAAD,CAFM,CAAT;AAIAP,EAAAA,SAAS,CAAC,YAAM;AACda,IAAAA,cAAc,CAACL,KAAD,CAAd;AACD,GAFQ,EAEN,CAACA,KAAD,CAFM,CAAT;AAIA,sBACE,oBAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,SAAD;AACE,IAAA,EAAE,EAAC,uBADL;AAEE,IAAA,IAAI,EAAC,uBAFP;AAGE,IAAA,SAAS,EAAC,uBAHZ;AAIE,IAAA,KAAK,EAAEG,KAJT;AAKE,IAAA,WAAW,EAAED,WALf;AAME,IAAA,SAAS,MANX;AAOE,IAAA,QAAQ,EAAEM,YAPZ;AAQE,IAAA,KAAK,EAAEJ,WAAW,KAAIA,WAAJ,aAAIA,WAAJ,uBAAIA,WAAW,CAAED,KAAjB,CARpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAWE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGG,UAAU,GACPA,UAAU,CAACW,GAAX,CAAe,UAACC,CAAD,EAAY;AACzB,wBACE,oBAAC,MAAD;AAAQ,MAAA,GAAG,EAAEA,CAAC,CAAClB,KAAf;AAAsB,MAAA,OAAO,EAAE;AAAA,eAAMC,QAAQ,CAACiB,CAAD,CAAd;AAAA,OAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGA,CAAC,CAACf,KADL,CADF;AAKD,GAND,CADO,GAQP,WATN,CAXF,CADF;AAyBD,CA/CD;;AAiDA,eAAeL,IAAf","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport TextInput from '../../TextInput'\nimport { IListProps } from '../interfaces'\nimport { StyledListWrapper, Option, OptionWrapper } from '../styled'\n\nconst List = ({ options, value, onChange, placeholder, label }: IListProps) => {\n  const [searchValue, setSearchValue] = useState(value)\n  const [optionList, setOptionList] = useState(options)\n\n  const handleSearch = (e: any) => {\n    setSearchValue(e.target.value)\n    const arr = options?.filter((f: any) => {\n      return (f.labelText || f.label)\n        ?.toLowerCase()\n        ?.includes((e.target.value || '').toLowerCase())\n    })\n    arr && setOptionList([...arr])\n  }\n\n  useEffect(() => {\n    setOptionList(options)\n  }, [options])\n\n  useEffect(() => {\n    setSearchValue(value)\n  }, [value])\n\n  return (\n    <StyledListWrapper>\n      <TextInput\n        id='groupedDropdownSearch'\n        name='groupedDropdownSearch'\n        className='groupedDropdownSearch'\n        label={label}\n        placeholder={placeholder}\n        fullWidth\n        onChange={handleSearch}\n        value={searchValue && searchValue?.label}\n      />\n      <OptionWrapper>\n        {optionList\n          ? optionList.map((o: any) => {\n              return (\n                <Option key={o.value} onClick={() => onChange(o)}>\n                  {o.label}\n                </Option>\n              )\n            })\n          : 'No Option'}\n      </OptionWrapper>\n    </StyledListWrapper>\n  )\n}\n\nexport default List\n"]},"metadata":{},"sourceType":"module"}