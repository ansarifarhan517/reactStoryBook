{"ast":null,"code":"import _slicedToArray from \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/atoms/Map/layers/LeafletGeocodingLayer.tsx\";\n\n// The marker layer which will display all the markers and marker clusters\nimport React, { useEffect, useState } from 'react';\nimport { Marker, useLeaflet } from 'react-leaflet';\nimport LL from 'leaflet'; // import markerIcons from '../dummyData/MarkerIcon.sampleData'\n\nimport imgUrl from \"../../../../assets/icons/Bigmarker_red.svg\";\nimport { GeocodingFieldsWrapper, GeocodingField } from './../utils/LocationSearch/StyledLocationSearch';\nimport IconButton from '../../IconButton';\nimport Box from '../../Box';\n\n// The layer with actual markers\nvar LeafletGeocodingLayer = function LeafletGeocodingLayer(props) {\n  var _geocoding$position, _geocoding$position2, _props$geocoding2, _props$geocoding3, _props$geocoding4, _props$geocoding5, _props$geocoding6, _props$geocoding6$pos, _props$geocoding7, _props$geocoding7$pos, _props$geocoding8, _props$geocoding9;\n\n  var iconsRef = props.iconsRef,\n      geocoding = props.geocoding,\n      focusSearchPlace = props.focusSearchPlace,\n      setIsMarkerDragged = props.setIsMarkerDragged,\n      setIsMapSearched = props.setIsMapSearched,\n      theMap = props.theMap,\n      _props$zoomLGC = props.zoomLGC,\n      zoomLGC = _props$zoomLGC === void 0 ? 14 : _props$zoomLGC;\n\n  var _useState = useState(geocoding === null || geocoding === void 0 ? void 0 : (_geocoding$position = geocoding.position) === null || _geocoding$position === void 0 ? void 0 : _geocoding$position[0]),\n      _useState2 = _slicedToArray(_useState, 2),\n      lat = _useState2[0],\n      setLat = _useState2[1];\n\n  var _useState3 = useState(geocoding === null || geocoding === void 0 ? void 0 : (_geocoding$position2 = geocoding.position) === null || _geocoding$position2 === void 0 ? void 0 : _geocoding$position2[1]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      _long = _useState4[0],\n      setLong = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isLocationChanged = _useState6[0],\n      setIsLocationChanged = _useState6[1];\n\n  var oldLatLong = React.useMemo(function () {\n    var _geocoding$position3, _geocoding$position4;\n\n    return {\n      lat: geocoding === null || geocoding === void 0 ? void 0 : (_geocoding$position3 = geocoding.position) === null || _geocoding$position3 === void 0 ? void 0 : _geocoding$position3[0],\n      \"long\": geocoding === null || geocoding === void 0 ? void 0 : (_geocoding$position4 = geocoding.position) === null || _geocoding$position4 === void 0 ? void 0 : _geocoding$position4[1]\n    };\n  }, []);\n  var oldSearchText = React.useMemo(function () {\n    return geocoding === null || geocoding === void 0 ? void 0 : geocoding.searchText;\n  }, []);\n\n  var _useLeaflet = useLeaflet(),\n      map = _useLeaflet.map;\n\n  var markerIcon = LL.icon({\n    iconUrl: imgUrl\n  });\n\n  if (iconsRef === null || iconsRef === void 0 ? void 0 : iconsRef.locationSearch) {\n    markerIcon = new LL.DivIcon(iconsRef === null || iconsRef === void 0 ? void 0 : iconsRef.locationSearch);\n  }\n\n  useEffect(function () {\n    var _geocoding$position5, _geocoding$position6, _geocoding$position7, _geocoding$position8;\n\n    // if location get changed by search/dragdrop or geocoding set this flag true and show save and reset\n    if (lat !== (geocoding === null || geocoding === void 0 ? void 0 : (_geocoding$position5 = geocoding.position) === null || _geocoding$position5 === void 0 ? void 0 : _geocoding$position5[0]) && _long !== (geocoding === null || geocoding === void 0 ? void 0 : (_geocoding$position6 = geocoding.position) === null || _geocoding$position6 === void 0 ? void 0 : _geocoding$position6[1])) {\n      setIsLocationChanged(true);\n    }\n\n    setLat(geocoding === null || geocoding === void 0 ? void 0 : (_geocoding$position7 = geocoding.position) === null || _geocoding$position7 === void 0 ? void 0 : _geocoding$position7[0]);\n    setLong(geocoding === null || geocoding === void 0 ? void 0 : (_geocoding$position8 = geocoding.position) === null || _geocoding$position8 === void 0 ? void 0 : _geocoding$position8[1]);\n  }, [geocoding.position]);\n  useEffect(function () {\n    // if serach text in search box and focusSearchPlace is true then set map view directly\n    // we are not using flytoBound -reason is map bound giving(includes marker while caluculating bound) resulting not focusing on search place\n    if (map && geocoding.searchText === '' && (geocoding === null || geocoding === void 0 ? void 0 : geocoding.position)) {\n      map.setView(geocoding === null || geocoding === void 0 ? void 0 : geocoding.position, zoomLGC, {\n        duration: 0.5\n      });\n    } else if (map && geocoding.searchText && focusSearchPlace) {\n      map.setView(geocoding === null || geocoding === void 0 ? void 0 : geocoding.position, zoomLGC, {\n        duration: 0.5\n      });\n    } else {\n      // if nothing in search box , whatever map bound giving(includes marker while caluculating bound) just fly on that.\n      var newMapBounds = map === null || map === void 0 ? void 0 : map.getBounds();\n\n      if (map && newMapBounds && Object.keys(newMapBounds).length) {\n        map.flyToBounds(newMapBounds, {\n          maxZoom: 14,\n          duration: 0.5,\n          padding: LL.point(100, 100)\n        });\n      }\n    }\n  }, [map, focusSearchPlace, geocoding === null || geocoding === void 0 ? void 0 : geocoding.position]);\n\n  var markerDragend = function markerDragend(event) {\n    var _theMap$current;\n\n    var curZoom = theMap === null || theMap === void 0 ? void 0 : (_theMap$current = theMap.current) === null || _theMap$current === void 0 ? void 0 : _theMap$current.leafletElement.getZoom();\n\n    try {\n      var _props$geocoding, _event$target$getLatL3, _event$target$getLatL4;\n\n      if (props.onLocationSelect !== undefined) {\n        var _event$target$getLatL, _event$target$getLatL2;\n\n        setIsMarkerDragged(true);\n        props.onLocationSelect([Number((_event$target$getLatL = event.target.getLatLng()) === null || _event$target$getLatL === void 0 ? void 0 : _event$target$getLatL.lat), Number((_event$target$getLatL2 = event.target.getLatLng()) === null || _event$target$getLatL2 === void 0 ? void 0 : _event$target$getLatL2.lng)], '', true, null, curZoom);\n      }\n\n      ((_props$geocoding = props.geocoding) === null || _props$geocoding === void 0 ? void 0 : _props$geocoding.onGeocodingDragEnd) && props.geocoding.onGeocodingDragEnd([Number((_event$target$getLatL3 = event.target.getLatLng()) === null || _event$target$getLatL3 === void 0 ? void 0 : _event$target$getLatL3.lat), Number((_event$target$getLatL4 = event.target.getLatLng()) === null || _event$target$getLatL4 === void 0 ? void 0 : _event$target$getLatL4.lng)]);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  var onLatChange = function onLatChange(e) {\n    var newLat = parseFloat(e.target.value || lat);\n    setLat(newLat);\n  }; // whenevr lat long both there on blur,send lat long to location select in map\n  // there is updateGeocoding will trigger position change,\n  // position change will trigger useEffect in Location search and as it dragging phenomenon(not physically writting something in input)\n  // keeping separate state to capture that.So that in Location search on the basis of this key we can decide to show dragged location which coming through api or user written searchtext\n\n\n  var onBlurGeoFields = function onBlurGeoFields() {\n    if (lat && _long) {\n      setIsMarkerDragged(true); // to tell user i searched it through map drag marker\n\n      setIsMapSearched(false);\n      setTimeout(function () {\n        props.onLocationSelect([Number(lat), Number(_long)], '', true, null, zoomLGC);\n      }, 500);\n    }\n  };\n\n  var onLongChange = function onLongChange(e) {\n    var newLong = parseFloat(e.target.value || _long);\n    setLong(newLong);\n  };\n\n  var onReset = function onReset() {\n    setLat(oldLatLong.lat);\n    setLong(oldLatLong[\"long\"]);\n    props.onLocationSelect([oldLatLong === null || oldLatLong === void 0 ? void 0 : oldLatLong.lat, oldLatLong === null || oldLatLong === void 0 ? void 0 : oldLatLong[\"long\"]], oldSearchText, true);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 5\n    }\n  }, (props === null || props === void 0 ? void 0 : (_props$geocoding2 = props.geocoding) === null || _props$geocoding2 === void 0 ? void 0 : _props$geocoding2.position) &&\n  /*#__PURE__*/\n  // props?.geocoding?.searchText &&\n\n  /* focusSearchPlace && */\n  React.createElement(Marker, {\n    draggable: (_props$geocoding3 = props.geocoding) === null || _props$geocoding3 === void 0 ? void 0 : _props$geocoding3.permission,\n    autoPan: true,\n    ondragend: function ondragend(e) {\n      // even when we drag , we are searching indirectly through map\n      setIsMapSearched(false);\n      markerDragend(e);\n    },\n    position: props === null || props === void 0 ? void 0 : (_props$geocoding4 = props.geocoding) === null || _props$geocoding4 === void 0 ? void 0 : _props$geocoding4.position,\n    icon: markerIcon,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 9\n    }\n  }), (props === null || props === void 0 ? void 0 : (_props$geocoding5 = props.geocoding) === null || _props$geocoding5 === void 0 ? void 0 : _props$geocoding5.permission) && /*#__PURE__*/React.createElement(GeocodingFieldsWrapper, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(GeocodingField, {\n    id: \"map_latitude\",\n    className: \"geocodingField latitude\",\n    type: \"number\",\n    onChange: function onChange(e) {\n      onLatChange(e);\n    },\n    placeholder: \"Latitude\",\n    onBlur: function onBlur() {\n      return onBlurGeoFields();\n    },\n    value: lat || '',\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(GeocodingField, {\n    id: \"map_longitude\",\n    className: \"geocodingField longitude\",\n    type: \"number\",\n    onChange: function onChange(e) {\n      onLongChange(e);\n    },\n    onBlur: function onBlur() {\n      return onBlurGeoFields();\n    },\n    placeholder: \"Longitude\",\n    value: _long || '',\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 11\n    }\n  }), ((_props$geocoding6 = props.geocoding) === null || _props$geocoding6 === void 0 ? void 0 : (_props$geocoding6$pos = _props$geocoding6.position) === null || _props$geocoding6$pos === void 0 ? void 0 : _props$geocoding6$pos[0]) && ((_props$geocoding7 = props.geocoding) === null || _props$geocoding7 === void 0 ? void 0 : (_props$geocoding7$pos = _props$geocoding7.position) === null || _props$geocoding7$pos === void 0 ? void 0 : _props$geocoding7$pos[1]) && ((_props$geocoding8 = props.geocoding) === null || _props$geocoding8 === void 0 ? void 0 : _props$geocoding8.onGeocodingSave) && ((_props$geocoding9 = props.geocoding) === null || _props$geocoding9 === void 0 ? void 0 : _props$geocoding9.isSave) && isLocationChanged && /*#__PURE__*/React.createElement(Box, {\n    display: \"flex\",\n    flexDirection: \"row\",\n    style: {\n      animation: 'fadeInUp 0.5s linear 0s'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(IconButton, {\n    iconVariant: \"icomoon-save\",\n    primary: true,\n    style: {\n      height: 35,\n      marginRight: '10px'\n    },\n    onClick: function onClick() {\n      var _props$geocoding10;\n\n      return (_props$geocoding10 = props.geocoding) === null || _props$geocoding10 === void 0 ? void 0 : _props$geocoding10.onGeocodingSave(props.geocoding);\n    },\n    children: \"Save\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(IconButton, {\n    iconVariant: \"icomoon-back\",\n    style: {\n      height: 35\n    },\n    onClick: function onClick() {\n      return onReset();\n    },\n    children: \"Reset\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 17\n    }\n  }))));\n};\n\nexport default LeafletGeocodingLayer;","map":{"version":3,"sources":["/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/atoms/Map/layers/LeafletGeocodingLayer.tsx"],"names":["React","useEffect","useState","Marker","useLeaflet","LL","GeocodingFieldsWrapper","GeocodingField","IconButton","Box","LeafletGeocodingLayer","props","iconsRef","geocoding","focusSearchPlace","setIsMarkerDragged","setIsMapSearched","theMap","zoomLGC","position","lat","setLat","long","setLong","isLocationChanged","setIsLocationChanged","oldLatLong","useMemo","oldSearchText","searchText","map","markerIcon","icon","iconUrl","imgUrl","locationSearch","DivIcon","setView","duration","newMapBounds","getBounds","Object","keys","length","flyToBounds","maxZoom","padding","point","markerDragend","event","curZoom","current","leafletElement","getZoom","onLocationSelect","undefined","Number","target","getLatLng","lng","onGeocodingDragEnd","e","console","log","onLatChange","newLat","parseFloat","value","onBlurGeoFields","setTimeout","onLongChange","newLong","onReset","permission","onGeocodingSave","isSave","animation","height","marginRight"],"mappings":"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","sourcesContent":["// The marker layer which will display all the markers and marker clusters\n\nimport React, { useEffect, useState } from 'react'\nimport { Marker, useLeaflet } from 'react-leaflet'\nimport ILeafletMapProps from '../interfaces.d'\nimport LL from 'leaflet'\n// import markerIcons from '../dummyData/MarkerIcon.sampleData'\nimport imgUrl from '../../../../assets/icons/Bigmarker_red.svg'\nimport {\n  GeocodingFieldsWrapper,\n  GeocodingField\n} from './../utils/LocationSearch/StyledLocationSearch'\nimport IconButton from '../../IconButton'\nimport Box from '../../Box'\n\ninterface ILeafletGeocodingLayer extends ILeafletMapProps {\n  focusSearchPlace: boolean\n  onLocationSelect: (\n    position: any,\n    searchText?: any,\n    isMarkerDragged?: boolean,\n    bounds?: any,\n    zoom?: any\n  ) => void\n  setIsMarkerDragged: (value: boolean) => void\n  setIsMapSearched: (value: boolean) => void\n  theMap: any\n  zoomLGC?: number\n}\n\n// The layer with actual markers\nconst LeafletGeocodingLayer = (props: ILeafletGeocodingLayer) => {\n  const {\n    iconsRef,\n    geocoding,\n    // settingConfig,\n    focusSearchPlace,\n    setIsMarkerDragged,\n    setIsMapSearched,\n    theMap,\n    zoomLGC=14\n  } = props\n  const [lat, setLat] = useState(geocoding?.position?.[0])\n  const [long, setLong] = useState(geocoding?.position?.[1])\n  const [isLocationChanged, setIsLocationChanged] = useState<boolean>(false)\n  const oldLatLong = React.useMemo(() => {\n    return { lat: geocoding?.position?.[0], long: geocoding?.position?.[1] }\n  }, [])\n  const oldSearchText = React.useMemo(() => geocoding?.searchText, [])\n\n  const { map } = useLeaflet()\n  let markerIcon: any = LL.icon({\n    iconUrl: imgUrl\n  })\n  if (iconsRef?.locationSearch) {\n    markerIcon = new LL.DivIcon(iconsRef?.locationSearch)\n  }\n\n  useEffect(() => {\n    // if location get changed by search/dragdrop or geocoding set this flag true and show save and reset\n    if (lat !== geocoding?.position?.[0] && long !== geocoding?.position?.[1]) {\n      setIsLocationChanged(true)\n    }\n    setLat(geocoding?.position?.[0])\n    setLong(geocoding?.position?.[1])\n  }, [geocoding.position])\n\n  useEffect(() => {\n    // if serach text in search box and focusSearchPlace is true then set map view directly\n    // we are not using flytoBound -reason is map bound giving(includes marker while caluculating bound) resulting not focusing on search place\n    if (map && geocoding.searchText === '' && geocoding?.position) {\n      map.setView(geocoding?.position, zoomLGC, { duration: 0.5 })\n    } else if (map && geocoding.searchText && focusSearchPlace) {\n      map.setView(geocoding?.position, zoomLGC, { duration: 0.5 })\n    } else {\n      // if nothing in search box , whatever map bound giving(includes marker while caluculating bound) just fly on that.\n      const newMapBounds = map?.getBounds()\n      if (map && newMapBounds && Object.keys(newMapBounds).length) {\n        map.flyToBounds(newMapBounds, {\n          maxZoom: 14,\n          duration: 0.5,\n          padding: LL.point(100, 100)\n        })\n      }\n    }\n  }, [map, focusSearchPlace, geocoding?.position])\n\n  const markerDragend = (event: any) => {\n    const curZoom = theMap?.current?.leafletElement.getZoom()\n    try {\n      if (props.onLocationSelect !== undefined) {\n        setIsMarkerDragged(true)\n        props.onLocationSelect(\n          [\n            Number(event.target.getLatLng()?.lat),\n            Number(event.target.getLatLng()?.lng)\n          ],\n          '',\n          true,\n          null,\n          curZoom\n        )\n      }\n\n      props.geocoding?.onGeocodingDragEnd &&\n        props.geocoding.onGeocodingDragEnd([\n          Number(event.target.getLatLng()?.lat),\n          Number(event.target.getLatLng()?.lng)\n        ])\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  const onLatChange = (e: any) => {\n    const newLat = parseFloat(e.target.value || lat)\n    setLat(newLat)\n  }\n  // whenevr lat long both there on blur,send lat long to location select in map\n  // there is updateGeocoding will trigger position change,\n  // position change will trigger useEffect in Location search and as it dragging phenomenon(not physically writting something in input)\n  // keeping separate state to capture that.So that in Location search on the basis of this key we can decide to show dragged location which coming through api or user written searchtext\n  const onBlurGeoFields = () => {\n    if (lat && long) {\n      setIsMarkerDragged(true)\n      // to tell user i searched it through map drag marker\n      setIsMapSearched(false)\n      setTimeout(() => {\n        props.onLocationSelect([Number(lat), Number(long)], '', true, null, zoomLGC)\n      }, 500)\n    }\n  }\n  const onLongChange = (e: any) => {\n    const newLong = parseFloat(e.target.value || long)\n    setLong(newLong)\n  }\n  const onReset = () => {\n    setLat(oldLatLong.lat)\n    setLong(oldLatLong.long)\n    props.onLocationSelect(\n      [oldLatLong?.lat, oldLatLong?.long],\n      oldSearchText,\n      true\n    )\n  }\n\n  return (\n    <React.Fragment>\n      {props?.geocoding?.position && (\n        // props?.geocoding?.searchText &&\n        /* focusSearchPlace && */\n        <Marker\n          draggable={props.geocoding?.permission}\n          autoPan\n          ondragend={(e: any) => {\n            // even when we drag , we are searching indirectly through map\n            setIsMapSearched(false)\n            markerDragend(e)\n          }}\n          position={props?.geocoding?.position}\n          icon={markerIcon}\n        />\n      )}\n\n      {props?.geocoding?.permission && (\n        <GeocodingFieldsWrapper>\n          <GeocodingField\n            id='map_latitude'\n            className='geocodingField latitude'\n            type='number'\n            onChange={(e) => {\n              onLatChange(e)\n            }}\n            placeholder='Latitude'\n            onBlur={() => onBlurGeoFields()}\n            value={lat || ''}\n          />\n          <GeocodingField\n            id='map_longitude'\n            className='geocodingField longitude'\n            type='number'\n            onChange={(e) => {\n              onLongChange(e)\n            }}\n            onBlur={() => onBlurGeoFields()}\n            placeholder='Longitude'\n            value={long || ''}\n          />\n\n          {/* Save geocoding button */}\n          {props.geocoding?.position?.[0] &&\n            props.geocoding?.position?.[1] &&\n            props.geocoding?.onGeocodingSave &&\n            props.geocoding?.isSave &&\n            isLocationChanged && (\n              <Box\n                display='flex'\n                flexDirection='row'\n                style={{ animation: 'fadeInUp 0.5s linear 0s' }}\n              >\n                <IconButton\n                  iconVariant='icomoon-save'\n                  primary\n                  style={{ height: 35, marginRight: '10px' }}\n                  onClick={() =>\n                    props.geocoding?.onGeocodingSave(props.geocoding)\n                  }\n                  children='Save'\n                />\n\n                <IconButton\n                  iconVariant='icomoon-back'\n                  style={{ height: 35 }}\n                  onClick={() => onReset()}\n                  children='Reset'\n                />\n              </Box>\n            )}\n        </GeocodingFieldsWrapper>\n      )}\n    </React.Fragment>\n  )\n}\n\nexport default LeafletGeocodingLayer\n"]},"metadata":{},"sourceType":"module"}