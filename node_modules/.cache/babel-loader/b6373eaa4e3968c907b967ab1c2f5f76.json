{"ast":null,"code":"import _slicedToArray from \"/Users/farhanansari/Code/ui-library/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/farhanansari/Code/ui-library/src/components/molecules/GroupedDropdown/index.tsx\";\n\nimport React, { useEffect, useState } from 'react';\nimport { DropdownStyled, CategoryTabStyled, GroupedDropdownWrapper } from './styled';\nimport CategoryTab from './Components/CategoryTab';\nimport { prepareAllArray } from './utils';\nimport List from './Components/List';\n\nvar GroupedDropdown = function GroupedDropdown(_ref) {\n  var category = _ref.category,\n      data = _ref.data,\n      width = _ref.width,\n      handleOnChange = _ref.handleOnChange,\n      _ref$searchFieldLabel = _ref.searchFieldLabel,\n      searchFieldLabel = _ref$searchFieldLabel === void 0 ? 'Search' : _ref$searchFieldLabel,\n      _ref$searchFieldPlace = _ref.searchFieldPlaceholder,\n      searchFieldPlaceholder = _ref$searchFieldPlace === void 0 ? 'Search Tags' : _ref$searchFieldPlace,\n      _ref$allLabel = _ref.allLabel,\n      allLabel = _ref$allLabel === void 0 ? 'All' : _ref$allLabel;\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      Data = _useState2[0],\n      setData = _useState2[1];\n\n  var _useState3 = useState(category),\n      _useState4 = _slicedToArray(_useState3, 2),\n      categoryData = _useState4[0],\n      setCategoryData = _useState4[1];\n\n  var _useState5 = useState(category[0].id),\n      _useState6 = _slicedToArray(_useState5, 2),\n      currentCategory = _useState6[0],\n      setCurrentCategory = _useState6[1];\n\n  var _useState7 = useState(),\n      _useState8 = _slicedToArray(_useState7, 2),\n      options = _useState8[0],\n      setOptions = _useState8[1];\n\n  var _useState9 = useState(undefined),\n      _useState10 = _slicedToArray(_useState9, 2),\n      value = _useState10[0],\n      setValue = _useState10[1];\n\n  useEffect(function () {\n    var all = prepareAllArray(data, category, allLabel);\n    setCategoryData(all.category);\n    setCurrentCategory(all.category[0].id);\n    setData(all);\n  }, [data]);\n  useEffect(function () {\n    Data && setOptions(Data.data[currentCategory]);\n  }, [currentCategory]);\n\n  var onTabChange = function onTabChange(id) {\n    setValue(undefined);\n    setCurrentCategory(id);\n  };\n\n  var onChange = function onChange(value) {\n    var categoryObj = categoryData.find(function (m) {\n      return m.id === currentCategory;\n    });\n    categoryObj && handleOnChange(value, categoryObj);\n  };\n\n  return /*#__PURE__*/React.createElement(GroupedDropdownWrapper, {\n    width: width,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(CategoryTabStyled, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(CategoryTab, {\n    category: categoryData && categoryData,\n    onTabChange: onTabChange,\n    currentCategory: currentCategory,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(DropdownStyled, {\n    className: \"d-inline-block\",\n    \"data-toggle\": \"popover\",\n    \"data-trigger\": \"focus\",\n    \"data-content\": \"Search\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(List, {\n    options: options && options,\n    value: value && value,\n    placeholder: searchFieldPlaceholder,\n    label: searchFieldLabel,\n    onChange: onChange,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  })));\n};\n\nGroupedDropdown.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"GroupedDropdown\",\n  \"props\": {\n    \"searchFieldLabel\": {\n      \"defaultValue\": {\n        \"value\": \"'Search'\",\n        \"computed\": false\n      },\n      \"required\": false\n    },\n    \"searchFieldPlaceholder\": {\n      \"defaultValue\": {\n        \"value\": \"'Search Tags'\",\n        \"computed\": false\n      },\n      \"required\": false\n    },\n    \"allLabel\": {\n      \"defaultValue\": {\n        \"value\": \"'All'\",\n        \"computed\": false\n      },\n      \"required\": false\n    }\n  }\n};\nexport default GroupedDropdown;\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src/components/molecules/GroupedDropdown/index.tsx\"] = {\n    name: \"GroupedDropdown\",\n    docgenInfo: GroupedDropdown.__docgenInfo,\n    path: \"src/components/molecules/GroupedDropdown/index.tsx\"\n  };\n}","map":{"version":3,"sources":["/Users/farhanansari/Code/ui-library/src/components/molecules/GroupedDropdown/index.tsx"],"names":["React","useEffect","useState","DropdownStyled","CategoryTabStyled","GroupedDropdownWrapper","CategoryTab","prepareAllArray","List","GroupedDropdown","category","data","width","handleOnChange","searchFieldLabel","searchFieldPlaceholder","allLabel","Data","setData","categoryData","setCategoryData","id","currentCategory","setCurrentCategory","options","setOptions","undefined","value","setValue","all","onTabChange","onChange","categoryObj","find","m"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport {\n  IGroupedDropdownProps,\n  ICategoryData,\n  IData,\n  ICategory\n} from './interfaces'\nimport {\n  DropdownStyled,\n  CategoryTabStyled,\n  GroupedDropdownWrapper\n} from './styled'\n\nimport CategoryTab from './Components/CategoryTab'\nimport { prepareAllArray } from './utils'\nimport List from './Components/List'\n\nconst GroupedDropdown = ({\n  category,\n  data,\n  width,\n  handleOnChange,\n  searchFieldLabel = 'Search',\n  searchFieldPlaceholder = 'Search Tags',\n  allLabel = 'All'\n}: IGroupedDropdownProps) => {\n  const [Data, setData] = useState<undefined | IData>()\n  const [categoryData, setCategoryData] = useState<ICategory[]>(category)\n  const [currentCategory, setCurrentCategory] = useState<string>(category[0].id)\n  const [options, setOptions] = useState<ICategoryData[] | undefined>()\n  const [value, setValue] = useState(undefined)\n\n  useEffect(() => {\n    const all = prepareAllArray(data, category, allLabel)\n    setCategoryData(all.category)\n    setCurrentCategory(all.category[0].id)\n    setData(all)\n  }, [data])\n\n  useEffect(() => {\n    Data && setOptions(Data.data[currentCategory])\n  }, [currentCategory])\n\n  const onTabChange = (id: string) => {\n    setValue(undefined)\n    setCurrentCategory(id)\n  }\n  const onChange = (value: ICategoryData) => {\n    const categoryObj = categoryData.find(\n      (m: ICategory) => m.id === currentCategory\n    )\n    categoryObj && handleOnChange(value, categoryObj)\n  }\n\n  return (\n    <GroupedDropdownWrapper width={width}>\n      <CategoryTabStyled>\n        <CategoryTab\n          category={categoryData && categoryData}\n          onTabChange={onTabChange}\n          currentCategory={currentCategory}\n        />\n      </CategoryTabStyled>\n\n      {/* Dropdown */}\n      <DropdownStyled\n        className='d-inline-block'\n        data-toggle='popover'\n        data-trigger='focus'\n        data-content='Search'\n      >\n        <List\n          options={options && options}\n          value={value && value}\n          placeholder={searchFieldPlaceholder}\n          label={searchFieldLabel}\n          onChange={onChange}\n        />\n      </DropdownStyled>\n    </GroupedDropdownWrapper>\n  )\n}\n\nexport default GroupedDropdown\n"]},"metadata":{},"sourceType":"module"}