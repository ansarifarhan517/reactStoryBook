{"ast":null,"code":"import _objectSpread from \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/atoms/Map/layers/LeafletPolygonEditLayer.tsx\";\n\nimport LL from 'leaflet';\nimport React, { useEffect, useState } from 'react';\nimport { FeatureGroup, useLeaflet } from 'react-leaflet';\nimport { EditControl } from 'react-leaflet-draw';\nimport { intersect, multiPolygon, area } from 'turf';\nimport { StyledPopUp, PolygonToast } from '../StyledMap';\nimport Toast from '../../../molecules/Toast/Toast';\nimport EditPopUp from '../SubComponent/EditPopUp';\nimport ReactDOMServer from \"react-dom/server\";\n\nvar _ = require('lodash');\n\nvar checkIntersection = function checkIntersection(thisPolygon, polygonInfo) {\n  var polygonData = polygonInfo.data;\n  var positionCoordinateKey = polygonInfo.positionCoordinateKey; // in data which key gives coordinates\n\n  var intersectionFl = false; // all polygon layers\n\n  polygonData.forEach(function (polygonOption) {\n    var optionObj = polygonOption[positionCoordinateKey];\n    var optionArray = [];\n    optionObj.forEach(function (coordinate) {\n      optionArray.push(Object.values(coordinate));\n    }); // [[lat,long],[lat,long]]\n\n    var otherPolygon = multiPolygon([[_createTurfCompatiblePolygon(optionObj)]]);\n\n    try {\n      var intersection = intersect(thisPolygon, otherPolygon);\n\n      if (intersection) {\n        if (intersection.geometry.type === 'MultiPolygon') {\n          intersectionFl = true;\n        }\n      }\n    } catch (err) {\n      intersectionFl = true;\n    }\n  });\n  return intersectionFl;\n};\n\nvar _createTurfCompatiblePolygon = function _createTurfCompatiblePolygon(coordinates) {\n  var newValue = coordinates.map(function (eachCoordinate) {\n    return Object.values(eachCoordinate);\n  });\n  return newValue;\n};\n\nvar LeafletPolygonEditLayer = function LeafletPolygonEditLayer(_ref) {\n  var editLayer = _ref.editLayer,\n      createPermission = _ref.createPermission,\n      orinalCoordinatesKey = _ref.orinalCoordinatesKey,\n      polygon = _ref.polygon,\n      editPopUpComponent = _ref.editPopUpComponent,\n      onChange = _ref.onChange,\n      setFeatureGroupProps = _ref.setFeatureGroupProps;\n  var featureGroupRef = React.useRef();\n  var editRef = React.useRef();\n  var createdLayerRef = React.useRef();\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      removedLayer = _useState2[0],\n      setRemovedLayer = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      showToast = _useState4[0],\n      setShowToast = _useState4[1];\n\n  var colorKey = polygon.colorKey; // the color of polygon\n\n  var styleKeys = polygon === null || polygon === void 0 ? void 0 : polygon.styleKey; // circle style\n\n  var renderer = LL.canvas({\n    padding: 0.5\n  }); // adding renderer if canvasRenderer present in polygon\n\n  var _useLeaflet = useLeaflet(),\n      map = _useLeaflet.map;\n\n  var obj = document.getElementById('closePopupBtn');\n\n  if (obj !== null) {\n    obj.onclick = function () {\n      map === null || map === void 0 ? void 0 : map.closePopup();\n      createdLayerRef.current.unbindPopup();\n    };\n  }\n\n  useEffect(function () {\n    var _Object$keys;\n\n    if (createdLayerRef.current && ((_Object$keys = Object.keys(createdLayerRef.current)) === null || _Object$keys === void 0 ? void 0 : _Object$keys.length) > 0) {\n      createdLayerRef.current.on(\"click popupclose\", function () {\n        map === null || map === void 0 ? void 0 : map.closePopup();\n        createdLayerRef.current.unbindPopup();\n      });\n    }\n  }, [createdLayerRef.current]);\n  useEffect(function () {\n    renderPloyLayer();\n    return function () {\n      var _Object$keys2;\n\n      if (createdLayerRef.current && ((_Object$keys2 = Object.keys(createdLayerRef.current)) === null || _Object$keys2 === void 0 ? void 0 : _Object$keys2.length) > 0) {\n        createdLayerRef.current.off(\"click popupclose\");\n      }\n    };\n  }, []);\n\n  var renderPloyLayer = function renderPloyLayer() {\n    // populate the leaflet FeatureGroup with the geoJson layers\n    if ((featureGroupRef === null || featureGroupRef === void 0 ? void 0 : featureGroupRef.current) && orinalCoordinatesKey) {\n      // eslint-disable-next-line\n      var leafletFG = featureGroupRef === null || featureGroupRef === void 0 ? void 0 : featureGroupRef.current;\n      /* eslint-disable-line no-alert */\n\n      var leafletElement = leafletFG.leafletElement;\n      var geoJsonData = editLayer === null || editLayer === void 0 ? void 0 : editLayer.data; // suppose geoJsonData [{bhiwandi},{Dadar}]\n\n      var coordinates = geoJsonData.map(function (option) {\n        var optionObj = option[orinalCoordinatesKey];\n        var optionArray = [];\n        optionObj.forEach(function (coordinate) {\n          optionArray.push(Object.values(coordinate));\n        }); // [[lat,long],[lat,long]]\n\n        return optionArray;\n      }); // [{latitude:'',longitude:''},{latitude:'',longitude:''}]\n\n      var polyLayers = [];\n      coordinates === null || coordinates === void 0 ? void 0 : coordinates.forEach(function (option) {\n        polyLayers.push(LL.polygon(option, {\n          interactive: true,\n          lineJoin: 'round',\n          lineCap: 'round',\n          fill: true,\n          stroke: true,\n          fillColor: (styleKeys === null || styleKeys === void 0 ? void 0 : styleKeys.fillColor) && option[styleKeys === null || styleKeys === void 0 ? void 0 : styleKeys.fillColor] ? option[styleKeys === null || styleKeys === void 0 ? void 0 : styleKeys.fillColor] : '',\n          fillOpacity: (styleKeys === null || styleKeys === void 0 ? void 0 : styleKeys.fillOpacity) && option[styleKeys === null || styleKeys === void 0 ? void 0 : styleKeys.fillOpacity] ? option[styleKeys === null || styleKeys === void 0 ? void 0 : styleKeys.fillOpacity] : 0.2,\n          opacity: 1,\n          smoothFactor: (styleKeys === null || styleKeys === void 0 ? void 0 : styleKeys.smoothFactor) && option[styleKeys === null || styleKeys === void 0 ? void 0 : styleKeys.smoothFactor] ? option[styleKeys === null || styleKeys === void 0 ? void 0 : styleKeys.smoothFactor] : 1,\n          renderer: (option === null || option === void 0 ? void 0 : option.canvasRenderer) ? renderer : null,\n          color: option[colorKey] ? option[colorKey] : '#3388ff'\n        }));\n      });\n\n      for (var _i = 0, _polyLayers = polyLayers; _i < _polyLayers.length; _i++) {\n        var _layer$editing;\n\n        var layer = _polyLayers[_i];\n        // add polygon layer to featuregroup\n        leafletElement.addLayer(layer); // make poly layer editable on load\n\n        layer === null || layer === void 0 ? void 0 : (_layer$editing = layer.editing) === null || _layer$editing === void 0 ? void 0 : _layer$editing.enable();\n      }\n\n      setFeatureGroupProps === null || setFeatureGroupProps === void 0 ? void 0 : setFeatureGroupProps(_objectSpread({}, featureGroupRef === null || featureGroupRef === void 0 ? void 0 : featureGroupRef.current));\n    }\n  }; // when creating new layer, keep it editable and remove previous all layer, only one edited layer creation is permitted\n\n\n  var _onCreated = function _onCreated(e) {\n    var _drawnItems$latestCre;\n\n    var layer = e.layer;\n    layer.bindPopup(ReactDOMServer.renderToString( /*#__PURE__*/React.createElement(EditPopUp, {\n      onClick: function onClick() {\n        map === null || map === void 0 ? void 0 : map.closePopup();\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 51\n      }\n    }))).openPopup();\n    createdLayerRef.current = layer; // all layer on featuregroup\n\n    var drawnItems = featureGroupRef.current.leafletElement._layers; // all editable layer with newly created layer on last index on array\n\n    var drawnItemsValue = Object.keys(drawnItems);\n    var latestCreatedItem = drawnItemsValue[drawnItemsValue.length - 1]; // only created layer will remain,lat lang of that layer\n\n    var newLatLng = (_drawnItems$latestCre = drawnItems[latestCreatedItem]) === null || _drawnItems$latestCre === void 0 ? void 0 : _drawnItems$latestCre._latlngs[0];\n\n    var polyObjTurfCompatible = _createTurfCompatiblePolygon(newLatLng); // user created below polygon\n\n\n    var thisPolygon = multiPolygon([[polyObjTurfCompatible]]);\n    var isInterSection = checkIntersection(thisPolygon, polygon);\n\n    if (drawnItemsValue.length > 0) {\n      drawnItemsValue.forEach(function (layerid) {\n        var layer = drawnItems[layerid]; // if intersection then remove last latest layer and keep old data\n\n        if (isInterSection) {\n          if (latestCreatedItem === layerid) {\n            // remove latest layer and add old layers\n            featureGroupRef.current.leafletElement.removeLayer(layer);\n            removedLayer && removedLayer.forEach(function (element) {\n              featureGroupRef.current.leafletElement.addLayer(element);\n            });\n            setShowToast(true);\n            setTimeout(function () {\n              setShowToast(false);\n            }, 3000);\n          }\n        } else {\n          // keep last, latest area,remove remaining, (we are allowing only one area to create)\n          if (latestCreatedItem === layerid) {\n            var _layer$editing2;\n\n            layer === null || layer === void 0 ? void 0 : (_layer$editing2 = layer.editing) === null || _layer$editing2 === void 0 ? void 0 : _layer$editing2.enable();\n            editRef.current.leafletElement.recentlyEdittedLatLng = _.cloneDeep(layer._latlngs);\n            return;\n          }\n\n          featureGroupRef.current.leafletElement.removeLayer(layer);\n        }\n      });\n      setFeatureGroupProps === null || setFeatureGroupProps === void 0 ? void 0 : setFeatureGroupProps(_objectSpread({}, featureGroupRef === null || featureGroupRef === void 0 ? void 0 : featureGroupRef.current));\n    }\n\n    if (!isInterSection) {\n      // send out to save in the form\n      onChange({\n        coordinates: [],\n        originalCoordinates: newLatLng,\n        isChanged: false,\n        area: area(thisPolygon)\n      });\n    }\n  }; // when edited layer while creation, vertex gets changes\n\n\n  var _onDrawVertex = function _onDrawVertex(e) {\n    var originalLatLng = [];\n    var newLatLng = [];\n    var layers = e.layers; // if (Object.keys(layers?._layers).length > 2) {\n    //   editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.completeShape()\n    // }\n\n    layers === null || layers === void 0 ? void 0 : layers.eachLayer(function (_layer) {\n      var _layer$_origLatLng, _layer$_origLatLng2, _layer$_latlng, _layer$_latlng2;\n\n      originalLatLng.push([_layer === null || _layer === void 0 ? void 0 : (_layer$_origLatLng = _layer._origLatLng) === null || _layer$_origLatLng === void 0 ? void 0 : _layer$_origLatLng.lat, _layer === null || _layer === void 0 ? void 0 : (_layer$_origLatLng2 = _layer._origLatLng) === null || _layer$_origLatLng2 === void 0 ? void 0 : _layer$_origLatLng2.lng]);\n      newLatLng.push(Object.values([_layer === null || _layer === void 0 ? void 0 : (_layer$_latlng = _layer._latlng) === null || _layer$_latlng === void 0 ? void 0 : _layer$_latlng.lat, _layer === null || _layer === void 0 ? void 0 : (_layer$_latlng2 = _layer._latlng) === null || _layer$_latlng2 === void 0 ? void 0 : _layer$_latlng2.lng]));\n    });\n    onChange({\n      coordinates: newLatLng,\n      originalCoordinates: newLatLng,\n      isChanged: true\n    });\n  }; // when user clicks on create layer\n\n\n  var _onDrawStart = function _onDrawStart(_e) {\n    var _e$target;\n\n    //add an active class to the create button\n    var mapContainer = _e === null || _e === void 0 ? void 0 : (_e$target = _e.target) === null || _e$target === void 0 ? void 0 : _e$target.getContainer();\n    var createShapeButton = mapContainer.querySelector(\".leaflet-draw-draw-polygon\");\n\n    if (createShapeButton) {\n      createShapeButton.classList.add(\"draw-active\");\n    } // all layer on featuregroup\n\n\n    var drawnItems = featureGroupRef.current.leafletElement._layers; // all editable layer with newly created layer on last index on array\n\n    var drawnItemsValue = Object.keys(drawnItems);\n    var removedLayer = [];\n\n    if (drawnItemsValue.length > 1) {\n      drawnItemsValue.forEach(function (layerid) {\n        // remove all existing edited layer if start creating new\n        var layer = drawnItems[layerid];\n        removedLayer.push(layer);\n        featureGroupRef.current.leafletElement.removeLayer(layer);\n      });\n    }\n\n    setFeatureGroupProps === null || setFeatureGroupProps === void 0 ? void 0 : setFeatureGroupProps(_objectSpread({}, featureGroupRef === null || featureGroupRef === void 0 ? void 0 : featureGroupRef.current)); // ret removed layer list to restore if intersection\n\n    setRemovedLayer(removedLayer);\n  }; // when in edited mode,change in verted captured here\n\n\n  var onEditVertex = function onEditVertex(e) {\n    var _editRef$current$leaf;\n\n    var originalLatLng = [];\n    var newLatLng = [];\n    var target = e.target;\n    target.eachLayer(function (_layer) {\n      if (Object.prototype.hasOwnProperty.call(_layer, 'edited')) {\n        if (_layer.editing.latlngs[0]) {\n          var _layer$editing$latlng;\n\n          (_layer$editing$latlng = _layer.editing.latlngs[0][0]) === null || _layer$editing$latlng === void 0 ? void 0 : _layer$editing$latlng.forEach(function (latLng) {\n            newLatLng.push([latLng.lat, latLng.lng]);\n          });\n        }\n      }\n    });\n    console.log(originalLatLng, 'originalLatLng and newLatLng', newLatLng);\n    var thisPolygon = multiPolygon([[newLatLng]]);\n    var isInterSection = checkIntersection(thisPolygon, polygon);\n    var drawnItems = featureGroupRef.current.leafletElement._layers;\n    var drawnItemsValue = Object.keys(drawnItems);\n    var latestCreatedItem = drawnItemsValue[drawnItemsValue.length - 1];\n    drawnItemsValue.forEach(function (layerid) {\n      var layer = drawnItems[layerid]; // if intersection then remove last latest layer and keep old data\n\n      if (isInterSection) {\n        if (latestCreatedItem === layerid) {\n          setShowToast(true);\n          setTimeout(function () {\n            setShowToast(false);\n          }, 3000);\n        }\n      } else {\n        if (latestCreatedItem === layerid) {\n          editRef.current.leafletElement.recentlyEdittedLatLng = _.cloneDeep(layer._latlngs);\n          return;\n        }\n      }\n    });\n    onChange({\n      coordinates: newLatLng,\n      originalCoordinates: newLatLng,\n      isChanged: true,\n      isIntersection: !(JSON.stringify(editRef.current.leafletElement.recentlyEdittedLatLng) == JSON.stringify(e.poly._latlngs)),\n      previousCoordinates: (_editRef$current$leaf = editRef.current.leafletElement.recentlyEdittedLatLng) === null || _editRef$current$leaf === void 0 ? void 0 : _editRef$current$leaf[0],\n      area: area(thisPolygon)\n    });\n  };\n\n  var _DrawStop = function _DrawStop(e) {\n    var _e$target2;\n\n    //remove the active class when the draw stops\n    var mapContainer = e === null || e === void 0 ? void 0 : (_e$target2 = e.target) === null || _e$target2 === void 0 ? void 0 : _e$target2.getContainer();\n    var createShapeButton = mapContainer.querySelector(\".leaflet-draw-draw-polygon\");\n\n    if (createShapeButton) {\n      createShapeButton.classList.remove(\"draw-active\");\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(FeatureGroup, {\n    ref: featureGroupRef,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(EditControl, {\n    ref: editRef,\n    position: \"bottomright\",\n    onCreated: _onCreated,\n    onDrawVertex: _onDrawVertex,\n    onDrawStart: _onDrawStart,\n    onEditVertex: onEditVertex,\n    onDrawStop: _DrawStop,\n    draw: createPermission ? {\n      rectangle: false,\n      polyline: false,\n      circle: false,\n      marker: false,\n      circlemarker: false,\n      polygon: {\n        allowIntersection: false,\n        showArea: true,\n        clickable: true\n      }\n    } : false,\n    edit: {\n      remove: false,\n      allowIntersection: false,\n      edit: false,\n      toolbar: false\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 7\n    }\n  }), editPopUpComponent && /*#__PURE__*/React.createElement(StyledPopUp, {\n    keepInView: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 362,\n      columnNumber: 30\n    }\n  }, editPopUpComponent({\n    map: map\n  })), showToast && /*#__PURE__*/React.createElement(PolygonToast, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 6\n    }\n  }, /*#__PURE__*/React.createElement(Toast, {\n    iconVariant: \"warning\",\n    removeButton: false,\n    remove: function remove() {},\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 365,\n      columnNumber: 6\n    }\n  }, \"Overlaps not allowed!!\")));\n};\n\nexport default LeafletPolygonEditLayer;","map":{"version":3,"sources":["/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/atoms/Map/layers/LeafletPolygonEditLayer.tsx"],"names":["LL","React","useEffect","useState","FeatureGroup","useLeaflet","EditControl","intersect","multiPolygon","area","StyledPopUp","PolygonToast","Toast","EditPopUp","ReactDOMServer","_","require","checkIntersection","thisPolygon","polygonInfo","polygonData","data","positionCoordinateKey","intersectionFl","forEach","polygonOption","optionObj","optionArray","coordinate","push","Object","values","otherPolygon","_createTurfCompatiblePolygon","intersection","geometry","type","err","coordinates","newValue","map","eachCoordinate","LeafletPolygonEditLayer","editLayer","createPermission","orinalCoordinatesKey","polygon","editPopUpComponent","onChange","setFeatureGroupProps","featureGroupRef","useRef","editRef","createdLayerRef","removedLayer","setRemovedLayer","showToast","setShowToast","colorKey","styleKeys","styleKey","renderer","canvas","padding","obj","document","getElementById","onclick","closePopup","current","unbindPopup","keys","length","on","renderPloyLayer","off","leafletFG","leafletElement","geoJsonData","option","polyLayers","interactive","lineJoin","lineCap","fill","stroke","fillColor","fillOpacity","opacity","smoothFactor","canvasRenderer","color","layer","addLayer","editing","enable","_onCreated","e","bindPopup","renderToString","openPopup","drawnItems","_layers","drawnItemsValue","latestCreatedItem","newLatLng","_latlngs","polyObjTurfCompatible","isInterSection","layerid","removeLayer","element","setTimeout","recentlyEdittedLatLng","cloneDeep","originalCoordinates","isChanged","_onDrawVertex","originalLatLng","layers","eachLayer","_layer","_origLatLng","lat","lng","_latlng","_onDrawStart","_e","mapContainer","target","getContainer","createShapeButton","querySelector","classList","add","onEditVertex","prototype","hasOwnProperty","call","latlngs","latLng","console","log","isIntersection","JSON","stringify","poly","previousCoordinates","_DrawStop","remove","rectangle","polyline","circle","marker","circlemarker","allowIntersection","showArea","clickable","edit","toolbar"],"mappings":";;;;;;AAAA,OAAOA,EAAP,MAAe,SAAf;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,YAAT,EAAuBC,UAAvB,QAAyC,eAAzC;AACA,SAASC,WAAT,QAA4B,oBAA5B;AACA,SAASC,SAAT,EAAoBC,YAApB,EAAkCC,IAAlC,QAA8C,MAA9C;AACA,SAASC,WAAT,EAAsBC,YAAtB,QAA0C,cAA1C;AACA,OAAOC,KAAP,MAAkB,gCAAlB;AACA,OAAOC,SAAP,MAAsB,2BAAtB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;;AACA,IAAMC,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAjB;;AAqBA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,WAAD,EAAmBC,WAAnB,EAAwC;AAChE,MAAMC,WAAW,GAAGD,WAAW,CAACE,IAAhC;AACA,MAAMC,qBAAqB,GAAGH,WAAW,CAACG,qBAA1C,CAFgE,CAEA;;AAChE,MAAIC,cAAc,GAAG,KAArB,CAHgE,CAIhE;;AACAH,EAAAA,WAAW,CAACI,OAAZ,CAAoB,UAACC,aAAD,EAAwB;AAC1C,QAAMC,SAAS,GAAGD,aAAa,CAACH,qBAAD,CAA/B;AACA,QAAMK,WAAkB,GAAG,EAA3B;AACAD,IAAAA,SAAS,CAACF,OAAV,CAAkB,UAACI,UAAD,EAAqB;AACrCD,MAAAA,WAAW,CAACE,IAAZ,CAAiBC,MAAM,CAACC,MAAP,CAAcH,UAAd,CAAjB;AACD,KAFD,EAH0C,CAKvC;;AACH,QAAII,YAAY,GAAGxB,YAAY,CAAC,CAAC,CAACyB,4BAA4B,CAACP,SAAD,CAA7B,CAAD,CAAD,CAA/B;;AACA,QAAI;AACF,UAAIQ,YAAY,GAAG3B,SAAS,CAACW,WAAD,EAAcc,YAAd,CAA5B;;AACA,UAAIE,YAAJ,EAAkB;AAChB,YAAIA,YAAY,CAACC,QAAb,CAAsBC,IAAtB,KAA+B,cAAnC,EAAmD;AACjDb,UAAAA,cAAc,GAAG,IAAjB;AACD;AACF;AACF,KAPD,CAOE,OAAOc,GAAP,EAAY;AACZd,MAAAA,cAAc,GAAG,IAAjB;AACD;AACF,GAjBD;AAkBA,SAAOA,cAAP;AACD,CAxBD;;AA0BA,IAAMU,4BAA4B,GAAG,SAA/BA,4BAA+B,CAACK,WAAD,EAAsB;AACzD,MAAMC,QAAQ,GAAGD,WAAW,CAACE,GAAZ,CAAgB,UAACC,cAAD;AAAA,WAC/BX,MAAM,CAACC,MAAP,CAAcU,cAAd,CAD+B;AAAA,GAAhB,CAAjB;AAIA,SAAOF,QAAP;AACD,CAND;;AAOA,IAAMG,uBAAuB,GAAG,SAA1BA,uBAA0B,OAUA;AAAA,MAT9BC,SAS8B,QAT9BA,SAS8B;AAAA,MAR9BC,gBAQ8B,QAR9BA,gBAQ8B;AAAA,MAP9BC,oBAO8B,QAP9BA,oBAO8B;AAAA,MAN9BC,OAM8B,QAN9BA,OAM8B;AAAA,MAH9BC,kBAG8B,QAH9BA,kBAG8B;AAAA,MAF9BC,QAE8B,QAF9BA,QAE8B;AAAA,MAD9BC,oBAC8B,QAD9BA,oBAC8B;AAC9B,MAAMC,eAAoB,GAAGjD,KAAK,CAACkD,MAAN,EAA7B;AACA,MAAMC,OAAY,GAAGnD,KAAK,CAACkD,MAAN,EAArB;AACA,MAAME,eAAoB,GAAGpD,KAAK,CAACkD,MAAN,EAA7B;;AAH8B,kBAIUhD,QAAQ,CAAe,IAAf,CAJlB;AAAA;AAAA,MAIvBmD,YAJuB;AAAA,MAITC,eAJS;;AAAA,mBAKIpD,QAAQ,CAAU,KAAV,CALZ;AAAA;AAAA,MAKvBqD,SALuB;AAAA,MAKZC,YALY;;AAM9B,MAAMC,QAAQ,GAAGZ,OAAO,CAACY,QAAzB,CAN8B,CAMI;;AAClC,MAAMC,SAAS,GAAGb,OAAH,aAAGA,OAAH,uBAAGA,OAAO,CAAEc,QAA3B,CAP8B,CAOM;;AAEpC,MAAMC,QAAa,GAAG7D,EAAE,CAAC8D,MAAH,CAAU;AAAEC,IAAAA,OAAO,EAAE;AAAX,GAAV,CAAtB,CAT8B,CASoB;;AATpB,oBAYd1D,UAAU,EAZI;AAAA,MAYtBmC,GAZsB,eAYtBA,GAZsB;;AAa9B,MAAMwB,GAAG,GAAGC,QAAQ,CAACC,cAAT,CAAwB,eAAxB,CAAZ;;AACA,MAAGF,GAAG,KAAK,IAAX,EAAgB;AACdA,IAAAA,GAAG,CAACG,OAAJ,GAAY,YAAI;AACd3B,MAAAA,GAAG,SAAH,IAAAA,GAAG,WAAH,YAAAA,GAAG,CAAE4B,UAAL;AACAf,MAAAA,eAAe,CAACgB,OAAhB,CAAwBC,WAAxB;AACD,KAHD;AAID;;AAEDpE,EAAAA,SAAS,CAAC,YAAM;AAAA;;AACd,QAAGmD,eAAe,CAACgB,OAAhB,IAA2B,iBAAAvC,MAAM,CAACyC,IAAP,CAAYlB,eAAe,CAACgB,OAA5B,+DAAsCG,MAAtC,IAA+C,CAA7E,EAAgF;AAC9EnB,MAAAA,eAAe,CAACgB,OAAhB,CAAwBI,EAAxB,CAA2B,kBAA3B,EAA+C,YAAM;AACnDjC,QAAAA,GAAG,SAAH,IAAAA,GAAG,WAAH,YAAAA,GAAG,CAAE4B,UAAL;AACAf,QAAAA,eAAe,CAACgB,OAAhB,CAAwBC,WAAxB;AACD,OAHD;AAID;AACF,GAPQ,EAOP,CAACjB,eAAe,CAACgB,OAAjB,CAPO,CAAT;AAUAnE,EAAAA,SAAS,CAAC,YAAM;AACdwE,IAAAA,eAAe;AACf,WAAO,YAAM;AAAA;;AAAC,UAAGrB,eAAe,CAACgB,OAAhB,IAA2B,kBAAAvC,MAAM,CAACyC,IAAP,CAAYlB,eAAe,CAACgB,OAA5B,iEAAsCG,MAAtC,IAA+C,CAA7E,EAA+E;AAACnB,QAAAA,eAAe,CAACgB,OAAhB,CAAwBM,GAAxB,CAA4B,kBAA5B;AAAgD;AAAC,KAA/I;AACD,GAHQ,EAGN,EAHM,CAAT;;AAIA,MAAMD,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AAC5B;AAEA,QAAI,CAAAxB,eAAe,SAAf,IAAAA,eAAe,WAAf,YAAAA,eAAe,CAAEmB,OAAjB,KAA4BxB,oBAAhC,EAAsD;AACpD;AACA,UAAM+B,SAAS,GACb1B,eADa,aACbA,eADa,uBACbA,eAAe,CAAEmB,OADnB;AAC2B;;AAHyB,UAI5CQ,cAJ4C,GAIzBD,SAJyB,CAI5CC,cAJ4C;AAKpD,UAAMC,WAAW,GAAGnC,SAAH,aAAGA,SAAH,uBAAGA,SAAS,CAAEtB,IAA/B,CALoD,CAOpD;;AACA,UAAMiB,WAAW,GAAGwC,WAAW,CAACtC,GAAZ,CAAgB,UAACuC,MAAD,EAAiB;AACnD,YAAMrD,SAAS,GAAGqD,MAAM,CAAClC,oBAAD,CAAxB;AACA,YAAMlB,WAAkB,GAAG,EAA3B;AACAD,QAAAA,SAAS,CAACF,OAAV,CAAkB,UAACI,UAAD,EAAqB;AACrCD,UAAAA,WAAW,CAACE,IAAZ,CAAiBC,MAAM,CAACC,MAAP,CAAcH,UAAd,CAAjB;AACD,SAFD,EAHmD,CAKhD;;AAEH,eAAOD,WAAP;AACD,OARmB,CAApB,CARoD,CAgBjD;;AAEH,UAAMqD,UAAiB,GAAG,EAA1B;AACA1C,MAAAA,WAAW,SAAX,IAAAA,WAAW,WAAX,YAAAA,WAAW,CAAEd,OAAb,CAAqB,UAACuD,MAAD,EAAiB;AACpCC,QAAAA,UAAU,CAACnD,IAAX,CACE7B,EAAE,CAAC8C,OAAH,CAAWiC,MAAX,EAAmB;AACjBE,UAAAA,WAAW,EAAE,IADI;AAEjBC,UAAAA,QAAQ,EAAE,OAFO;AAGjBC,UAAAA,OAAO,EAAE,OAHQ;AAIjBC,UAAAA,IAAI,EAAE,IAJW;AAKjBC,UAAAA,MAAM,EAAE,IALS;AAMjBC,UAAAA,SAAS,EACP,CAAA3B,SAAS,SAAT,IAAAA,SAAS,WAAT,YAAAA,SAAS,CAAE2B,SAAX,KAAwBP,MAAM,CAACpB,SAAD,aAACA,SAAD,uBAACA,SAAS,CAAE2B,SAAZ,CAA9B,GACIP,MAAM,CAACpB,SAAD,aAACA,SAAD,uBAACA,SAAS,CAAE2B,SAAZ,CADV,GAEI,EATW;AAUjBC,UAAAA,WAAW,EACT,CAAA5B,SAAS,SAAT,IAAAA,SAAS,WAAT,YAAAA,SAAS,CAAE4B,WAAX,KAA0BR,MAAM,CAACpB,SAAD,aAACA,SAAD,uBAACA,SAAS,CAAE4B,WAAZ,CAAhC,GACIR,MAAM,CAACpB,SAAD,aAACA,SAAD,uBAACA,SAAS,CAAE4B,WAAZ,CADV,GAEI,GAbW;AAcjBC,UAAAA,OAAO,EAAC,CAdS;AAejBC,UAAAA,YAAY,EACV,CAAA9B,SAAS,SAAT,IAAAA,SAAS,WAAT,YAAAA,SAAS,CAAE8B,YAAX,KAA2BV,MAAM,CAACpB,SAAD,aAACA,SAAD,uBAACA,SAAS,CAAE8B,YAAZ,CAAjC,GACIV,MAAM,CAACpB,SAAD,aAACA,SAAD,uBAACA,SAAS,CAAE8B,YAAZ,CADV,GAEI,CAlBW;AAmBjB5B,UAAAA,QAAQ,EAAE,CAAAkB,MAAM,SAAN,IAAAA,MAAM,WAAN,YAAAA,MAAM,CAAEW,cAAR,IAAyB7B,QAAzB,GAAoC,IAnB7B;AAoBjB8B,UAAAA,KAAK,EAAEZ,MAAM,CAACrB,QAAD,CAAN,GAAmBqB,MAAM,CAACrB,QAAD,CAAzB,GAAsC;AApB5B,SAAnB,CADF;AAwBD,OAzBD;;AA2BA,qCAAoBsB,UAApB,iCAAgC;AAAA;;AAA3B,YAAMY,KAAK,kBAAX;AACH;AACAf,QAAAA,cAAc,CAACgB,QAAf,CAAwBD,KAAxB,EAF8B,CAI9B;;AACAA,QAAAA,KAAK,SAAL,IAAAA,KAAK,WAAL,8BAAAA,KAAK,CAAEE,OAAP,kEAAgBC,MAAhB;AACD;;AACD9C,MAAAA,oBAAoB,SAApB,IAAAA,oBAAoB,WAApB,YAAAA,oBAAoB,mBAAOC,eAAP,aAAOA,eAAP,uBAAOA,eAAe,CAAEmB,OAAxB,EAApB;AACD;AACF,GA1DD,CAnC8B,CA+F9B;;;AACA,MAAM2B,UAAU,GAAG,SAAbA,UAAa,CAACC,CAAD,EAAY;AAAA;;AAC7B,QAAML,KAAK,GAAGK,CAAC,CAACL,KAAhB;AACAA,IAAAA,KAAK,CAACM,SAAN,CAAgBpF,cAAc,CAACqF,cAAf,eAA8B,oBAAC,SAAD;AAAW,MAAA,OAAO,EAAE,mBAAM;AAAE3D,QAAAA,GAAG,SAAH,IAAAA,GAAG,WAAH,YAAAA,GAAG,CAAE4B,UAAL;AAAkB,OAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAA9B,CAAhB,EAAkGgC,SAAlG;AACA/C,IAAAA,eAAe,CAACgB,OAAhB,GAA0BuB,KAA1B,CAH6B,CAI7B;;AACA,QAAMS,UAAU,GAAGnD,eAAe,CAACmB,OAAhB,CAAwBQ,cAAxB,CAAuCyB,OAA1D,CAL6B,CAM7B;;AACA,QAAMC,eAAe,GAAGzE,MAAM,CAACyC,IAAP,CAAY8B,UAAZ,CAAxB;AACA,QAAMG,iBAAiB,GAAGD,eAAe,CAACA,eAAe,CAAC/B,MAAhB,GAAyB,CAA1B,CAAzC,CAR6B,CAS7B;;AACA,QAAMiC,SAAS,4BAAGJ,UAAU,CAACG,iBAAD,CAAb,0DAAG,sBAA+BE,QAA/B,CAAwC,CAAxC,CAAlB;;AACA,QAAMC,qBAAqB,GAAG1E,4BAA4B,CAACwE,SAAD,CAA1D,CAX6B,CAY7B;;;AACA,QAAMvF,WAAW,GAAGV,YAAY,CAAC,CAAC,CAACmG,qBAAD,CAAD,CAAD,CAAhC;AACA,QAAMC,cAAc,GAAG3F,iBAAiB,CAACC,WAAD,EAAc4B,OAAd,CAAxC;;AAEA,QAAIyD,eAAe,CAAC/B,MAAhB,GAAyB,CAA7B,EAAgC;AAC9B+B,MAAAA,eAAe,CAAC/E,OAAhB,CAAwB,UAACqF,OAAD,EAAa;AACnC,YAAMjB,KAAK,GAAGS,UAAU,CAACQ,OAAD,CAAxB,CADmC,CAEnC;;AACA,YAAID,cAAJ,EAAoB;AAClB,cAAIJ,iBAAiB,KAAKK,OAA1B,EAAmC;AACjC;AACA3D,YAAAA,eAAe,CAACmB,OAAhB,CAAwBQ,cAAxB,CAAuCiC,WAAvC,CAAmDlB,KAAnD;AACAtC,YAAAA,YAAY,IACVA,YAAY,CAAC9B,OAAb,CAAqB,UAACuF,OAAD,EAAa;AAChC7D,cAAAA,eAAe,CAACmB,OAAhB,CAAwBQ,cAAxB,CAAuCgB,QAAvC,CAAgDkB,OAAhD;AACD,aAFD,CADF;AAIEtD,YAAAA,YAAY,CAAC,IAAD,CAAZ;AACAuD,YAAAA,UAAU,CAAC,YAAI;AACfvD,cAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,aAFW,EAET,IAFS,CAAV;AAGH;AACF,SAbD,MAaO;AACL;AACA,cAAI+C,iBAAiB,KAAKK,OAA1B,EAAmC;AAAA;;AACjCjB,YAAAA,KAAK,SAAL,IAAAA,KAAK,WAAL,+BAAAA,KAAK,CAAEE,OAAP,oEAAgBC,MAAhB;AACA3C,YAAAA,OAAO,CAACiB,OAAR,CAAgBQ,cAAhB,CAA+BoC,qBAA/B,GAAuDlG,CAAC,CAACmG,SAAF,CAAYtB,KAAK,CAACc,QAAlB,CAAvD;AACA;AACD;;AACDxD,UAAAA,eAAe,CAACmB,OAAhB,CAAwBQ,cAAxB,CAAuCiC,WAAvC,CAAmDlB,KAAnD;AACD;AACF,OAzBD;AA0BA3C,MAAAA,oBAAoB,SAApB,IAAAA,oBAAoB,WAApB,YAAAA,oBAAoB,mBAAOC,eAAP,aAAOA,eAAP,uBAAOA,eAAe,CAAEmB,OAAxB,EAApB;AACD;;AACD,QAAI,CAACuC,cAAL,EAAqB;AACnB;AACA5D,MAAAA,QAAQ,CAAC;AACPV,QAAAA,WAAW,EAAE,EADN;AAEP6E,QAAAA,mBAAmB,EAAEV,SAFd;AAGPW,QAAAA,SAAS,EAAE,KAHJ;AAIP3G,QAAAA,IAAI,EAAEA,IAAI,CAACS,WAAD;AAJH,OAAD,CAAR;AAMD;AACF,GAtDD,CAhG8B,CAwJ9B;;;AACA,MAAMmG,aAAa,GAAG,SAAhBA,aAAgB,CAACpB,CAAD,EAAY;AAChC,QAAMqB,cAAqB,GAAG,EAA9B;AACA,QAAMb,SAAgB,GAAG,EAAzB;AAFgC,QAGxBc,MAHwB,GAGRtB,CAHQ,CAGxBsB,MAHwB,EAIhC;AACA;AACA;;AACAA,IAAAA,MAAM,SAAN,IAAAA,MAAM,WAAN,YAAAA,MAAM,CAAEC,SAAR,CAAkB,UAACC,MAAD,EAAiB;AAAA;;AACjCH,MAAAA,cAAc,CAACzF,IAAf,CAAoB,CAAC4F,MAAD,aAACA,MAAD,6CAACA,MAAM,CAAEC,WAAT,uDAAC,mBAAqBC,GAAtB,EAA2BF,MAA3B,aAA2BA,MAA3B,8CAA2BA,MAAM,CAAEC,WAAnC,wDAA2B,oBAAqBE,GAAhD,CAApB;AACAnB,MAAAA,SAAS,CAAC5E,IAAV,CACEC,MAAM,CAACC,MAAP,CAAc,CAAC0F,MAAD,aAACA,MAAD,yCAACA,MAAM,CAAEI,OAAT,mDAAC,eAAiBF,GAAlB,EAAuBF,MAAvB,aAAuBA,MAAvB,0CAAuBA,MAAM,CAAEI,OAA/B,oDAAuB,gBAAiBD,GAAxC,CAAd,CADF;AAGD,KALD;AAMA5E,IAAAA,QAAQ,CAAC;AACPV,MAAAA,WAAW,EAAEmE,SADN;AAEPU,MAAAA,mBAAmB,EAAEV,SAFd;AAGPW,MAAAA,SAAS,EAAE;AAHJ,KAAD,CAAR;AAKD,GAlBD,CAzJ8B,CA6K9B;;;AACA,MAAMU,YAAY,GAAG,SAAfA,YAAe,CAACC,EAAD,EAAa;AAAA;;AAChC;AACA,QAAMC,YAAyB,GAAGD,EAAH,aAAGA,EAAH,oCAAGA,EAAE,CAAEE,MAAP,8CAAG,UAAYC,YAAZ,EAAlC;AACA,QAAIC,iBAAiB,GAAGH,YAAY,CAACI,aAAb,CAA2B,4BAA3B,CAAxB;;AACA,QAAGD,iBAAH,EAAsB;AAAEA,MAAAA,iBAAiB,CAACE,SAAlB,CAA4BC,GAA5B,CAAgC,aAAhC;AAAiD,KAJzC,CAMhC;;;AACA,QAAMjC,UAAU,GAAGnD,eAAe,CAACmB,OAAhB,CAAwBQ,cAAxB,CAAuCyB,OAA1D,CAPgC,CAQhC;;AACA,QAAMC,eAAe,GAAGzE,MAAM,CAACyC,IAAP,CAAY8B,UAAZ,CAAxB;AACA,QAAM/C,YAAmB,GAAG,EAA5B;;AAEA,QAAIiD,eAAe,CAAC/B,MAAhB,GAAyB,CAA7B,EAAgC;AAC9B+B,MAAAA,eAAe,CAAC/E,OAAhB,CAAwB,UAACqF,OAAD,EAAa;AACnC;AACA,YAAMjB,KAAK,GAAGS,UAAU,CAACQ,OAAD,CAAxB;AACAvD,QAAAA,YAAY,CAACzB,IAAb,CAAkB+D,KAAlB;AACA1C,QAAAA,eAAe,CAACmB,OAAhB,CAAwBQ,cAAxB,CAAuCiC,WAAvC,CAAmDlB,KAAnD;AACD,OALD;AAMD;;AACD3C,IAAAA,oBAAoB,SAApB,IAAAA,oBAAoB,WAApB,YAAAA,oBAAoB,mBAAOC,eAAP,aAAOA,eAAP,uBAAOA,eAAe,CAAEmB,OAAxB,EAApB,CApBgC,CAqBhC;;AACAd,IAAAA,eAAe,CAACD,YAAD,CAAf;AACD,GAvBD,CA9K8B,CAuM9B;;;AACA,MAAMiF,YAAY,GAAG,SAAfA,YAAe,CAACtC,CAAD,EAAY;AAAA;;AAC/B,QAAMqB,cAAqB,GAAG,EAA9B;AACA,QAAMb,SAAgB,GAAG,EAAzB;AAF+B,QAGxBwB,MAHwB,GAGRhC,CAHQ,CAGxBgC,MAHwB;AAI/BA,IAAAA,MAAM,CAACT,SAAP,CAAiB,UAACC,MAAD,EAAiB;AAChC,UAAI3F,MAAM,CAAC0G,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCjB,MAArC,EAA6C,QAA7C,CAAJ,EAA4D;AAC1D,YAAIA,MAAM,CAAC3B,OAAP,CAAe6C,OAAf,CAAuB,CAAvB,CAAJ,EAA+B;AAAA;;AAC7B,mCAAAlB,MAAM,CAAC3B,OAAP,CAAe6C,OAAf,CAAuB,CAAvB,EAA0B,CAA1B,iFAA8BnH,OAA9B,CAAsC,UAACoH,MAAD,EAAiB;AACrDnC,YAAAA,SAAS,CAAC5E,IAAV,CAAe,CAAC+G,MAAM,CAACjB,GAAR,EAAaiB,MAAM,CAAChB,GAApB,CAAf;AACD,WAFD;AAGD;AACF;AACF,KARD;AAUAiB,IAAAA,OAAO,CAACC,GAAR,CAAYxB,cAAZ,EAA4B,8BAA5B,EAA4Db,SAA5D;AACA,QAAMvF,WAAW,GAAGV,YAAY,CAAC,CAAC,CAACiG,SAAD,CAAD,CAAD,CAAhC;AACA,QAAMG,cAAc,GAAG3F,iBAAiB,CAACC,WAAD,EAAc4B,OAAd,CAAxC;AACA,QAAMuD,UAAU,GAAGnD,eAAe,CAACmB,OAAhB,CAAwBQ,cAAxB,CAAuCyB,OAA1D;AACA,QAAMC,eAAe,GAAGzE,MAAM,CAACyC,IAAP,CAAY8B,UAAZ,CAAxB;AACA,QAAMG,iBAAiB,GAAGD,eAAe,CAACA,eAAe,CAAC/B,MAAhB,GAAyB,CAA1B,CAAzC;AACA+B,IAAAA,eAAe,CAAC/E,OAAhB,CAAwB,UAACqF,OAAD,EAAa;AACnC,UAAMjB,KAAK,GAAGS,UAAU,CAACQ,OAAD,CAAxB,CADmC,CAEnC;;AACA,UAAID,cAAJ,EAAoB;AAClB,YAAIJ,iBAAiB,KAAKK,OAA1B,EAAmC;AACjCpD,UAAAA,YAAY,CAAC,IAAD,CAAZ;AACCuD,UAAAA,UAAU,CAAC,YAAI;AACdvD,YAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,WAFU,EAER,IAFQ,CAAV;AAGF;AACF,OAPD,MAOO;AACL,YAAI+C,iBAAiB,KAAKK,OAA1B,EAAmC;AACjCzD,UAAAA,OAAO,CAACiB,OAAR,CAAgBQ,cAAhB,CAA+BoC,qBAA/B,GAAuDlG,CAAC,CAACmG,SAAF,CAAYtB,KAAK,CAACc,QAAlB,CAAvD;AACA;AACD;AACF;AACF,KAhBD;AAkBA1D,IAAAA,QAAQ,CAAC;AACPV,MAAAA,WAAW,EAAEmE,SADN;AAEPU,MAAAA,mBAAmB,EAAEV,SAFd;AAGPW,MAAAA,SAAS,EAAE,IAHJ;AAIP2B,MAAAA,cAAc,EAAC,EAAEC,IAAI,CAACC,SAAL,CAAe7F,OAAO,CAACiB,OAAR,CAAgBQ,cAAhB,CAA+BoC,qBAA9C,KAAwE+B,IAAI,CAACC,SAAL,CAAehD,CAAC,CAACiD,IAAF,CAAOxC,QAAtB,CAA1E,CAJR;AAKPyC,MAAAA,mBAAmB,2BAAE/F,OAAO,CAACiB,OAAR,CAAgBQ,cAAhB,CAA+BoC,qBAAjC,0DAAE,sBAAuD,CAAvD,CALd;AAMPxG,MAAAA,IAAI,EAAEA,IAAI,CAACS,WAAD;AANH,KAAD,CAAR;AAQD,GA9CD;;AAgDA,MAAMkI,SAAS,GAAG,SAAZA,SAAY,CAACnD,CAAD,EAAW;AAAA;;AAC3B;AACA,QAAM+B,YAAyB,GAAG/B,CAAH,aAAGA,CAAH,qCAAGA,CAAC,CAAEgC,MAAN,+CAAG,WAAWC,YAAX,EAAlC;AACA,QAAIC,iBAAiB,GAAGH,YAAY,CAACI,aAAb,CAA2B,4BAA3B,CAAxB;;AACA,QAAGD,iBAAH,EAAsB;AAAEA,MAAAA,iBAAiB,CAACE,SAAlB,CAA4BgB,MAA5B,CAAmC,aAAnC;AAAoD;AAC7E,GALD;;AAOA,sBACE,oBAAC,YAAD;AAAc,IAAA,GAAG,EAAEnG,eAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,WAAD;AACE,IAAA,GAAG,EAAEE,OADP;AAEE,IAAA,QAAQ,EAAC,aAFX;AAGE,IAAA,SAAS,EAAE4C,UAHb;AAIE,IAAA,YAAY,EAAEqB,aAJhB;AAKE,IAAA,WAAW,EAAES,YALf;AAME,IAAA,YAAY,EAAES,YANhB;AAOE,IAAA,UAAU,EAAEa,SAPd;AAQE,IAAA,IAAI,EACFxG,gBAAgB,GACZ;AACE0G,MAAAA,SAAS,EAAE,KADb;AAEEC,MAAAA,QAAQ,EAAE,KAFZ;AAGEC,MAAAA,MAAM,EAAE,KAHV;AAIEC,MAAAA,MAAM,EAAE,KAJV;AAKEC,MAAAA,YAAY,EAAE,KALhB;AAME5G,MAAAA,OAAO,EAAE;AACP6G,QAAAA,iBAAiB,EAAE,KADZ;AAEPC,QAAAA,QAAQ,EAAE,IAFH;AAGPC,QAAAA,SAAS,EAAE;AAHJ;AANX,KADY,GAaZ,KAtBR;AAwBE,IAAA,IAAI,EAAE;AACJR,MAAAA,MAAM,EAAE,KADJ;AAEJM,MAAAA,iBAAiB,EAAE,KAFf;AAGJG,MAAAA,IAAI,EAAE,KAHF;AAIJC,MAAAA,OAAO,EAAE;AAJL,KAxBR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAgCGhH,kBAAkB,iBAAI,oBAAC,WAAD;AAAa,IAAA,UAAU,MAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAyBA,kBAAkB,CAAC;AAAEP,IAAAA,GAAG,EAAHA;AAAF,GAAD,CAA3C,CAhCzB,EAiCGgB,SAAS,iBACX,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA,oBAAC,KAAD;AAAQ,IAAA,WAAW,EAAC,SAApB;AACK,IAAA,YAAY,EAAE,KADnB;AAEK,IAAA,MAAM,EAAE,kBAAK,CAAE,CAFpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BADA,CAlCD,CADF;AA6CD,CAtTD;;AAwTA,eAAed,uBAAf","sourcesContent":["import LL from 'leaflet'\nimport React, { useEffect, useState } from 'react'\nimport { FeatureGroup, useLeaflet } from 'react-leaflet'\nimport { EditControl } from 'react-leaflet-draw'\nimport { intersect, multiPolygon, area } from 'turf'\nimport { StyledPopUp, PolygonToast } from '../StyledMap'\nimport Toast from '../../../molecules/Toast/Toast'\nimport EditPopUp from '../SubComponent/EditPopUp'\nimport ReactDOMServer from \"react-dom/server\";\nconst _ = require('lodash');\ninterface ILeafletPolygonEditLayer {\n  editLayer: any\n  createPermission: boolean\n  onChange: (changedObject: IChangedObject) => void\n  orinalCoordinatesKey: string | undefined\n  createShape: boolean\n  setCreateShape: (createShape: boolean) => void\n  editPopUpComponent: ({ map }: any) => React.ReactNode\n  polygon: any\n  setFeatureGroupProps?: React.Dispatch<React.SetStateAction<FeatureGroup>>\n}\ninterface IChangedObject {\n  coordinates: any[]\n  originalCoordinates: any[]\n  isChanged: boolean,\n  isIntersection?:boolean,\n  previousCoordinates?:any[]\n  area?: number\n}\n\nconst checkIntersection = (thisPolygon: any, polygonInfo: any) => {\n  const polygonData = polygonInfo.data\n  const positionCoordinateKey = polygonInfo.positionCoordinateKey // in data which key gives coordinates\n  let intersectionFl = false\n  // all polygon layers\n  polygonData.forEach((polygonOption: any) => {\n    const optionObj = polygonOption[positionCoordinateKey]\n    const optionArray: any[] = []\n    optionObj.forEach((coordinate: any) => {\n      optionArray.push(Object.values(coordinate))\n    }) // [[lat,long],[lat,long]]\n    var otherPolygon = multiPolygon([[_createTurfCompatiblePolygon(optionObj)]])\n    try {\n      var intersection = intersect(thisPolygon, otherPolygon)\n      if (intersection) {\n        if (intersection.geometry.type === 'MultiPolygon') {\n          intersectionFl = true\n        }\n      }\n    } catch (err) {\n      intersectionFl = true\n    }\n  })\n  return intersectionFl\n}\n\nconst _createTurfCompatiblePolygon = (coordinates: any) => {\n  const newValue = coordinates.map((eachCoordinate: any) =>\n    Object.values(eachCoordinate)\n  )\n\n  return newValue\n}\nconst LeafletPolygonEditLayer = ({\n  editLayer,\n  createPermission,\n  orinalCoordinatesKey,\n  polygon,\n  // createShape,\n  // setCreateShape,\n  editPopUpComponent,\n  onChange,\n  setFeatureGroupProps\n}: ILeafletPolygonEditLayer) => {\n  const featureGroupRef: any = React.useRef()\n  const editRef: any = React.useRef()\n  const createdLayerRef: any = React.useRef()\n  const [removedLayer, setRemovedLayer] = useState<any[] | null>(null)\n  const [showToast, setShowToast] = useState<boolean>(false)\n  const colorKey = polygon.colorKey // the color of polygon\n  const styleKeys = polygon?.styleKey // circle style\n\n  const renderer: any = LL.canvas({ padding: 0.5 }) // adding renderer if canvasRenderer present in polygon\n\n\n  const { map } = useLeaflet()\n  const obj = document.getElementById('closePopupBtn');\n  if(obj !== null){\n    obj.onclick=()=>{\n      map?.closePopup();\n      createdLayerRef.current.unbindPopup();\n    }\n  }\n\n  useEffect(() => {\n    if(createdLayerRef.current && Object.keys(createdLayerRef.current)?.length > 0) {\n      createdLayerRef.current.on(\"click popupclose\", () => {\n        map?.closePopup(); \n        createdLayerRef.current.unbindPopup();\n      });\n    }\n  },[createdLayerRef.current])\n\n\n  useEffect(() => {\n    renderPloyLayer()\n    return () => {if(createdLayerRef.current && Object.keys(createdLayerRef.current)?.length > 0){createdLayerRef.current.off(\"click popupclose\")}}\n  }, [])\n  const renderPloyLayer = () => {\n    // populate the leaflet FeatureGroup with the geoJson layers\n\n    if (featureGroupRef?.current && orinalCoordinatesKey) {\n      // eslint-disable-next-line\n      const leafletFG =\n        featureGroupRef?.current /* eslint-disable-line no-alert */\n      const { leafletElement } = leafletFG\n      const geoJsonData = editLayer?.data\n\n      // suppose geoJsonData [{bhiwandi},{Dadar}]\n      const coordinates = geoJsonData.map((option: any) => {\n        const optionObj = option[orinalCoordinatesKey]\n        const optionArray: any[] = []\n        optionObj.forEach((coordinate: any) => {\n          optionArray.push(Object.values(coordinate))\n        }) // [[lat,long],[lat,long]]\n\n        return optionArray\n      }) // [{latitude:'',longitude:''},{latitude:'',longitude:''}]\n\n      const polyLayers: any[] = []\n      coordinates?.forEach((option: any) => {\n        polyLayers.push(\n          LL.polygon(option, {\n            interactive: true,\n            lineJoin: 'round',\n            lineCap: 'round',\n            fill: true,\n            stroke: true,\n            fillColor:\n              styleKeys?.fillColor && option[styleKeys?.fillColor]\n                ? option[styleKeys?.fillColor]\n                : '',\n            fillOpacity:\n              styleKeys?.fillOpacity && option[styleKeys?.fillOpacity]\n                ? option[styleKeys?.fillOpacity]\n                : 0.2,\n            opacity:1, \n            smoothFactor:\n              styleKeys?.smoothFactor && option[styleKeys?.smoothFactor]\n                ? option[styleKeys?.smoothFactor]\n                : 1,\n            renderer: option?.canvasRenderer ? renderer : null,\n            color: option[colorKey] ? option[colorKey] : '#3388ff'\n          })\n        )\n      })\n\n      for (const layer of polyLayers) {\n        // add polygon layer to featuregroup\n        leafletElement.addLayer(layer)\n\n        // make poly layer editable on load\n        layer?.editing?.enable()\n      }\n      setFeatureGroupProps?.({...featureGroupRef?.current});\n    }\n  }\n\n  // when creating new layer, keep it editable and remove previous all layer, only one edited layer creation is permitted\n  const _onCreated = (e: any) => {\n    const layer = e.layer\n    layer.bindPopup(ReactDOMServer.renderToString(<EditPopUp onClick={() => { map?.closePopup()}}/>)).openPopup();\n    createdLayerRef.current = layer;\n    // all layer on featuregroup\n    const drawnItems = featureGroupRef.current.leafletElement._layers\n    // all editable layer with newly created layer on last index on array\n    const drawnItemsValue = Object.keys(drawnItems)\n    const latestCreatedItem = drawnItemsValue[drawnItemsValue.length - 1]\n    // only created layer will remain,lat lang of that layer\n    const newLatLng = drawnItems[latestCreatedItem]?._latlngs[0]\n    const polyObjTurfCompatible = _createTurfCompatiblePolygon(newLatLng)\n    // user created below polygon\n    const thisPolygon = multiPolygon([[polyObjTurfCompatible]])\n    const isInterSection = checkIntersection(thisPolygon, polygon)\n\n    if (drawnItemsValue.length > 0) {\n      drawnItemsValue.forEach((layerid) => {\n        const layer = drawnItems[layerid]\n        // if intersection then remove last latest layer and keep old data\n        if (isInterSection) {\n          if (latestCreatedItem === layerid) {\n            // remove latest layer and add old layers\n            featureGroupRef.current.leafletElement.removeLayer(layer)\n            removedLayer &&\n              removedLayer.forEach((element) => {\n                featureGroupRef.current.leafletElement.addLayer(element)\n              })\n              setShowToast(true);\n              setTimeout(()=>{\n              setShowToast(false);\n            }, 3000)\n          }\n        } else {\n          // keep last, latest area,remove remaining, (we are allowing only one area to create)\n          if (latestCreatedItem === layerid) {\n            layer?.editing?.enable()\n            editRef.current.leafletElement.recentlyEdittedLatLng = _.cloneDeep(layer._latlngs)\n            return\n          }\n          featureGroupRef.current.leafletElement.removeLayer(layer)\n        }\n      })\n      setFeatureGroupProps?.({...featureGroupRef?.current});\n    }\n    if (!isInterSection) {\n      // send out to save in the form\n      onChange({\n        coordinates: [],\n        originalCoordinates: newLatLng,\n        isChanged: false,\n        area: area(thisPolygon)\n      })\n    }\n  }\n\n  // when edited layer while creation, vertex gets changes\n  const _onDrawVertex = (e: any) => {\n    const originalLatLng: any[] = []\n    const newLatLng: any[] = []\n    const { layers }: any = e\n    // if (Object.keys(layers?._layers).length > 2) {\n    //   editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.completeShape()\n    // }\n    layers?.eachLayer((_layer: any) => {\n      originalLatLng.push([_layer?._origLatLng?.lat, _layer?._origLatLng?.lng])\n      newLatLng.push(\n        Object.values([_layer?._latlng?.lat, _layer?._latlng?.lng])\n      )\n    })\n    onChange({\n      coordinates: newLatLng,\n      originalCoordinates: newLatLng,\n      isChanged: true\n    })\n  }\n\n  // when user clicks on create layer\n  const _onDrawStart = (_e: any) => {\n    //add an active class to the create button\n    const mapContainer: HTMLElement = _e?.target?.getContainer();\n    let createShapeButton = mapContainer.querySelector(\".leaflet-draw-draw-polygon\") as HTMLElement;\n    if(createShapeButton) { createShapeButton.classList.add(\"draw-active\"); }\n\n    // all layer on featuregroup\n    const drawnItems = featureGroupRef.current.leafletElement._layers\n    // all editable layer with newly created layer on last index on array\n    const drawnItemsValue = Object.keys(drawnItems)\n    const removedLayer: any[] = []\n\n    if (drawnItemsValue.length > 1) {\n      drawnItemsValue.forEach((layerid) => {\n        // remove all existing edited layer if start creating new\n        const layer = drawnItems[layerid]\n        removedLayer.push(layer)\n        featureGroupRef.current.leafletElement.removeLayer(layer)\n      })\n    } \n    setFeatureGroupProps?.({...featureGroupRef?.current});\n    // ret removed layer list to restore if intersection\n    setRemovedLayer(removedLayer)\n  }\n\n  // when in edited mode,change in verted captured here\n  const onEditVertex = (e: any) => {\n    const originalLatLng: any[] = []\n    const newLatLng: any[] = []\n    const {target }: any = e\n    target.eachLayer((_layer: any) => {\n      if (Object.prototype.hasOwnProperty.call(_layer, 'edited')) {\n        if (_layer.editing.latlngs[0]) {\n          _layer.editing.latlngs[0][0]?.forEach((latLng: any) => {\n            newLatLng.push([latLng.lat, latLng.lng])\n          })\n        }\n      }\n    })\n\n    console.log(originalLatLng, 'originalLatLng and newLatLng', newLatLng)\n    const thisPolygon = multiPolygon([[newLatLng]])\n    const isInterSection = checkIntersection(thisPolygon, polygon)\n    const drawnItems = featureGroupRef.current.leafletElement._layers\n    const drawnItemsValue = Object.keys(drawnItems)\n    const latestCreatedItem = drawnItemsValue[drawnItemsValue.length - 1]\n    drawnItemsValue.forEach((layerid) => {\n      const layer = drawnItems[layerid]\n      // if intersection then remove last latest layer and keep old data\n      if (isInterSection) {\n        if (latestCreatedItem === layerid) {\n          setShowToast(true);  \n           setTimeout(()=>{\n            setShowToast(false);\n          }, 3000)\n        }\n      } else {\n        if (latestCreatedItem === layerid) { \n          editRef.current.leafletElement.recentlyEdittedLatLng = _.cloneDeep(layer._latlngs)\n          return\n        }\n      }\n    })\n\n    onChange({\n      coordinates: newLatLng,\n      originalCoordinates: newLatLng,\n      isChanged: true,\n      isIntersection:!(JSON.stringify(editRef.current.leafletElement.recentlyEdittedLatLng) == JSON.stringify(e.poly._latlngs)),\n      previousCoordinates: editRef.current.leafletElement.recentlyEdittedLatLng?.[0],\n      area: area(thisPolygon)\n    })\n  }\n\n  const _DrawStop = (e:any) => {\n    //remove the active class when the draw stops\n    const mapContainer: HTMLElement = e?.target?.getContainer();\n    let createShapeButton = mapContainer.querySelector(\".leaflet-draw-draw-polygon\") as HTMLElement;\n    if(createShapeButton) { createShapeButton.classList.remove(\"draw-active\"); }\n  }\n\n  return (\n    <FeatureGroup ref={featureGroupRef as any}>\n      <EditControl\n        ref={editRef as any}\n        position='bottomright'\n        onCreated={_onCreated}\n        onDrawVertex={_onDrawVertex}\n        onDrawStart={_onDrawStart}\n        onEditVertex={onEditVertex}\n        onDrawStop={_DrawStop}\n        draw={\n          createPermission\n            ? {\n                rectangle: false,\n                polyline: false,\n                circle: false,\n                marker: false,\n                circlemarker: false,\n                polygon: {\n                  allowIntersection: false,\n                  showArea: true,\n                  clickable: true\n                }\n              }\n            : false\n        }\n        edit={{\n          remove: false,\n          allowIntersection: false,\n          edit: false,\n          toolbar: false\n        }}\n      />\n      {editPopUpComponent && <StyledPopUp keepInView>{editPopUpComponent({ map })}</StyledPopUp>}\n      {showToast && \n     <PolygonToast>\n     <Toast  iconVariant='warning'\n          removeButton={false}\n          remove={()=> {}}>\n           Overlaps not allowed!!\n      </Toast>\n      </PolygonToast>\n      }\n    </FeatureGroup>\n  )\n}\n\nexport default LeafletPolygonEditLayer\n"]},"metadata":{},"sourceType":"module"}