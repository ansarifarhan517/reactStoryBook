{"ast":null,"code":"import _objectSpread from \"/Users/farhanansari/Code/ui-library/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"/Users/farhanansari/Code/ui-library/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _taggedTemplateLiteral from \"/Users/farhanansari/Code/ui-library/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/farhanansari/Code/ui-library/src/components/atoms/Typography/index.tsx\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  font-size: \", \";\\n  text-decoration: \", \";\\n  text-align: \", \";\\n  font-weight: \", \";\\n  font-weight: \", \";\\n  font-style: \", \";\\n  line-height: \", \";\\n  color: \", \";\\n  \", \";\\n  \", \";\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from 'react';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\nimport { colorPropTypes, bgColorPropTypes } from '../../../utilities/types';\nimport { colorMixin, bgColorMixin } from '../../../utilities/mixins';\nvar TypographyStyled = styled.div(_templateObject(), function (_ref) {\n  var _theme$typography;\n\n  var fontSize = _ref.fontSize,\n      theme = _ref.theme;\n  return fontSize || \"\".concat(theme === null || theme === void 0 ? void 0 : (_theme$typography = theme.typography) === null || _theme$typography === void 0 ? void 0 : _theme$typography.fontSize, \"px\");\n}, function (_ref2) {\n  var underline = _ref2.underline;\n  return underline && 'underline';\n}, function (_ref3) {\n  var align = _ref3.align;\n  return align;\n}, function (_ref4) {\n  var bold = _ref4.bold;\n  return bold && 'bold';\n}, function (_ref5) {\n  var fontWeight = _ref5.fontWeight;\n  return fontWeight;\n}, function (_ref6) {\n  var italic = _ref6.italic;\n  return italic && 'oblique';\n}, function (_ref7) {\n  var lineHeight = _ref7.lineHeight;\n  return lineHeight;\n}, function (_ref8) {\n  var _theme$colors, _theme$colors$primary;\n\n  var primary = _ref8.primary,\n      theme = _ref8.theme;\n  return primary && (theme === null || theme === void 0 ? void 0 : (_theme$colors = theme.colors) === null || _theme$colors === void 0 ? void 0 : (_theme$colors$primary = _theme$colors.primary) === null || _theme$colors$primary === void 0 ? void 0 : _theme$colors$primary.main);\n}, colorMixin, bgColorMixin);\nvar TypographyVariantsPropsMapping = {\n  inputLabel: {},\n  errorMessage: {\n    fontSize: '11px',\n    color: 'error.main'\n  },\n  tooltip: {\n    fontSize: '11px'\n  },\n  tooltipWithWordWrap: {\n    fontSize: '11px'\n  }\n};\n\nvar Typography = function Typography(_ref9) {\n  var children = _ref9.children,\n      variant = _ref9.variant,\n      _ref9$useStyle = _ref9.useStyle,\n      useStyle = _ref9$useStyle === void 0 ? true : _ref9$useStyle,\n      props = _objectWithoutProperties(_ref9, [\"children\", \"variant\", \"useStyle\"]);\n\n  var newProps = variant ? _objectSpread(_objectSpread({}, props), TypographyVariantsPropsMapping[variant]) : _objectSpread({}, props);\n  var whiteSpaceValue = variant === 'tooltipWithWordWrap' ? 'normal' : 'nowrap';\n  return /*#__PURE__*/React.createElement(TypographyStyled, Object.assign({}, newProps, {\n    style: useStyle ? {\n      whiteSpace: whiteSpaceValue,\n      overflow: 'hidden',\n      textOverflow: 'ellipsis'\n    } : {},\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 5\n    }\n  }), children);\n};\n\nexport var typographyPropTypes = _objectSpread(_objectSpread({\n  variant: PropTypes.oneOf(['inputLabel', 'errorMessage', 'tooltip', 'tooltipWithWordWrap']),\n  fontFamily: PropTypes.string,\n  fontSize: PropTypes.string,\n  lineHeight: PropTypes.string,\n  fontWeight: PropTypes.number,\n  bold: PropTypes.bool,\n  italic: PropTypes.bool,\n  underline: PropTypes.bool,\n  primary: PropTypes.bool,\n  align: PropTypes.oneOf(['right', 'left', 'center']),\n  children: PropTypes.any\n}, colorPropTypes), bgColorPropTypes); // Typography.propTypes = typographyPropTypes\n\nexport default Typography;","map":{"version":3,"sources":["/Users/farhanansari/Code/ui-library/src/components/atoms/Typography/index.tsx"],"names":["React","styled","PropTypes","colorPropTypes","bgColorPropTypes","colorMixin","bgColorMixin","TypographyStyled","div","fontSize","theme","typography","underline","align","bold","fontWeight","italic","lineHeight","primary","colors","main","TypographyVariantsPropsMapping","inputLabel","errorMessage","color","tooltip","tooltipWithWordWrap","Typography","children","variant","useStyle","props","newProps","whiteSpaceValue","whiteSpace","overflow","textOverflow","typographyPropTypes","oneOf","fontFamily","string","number","bool","any"],"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAEEC,cAFF,EAIEC,gBAJF,QAKO,0BALP;AAMA,SAASC,UAAT,EAAqBC,YAArB,QAAyC,2BAAzC;AA2BA,IAAMC,gBAAgB,GAAGN,MAAM,CAACO,GAAV,oBACP;AAAA;;AAAA,MAAGC,QAAH,QAAGA,QAAH;AAAA,MAAaC,KAAb,QAAaA,KAAb;AAAA,SACXD,QAAQ,cAAOC,KAAP,aAAOA,KAAP,4CAAOA,KAAK,CAAEC,UAAd,sDAAO,kBAAmBF,QAA1B,OADG;AAAA,CADO,EAGD;AAAA,MAAGG,SAAH,SAAGA,SAAH;AAAA,SAAmBA,SAAS,IAAI,WAAhC;AAAA,CAHC,EAIN;AAAA,MAAGC,KAAH,SAAGA,KAAH;AAAA,SAAeA,KAAf;AAAA,CAJM,EAKL;AAAA,MAAGC,IAAH,SAAGA,IAAH;AAAA,SAAcA,IAAI,IAAI,MAAtB;AAAA,CALK,EAML;AAAA,MAAGC,UAAH,SAAGA,UAAH;AAAA,SAAoBA,UAApB;AAAA,CANK,EAON;AAAA,MAAGC,MAAH,SAAGA,MAAH;AAAA,SAAgBA,MAAM,IAAI,SAA1B;AAAA,CAPM,EAQL;AAAA,MAAGC,UAAH,SAAGA,UAAH;AAAA,SAAoBA,UAApB;AAAA,CARK,EASX;AAAA;;AAAA,MAAGC,OAAH,SAAGA,OAAH;AAAA,MAAYR,KAAZ,SAAYA,KAAZ;AAAA,SAAwBQ,OAAO,KAAIR,KAAJ,aAAIA,KAAJ,wCAAIA,KAAK,CAAES,MAAX,2EAAI,cAAeD,OAAnB,0DAAI,sBAAwBE,IAA5B,CAA/B;AAAA,CATW,EAUlBf,UAVkB,EAWlBC,YAXkB,CAAtB;AAaA,IAAMe,8BAA8B,GAAG;AACrCC,EAAAA,UAAU,EAAE,EADyB;AAErCC,EAAAA,YAAY,EAAE;AACZd,IAAAA,QAAQ,EAAE,MADE;AAEZe,IAAAA,KAAK,EAAE;AAFK,GAFuB;AAMrCC,EAAAA,OAAO,EAAE;AACPhB,IAAAA,QAAQ,EAAE;AADH,GAN4B;AASrCiB,EAAAA,mBAAmB,EAAE;AACnBjB,IAAAA,QAAQ,EAAE;AADS;AATgB,CAAvC;;AAaA,IAAMkB,UAAU,GAAG,SAAbA,UAAa,QAKK;AAAA,MAJtBC,QAIsB,SAJtBA,QAIsB;AAAA,MAHtBC,OAGsB,SAHtBA,OAGsB;AAAA,6BAFtBC,QAEsB;AAAA,MAFtBA,QAEsB,+BAFX,IAEW;AAAA,MADnBC,KACmB;;AACtB,MAAMC,QAAQ,GAAGH,OAAO,mCAEfE,KAFe,GAGfV,8BAA8B,CAACQ,OAAD,CAHf,sBAKfE,KALe,CAAxB;AAME,MAAME,eAAuC,GAC7CJ,OAAO,KAAK,qBAAZ,GAAoC,QAApC,GAA+C,QAD/C;AAGF,sBACE,oBAAC,gBAAD,oBACMG,QADN;AAEE,IAAA,KAAK,EACHF,QAAQ,GACJ;AACEI,MAAAA,UAAU,EAAED,eADd;AAEEE,MAAAA,QAAQ,EAAE,QAFZ;AAGEC,MAAAA,YAAY,EAAE;AAHhB,KADI,GAMJ,EATR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAYGR,QAZH,CADF;AAgBD,CA/BD;;AAiCA,OAAO,IAAMS,mBAAmB;AAC9BR,EAAAA,OAAO,EAAE3B,SAAS,CAACoC,KAAV,CAAgB,CACvB,YADuB,EAEvB,cAFuB,EAGvB,SAHuB,EAIvB,qBAJuB,CAAhB,CADqB;AAO9BC,EAAAA,UAAU,EAAErC,SAAS,CAACsC,MAPQ;AAQ9B/B,EAAAA,QAAQ,EAAEP,SAAS,CAACsC,MARU;AAS9BvB,EAAAA,UAAU,EAAEf,SAAS,CAACsC,MATQ;AAU9BzB,EAAAA,UAAU,EAAEb,SAAS,CAACuC,MAVQ;AAW9B3B,EAAAA,IAAI,EAAEZ,SAAS,CAACwC,IAXc;AAY9B1B,EAAAA,MAAM,EAAEd,SAAS,CAACwC,IAZY;AAa9B9B,EAAAA,SAAS,EAAEV,SAAS,CAACwC,IAbS;AAc9BxB,EAAAA,OAAO,EAAEhB,SAAS,CAACwC,IAdW;AAe9B7B,EAAAA,KAAK,EAAEX,SAAS,CAACoC,KAAV,CAAgB,CAAC,OAAD,EAAU,MAAV,EAAkB,QAAlB,CAAhB,CAfuB;AAgB9BV,EAAAA,QAAQ,EAAE1B,SAAS,CAACyC;AAhBU,GAiB3BxC,cAjB2B,GAkB3BC,gBAlB2B,CAAzB,C,CAqBP;;AAEA,eAAeuB,UAAf","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport PropTypes from 'prop-types'\nimport {\n  IColorProps,\n  colorPropTypes,\n  IBgColorProps,\n  bgColorPropTypes\n} from '../../../utilities/types'\nimport { colorMixin, bgColorMixin } from '../../../utilities/mixins'\n\ntype whiteSpacePropertyType =\n  | 'normal'\n  | 'pre'\n  | 'nowrap'\n  | 'pre-wrap'\n  | 'pre-line'\n  | 'break-spaces'\nexport interface ITypographyProps\n  extends IColorProps,\n    IBgColorProps,\n    React.HTMLAttributes<HTMLDivElement> {\n  variant?: 'inputLabel' | 'errorMessage' | 'tooltip' | 'tooltipWithWordWrap'\n  align?: 'left' | 'right' | 'center'\n  children: any\n  fontFamily?: string\n  fontSize?: string\n  lineHeight?: string\n  fontWeight?: number\n  bold?: boolean\n  italic?: boolean\n  underline?: boolean\n  primary?: boolean\n  useStyle?: boolean\n}\n\nconst TypographyStyled = styled.div<ITypographyProps>`\n  font-size: ${({ fontSize, theme }) =>\n    fontSize || `${theme?.typography?.fontSize}px`};\n  text-decoration: ${({ underline }) => underline && 'underline'};\n  text-align: ${({ align }) => align};\n  font-weight: ${({ bold }) => bold && 'bold'};\n  font-weight: ${({ fontWeight }) => fontWeight};\n  font-style: ${({ italic }) => italic && 'oblique'};\n  line-height: ${({ lineHeight }) => lineHeight};\n  color: ${({ primary, theme }) => primary && theme?.colors?.primary?.main};\n  ${colorMixin};\n  ${bgColorMixin};\n`\nconst TypographyVariantsPropsMapping = {\n  inputLabel: {},\n  errorMessage: {\n    fontSize: '11px',\n    color: 'error.main'\n  },\n  tooltip: {\n    fontSize: '11px'\n  },\n  tooltipWithWordWrap: {\n    fontSize: '11px'\n  }\n}\nconst Typography = ({\n  children,\n  variant,\n  useStyle = true,\n  ...props\n}: ITypographyProps) => {\n  const newProps = variant\n    ? {\n        ...props,\n        ...TypographyVariantsPropsMapping[variant]\n      }\n    : { ...props }\n    const whiteSpaceValue: whiteSpacePropertyType =\n    variant === 'tooltipWithWordWrap' ? 'normal' : 'nowrap' \n\n  return (\n    <TypographyStyled\n      {...newProps}\n      style={\n        useStyle\n          ? {\n              whiteSpace: whiteSpaceValue,\n              overflow: 'hidden',\n              textOverflow: 'ellipsis'\n            }\n          : {}\n      }\n    >\n      {children}\n    </TypographyStyled>\n  )\n}\n\nexport const typographyPropTypes = {\n  variant: PropTypes.oneOf([\n    'inputLabel',\n    'errorMessage',\n    'tooltip',\n    'tooltipWithWordWrap'\n  ]),\n  fontFamily: PropTypes.string,\n  fontSize: PropTypes.string,\n  lineHeight: PropTypes.string,\n  fontWeight: PropTypes.number,\n  bold: PropTypes.bool,\n  italic: PropTypes.bool,\n  underline: PropTypes.bool,\n  primary: PropTypes.bool,\n  align: PropTypes.oneOf(['right', 'left', 'center']),\n  children: PropTypes.any,\n  ...colorPropTypes,\n  ...bgColorPropTypes\n}\n\n// Typography.propTypes = typographyPropTypes\n\nexport default Typography\n"]},"metadata":{},"sourceType":"module"}