{"ast":null,"code":"import _slicedToArray from \"/Users/farhanansari/Code/ui-library/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/farhanansari/Code/ui-library/src/components/atoms/Map/layers/LeafletHeatLayer.tsx\";\n\n// The heat layer which will display all the densitites\nimport React, { useEffect, useState } from 'react';\nimport HeatmapLayer from 'react-leaflet-heatmap-layer';\n\n// The layer with actual heatmap\nvar LeafletHeatLayer = function LeafletHeatLayer(props) {\n  var heatmap = props.heatmap,\n      legend = props.legend,\n      heatMapData = props.heatMapData;\n\n  var _useState = useState(heatmap === null || heatmap === void 0 ? void 0 : heatmap.data),\n      _useState2 = _slicedToArray(_useState, 2),\n      heatData = _useState2[0],\n      setHeatData = _useState2[1]; // only till we don't use props properly\n\n\n  useEffect(function () {\n    var heatMap = [];\n\n    if (legend.length !== 0) {\n      heatMapData === null || heatMapData === void 0 ? void 0 : heatMapData.forEach(function (row) {\n        legend.forEach(function (legendEntry) {\n          // if legend entry is cheked and whatever condition we mentioned in marekr config in allow that is true then create position array [lat,lng]\n          if ((legendEntry === null || legendEntry === void 0 ? void 0 : legendEntry.checked) && legendEntry.allow(row) && (row === null || row === void 0 ? void 0 : row.lat) && (row === null || row === void 0 ? void 0 : row.lng)) {\n            // this is default intensity in product -100\n            var pos = [row === null || row === void 0 ? void 0 : row.lat, row === null || row === void 0 ? void 0 : row.lng, '100'];\n            heatMap.push(pos);\n          }\n        });\n      });\n    } else {\n      // if there is no legend then push all info in [[lat,lng],[]]form\n      heatMapData === null || heatMapData === void 0 ? void 0 : heatMapData.forEach(function (row) {\n        if ((row === null || row === void 0 ? void 0 : row.lat) && (row === null || row === void 0 ? void 0 : row.lng)) {\n          // this is default intensity in product -100\n          var pos = [row === null || row === void 0 ? void 0 : row.lat, row === null || row === void 0 ? void 0 : row.lng, '100'];\n          heatMap.push(pos);\n        }\n      });\n    }\n\n    setHeatData(heatMap);\n  }, [legend, heatMapData]);\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 5\n    }\n  }, props.heatmap && /*#__PURE__*/React.createElement(HeatmapLayer, {\n    fitBoundsOnLoad: true,\n    scaleRadius: true,\n    fitBoundsOnUpdate: true,\n    points: heatData,\n    longitudeExtractor: function longitudeExtractor(m) {\n      return m[1];\n    },\n    latitudeExtractor: function latitudeExtractor(m) {\n      return m[0];\n    },\n    intensityExtractor: function intensityExtractor(m) {\n      return parseFloat(m[2]);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }));\n};\n\nexport default LeafletHeatLayer;","map":{"version":3,"sources":["/Users/farhanansari/Code/ui-library/src/components/atoms/Map/layers/LeafletHeatLayer.tsx"],"names":["React","useEffect","useState","HeatmapLayer","LeafletHeatLayer","props","heatmap","legend","heatMapData","data","heatData","setHeatData","heatMap","length","forEach","row","legendEntry","checked","allow","lat","lng","pos","push","m","parseFloat"],"mappings":"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","sourcesContent":["// The heat layer which will display all the densitites\n\nimport React, { useEffect, useState } from 'react'\nimport HeatmapLayer from 'react-leaflet-heatmap-layer'\n\ninterface ILeafletHeatLayer {\n  heatmap: any\n  legend: any\n  heatMapData: any\n}\n// The layer with actual heatmap\nconst LeafletHeatLayer = (props: ILeafletHeatLayer) => {\n  const { heatmap, legend, heatMapData } = props\n  const [heatData, setHeatData] = useState(heatmap?.data)\n  // only till we don't use props properly\n\n  useEffect(() => {\n    const heatMap: any = []\n    if (legend.length !== 0) {\n      heatMapData?.forEach((row: any) => {\n        legend.forEach((legendEntry: any) => {\n          // if legend entry is cheked and whatever condition we mentioned in marekr config in allow that is true then create position array [lat,lng]\n          if (\n            legendEntry?.checked &&\n            legendEntry.allow(row) &&\n            row?.lat &&\n            row?.lng\n          ) {\n            // this is default intensity in product -100\n            const pos = [row?.lat, row?.lng, '100']\n            heatMap.push(pos)\n          }\n        })\n      })\n    } else {\n      // if there is no legend then push all info in [[lat,lng],[]]form\n      heatMapData?.forEach((row: any) => {\n        if (row?.lat && row?.lng) {\n          // this is default intensity in product -100\n          const pos = [row?.lat, row?.lng, '100']\n          heatMap.push(pos)\n        }\n      })\n    }\n    setHeatData(heatMap)\n  }, [legend, heatMapData])\n\n  return (\n    <React.Fragment>\n      {props.heatmap && (\n        <HeatmapLayer\n          fitBoundsOnLoad\n          scaleRadius\n          fitBoundsOnUpdate\n          points={heatData}\n          longitudeExtractor={(m: any) => m[1]}\n          latitudeExtractor={(m: any) => m[0]}\n          intensityExtractor={(m: any) => parseFloat(m[2])}\n        />\n      )}\n    </React.Fragment>\n  )\n}\n\nexport default LeafletHeatLayer\n"]},"metadata":{},"sourceType":"module"}