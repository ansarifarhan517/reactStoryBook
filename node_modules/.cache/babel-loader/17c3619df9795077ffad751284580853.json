{"ast":null,"code":"import _objectWithoutProperties from \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _objectSpread from \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/atoms/SettingBox/Type/ToggleOption.tsx\";\n\nimport React, { useState, Fragment } from 'react';\nimport { StyledSettingOption, StyledImage } from '../StyledSettingBox';\nimport Toggle from '../../../atoms/Toggle';\nimport RadioGroup from '../../RadioGroup';\nimport { SwitchLabel } from '../../Toggle/Toggle.styled';\nimport { RadioLabel } from '../../Radio/Radio.styled';\n\nvar ToggleOption = function ToggleOption(_ref) {\n  var settingOption = _ref.settingOption,\n      onChange = _ref.onChange,\n      settingConfig = _ref.settingConfig,\n      listOfDisabledTitle = _ref.listOfDisabledTitle,\n      disabled = _ref.disabled;\n\n  var _useState = useState(settingOption),\n      _useState2 = _slicedToArray(_useState, 2),\n      settings = _useState2[0],\n      setSettingOptions = _useState2[1]; // for hatmap and marker- map mode , if both the values  dont have permission,dont show section or else show whatever have permission\n\n\n  var _settings$permission = settings.permission,\n      permission = _settings$permission === void 0 ? true : _settings$permission;\n\n  var handleChange = function handleChange(entry) {\n    // selected toggled selection has to be changed,keeping existing toggle object same\n    var newOption = settings.option.map(function (option) {\n      option.selected = option.name === entry.name ? !entry.selected : option.selected;\n      return option;\n    }); // update new toggle option\n\n    var toggleOptionGroup = _objectSpread(_objectSpread({}, settings), {}, {\n      option: newOption\n    });\n\n    setSettingOptions(toggleOptionGroup); // new option group will be updated in setting config to pass it to map\n\n    var newSetting = settingConfig.map(function (option) {\n      return option.title === toggleOptionGroup.title ? toggleOptionGroup : option;\n    }); // updated data config will be sent to body to send it to map component\n\n    onChange(newSetting);\n  };\n\n  return permission ? /*#__PURE__*/React.createElement(StyledSettingOption, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"title\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }, settings.label || settings.title), /*#__PURE__*/React.createElement(RadioGroup, {\n    id: \"toggle\",\n    orientation: true,\n    spacing: 10,\n    variant: \"default\",\n    width: \"400px\",\n    label: settingOption.title,\n    labelColor: \"black\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  }, settings.option.map(function (_ref2) {\n    var image = _ref2.image,\n        entry = _objectWithoutProperties(_ref2, [\"image\"]);\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: entry.name,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Toggle, {\n      id: entry.name,\n      label: entry.label || entry.name,\n      labelColor: \"black\",\n      checked: entry.selected,\n      onChange: function onChange(_e) {\n        return handleChange(entry);\n      },\n      labelComponent: /*#__PURE__*/React.createElement(Fragment, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(StyledImage, {\n        src: image,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(SwitchLabel, {\n        color: \"black\",\n        id: \"\".concat(entry.name, \"-label\"),\n        style: {\n          fontSize: '13px'\n        },\n        disabled: !!(disabled && (entry === null || entry === void 0 ? void 0 : entry.name) && (listOfDisabledTitle === null || listOfDisabledTitle === void 0 ? void 0 : listOfDisabledTitle.includes(entry === null || entry === void 0 ? void 0 : entry.name))),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(RadioLabel, {\n        style: {\n          fontSize: '13px'\n        },\n        htmlFor: entry.name,\n        color: \"black\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 23\n        }\n      }, entry.label || entry.name))),\n      disabled: !!(disabled && (entry === null || entry === void 0 ? void 0 : entry.name) && (listOfDisabledTitle === null || listOfDisabledTitle === void 0 ? void 0 : listOfDisabledTitle.includes(entry === null || entry === void 0 ? void 0 : entry.name))),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 15\n      }\n    }));\n  }))) : null;\n};\n\nexport default ToggleOption;","map":{"version":3,"sources":["/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/atoms/SettingBox/Type/ToggleOption.tsx"],"names":["React","useState","Fragment","StyledSettingOption","StyledImage","Toggle","RadioGroup","SwitchLabel","RadioLabel","ToggleOption","settingOption","onChange","settingConfig","listOfDisabledTitle","disabled","settings","setSettingOptions","permission","handleChange","entry","newOption","option","map","selected","name","toggleOptionGroup","newSetting","title","label","image","_e","fontSize","includes"],"mappings":"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","sourcesContent":["import React, { useState, Fragment } from 'react'\nimport { ISettingOption, IOption, ISubComponent } from '../interface'\nimport { StyledSettingOption, StyledImage } from '../StyledSettingBox'\nimport Toggle from '../../../atoms/Toggle'\nimport RadioGroup from '../../RadioGroup'\nimport { SwitchLabel } from '../../Toggle/Toggle.styled'\nimport { RadioLabel } from '../../Radio/Radio.styled'\n\nconst ToggleOption = ({\n  settingOption,\n  onChange,\n  settingConfig,\n  listOfDisabledTitle,\n  disabled\n}: ISubComponent) => {\n  const [settings, setSettingOptions] = useState<ISettingOption>(settingOption)\n  // for hatmap and marker- map mode , if both the values  dont have permission,dont show section or else show whatever have permission\n  const { permission = true } = settings\n\n  const handleChange = (entry: IOption) => {\n    // selected toggled selection has to be changed,keeping existing toggle object same\n    const newOption = settings.option.map((option: IOption) => {\n      option.selected =\n        option.name === entry.name ? !entry.selected : option.selected\n      return option\n    })\n    // update new toggle option\n    const toggleOptionGroup = { ...settings, option: newOption }\n    setSettingOptions(toggleOptionGroup)\n\n    // new option group will be updated in setting config to pass it to map\n    const newSetting = settingConfig.map((option: ISettingOption) =>\n      option.title === toggleOptionGroup.title ? toggleOptionGroup : option\n    )\n    // updated data config will be sent to body to send it to map component\n    onChange(newSetting)\n  }\n\n  return permission ? (\n    <StyledSettingOption>\n      <div className='title'>{settings.label || settings.title}</div>\n      <RadioGroup\n        id='toggle'\n        orientation\n        spacing={10}\n        variant='default'\n        width='400px'\n        label={settingOption.title}\n        labelColor='black'\n      >\n        {settings.option.map(({ image, ...entry }: IOption) => {\n          return (\n            <div key={entry.name}>\n              <Toggle\n                id={entry.name}\n                label={entry.label || entry.name}\n                labelColor='black'\n                checked={entry.selected}\n                onChange={(_e) => handleChange(entry)}\n                labelComponent={\n                  <Fragment>\n                    <StyledImage src={image} />\n                    <SwitchLabel\n                      color='black'\n                      id={`${entry.name}-label`}\n                      style={{ fontSize: '13px' }}\n                      disabled={\n                        !!(\n                          disabled &&\n                          entry?.name &&\n                          listOfDisabledTitle?.includes(entry?.name)\n                        )\n                      }\n                    >\n                      <RadioLabel\n                        style={{ fontSize: '13px' }}\n                        htmlFor={entry.name}\n                        color='black'\n                      >\n                        {entry.label || entry.name}\n                      </RadioLabel>\n                      {/* <div style={{ color: 'black', fontSize: '13px' }}>\n                        {entry.name}\n                      </div> */}\n                    </SwitchLabel>\n                  </Fragment>\n                }\n                disabled={\n                  !!(\n                    disabled &&\n                    entry?.name &&\n                    listOfDisabledTitle?.includes(entry?.name)\n                  )\n                }\n              />\n            </div>\n          )\n        })}\n      </RadioGroup>\n    </StyledSettingOption>\n  ) : null\n}\nexport default ToggleOption\n"]},"metadata":{},"sourceType":"module"}