{"ast":null,"code":"import _defineProperty from \"/Users/farhanansari/Code/ui-library/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nvar _parameters;\n\n/* eslint-disable */\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource; // @ts-ignore\n\n\nvar addSourceDecorator = require(\"@storybook/source-loader/preview\").addSource; // @ts-ignore\n\n\nvar __SOURCE_PREFIX__ = \"/Users/farhanansari/Code/ui-library/src/components/atoms/Map/Stories\"; // @ts-ignore\n\nvar __STORY__ = \"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/farhanansari/Code/ui-library/src/components/atoms/Map/Stories\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"\\\\n\\\\n// @ts-nocheck\\\\n// @ts-ignore\\\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\\\n// @ts-ignore\\\\nvar addSourceDecorator = require(\\\\\\\"@storybook/source-loader/preview\\\\\\\").addSource;\\\\n// @ts-ignore\\\\nvar __SOURCE_PREFIX__ = \\\\\\\"/Users/farhanansari/Code/ui-library/src/components/atoms/Map/Stories\\\\\\\";\\\\n// @ts-ignore\\\\nvar __STORY__ = \\\\\\\"import { action } from '@storybook/addon-actions'\\\\\\\\nimport { object, withKnobs } from '@storybook/addon-knobs'\\\\\\\\nimport React from 'react'\\\\\\\\nimport LeafletMap from '..'\\\\\\\\nimport { path } from '../..'\\\\\\\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\\\\\\\nimport Settings from '../../../atoms/SettingBox/data'\\\\\\\\nimport { GOOGLE_API_KEY } from '../constants/googleIntegration.constants'\\\\\\\\nimport infowindowStructure from '../dummyData/Infowindow.structure.sampleData'\\\\\\\\nimport markerIcons from '../dummyData/MarkerIcon.sampleData'\\\\\\\\nimport sampleTripData from '../dummyData/Presentation.Trips.sampleData'\\\\\\\\nimport markerLayerObj from '../dummyData/MarkerWithIcon.sampleData'\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/Map`,\\\\\\\\n  decorators: [withKnobs],\\\\\\\\n  component: LeafletMap\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const TripsMapWithLegend = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // create legend on the basis of markers data\\\\\\\\n\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[51.0, 19.0]}\\\\\\\\n        zoom={4}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='300px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        trips={object('Trip Configuration', sampleTripData)}\\\\\\\\n        iconsRef={markerIcons}\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\";\\\\n// @ts-ignore\\\\nvar __ADDS_MAP__ = {};\\\\n// @ts-ignore\\\\nvar __MAIN_FILE_LOCATION__ = \\\\\\\"/CustomLegend.stories.tsx\\\\\\\";\\\\n// @ts-ignore\\\\nvar __MODULE_DEPENDENCIES__ = [];\\\\n// @ts-ignore\\\\nvar __LOCAL_DEPENDENCIES__ = {};\\\\n// @ts-ignore\\\\nvar __IDS_TO_FRAMEWORKS__ = {};\\\\n        \\\\nimport { action } from '@storybook/addon-actions'\\\\nimport { object, withKnobs } from '@storybook/addon-knobs'\\\\nimport React from 'react'\\\\nimport LeafletMap from '..'\\\\nimport { path } from '../..'\\\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\\\nimport Settings from '../../../atoms/SettingBox/data'\\\\nimport { GOOGLE_API_KEY } from '../constants/googleIntegration.constants'\\\\nimport infowindowStructure from '../dummyData/Infowindow.structure.sampleData'\\\\nimport markerIcons from '../dummyData/MarkerIcon.sampleData'\\\\nimport sampleTripData from '../dummyData/Presentation.Trips.sampleData'\\\\nimport markerLayerObj from '../dummyData/MarkerWithIcon.sampleData'\\\\n\\\\nexport default {parameters: {\\\\\\\"storySource\\\\\\\":{\\\\\\\"source\\\\\\\":\\\\\\\"import { action } from '@storybook/addon-actions'\\\\\\\\nimport { object, withKnobs } from '@storybook/addon-knobs'\\\\\\\\nimport React from 'react'\\\\\\\\nimport LeafletMap from '..'\\\\\\\\nimport { path } from '../..'\\\\\\\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\\\\\\\nimport Settings from '../../../atoms/SettingBox/data'\\\\\\\\nimport { GOOGLE_API_KEY } from '../constants/googleIntegration.constants'\\\\\\\\nimport infowindowStructure from '../dummyData/Infowindow.structure.sampleData'\\\\\\\\nimport markerIcons from '../dummyData/MarkerIcon.sampleData'\\\\\\\\nimport sampleTripData from '../dummyData/Presentation.Trips.sampleData'\\\\\\\\nimport markerLayerObj from '../dummyData/MarkerWithIcon.sampleData'\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/Map`,\\\\\\\\n  decorators: [withKnobs],\\\\\\\\n  component: LeafletMap\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const TripsMapWithLegend = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // create legend on the basis of markers data\\\\\\\\n\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[51.0, 19.0]}\\\\\\\\n        zoom={4}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='300px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        trips={object('Trip Configuration', sampleTripData)}\\\\\\\\n        iconsRef={markerIcons}\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\",\\\\\\\"locationsMap\\\\\\\":{}},},\\\\n  title: `${path}/Map`,\\\\n  decorators: [withKnobs],\\\\n  component: LeafletMap\\\\n}\\\\n\\\\nexport const TripsMapWithLegend = addSourceDecorator(() => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // create legend on the basis of markers data\\\\n\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        trips={object('Trip Configuration', sampleTripData)}\\\\n        iconsRef={markerIcons}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/CustomLegend.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\n\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/farhanansari/Code/ui-library/src/components/atoms/Map/Stories\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"import { action } from '@storybook/addon-actions'\\\\nimport { object, withKnobs } from '@storybook/addon-knobs'\\\\nimport React from 'react'\\\\nimport LeafletMap from '..'\\\\nimport { path } from '../..'\\\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\\\nimport Settings from '../../../atoms/SettingBox/data'\\\\nimport { GOOGLE_API_KEY } from '../constants/googleIntegration.constants'\\\\nimport infowindowStructure from '../dummyData/Infowindow.structure.sampleData'\\\\nimport markerIcons from '../dummyData/MarkerIcon.sampleData'\\\\nimport sampleTripData from '../dummyData/Presentation.Trips.sampleData'\\\\nimport markerLayerObj from '../dummyData/MarkerWithIcon.sampleData'\\\\n\\\\nexport default {\\\\n  title: `${path}/Map`,\\\\n  decorators: [withKnobs],\\\\n  component: LeafletMap\\\\n}\\\\n\\\\nexport const TripsMapWithLegend = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // create legend on the basis of markers data\\\\n\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        trips={object('Trip Configuration', sampleTripData)}\\\\n        iconsRef={markerIcons}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/CustomLegend.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\nimport { action } from '@storybook/addon-actions'\\nimport { object, withKnobs } from '@storybook/addon-knobs'\\nimport React from 'react'\\nimport LeafletMap from '..'\\nimport { path } from '../..'\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\nimport Settings from '../../../atoms/SettingBox/data'\\nimport { GOOGLE_API_KEY } from '../constants/googleIntegration.constants'\\nimport infowindowStructure from '../dummyData/Infowindow.structure.sampleData'\\nimport markerIcons from '../dummyData/MarkerIcon.sampleData'\\nimport sampleTripData from '../dummyData/Presentation.Trips.sampleData'\\nimport markerLayerObj from '../dummyData/MarkerWithIcon.sampleData'\\n\\nexport default {parameters: {\\\"storySource\\\":{\\\"source\\\":\\\"\\\\n\\\\n// @ts-nocheck\\\\n// @ts-ignore\\\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\\\n// @ts-ignore\\\\nvar addSourceDecorator = require(\\\\\\\"@storybook/source-loader/preview\\\\\\\").addSource;\\\\n// @ts-ignore\\\\nvar __SOURCE_PREFIX__ = \\\\\\\"/Users/farhanansari/Code/ui-library/src/components/atoms/Map/Stories\\\\\\\";\\\\n// @ts-ignore\\\\nvar __STORY__ = \\\\\\\"import { action } from '@storybook/addon-actions'\\\\\\\\nimport { object, withKnobs } from '@storybook/addon-knobs'\\\\\\\\nimport React from 'react'\\\\\\\\nimport LeafletMap from '..'\\\\\\\\nimport { path } from '../..'\\\\\\\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\\\\\\\nimport Settings from '../../../atoms/SettingBox/data'\\\\\\\\nimport { GOOGLE_API_KEY } from '../constants/googleIntegration.constants'\\\\\\\\nimport infowindowStructure from '../dummyData/Infowindow.structure.sampleData'\\\\\\\\nimport markerIcons from '../dummyData/MarkerIcon.sampleData'\\\\\\\\nimport sampleTripData from '../dummyData/Presentation.Trips.sampleData'\\\\\\\\nimport markerLayerObj from '../dummyData/MarkerWithIcon.sampleData'\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/Map`,\\\\\\\\n  decorators: [withKnobs],\\\\\\\\n  component: LeafletMap\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const TripsMapWithLegend = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // create legend on the basis of markers data\\\\\\\\n\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[51.0, 19.0]}\\\\\\\\n        zoom={4}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='300px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        trips={object('Trip Configuration', sampleTripData)}\\\\\\\\n        iconsRef={markerIcons}\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\";\\\\n// @ts-ignore\\\\nvar __ADDS_MAP__ = {};\\\\n// @ts-ignore\\\\nvar __MAIN_FILE_LOCATION__ = \\\\\\\"/CustomLegend.stories.tsx\\\\\\\";\\\\n// @ts-ignore\\\\nvar __MODULE_DEPENDENCIES__ = [];\\\\n// @ts-ignore\\\\nvar __LOCAL_DEPENDENCIES__ = {};\\\\n// @ts-ignore\\\\nvar __IDS_TO_FRAMEWORKS__ = {};\\\\n        \\\\nimport { action } from '@storybook/addon-actions'\\\\nimport { object, withKnobs } from '@storybook/addon-knobs'\\\\nimport React from 'react'\\\\nimport LeafletMap from '..'\\\\nimport { path } from '../..'\\\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\\\nimport Settings from '../../../atoms/SettingBox/data'\\\\nimport { GOOGLE_API_KEY } from '../constants/googleIntegration.constants'\\\\nimport infowindowStructure from '../dummyData/Infowindow.structure.sampleData'\\\\nimport markerIcons from '../dummyData/MarkerIcon.sampleData'\\\\nimport sampleTripData from '../dummyData/Presentation.Trips.sampleData'\\\\nimport markerLayerObj from '../dummyData/MarkerWithIcon.sampleData'\\\\n\\\\nexport default {parameters: {\\\\\\\"storySource\\\\\\\":{\\\\\\\"source\\\\\\\":\\\\\\\"import { action } from '@storybook/addon-actions'\\\\\\\\nimport { object, withKnobs } from '@storybook/addon-knobs'\\\\\\\\nimport React from 'react'\\\\\\\\nimport LeafletMap from '..'\\\\\\\\nimport { path } from '../..'\\\\\\\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\\\\\\\nimport Settings from '../../../atoms/SettingBox/data'\\\\\\\\nimport { GOOGLE_API_KEY } from '../constants/googleIntegration.constants'\\\\\\\\nimport infowindowStructure from '../dummyData/Infowindow.structure.sampleData'\\\\\\\\nimport markerIcons from '../dummyData/MarkerIcon.sampleData'\\\\\\\\nimport sampleTripData from '../dummyData/Presentation.Trips.sampleData'\\\\\\\\nimport markerLayerObj from '../dummyData/MarkerWithIcon.sampleData'\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/Map`,\\\\\\\\n  decorators: [withKnobs],\\\\\\\\n  component: LeafletMap\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const TripsMapWithLegend = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // create legend on the basis of markers data\\\\\\\\n\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[51.0, 19.0]}\\\\\\\\n        zoom={4}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='300px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        trips={object('Trip Configuration', sampleTripData)}\\\\\\\\n        iconsRef={markerIcons}\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\",\\\\\\\"locationsMap\\\\\\\":{}},},\\\\n  title: `${path}/Map`,\\\\n  decorators: [withKnobs],\\\\n  component: LeafletMap\\\\n}\\\\n\\\\nexport const TripsMapWithLegend = addSourceDecorator(() => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // create legend on the basis of markers data\\\\n\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        trips={object('Trip Configuration', sampleTripData)}\\\\n        iconsRef={markerIcons}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\",\\\"locationsMap\\\":{}},\\\"storySource\\\":{\\\"source\\\":\\\"import { action } from '@storybook/addon-actions'\\\\nimport { object, withKnobs } from '@storybook/addon-knobs'\\\\nimport React from 'react'\\\\nimport LeafletMap from '..'\\\\nimport { path } from '../..'\\\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\\\nimport Settings from '../../../atoms/SettingBox/data'\\\\nimport { GOOGLE_API_KEY } from '../constants/googleIntegration.constants'\\\\nimport infowindowStructure from '../dummyData/Infowindow.structure.sampleData'\\\\nimport markerIcons from '../dummyData/MarkerIcon.sampleData'\\\\nimport sampleTripData from '../dummyData/Presentation.Trips.sampleData'\\\\nimport markerLayerObj from '../dummyData/MarkerWithIcon.sampleData'\\\\n\\\\nexport default {\\\\n  title: `${path}/Map`,\\\\n  decorators: [withKnobs],\\\\n  component: LeafletMap\\\\n}\\\\n\\\\nexport const TripsMapWithLegend = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // create legend on the basis of markers data\\\\n\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        trips={object('Trip Configuration', sampleTripData)}\\\\n        iconsRef={markerIcons}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\",\\\"locationsMap\\\":{}},},\\n  title: `${path}/Map`,\\n  decorators: [withKnobs],\\n  component: LeafletMap\\n}\\n\\nexport const TripsMapWithLegend = addSourceDecorator(addSourceDecorator(() => {\\n  const settingConfig = Object.assign({}, Settings)\\n  // create legend on the basis of markers data\\n\\n  // set permission false, so that map mode will be hidden\\n  settingConfig['Map Mode'].permission = false\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        markers={object('Marker Configuration', markerLayerObj)}\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[51.0, 19.0]}\\n        zoom={4}\\n        zoomControl\\n        locationSearch\\n        googleApiKey={GOOGLE_API_KEY}\\n        height='300px'\\n        width='800px'\\n        tiles='google_roadmap'\\n        trips={object('Trip Configuration', sampleTripData)}\\n        iconsRef={markerIcons}\\n        popupRef={infowindowStructure}\\n        onSettingChange={action('setting changed')}\\n      />\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\"; // @ts-ignore\n\nvar __ADDS_MAP__ = {}; // @ts-ignore\n\nvar __MAIN_FILE_LOCATION__ = \"/CustomLegend.stories.tsx\"; // @ts-ignore\n\nvar __MODULE_DEPENDENCIES__ = []; // @ts-ignore\n\nvar __LOCAL_DEPENDENCIES__ = {}; // @ts-ignore\n\nvar __IDS_TO_FRAMEWORKS__ = {};\n/* eslint-disable */\n// @ts-nocheck\n// @ts-ignore\n\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource; // @ts-ignore\n\n\nvar addSourceDecorator = require(\"@storybook/source-loader/preview\").addSource; // @ts-ignore\n\n\nvar __SOURCE_PREFIX__ = \"/Users/farhanansari/Code/ui-library/src/components/atoms/Map/Stories\"; // @ts-ignore\n\nvar __STORY__ = \"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/farhanansari/Code/ui-library/src/components/atoms/Map/Stories\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"import { action } from '@storybook/addon-actions'\\\\nimport { object, withKnobs } from '@storybook/addon-knobs'\\\\nimport React from 'react'\\\\nimport LeafletMap from '..'\\\\nimport { path } from '../..'\\\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\\\nimport Settings from '../../../atoms/SettingBox/data'\\\\nimport { GOOGLE_API_KEY } from '../constants/googleIntegration.constants'\\\\nimport infowindowStructure from '../dummyData/Infowindow.structure.sampleData'\\\\nimport markerIcons from '../dummyData/MarkerIcon.sampleData'\\\\nimport sampleTripData from '../dummyData/Presentation.Trips.sampleData'\\\\nimport markerLayerObj from '../dummyData/MarkerWithIcon.sampleData'\\\\n\\\\nexport default {\\\\n  title: `${path}/Map`,\\\\n  decorators: [withKnobs],\\\\n  component: LeafletMap\\\\n}\\\\n\\\\nexport const TripsMapWithLegend = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // create legend on the basis of markers data\\\\n\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        trips={object('Trip Configuration', sampleTripData)}\\\\n        iconsRef={markerIcons}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/CustomLegend.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\nimport { action } from '@storybook/addon-actions'\\nimport { object, withKnobs } from '@storybook/addon-knobs'\\nimport React from 'react'\\nimport LeafletMap from '..'\\nimport { path } from '../..'\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\nimport Settings from '../../../atoms/SettingBox/data'\\nimport { GOOGLE_API_KEY } from '../constants/googleIntegration.constants'\\nimport infowindowStructure from '../dummyData/Infowindow.structure.sampleData'\\nimport markerIcons from '../dummyData/MarkerIcon.sampleData'\\nimport sampleTripData from '../dummyData/Presentation.Trips.sampleData'\\nimport markerLayerObj from '../dummyData/MarkerWithIcon.sampleData'\\n\\nexport default {parameters: {\\\"storySource\\\":{\\\"source\\\":\\\"import { action } from '@storybook/addon-actions'\\\\nimport { object, withKnobs } from '@storybook/addon-knobs'\\\\nimport React from 'react'\\\\nimport LeafletMap from '..'\\\\nimport { path } from '../..'\\\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\\\nimport Settings from '../../../atoms/SettingBox/data'\\\\nimport { GOOGLE_API_KEY } from '../constants/googleIntegration.constants'\\\\nimport infowindowStructure from '../dummyData/Infowindow.structure.sampleData'\\\\nimport markerIcons from '../dummyData/MarkerIcon.sampleData'\\\\nimport sampleTripData from '../dummyData/Presentation.Trips.sampleData'\\\\nimport markerLayerObj from '../dummyData/MarkerWithIcon.sampleData'\\\\n\\\\nexport default {\\\\n  title: `${path}/Map`,\\\\n  decorators: [withKnobs],\\\\n  component: LeafletMap\\\\n}\\\\n\\\\nexport const TripsMapWithLegend = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // create legend on the basis of markers data\\\\n\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        trips={object('Trip Configuration', sampleTripData)}\\\\n        iconsRef={markerIcons}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\",\\\"locationsMap\\\":{}},},\\n  title: `${path}/Map`,\\n  decorators: [withKnobs],\\n  component: LeafletMap\\n}\\n\\nexport const TripsMapWithLegend = addSourceDecorator(() => {\\n  const settingConfig = Object.assign({}, Settings)\\n  // create legend on the basis of markers data\\n\\n  // set permission false, so that map mode will be hidden\\n  settingConfig['Map Mode'].permission = false\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        markers={object('Marker Configuration', markerLayerObj)}\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[51.0, 19.0]}\\n        zoom={4}\\n        zoomControl\\n        locationSearch\\n        googleApiKey={GOOGLE_API_KEY}\\n        height='300px'\\n        width='800px'\\n        tiles='google_roadmap'\\n        trips={object('Trip Configuration', sampleTripData)}\\n        iconsRef={markerIcons}\\n        popupRef={infowindowStructure}\\n        onSettingChange={action('setting changed')}\\n      />\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\"; // @ts-ignore\n\nvar __ADDS_MAP__ = {}; // @ts-ignore\n\nvar __MAIN_FILE_LOCATION__ = \"/CustomLegend.stories.tsx\"; // @ts-ignore\n\nvar __MODULE_DEPENDENCIES__ = []; // @ts-ignore\n\nvar __LOCAL_DEPENDENCIES__ = {}; // @ts-ignore\n\nvar __IDS_TO_FRAMEWORKS__ = {};\n/* eslint-disable */\n// @ts-nocheck\n// @ts-ignore\n\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource; // @ts-ignore\n\n\nvar addSourceDecorator = require(\"@storybook/source-loader/preview\").addSource; // @ts-ignore\n\n\nvar __SOURCE_PREFIX__ = \"/Users/farhanansari/Code/ui-library/src/components/atoms/Map/Stories\"; // @ts-ignore\n\nvar __STORY__ = \"import { action } from '@storybook/addon-actions'\\nimport { object, withKnobs } from '@storybook/addon-knobs'\\nimport React from 'react'\\nimport LeafletMap from '..'\\nimport { path } from '../..'\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\nimport Settings from '../../../atoms/SettingBox/data'\\nimport { GOOGLE_API_KEY } from '../constants/googleIntegration.constants'\\nimport infowindowStructure from '../dummyData/Infowindow.structure.sampleData'\\nimport markerIcons from '../dummyData/MarkerIcon.sampleData'\\nimport sampleTripData from '../dummyData/Presentation.Trips.sampleData'\\nimport markerLayerObj from '../dummyData/MarkerWithIcon.sampleData'\\n\\nexport default {\\n  title: `${path}/Map`,\\n  decorators: [withKnobs],\\n  component: LeafletMap\\n}\\n\\nexport const TripsMapWithLegend = () => {\\n  const settingConfig = Object.assign({}, Settings)\\n  // create legend on the basis of markers data\\n\\n  // set permission false, so that map mode will be hidden\\n  settingConfig['Map Mode'].permission = false\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        markers={object('Marker Configuration', markerLayerObj)}\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[51.0, 19.0]}\\n        zoom={4}\\n        zoomControl\\n        locationSearch\\n        googleApiKey={GOOGLE_API_KEY}\\n        height='300px'\\n        width='800px'\\n        tiles='google_roadmap'\\n        trips={object('Trip Configuration', sampleTripData)}\\n        iconsRef={markerIcons}\\n        popupRef={infowindowStructure}\\n        onSettingChange={action('setting changed')}\\n      />\\n    </ThemeWrapper>\\n  )\\n}\\n\"; // @ts-ignore\n\nvar __ADDS_MAP__ = {}; // @ts-ignore\n\nvar __MAIN_FILE_LOCATION__ = \"/CustomLegend.stories.tsx\"; // @ts-ignore\n\nvar __MODULE_DEPENDENCIES__ = []; // @ts-ignore\n\nvar __LOCAL_DEPENDENCIES__ = {}; // @ts-ignore\n\nvar __IDS_TO_FRAMEWORKS__ = {};\nimport { action } from '@storybook/addon-actions';\nimport { object, withKnobs } from '@storybook/addon-knobs';\nimport React from 'react';\nimport LeafletMap from '..';\nimport { path } from '../..';\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper';\nimport Settings from '../../../atoms/SettingBox/data';\nimport { GOOGLE_API_KEY } from '../constants/googleIntegration.constants';\nimport infowindowStructure from '../dummyData/Infowindow.structure.sampleData';\nimport markerIcons from '../dummyData/MarkerIcon.sampleData';\nimport sampleTripData from '../dummyData/Presentation.Trips.sampleData';\nimport markerLayerObj from '../dummyData/MarkerWithIcon.sampleData';\nexport default {\n  parameters: (_parameters = {\n    \"storySource\": {\n      \"source\": \"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/farhanansari/Code/ui-library/src/components/atoms/Map/Stories\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"\\\\n\\\\n// @ts-nocheck\\\\n// @ts-ignore\\\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\\\n// @ts-ignore\\\\nvar addSourceDecorator = require(\\\\\\\"@storybook/source-loader/preview\\\\\\\").addSource;\\\\n// @ts-ignore\\\\nvar __SOURCE_PREFIX__ = \\\\\\\"/Users/farhanansari/Code/ui-library/src/components/atoms/Map/Stories\\\\\\\";\\\\n// @ts-ignore\\\\nvar __STORY__ = \\\\\\\"import { action } from '@storybook/addon-actions'\\\\\\\\nimport { object, withKnobs } from '@storybook/addon-knobs'\\\\\\\\nimport React from 'react'\\\\\\\\nimport LeafletMap from '..'\\\\\\\\nimport { path } from '../..'\\\\\\\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\\\\\\\nimport Settings from '../../../atoms/SettingBox/data'\\\\\\\\nimport { GOOGLE_API_KEY } from '../constants/googleIntegration.constants'\\\\\\\\nimport infowindowStructure from '../dummyData/Infowindow.structure.sampleData'\\\\\\\\nimport markerIcons from '../dummyData/MarkerIcon.sampleData'\\\\\\\\nimport sampleTripData from '../dummyData/Presentation.Trips.sampleData'\\\\\\\\nimport markerLayerObj from '../dummyData/MarkerWithIcon.sampleData'\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/Map`,\\\\\\\\n  decorators: [withKnobs],\\\\\\\\n  component: LeafletMap\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const TripsMapWithLegend = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // create legend on the basis of markers data\\\\\\\\n\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[51.0, 19.0]}\\\\\\\\n        zoom={4}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='300px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        trips={object('Trip Configuration', sampleTripData)}\\\\\\\\n        iconsRef={markerIcons}\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\";\\\\n// @ts-ignore\\\\nvar __ADDS_MAP__ = {};\\\\n// @ts-ignore\\\\nvar __MAIN_FILE_LOCATION__ = \\\\\\\"/CustomLegend.stories.tsx\\\\\\\";\\\\n// @ts-ignore\\\\nvar __MODULE_DEPENDENCIES__ = [];\\\\n// @ts-ignore\\\\nvar __LOCAL_DEPENDENCIES__ = {};\\\\n// @ts-ignore\\\\nvar __IDS_TO_FRAMEWORKS__ = {};\\\\n        \\\\nimport { action } from '@storybook/addon-actions'\\\\nimport { object, withKnobs } from '@storybook/addon-knobs'\\\\nimport React from 'react'\\\\nimport LeafletMap from '..'\\\\nimport { path } from '../..'\\\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\\\nimport Settings from '../../../atoms/SettingBox/data'\\\\nimport { GOOGLE_API_KEY } from '../constants/googleIntegration.constants'\\\\nimport infowindowStructure from '../dummyData/Infowindow.structure.sampleData'\\\\nimport markerIcons from '../dummyData/MarkerIcon.sampleData'\\\\nimport sampleTripData from '../dummyData/Presentation.Trips.sampleData'\\\\nimport markerLayerObj from '../dummyData/MarkerWithIcon.sampleData'\\\\n\\\\nexport default {parameters: {\\\\\\\"storySource\\\\\\\":{\\\\\\\"source\\\\\\\":\\\\\\\"import { action } from '@storybook/addon-actions'\\\\\\\\nimport { object, withKnobs } from '@storybook/addon-knobs'\\\\\\\\nimport React from 'react'\\\\\\\\nimport LeafletMap from '..'\\\\\\\\nimport { path } from '../..'\\\\\\\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\\\\\\\nimport Settings from '../../../atoms/SettingBox/data'\\\\\\\\nimport { GOOGLE_API_KEY } from '../constants/googleIntegration.constants'\\\\\\\\nimport infowindowStructure from '../dummyData/Infowindow.structure.sampleData'\\\\\\\\nimport markerIcons from '../dummyData/MarkerIcon.sampleData'\\\\\\\\nimport sampleTripData from '../dummyData/Presentation.Trips.sampleData'\\\\\\\\nimport markerLayerObj from '../dummyData/MarkerWithIcon.sampleData'\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/Map`,\\\\\\\\n  decorators: [withKnobs],\\\\\\\\n  component: LeafletMap\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const TripsMapWithLegend = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // create legend on the basis of markers data\\\\\\\\n\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[51.0, 19.0]}\\\\\\\\n        zoom={4}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='300px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        trips={object('Trip Configuration', sampleTripData)}\\\\\\\\n        iconsRef={markerIcons}\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\",\\\\\\\"locationsMap\\\\\\\":{}},},\\\\n  title: `${path}/Map`,\\\\n  decorators: [withKnobs],\\\\n  component: LeafletMap\\\\n}\\\\n\\\\nexport const TripsMapWithLegend = addSourceDecorator(() => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // create legend on the basis of markers data\\\\n\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        trips={object('Trip Configuration', sampleTripData)}\\\\n        iconsRef={markerIcons}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/CustomLegend.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\n\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/farhanansari/Code/ui-library/src/components/atoms/Map/Stories\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"import { action } from '@storybook/addon-actions'\\\\nimport { object, withKnobs } from '@storybook/addon-knobs'\\\\nimport React from 'react'\\\\nimport LeafletMap from '..'\\\\nimport { path } from '../..'\\\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\\\nimport Settings from '../../../atoms/SettingBox/data'\\\\nimport { GOOGLE_API_KEY } from '../constants/googleIntegration.constants'\\\\nimport infowindowStructure from '../dummyData/Infowindow.structure.sampleData'\\\\nimport markerIcons from '../dummyData/MarkerIcon.sampleData'\\\\nimport sampleTripData from '../dummyData/Presentation.Trips.sampleData'\\\\nimport markerLayerObj from '../dummyData/MarkerWithIcon.sampleData'\\\\n\\\\nexport default {\\\\n  title: `${path}/Map`,\\\\n  decorators: [withKnobs],\\\\n  component: LeafletMap\\\\n}\\\\n\\\\nexport const TripsMapWithLegend = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // create legend on the basis of markers data\\\\n\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        trips={object('Trip Configuration', sampleTripData)}\\\\n        iconsRef={markerIcons}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/CustomLegend.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\nimport { action } from '@storybook/addon-actions'\\nimport { object, withKnobs } from '@storybook/addon-knobs'\\nimport React from 'react'\\nimport LeafletMap from '..'\\nimport { path } from '../..'\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\nimport Settings from '../../../atoms/SettingBox/data'\\nimport { GOOGLE_API_KEY } from '../constants/googleIntegration.constants'\\nimport infowindowStructure from '../dummyData/Infowindow.structure.sampleData'\\nimport markerIcons from '../dummyData/MarkerIcon.sampleData'\\nimport sampleTripData from '../dummyData/Presentation.Trips.sampleData'\\nimport markerLayerObj from '../dummyData/MarkerWithIcon.sampleData'\\n\\nexport default {parameters: {\\\"storySource\\\":{\\\"source\\\":\\\"\\\\n\\\\n// @ts-nocheck\\\\n// @ts-ignore\\\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\\\n// @ts-ignore\\\\nvar addSourceDecorator = require(\\\\\\\"@storybook/source-loader/preview\\\\\\\").addSource;\\\\n// @ts-ignore\\\\nvar __SOURCE_PREFIX__ = \\\\\\\"/Users/farhanansari/Code/ui-library/src/components/atoms/Map/Stories\\\\\\\";\\\\n// @ts-ignore\\\\nvar __STORY__ = \\\\\\\"import { action } from '@storybook/addon-actions'\\\\\\\\nimport { object, withKnobs } from '@storybook/addon-knobs'\\\\\\\\nimport React from 'react'\\\\\\\\nimport LeafletMap from '..'\\\\\\\\nimport { path } from '../..'\\\\\\\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\\\\\\\nimport Settings from '../../../atoms/SettingBox/data'\\\\\\\\nimport { GOOGLE_API_KEY } from '../constants/googleIntegration.constants'\\\\\\\\nimport infowindowStructure from '../dummyData/Infowindow.structure.sampleData'\\\\\\\\nimport markerIcons from '../dummyData/MarkerIcon.sampleData'\\\\\\\\nimport sampleTripData from '../dummyData/Presentation.Trips.sampleData'\\\\\\\\nimport markerLayerObj from '../dummyData/MarkerWithIcon.sampleData'\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/Map`,\\\\\\\\n  decorators: [withKnobs],\\\\\\\\n  component: LeafletMap\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const TripsMapWithLegend = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // create legend on the basis of markers data\\\\\\\\n\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[51.0, 19.0]}\\\\\\\\n        zoom={4}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='300px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        trips={object('Trip Configuration', sampleTripData)}\\\\\\\\n        iconsRef={markerIcons}\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\";\\\\n// @ts-ignore\\\\nvar __ADDS_MAP__ = {};\\\\n// @ts-ignore\\\\nvar __MAIN_FILE_LOCATION__ = \\\\\\\"/CustomLegend.stories.tsx\\\\\\\";\\\\n// @ts-ignore\\\\nvar __MODULE_DEPENDENCIES__ = [];\\\\n// @ts-ignore\\\\nvar __LOCAL_DEPENDENCIES__ = {};\\\\n// @ts-ignore\\\\nvar __IDS_TO_FRAMEWORKS__ = {};\\\\n        \\\\nimport { action } from '@storybook/addon-actions'\\\\nimport { object, withKnobs } from '@storybook/addon-knobs'\\\\nimport React from 'react'\\\\nimport LeafletMap from '..'\\\\nimport { path } from '../..'\\\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\\\nimport Settings from '../../../atoms/SettingBox/data'\\\\nimport { GOOGLE_API_KEY } from '../constants/googleIntegration.constants'\\\\nimport infowindowStructure from '../dummyData/Infowindow.structure.sampleData'\\\\nimport markerIcons from '../dummyData/MarkerIcon.sampleData'\\\\nimport sampleTripData from '../dummyData/Presentation.Trips.sampleData'\\\\nimport markerLayerObj from '../dummyData/MarkerWithIcon.sampleData'\\\\n\\\\nexport default {parameters: {\\\\\\\"storySource\\\\\\\":{\\\\\\\"source\\\\\\\":\\\\\\\"import { action } from '@storybook/addon-actions'\\\\\\\\nimport { object, withKnobs } from '@storybook/addon-knobs'\\\\\\\\nimport React from 'react'\\\\\\\\nimport LeafletMap from '..'\\\\\\\\nimport { path } from '../..'\\\\\\\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\\\\\\\nimport Settings from '../../../atoms/SettingBox/data'\\\\\\\\nimport { GOOGLE_API_KEY } from '../constants/googleIntegration.constants'\\\\\\\\nimport infowindowStructure from '../dummyData/Infowindow.structure.sampleData'\\\\\\\\nimport markerIcons from '../dummyData/MarkerIcon.sampleData'\\\\\\\\nimport sampleTripData from '../dummyData/Presentation.Trips.sampleData'\\\\\\\\nimport markerLayerObj from '../dummyData/MarkerWithIcon.sampleData'\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/Map`,\\\\\\\\n  decorators: [withKnobs],\\\\\\\\n  component: LeafletMap\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const TripsMapWithLegend = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // create legend on the basis of markers data\\\\\\\\n\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[51.0, 19.0]}\\\\\\\\n        zoom={4}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='300px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        trips={object('Trip Configuration', sampleTripData)}\\\\\\\\n        iconsRef={markerIcons}\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\",\\\\\\\"locationsMap\\\\\\\":{}},},\\\\n  title: `${path}/Map`,\\\\n  decorators: [withKnobs],\\\\n  component: LeafletMap\\\\n}\\\\n\\\\nexport const TripsMapWithLegend = addSourceDecorator(() => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // create legend on the basis of markers data\\\\n\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        trips={object('Trip Configuration', sampleTripData)}\\\\n        iconsRef={markerIcons}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\",\\\"locationsMap\\\":{}},\\\"storySource\\\":{\\\"source\\\":\\\"import { action } from '@storybook/addon-actions'\\\\nimport { object, withKnobs } from '@storybook/addon-knobs'\\\\nimport React from 'react'\\\\nimport LeafletMap from '..'\\\\nimport { path } from '../..'\\\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\\\nimport Settings from '../../../atoms/SettingBox/data'\\\\nimport { GOOGLE_API_KEY } from '../constants/googleIntegration.constants'\\\\nimport infowindowStructure from '../dummyData/Infowindow.structure.sampleData'\\\\nimport markerIcons from '../dummyData/MarkerIcon.sampleData'\\\\nimport sampleTripData from '../dummyData/Presentation.Trips.sampleData'\\\\nimport markerLayerObj from '../dummyData/MarkerWithIcon.sampleData'\\\\n\\\\nexport default {\\\\n  title: `${path}/Map`,\\\\n  decorators: [withKnobs],\\\\n  component: LeafletMap\\\\n}\\\\n\\\\nexport const TripsMapWithLegend = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // create legend on the basis of markers data\\\\n\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        trips={object('Trip Configuration', sampleTripData)}\\\\n        iconsRef={markerIcons}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\",\\\"locationsMap\\\":{}},},\\n  title: `${path}/Map`,\\n  decorators: [withKnobs],\\n  component: LeafletMap\\n}\\n\\nexport const TripsMapWithLegend = addSourceDecorator(addSourceDecorator(() => {\\n  const settingConfig = Object.assign({}, Settings)\\n  // create legend on the basis of markers data\\n\\n  // set permission false, so that map mode will be hidden\\n  settingConfig['Map Mode'].permission = false\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        markers={object('Marker Configuration', markerLayerObj)}\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[51.0, 19.0]}\\n        zoom={4}\\n        zoomControl\\n        locationSearch\\n        googleApiKey={GOOGLE_API_KEY}\\n        height='300px'\\n        width='800px'\\n        tiles='google_roadmap'\\n        trips={object('Trip Configuration', sampleTripData)}\\n        iconsRef={markerIcons}\\n        popupRef={infowindowStructure}\\n        onSettingChange={action('setting changed')}\\n      />\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\",\n      \"locationsMap\": {}\n    }\n  }, _defineProperty(_parameters, \"storySource\", {\n    \"source\": \"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/farhanansari/Code/ui-library/src/components/atoms/Map/Stories\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"import { action } from '@storybook/addon-actions'\\\\nimport { object, withKnobs } from '@storybook/addon-knobs'\\\\nimport React from 'react'\\\\nimport LeafletMap from '..'\\\\nimport { path } from '../..'\\\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\\\nimport Settings from '../../../atoms/SettingBox/data'\\\\nimport { GOOGLE_API_KEY } from '../constants/googleIntegration.constants'\\\\nimport infowindowStructure from '../dummyData/Infowindow.structure.sampleData'\\\\nimport markerIcons from '../dummyData/MarkerIcon.sampleData'\\\\nimport sampleTripData from '../dummyData/Presentation.Trips.sampleData'\\\\nimport markerLayerObj from '../dummyData/MarkerWithIcon.sampleData'\\\\n\\\\nexport default {\\\\n  title: `${path}/Map`,\\\\n  decorators: [withKnobs],\\\\n  component: LeafletMap\\\\n}\\\\n\\\\nexport const TripsMapWithLegend = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // create legend on the basis of markers data\\\\n\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        trips={object('Trip Configuration', sampleTripData)}\\\\n        iconsRef={markerIcons}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/CustomLegend.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\nimport { action } from '@storybook/addon-actions'\\nimport { object, withKnobs } from '@storybook/addon-knobs'\\nimport React from 'react'\\nimport LeafletMap from '..'\\nimport { path } from '../..'\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\nimport Settings from '../../../atoms/SettingBox/data'\\nimport { GOOGLE_API_KEY } from '../constants/googleIntegration.constants'\\nimport infowindowStructure from '../dummyData/Infowindow.structure.sampleData'\\nimport markerIcons from '../dummyData/MarkerIcon.sampleData'\\nimport sampleTripData from '../dummyData/Presentation.Trips.sampleData'\\nimport markerLayerObj from '../dummyData/MarkerWithIcon.sampleData'\\n\\nexport default {parameters: {\\\"storySource\\\":{\\\"source\\\":\\\"import { action } from '@storybook/addon-actions'\\\\nimport { object, withKnobs } from '@storybook/addon-knobs'\\\\nimport React from 'react'\\\\nimport LeafletMap from '..'\\\\nimport { path } from '../..'\\\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\\\nimport Settings from '../../../atoms/SettingBox/data'\\\\nimport { GOOGLE_API_KEY } from '../constants/googleIntegration.constants'\\\\nimport infowindowStructure from '../dummyData/Infowindow.structure.sampleData'\\\\nimport markerIcons from '../dummyData/MarkerIcon.sampleData'\\\\nimport sampleTripData from '../dummyData/Presentation.Trips.sampleData'\\\\nimport markerLayerObj from '../dummyData/MarkerWithIcon.sampleData'\\\\n\\\\nexport default {\\\\n  title: `${path}/Map`,\\\\n  decorators: [withKnobs],\\\\n  component: LeafletMap\\\\n}\\\\n\\\\nexport const TripsMapWithLegend = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // create legend on the basis of markers data\\\\n\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        trips={object('Trip Configuration', sampleTripData)}\\\\n        iconsRef={markerIcons}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\",\\\"locationsMap\\\":{}},},\\n  title: `${path}/Map`,\\n  decorators: [withKnobs],\\n  component: LeafletMap\\n}\\n\\nexport const TripsMapWithLegend = addSourceDecorator(() => {\\n  const settingConfig = Object.assign({}, Settings)\\n  // create legend on the basis of markers data\\n\\n  // set permission false, so that map mode will be hidden\\n  settingConfig['Map Mode'].permission = false\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        markers={object('Marker Configuration', markerLayerObj)}\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[51.0, 19.0]}\\n        zoom={4}\\n        zoomControl\\n        locationSearch\\n        googleApiKey={GOOGLE_API_KEY}\\n        height='300px'\\n        width='800px'\\n        tiles='google_roadmap'\\n        trips={object('Trip Configuration', sampleTripData)}\\n        iconsRef={markerIcons}\\n        popupRef={infowindowStructure}\\n        onSettingChange={action('setting changed')}\\n      />\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\",\n    \"locationsMap\": {}\n  }), _defineProperty(_parameters, \"storySource\", {\n    \"source\": \"import { action } from '@storybook/addon-actions'\\nimport { object, withKnobs } from '@storybook/addon-knobs'\\nimport React from 'react'\\nimport LeafletMap from '..'\\nimport { path } from '../..'\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\nimport Settings from '../../../atoms/SettingBox/data'\\nimport { GOOGLE_API_KEY } from '../constants/googleIntegration.constants'\\nimport infowindowStructure from '../dummyData/Infowindow.structure.sampleData'\\nimport markerIcons from '../dummyData/MarkerIcon.sampleData'\\nimport sampleTripData from '../dummyData/Presentation.Trips.sampleData'\\nimport markerLayerObj from '../dummyData/MarkerWithIcon.sampleData'\\n\\nexport default {\\n  title: `${path}/Map`,\\n  decorators: [withKnobs],\\n  component: LeafletMap\\n}\\n\\nexport const TripsMapWithLegend = () => {\\n  const settingConfig = Object.assign({}, Settings)\\n  // create legend on the basis of markers data\\n\\n  // set permission false, so that map mode will be hidden\\n  settingConfig['Map Mode'].permission = false\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        markers={object('Marker Configuration', markerLayerObj)}\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[51.0, 19.0]}\\n        zoom={4}\\n        zoomControl\\n        locationSearch\\n        googleApiKey={GOOGLE_API_KEY}\\n        height='300px'\\n        width='800px'\\n        tiles='google_roadmap'\\n        trips={object('Trip Configuration', sampleTripData)}\\n        iconsRef={markerIcons}\\n        popupRef={infowindowStructure}\\n        onSettingChange={action('setting changed')}\\n      />\\n    </ThemeWrapper>\\n  )\\n}\\n\",\n    \"locationsMap\": {}\n  }), _parameters),\n  title: path + \"/Map\",\n  decorators: [withKnobs],\n  component: LeafletMap\n};\nexport var TripsMapWithLegend = addSourceDecorator(addSourceDecorator(addSourceDecorator(function () {\n  var settingConfig = Object.assign({}, Settings); // create legend on the basis of markers data\n  // set permission false, so that map mode will be hidden\n\n  settingConfig['Map Mode'].permission = false;\n  return React.createElement(ThemeWrapper, null, React.createElement(LeafletMap, {\n    markers: object('Marker Configuration', markerLayerObj),\n    id: 'leafletBaseMap',\n    classes: 'baseMap customBaseMap',\n    center: [51.0, 19.0],\n    zoom: 4,\n    zoomControl: true,\n    locationSearch: true,\n    googleApiKey: GOOGLE_API_KEY,\n    height: '300px',\n    width: '800px',\n    tiles: 'google_roadmap',\n    trips: object('Trip Configuration', sampleTripData),\n    iconsRef: markerIcons,\n    popupRef: infowindowStructure,\n    onSettingChange: action('setting changed')\n  }));\n}, {\n  __STORY__: __STORY__,\n  __ADDS_MAP__: __ADDS_MAP__,\n  __MAIN_FILE_LOCATION__: __MAIN_FILE_LOCATION__,\n  __MODULE_DEPENDENCIES__: __MODULE_DEPENDENCIES__,\n  __LOCAL_DEPENDENCIES__: __LOCAL_DEPENDENCIES__,\n  __SOURCE_PREFIX__: __SOURCE_PREFIX__,\n  __IDS_TO_FRAMEWORKS__: __IDS_TO_FRAMEWORKS__\n}), {\n  __STORY__: __STORY__,\n  __ADDS_MAP__: __ADDS_MAP__,\n  __MAIN_FILE_LOCATION__: __MAIN_FILE_LOCATION__,\n  __MODULE_DEPENDENCIES__: __MODULE_DEPENDENCIES__,\n  __LOCAL_DEPENDENCIES__: __LOCAL_DEPENDENCIES__,\n  __SOURCE_PREFIX__: __SOURCE_PREFIX__,\n  __IDS_TO_FRAMEWORKS__: __IDS_TO_FRAMEWORKS__\n}), {\n  __STORY__: __STORY__,\n  __ADDS_MAP__: __ADDS_MAP__,\n  __MAIN_FILE_LOCATION__: __MAIN_FILE_LOCATION__,\n  __MODULE_DEPENDENCIES__: __MODULE_DEPENDENCIES__,\n  __LOCAL_DEPENDENCIES__: __LOCAL_DEPENDENCIES__,\n  __SOURCE_PREFIX__: __SOURCE_PREFIX__,\n  __IDS_TO_FRAMEWORKS__: __IDS_TO_FRAMEWORKS__\n});","map":{"version":3,"sources":["/Users/farhanansari/Code/ui-library/node_modules/react-docgen-typescript-loader/dist/index.js!/Users/farhanansari/Code/ui-library/node_modules/eslint-loader/dist/cjs.js??ref--6-0!/Users/farhanansari/Code/ui-library/node_modules/@storybook/source-loader/dist/server/index.js??ref--11!/Users/farhanansari/Code/ui-library/node_modules/@storybook/source-loader/dist/server/index.js!/Users/farhanansari/Code/ui-library/node_modules/@storybook/source-loader/dist/server/index.js!/Users/farhanansari/Code/ui-library/src/components/atoms/Map/Stories/CustomLegend.stories.tsx"],"names":[],"mappings":";;;;AACA;AACA;AACA;AACA,IAAI,gBAAgB,GAAG,OAAO,CAAC,kCAAD,CAAP,CAA4C,UAAnE,C,CACA;;;AACA,IAAI,kBAAkB,GAAG,OAAO,CAAC,kCAAD,CAAP,CAA4C,SAArE,C,CACA;;;AACA,IAAI,iBAAiB,GAAG,sEAAxB,C,CACA;;AACA,IAAI,SAAS,GAAG,02lBAAhB,C,CACA;;AACA,IAAI,YAAY,GAAG,EAAnB,C,CACA;;AACA,IAAI,sBAAsB,GAAG,2BAA7B,C,CACA;;AACA,IAAI,uBAAuB,GAAG,EAA9B,C,CACA;;AACA,IAAI,sBAAsB,GAAG,EAA7B,C,CACA;;AACA,IAAI,qBAAqB,GAAG,EAA5B;AAGA;AACA;AACA;;AACA,IAAI,gBAAgB,GAAG,OAAO,CAAC,kCAAD,CAAP,CAA4C,UAAnE,C,CACA;;;AACA,IAAI,kBAAkB,GAAG,OAAO,CAAC,kCAAD,CAAP,CAA4C,SAArE,C,CACA;;;AACA,IAAI,iBAAiB,GAAG,sEAAxB,C,CACA;;AACA,IAAI,SAAS,GAAG,00LAAhB,C,CACA;;AACA,IAAI,YAAY,GAAG,EAAnB,C,CACA;;AACA,IAAI,sBAAsB,GAAG,2BAA7B,C,CACA;;AACA,IAAI,uBAAuB,GAAG,EAA9B,C,CACA;;AACA,IAAI,sBAAsB,GAAG,EAA7B,C,CACA;;AACA,IAAI,qBAAqB,GAAG,EAA5B;AAGA;AACA;AACA;;AACA,IAAI,gBAAgB,GAAG,OAAO,CAAC,kCAAD,CAAP,CAA4C,UAAnE,C,CACA;;;AACA,IAAI,kBAAkB,GAAG,OAAO,CAAC,kCAAD,CAAP,CAA4C,SAArE,C,CACA;;;AACA,IAAI,iBAAiB,GAAG,sEAAxB,C,CACA;;AACA,IAAI,SAAS,GAAG,soDAAhB,C,CACA;;AACA,IAAI,YAAY,GAAG,EAAnB,C,CACA;;AACA,IAAI,sBAAsB,GAAG,2BAA7B,C,CACA;;AACA,IAAI,uBAAuB,GAAG,EAA9B,C,CACA;;AACA,IAAI,sBAAsB,GAAG,EAA7B,C,CACA;;AACA,IAAI,qBAAqB,GAAG,EAA5B;AAEA,SAAS,MAAT,QAAuB,0BAAvB;AACA,SAAS,MAAT,EAAiB,SAAjB,QAAkC,wBAAlC;AACA,OAAO,KAAP,MAAkB,OAAlB;AACA,OAAO,UAAP,MAAuB,IAAvB;AACA,SAAS,IAAT,QAAqB,OAArB;AACA,OAAO,YAAP,MAAyB,+CAAzB;AACA,OAAO,QAAP,MAAqB,gCAArB;AACA,SAAS,cAAT,QAA+B,0CAA/B;AACA,OAAO,mBAAP,MAAgC,8CAAhC;AACA,OAAO,WAAP,MAAwB,oCAAxB;AACA,OAAO,cAAP,MAA2B,4CAA3B;AACA,OAAO,cAAP,MAA2B,wCAA3B;AAEA,eAAe;AAAC,EAAA,UAAU;AAAG,mBAAc;AAAC,gBAAS,02lBAAV;AAAq3lB,sBAAe;AAAp4lB;AAAjB,iDAAu6lB;AAAC,cAAS,00LAAV;AAAq1L,oBAAe;AAAp2L,GAAv6lB,+CAA6xxB;AAAC,cAAS,soDAAV;AAAipD,oBAAe;AAAhqD,GAA7xxB,eAAX;AACb,EAAA,KAAK,EAAK,IAAI,GAAA,MADD;AAEb,EAAA,UAAU,EAAE,CAAC,SAAD,CAFC;AAGb,EAAA,SAAS,EAAE;AAHE,CAAf;AAMA,OAAO,IAAM,kBAAkB,GAAG,kBAAkB,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,YAAA;AACzF,MAAM,aAAa,GAAG,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB,QAAlB,CAAtB,CADyF,CAEzF;AAEA;;AACA,EAAA,aAAa,CAAC,UAAD,CAAb,CAA0B,UAA1B,GAAuC,KAAvC;AACA,SACE,KAAA,CAAA,aAAA,CAAC,YAAD,EAAa,IAAb,EACE,KAAA,CAAA,aAAA,CAAC,UAAD,EAAW;AACT,IAAA,OAAO,EAAE,MAAM,CAAC,sBAAD,EAAyB,cAAzB,CADN;AAET,IAAA,EAAE,EAAC,gBAFM;AAGT,IAAA,OAAO,EAAC,uBAHC;AAIT,IAAA,MAAM,EAAE,CAAC,IAAD,EAAO,IAAP,CAJC;AAKT,IAAA,IAAI,EAAE,CALG;AAMT,IAAA,WAAW,EAAA,IANF;AAOT,IAAA,cAAc,EAAA,IAPL;AAQT,IAAA,YAAY,EAAE,cARL;AAST,IAAA,MAAM,EAAC,OATE;AAUT,IAAA,KAAK,EAAC,OAVG;AAWT,IAAA,KAAK,EAAC,gBAXG;AAYT,IAAA,KAAK,EAAE,MAAM,CAAC,oBAAD,EAAuB,cAAvB,CAZJ;AAaT,IAAA,QAAQ,EAAE,WAbD;AAcT,IAAA,QAAQ,EAAE,mBAdD;AAeT,IAAA,eAAe,EAAE,MAAM,CAAC,iBAAD;AAfd,GAAX,CADF,CADF;AAqBD,CA3ByF,EA2BvF;AAAC,EAAA,SAAS,EAAA,SAAV;AAAY,EAAA,YAAY,EAAA,YAAxB;AAAyB,EAAA,sBAAsB,EAAA,sBAA/C;AAAgD,EAAA,uBAAuB,EAAA,uBAAvE;AAAwE,EAAA,sBAAsB,EAAA,sBAA9F;AAA+F,EAAA,iBAAiB,EAAA,iBAAhH;AAAiH,EAAA,qBAAqB,EAAA;AAAtI,CA3BuF,CAAnB,EA2BsE;AAAC,EAAA,SAAS,EAAA,SAAV;AAAY,EAAA,YAAY,EAAA,YAAxB;AAAyB,EAAA,sBAAsB,EAAA,sBAA/C;AAAgD,EAAA,uBAAuB,EAAA,uBAAvE;AAAwE,EAAA,sBAAsB,EAAA,sBAA9F;AAA+F,EAAA,iBAAiB,EAAA,iBAAhH;AAAiH,EAAA,qBAAqB,EAAA;AAAtI,CA3BtE,CAAnB,EA2BmO;AAAC,EAAA,SAAS,EAAA,SAAV;AAAY,EAAA,YAAY,EAAA,YAAxB;AAAyB,EAAA,sBAAsB,EAAA,sBAA/C;AAAgD,EAAA,uBAAuB,EAAA,uBAAvE;AAAwE,EAAA,sBAAsB,EAAA,sBAA9F;AAA+F,EAAA,iBAAiB,EAAA,iBAAhH;AAAiH,EAAA,qBAAqB,EAAA;AAAtI,CA3BnO,CAA7C","sourcesContent":["\n/* eslint-disable */\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\n// @ts-ignore\nvar addSourceDecorator = require(\"@storybook/source-loader/preview\").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = \"/Users/farhanansari/Code/ui-library/src/components/atoms/Map/Stories\";\n// @ts-ignore\nvar __STORY__ = \"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/farhanansari/Code/ui-library/src/components/atoms/Map/Stories\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"\\\\n\\\\n// @ts-nocheck\\\\n// @ts-ignore\\\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\\\n// @ts-ignore\\\\nvar addSourceDecorator = require(\\\\\\\"@storybook/source-loader/preview\\\\\\\").addSource;\\\\n// @ts-ignore\\\\nvar __SOURCE_PREFIX__ = \\\\\\\"/Users/farhanansari/Code/ui-library/src/components/atoms/Map/Stories\\\\\\\";\\\\n// @ts-ignore\\\\nvar __STORY__ = \\\\\\\"import { action } from '@storybook/addon-actions'\\\\\\\\nimport { object, withKnobs } from '@storybook/addon-knobs'\\\\\\\\nimport React from 'react'\\\\\\\\nimport LeafletMap from '..'\\\\\\\\nimport { path } from '../..'\\\\\\\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\\\\\\\nimport Settings from '../../../atoms/SettingBox/data'\\\\\\\\nimport { GOOGLE_API_KEY } from '../constants/googleIntegration.constants'\\\\\\\\nimport infowindowStructure from '../dummyData/Infowindow.structure.sampleData'\\\\\\\\nimport markerIcons from '../dummyData/MarkerIcon.sampleData'\\\\\\\\nimport sampleTripData from '../dummyData/Presentation.Trips.sampleData'\\\\\\\\nimport markerLayerObj from '../dummyData/MarkerWithIcon.sampleData'\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/Map`,\\\\\\\\n  decorators: [withKnobs],\\\\\\\\n  component: LeafletMap\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const TripsMapWithLegend = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // create legend on the basis of markers data\\\\\\\\n\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[51.0, 19.0]}\\\\\\\\n        zoom={4}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='300px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        trips={object('Trip Configuration', sampleTripData)}\\\\\\\\n        iconsRef={markerIcons}\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\";\\\\n// @ts-ignore\\\\nvar __ADDS_MAP__ = {};\\\\n// @ts-ignore\\\\nvar __MAIN_FILE_LOCATION__ = \\\\\\\"/CustomLegend.stories.tsx\\\\\\\";\\\\n// @ts-ignore\\\\nvar __MODULE_DEPENDENCIES__ = [];\\\\n// @ts-ignore\\\\nvar __LOCAL_DEPENDENCIES__ = {};\\\\n// @ts-ignore\\\\nvar __IDS_TO_FRAMEWORKS__ = {};\\\\n        \\\\nimport { action } from '@storybook/addon-actions'\\\\nimport { object, withKnobs } from '@storybook/addon-knobs'\\\\nimport React from 'react'\\\\nimport LeafletMap from '..'\\\\nimport { path } from '../..'\\\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\\\nimport Settings from '../../../atoms/SettingBox/data'\\\\nimport { GOOGLE_API_KEY } from '../constants/googleIntegration.constants'\\\\nimport infowindowStructure from '../dummyData/Infowindow.structure.sampleData'\\\\nimport markerIcons from '../dummyData/MarkerIcon.sampleData'\\\\nimport sampleTripData from '../dummyData/Presentation.Trips.sampleData'\\\\nimport markerLayerObj from '../dummyData/MarkerWithIcon.sampleData'\\\\n\\\\nexport default {parameters: {\\\\\\\"storySource\\\\\\\":{\\\\\\\"source\\\\\\\":\\\\\\\"import { action } from '@storybook/addon-actions'\\\\\\\\nimport { object, withKnobs } from '@storybook/addon-knobs'\\\\\\\\nimport React from 'react'\\\\\\\\nimport LeafletMap from '..'\\\\\\\\nimport { path } from '../..'\\\\\\\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\\\\\\\nimport Settings from '../../../atoms/SettingBox/data'\\\\\\\\nimport { GOOGLE_API_KEY } from '../constants/googleIntegration.constants'\\\\\\\\nimport infowindowStructure from '../dummyData/Infowindow.structure.sampleData'\\\\\\\\nimport markerIcons from '../dummyData/MarkerIcon.sampleData'\\\\\\\\nimport sampleTripData from '../dummyData/Presentation.Trips.sampleData'\\\\\\\\nimport markerLayerObj from '../dummyData/MarkerWithIcon.sampleData'\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/Map`,\\\\\\\\n  decorators: [withKnobs],\\\\\\\\n  component: LeafletMap\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const TripsMapWithLegend = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // create legend on the basis of markers data\\\\\\\\n\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[51.0, 19.0]}\\\\\\\\n        zoom={4}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='300px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        trips={object('Trip Configuration', sampleTripData)}\\\\\\\\n        iconsRef={markerIcons}\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\",\\\\\\\"locationsMap\\\\\\\":{}},},\\\\n  title: `${path}/Map`,\\\\n  decorators: [withKnobs],\\\\n  component: LeafletMap\\\\n}\\\\n\\\\nexport const TripsMapWithLegend = addSourceDecorator(() => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // create legend on the basis of markers data\\\\n\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        trips={object('Trip Configuration', sampleTripData)}\\\\n        iconsRef={markerIcons}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/CustomLegend.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\n\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/farhanansari/Code/ui-library/src/components/atoms/Map/Stories\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"import { action } from '@storybook/addon-actions'\\\\nimport { object, withKnobs } from '@storybook/addon-knobs'\\\\nimport React from 'react'\\\\nimport LeafletMap from '..'\\\\nimport { path } from '../..'\\\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\\\nimport Settings from '../../../atoms/SettingBox/data'\\\\nimport { GOOGLE_API_KEY } from '../constants/googleIntegration.constants'\\\\nimport infowindowStructure from '../dummyData/Infowindow.structure.sampleData'\\\\nimport markerIcons from '../dummyData/MarkerIcon.sampleData'\\\\nimport sampleTripData from '../dummyData/Presentation.Trips.sampleData'\\\\nimport markerLayerObj from '../dummyData/MarkerWithIcon.sampleData'\\\\n\\\\nexport default {\\\\n  title: `${path}/Map`,\\\\n  decorators: [withKnobs],\\\\n  component: LeafletMap\\\\n}\\\\n\\\\nexport const TripsMapWithLegend = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // create legend on the basis of markers data\\\\n\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        trips={object('Trip Configuration', sampleTripData)}\\\\n        iconsRef={markerIcons}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/CustomLegend.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\nimport { action } from '@storybook/addon-actions'\\nimport { object, withKnobs } from '@storybook/addon-knobs'\\nimport React from 'react'\\nimport LeafletMap from '..'\\nimport { path } from '../..'\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\nimport Settings from '../../../atoms/SettingBox/data'\\nimport { GOOGLE_API_KEY } from '../constants/googleIntegration.constants'\\nimport infowindowStructure from '../dummyData/Infowindow.structure.sampleData'\\nimport markerIcons from '../dummyData/MarkerIcon.sampleData'\\nimport sampleTripData from '../dummyData/Presentation.Trips.sampleData'\\nimport markerLayerObj from '../dummyData/MarkerWithIcon.sampleData'\\n\\nexport default {parameters: {\\\"storySource\\\":{\\\"source\\\":\\\"\\\\n\\\\n// @ts-nocheck\\\\n// @ts-ignore\\\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\\\n// @ts-ignore\\\\nvar addSourceDecorator = require(\\\\\\\"@storybook/source-loader/preview\\\\\\\").addSource;\\\\n// @ts-ignore\\\\nvar __SOURCE_PREFIX__ = \\\\\\\"/Users/farhanansari/Code/ui-library/src/components/atoms/Map/Stories\\\\\\\";\\\\n// @ts-ignore\\\\nvar __STORY__ = \\\\\\\"import { action } from '@storybook/addon-actions'\\\\\\\\nimport { object, withKnobs } from '@storybook/addon-knobs'\\\\\\\\nimport React from 'react'\\\\\\\\nimport LeafletMap from '..'\\\\\\\\nimport { path } from '../..'\\\\\\\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\\\\\\\nimport Settings from '../../../atoms/SettingBox/data'\\\\\\\\nimport { GOOGLE_API_KEY } from '../constants/googleIntegration.constants'\\\\\\\\nimport infowindowStructure from '../dummyData/Infowindow.structure.sampleData'\\\\\\\\nimport markerIcons from '../dummyData/MarkerIcon.sampleData'\\\\\\\\nimport sampleTripData from '../dummyData/Presentation.Trips.sampleData'\\\\\\\\nimport markerLayerObj from '../dummyData/MarkerWithIcon.sampleData'\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/Map`,\\\\\\\\n  decorators: [withKnobs],\\\\\\\\n  component: LeafletMap\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const TripsMapWithLegend = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // create legend on the basis of markers data\\\\\\\\n\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[51.0, 19.0]}\\\\\\\\n        zoom={4}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='300px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        trips={object('Trip Configuration', sampleTripData)}\\\\\\\\n        iconsRef={markerIcons}\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\";\\\\n// @ts-ignore\\\\nvar __ADDS_MAP__ = {};\\\\n// @ts-ignore\\\\nvar __MAIN_FILE_LOCATION__ = \\\\\\\"/CustomLegend.stories.tsx\\\\\\\";\\\\n// @ts-ignore\\\\nvar __MODULE_DEPENDENCIES__ = [];\\\\n// @ts-ignore\\\\nvar __LOCAL_DEPENDENCIES__ = {};\\\\n// @ts-ignore\\\\nvar __IDS_TO_FRAMEWORKS__ = {};\\\\n        \\\\nimport { action } from '@storybook/addon-actions'\\\\nimport { object, withKnobs } from '@storybook/addon-knobs'\\\\nimport React from 'react'\\\\nimport LeafletMap from '..'\\\\nimport { path } from '../..'\\\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\\\nimport Settings from '../../../atoms/SettingBox/data'\\\\nimport { GOOGLE_API_KEY } from '../constants/googleIntegration.constants'\\\\nimport infowindowStructure from '../dummyData/Infowindow.structure.sampleData'\\\\nimport markerIcons from '../dummyData/MarkerIcon.sampleData'\\\\nimport sampleTripData from '../dummyData/Presentation.Trips.sampleData'\\\\nimport markerLayerObj from '../dummyData/MarkerWithIcon.sampleData'\\\\n\\\\nexport default {parameters: {\\\\\\\"storySource\\\\\\\":{\\\\\\\"source\\\\\\\":\\\\\\\"import { action } from '@storybook/addon-actions'\\\\\\\\nimport { object, withKnobs } from '@storybook/addon-knobs'\\\\\\\\nimport React from 'react'\\\\\\\\nimport LeafletMap from '..'\\\\\\\\nimport { path } from '../..'\\\\\\\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\\\\\\\nimport Settings from '../../../atoms/SettingBox/data'\\\\\\\\nimport { GOOGLE_API_KEY } from '../constants/googleIntegration.constants'\\\\\\\\nimport infowindowStructure from '../dummyData/Infowindow.structure.sampleData'\\\\\\\\nimport markerIcons from '../dummyData/MarkerIcon.sampleData'\\\\\\\\nimport sampleTripData from '../dummyData/Presentation.Trips.sampleData'\\\\\\\\nimport markerLayerObj from '../dummyData/MarkerWithIcon.sampleData'\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/Map`,\\\\\\\\n  decorators: [withKnobs],\\\\\\\\n  component: LeafletMap\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const TripsMapWithLegend = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // create legend on the basis of markers data\\\\\\\\n\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[51.0, 19.0]}\\\\\\\\n        zoom={4}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='300px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        trips={object('Trip Configuration', sampleTripData)}\\\\\\\\n        iconsRef={markerIcons}\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\",\\\\\\\"locationsMap\\\\\\\":{}},},\\\\n  title: `${path}/Map`,\\\\n  decorators: [withKnobs],\\\\n  component: LeafletMap\\\\n}\\\\n\\\\nexport const TripsMapWithLegend = addSourceDecorator(() => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // create legend on the basis of markers data\\\\n\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        trips={object('Trip Configuration', sampleTripData)}\\\\n        iconsRef={markerIcons}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\",\\\"locationsMap\\\":{}},\\\"storySource\\\":{\\\"source\\\":\\\"import { action } from '@storybook/addon-actions'\\\\nimport { object, withKnobs } from '@storybook/addon-knobs'\\\\nimport React from 'react'\\\\nimport LeafletMap from '..'\\\\nimport { path } from '../..'\\\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\\\nimport Settings from '../../../atoms/SettingBox/data'\\\\nimport { GOOGLE_API_KEY } from '../constants/googleIntegration.constants'\\\\nimport infowindowStructure from '../dummyData/Infowindow.structure.sampleData'\\\\nimport markerIcons from '../dummyData/MarkerIcon.sampleData'\\\\nimport sampleTripData from '../dummyData/Presentation.Trips.sampleData'\\\\nimport markerLayerObj from '../dummyData/MarkerWithIcon.sampleData'\\\\n\\\\nexport default {\\\\n  title: `${path}/Map`,\\\\n  decorators: [withKnobs],\\\\n  component: LeafletMap\\\\n}\\\\n\\\\nexport const TripsMapWithLegend = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // create legend on the basis of markers data\\\\n\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        trips={object('Trip Configuration', sampleTripData)}\\\\n        iconsRef={markerIcons}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\",\\\"locationsMap\\\":{}},},\\n  title: `${path}/Map`,\\n  decorators: [withKnobs],\\n  component: LeafletMap\\n}\\n\\nexport const TripsMapWithLegend = addSourceDecorator(addSourceDecorator(() => {\\n  const settingConfig = Object.assign({}, Settings)\\n  // create legend on the basis of markers data\\n\\n  // set permission false, so that map mode will be hidden\\n  settingConfig['Map Mode'].permission = false\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        markers={object('Marker Configuration', markerLayerObj)}\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[51.0, 19.0]}\\n        zoom={4}\\n        zoomControl\\n        locationSearch\\n        googleApiKey={GOOGLE_API_KEY}\\n        height='300px'\\n        width='800px'\\n        tiles='google_roadmap'\\n        trips={object('Trip Configuration', sampleTripData)}\\n        iconsRef={markerIcons}\\n        popupRef={infowindowStructure}\\n        onSettingChange={action('setting changed')}\\n      />\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\";\n// @ts-ignore\nvar __ADDS_MAP__ = {};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = \"/CustomLegend.stories.tsx\";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \n\n/* eslint-disable */\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\n// @ts-ignore\nvar addSourceDecorator = require(\"@storybook/source-loader/preview\").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = \"/Users/farhanansari/Code/ui-library/src/components/atoms/Map/Stories\";\n// @ts-ignore\nvar __STORY__ = \"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/farhanansari/Code/ui-library/src/components/atoms/Map/Stories\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"import { action } from '@storybook/addon-actions'\\\\nimport { object, withKnobs } from '@storybook/addon-knobs'\\\\nimport React from 'react'\\\\nimport LeafletMap from '..'\\\\nimport { path } from '../..'\\\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\\\nimport Settings from '../../../atoms/SettingBox/data'\\\\nimport { GOOGLE_API_KEY } from '../constants/googleIntegration.constants'\\\\nimport infowindowStructure from '../dummyData/Infowindow.structure.sampleData'\\\\nimport markerIcons from '../dummyData/MarkerIcon.sampleData'\\\\nimport sampleTripData from '../dummyData/Presentation.Trips.sampleData'\\\\nimport markerLayerObj from '../dummyData/MarkerWithIcon.sampleData'\\\\n\\\\nexport default {\\\\n  title: `${path}/Map`,\\\\n  decorators: [withKnobs],\\\\n  component: LeafletMap\\\\n}\\\\n\\\\nexport const TripsMapWithLegend = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // create legend on the basis of markers data\\\\n\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        trips={object('Trip Configuration', sampleTripData)}\\\\n        iconsRef={markerIcons}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/CustomLegend.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\nimport { action } from '@storybook/addon-actions'\\nimport { object, withKnobs } from '@storybook/addon-knobs'\\nimport React from 'react'\\nimport LeafletMap from '..'\\nimport { path } from '../..'\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\nimport Settings from '../../../atoms/SettingBox/data'\\nimport { GOOGLE_API_KEY } from '../constants/googleIntegration.constants'\\nimport infowindowStructure from '../dummyData/Infowindow.structure.sampleData'\\nimport markerIcons from '../dummyData/MarkerIcon.sampleData'\\nimport sampleTripData from '../dummyData/Presentation.Trips.sampleData'\\nimport markerLayerObj from '../dummyData/MarkerWithIcon.sampleData'\\n\\nexport default {parameters: {\\\"storySource\\\":{\\\"source\\\":\\\"import { action } from '@storybook/addon-actions'\\\\nimport { object, withKnobs } from '@storybook/addon-knobs'\\\\nimport React from 'react'\\\\nimport LeafletMap from '..'\\\\nimport { path } from '../..'\\\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\\\nimport Settings from '../../../atoms/SettingBox/data'\\\\nimport { GOOGLE_API_KEY } from '../constants/googleIntegration.constants'\\\\nimport infowindowStructure from '../dummyData/Infowindow.structure.sampleData'\\\\nimport markerIcons from '../dummyData/MarkerIcon.sampleData'\\\\nimport sampleTripData from '../dummyData/Presentation.Trips.sampleData'\\\\nimport markerLayerObj from '../dummyData/MarkerWithIcon.sampleData'\\\\n\\\\nexport default {\\\\n  title: `${path}/Map`,\\\\n  decorators: [withKnobs],\\\\n  component: LeafletMap\\\\n}\\\\n\\\\nexport const TripsMapWithLegend = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // create legend on the basis of markers data\\\\n\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        trips={object('Trip Configuration', sampleTripData)}\\\\n        iconsRef={markerIcons}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\",\\\"locationsMap\\\":{}},},\\n  title: `${path}/Map`,\\n  decorators: [withKnobs],\\n  component: LeafletMap\\n}\\n\\nexport const TripsMapWithLegend = addSourceDecorator(() => {\\n  const settingConfig = Object.assign({}, Settings)\\n  // create legend on the basis of markers data\\n\\n  // set permission false, so that map mode will be hidden\\n  settingConfig['Map Mode'].permission = false\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        markers={object('Marker Configuration', markerLayerObj)}\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[51.0, 19.0]}\\n        zoom={4}\\n        zoomControl\\n        locationSearch\\n        googleApiKey={GOOGLE_API_KEY}\\n        height='300px'\\n        width='800px'\\n        tiles='google_roadmap'\\n        trips={object('Trip Configuration', sampleTripData)}\\n        iconsRef={markerIcons}\\n        popupRef={infowindowStructure}\\n        onSettingChange={action('setting changed')}\\n      />\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\";\n// @ts-ignore\nvar __ADDS_MAP__ = {};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = \"/CustomLegend.stories.tsx\";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \n\n/* eslint-disable */\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\n// @ts-ignore\nvar addSourceDecorator = require(\"@storybook/source-loader/preview\").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = \"/Users/farhanansari/Code/ui-library/src/components/atoms/Map/Stories\";\n// @ts-ignore\nvar __STORY__ = \"import { action } from '@storybook/addon-actions'\\nimport { object, withKnobs } from '@storybook/addon-knobs'\\nimport React from 'react'\\nimport LeafletMap from '..'\\nimport { path } from '../..'\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\nimport Settings from '../../../atoms/SettingBox/data'\\nimport { GOOGLE_API_KEY } from '../constants/googleIntegration.constants'\\nimport infowindowStructure from '../dummyData/Infowindow.structure.sampleData'\\nimport markerIcons from '../dummyData/MarkerIcon.sampleData'\\nimport sampleTripData from '../dummyData/Presentation.Trips.sampleData'\\nimport markerLayerObj from '../dummyData/MarkerWithIcon.sampleData'\\n\\nexport default {\\n  title: `${path}/Map`,\\n  decorators: [withKnobs],\\n  component: LeafletMap\\n}\\n\\nexport const TripsMapWithLegend = () => {\\n  const settingConfig = Object.assign({}, Settings)\\n  // create legend on the basis of markers data\\n\\n  // set permission false, so that map mode will be hidden\\n  settingConfig['Map Mode'].permission = false\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        markers={object('Marker Configuration', markerLayerObj)}\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[51.0, 19.0]}\\n        zoom={4}\\n        zoomControl\\n        locationSearch\\n        googleApiKey={GOOGLE_API_KEY}\\n        height='300px'\\n        width='800px'\\n        tiles='google_roadmap'\\n        trips={object('Trip Configuration', sampleTripData)}\\n        iconsRef={markerIcons}\\n        popupRef={infowindowStructure}\\n        onSettingChange={action('setting changed')}\\n      />\\n    </ThemeWrapper>\\n  )\\n}\\n\";\n// @ts-ignore\nvar __ADDS_MAP__ = {};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = \"/CustomLegend.stories.tsx\";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \nimport { action } from '@storybook/addon-actions'\nimport { object, withKnobs } from '@storybook/addon-knobs'\nimport React from 'react'\nimport LeafletMap from '..'\nimport { path } from '../..'\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\nimport Settings from '../../../atoms/SettingBox/data'\nimport { GOOGLE_API_KEY } from '../constants/googleIntegration.constants'\nimport infowindowStructure from '../dummyData/Infowindow.structure.sampleData'\nimport markerIcons from '../dummyData/MarkerIcon.sampleData'\nimport sampleTripData from '../dummyData/Presentation.Trips.sampleData'\nimport markerLayerObj from '../dummyData/MarkerWithIcon.sampleData'\n\nexport default {parameters: {\"storySource\":{\"source\":\"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/farhanansari/Code/ui-library/src/components/atoms/Map/Stories\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"\\\\n\\\\n// @ts-nocheck\\\\n// @ts-ignore\\\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\\\n// @ts-ignore\\\\nvar addSourceDecorator = require(\\\\\\\"@storybook/source-loader/preview\\\\\\\").addSource;\\\\n// @ts-ignore\\\\nvar __SOURCE_PREFIX__ = \\\\\\\"/Users/farhanansari/Code/ui-library/src/components/atoms/Map/Stories\\\\\\\";\\\\n// @ts-ignore\\\\nvar __STORY__ = \\\\\\\"import { action } from '@storybook/addon-actions'\\\\\\\\nimport { object, withKnobs } from '@storybook/addon-knobs'\\\\\\\\nimport React from 'react'\\\\\\\\nimport LeafletMap from '..'\\\\\\\\nimport { path } from '../..'\\\\\\\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\\\\\\\nimport Settings from '../../../atoms/SettingBox/data'\\\\\\\\nimport { GOOGLE_API_KEY } from '../constants/googleIntegration.constants'\\\\\\\\nimport infowindowStructure from '../dummyData/Infowindow.structure.sampleData'\\\\\\\\nimport markerIcons from '../dummyData/MarkerIcon.sampleData'\\\\\\\\nimport sampleTripData from '../dummyData/Presentation.Trips.sampleData'\\\\\\\\nimport markerLayerObj from '../dummyData/MarkerWithIcon.sampleData'\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/Map`,\\\\\\\\n  decorators: [withKnobs],\\\\\\\\n  component: LeafletMap\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const TripsMapWithLegend = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // create legend on the basis of markers data\\\\\\\\n\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[51.0, 19.0]}\\\\\\\\n        zoom={4}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='300px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        trips={object('Trip Configuration', sampleTripData)}\\\\\\\\n        iconsRef={markerIcons}\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\";\\\\n// @ts-ignore\\\\nvar __ADDS_MAP__ = {};\\\\n// @ts-ignore\\\\nvar __MAIN_FILE_LOCATION__ = \\\\\\\"/CustomLegend.stories.tsx\\\\\\\";\\\\n// @ts-ignore\\\\nvar __MODULE_DEPENDENCIES__ = [];\\\\n// @ts-ignore\\\\nvar __LOCAL_DEPENDENCIES__ = {};\\\\n// @ts-ignore\\\\nvar __IDS_TO_FRAMEWORKS__ = {};\\\\n        \\\\nimport { action } from '@storybook/addon-actions'\\\\nimport { object, withKnobs } from '@storybook/addon-knobs'\\\\nimport React from 'react'\\\\nimport LeafletMap from '..'\\\\nimport { path } from '../..'\\\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\\\nimport Settings from '../../../atoms/SettingBox/data'\\\\nimport { GOOGLE_API_KEY } from '../constants/googleIntegration.constants'\\\\nimport infowindowStructure from '../dummyData/Infowindow.structure.sampleData'\\\\nimport markerIcons from '../dummyData/MarkerIcon.sampleData'\\\\nimport sampleTripData from '../dummyData/Presentation.Trips.sampleData'\\\\nimport markerLayerObj from '../dummyData/MarkerWithIcon.sampleData'\\\\n\\\\nexport default {parameters: {\\\\\\\"storySource\\\\\\\":{\\\\\\\"source\\\\\\\":\\\\\\\"import { action } from '@storybook/addon-actions'\\\\\\\\nimport { object, withKnobs } from '@storybook/addon-knobs'\\\\\\\\nimport React from 'react'\\\\\\\\nimport LeafletMap from '..'\\\\\\\\nimport { path } from '../..'\\\\\\\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\\\\\\\nimport Settings from '../../../atoms/SettingBox/data'\\\\\\\\nimport { GOOGLE_API_KEY } from '../constants/googleIntegration.constants'\\\\\\\\nimport infowindowStructure from '../dummyData/Infowindow.structure.sampleData'\\\\\\\\nimport markerIcons from '../dummyData/MarkerIcon.sampleData'\\\\\\\\nimport sampleTripData from '../dummyData/Presentation.Trips.sampleData'\\\\\\\\nimport markerLayerObj from '../dummyData/MarkerWithIcon.sampleData'\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/Map`,\\\\\\\\n  decorators: [withKnobs],\\\\\\\\n  component: LeafletMap\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const TripsMapWithLegend = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // create legend on the basis of markers data\\\\\\\\n\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[51.0, 19.0]}\\\\\\\\n        zoom={4}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='300px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        trips={object('Trip Configuration', sampleTripData)}\\\\\\\\n        iconsRef={markerIcons}\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\",\\\\\\\"locationsMap\\\\\\\":{}},},\\\\n  title: `${path}/Map`,\\\\n  decorators: [withKnobs],\\\\n  component: LeafletMap\\\\n}\\\\n\\\\nexport const TripsMapWithLegend = addSourceDecorator(() => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // create legend on the basis of markers data\\\\n\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        trips={object('Trip Configuration', sampleTripData)}\\\\n        iconsRef={markerIcons}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/CustomLegend.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\n\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/farhanansari/Code/ui-library/src/components/atoms/Map/Stories\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"import { action } from '@storybook/addon-actions'\\\\nimport { object, withKnobs } from '@storybook/addon-knobs'\\\\nimport React from 'react'\\\\nimport LeafletMap from '..'\\\\nimport { path } from '../..'\\\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\\\nimport Settings from '../../../atoms/SettingBox/data'\\\\nimport { GOOGLE_API_KEY } from '../constants/googleIntegration.constants'\\\\nimport infowindowStructure from '../dummyData/Infowindow.structure.sampleData'\\\\nimport markerIcons from '../dummyData/MarkerIcon.sampleData'\\\\nimport sampleTripData from '../dummyData/Presentation.Trips.sampleData'\\\\nimport markerLayerObj from '../dummyData/MarkerWithIcon.sampleData'\\\\n\\\\nexport default {\\\\n  title: `${path}/Map`,\\\\n  decorators: [withKnobs],\\\\n  component: LeafletMap\\\\n}\\\\n\\\\nexport const TripsMapWithLegend = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // create legend on the basis of markers data\\\\n\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        trips={object('Trip Configuration', sampleTripData)}\\\\n        iconsRef={markerIcons}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/CustomLegend.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\nimport { action } from '@storybook/addon-actions'\\nimport { object, withKnobs } from '@storybook/addon-knobs'\\nimport React from 'react'\\nimport LeafletMap from '..'\\nimport { path } from '../..'\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\nimport Settings from '../../../atoms/SettingBox/data'\\nimport { GOOGLE_API_KEY } from '../constants/googleIntegration.constants'\\nimport infowindowStructure from '../dummyData/Infowindow.structure.sampleData'\\nimport markerIcons from '../dummyData/MarkerIcon.sampleData'\\nimport sampleTripData from '../dummyData/Presentation.Trips.sampleData'\\nimport markerLayerObj from '../dummyData/MarkerWithIcon.sampleData'\\n\\nexport default {parameters: {\\\"storySource\\\":{\\\"source\\\":\\\"\\\\n\\\\n// @ts-nocheck\\\\n// @ts-ignore\\\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\\\n// @ts-ignore\\\\nvar addSourceDecorator = require(\\\\\\\"@storybook/source-loader/preview\\\\\\\").addSource;\\\\n// @ts-ignore\\\\nvar __SOURCE_PREFIX__ = \\\\\\\"/Users/farhanansari/Code/ui-library/src/components/atoms/Map/Stories\\\\\\\";\\\\n// @ts-ignore\\\\nvar __STORY__ = \\\\\\\"import { action } from '@storybook/addon-actions'\\\\\\\\nimport { object, withKnobs } from '@storybook/addon-knobs'\\\\\\\\nimport React from 'react'\\\\\\\\nimport LeafletMap from '..'\\\\\\\\nimport { path } from '../..'\\\\\\\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\\\\\\\nimport Settings from '../../../atoms/SettingBox/data'\\\\\\\\nimport { GOOGLE_API_KEY } from '../constants/googleIntegration.constants'\\\\\\\\nimport infowindowStructure from '../dummyData/Infowindow.structure.sampleData'\\\\\\\\nimport markerIcons from '../dummyData/MarkerIcon.sampleData'\\\\\\\\nimport sampleTripData from '../dummyData/Presentation.Trips.sampleData'\\\\\\\\nimport markerLayerObj from '../dummyData/MarkerWithIcon.sampleData'\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/Map`,\\\\\\\\n  decorators: [withKnobs],\\\\\\\\n  component: LeafletMap\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const TripsMapWithLegend = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // create legend on the basis of markers data\\\\\\\\n\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[51.0, 19.0]}\\\\\\\\n        zoom={4}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='300px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        trips={object('Trip Configuration', sampleTripData)}\\\\\\\\n        iconsRef={markerIcons}\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\";\\\\n// @ts-ignore\\\\nvar __ADDS_MAP__ = {};\\\\n// @ts-ignore\\\\nvar __MAIN_FILE_LOCATION__ = \\\\\\\"/CustomLegend.stories.tsx\\\\\\\";\\\\n// @ts-ignore\\\\nvar __MODULE_DEPENDENCIES__ = [];\\\\n// @ts-ignore\\\\nvar __LOCAL_DEPENDENCIES__ = {};\\\\n// @ts-ignore\\\\nvar __IDS_TO_FRAMEWORKS__ = {};\\\\n        \\\\nimport { action } from '@storybook/addon-actions'\\\\nimport { object, withKnobs } from '@storybook/addon-knobs'\\\\nimport React from 'react'\\\\nimport LeafletMap from '..'\\\\nimport { path } from '../..'\\\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\\\nimport Settings from '../../../atoms/SettingBox/data'\\\\nimport { GOOGLE_API_KEY } from '../constants/googleIntegration.constants'\\\\nimport infowindowStructure from '../dummyData/Infowindow.structure.sampleData'\\\\nimport markerIcons from '../dummyData/MarkerIcon.sampleData'\\\\nimport sampleTripData from '../dummyData/Presentation.Trips.sampleData'\\\\nimport markerLayerObj from '../dummyData/MarkerWithIcon.sampleData'\\\\n\\\\nexport default {parameters: {\\\\\\\"storySource\\\\\\\":{\\\\\\\"source\\\\\\\":\\\\\\\"import { action } from '@storybook/addon-actions'\\\\\\\\nimport { object, withKnobs } from '@storybook/addon-knobs'\\\\\\\\nimport React from 'react'\\\\\\\\nimport LeafletMap from '..'\\\\\\\\nimport { path } from '../..'\\\\\\\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\\\\\\\nimport Settings from '../../../atoms/SettingBox/data'\\\\\\\\nimport { GOOGLE_API_KEY } from '../constants/googleIntegration.constants'\\\\\\\\nimport infowindowStructure from '../dummyData/Infowindow.structure.sampleData'\\\\\\\\nimport markerIcons from '../dummyData/MarkerIcon.sampleData'\\\\\\\\nimport sampleTripData from '../dummyData/Presentation.Trips.sampleData'\\\\\\\\nimport markerLayerObj from '../dummyData/MarkerWithIcon.sampleData'\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/Map`,\\\\\\\\n  decorators: [withKnobs],\\\\\\\\n  component: LeafletMap\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const TripsMapWithLegend = () => {\\\\\\\\n  const settingConfig = Object.assign({}, Settings)\\\\\\\\n  // create legend on the basis of markers data\\\\\\\\n\\\\\\\\n  // set permission false, so that map mode will be hidden\\\\\\\\n  settingConfig['Map Mode'].permission = false\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <LeafletMap\\\\\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\\\\\n        id='leafletBaseMap'\\\\\\\\n        classes='baseMap customBaseMap'\\\\\\\\n        center={[51.0, 19.0]}\\\\\\\\n        zoom={4}\\\\\\\\n        zoomControl\\\\\\\\n        locationSearch\\\\\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\\\\\n        height='300px'\\\\\\\\n        width='800px'\\\\\\\\n        tiles='google_roadmap'\\\\\\\\n        trips={object('Trip Configuration', sampleTripData)}\\\\\\\\n        iconsRef={markerIcons}\\\\\\\\n        popupRef={infowindowStructure}\\\\\\\\n        onSettingChange={action('setting changed')}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\",\\\\\\\"locationsMap\\\\\\\":{}},},\\\\n  title: `${path}/Map`,\\\\n  decorators: [withKnobs],\\\\n  component: LeafletMap\\\\n}\\\\n\\\\nexport const TripsMapWithLegend = addSourceDecorator(() => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // create legend on the basis of markers data\\\\n\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        trips={object('Trip Configuration', sampleTripData)}\\\\n        iconsRef={markerIcons}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\",\\\"locationsMap\\\":{}},\\\"storySource\\\":{\\\"source\\\":\\\"import { action } from '@storybook/addon-actions'\\\\nimport { object, withKnobs } from '@storybook/addon-knobs'\\\\nimport React from 'react'\\\\nimport LeafletMap from '..'\\\\nimport { path } from '../..'\\\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\\\nimport Settings from '../../../atoms/SettingBox/data'\\\\nimport { GOOGLE_API_KEY } from '../constants/googleIntegration.constants'\\\\nimport infowindowStructure from '../dummyData/Infowindow.structure.sampleData'\\\\nimport markerIcons from '../dummyData/MarkerIcon.sampleData'\\\\nimport sampleTripData from '../dummyData/Presentation.Trips.sampleData'\\\\nimport markerLayerObj from '../dummyData/MarkerWithIcon.sampleData'\\\\n\\\\nexport default {\\\\n  title: `${path}/Map`,\\\\n  decorators: [withKnobs],\\\\n  component: LeafletMap\\\\n}\\\\n\\\\nexport const TripsMapWithLegend = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // create legend on the basis of markers data\\\\n\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        trips={object('Trip Configuration', sampleTripData)}\\\\n        iconsRef={markerIcons}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\",\\\"locationsMap\\\":{}},},\\n  title: `${path}/Map`,\\n  decorators: [withKnobs],\\n  component: LeafletMap\\n}\\n\\nexport const TripsMapWithLegend = addSourceDecorator(addSourceDecorator(() => {\\n  const settingConfig = Object.assign({}, Settings)\\n  // create legend on the basis of markers data\\n\\n  // set permission false, so that map mode will be hidden\\n  settingConfig['Map Mode'].permission = false\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        markers={object('Marker Configuration', markerLayerObj)}\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[51.0, 19.0]}\\n        zoom={4}\\n        zoomControl\\n        locationSearch\\n        googleApiKey={GOOGLE_API_KEY}\\n        height='300px'\\n        width='800px'\\n        tiles='google_roadmap'\\n        trips={object('Trip Configuration', sampleTripData)}\\n        iconsRef={markerIcons}\\n        popupRef={infowindowStructure}\\n        onSettingChange={action('setting changed')}\\n      />\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\",\"locationsMap\":{}},\"storySource\":{\"source\":\"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/farhanansari/Code/ui-library/src/components/atoms/Map/Stories\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"import { action } from '@storybook/addon-actions'\\\\nimport { object, withKnobs } from '@storybook/addon-knobs'\\\\nimport React from 'react'\\\\nimport LeafletMap from '..'\\\\nimport { path } from '../..'\\\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\\\nimport Settings from '../../../atoms/SettingBox/data'\\\\nimport { GOOGLE_API_KEY } from '../constants/googleIntegration.constants'\\\\nimport infowindowStructure from '../dummyData/Infowindow.structure.sampleData'\\\\nimport markerIcons from '../dummyData/MarkerIcon.sampleData'\\\\nimport sampleTripData from '../dummyData/Presentation.Trips.sampleData'\\\\nimport markerLayerObj from '../dummyData/MarkerWithIcon.sampleData'\\\\n\\\\nexport default {\\\\n  title: `${path}/Map`,\\\\n  decorators: [withKnobs],\\\\n  component: LeafletMap\\\\n}\\\\n\\\\nexport const TripsMapWithLegend = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // create legend on the basis of markers data\\\\n\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        trips={object('Trip Configuration', sampleTripData)}\\\\n        iconsRef={markerIcons}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/CustomLegend.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\nimport { action } from '@storybook/addon-actions'\\nimport { object, withKnobs } from '@storybook/addon-knobs'\\nimport React from 'react'\\nimport LeafletMap from '..'\\nimport { path } from '../..'\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\nimport Settings from '../../../atoms/SettingBox/data'\\nimport { GOOGLE_API_KEY } from '../constants/googleIntegration.constants'\\nimport infowindowStructure from '../dummyData/Infowindow.structure.sampleData'\\nimport markerIcons from '../dummyData/MarkerIcon.sampleData'\\nimport sampleTripData from '../dummyData/Presentation.Trips.sampleData'\\nimport markerLayerObj from '../dummyData/MarkerWithIcon.sampleData'\\n\\nexport default {parameters: {\\\"storySource\\\":{\\\"source\\\":\\\"import { action } from '@storybook/addon-actions'\\\\nimport { object, withKnobs } from '@storybook/addon-knobs'\\\\nimport React from 'react'\\\\nimport LeafletMap from '..'\\\\nimport { path } from '../..'\\\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\\\nimport Settings from '../../../atoms/SettingBox/data'\\\\nimport { GOOGLE_API_KEY } from '../constants/googleIntegration.constants'\\\\nimport infowindowStructure from '../dummyData/Infowindow.structure.sampleData'\\\\nimport markerIcons from '../dummyData/MarkerIcon.sampleData'\\\\nimport sampleTripData from '../dummyData/Presentation.Trips.sampleData'\\\\nimport markerLayerObj from '../dummyData/MarkerWithIcon.sampleData'\\\\n\\\\nexport default {\\\\n  title: `${path}/Map`,\\\\n  decorators: [withKnobs],\\\\n  component: LeafletMap\\\\n}\\\\n\\\\nexport const TripsMapWithLegend = () => {\\\\n  const settingConfig = Object.assign({}, Settings)\\\\n  // create legend on the basis of markers data\\\\n\\\\n  // set permission false, so that map mode will be hidden\\\\n  settingConfig['Map Mode'].permission = false\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <LeafletMap\\\\n        markers={object('Marker Configuration', markerLayerObj)}\\\\n        id='leafletBaseMap'\\\\n        classes='baseMap customBaseMap'\\\\n        center={[51.0, 19.0]}\\\\n        zoom={4}\\\\n        zoomControl\\\\n        locationSearch\\\\n        googleApiKey={GOOGLE_API_KEY}\\\\n        height='300px'\\\\n        width='800px'\\\\n        tiles='google_roadmap'\\\\n        trips={object('Trip Configuration', sampleTripData)}\\\\n        iconsRef={markerIcons}\\\\n        popupRef={infowindowStructure}\\\\n        onSettingChange={action('setting changed')}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\",\\\"locationsMap\\\":{}},},\\n  title: `${path}/Map`,\\n  decorators: [withKnobs],\\n  component: LeafletMap\\n}\\n\\nexport const TripsMapWithLegend = addSourceDecorator(() => {\\n  const settingConfig = Object.assign({}, Settings)\\n  // create legend on the basis of markers data\\n\\n  // set permission false, so that map mode will be hidden\\n  settingConfig['Map Mode'].permission = false\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        markers={object('Marker Configuration', markerLayerObj)}\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[51.0, 19.0]}\\n        zoom={4}\\n        zoomControl\\n        locationSearch\\n        googleApiKey={GOOGLE_API_KEY}\\n        height='300px'\\n        width='800px'\\n        tiles='google_roadmap'\\n        trips={object('Trip Configuration', sampleTripData)}\\n        iconsRef={markerIcons}\\n        popupRef={infowindowStructure}\\n        onSettingChange={action('setting changed')}\\n      />\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\",\"locationsMap\":{}},\"storySource\":{\"source\":\"import { action } from '@storybook/addon-actions'\\nimport { object, withKnobs } from '@storybook/addon-knobs'\\nimport React from 'react'\\nimport LeafletMap from '..'\\nimport { path } from '../..'\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\nimport Settings from '../../../atoms/SettingBox/data'\\nimport { GOOGLE_API_KEY } from '../constants/googleIntegration.constants'\\nimport infowindowStructure from '../dummyData/Infowindow.structure.sampleData'\\nimport markerIcons from '../dummyData/MarkerIcon.sampleData'\\nimport sampleTripData from '../dummyData/Presentation.Trips.sampleData'\\nimport markerLayerObj from '../dummyData/MarkerWithIcon.sampleData'\\n\\nexport default {\\n  title: `${path}/Map`,\\n  decorators: [withKnobs],\\n  component: LeafletMap\\n}\\n\\nexport const TripsMapWithLegend = () => {\\n  const settingConfig = Object.assign({}, Settings)\\n  // create legend on the basis of markers data\\n\\n  // set permission false, so that map mode will be hidden\\n  settingConfig['Map Mode'].permission = false\\n  return (\\n    <ThemeWrapper>\\n      <LeafletMap\\n        markers={object('Marker Configuration', markerLayerObj)}\\n        id='leafletBaseMap'\\n        classes='baseMap customBaseMap'\\n        center={[51.0, 19.0]}\\n        zoom={4}\\n        zoomControl\\n        locationSearch\\n        googleApiKey={GOOGLE_API_KEY}\\n        height='300px'\\n        width='800px'\\n        tiles='google_roadmap'\\n        trips={object('Trip Configuration', sampleTripData)}\\n        iconsRef={markerIcons}\\n        popupRef={infowindowStructure}\\n        onSettingChange={action('setting changed')}\\n      />\\n    </ThemeWrapper>\\n  )\\n}\\n\",\"locationsMap\":{}},},\n  title: `${path}/Map`,\n  decorators: [withKnobs],\n  component: LeafletMap\n}\n\nexport const TripsMapWithLegend = addSourceDecorator(addSourceDecorator(addSourceDecorator(() => {\n  const settingConfig = Object.assign({}, Settings)\n  // create legend on the basis of markers data\n\n  // set permission false, so that map mode will be hidden\n  settingConfig['Map Mode'].permission = false\n  return (\n    <ThemeWrapper>\n      <LeafletMap\n        markers={object('Marker Configuration', markerLayerObj)}\n        id='leafletBaseMap'\n        classes='baseMap customBaseMap'\n        center={[51.0, 19.0]}\n        zoom={4}\n        zoomControl\n        locationSearch\n        googleApiKey={GOOGLE_API_KEY}\n        height='300px'\n        width='800px'\n        tiles='google_roadmap'\n        trips={object('Trip Configuration', sampleTripData)}\n        iconsRef={markerIcons}\n        popupRef={infowindowStructure}\n        onSettingChange={action('setting changed')}\n      />\n    </ThemeWrapper>\n  )\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});"],"sourceRoot":""},"metadata":{},"sourceType":"module"}