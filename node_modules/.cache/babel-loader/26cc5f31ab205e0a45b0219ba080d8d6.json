{"ast":null,"code":"import _slicedToArray from \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/molecules/ShiftTimings/components/TimePicker/index.tsx\";\n\nimport React from 'react';\nimport TextInput from '../../../TextInput';\nimport { DatePicker } from '../../../DatePicker';\nimport { TimePickerTextInputStyled } from './styled';\n\nvar parseTime = function parseTime(timeString) {\n  var timeTokens = timeString.split(':');\n\n  if (timeTokens.length === 2 && !isNaN(Number(timeTokens[0])) && !isNaN(Number(timeTokens[1]))) {\n    return new Date(\"01/01/1970 \".concat(timeTokens[0], \":\").concat(timeTokens[1], \":00\"));\n  }\n\n  return undefined;\n};\n\nvar convertToString = function convertToString(d) {\n  return d ? d.getHours() + ':' + d.getMinutes() : '';\n};\n\nvar TimePicker = function TimePicker(_ref) {\n  var id = _ref.id,\n      label = _ref.label,\n      errorMessage = _ref.errorMessage,\n      error = _ref.error,\n      placeholder = _ref.placeholder,\n      timeFormat = _ref.timeFormat,\n      _ref$timeInterval = _ref.timeInterval,\n      timeInterval = _ref$timeInterval === void 0 ? 15 : _ref$timeInterval,\n      time = _ref.time,\n      _ref$stringToTime = _ref.stringToTime,\n      stringToTime = _ref$stringToTime === void 0 ? parseTime : _ref$stringToTime,\n      _ref$timeToString = _ref.timeToString,\n      timeToString = _ref$timeToString === void 0 ? convertToString : _ref$timeToString,\n      _ref$onChange = _ref.onChange,\n      _onChange = _ref$onChange === void 0 ? function () {} : _ref$onChange;\n\n  var _React$useState = React.useState(),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      typedValue = _React$useState2[0],\n      setTypedValue = _React$useState2[1];\n\n  var handleTextChange = React.useCallback(function (e) {\n    setTypedValue(e.target.value);\n  }, [setTypedValue]);\n\n  var handleTextBlur = function handleTextBlur() {\n    if (typedValue !== undefined) {\n      if (typedValue === '') {\n        _onChange(id, undefined);\n\n        return;\n      }\n\n      var parsedTime = stringToTime(typedValue);\n      setTypedValue(undefined);\n\n      if (parsedTime) {\n        _onChange(id, parsedTime);\n      }\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(TimePickerTextInputStyled, {\n    className: \"Apna-wrapper\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(DatePicker, {\n    onChange: function onChange(date) {\n      return _onChange(id, date);\n    },\n    label: label,\n    variant: \"time\",\n    timeInterval: timeInterval,\n    timeFormat: timeFormat,\n    selected: time,\n    style: {\n      position: 'absolute',\n      top: '60px',\n      right: 'auto',\n      zIndex: '1000'\n      /* not able to add from theme here, added directly just because it was urgent */\n\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }, function (_ref2) {\n    var value = _ref2.value,\n        open = _ref2.open,\n        setOpen = _ref2.setOpen;\n    return /*#__PURE__*/React.createElement(TextInput, {\n      id: id,\n      label: label,\n      error: error,\n      errorMessage: errorMessage,\n      className: \"someClassname\",\n      placeholder: placeholder,\n      variant: \"withIcon\",\n      iconVariant: \"clock-history-outline\",\n      iconSize: 25,\n      iconStyle: {\n        lineHeight: '16px',\n        fontSize: '15px',\n        cursor: 'pointer'\n      },\n      onIconClick: function onIconClick() {\n        return setOpen(!open);\n      } //do not change the content-box to border box\n      ,\n      style: {\n        boxSizing: 'content-box',\n        minHeight: '38px'\n      } // iconSize='md'\n      ,\n      value: typedValue !== undefined ? typedValue : value && timeToString(value) // iconStyle={{ padding: '9px 9px 9px 9px' }}\n      ,\n      onClick: function onClick() {\n        return setOpen(!open);\n      },\n      fullWidth: true,\n      onChange: handleTextChange,\n      onBlur: handleTextBlur,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }\n    });\n  }));\n};\n\nTimePicker.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"TimePicker\",\n  \"props\": {\n    \"timeInterval\": {\n      \"defaultValue\": {\n        \"value\": \"15\",\n        \"computed\": false\n      },\n      \"required\": false\n    },\n    \"stringToTime\": {\n      \"defaultValue\": {\n        \"value\": \"(timeString: string) => {\\n  const timeTokens = timeString.split(':')\\n  if (\\n    timeTokens.length === 2 &&\\n    !isNaN(Number(timeTokens[0])) &&\\n    !isNaN(Number(timeTokens[1]))\\n  ) {\\n    return new Date(`01/01/1970 ${timeTokens[0]}:${timeTokens[1]}:00`)\\n  }\\n  return undefined\\n}\",\n        \"computed\": false\n      },\n      \"required\": false\n    },\n    \"timeToString\": {\n      \"defaultValue\": {\n        \"value\": \"(d: Date | undefined) =>\\nd ? d.getHours() + ':' + d.getMinutes() : ''\",\n        \"computed\": false\n      },\n      \"required\": false\n    },\n    \"onChange\": {\n      \"defaultValue\": {\n        \"value\": \"() => {}\",\n        \"computed\": false\n      },\n      \"required\": false\n    }\n  }\n};\nexport default TimePicker;\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src/components/molecules/ShiftTimings/components/TimePicker/index.tsx\"] = {\n    name: \"TimePicker\",\n    docgenInfo: TimePicker.__docgenInfo,\n    path: \"src/components/molecules/ShiftTimings/components/TimePicker/index.tsx\"\n  };\n}","map":{"version":3,"sources":["/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/molecules/ShiftTimings/components/TimePicker/index.tsx"],"names":["React","TextInput","DatePicker","TimePickerTextInputStyled","parseTime","timeString","timeTokens","split","length","isNaN","Number","Date","undefined","convertToString","d","getHours","getMinutes","TimePicker","id","label","errorMessage","error","placeholder","timeFormat","timeInterval","time","stringToTime","timeToString","onChange","useState","typedValue","setTypedValue","handleTextChange","useCallback","e","target","value","handleTextBlur","parsedTime","date","position","top","right","zIndex","open","setOpen","lineHeight","fontSize","cursor","boxSizing","minHeight"],"mappings":"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","sourcesContent":["import React from 'react'\n\nimport { ITimePickerProps } from '../../interfaces'\nimport TextInput from '../../../TextInput'\nimport { DatePicker } from '../../../DatePicker'\nimport { tDatePickerChildren } from '../../../DatePicker/interfaces'\nimport { TimePickerTextInputStyled } from './styled'\n\nconst parseTime = (timeString: string) => {\n  const timeTokens = timeString.split(':')\n  if (\n    timeTokens.length === 2 &&\n    !isNaN(Number(timeTokens[0])) &&\n    !isNaN(Number(timeTokens[1]))\n  ) {\n    return new Date(`01/01/1970 ${timeTokens[0]}:${timeTokens[1]}:00`)\n  }\n  return undefined\n}\n\nconst convertToString = (d: Date | undefined) =>\n  d ? d.getHours() + ':' + d.getMinutes() : ''\n\nconst TimePicker = ({\n  id,\n  label,\n  errorMessage,\n  error,\n  placeholder,\n  timeFormat,\n  timeInterval = 15,\n  time,\n  stringToTime = parseTime,\n  timeToString = convertToString,\n  onChange = () => {}\n}: ITimePickerProps) => {\n  const [typedValue, setTypedValue] = React.useState<string | undefined>()\n\n  const handleTextChange = React.useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      setTypedValue(e.target.value)\n    },\n    [setTypedValue]\n  )\n\n  const handleTextBlur = () => {\n    if (typedValue !== undefined) {\n      if (typedValue === '') {\n        onChange(id, undefined)\n        return\n      }\n\n      const parsedTime = stringToTime(typedValue)\n      setTypedValue(undefined)\n      if (parsedTime) {\n        onChange(id, parsedTime)\n      }\n    }\n  }\n\n  return (\n    <TimePickerTextInputStyled className='Apna-wrapper'>\n      <DatePicker\n        onChange={(date) => onChange(id, date)}\n        label={label}\n        variant='time'\n        timeInterval={timeInterval}\n        timeFormat={timeFormat}\n        selected={time}\n        style={{\n          position: 'absolute',\n          top: '60px',\n          right: 'auto',\n          zIndex:\n            '1000' /* not able to add from theme here, added directly just because it was urgent */\n        }}\n      >\n        {({ value, open, setOpen }: tDatePickerChildren) => {\n          return (\n            <TextInput\n              id={id}\n              label={label}\n              error={error}\n              errorMessage={errorMessage}\n              className='someClassname'\n              placeholder={placeholder}\n              variant='withIcon'\n              iconVariant='clock-history-outline'\n              iconSize={25}\n              iconStyle={{\n                lineHeight: '16px',\n                fontSize: '15px',\n                cursor: 'pointer'\n              }}\n              onIconClick={() => setOpen(!open)}\n              //do not change the content-box to border box\n              style={{ boxSizing: 'content-box', minHeight: '38px' }}\n              // iconSize='md'\n              value={\n                typedValue !== undefined\n                  ? typedValue\n                  : value && timeToString(value)\n              }\n              // iconStyle={{ padding: '9px 9px 9px 9px' }}\n              onClick={() => setOpen(!open)}\n              fullWidth\n              onChange={handleTextChange}\n              onBlur={handleTextBlur}\n            />\n          )\n        }}\n      </DatePicker>\n    </TimePickerTextInputStyled>\n  )\n}\nexport default TimePicker\n"]},"metadata":{},"sourceType":"module"}