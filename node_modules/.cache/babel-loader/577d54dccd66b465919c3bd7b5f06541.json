{"ast":null,"code":"import _slicedToArray from \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/atoms/Toggle/index.tsx\";\n\nimport React, { useState } from 'react';\nimport Position from '../../molecules/Position';\nimport { SwitchStyled, SliderStyled, HiddenToggle, SwitchWapper, SwitchLabel } from './Toggle.styled';\nvar Toggle = React.forwardRef(function (_ref, ref) {\n  var id = _ref.id,\n      label = _ref.label,\n      labelColor = _ref.labelColor,\n      checked = _ref.checked,\n      _ref$disabled = _ref.disabled,\n      disabled = _ref$disabled === void 0 ? false : _ref$disabled,\n      labelComponent = _ref.labelComponent,\n      _ref$onChange = _ref.onChange,\n      _onChange = _ref$onChange === void 0 ? function () {} : _ref$onChange,\n      _ref$highlightWhenChe = _ref.highlightWhenChecked,\n      highlightWhenChecked = _ref$highlightWhenChe === void 0 ? true : _ref$highlightWhenChe,\n      rest = _objectWithoutProperties(_ref, [\"id\", \"label\", \"labelColor\", \"checked\", \"disabled\", \"labelComponent\", \"onChange\", \"highlightWhenChecked\"]);\n\n  var _useState = useState(checked),\n      _useState2 = _slicedToArray(_useState, 2),\n      isChecked = _useState2[0],\n      setIsChecked = _useState2[1];\n\n  React.useEffect(function () {\n    setIsChecked(checked);\n  }, [checked]);\n  return /*#__PURE__*/React.createElement(Position, {\n    type: \"relative\",\n    display: \"inline-block\",\n    className: \"toggleSwitch\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: id,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(SwitchWapper, {\n    disabled: disabled,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(SwitchStyled, {\n    htmlFor: id,\n    className: \"toggleSwitchLabel\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(HiddenToggle, Object.assign({\n    type: \"checkbox\",\n    ref: ref,\n    id: id,\n    checked: isChecked,\n    disabled: disabled,\n    onChange: function onChange(e) {\n      setIsChecked(e.target.checked);\n\n      _onChange(e);\n    },\n    highlightWhenChecked: highlightWhenChecked\n  }, rest, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(SliderStyled, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 15\n    }\n  }))), labelComponent || label && /*#__PURE__*/React.createElement(SwitchLabel, {\n    color: labelColor,\n    id: \"\".concat(id, \"-label\"),\n    disabled: disabled,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 15\n    }\n  }, label)));\n});\nToggle.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"Toggle\",\n  \"props\": {\n    \"disabled\": {\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      },\n      \"required\": false\n    },\n    \"onChange\": {\n      \"defaultValue\": {\n        \"value\": \"() => {}\",\n        \"computed\": false\n      },\n      \"required\": false\n    },\n    \"highlightWhenChecked\": {\n      \"defaultValue\": {\n        \"value\": \"true\",\n        \"computed\": false\n      },\n      \"required\": false\n    }\n  }\n};\nexport default Toggle;\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src/components/atoms/Toggle/index.tsx\"] = {\n    name: \"Toggle\",\n    docgenInfo: Toggle.__docgenInfo,\n    path: \"src/components/atoms/Toggle/index.tsx\"\n  };\n}","map":{"version":3,"sources":["/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/atoms/Toggle/index.tsx"],"names":["React","useState","Position","SwitchStyled","SliderStyled","HiddenToggle","SwitchWapper","SwitchLabel","Toggle","forwardRef","ref","id","label","labelColor","checked","disabled","labelComponent","onChange","highlightWhenChecked","rest","isChecked","setIsChecked","useEffect","e","target"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,QAAP,MAAqB,0BAArB;AACA,SACEC,YADF,EAEEC,YAFF,EAGEC,YAHF,EAIEC,YAJF,EAKEC,WALF,QAMO,iBANP;AASA,IAAMC,MAAM,GAAGR,KAAK,CAACS,UAAN,CACb,gBAYEC,GAZF,EAaK;AAAA,MAXDC,EAWC,QAXDA,EAWC;AAAA,MAVDC,KAUC,QAVDA,KAUC;AAAA,MATDC,UASC,QATDA,UASC;AAAA,MARDC,OAQC,QARDA,OAQC;AAAA,2BAPDC,QAOC;AAAA,MAPDA,QAOC,8BAPU,KAOV;AAAA,MANDC,cAMC,QANDA,cAMC;AAAA,2BALDC,QAKC;AAAA,MALDA,SAKC,8BALU,YAAM,CAAE,CAKlB;AAAA,mCAJDC,oBAIC;AAAA,MAJDA,oBAIC,sCAJsB,IAItB;AAAA,MAHEC,IAGF;;AAAA,kBAC+BlB,QAAQ,CAACa,OAAD,CADvC;AAAA;AAAA,MACIM,SADJ;AAAA,MACeC,YADf;;AAGHrB,EAAAA,KAAK,CAACsB,SAAN,CAAgB,YAAM;AACpBD,IAAAA,YAAY,CAACP,OAAD,CAAZ;AACD,GAFD,EAEG,CAACA,OAAD,CAFH;AAGA,sBACE,oBAAC,QAAD;AAAU,IAAA,IAAI,EAAC,UAAf;AAA0B,IAAA,OAAO,EAAC,cAAlC;AAAiD,IAAA,SAAS,EAAC,cAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAO,IAAA,OAAO,EAAEH,EAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,YAAD;AAAc,IAAA,QAAQ,EAAEI,QAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,YAAD;AAAc,IAAA,OAAO,EAAEJ,EAAvB;AAA2B,IAAA,SAAS,EAAC,mBAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,YAAD;AACE,IAAA,IAAI,EAAC,UADP;AAEE,IAAA,GAAG,EAAED,GAFP;AAGE,IAAA,EAAE,EAAEC,EAHN;AAIE,IAAA,OAAO,EAAES,SAJX;AAKE,IAAA,QAAQ,EAAEL,QALZ;AAME,IAAA,QAAQ,EAAE,kBAACQ,CAAD,EAAO;AACfF,MAAAA,YAAY,CAACE,CAAC,CAACC,MAAF,CAASV,OAAV,CAAZ;;AACAG,MAAAA,SAAQ,CAACM,CAAD,CAAR;AACD,KATH;AAUE,IAAA,oBAAoB,EAAEL;AAVxB,KAWMC,IAXN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF,eAcE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAdF,CADF,CADF,EAmBGH,cAAc,IACZJ,KAAK,iBACJ,oBAAC,WAAD;AACE,IAAA,KAAK,EAAEC,UADT;AAEE,IAAA,EAAE,YAAKF,EAAL,WAFJ;AAGE,IAAA,QAAQ,EAAEI,QAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKGH,KALH,CArBN,CADF,CADF;AAkCD,CAtDY,CAAf;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwDA,eAAeJ,MAAf","sourcesContent":["import React, { useState } from 'react'\nimport Position from '../../molecules/Position'\nimport {\n  SwitchStyled,\n  SliderStyled,\n  HiddenToggle,\n  SwitchWapper,\n  SwitchLabel\n} from './Toggle.styled'\nimport { IToggleProps } from './interface'\n\nconst Toggle = React.forwardRef<HTMLInputElement, IToggleProps>(\n  (\n    {\n      id,\n      label,\n      labelColor,\n      checked,\n      disabled = false,\n      labelComponent,\n      onChange = () => {},\n      highlightWhenChecked = true,\n      ...rest\n    },\n    ref\n  ) => {\n    const [isChecked, setIsChecked] = useState(checked)\n\n    React.useEffect(() => {\n      setIsChecked(checked)\n    }, [checked])\n    return (\n      <Position type='relative' display='inline-block' className=\"toggleSwitch\">\n        <label htmlFor={id}>\n          <SwitchWapper disabled={disabled}>\n            <SwitchStyled htmlFor={id} className=\"toggleSwitchLabel\">\n              <HiddenToggle\n                type='checkbox'\n                ref={ref}\n                id={id}\n                checked={isChecked}\n                disabled={disabled}\n                onChange={(e) => {\n                  setIsChecked(e.target.checked)\n                  onChange(e)\n                }}\n                highlightWhenChecked={highlightWhenChecked}\n                {...rest}\n              />\n              <SliderStyled />\n            </SwitchStyled>\n          </SwitchWapper>\n          {labelComponent ||\n            (label && (\n              <SwitchLabel\n                color={labelColor}\n                id={`${id}-label`}\n                disabled={disabled}\n              >\n                {label}\n              </SwitchLabel>\n            ))}\n        </label>\n      </Position>\n    )\n  }\n)\nexport default Toggle\n"]},"metadata":{},"sourceType":"module"}