{"ast":null,"code":"","map":{"version":3,"sources":[],"names":[],"mappings":"","sourcesContent":["import { IIconButtonProps } from './../../atoms/IconButton/index'\nimport { Column, Cell, ColumnInstance, SortingRule } from 'react-table'\nimport { ComponentType, Dispatch, SetStateAction } from 'react'\n\nexport interface IActionBar {\n  ActionBar?: JSX.Element\n  NoDataFound?: JSX.Element\n  IconBar?: JSX.Element\n}\n\nexport interface ISortOptions {\n  sortBy?: string\n  sortOrder?: string\n}\n\nexport interface IFetchDataOptions {\n  pageSize?: number\n  pageNumber?: number\n  sortOptions?: ISortOptions\n  filterOptions?: IFilterOptions\n  apis?: {\n    setSelection: React.Dispatch<React.SetStateAction<ISelectedRows>>\n    resetSelection: () => void\n  }\n  isPaginationChange?: boolean\n}\n\nexport interface IListViewColumn {\n  accessor: string\n  Header: string\n  isSortable?: boolean\n  isEditable?: boolean\n  isFilterable?: boolean\n  isVisible?: boolean\n  Cell?: ComponentType<Cell>\n  EditableCell?: ComponentType<Cell>\n  Filter?: ComponentType<IFilterProps>\n  infoTip?: string\n  cellCallback?: Function\n  [key: string]: any\n}\n\nexport interface IListViewRow {\n  isSelected?: string\n  hasSelectionDisabled?: boolean\n  ignoreSelectAll?: boolean\n  checkboxTooltipText?: string\n  editIconButtonProps?: IIconButtonProps\n  [key: string]: any\n}\nexport interface IListViewProps extends React.HTMLAttributes<HTMLDivElement> {\n  columns: Array<IListViewColumn>\n  data: Array<IListViewRow>\n  totalRows?: number\n  totalActualCount?: number\n  rowIdentifier?: string\n  isColumnLoading?: boolean\n  isTotalCountLoading?: boolean\n  moreResultsExists?: boolean\n  loading?: boolean\n  isEditMode?: boolean\n  disableNext?: boolean\n  BEDependentPagination?: boolean\n  children?: IActionBar\n  hasRowSelection?: boolean\n  hasSelectAllRows?: boolean\n  hasRowSelectionWithEdit?: boolean\n  permanentColumns?: Record<string, boolean>\n  onRowEditClick?(row: IListViewRow): void\n  onRowSelect?(selectedRows: ISelectedRows): void\n  onFetchData?(options: IFetchDataOptions): void\n  onSaveColumnPreferences?(\n    visibleColumnIds: Record<string, ColumnInstance<IListViewColumn>>\n  ): void\n  paginationPageSize?: number\n  disableScrollOverlay?: boolean\n  labels?: {\n    columnSelectionExceedingLimit?: string\n  }\n\n  /** GA Callbacks */\n  onShowMoreColumns?: () => void\n  onApply?: (selectedColumns: Record<string, boolean>) => void\n  onPageChange?: (pageNumber: number, pageSize: number) => void\n\n  /** Filter Persistence Props */\n  filters?: Record<string, string>\n  onFilterChange?: (\n    combinedFilters: IFilterOptions,\n    filters: Record<string, string>\n  ) => void\n\n  /** Sort Persistence Props */\n  sorts?: SortingRule<object>[]\n  onSortChange?(\n    sortOptions: ISortOptions,\n    sortObject?: SortingRule<object>[]\n  ): void\n\n  hideRefresh?: boolean\n  hideColumnSettings?: boolean\n  hidePaginationBar?: boolean\n  hideToolbar?: boolean\n  heightBuffer?: number\n  rowSelectionResetter?: number\n\n  /** Internal Callbacks */\n  onResize?: () => void\n\n  // show Radio instead of checkbox\n  hasRadioSelection?: boolean\n\n  // show Favourite Star\n  showFavouriteStar?: boolean\n}\n\nexport interface ISelectedRows {\n  [key: string]: Record<string, any>\n}\nexport interface IFilterOptions {\n  searchBy?: string\n  searchText?: string\n}\n\nexport interface ITextFieldProps {\n  id: string\n  type: string\n  // value: string\n  // onChange?: (e: React.FormEvent<HTMLInputElement>) => void\n  onKeyDown: (e: React.KeyboardEvent<HTMLInputElement>) => void\n  onClear: () => void\n}\n\nexport interface ISelectFieldProps {\n  id: string\n  type: string\n  value: any\n  onChange?: (value: string | undefined) => void\n  // onChange?: (e: React.ChangeEvent<HTMLInputElement>) => void\n}\n\nexport interface IFilterProps {\n  textFieldProps?: ITextFieldProps\n  selectFieldProps?: ISelectFieldProps\n  filters: Record<string, string>\n  setFilters: Dispatch<SetStateAction<Record<string, string>>>\n}\n\nexport interface ICustomFiltersInstance {\n  filters: Record<string, string>\n  setFilters: Dispatch<SetStateAction<Record<string, string>>>\n  getTextFieldProps(column: Column): ITextFieldProps\n  getSelectFieldProps(column: Column): ISelectFieldProps\n  combinedFilterOptions(): IFilterOptions\n  resetFilters(): void\n}\n\nexport interface IResizerProps extends React.HTMLAttributes<HTMLDivElement> {\n  isResizing: boolean\n}\n\nexport interface IPinnedColumn {\n  offset: number\n  width: number\n}\nexport interface IPinnedColumnState {\n  left: Record<string, IPinnedColumn>\n  right: Record<string, IPinnedColumn>\n}\n\nexport interface IPinnedColumnTotalWidthState {\n  left: number\n  right: number\n}\n\nexport interface IPinnedColumnProps\n  extends React.HTMLAttributes<HTMLDivElement> {\n  pinnedColumn?: IPinnedColumn\n  direction?: 'left' | 'right'\n  columnId?: string\n}\n\nexport interface IEditableCellProps extends Cell {\n  error?: boolean\n}\n"]},"metadata":{},"sourceType":"module"}