{"ast":null,"code":"import _defineProperty from \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nvar _parameters;\n\n/* eslint-disable */\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource; // @ts-ignore\n\n\nvar addSourceDecorator = require(\"@storybook/source-loader/preview\").addSource; // @ts-ignore\n\n\nvar __SOURCE_PREFIX__ = \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/organisms/RichTextEditor\"; // @ts-ignore\n\nvar __STORY__ = \"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/organisms/RichTextEditor\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"\\\\n\\\\n// @ts-nocheck\\\\n// @ts-ignore\\\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\\\n// @ts-ignore\\\\nvar addSourceDecorator = require(\\\\\\\"@storybook/source-loader/preview\\\\\\\").addSource;\\\\n// @ts-ignore\\\\nvar __SOURCE_PREFIX__ = \\\\\\\"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/organisms/RichTextEditor\\\\\\\";\\\\n// @ts-ignore\\\\nvar __STORY__ = \\\\\\\"import React from 'react'\\\\\\\\n\\\\\\\\nimport { path } from '..'\\\\\\\\nimport RichTextEditor from '.'\\\\\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\\\\\nimport { EditorState, convertToRaw } from 'draft-js'\\\\\\\\nimport { insertMention, convertHTMLToDraftState } from './apis'\\\\\\\\nimport draftToHtml from 'draftjs-to-html'\\\\\\\\nimport Box from '../../atoms/Box'\\\\\\\\nimport Button from '../../atoms/Button'\\\\\\\\nimport { boolean } from '@storybook/addon-knobs'\\\\\\\\n\\\\\\\\ninterface IMainComponentProps {\\\\\\\\n  showHTMLOutput?: boolean\\\\\\\\n  showJSONOutput?: boolean\\\\\\\\n  insertMentionsProgrammatically?: boolean\\\\\\\\n  initializeFromHTML?: boolean\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/RichTextEditor`,\\\\\\\\n  component: RichTextEditor\\\\\\\\n}\\\\\\\\n\\\\\\\\n/** Mentions structure from API */\\\\\\\\nconst mentionSuggestionsFromAPI = [\\\\\\\\n  { text: 'Delivery Associate Name', value: 'dmmName', url: '#' },\\\\\\\\n  { text: 'Alert Date', value: 'time', url: '#' },\\\\\\\\n  { text: 'Account Name', value: 'accountname', url: '#' },\\\\\\\\n  { text: 'Account Code', value: 'accountCode', url: '#' },\\\\\\\\n  { text: 'Collected Value', value: 'collectedValue', url: '#' },\\\\\\\\n  { text: 'Package Value', value: 'actualvalue', url: '#' },\\\\\\\\n  { text: 'Currency', value: 'currency', url: '#' },\\\\\\\\n  { text: 'AWB Number', value: 'awbnumber', url: '#' }\\\\\\\\n]\\\\\\\\n\\\\\\\\n/** Mentions Text to Value map */\\\\\\\\nconst mentionSuggesstionsValueMap: Record<string, string> = {}\\\\\\\\n\\\\\\\\n/** Text & Value should have same content when sent to React-Draft */\\\\\\\\nconst mentionSuggesstionsProp = mentionSuggestionsFromAPI.map((m) => {\\\\\\\\n  mentionSuggesstionsValueMap[m.text] = m.value\\\\\\\\n  return { text: m.text, value: m.text, url: m.url }\\\\\\\\n})\\\\\\\\n\\\\\\\\nconst inputHTML =\\\\\\\\n  '<p style=\\\\\\\\\\\\\\\"text-align:left;\\\\\\\\\\\\\\\"><span style=\\\\\\\\\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\\\\\\\\\">Dear recipient,</span></p> <p><span style=\\\\\\\\\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\\\\\\\\\">Order </span><awbnumber><span style=\\\\\\\\\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\\\\\\\\\"> is arriving, should reach your destination at </span><time><span style=\\\\\\\\\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\\\\\\\\\">. </span></p>'\\\\\\\\n\\\\\\\\nconst MainCompoonent = ({\\\\\\\\n  initializeFromHTML,\\\\\\\\n  showHTMLOutput,\\\\\\\\n  showJSONOutput,\\\\\\\\n  insertMentionsProgrammatically\\\\\\\\n}: IMainComponentProps) => {\\\\\\\\n  /** Initialize with empty state */\\\\\\\\n  const [editorState, setEditorState] = React.useState(\\\\\\\\n    EditorState.createEmpty()\\\\\\\\n  )\\\\\\\\n\\\\\\\\n  const JSONOutput = React.useMemo(\\\\\\\\n    () => JSON.stringify(convertToRaw(editorState.getCurrentContent())),\\\\\\\\n    [editorState]\\\\\\\\n  )\\\\\\\\n\\\\\\\\n  const HTMLOutput = React.useMemo(\\\\\\\\n    () =>\\\\\\\\n      draftToHtml(\\\\\\\\n        convertToRaw(editorState.getCurrentContent()),\\\\\\\\n        undefined,\\\\\\\\n        false,\\\\\\\\n        (entity, _text) =>\\\\\\\\n          `<${mentionSuggesstionsValueMap[entity?.data?.value]}>`\\\\\\\\n      ),\\\\\\\\n    [editorState]\\\\\\\\n  )\\\\\\\\n\\\\\\\\n  /** Programmatically insert Mentions - Either at last cursor or at End */\\\\\\\\n  const handleClick = () => {\\\\\\\\n    setEditorState(insertMention(editorState, mentionSuggesstionsProp[0], true))\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  /** Initializing the editor state from HTML */\\\\\\\\n  React.useEffect(() => {\\\\\\\\n    initializeFromHTML &&\\\\\\\\n      setEditorState(\\\\\\\\n        convertHTMLToDraftState(inputHTML || '', mentionSuggestionsFromAPI)\\\\\\\\n      )\\\\\\\\n  }, [])\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <>\\\\\\\\n      {insertMentionsProgrammatically && (\\\\\\\\n        <Button onClick={handleClick}>Insert Mention</Button>\\\\\\\\n      )}\\\\\\\\n      <br />\\\\\\\\n      <br />\\\\\\\\n      <RichTextEditor\\\\\\\\n        label='Email Body'\\\\\\\\n        id='emailBody'\\\\\\\\n        className='emailBody'\\\\\\\\n        isStripPastedStyles={true}\\\\\\\\n        // defaultEditorState={EditorState.createEmpty()}\\\\\\\\n        editorState={editorState}\\\\\\\\n        mention={{\\\\\\\\n          separator: ' ',\\\\\\\\n          trigger: '@',\\\\\\\\n          suggestions: mentionSuggesstionsProp\\\\\\\\n        }}\\\\\\\\n        onEditorStateChange={setEditorState}\\\\\\\\n        placeholder='Enter Email Body'\\\\\\\\n        hideToolbar={boolean('hideToolbar', false)}\\\\\\\\n      />\\\\\\\\n      {/* {editorState.getCurrentContent().getPlainText().length} */}\\\\\\\\n      {showJSONOutput && (\\\\\\\\n        <>\\\\\\\\n          <br />\\\\\\\\n          <br />\\\\\\\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\\\\\\\n            <code>{JSONOutput}</code>\\\\\\\\n          </Box>\\\\\\\\n        </>\\\\\\\\n      )}\\\\\\\\n      {showHTMLOutput && (\\\\\\\\n        <>\\\\\\\\n          <br />\\\\\\\\n          <br />\\\\\\\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\\\\\\\n            <code>{HTMLOutput}</code>\\\\\\\\n          </Box>\\\\\\\\n        </>\\\\\\\\n      )}\\\\\\\\n    </>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const Default = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <MainCompoonent\\\\\\\\n        showHTMLOutput={boolean('showHTMLOutput', false)}\\\\\\\\n        showJSONOutput={boolean('showJSONOutput', false)}\\\\\\\\n        insertMentionsProgrammatically={boolean(\\\\\\\\n          'insertMentionsProgrammatically',\\\\\\\\n          false\\\\\\\\n        )}\\\\\\\\n        initializeFromHTML={boolean('initializeFromHTML', false)}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\";\\\\n// @ts-ignore\\\\nvar __ADDS_MAP__ = {};\\\\n// @ts-ignore\\\\nvar __MAIN_FILE_LOCATION__ = \\\\\\\"/RichTextEditor.stories.tsx\\\\\\\";\\\\n// @ts-ignore\\\\nvar __MODULE_DEPENDENCIES__ = [];\\\\n// @ts-ignore\\\\nvar __LOCAL_DEPENDENCIES__ = {};\\\\n// @ts-ignore\\\\nvar __IDS_TO_FRAMEWORKS__ = {};\\\\n        \\\\nimport React from 'react'\\\\n\\\\nimport { path } from '..'\\\\nimport RichTextEditor from '.'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport { EditorState, convertToRaw } from 'draft-js'\\\\nimport { insertMention, convertHTMLToDraftState } from './apis'\\\\nimport draftToHtml from 'draftjs-to-html'\\\\nimport Box from '../../atoms/Box'\\\\nimport Button from '../../atoms/Button'\\\\nimport { boolean } from '@storybook/addon-knobs'\\\\n\\\\ninterface IMainComponentProps {\\\\n  showHTMLOutput?: boolean\\\\n  showJSONOutput?: boolean\\\\n  insertMentionsProgrammatically?: boolean\\\\n  initializeFromHTML?: boolean\\\\n}\\\\n\\\\nexport default {parameters: {\\\\\\\"storySource\\\\\\\":{\\\\\\\"source\\\\\\\":\\\\\\\"import React from 'react'\\\\\\\\n\\\\\\\\nimport { path } from '..'\\\\\\\\nimport RichTextEditor from '.'\\\\\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\\\\\nimport { EditorState, convertToRaw } from 'draft-js'\\\\\\\\nimport { insertMention, convertHTMLToDraftState } from './apis'\\\\\\\\nimport draftToHtml from 'draftjs-to-html'\\\\\\\\nimport Box from '../../atoms/Box'\\\\\\\\nimport Button from '../../atoms/Button'\\\\\\\\nimport { boolean } from '@storybook/addon-knobs'\\\\\\\\n\\\\\\\\ninterface IMainComponentProps {\\\\\\\\n  showHTMLOutput?: boolean\\\\\\\\n  showJSONOutput?: boolean\\\\\\\\n  insertMentionsProgrammatically?: boolean\\\\\\\\n  initializeFromHTML?: boolean\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/RichTextEditor`,\\\\\\\\n  component: RichTextEditor\\\\\\\\n}\\\\\\\\n\\\\\\\\n/** Mentions structure from API */\\\\\\\\nconst mentionSuggestionsFromAPI = [\\\\\\\\n  { text: 'Delivery Associate Name', value: 'dmmName', url: '#' },\\\\\\\\n  { text: 'Alert Date', value: 'time', url: '#' },\\\\\\\\n  { text: 'Account Name', value: 'accountname', url: '#' },\\\\\\\\n  { text: 'Account Code', value: 'accountCode', url: '#' },\\\\\\\\n  { text: 'Collected Value', value: 'collectedValue', url: '#' },\\\\\\\\n  { text: 'Package Value', value: 'actualvalue', url: '#' },\\\\\\\\n  { text: 'Currency', value: 'currency', url: '#' },\\\\\\\\n  { text: 'AWB Number', value: 'awbnumber', url: '#' }\\\\\\\\n]\\\\\\\\n\\\\\\\\n/** Mentions Text to Value map */\\\\\\\\nconst mentionSuggesstionsValueMap: Record<string, string> = {}\\\\\\\\n\\\\\\\\n/** Text & Value should have same content when sent to React-Draft */\\\\\\\\nconst mentionSuggesstionsProp = mentionSuggestionsFromAPI.map((m) => {\\\\\\\\n  mentionSuggesstionsValueMap[m.text] = m.value\\\\\\\\n  return { text: m.text, value: m.text, url: m.url }\\\\\\\\n})\\\\\\\\n\\\\\\\\nconst inputHTML =\\\\\\\\n  '<p style=\\\\\\\\\\\\\\\"text-align:left;\\\\\\\\\\\\\\\"><span style=\\\\\\\\\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\\\\\\\\\">Dear recipient,</span></p> <p><span style=\\\\\\\\\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\\\\\\\\\">Order </span><awbnumber><span style=\\\\\\\\\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\\\\\\\\\"> is arriving, should reach your destination at </span><time><span style=\\\\\\\\\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\\\\\\\\\">. </span></p>'\\\\\\\\n\\\\\\\\nconst MainCompoonent = ({\\\\\\\\n  initializeFromHTML,\\\\\\\\n  showHTMLOutput,\\\\\\\\n  showJSONOutput,\\\\\\\\n  insertMentionsProgrammatically\\\\\\\\n}: IMainComponentProps) => {\\\\\\\\n  /** Initialize with empty state */\\\\\\\\n  const [editorState, setEditorState] = React.useState(\\\\\\\\n    EditorState.createEmpty()\\\\\\\\n  )\\\\\\\\n\\\\\\\\n  const JSONOutput = React.useMemo(\\\\\\\\n    () => JSON.stringify(convertToRaw(editorState.getCurrentContent())),\\\\\\\\n    [editorState]\\\\\\\\n  )\\\\\\\\n\\\\\\\\n  const HTMLOutput = React.useMemo(\\\\\\\\n    () =>\\\\\\\\n      draftToHtml(\\\\\\\\n        convertToRaw(editorState.getCurrentContent()),\\\\\\\\n        undefined,\\\\\\\\n        false,\\\\\\\\n        (entity, _text) =>\\\\\\\\n          `<${mentionSuggesstionsValueMap[entity?.data?.value]}>`\\\\\\\\n      ),\\\\\\\\n    [editorState]\\\\\\\\n  )\\\\\\\\n\\\\\\\\n  /** Programmatically insert Mentions - Either at last cursor or at End */\\\\\\\\n  const handleClick = () => {\\\\\\\\n    setEditorState(insertMention(editorState, mentionSuggesstionsProp[0], true))\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  /** Initializing the editor state from HTML */\\\\\\\\n  React.useEffect(() => {\\\\\\\\n    initializeFromHTML &&\\\\\\\\n      setEditorState(\\\\\\\\n        convertHTMLToDraftState(inputHTML || '', mentionSuggestionsFromAPI)\\\\\\\\n      )\\\\\\\\n  }, [])\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <>\\\\\\\\n      {insertMentionsProgrammatically && (\\\\\\\\n        <Button onClick={handleClick}>Insert Mention</Button>\\\\\\\\n      )}\\\\\\\\n      <br />\\\\\\\\n      <br />\\\\\\\\n      <RichTextEditor\\\\\\\\n        label='Email Body'\\\\\\\\n        id='emailBody'\\\\\\\\n        className='emailBody'\\\\\\\\n        isStripPastedStyles={true}\\\\\\\\n        // defaultEditorState={EditorState.createEmpty()}\\\\\\\\n        editorState={editorState}\\\\\\\\n        mention={{\\\\\\\\n          separator: ' ',\\\\\\\\n          trigger: '@',\\\\\\\\n          suggestions: mentionSuggesstionsProp\\\\\\\\n        }}\\\\\\\\n        onEditorStateChange={setEditorState}\\\\\\\\n        placeholder='Enter Email Body'\\\\\\\\n        hideToolbar={boolean('hideToolbar', false)}\\\\\\\\n      />\\\\\\\\n      {/* {editorState.getCurrentContent().getPlainText().length} */}\\\\\\\\n      {showJSONOutput && (\\\\\\\\n        <>\\\\\\\\n          <br />\\\\\\\\n          <br />\\\\\\\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\\\\\\\n            <code>{JSONOutput}</code>\\\\\\\\n          </Box>\\\\\\\\n        </>\\\\\\\\n      )}\\\\\\\\n      {showHTMLOutput && (\\\\\\\\n        <>\\\\\\\\n          <br />\\\\\\\\n          <br />\\\\\\\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\\\\\\\n            <code>{HTMLOutput}</code>\\\\\\\\n          </Box>\\\\\\\\n        </>\\\\\\\\n      )}\\\\\\\\n    </>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const Default = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <MainCompoonent\\\\\\\\n        showHTMLOutput={boolean('showHTMLOutput', false)}\\\\\\\\n        showJSONOutput={boolean('showJSONOutput', false)}\\\\\\\\n        insertMentionsProgrammatically={boolean(\\\\\\\\n          'insertMentionsProgrammatically',\\\\\\\\n          false\\\\\\\\n        )}\\\\\\\\n        initializeFromHTML={boolean('initializeFromHTML', false)}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\",\\\\\\\"locationsMap\\\\\\\":{}},},\\\\n  title: `${path}/RichTextEditor`,\\\\n  component: RichTextEditor\\\\n}\\\\n\\\\n/** Mentions structure from API */\\\\nconst mentionSuggestionsFromAPI = [\\\\n  { text: 'Delivery Associate Name', value: 'dmmName', url: '#' },\\\\n  { text: 'Alert Date', value: 'time', url: '#' },\\\\n  { text: 'Account Name', value: 'accountname', url: '#' },\\\\n  { text: 'Account Code', value: 'accountCode', url: '#' },\\\\n  { text: 'Collected Value', value: 'collectedValue', url: '#' },\\\\n  { text: 'Package Value', value: 'actualvalue', url: '#' },\\\\n  { text: 'Currency', value: 'currency', url: '#' },\\\\n  { text: 'AWB Number', value: 'awbnumber', url: '#' }\\\\n]\\\\n\\\\n/** Mentions Text to Value map */\\\\nconst mentionSuggesstionsValueMap: Record<string, string> = {}\\\\n\\\\n/** Text & Value should have same content when sent to React-Draft */\\\\nconst mentionSuggesstionsProp = mentionSuggestionsFromAPI.map((m) => {\\\\n  mentionSuggesstionsValueMap[m.text] = m.value\\\\n  return { text: m.text, value: m.text, url: m.url }\\\\n})\\\\n\\\\nconst inputHTML =\\\\n  '<p style=\\\\\\\"text-align:left;\\\\\\\"><span style=\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\">Dear recipient,</span></p> <p><span style=\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\">Order </span><awbnumber><span style=\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\"> is arriving, should reach your destination at </span><time><span style=\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\">. </span></p>'\\\\n\\\\nconst MainCompoonent = ({\\\\n  initializeFromHTML,\\\\n  showHTMLOutput,\\\\n  showJSONOutput,\\\\n  insertMentionsProgrammatically\\\\n}: IMainComponentProps) => {\\\\n  /** Initialize with empty state */\\\\n  const [editorState, setEditorState] = React.useState(\\\\n    EditorState.createEmpty()\\\\n  )\\\\n\\\\n  const JSONOutput = React.useMemo(\\\\n    () => JSON.stringify(convertToRaw(editorState.getCurrentContent())),\\\\n    [editorState]\\\\n  )\\\\n\\\\n  const HTMLOutput = React.useMemo(\\\\n    () =>\\\\n      draftToHtml(\\\\n        convertToRaw(editorState.getCurrentContent()),\\\\n        undefined,\\\\n        false,\\\\n        (entity, _text) =>\\\\n          `<${mentionSuggesstionsValueMap[entity?.data?.value]}>`\\\\n      ),\\\\n    [editorState]\\\\n  )\\\\n\\\\n  /** Programmatically insert Mentions - Either at last cursor or at End */\\\\n  const handleClick = () => {\\\\n    setEditorState(insertMention(editorState, mentionSuggesstionsProp[0], true))\\\\n  }\\\\n\\\\n  /** Initializing the editor state from HTML */\\\\n  React.useEffect(() => {\\\\n    initializeFromHTML &&\\\\n      setEditorState(\\\\n        convertHTMLToDraftState(inputHTML || '', mentionSuggestionsFromAPI)\\\\n      )\\\\n  }, [])\\\\n\\\\n  return (\\\\n    <>\\\\n      {insertMentionsProgrammatically && (\\\\n        <Button onClick={handleClick}>Insert Mention</Button>\\\\n      )}\\\\n      <br />\\\\n      <br />\\\\n      <RichTextEditor\\\\n        label='Email Body'\\\\n        id='emailBody'\\\\n        className='emailBody'\\\\n        isStripPastedStyles={true}\\\\n        // defaultEditorState={EditorState.createEmpty()}\\\\n        editorState={editorState}\\\\n        mention={{\\\\n          separator: ' ',\\\\n          trigger: '@',\\\\n          suggestions: mentionSuggesstionsProp\\\\n        }}\\\\n        onEditorStateChange={setEditorState}\\\\n        placeholder='Enter Email Body'\\\\n        hideToolbar={boolean('hideToolbar', false)}\\\\n      />\\\\n      {/* {editorState.getCurrentContent().getPlainText().length} */}\\\\n      {showJSONOutput && (\\\\n        <>\\\\n          <br />\\\\n          <br />\\\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\\\n            <code>{JSONOutput}</code>\\\\n          </Box>\\\\n        </>\\\\n      )}\\\\n      {showHTMLOutput && (\\\\n        <>\\\\n          <br />\\\\n          <br />\\\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\\\n            <code>{HTMLOutput}</code>\\\\n          </Box>\\\\n        </>\\\\n      )}\\\\n    </>\\\\n  )\\\\n}\\\\n\\\\nexport const Default = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <MainCompoonent\\\\n        showHTMLOutput={boolean('showHTMLOutput', false)}\\\\n        showJSONOutput={boolean('showJSONOutput', false)}\\\\n        insertMentionsProgrammatically={boolean(\\\\n          'insertMentionsProgrammatically',\\\\n          false\\\\n        )}\\\\n        initializeFromHTML={boolean('initializeFromHTML', false)}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/RichTextEditor.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\n\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/organisms/RichTextEditor\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"import React from 'react'\\\\n\\\\nimport { path } from '..'\\\\nimport RichTextEditor from '.'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport { EditorState, convertToRaw } from 'draft-js'\\\\nimport { insertMention, convertHTMLToDraftState } from './apis'\\\\nimport draftToHtml from 'draftjs-to-html'\\\\nimport Box from '../../atoms/Box'\\\\nimport Button from '../../atoms/Button'\\\\nimport { boolean } from '@storybook/addon-knobs'\\\\n\\\\ninterface IMainComponentProps {\\\\n  showHTMLOutput?: boolean\\\\n  showJSONOutput?: boolean\\\\n  insertMentionsProgrammatically?: boolean\\\\n  initializeFromHTML?: boolean\\\\n}\\\\n\\\\nexport default {\\\\n  title: `${path}/RichTextEditor`,\\\\n  component: RichTextEditor\\\\n}\\\\n\\\\n/** Mentions structure from API */\\\\nconst mentionSuggestionsFromAPI = [\\\\n  { text: 'Delivery Associate Name', value: 'dmmName', url: '#' },\\\\n  { text: 'Alert Date', value: 'time', url: '#' },\\\\n  { text: 'Account Name', value: 'accountname', url: '#' },\\\\n  { text: 'Account Code', value: 'accountCode', url: '#' },\\\\n  { text: 'Collected Value', value: 'collectedValue', url: '#' },\\\\n  { text: 'Package Value', value: 'actualvalue', url: '#' },\\\\n  { text: 'Currency', value: 'currency', url: '#' },\\\\n  { text: 'AWB Number', value: 'awbnumber', url: '#' }\\\\n]\\\\n\\\\n/** Mentions Text to Value map */\\\\nconst mentionSuggesstionsValueMap: Record<string, string> = {}\\\\n\\\\n/** Text & Value should have same content when sent to React-Draft */\\\\nconst mentionSuggesstionsProp = mentionSuggestionsFromAPI.map((m) => {\\\\n  mentionSuggesstionsValueMap[m.text] = m.value\\\\n  return { text: m.text, value: m.text, url: m.url }\\\\n})\\\\n\\\\nconst inputHTML =\\\\n  '<p style=\\\\\\\"text-align:left;\\\\\\\"><span style=\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\">Dear recipient,</span></p> <p><span style=\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\">Order </span><awbnumber><span style=\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\"> is arriving, should reach your destination at </span><time><span style=\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\">. </span></p>'\\\\n\\\\nconst MainCompoonent = ({\\\\n  initializeFromHTML,\\\\n  showHTMLOutput,\\\\n  showJSONOutput,\\\\n  insertMentionsProgrammatically\\\\n}: IMainComponentProps) => {\\\\n  /** Initialize with empty state */\\\\n  const [editorState, setEditorState] = React.useState(\\\\n    EditorState.createEmpty()\\\\n  )\\\\n\\\\n  const JSONOutput = React.useMemo(\\\\n    () => JSON.stringify(convertToRaw(editorState.getCurrentContent())),\\\\n    [editorState]\\\\n  )\\\\n\\\\n  const HTMLOutput = React.useMemo(\\\\n    () =>\\\\n      draftToHtml(\\\\n        convertToRaw(editorState.getCurrentContent()),\\\\n        undefined,\\\\n        false,\\\\n        (entity, _text) =>\\\\n          `<${mentionSuggesstionsValueMap[entity?.data?.value]}>`\\\\n      ),\\\\n    [editorState]\\\\n  )\\\\n\\\\n  /** Programmatically insert Mentions - Either at last cursor or at End */\\\\n  const handleClick = () => {\\\\n    setEditorState(insertMention(editorState, mentionSuggesstionsProp[0], true))\\\\n  }\\\\n\\\\n  /** Initializing the editor state from HTML */\\\\n  React.useEffect(() => {\\\\n    initializeFromHTML &&\\\\n      setEditorState(\\\\n        convertHTMLToDraftState(inputHTML || '', mentionSuggestionsFromAPI)\\\\n      )\\\\n  }, [])\\\\n\\\\n  return (\\\\n    <>\\\\n      {insertMentionsProgrammatically && (\\\\n        <Button onClick={handleClick}>Insert Mention</Button>\\\\n      )}\\\\n      <br />\\\\n      <br />\\\\n      <RichTextEditor\\\\n        label='Email Body'\\\\n        id='emailBody'\\\\n        className='emailBody'\\\\n        isStripPastedStyles={true}\\\\n        // defaultEditorState={EditorState.createEmpty()}\\\\n        editorState={editorState}\\\\n        mention={{\\\\n          separator: ' ',\\\\n          trigger: '@',\\\\n          suggestions: mentionSuggesstionsProp\\\\n        }}\\\\n        onEditorStateChange={setEditorState}\\\\n        placeholder='Enter Email Body'\\\\n        hideToolbar={boolean('hideToolbar', false)}\\\\n      />\\\\n      {/* {editorState.getCurrentContent().getPlainText().length} */}\\\\n      {showJSONOutput && (\\\\n        <>\\\\n          <br />\\\\n          <br />\\\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\\\n            <code>{JSONOutput}</code>\\\\n          </Box>\\\\n        </>\\\\n      )}\\\\n      {showHTMLOutput && (\\\\n        <>\\\\n          <br />\\\\n          <br />\\\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\\\n            <code>{HTMLOutput}</code>\\\\n          </Box>\\\\n        </>\\\\n      )}\\\\n    </>\\\\n  )\\\\n}\\\\n\\\\nexport const Default = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <MainCompoonent\\\\n        showHTMLOutput={boolean('showHTMLOutput', false)}\\\\n        showJSONOutput={boolean('showJSONOutput', false)}\\\\n        insertMentionsProgrammatically={boolean(\\\\n          'insertMentionsProgrammatically',\\\\n          false\\\\n        )}\\\\n        initializeFromHTML={boolean('initializeFromHTML', false)}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/RichTextEditor.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\nimport React from 'react'\\n\\nimport { path } from '..'\\nimport RichTextEditor from '.'\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\nimport { EditorState, convertToRaw } from 'draft-js'\\nimport { insertMention, convertHTMLToDraftState } from './apis'\\nimport draftToHtml from 'draftjs-to-html'\\nimport Box from '../../atoms/Box'\\nimport Button from '../../atoms/Button'\\nimport { boolean } from '@storybook/addon-knobs'\\n\\ninterface IMainComponentProps {\\n  showHTMLOutput?: boolean\\n  showJSONOutput?: boolean\\n  insertMentionsProgrammatically?: boolean\\n  initializeFromHTML?: boolean\\n}\\n\\nexport default {parameters: {\\\"storySource\\\":{\\\"source\\\":\\\"\\\\n\\\\n// @ts-nocheck\\\\n// @ts-ignore\\\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\\\n// @ts-ignore\\\\nvar addSourceDecorator = require(\\\\\\\"@storybook/source-loader/preview\\\\\\\").addSource;\\\\n// @ts-ignore\\\\nvar __SOURCE_PREFIX__ = \\\\\\\"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/organisms/RichTextEditor\\\\\\\";\\\\n// @ts-ignore\\\\nvar __STORY__ = \\\\\\\"import React from 'react'\\\\\\\\n\\\\\\\\nimport { path } from '..'\\\\\\\\nimport RichTextEditor from '.'\\\\\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\\\\\nimport { EditorState, convertToRaw } from 'draft-js'\\\\\\\\nimport { insertMention, convertHTMLToDraftState } from './apis'\\\\\\\\nimport draftToHtml from 'draftjs-to-html'\\\\\\\\nimport Box from '../../atoms/Box'\\\\\\\\nimport Button from '../../atoms/Button'\\\\\\\\nimport { boolean } from '@storybook/addon-knobs'\\\\\\\\n\\\\\\\\ninterface IMainComponentProps {\\\\\\\\n  showHTMLOutput?: boolean\\\\\\\\n  showJSONOutput?: boolean\\\\\\\\n  insertMentionsProgrammatically?: boolean\\\\\\\\n  initializeFromHTML?: boolean\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/RichTextEditor`,\\\\\\\\n  component: RichTextEditor\\\\\\\\n}\\\\\\\\n\\\\\\\\n/** Mentions structure from API */\\\\\\\\nconst mentionSuggestionsFromAPI = [\\\\\\\\n  { text: 'Delivery Associate Name', value: 'dmmName', url: '#' },\\\\\\\\n  { text: 'Alert Date', value: 'time', url: '#' },\\\\\\\\n  { text: 'Account Name', value: 'accountname', url: '#' },\\\\\\\\n  { text: 'Account Code', value: 'accountCode', url: '#' },\\\\\\\\n  { text: 'Collected Value', value: 'collectedValue', url: '#' },\\\\\\\\n  { text: 'Package Value', value: 'actualvalue', url: '#' },\\\\\\\\n  { text: 'Currency', value: 'currency', url: '#' },\\\\\\\\n  { text: 'AWB Number', value: 'awbnumber', url: '#' }\\\\\\\\n]\\\\\\\\n\\\\\\\\n/** Mentions Text to Value map */\\\\\\\\nconst mentionSuggesstionsValueMap: Record<string, string> = {}\\\\\\\\n\\\\\\\\n/** Text & Value should have same content when sent to React-Draft */\\\\\\\\nconst mentionSuggesstionsProp = mentionSuggestionsFromAPI.map((m) => {\\\\\\\\n  mentionSuggesstionsValueMap[m.text] = m.value\\\\\\\\n  return { text: m.text, value: m.text, url: m.url }\\\\\\\\n})\\\\\\\\n\\\\\\\\nconst inputHTML =\\\\\\\\n  '<p style=\\\\\\\\\\\\\\\"text-align:left;\\\\\\\\\\\\\\\"><span style=\\\\\\\\\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\\\\\\\\\">Dear recipient,</span></p> <p><span style=\\\\\\\\\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\\\\\\\\\">Order </span><awbnumber><span style=\\\\\\\\\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\\\\\\\\\"> is arriving, should reach your destination at </span><time><span style=\\\\\\\\\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\\\\\\\\\">. </span></p>'\\\\\\\\n\\\\\\\\nconst MainCompoonent = ({\\\\\\\\n  initializeFromHTML,\\\\\\\\n  showHTMLOutput,\\\\\\\\n  showJSONOutput,\\\\\\\\n  insertMentionsProgrammatically\\\\\\\\n}: IMainComponentProps) => {\\\\\\\\n  /** Initialize with empty state */\\\\\\\\n  const [editorState, setEditorState] = React.useState(\\\\\\\\n    EditorState.createEmpty()\\\\\\\\n  )\\\\\\\\n\\\\\\\\n  const JSONOutput = React.useMemo(\\\\\\\\n    () => JSON.stringify(convertToRaw(editorState.getCurrentContent())),\\\\\\\\n    [editorState]\\\\\\\\n  )\\\\\\\\n\\\\\\\\n  const HTMLOutput = React.useMemo(\\\\\\\\n    () =>\\\\\\\\n      draftToHtml(\\\\\\\\n        convertToRaw(editorState.getCurrentContent()),\\\\\\\\n        undefined,\\\\\\\\n        false,\\\\\\\\n        (entity, _text) =>\\\\\\\\n          `<${mentionSuggesstionsValueMap[entity?.data?.value]}>`\\\\\\\\n      ),\\\\\\\\n    [editorState]\\\\\\\\n  )\\\\\\\\n\\\\\\\\n  /** Programmatically insert Mentions - Either at last cursor or at End */\\\\\\\\n  const handleClick = () => {\\\\\\\\n    setEditorState(insertMention(editorState, mentionSuggesstionsProp[0], true))\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  /** Initializing the editor state from HTML */\\\\\\\\n  React.useEffect(() => {\\\\\\\\n    initializeFromHTML &&\\\\\\\\n      setEditorState(\\\\\\\\n        convertHTMLToDraftState(inputHTML || '', mentionSuggestionsFromAPI)\\\\\\\\n      )\\\\\\\\n  }, [])\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <>\\\\\\\\n      {insertMentionsProgrammatically && (\\\\\\\\n        <Button onClick={handleClick}>Insert Mention</Button>\\\\\\\\n      )}\\\\\\\\n      <br />\\\\\\\\n      <br />\\\\\\\\n      <RichTextEditor\\\\\\\\n        label='Email Body'\\\\\\\\n        id='emailBody'\\\\\\\\n        className='emailBody'\\\\\\\\n        isStripPastedStyles={true}\\\\\\\\n        // defaultEditorState={EditorState.createEmpty()}\\\\\\\\n        editorState={editorState}\\\\\\\\n        mention={{\\\\\\\\n          separator: ' ',\\\\\\\\n          trigger: '@',\\\\\\\\n          suggestions: mentionSuggesstionsProp\\\\\\\\n        }}\\\\\\\\n        onEditorStateChange={setEditorState}\\\\\\\\n        placeholder='Enter Email Body'\\\\\\\\n        hideToolbar={boolean('hideToolbar', false)}\\\\\\\\n      />\\\\\\\\n      {/* {editorState.getCurrentContent().getPlainText().length} */}\\\\\\\\n      {showJSONOutput && (\\\\\\\\n        <>\\\\\\\\n          <br />\\\\\\\\n          <br />\\\\\\\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\\\\\\\n            <code>{JSONOutput}</code>\\\\\\\\n          </Box>\\\\\\\\n        </>\\\\\\\\n      )}\\\\\\\\n      {showHTMLOutput && (\\\\\\\\n        <>\\\\\\\\n          <br />\\\\\\\\n          <br />\\\\\\\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\\\\\\\n            <code>{HTMLOutput}</code>\\\\\\\\n          </Box>\\\\\\\\n        </>\\\\\\\\n      )}\\\\\\\\n    </>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const Default = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <MainCompoonent\\\\\\\\n        showHTMLOutput={boolean('showHTMLOutput', false)}\\\\\\\\n        showJSONOutput={boolean('showJSONOutput', false)}\\\\\\\\n        insertMentionsProgrammatically={boolean(\\\\\\\\n          'insertMentionsProgrammatically',\\\\\\\\n          false\\\\\\\\n        )}\\\\\\\\n        initializeFromHTML={boolean('initializeFromHTML', false)}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\";\\\\n// @ts-ignore\\\\nvar __ADDS_MAP__ = {};\\\\n// @ts-ignore\\\\nvar __MAIN_FILE_LOCATION__ = \\\\\\\"/RichTextEditor.stories.tsx\\\\\\\";\\\\n// @ts-ignore\\\\nvar __MODULE_DEPENDENCIES__ = [];\\\\n// @ts-ignore\\\\nvar __LOCAL_DEPENDENCIES__ = {};\\\\n// @ts-ignore\\\\nvar __IDS_TO_FRAMEWORKS__ = {};\\\\n        \\\\nimport React from 'react'\\\\n\\\\nimport { path } from '..'\\\\nimport RichTextEditor from '.'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport { EditorState, convertToRaw } from 'draft-js'\\\\nimport { insertMention, convertHTMLToDraftState } from './apis'\\\\nimport draftToHtml from 'draftjs-to-html'\\\\nimport Box from '../../atoms/Box'\\\\nimport Button from '../../atoms/Button'\\\\nimport { boolean } from '@storybook/addon-knobs'\\\\n\\\\ninterface IMainComponentProps {\\\\n  showHTMLOutput?: boolean\\\\n  showJSONOutput?: boolean\\\\n  insertMentionsProgrammatically?: boolean\\\\n  initializeFromHTML?: boolean\\\\n}\\\\n\\\\nexport default {parameters: {\\\\\\\"storySource\\\\\\\":{\\\\\\\"source\\\\\\\":\\\\\\\"import React from 'react'\\\\\\\\n\\\\\\\\nimport { path } from '..'\\\\\\\\nimport RichTextEditor from '.'\\\\\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\\\\\nimport { EditorState, convertToRaw } from 'draft-js'\\\\\\\\nimport { insertMention, convertHTMLToDraftState } from './apis'\\\\\\\\nimport draftToHtml from 'draftjs-to-html'\\\\\\\\nimport Box from '../../atoms/Box'\\\\\\\\nimport Button from '../../atoms/Button'\\\\\\\\nimport { boolean } from '@storybook/addon-knobs'\\\\\\\\n\\\\\\\\ninterface IMainComponentProps {\\\\\\\\n  showHTMLOutput?: boolean\\\\\\\\n  showJSONOutput?: boolean\\\\\\\\n  insertMentionsProgrammatically?: boolean\\\\\\\\n  initializeFromHTML?: boolean\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/RichTextEditor`,\\\\\\\\n  component: RichTextEditor\\\\\\\\n}\\\\\\\\n\\\\\\\\n/** Mentions structure from API */\\\\\\\\nconst mentionSuggestionsFromAPI = [\\\\\\\\n  { text: 'Delivery Associate Name', value: 'dmmName', url: '#' },\\\\\\\\n  { text: 'Alert Date', value: 'time', url: '#' },\\\\\\\\n  { text: 'Account Name', value: 'accountname', url: '#' },\\\\\\\\n  { text: 'Account Code', value: 'accountCode', url: '#' },\\\\\\\\n  { text: 'Collected Value', value: 'collectedValue', url: '#' },\\\\\\\\n  { text: 'Package Value', value: 'actualvalue', url: '#' },\\\\\\\\n  { text: 'Currency', value: 'currency', url: '#' },\\\\\\\\n  { text: 'AWB Number', value: 'awbnumber', url: '#' }\\\\\\\\n]\\\\\\\\n\\\\\\\\n/** Mentions Text to Value map */\\\\\\\\nconst mentionSuggesstionsValueMap: Record<string, string> = {}\\\\\\\\n\\\\\\\\n/** Text & Value should have same content when sent to React-Draft */\\\\\\\\nconst mentionSuggesstionsProp = mentionSuggestionsFromAPI.map((m) => {\\\\\\\\n  mentionSuggesstionsValueMap[m.text] = m.value\\\\\\\\n  return { text: m.text, value: m.text, url: m.url }\\\\\\\\n})\\\\\\\\n\\\\\\\\nconst inputHTML =\\\\\\\\n  '<p style=\\\\\\\\\\\\\\\"text-align:left;\\\\\\\\\\\\\\\"><span style=\\\\\\\\\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\\\\\\\\\">Dear recipient,</span></p> <p><span style=\\\\\\\\\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\\\\\\\\\">Order </span><awbnumber><span style=\\\\\\\\\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\\\\\\\\\"> is arriving, should reach your destination at </span><time><span style=\\\\\\\\\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\\\\\\\\\">. </span></p>'\\\\\\\\n\\\\\\\\nconst MainCompoonent = ({\\\\\\\\n  initializeFromHTML,\\\\\\\\n  showHTMLOutput,\\\\\\\\n  showJSONOutput,\\\\\\\\n  insertMentionsProgrammatically\\\\\\\\n}: IMainComponentProps) => {\\\\\\\\n  /** Initialize with empty state */\\\\\\\\n  const [editorState, setEditorState] = React.useState(\\\\\\\\n    EditorState.createEmpty()\\\\\\\\n  )\\\\\\\\n\\\\\\\\n  const JSONOutput = React.useMemo(\\\\\\\\n    () => JSON.stringify(convertToRaw(editorState.getCurrentContent())),\\\\\\\\n    [editorState]\\\\\\\\n  )\\\\\\\\n\\\\\\\\n  const HTMLOutput = React.useMemo(\\\\\\\\n    () =>\\\\\\\\n      draftToHtml(\\\\\\\\n        convertToRaw(editorState.getCurrentContent()),\\\\\\\\n        undefined,\\\\\\\\n        false,\\\\\\\\n        (entity, _text) =>\\\\\\\\n          `<${mentionSuggesstionsValueMap[entity?.data?.value]}>`\\\\\\\\n      ),\\\\\\\\n    [editorState]\\\\\\\\n  )\\\\\\\\n\\\\\\\\n  /** Programmatically insert Mentions - Either at last cursor or at End */\\\\\\\\n  const handleClick = () => {\\\\\\\\n    setEditorState(insertMention(editorState, mentionSuggesstionsProp[0], true))\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  /** Initializing the editor state from HTML */\\\\\\\\n  React.useEffect(() => {\\\\\\\\n    initializeFromHTML &&\\\\\\\\n      setEditorState(\\\\\\\\n        convertHTMLToDraftState(inputHTML || '', mentionSuggestionsFromAPI)\\\\\\\\n      )\\\\\\\\n  }, [])\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <>\\\\\\\\n      {insertMentionsProgrammatically && (\\\\\\\\n        <Button onClick={handleClick}>Insert Mention</Button>\\\\\\\\n      )}\\\\\\\\n      <br />\\\\\\\\n      <br />\\\\\\\\n      <RichTextEditor\\\\\\\\n        label='Email Body'\\\\\\\\n        id='emailBody'\\\\\\\\n        className='emailBody'\\\\\\\\n        isStripPastedStyles={true}\\\\\\\\n        // defaultEditorState={EditorState.createEmpty()}\\\\\\\\n        editorState={editorState}\\\\\\\\n        mention={{\\\\\\\\n          separator: ' ',\\\\\\\\n          trigger: '@',\\\\\\\\n          suggestions: mentionSuggesstionsProp\\\\\\\\n        }}\\\\\\\\n        onEditorStateChange={setEditorState}\\\\\\\\n        placeholder='Enter Email Body'\\\\\\\\n        hideToolbar={boolean('hideToolbar', false)}\\\\\\\\n      />\\\\\\\\n      {/* {editorState.getCurrentContent().getPlainText().length} */}\\\\\\\\n      {showJSONOutput && (\\\\\\\\n        <>\\\\\\\\n          <br />\\\\\\\\n          <br />\\\\\\\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\\\\\\\n            <code>{JSONOutput}</code>\\\\\\\\n          </Box>\\\\\\\\n        </>\\\\\\\\n      )}\\\\\\\\n      {showHTMLOutput && (\\\\\\\\n        <>\\\\\\\\n          <br />\\\\\\\\n          <br />\\\\\\\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\\\\\\\n            <code>{HTMLOutput}</code>\\\\\\\\n          </Box>\\\\\\\\n        </>\\\\\\\\n      )}\\\\\\\\n    </>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const Default = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <MainCompoonent\\\\\\\\n        showHTMLOutput={boolean('showHTMLOutput', false)}\\\\\\\\n        showJSONOutput={boolean('showJSONOutput', false)}\\\\\\\\n        insertMentionsProgrammatically={boolean(\\\\\\\\n          'insertMentionsProgrammatically',\\\\\\\\n          false\\\\\\\\n        )}\\\\\\\\n        initializeFromHTML={boolean('initializeFromHTML', false)}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\",\\\\\\\"locationsMap\\\\\\\":{}},},\\\\n  title: `${path}/RichTextEditor`,\\\\n  component: RichTextEditor\\\\n}\\\\n\\\\n/** Mentions structure from API */\\\\nconst mentionSuggestionsFromAPI = [\\\\n  { text: 'Delivery Associate Name', value: 'dmmName', url: '#' },\\\\n  { text: 'Alert Date', value: 'time', url: '#' },\\\\n  { text: 'Account Name', value: 'accountname', url: '#' },\\\\n  { text: 'Account Code', value: 'accountCode', url: '#' },\\\\n  { text: 'Collected Value', value: 'collectedValue', url: '#' },\\\\n  { text: 'Package Value', value: 'actualvalue', url: '#' },\\\\n  { text: 'Currency', value: 'currency', url: '#' },\\\\n  { text: 'AWB Number', value: 'awbnumber', url: '#' }\\\\n]\\\\n\\\\n/** Mentions Text to Value map */\\\\nconst mentionSuggesstionsValueMap: Record<string, string> = {}\\\\n\\\\n/** Text & Value should have same content when sent to React-Draft */\\\\nconst mentionSuggesstionsProp = mentionSuggestionsFromAPI.map((m) => {\\\\n  mentionSuggesstionsValueMap[m.text] = m.value\\\\n  return { text: m.text, value: m.text, url: m.url }\\\\n})\\\\n\\\\nconst inputHTML =\\\\n  '<p style=\\\\\\\"text-align:left;\\\\\\\"><span style=\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\">Dear recipient,</span></p> <p><span style=\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\">Order </span><awbnumber><span style=\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\"> is arriving, should reach your destination at </span><time><span style=\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\">. </span></p>'\\\\n\\\\nconst MainCompoonent = ({\\\\n  initializeFromHTML,\\\\n  showHTMLOutput,\\\\n  showJSONOutput,\\\\n  insertMentionsProgrammatically\\\\n}: IMainComponentProps) => {\\\\n  /** Initialize with empty state */\\\\n  const [editorState, setEditorState] = React.useState(\\\\n    EditorState.createEmpty()\\\\n  )\\\\n\\\\n  const JSONOutput = React.useMemo(\\\\n    () => JSON.stringify(convertToRaw(editorState.getCurrentContent())),\\\\n    [editorState]\\\\n  )\\\\n\\\\n  const HTMLOutput = React.useMemo(\\\\n    () =>\\\\n      draftToHtml(\\\\n        convertToRaw(editorState.getCurrentContent()),\\\\n        undefined,\\\\n        false,\\\\n        (entity, _text) =>\\\\n          `<${mentionSuggesstionsValueMap[entity?.data?.value]}>`\\\\n      ),\\\\n    [editorState]\\\\n  )\\\\n\\\\n  /** Programmatically insert Mentions - Either at last cursor or at End */\\\\n  const handleClick = () => {\\\\n    setEditorState(insertMention(editorState, mentionSuggesstionsProp[0], true))\\\\n  }\\\\n\\\\n  /** Initializing the editor state from HTML */\\\\n  React.useEffect(() => {\\\\n    initializeFromHTML &&\\\\n      setEditorState(\\\\n        convertHTMLToDraftState(inputHTML || '', mentionSuggestionsFromAPI)\\\\n      )\\\\n  }, [])\\\\n\\\\n  return (\\\\n    <>\\\\n      {insertMentionsProgrammatically && (\\\\n        <Button onClick={handleClick}>Insert Mention</Button>\\\\n      )}\\\\n      <br />\\\\n      <br />\\\\n      <RichTextEditor\\\\n        label='Email Body'\\\\n        id='emailBody'\\\\n        className='emailBody'\\\\n        isStripPastedStyles={true}\\\\n        // defaultEditorState={EditorState.createEmpty()}\\\\n        editorState={editorState}\\\\n        mention={{\\\\n          separator: ' ',\\\\n          trigger: '@',\\\\n          suggestions: mentionSuggesstionsProp\\\\n        }}\\\\n        onEditorStateChange={setEditorState}\\\\n        placeholder='Enter Email Body'\\\\n        hideToolbar={boolean('hideToolbar', false)}\\\\n      />\\\\n      {/* {editorState.getCurrentContent().getPlainText().length} */}\\\\n      {showJSONOutput && (\\\\n        <>\\\\n          <br />\\\\n          <br />\\\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\\\n            <code>{JSONOutput}</code>\\\\n          </Box>\\\\n        </>\\\\n      )}\\\\n      {showHTMLOutput && (\\\\n        <>\\\\n          <br />\\\\n          <br />\\\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\\\n            <code>{HTMLOutput}</code>\\\\n          </Box>\\\\n        </>\\\\n      )}\\\\n    </>\\\\n  )\\\\n}\\\\n\\\\nexport const Default = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <MainCompoonent\\\\n        showHTMLOutput={boolean('showHTMLOutput', false)}\\\\n        showJSONOutput={boolean('showJSONOutput', false)}\\\\n        insertMentionsProgrammatically={boolean(\\\\n          'insertMentionsProgrammatically',\\\\n          false\\\\n        )}\\\\n        initializeFromHTML={boolean('initializeFromHTML', false)}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\",\\\"locationsMap\\\":{}},\\\"storySource\\\":{\\\"source\\\":\\\"import React from 'react'\\\\n\\\\nimport { path } from '..'\\\\nimport RichTextEditor from '.'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport { EditorState, convertToRaw } from 'draft-js'\\\\nimport { insertMention, convertHTMLToDraftState } from './apis'\\\\nimport draftToHtml from 'draftjs-to-html'\\\\nimport Box from '../../atoms/Box'\\\\nimport Button from '../../atoms/Button'\\\\nimport { boolean } from '@storybook/addon-knobs'\\\\n\\\\ninterface IMainComponentProps {\\\\n  showHTMLOutput?: boolean\\\\n  showJSONOutput?: boolean\\\\n  insertMentionsProgrammatically?: boolean\\\\n  initializeFromHTML?: boolean\\\\n}\\\\n\\\\nexport default {\\\\n  title: `${path}/RichTextEditor`,\\\\n  component: RichTextEditor\\\\n}\\\\n\\\\n/** Mentions structure from API */\\\\nconst mentionSuggestionsFromAPI = [\\\\n  { text: 'Delivery Associate Name', value: 'dmmName', url: '#' },\\\\n  { text: 'Alert Date', value: 'time', url: '#' },\\\\n  { text: 'Account Name', value: 'accountname', url: '#' },\\\\n  { text: 'Account Code', value: 'accountCode', url: '#' },\\\\n  { text: 'Collected Value', value: 'collectedValue', url: '#' },\\\\n  { text: 'Package Value', value: 'actualvalue', url: '#' },\\\\n  { text: 'Currency', value: 'currency', url: '#' },\\\\n  { text: 'AWB Number', value: 'awbnumber', url: '#' }\\\\n]\\\\n\\\\n/** Mentions Text to Value map */\\\\nconst mentionSuggesstionsValueMap: Record<string, string> = {}\\\\n\\\\n/** Text & Value should have same content when sent to React-Draft */\\\\nconst mentionSuggesstionsProp = mentionSuggestionsFromAPI.map((m) => {\\\\n  mentionSuggesstionsValueMap[m.text] = m.value\\\\n  return { text: m.text, value: m.text, url: m.url }\\\\n})\\\\n\\\\nconst inputHTML =\\\\n  '<p style=\\\\\\\"text-align:left;\\\\\\\"><span style=\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\">Dear recipient,</span></p> <p><span style=\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\">Order </span><awbnumber><span style=\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\"> is arriving, should reach your destination at </span><time><span style=\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\">. </span></p>'\\\\n\\\\nconst MainCompoonent = ({\\\\n  initializeFromHTML,\\\\n  showHTMLOutput,\\\\n  showJSONOutput,\\\\n  insertMentionsProgrammatically\\\\n}: IMainComponentProps) => {\\\\n  /** Initialize with empty state */\\\\n  const [editorState, setEditorState] = React.useState(\\\\n    EditorState.createEmpty()\\\\n  )\\\\n\\\\n  const JSONOutput = React.useMemo(\\\\n    () => JSON.stringify(convertToRaw(editorState.getCurrentContent())),\\\\n    [editorState]\\\\n  )\\\\n\\\\n  const HTMLOutput = React.useMemo(\\\\n    () =>\\\\n      draftToHtml(\\\\n        convertToRaw(editorState.getCurrentContent()),\\\\n        undefined,\\\\n        false,\\\\n        (entity, _text) =>\\\\n          `<${mentionSuggesstionsValueMap[entity?.data?.value]}>`\\\\n      ),\\\\n    [editorState]\\\\n  )\\\\n\\\\n  /** Programmatically insert Mentions - Either at last cursor or at End */\\\\n  const handleClick = () => {\\\\n    setEditorState(insertMention(editorState, mentionSuggesstionsProp[0], true))\\\\n  }\\\\n\\\\n  /** Initializing the editor state from HTML */\\\\n  React.useEffect(() => {\\\\n    initializeFromHTML &&\\\\n      setEditorState(\\\\n        convertHTMLToDraftState(inputHTML || '', mentionSuggestionsFromAPI)\\\\n      )\\\\n  }, [])\\\\n\\\\n  return (\\\\n    <>\\\\n      {insertMentionsProgrammatically && (\\\\n        <Button onClick={handleClick}>Insert Mention</Button>\\\\n      )}\\\\n      <br />\\\\n      <br />\\\\n      <RichTextEditor\\\\n        label='Email Body'\\\\n        id='emailBody'\\\\n        className='emailBody'\\\\n        isStripPastedStyles={true}\\\\n        // defaultEditorState={EditorState.createEmpty()}\\\\n        editorState={editorState}\\\\n        mention={{\\\\n          separator: ' ',\\\\n          trigger: '@',\\\\n          suggestions: mentionSuggesstionsProp\\\\n        }}\\\\n        onEditorStateChange={setEditorState}\\\\n        placeholder='Enter Email Body'\\\\n        hideToolbar={boolean('hideToolbar', false)}\\\\n      />\\\\n      {/* {editorState.getCurrentContent().getPlainText().length} */}\\\\n      {showJSONOutput && (\\\\n        <>\\\\n          <br />\\\\n          <br />\\\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\\\n            <code>{JSONOutput}</code>\\\\n          </Box>\\\\n        </>\\\\n      )}\\\\n      {showHTMLOutput && (\\\\n        <>\\\\n          <br />\\\\n          <br />\\\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\\\n            <code>{HTMLOutput}</code>\\\\n          </Box>\\\\n        </>\\\\n      )}\\\\n    </>\\\\n  )\\\\n}\\\\n\\\\nexport const Default = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <MainCompoonent\\\\n        showHTMLOutput={boolean('showHTMLOutput', false)}\\\\n        showJSONOutput={boolean('showJSONOutput', false)}\\\\n        insertMentionsProgrammatically={boolean(\\\\n          'insertMentionsProgrammatically',\\\\n          false\\\\n        )}\\\\n        initializeFromHTML={boolean('initializeFromHTML', false)}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\",\\\"locationsMap\\\":{}},},\\n  title: `${path}/RichTextEditor`,\\n  component: RichTextEditor\\n}\\n\\n/** Mentions structure from API */\\nconst mentionSuggestionsFromAPI = [\\n  { text: 'Delivery Associate Name', value: 'dmmName', url: '#' },\\n  { text: 'Alert Date', value: 'time', url: '#' },\\n  { text: 'Account Name', value: 'accountname', url: '#' },\\n  { text: 'Account Code', value: 'accountCode', url: '#' },\\n  { text: 'Collected Value', value: 'collectedValue', url: '#' },\\n  { text: 'Package Value', value: 'actualvalue', url: '#' },\\n  { text: 'Currency', value: 'currency', url: '#' },\\n  { text: 'AWB Number', value: 'awbnumber', url: '#' }\\n]\\n\\n/** Mentions Text to Value map */\\nconst mentionSuggesstionsValueMap: Record<string, string> = {}\\n\\n/** Text & Value should have same content when sent to React-Draft */\\nconst mentionSuggesstionsProp = mentionSuggestionsFromAPI.map((m) => {\\n  mentionSuggesstionsValueMap[m.text] = m.value\\n  return { text: m.text, value: m.text, url: m.url }\\n})\\n\\nconst inputHTML =\\n  '<p style=\\\"text-align:left;\\\"><span style=\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\">Dear recipient,</span></p> <p><span style=\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\">Order </span><awbnumber><span style=\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\"> is arriving, should reach your destination at </span><time><span style=\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\">. </span></p>'\\n\\nconst MainCompoonent = ({\\n  initializeFromHTML,\\n  showHTMLOutput,\\n  showJSONOutput,\\n  insertMentionsProgrammatically\\n}: IMainComponentProps) => {\\n  /** Initialize with empty state */\\n  const [editorState, setEditorState] = React.useState(\\n    EditorState.createEmpty()\\n  )\\n\\n  const JSONOutput = React.useMemo(\\n    () => JSON.stringify(convertToRaw(editorState.getCurrentContent())),\\n    [editorState]\\n  )\\n\\n  const HTMLOutput = React.useMemo(\\n    () =>\\n      draftToHtml(\\n        convertToRaw(editorState.getCurrentContent()),\\n        undefined,\\n        false,\\n        (entity, _text) =>\\n          `<${mentionSuggesstionsValueMap[entity?.data?.value]}>`\\n      ),\\n    [editorState]\\n  )\\n\\n  /** Programmatically insert Mentions - Either at last cursor or at End */\\n  const handleClick = () => {\\n    setEditorState(insertMention(editorState, mentionSuggesstionsProp[0], true))\\n  }\\n\\n  /** Initializing the editor state from HTML */\\n  React.useEffect(() => {\\n    initializeFromHTML &&\\n      setEditorState(\\n        convertHTMLToDraftState(inputHTML || '', mentionSuggestionsFromAPI)\\n      )\\n  }, [])\\n\\n  return (\\n    <>\\n      {insertMentionsProgrammatically && (\\n        <Button onClick={handleClick}>Insert Mention</Button>\\n      )}\\n      <br />\\n      <br />\\n      <RichTextEditor\\n        label='Email Body'\\n        id='emailBody'\\n        className='emailBody'\\n        isStripPastedStyles={true}\\n        // defaultEditorState={EditorState.createEmpty()}\\n        editorState={editorState}\\n        mention={{\\n          separator: ' ',\\n          trigger: '@',\\n          suggestions: mentionSuggesstionsProp\\n        }}\\n        onEditorStateChange={setEditorState}\\n        placeholder='Enter Email Body'\\n        hideToolbar={boolean('hideToolbar', false)}\\n      />\\n      {/* {editorState.getCurrentContent().getPlainText().length} */}\\n      {showJSONOutput && (\\n        <>\\n          <br />\\n          <br />\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\n            <code>{JSONOutput}</code>\\n          </Box>\\n        </>\\n      )}\\n      {showHTMLOutput && (\\n        <>\\n          <br />\\n          <br />\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\n            <code>{HTMLOutput}</code>\\n          </Box>\\n        </>\\n      )}\\n    </>\\n  )\\n}\\n\\nexport const Default = addSourceDecorator(addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <MainCompoonent\\n        showHTMLOutput={boolean('showHTMLOutput', false)}\\n        showJSONOutput={boolean('showJSONOutput', false)}\\n        insertMentionsProgrammatically={boolean(\\n          'insertMentionsProgrammatically',\\n          false\\n        )}\\n        initializeFromHTML={boolean('initializeFromHTML', false)}\\n      />\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\"; // @ts-ignore\n\nvar __ADDS_MAP__ = {}; // @ts-ignore\n\nvar __MAIN_FILE_LOCATION__ = \"/RichTextEditor.stories.tsx\"; // @ts-ignore\n\nvar __MODULE_DEPENDENCIES__ = []; // @ts-ignore\n\nvar __LOCAL_DEPENDENCIES__ = {}; // @ts-ignore\n\nvar __IDS_TO_FRAMEWORKS__ = {};\n/* eslint-disable */\n// @ts-nocheck\n// @ts-ignore\n\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource; // @ts-ignore\n\n\nvar addSourceDecorator = require(\"@storybook/source-loader/preview\").addSource; // @ts-ignore\n\n\nvar __SOURCE_PREFIX__ = \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/organisms/RichTextEditor\"; // @ts-ignore\n\nvar __STORY__ = \"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/organisms/RichTextEditor\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"import React from 'react'\\\\n\\\\nimport { path } from '..'\\\\nimport RichTextEditor from '.'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport { EditorState, convertToRaw } from 'draft-js'\\\\nimport { insertMention, convertHTMLToDraftState } from './apis'\\\\nimport draftToHtml from 'draftjs-to-html'\\\\nimport Box from '../../atoms/Box'\\\\nimport Button from '../../atoms/Button'\\\\nimport { boolean } from '@storybook/addon-knobs'\\\\n\\\\ninterface IMainComponentProps {\\\\n  showHTMLOutput?: boolean\\\\n  showJSONOutput?: boolean\\\\n  insertMentionsProgrammatically?: boolean\\\\n  initializeFromHTML?: boolean\\\\n}\\\\n\\\\nexport default {\\\\n  title: `${path}/RichTextEditor`,\\\\n  component: RichTextEditor\\\\n}\\\\n\\\\n/** Mentions structure from API */\\\\nconst mentionSuggestionsFromAPI = [\\\\n  { text: 'Delivery Associate Name', value: 'dmmName', url: '#' },\\\\n  { text: 'Alert Date', value: 'time', url: '#' },\\\\n  { text: 'Account Name', value: 'accountname', url: '#' },\\\\n  { text: 'Account Code', value: 'accountCode', url: '#' },\\\\n  { text: 'Collected Value', value: 'collectedValue', url: '#' },\\\\n  { text: 'Package Value', value: 'actualvalue', url: '#' },\\\\n  { text: 'Currency', value: 'currency', url: '#' },\\\\n  { text: 'AWB Number', value: 'awbnumber', url: '#' }\\\\n]\\\\n\\\\n/** Mentions Text to Value map */\\\\nconst mentionSuggesstionsValueMap: Record<string, string> = {}\\\\n\\\\n/** Text & Value should have same content when sent to React-Draft */\\\\nconst mentionSuggesstionsProp = mentionSuggestionsFromAPI.map((m) => {\\\\n  mentionSuggesstionsValueMap[m.text] = m.value\\\\n  return { text: m.text, value: m.text, url: m.url }\\\\n})\\\\n\\\\nconst inputHTML =\\\\n  '<p style=\\\\\\\"text-align:left;\\\\\\\"><span style=\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\">Dear recipient,</span></p> <p><span style=\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\">Order </span><awbnumber><span style=\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\"> is arriving, should reach your destination at </span><time><span style=\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\">. </span></p>'\\\\n\\\\nconst MainCompoonent = ({\\\\n  initializeFromHTML,\\\\n  showHTMLOutput,\\\\n  showJSONOutput,\\\\n  insertMentionsProgrammatically\\\\n}: IMainComponentProps) => {\\\\n  /** Initialize with empty state */\\\\n  const [editorState, setEditorState] = React.useState(\\\\n    EditorState.createEmpty()\\\\n  )\\\\n\\\\n  const JSONOutput = React.useMemo(\\\\n    () => JSON.stringify(convertToRaw(editorState.getCurrentContent())),\\\\n    [editorState]\\\\n  )\\\\n\\\\n  const HTMLOutput = React.useMemo(\\\\n    () =>\\\\n      draftToHtml(\\\\n        convertToRaw(editorState.getCurrentContent()),\\\\n        undefined,\\\\n        false,\\\\n        (entity, _text) =>\\\\n          `<${mentionSuggesstionsValueMap[entity?.data?.value]}>`\\\\n      ),\\\\n    [editorState]\\\\n  )\\\\n\\\\n  /** Programmatically insert Mentions - Either at last cursor or at End */\\\\n  const handleClick = () => {\\\\n    setEditorState(insertMention(editorState, mentionSuggesstionsProp[0], true))\\\\n  }\\\\n\\\\n  /** Initializing the editor state from HTML */\\\\n  React.useEffect(() => {\\\\n    initializeFromHTML &&\\\\n      setEditorState(\\\\n        convertHTMLToDraftState(inputHTML || '', mentionSuggestionsFromAPI)\\\\n      )\\\\n  }, [])\\\\n\\\\n  return (\\\\n    <>\\\\n      {insertMentionsProgrammatically && (\\\\n        <Button onClick={handleClick}>Insert Mention</Button>\\\\n      )}\\\\n      <br />\\\\n      <br />\\\\n      <RichTextEditor\\\\n        label='Email Body'\\\\n        id='emailBody'\\\\n        className='emailBody'\\\\n        isStripPastedStyles={true}\\\\n        // defaultEditorState={EditorState.createEmpty()}\\\\n        editorState={editorState}\\\\n        mention={{\\\\n          separator: ' ',\\\\n          trigger: '@',\\\\n          suggestions: mentionSuggesstionsProp\\\\n        }}\\\\n        onEditorStateChange={setEditorState}\\\\n        placeholder='Enter Email Body'\\\\n        hideToolbar={boolean('hideToolbar', false)}\\\\n      />\\\\n      {/* {editorState.getCurrentContent().getPlainText().length} */}\\\\n      {showJSONOutput && (\\\\n        <>\\\\n          <br />\\\\n          <br />\\\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\\\n            <code>{JSONOutput}</code>\\\\n          </Box>\\\\n        </>\\\\n      )}\\\\n      {showHTMLOutput && (\\\\n        <>\\\\n          <br />\\\\n          <br />\\\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\\\n            <code>{HTMLOutput}</code>\\\\n          </Box>\\\\n        </>\\\\n      )}\\\\n    </>\\\\n  )\\\\n}\\\\n\\\\nexport const Default = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <MainCompoonent\\\\n        showHTMLOutput={boolean('showHTMLOutput', false)}\\\\n        showJSONOutput={boolean('showJSONOutput', false)}\\\\n        insertMentionsProgrammatically={boolean(\\\\n          'insertMentionsProgrammatically',\\\\n          false\\\\n        )}\\\\n        initializeFromHTML={boolean('initializeFromHTML', false)}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/RichTextEditor.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\nimport React from 'react'\\n\\nimport { path } from '..'\\nimport RichTextEditor from '.'\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\nimport { EditorState, convertToRaw } from 'draft-js'\\nimport { insertMention, convertHTMLToDraftState } from './apis'\\nimport draftToHtml from 'draftjs-to-html'\\nimport Box from '../../atoms/Box'\\nimport Button from '../../atoms/Button'\\nimport { boolean } from '@storybook/addon-knobs'\\n\\ninterface IMainComponentProps {\\n  showHTMLOutput?: boolean\\n  showJSONOutput?: boolean\\n  insertMentionsProgrammatically?: boolean\\n  initializeFromHTML?: boolean\\n}\\n\\nexport default {parameters: {\\\"storySource\\\":{\\\"source\\\":\\\"import React from 'react'\\\\n\\\\nimport { path } from '..'\\\\nimport RichTextEditor from '.'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport { EditorState, convertToRaw } from 'draft-js'\\\\nimport { insertMention, convertHTMLToDraftState } from './apis'\\\\nimport draftToHtml from 'draftjs-to-html'\\\\nimport Box from '../../atoms/Box'\\\\nimport Button from '../../atoms/Button'\\\\nimport { boolean } from '@storybook/addon-knobs'\\\\n\\\\ninterface IMainComponentProps {\\\\n  showHTMLOutput?: boolean\\\\n  showJSONOutput?: boolean\\\\n  insertMentionsProgrammatically?: boolean\\\\n  initializeFromHTML?: boolean\\\\n}\\\\n\\\\nexport default {\\\\n  title: `${path}/RichTextEditor`,\\\\n  component: RichTextEditor\\\\n}\\\\n\\\\n/** Mentions structure from API */\\\\nconst mentionSuggestionsFromAPI = [\\\\n  { text: 'Delivery Associate Name', value: 'dmmName', url: '#' },\\\\n  { text: 'Alert Date', value: 'time', url: '#' },\\\\n  { text: 'Account Name', value: 'accountname', url: '#' },\\\\n  { text: 'Account Code', value: 'accountCode', url: '#' },\\\\n  { text: 'Collected Value', value: 'collectedValue', url: '#' },\\\\n  { text: 'Package Value', value: 'actualvalue', url: '#' },\\\\n  { text: 'Currency', value: 'currency', url: '#' },\\\\n  { text: 'AWB Number', value: 'awbnumber', url: '#' }\\\\n]\\\\n\\\\n/** Mentions Text to Value map */\\\\nconst mentionSuggesstionsValueMap: Record<string, string> = {}\\\\n\\\\n/** Text & Value should have same content when sent to React-Draft */\\\\nconst mentionSuggesstionsProp = mentionSuggestionsFromAPI.map((m) => {\\\\n  mentionSuggesstionsValueMap[m.text] = m.value\\\\n  return { text: m.text, value: m.text, url: m.url }\\\\n})\\\\n\\\\nconst inputHTML =\\\\n  '<p style=\\\\\\\"text-align:left;\\\\\\\"><span style=\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\">Dear recipient,</span></p> <p><span style=\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\">Order </span><awbnumber><span style=\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\"> is arriving, should reach your destination at </span><time><span style=\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\">. </span></p>'\\\\n\\\\nconst MainCompoonent = ({\\\\n  initializeFromHTML,\\\\n  showHTMLOutput,\\\\n  showJSONOutput,\\\\n  insertMentionsProgrammatically\\\\n}: IMainComponentProps) => {\\\\n  /** Initialize with empty state */\\\\n  const [editorState, setEditorState] = React.useState(\\\\n    EditorState.createEmpty()\\\\n  )\\\\n\\\\n  const JSONOutput = React.useMemo(\\\\n    () => JSON.stringify(convertToRaw(editorState.getCurrentContent())),\\\\n    [editorState]\\\\n  )\\\\n\\\\n  const HTMLOutput = React.useMemo(\\\\n    () =>\\\\n      draftToHtml(\\\\n        convertToRaw(editorState.getCurrentContent()),\\\\n        undefined,\\\\n        false,\\\\n        (entity, _text) =>\\\\n          `<${mentionSuggesstionsValueMap[entity?.data?.value]}>`\\\\n      ),\\\\n    [editorState]\\\\n  )\\\\n\\\\n  /** Programmatically insert Mentions - Either at last cursor or at End */\\\\n  const handleClick = () => {\\\\n    setEditorState(insertMention(editorState, mentionSuggesstionsProp[0], true))\\\\n  }\\\\n\\\\n  /** Initializing the editor state from HTML */\\\\n  React.useEffect(() => {\\\\n    initializeFromHTML &&\\\\n      setEditorState(\\\\n        convertHTMLToDraftState(inputHTML || '', mentionSuggestionsFromAPI)\\\\n      )\\\\n  }, [])\\\\n\\\\n  return (\\\\n    <>\\\\n      {insertMentionsProgrammatically && (\\\\n        <Button onClick={handleClick}>Insert Mention</Button>\\\\n      )}\\\\n      <br />\\\\n      <br />\\\\n      <RichTextEditor\\\\n        label='Email Body'\\\\n        id='emailBody'\\\\n        className='emailBody'\\\\n        isStripPastedStyles={true}\\\\n        // defaultEditorState={EditorState.createEmpty()}\\\\n        editorState={editorState}\\\\n        mention={{\\\\n          separator: ' ',\\\\n          trigger: '@',\\\\n          suggestions: mentionSuggesstionsProp\\\\n        }}\\\\n        onEditorStateChange={setEditorState}\\\\n        placeholder='Enter Email Body'\\\\n        hideToolbar={boolean('hideToolbar', false)}\\\\n      />\\\\n      {/* {editorState.getCurrentContent().getPlainText().length} */}\\\\n      {showJSONOutput && (\\\\n        <>\\\\n          <br />\\\\n          <br />\\\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\\\n            <code>{JSONOutput}</code>\\\\n          </Box>\\\\n        </>\\\\n      )}\\\\n      {showHTMLOutput && (\\\\n        <>\\\\n          <br />\\\\n          <br />\\\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\\\n            <code>{HTMLOutput}</code>\\\\n          </Box>\\\\n        </>\\\\n      )}\\\\n    </>\\\\n  )\\\\n}\\\\n\\\\nexport const Default = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <MainCompoonent\\\\n        showHTMLOutput={boolean('showHTMLOutput', false)}\\\\n        showJSONOutput={boolean('showJSONOutput', false)}\\\\n        insertMentionsProgrammatically={boolean(\\\\n          'insertMentionsProgrammatically',\\\\n          false\\\\n        )}\\\\n        initializeFromHTML={boolean('initializeFromHTML', false)}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\",\\\"locationsMap\\\":{}},},\\n  title: `${path}/RichTextEditor`,\\n  component: RichTextEditor\\n}\\n\\n/** Mentions structure from API */\\nconst mentionSuggestionsFromAPI = [\\n  { text: 'Delivery Associate Name', value: 'dmmName', url: '#' },\\n  { text: 'Alert Date', value: 'time', url: '#' },\\n  { text: 'Account Name', value: 'accountname', url: '#' },\\n  { text: 'Account Code', value: 'accountCode', url: '#' },\\n  { text: 'Collected Value', value: 'collectedValue', url: '#' },\\n  { text: 'Package Value', value: 'actualvalue', url: '#' },\\n  { text: 'Currency', value: 'currency', url: '#' },\\n  { text: 'AWB Number', value: 'awbnumber', url: '#' }\\n]\\n\\n/** Mentions Text to Value map */\\nconst mentionSuggesstionsValueMap: Record<string, string> = {}\\n\\n/** Text & Value should have same content when sent to React-Draft */\\nconst mentionSuggesstionsProp = mentionSuggestionsFromAPI.map((m) => {\\n  mentionSuggesstionsValueMap[m.text] = m.value\\n  return { text: m.text, value: m.text, url: m.url }\\n})\\n\\nconst inputHTML =\\n  '<p style=\\\"text-align:left;\\\"><span style=\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\">Dear recipient,</span></p> <p><span style=\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\">Order </span><awbnumber><span style=\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\"> is arriving, should reach your destination at </span><time><span style=\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\">. </span></p>'\\n\\nconst MainCompoonent = ({\\n  initializeFromHTML,\\n  showHTMLOutput,\\n  showJSONOutput,\\n  insertMentionsProgrammatically\\n}: IMainComponentProps) => {\\n  /** Initialize with empty state */\\n  const [editorState, setEditorState] = React.useState(\\n    EditorState.createEmpty()\\n  )\\n\\n  const JSONOutput = React.useMemo(\\n    () => JSON.stringify(convertToRaw(editorState.getCurrentContent())),\\n    [editorState]\\n  )\\n\\n  const HTMLOutput = React.useMemo(\\n    () =>\\n      draftToHtml(\\n        convertToRaw(editorState.getCurrentContent()),\\n        undefined,\\n        false,\\n        (entity, _text) =>\\n          `<${mentionSuggesstionsValueMap[entity?.data?.value]}>`\\n      ),\\n    [editorState]\\n  )\\n\\n  /** Programmatically insert Mentions - Either at last cursor or at End */\\n  const handleClick = () => {\\n    setEditorState(insertMention(editorState, mentionSuggesstionsProp[0], true))\\n  }\\n\\n  /** Initializing the editor state from HTML */\\n  React.useEffect(() => {\\n    initializeFromHTML &&\\n      setEditorState(\\n        convertHTMLToDraftState(inputHTML || '', mentionSuggestionsFromAPI)\\n      )\\n  }, [])\\n\\n  return (\\n    <>\\n      {insertMentionsProgrammatically && (\\n        <Button onClick={handleClick}>Insert Mention</Button>\\n      )}\\n      <br />\\n      <br />\\n      <RichTextEditor\\n        label='Email Body'\\n        id='emailBody'\\n        className='emailBody'\\n        isStripPastedStyles={true}\\n        // defaultEditorState={EditorState.createEmpty()}\\n        editorState={editorState}\\n        mention={{\\n          separator: ' ',\\n          trigger: '@',\\n          suggestions: mentionSuggesstionsProp\\n        }}\\n        onEditorStateChange={setEditorState}\\n        placeholder='Enter Email Body'\\n        hideToolbar={boolean('hideToolbar', false)}\\n      />\\n      {/* {editorState.getCurrentContent().getPlainText().length} */}\\n      {showJSONOutput && (\\n        <>\\n          <br />\\n          <br />\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\n            <code>{JSONOutput}</code>\\n          </Box>\\n        </>\\n      )}\\n      {showHTMLOutput && (\\n        <>\\n          <br />\\n          <br />\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\n            <code>{HTMLOutput}</code>\\n          </Box>\\n        </>\\n      )}\\n    </>\\n  )\\n}\\n\\nexport const Default = addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <MainCompoonent\\n        showHTMLOutput={boolean('showHTMLOutput', false)}\\n        showJSONOutput={boolean('showJSONOutput', false)}\\n        insertMentionsProgrammatically={boolean(\\n          'insertMentionsProgrammatically',\\n          false\\n        )}\\n        initializeFromHTML={boolean('initializeFromHTML', false)}\\n      />\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\"; // @ts-ignore\n\nvar __ADDS_MAP__ = {}; // @ts-ignore\n\nvar __MAIN_FILE_LOCATION__ = \"/RichTextEditor.stories.tsx\"; // @ts-ignore\n\nvar __MODULE_DEPENDENCIES__ = []; // @ts-ignore\n\nvar __LOCAL_DEPENDENCIES__ = {}; // @ts-ignore\n\nvar __IDS_TO_FRAMEWORKS__ = {};\n/* eslint-disable */\n// @ts-nocheck\n// @ts-ignore\n\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource; // @ts-ignore\n\n\nvar addSourceDecorator = require(\"@storybook/source-loader/preview\").addSource; // @ts-ignore\n\n\nvar __SOURCE_PREFIX__ = \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/organisms/RichTextEditor\"; // @ts-ignore\n\nvar __STORY__ = \"import React from 'react'\\n\\nimport { path } from '..'\\nimport RichTextEditor from '.'\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\nimport { EditorState, convertToRaw } from 'draft-js'\\nimport { insertMention, convertHTMLToDraftState } from './apis'\\nimport draftToHtml from 'draftjs-to-html'\\nimport Box from '../../atoms/Box'\\nimport Button from '../../atoms/Button'\\nimport { boolean } from '@storybook/addon-knobs'\\n\\ninterface IMainComponentProps {\\n  showHTMLOutput?: boolean\\n  showJSONOutput?: boolean\\n  insertMentionsProgrammatically?: boolean\\n  initializeFromHTML?: boolean\\n}\\n\\nexport default {\\n  title: `${path}/RichTextEditor`,\\n  component: RichTextEditor\\n}\\n\\n/** Mentions structure from API */\\nconst mentionSuggestionsFromAPI = [\\n  { text: 'Delivery Associate Name', value: 'dmmName', url: '#' },\\n  { text: 'Alert Date', value: 'time', url: '#' },\\n  { text: 'Account Name', value: 'accountname', url: '#' },\\n  { text: 'Account Code', value: 'accountCode', url: '#' },\\n  { text: 'Collected Value', value: 'collectedValue', url: '#' },\\n  { text: 'Package Value', value: 'actualvalue', url: '#' },\\n  { text: 'Currency', value: 'currency', url: '#' },\\n  { text: 'AWB Number', value: 'awbnumber', url: '#' }\\n]\\n\\n/** Mentions Text to Value map */\\nconst mentionSuggesstionsValueMap: Record<string, string> = {}\\n\\n/** Text & Value should have same content when sent to React-Draft */\\nconst mentionSuggesstionsProp = mentionSuggestionsFromAPI.map((m) => {\\n  mentionSuggesstionsValueMap[m.text] = m.value\\n  return { text: m.text, value: m.text, url: m.url }\\n})\\n\\nconst inputHTML =\\n  '<p style=\\\"text-align:left;\\\"><span style=\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\">Dear recipient,</span></p> <p><span style=\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\">Order </span><awbnumber><span style=\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\"> is arriving, should reach your destination at </span><time><span style=\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\">. </span></p>'\\n\\nconst MainCompoonent = ({\\n  initializeFromHTML,\\n  showHTMLOutput,\\n  showJSONOutput,\\n  insertMentionsProgrammatically\\n}: IMainComponentProps) => {\\n  /** Initialize with empty state */\\n  const [editorState, setEditorState] = React.useState(\\n    EditorState.createEmpty()\\n  )\\n\\n  const JSONOutput = React.useMemo(\\n    () => JSON.stringify(convertToRaw(editorState.getCurrentContent())),\\n    [editorState]\\n  )\\n\\n  const HTMLOutput = React.useMemo(\\n    () =>\\n      draftToHtml(\\n        convertToRaw(editorState.getCurrentContent()),\\n        undefined,\\n        false,\\n        (entity, _text) =>\\n          `<${mentionSuggesstionsValueMap[entity?.data?.value]}>`\\n      ),\\n    [editorState]\\n  )\\n\\n  /** Programmatically insert Mentions - Either at last cursor or at End */\\n  const handleClick = () => {\\n    setEditorState(insertMention(editorState, mentionSuggesstionsProp[0], true))\\n  }\\n\\n  /** Initializing the editor state from HTML */\\n  React.useEffect(() => {\\n    initializeFromHTML &&\\n      setEditorState(\\n        convertHTMLToDraftState(inputHTML || '', mentionSuggestionsFromAPI)\\n      )\\n  }, [])\\n\\n  return (\\n    <>\\n      {insertMentionsProgrammatically && (\\n        <Button onClick={handleClick}>Insert Mention</Button>\\n      )}\\n      <br />\\n      <br />\\n      <RichTextEditor\\n        label='Email Body'\\n        id='emailBody'\\n        className='emailBody'\\n        isStripPastedStyles={true}\\n        // defaultEditorState={EditorState.createEmpty()}\\n        editorState={editorState}\\n        mention={{\\n          separator: ' ',\\n          trigger: '@',\\n          suggestions: mentionSuggesstionsProp\\n        }}\\n        onEditorStateChange={setEditorState}\\n        placeholder='Enter Email Body'\\n        hideToolbar={boolean('hideToolbar', false)}\\n      />\\n      {/* {editorState.getCurrentContent().getPlainText().length} */}\\n      {showJSONOutput && (\\n        <>\\n          <br />\\n          <br />\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\n            <code>{JSONOutput}</code>\\n          </Box>\\n        </>\\n      )}\\n      {showHTMLOutput && (\\n        <>\\n          <br />\\n          <br />\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\n            <code>{HTMLOutput}</code>\\n          </Box>\\n        </>\\n      )}\\n    </>\\n  )\\n}\\n\\nexport const Default = () => {\\n  return (\\n    <ThemeWrapper>\\n      <MainCompoonent\\n        showHTMLOutput={boolean('showHTMLOutput', false)}\\n        showJSONOutput={boolean('showJSONOutput', false)}\\n        insertMentionsProgrammatically={boolean(\\n          'insertMentionsProgrammatically',\\n          false\\n        )}\\n        initializeFromHTML={boolean('initializeFromHTML', false)}\\n      />\\n    </ThemeWrapper>\\n  )\\n}\\n\"; // @ts-ignore\n\nvar __ADDS_MAP__ = {}; // @ts-ignore\n\nvar __MAIN_FILE_LOCATION__ = \"/RichTextEditor.stories.tsx\"; // @ts-ignore\n\nvar __MODULE_DEPENDENCIES__ = []; // @ts-ignore\n\nvar __LOCAL_DEPENDENCIES__ = {}; // @ts-ignore\n\nvar __IDS_TO_FRAMEWORKS__ = {};\nimport React from 'react';\nimport { path } from '..';\nimport RichTextEditor from '.';\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper';\nimport { EditorState, convertToRaw } from 'draft-js';\nimport { insertMention, convertHTMLToDraftState } from './apis';\nimport draftToHtml from 'draftjs-to-html';\nimport Box from '../../atoms/Box';\nimport Button from '../../atoms/Button';\nimport { boolean as _boolean } from '@storybook/addon-knobs';\nexport default {\n  parameters: (_parameters = {\n    \"storySource\": {\n      \"source\": \"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/organisms/RichTextEditor\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"\\\\n\\\\n// @ts-nocheck\\\\n// @ts-ignore\\\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\\\n// @ts-ignore\\\\nvar addSourceDecorator = require(\\\\\\\"@storybook/source-loader/preview\\\\\\\").addSource;\\\\n// @ts-ignore\\\\nvar __SOURCE_PREFIX__ = \\\\\\\"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/organisms/RichTextEditor\\\\\\\";\\\\n// @ts-ignore\\\\nvar __STORY__ = \\\\\\\"import React from 'react'\\\\\\\\n\\\\\\\\nimport { path } from '..'\\\\\\\\nimport RichTextEditor from '.'\\\\\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\\\\\nimport { EditorState, convertToRaw } from 'draft-js'\\\\\\\\nimport { insertMention, convertHTMLToDraftState } from './apis'\\\\\\\\nimport draftToHtml from 'draftjs-to-html'\\\\\\\\nimport Box from '../../atoms/Box'\\\\\\\\nimport Button from '../../atoms/Button'\\\\\\\\nimport { boolean } from '@storybook/addon-knobs'\\\\\\\\n\\\\\\\\ninterface IMainComponentProps {\\\\\\\\n  showHTMLOutput?: boolean\\\\\\\\n  showJSONOutput?: boolean\\\\\\\\n  insertMentionsProgrammatically?: boolean\\\\\\\\n  initializeFromHTML?: boolean\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/RichTextEditor`,\\\\\\\\n  component: RichTextEditor\\\\\\\\n}\\\\\\\\n\\\\\\\\n/** Mentions structure from API */\\\\\\\\nconst mentionSuggestionsFromAPI = [\\\\\\\\n  { text: 'Delivery Associate Name', value: 'dmmName', url: '#' },\\\\\\\\n  { text: 'Alert Date', value: 'time', url: '#' },\\\\\\\\n  { text: 'Account Name', value: 'accountname', url: '#' },\\\\\\\\n  { text: 'Account Code', value: 'accountCode', url: '#' },\\\\\\\\n  { text: 'Collected Value', value: 'collectedValue', url: '#' },\\\\\\\\n  { text: 'Package Value', value: 'actualvalue', url: '#' },\\\\\\\\n  { text: 'Currency', value: 'currency', url: '#' },\\\\\\\\n  { text: 'AWB Number', value: 'awbnumber', url: '#' }\\\\\\\\n]\\\\\\\\n\\\\\\\\n/** Mentions Text to Value map */\\\\\\\\nconst mentionSuggesstionsValueMap: Record<string, string> = {}\\\\\\\\n\\\\\\\\n/** Text & Value should have same content when sent to React-Draft */\\\\\\\\nconst mentionSuggesstionsProp = mentionSuggestionsFromAPI.map((m) => {\\\\\\\\n  mentionSuggesstionsValueMap[m.text] = m.value\\\\\\\\n  return { text: m.text, value: m.text, url: m.url }\\\\\\\\n})\\\\\\\\n\\\\\\\\nconst inputHTML =\\\\\\\\n  '<p style=\\\\\\\\\\\\\\\"text-align:left;\\\\\\\\\\\\\\\"><span style=\\\\\\\\\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\\\\\\\\\">Dear recipient,</span></p> <p><span style=\\\\\\\\\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\\\\\\\\\">Order </span><awbnumber><span style=\\\\\\\\\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\\\\\\\\\"> is arriving, should reach your destination at </span><time><span style=\\\\\\\\\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\\\\\\\\\">. </span></p>'\\\\\\\\n\\\\\\\\nconst MainCompoonent = ({\\\\\\\\n  initializeFromHTML,\\\\\\\\n  showHTMLOutput,\\\\\\\\n  showJSONOutput,\\\\\\\\n  insertMentionsProgrammatically\\\\\\\\n}: IMainComponentProps) => {\\\\\\\\n  /** Initialize with empty state */\\\\\\\\n  const [editorState, setEditorState] = React.useState(\\\\\\\\n    EditorState.createEmpty()\\\\\\\\n  )\\\\\\\\n\\\\\\\\n  const JSONOutput = React.useMemo(\\\\\\\\n    () => JSON.stringify(convertToRaw(editorState.getCurrentContent())),\\\\\\\\n    [editorState]\\\\\\\\n  )\\\\\\\\n\\\\\\\\n  const HTMLOutput = React.useMemo(\\\\\\\\n    () =>\\\\\\\\n      draftToHtml(\\\\\\\\n        convertToRaw(editorState.getCurrentContent()),\\\\\\\\n        undefined,\\\\\\\\n        false,\\\\\\\\n        (entity, _text) =>\\\\\\\\n          `<${mentionSuggesstionsValueMap[entity?.data?.value]}>`\\\\\\\\n      ),\\\\\\\\n    [editorState]\\\\\\\\n  )\\\\\\\\n\\\\\\\\n  /** Programmatically insert Mentions - Either at last cursor or at End */\\\\\\\\n  const handleClick = () => {\\\\\\\\n    setEditorState(insertMention(editorState, mentionSuggesstionsProp[0], true))\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  /** Initializing the editor state from HTML */\\\\\\\\n  React.useEffect(() => {\\\\\\\\n    initializeFromHTML &&\\\\\\\\n      setEditorState(\\\\\\\\n        convertHTMLToDraftState(inputHTML || '', mentionSuggestionsFromAPI)\\\\\\\\n      )\\\\\\\\n  }, [])\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <>\\\\\\\\n      {insertMentionsProgrammatically && (\\\\\\\\n        <Button onClick={handleClick}>Insert Mention</Button>\\\\\\\\n      )}\\\\\\\\n      <br />\\\\\\\\n      <br />\\\\\\\\n      <RichTextEditor\\\\\\\\n        label='Email Body'\\\\\\\\n        id='emailBody'\\\\\\\\n        className='emailBody'\\\\\\\\n        isStripPastedStyles={true}\\\\\\\\n        // defaultEditorState={EditorState.createEmpty()}\\\\\\\\n        editorState={editorState}\\\\\\\\n        mention={{\\\\\\\\n          separator: ' ',\\\\\\\\n          trigger: '@',\\\\\\\\n          suggestions: mentionSuggesstionsProp\\\\\\\\n        }}\\\\\\\\n        onEditorStateChange={setEditorState}\\\\\\\\n        placeholder='Enter Email Body'\\\\\\\\n        hideToolbar={boolean('hideToolbar', false)}\\\\\\\\n      />\\\\\\\\n      {/* {editorState.getCurrentContent().getPlainText().length} */}\\\\\\\\n      {showJSONOutput && (\\\\\\\\n        <>\\\\\\\\n          <br />\\\\\\\\n          <br />\\\\\\\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\\\\\\\n            <code>{JSONOutput}</code>\\\\\\\\n          </Box>\\\\\\\\n        </>\\\\\\\\n      )}\\\\\\\\n      {showHTMLOutput && (\\\\\\\\n        <>\\\\\\\\n          <br />\\\\\\\\n          <br />\\\\\\\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\\\\\\\n            <code>{HTMLOutput}</code>\\\\\\\\n          </Box>\\\\\\\\n        </>\\\\\\\\n      )}\\\\\\\\n    </>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const Default = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <MainCompoonent\\\\\\\\n        showHTMLOutput={boolean('showHTMLOutput', false)}\\\\\\\\n        showJSONOutput={boolean('showJSONOutput', false)}\\\\\\\\n        insertMentionsProgrammatically={boolean(\\\\\\\\n          'insertMentionsProgrammatically',\\\\\\\\n          false\\\\\\\\n        )}\\\\\\\\n        initializeFromHTML={boolean('initializeFromHTML', false)}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\";\\\\n// @ts-ignore\\\\nvar __ADDS_MAP__ = {};\\\\n// @ts-ignore\\\\nvar __MAIN_FILE_LOCATION__ = \\\\\\\"/RichTextEditor.stories.tsx\\\\\\\";\\\\n// @ts-ignore\\\\nvar __MODULE_DEPENDENCIES__ = [];\\\\n// @ts-ignore\\\\nvar __LOCAL_DEPENDENCIES__ = {};\\\\n// @ts-ignore\\\\nvar __IDS_TO_FRAMEWORKS__ = {};\\\\n        \\\\nimport React from 'react'\\\\n\\\\nimport { path } from '..'\\\\nimport RichTextEditor from '.'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport { EditorState, convertToRaw } from 'draft-js'\\\\nimport { insertMention, convertHTMLToDraftState } from './apis'\\\\nimport draftToHtml from 'draftjs-to-html'\\\\nimport Box from '../../atoms/Box'\\\\nimport Button from '../../atoms/Button'\\\\nimport { boolean } from '@storybook/addon-knobs'\\\\n\\\\ninterface IMainComponentProps {\\\\n  showHTMLOutput?: boolean\\\\n  showJSONOutput?: boolean\\\\n  insertMentionsProgrammatically?: boolean\\\\n  initializeFromHTML?: boolean\\\\n}\\\\n\\\\nexport default {parameters: {\\\\\\\"storySource\\\\\\\":{\\\\\\\"source\\\\\\\":\\\\\\\"import React from 'react'\\\\\\\\n\\\\\\\\nimport { path } from '..'\\\\\\\\nimport RichTextEditor from '.'\\\\\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\\\\\nimport { EditorState, convertToRaw } from 'draft-js'\\\\\\\\nimport { insertMention, convertHTMLToDraftState } from './apis'\\\\\\\\nimport draftToHtml from 'draftjs-to-html'\\\\\\\\nimport Box from '../../atoms/Box'\\\\\\\\nimport Button from '../../atoms/Button'\\\\\\\\nimport { boolean } from '@storybook/addon-knobs'\\\\\\\\n\\\\\\\\ninterface IMainComponentProps {\\\\\\\\n  showHTMLOutput?: boolean\\\\\\\\n  showJSONOutput?: boolean\\\\\\\\n  insertMentionsProgrammatically?: boolean\\\\\\\\n  initializeFromHTML?: boolean\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/RichTextEditor`,\\\\\\\\n  component: RichTextEditor\\\\\\\\n}\\\\\\\\n\\\\\\\\n/** Mentions structure from API */\\\\\\\\nconst mentionSuggestionsFromAPI = [\\\\\\\\n  { text: 'Delivery Associate Name', value: 'dmmName', url: '#' },\\\\\\\\n  { text: 'Alert Date', value: 'time', url: '#' },\\\\\\\\n  { text: 'Account Name', value: 'accountname', url: '#' },\\\\\\\\n  { text: 'Account Code', value: 'accountCode', url: '#' },\\\\\\\\n  { text: 'Collected Value', value: 'collectedValue', url: '#' },\\\\\\\\n  { text: 'Package Value', value: 'actualvalue', url: '#' },\\\\\\\\n  { text: 'Currency', value: 'currency', url: '#' },\\\\\\\\n  { text: 'AWB Number', value: 'awbnumber', url: '#' }\\\\\\\\n]\\\\\\\\n\\\\\\\\n/** Mentions Text to Value map */\\\\\\\\nconst mentionSuggesstionsValueMap: Record<string, string> = {}\\\\\\\\n\\\\\\\\n/** Text & Value should have same content when sent to React-Draft */\\\\\\\\nconst mentionSuggesstionsProp = mentionSuggestionsFromAPI.map((m) => {\\\\\\\\n  mentionSuggesstionsValueMap[m.text] = m.value\\\\\\\\n  return { text: m.text, value: m.text, url: m.url }\\\\\\\\n})\\\\\\\\n\\\\\\\\nconst inputHTML =\\\\\\\\n  '<p style=\\\\\\\\\\\\\\\"text-align:left;\\\\\\\\\\\\\\\"><span style=\\\\\\\\\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\\\\\\\\\">Dear recipient,</span></p> <p><span style=\\\\\\\\\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\\\\\\\\\">Order </span><awbnumber><span style=\\\\\\\\\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\\\\\\\\\"> is arriving, should reach your destination at </span><time><span style=\\\\\\\\\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\\\\\\\\\">. </span></p>'\\\\\\\\n\\\\\\\\nconst MainCompoonent = ({\\\\\\\\n  initializeFromHTML,\\\\\\\\n  showHTMLOutput,\\\\\\\\n  showJSONOutput,\\\\\\\\n  insertMentionsProgrammatically\\\\\\\\n}: IMainComponentProps) => {\\\\\\\\n  /** Initialize with empty state */\\\\\\\\n  const [editorState, setEditorState] = React.useState(\\\\\\\\n    EditorState.createEmpty()\\\\\\\\n  )\\\\\\\\n\\\\\\\\n  const JSONOutput = React.useMemo(\\\\\\\\n    () => JSON.stringify(convertToRaw(editorState.getCurrentContent())),\\\\\\\\n    [editorState]\\\\\\\\n  )\\\\\\\\n\\\\\\\\n  const HTMLOutput = React.useMemo(\\\\\\\\n    () =>\\\\\\\\n      draftToHtml(\\\\\\\\n        convertToRaw(editorState.getCurrentContent()),\\\\\\\\n        undefined,\\\\\\\\n        false,\\\\\\\\n        (entity, _text) =>\\\\\\\\n          `<${mentionSuggesstionsValueMap[entity?.data?.value]}>`\\\\\\\\n      ),\\\\\\\\n    [editorState]\\\\\\\\n  )\\\\\\\\n\\\\\\\\n  /** Programmatically insert Mentions - Either at last cursor or at End */\\\\\\\\n  const handleClick = () => {\\\\\\\\n    setEditorState(insertMention(editorState, mentionSuggesstionsProp[0], true))\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  /** Initializing the editor state from HTML */\\\\\\\\n  React.useEffect(() => {\\\\\\\\n    initializeFromHTML &&\\\\\\\\n      setEditorState(\\\\\\\\n        convertHTMLToDraftState(inputHTML || '', mentionSuggestionsFromAPI)\\\\\\\\n      )\\\\\\\\n  }, [])\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <>\\\\\\\\n      {insertMentionsProgrammatically && (\\\\\\\\n        <Button onClick={handleClick}>Insert Mention</Button>\\\\\\\\n      )}\\\\\\\\n      <br />\\\\\\\\n      <br />\\\\\\\\n      <RichTextEditor\\\\\\\\n        label='Email Body'\\\\\\\\n        id='emailBody'\\\\\\\\n        className='emailBody'\\\\\\\\n        isStripPastedStyles={true}\\\\\\\\n        // defaultEditorState={EditorState.createEmpty()}\\\\\\\\n        editorState={editorState}\\\\\\\\n        mention={{\\\\\\\\n          separator: ' ',\\\\\\\\n          trigger: '@',\\\\\\\\n          suggestions: mentionSuggesstionsProp\\\\\\\\n        }}\\\\\\\\n        onEditorStateChange={setEditorState}\\\\\\\\n        placeholder='Enter Email Body'\\\\\\\\n        hideToolbar={boolean('hideToolbar', false)}\\\\\\\\n      />\\\\\\\\n      {/* {editorState.getCurrentContent().getPlainText().length} */}\\\\\\\\n      {showJSONOutput && (\\\\\\\\n        <>\\\\\\\\n          <br />\\\\\\\\n          <br />\\\\\\\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\\\\\\\n            <code>{JSONOutput}</code>\\\\\\\\n          </Box>\\\\\\\\n        </>\\\\\\\\n      )}\\\\\\\\n      {showHTMLOutput && (\\\\\\\\n        <>\\\\\\\\n          <br />\\\\\\\\n          <br />\\\\\\\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\\\\\\\n            <code>{HTMLOutput}</code>\\\\\\\\n          </Box>\\\\\\\\n        </>\\\\\\\\n      )}\\\\\\\\n    </>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const Default = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <MainCompoonent\\\\\\\\n        showHTMLOutput={boolean('showHTMLOutput', false)}\\\\\\\\n        showJSONOutput={boolean('showJSONOutput', false)}\\\\\\\\n        insertMentionsProgrammatically={boolean(\\\\\\\\n          'insertMentionsProgrammatically',\\\\\\\\n          false\\\\\\\\n        )}\\\\\\\\n        initializeFromHTML={boolean('initializeFromHTML', false)}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\",\\\\\\\"locationsMap\\\\\\\":{}},},\\\\n  title: `${path}/RichTextEditor`,\\\\n  component: RichTextEditor\\\\n}\\\\n\\\\n/** Mentions structure from API */\\\\nconst mentionSuggestionsFromAPI = [\\\\n  { text: 'Delivery Associate Name', value: 'dmmName', url: '#' },\\\\n  { text: 'Alert Date', value: 'time', url: '#' },\\\\n  { text: 'Account Name', value: 'accountname', url: '#' },\\\\n  { text: 'Account Code', value: 'accountCode', url: '#' },\\\\n  { text: 'Collected Value', value: 'collectedValue', url: '#' },\\\\n  { text: 'Package Value', value: 'actualvalue', url: '#' },\\\\n  { text: 'Currency', value: 'currency', url: '#' },\\\\n  { text: 'AWB Number', value: 'awbnumber', url: '#' }\\\\n]\\\\n\\\\n/** Mentions Text to Value map */\\\\nconst mentionSuggesstionsValueMap: Record<string, string> = {}\\\\n\\\\n/** Text & Value should have same content when sent to React-Draft */\\\\nconst mentionSuggesstionsProp = mentionSuggestionsFromAPI.map((m) => {\\\\n  mentionSuggesstionsValueMap[m.text] = m.value\\\\n  return { text: m.text, value: m.text, url: m.url }\\\\n})\\\\n\\\\nconst inputHTML =\\\\n  '<p style=\\\\\\\"text-align:left;\\\\\\\"><span style=\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\">Dear recipient,</span></p> <p><span style=\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\">Order </span><awbnumber><span style=\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\"> is arriving, should reach your destination at </span><time><span style=\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\">. </span></p>'\\\\n\\\\nconst MainCompoonent = ({\\\\n  initializeFromHTML,\\\\n  showHTMLOutput,\\\\n  showJSONOutput,\\\\n  insertMentionsProgrammatically\\\\n}: IMainComponentProps) => {\\\\n  /** Initialize with empty state */\\\\n  const [editorState, setEditorState] = React.useState(\\\\n    EditorState.createEmpty()\\\\n  )\\\\n\\\\n  const JSONOutput = React.useMemo(\\\\n    () => JSON.stringify(convertToRaw(editorState.getCurrentContent())),\\\\n    [editorState]\\\\n  )\\\\n\\\\n  const HTMLOutput = React.useMemo(\\\\n    () =>\\\\n      draftToHtml(\\\\n        convertToRaw(editorState.getCurrentContent()),\\\\n        undefined,\\\\n        false,\\\\n        (entity, _text) =>\\\\n          `<${mentionSuggesstionsValueMap[entity?.data?.value]}>`\\\\n      ),\\\\n    [editorState]\\\\n  )\\\\n\\\\n  /** Programmatically insert Mentions - Either at last cursor or at End */\\\\n  const handleClick = () => {\\\\n    setEditorState(insertMention(editorState, mentionSuggesstionsProp[0], true))\\\\n  }\\\\n\\\\n  /** Initializing the editor state from HTML */\\\\n  React.useEffect(() => {\\\\n    initializeFromHTML &&\\\\n      setEditorState(\\\\n        convertHTMLToDraftState(inputHTML || '', mentionSuggestionsFromAPI)\\\\n      )\\\\n  }, [])\\\\n\\\\n  return (\\\\n    <>\\\\n      {insertMentionsProgrammatically && (\\\\n        <Button onClick={handleClick}>Insert Mention</Button>\\\\n      )}\\\\n      <br />\\\\n      <br />\\\\n      <RichTextEditor\\\\n        label='Email Body'\\\\n        id='emailBody'\\\\n        className='emailBody'\\\\n        isStripPastedStyles={true}\\\\n        // defaultEditorState={EditorState.createEmpty()}\\\\n        editorState={editorState}\\\\n        mention={{\\\\n          separator: ' ',\\\\n          trigger: '@',\\\\n          suggestions: mentionSuggesstionsProp\\\\n        }}\\\\n        onEditorStateChange={setEditorState}\\\\n        placeholder='Enter Email Body'\\\\n        hideToolbar={boolean('hideToolbar', false)}\\\\n      />\\\\n      {/* {editorState.getCurrentContent().getPlainText().length} */}\\\\n      {showJSONOutput && (\\\\n        <>\\\\n          <br />\\\\n          <br />\\\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\\\n            <code>{JSONOutput}</code>\\\\n          </Box>\\\\n        </>\\\\n      )}\\\\n      {showHTMLOutput && (\\\\n        <>\\\\n          <br />\\\\n          <br />\\\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\\\n            <code>{HTMLOutput}</code>\\\\n          </Box>\\\\n        </>\\\\n      )}\\\\n    </>\\\\n  )\\\\n}\\\\n\\\\nexport const Default = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <MainCompoonent\\\\n        showHTMLOutput={boolean('showHTMLOutput', false)}\\\\n        showJSONOutput={boolean('showJSONOutput', false)}\\\\n        insertMentionsProgrammatically={boolean(\\\\n          'insertMentionsProgrammatically',\\\\n          false\\\\n        )}\\\\n        initializeFromHTML={boolean('initializeFromHTML', false)}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/RichTextEditor.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\n\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/organisms/RichTextEditor\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"import React from 'react'\\\\n\\\\nimport { path } from '..'\\\\nimport RichTextEditor from '.'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport { EditorState, convertToRaw } from 'draft-js'\\\\nimport { insertMention, convertHTMLToDraftState } from './apis'\\\\nimport draftToHtml from 'draftjs-to-html'\\\\nimport Box from '../../atoms/Box'\\\\nimport Button from '../../atoms/Button'\\\\nimport { boolean } from '@storybook/addon-knobs'\\\\n\\\\ninterface IMainComponentProps {\\\\n  showHTMLOutput?: boolean\\\\n  showJSONOutput?: boolean\\\\n  insertMentionsProgrammatically?: boolean\\\\n  initializeFromHTML?: boolean\\\\n}\\\\n\\\\nexport default {\\\\n  title: `${path}/RichTextEditor`,\\\\n  component: RichTextEditor\\\\n}\\\\n\\\\n/** Mentions structure from API */\\\\nconst mentionSuggestionsFromAPI = [\\\\n  { text: 'Delivery Associate Name', value: 'dmmName', url: '#' },\\\\n  { text: 'Alert Date', value: 'time', url: '#' },\\\\n  { text: 'Account Name', value: 'accountname', url: '#' },\\\\n  { text: 'Account Code', value: 'accountCode', url: '#' },\\\\n  { text: 'Collected Value', value: 'collectedValue', url: '#' },\\\\n  { text: 'Package Value', value: 'actualvalue', url: '#' },\\\\n  { text: 'Currency', value: 'currency', url: '#' },\\\\n  { text: 'AWB Number', value: 'awbnumber', url: '#' }\\\\n]\\\\n\\\\n/** Mentions Text to Value map */\\\\nconst mentionSuggesstionsValueMap: Record<string, string> = {}\\\\n\\\\n/** Text & Value should have same content when sent to React-Draft */\\\\nconst mentionSuggesstionsProp = mentionSuggestionsFromAPI.map((m) => {\\\\n  mentionSuggesstionsValueMap[m.text] = m.value\\\\n  return { text: m.text, value: m.text, url: m.url }\\\\n})\\\\n\\\\nconst inputHTML =\\\\n  '<p style=\\\\\\\"text-align:left;\\\\\\\"><span style=\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\">Dear recipient,</span></p> <p><span style=\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\">Order </span><awbnumber><span style=\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\"> is arriving, should reach your destination at </span><time><span style=\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\">. </span></p>'\\\\n\\\\nconst MainCompoonent = ({\\\\n  initializeFromHTML,\\\\n  showHTMLOutput,\\\\n  showJSONOutput,\\\\n  insertMentionsProgrammatically\\\\n}: IMainComponentProps) => {\\\\n  /** Initialize with empty state */\\\\n  const [editorState, setEditorState] = React.useState(\\\\n    EditorState.createEmpty()\\\\n  )\\\\n\\\\n  const JSONOutput = React.useMemo(\\\\n    () => JSON.stringify(convertToRaw(editorState.getCurrentContent())),\\\\n    [editorState]\\\\n  )\\\\n\\\\n  const HTMLOutput = React.useMemo(\\\\n    () =>\\\\n      draftToHtml(\\\\n        convertToRaw(editorState.getCurrentContent()),\\\\n        undefined,\\\\n        false,\\\\n        (entity, _text) =>\\\\n          `<${mentionSuggesstionsValueMap[entity?.data?.value]}>`\\\\n      ),\\\\n    [editorState]\\\\n  )\\\\n\\\\n  /** Programmatically insert Mentions - Either at last cursor or at End */\\\\n  const handleClick = () => {\\\\n    setEditorState(insertMention(editorState, mentionSuggesstionsProp[0], true))\\\\n  }\\\\n\\\\n  /** Initializing the editor state from HTML */\\\\n  React.useEffect(() => {\\\\n    initializeFromHTML &&\\\\n      setEditorState(\\\\n        convertHTMLToDraftState(inputHTML || '', mentionSuggestionsFromAPI)\\\\n      )\\\\n  }, [])\\\\n\\\\n  return (\\\\n    <>\\\\n      {insertMentionsProgrammatically && (\\\\n        <Button onClick={handleClick}>Insert Mention</Button>\\\\n      )}\\\\n      <br />\\\\n      <br />\\\\n      <RichTextEditor\\\\n        label='Email Body'\\\\n        id='emailBody'\\\\n        className='emailBody'\\\\n        isStripPastedStyles={true}\\\\n        // defaultEditorState={EditorState.createEmpty()}\\\\n        editorState={editorState}\\\\n        mention={{\\\\n          separator: ' ',\\\\n          trigger: '@',\\\\n          suggestions: mentionSuggesstionsProp\\\\n        }}\\\\n        onEditorStateChange={setEditorState}\\\\n        placeholder='Enter Email Body'\\\\n        hideToolbar={boolean('hideToolbar', false)}\\\\n      />\\\\n      {/* {editorState.getCurrentContent().getPlainText().length} */}\\\\n      {showJSONOutput && (\\\\n        <>\\\\n          <br />\\\\n          <br />\\\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\\\n            <code>{JSONOutput}</code>\\\\n          </Box>\\\\n        </>\\\\n      )}\\\\n      {showHTMLOutput && (\\\\n        <>\\\\n          <br />\\\\n          <br />\\\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\\\n            <code>{HTMLOutput}</code>\\\\n          </Box>\\\\n        </>\\\\n      )}\\\\n    </>\\\\n  )\\\\n}\\\\n\\\\nexport const Default = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <MainCompoonent\\\\n        showHTMLOutput={boolean('showHTMLOutput', false)}\\\\n        showJSONOutput={boolean('showJSONOutput', false)}\\\\n        insertMentionsProgrammatically={boolean(\\\\n          'insertMentionsProgrammatically',\\\\n          false\\\\n        )}\\\\n        initializeFromHTML={boolean('initializeFromHTML', false)}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/RichTextEditor.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\nimport React from 'react'\\n\\nimport { path } from '..'\\nimport RichTextEditor from '.'\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\nimport { EditorState, convertToRaw } from 'draft-js'\\nimport { insertMention, convertHTMLToDraftState } from './apis'\\nimport draftToHtml from 'draftjs-to-html'\\nimport Box from '../../atoms/Box'\\nimport Button from '../../atoms/Button'\\nimport { boolean } from '@storybook/addon-knobs'\\n\\ninterface IMainComponentProps {\\n  showHTMLOutput?: boolean\\n  showJSONOutput?: boolean\\n  insertMentionsProgrammatically?: boolean\\n  initializeFromHTML?: boolean\\n}\\n\\nexport default {parameters: {\\\"storySource\\\":{\\\"source\\\":\\\"\\\\n\\\\n// @ts-nocheck\\\\n// @ts-ignore\\\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\\\n// @ts-ignore\\\\nvar addSourceDecorator = require(\\\\\\\"@storybook/source-loader/preview\\\\\\\").addSource;\\\\n// @ts-ignore\\\\nvar __SOURCE_PREFIX__ = \\\\\\\"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/organisms/RichTextEditor\\\\\\\";\\\\n// @ts-ignore\\\\nvar __STORY__ = \\\\\\\"import React from 'react'\\\\\\\\n\\\\\\\\nimport { path } from '..'\\\\\\\\nimport RichTextEditor from '.'\\\\\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\\\\\nimport { EditorState, convertToRaw } from 'draft-js'\\\\\\\\nimport { insertMention, convertHTMLToDraftState } from './apis'\\\\\\\\nimport draftToHtml from 'draftjs-to-html'\\\\\\\\nimport Box from '../../atoms/Box'\\\\\\\\nimport Button from '../../atoms/Button'\\\\\\\\nimport { boolean } from '@storybook/addon-knobs'\\\\\\\\n\\\\\\\\ninterface IMainComponentProps {\\\\\\\\n  showHTMLOutput?: boolean\\\\\\\\n  showJSONOutput?: boolean\\\\\\\\n  insertMentionsProgrammatically?: boolean\\\\\\\\n  initializeFromHTML?: boolean\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/RichTextEditor`,\\\\\\\\n  component: RichTextEditor\\\\\\\\n}\\\\\\\\n\\\\\\\\n/** Mentions structure from API */\\\\\\\\nconst mentionSuggestionsFromAPI = [\\\\\\\\n  { text: 'Delivery Associate Name', value: 'dmmName', url: '#' },\\\\\\\\n  { text: 'Alert Date', value: 'time', url: '#' },\\\\\\\\n  { text: 'Account Name', value: 'accountname', url: '#' },\\\\\\\\n  { text: 'Account Code', value: 'accountCode', url: '#' },\\\\\\\\n  { text: 'Collected Value', value: 'collectedValue', url: '#' },\\\\\\\\n  { text: 'Package Value', value: 'actualvalue', url: '#' },\\\\\\\\n  { text: 'Currency', value: 'currency', url: '#' },\\\\\\\\n  { text: 'AWB Number', value: 'awbnumber', url: '#' }\\\\\\\\n]\\\\\\\\n\\\\\\\\n/** Mentions Text to Value map */\\\\\\\\nconst mentionSuggesstionsValueMap: Record<string, string> = {}\\\\\\\\n\\\\\\\\n/** Text & Value should have same content when sent to React-Draft */\\\\\\\\nconst mentionSuggesstionsProp = mentionSuggestionsFromAPI.map((m) => {\\\\\\\\n  mentionSuggesstionsValueMap[m.text] = m.value\\\\\\\\n  return { text: m.text, value: m.text, url: m.url }\\\\\\\\n})\\\\\\\\n\\\\\\\\nconst inputHTML =\\\\\\\\n  '<p style=\\\\\\\\\\\\\\\"text-align:left;\\\\\\\\\\\\\\\"><span style=\\\\\\\\\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\\\\\\\\\">Dear recipient,</span></p> <p><span style=\\\\\\\\\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\\\\\\\\\">Order </span><awbnumber><span style=\\\\\\\\\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\\\\\\\\\"> is arriving, should reach your destination at </span><time><span style=\\\\\\\\\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\\\\\\\\\">. </span></p>'\\\\\\\\n\\\\\\\\nconst MainCompoonent = ({\\\\\\\\n  initializeFromHTML,\\\\\\\\n  showHTMLOutput,\\\\\\\\n  showJSONOutput,\\\\\\\\n  insertMentionsProgrammatically\\\\\\\\n}: IMainComponentProps) => {\\\\\\\\n  /** Initialize with empty state */\\\\\\\\n  const [editorState, setEditorState] = React.useState(\\\\\\\\n    EditorState.createEmpty()\\\\\\\\n  )\\\\\\\\n\\\\\\\\n  const JSONOutput = React.useMemo(\\\\\\\\n    () => JSON.stringify(convertToRaw(editorState.getCurrentContent())),\\\\\\\\n    [editorState]\\\\\\\\n  )\\\\\\\\n\\\\\\\\n  const HTMLOutput = React.useMemo(\\\\\\\\n    () =>\\\\\\\\n      draftToHtml(\\\\\\\\n        convertToRaw(editorState.getCurrentContent()),\\\\\\\\n        undefined,\\\\\\\\n        false,\\\\\\\\n        (entity, _text) =>\\\\\\\\n          `<${mentionSuggesstionsValueMap[entity?.data?.value]}>`\\\\\\\\n      ),\\\\\\\\n    [editorState]\\\\\\\\n  )\\\\\\\\n\\\\\\\\n  /** Programmatically insert Mentions - Either at last cursor or at End */\\\\\\\\n  const handleClick = () => {\\\\\\\\n    setEditorState(insertMention(editorState, mentionSuggesstionsProp[0], true))\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  /** Initializing the editor state from HTML */\\\\\\\\n  React.useEffect(() => {\\\\\\\\n    initializeFromHTML &&\\\\\\\\n      setEditorState(\\\\\\\\n        convertHTMLToDraftState(inputHTML || '', mentionSuggestionsFromAPI)\\\\\\\\n      )\\\\\\\\n  }, [])\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <>\\\\\\\\n      {insertMentionsProgrammatically && (\\\\\\\\n        <Button onClick={handleClick}>Insert Mention</Button>\\\\\\\\n      )}\\\\\\\\n      <br />\\\\\\\\n      <br />\\\\\\\\n      <RichTextEditor\\\\\\\\n        label='Email Body'\\\\\\\\n        id='emailBody'\\\\\\\\n        className='emailBody'\\\\\\\\n        isStripPastedStyles={true}\\\\\\\\n        // defaultEditorState={EditorState.createEmpty()}\\\\\\\\n        editorState={editorState}\\\\\\\\n        mention={{\\\\\\\\n          separator: ' ',\\\\\\\\n          trigger: '@',\\\\\\\\n          suggestions: mentionSuggesstionsProp\\\\\\\\n        }}\\\\\\\\n        onEditorStateChange={setEditorState}\\\\\\\\n        placeholder='Enter Email Body'\\\\\\\\n        hideToolbar={boolean('hideToolbar', false)}\\\\\\\\n      />\\\\\\\\n      {/* {editorState.getCurrentContent().getPlainText().length} */}\\\\\\\\n      {showJSONOutput && (\\\\\\\\n        <>\\\\\\\\n          <br />\\\\\\\\n          <br />\\\\\\\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\\\\\\\n            <code>{JSONOutput}</code>\\\\\\\\n          </Box>\\\\\\\\n        </>\\\\\\\\n      )}\\\\\\\\n      {showHTMLOutput && (\\\\\\\\n        <>\\\\\\\\n          <br />\\\\\\\\n          <br />\\\\\\\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\\\\\\\n            <code>{HTMLOutput}</code>\\\\\\\\n          </Box>\\\\\\\\n        </>\\\\\\\\n      )}\\\\\\\\n    </>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const Default = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <MainCompoonent\\\\\\\\n        showHTMLOutput={boolean('showHTMLOutput', false)}\\\\\\\\n        showJSONOutput={boolean('showJSONOutput', false)}\\\\\\\\n        insertMentionsProgrammatically={boolean(\\\\\\\\n          'insertMentionsProgrammatically',\\\\\\\\n          false\\\\\\\\n        )}\\\\\\\\n        initializeFromHTML={boolean('initializeFromHTML', false)}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\";\\\\n// @ts-ignore\\\\nvar __ADDS_MAP__ = {};\\\\n// @ts-ignore\\\\nvar __MAIN_FILE_LOCATION__ = \\\\\\\"/RichTextEditor.stories.tsx\\\\\\\";\\\\n// @ts-ignore\\\\nvar __MODULE_DEPENDENCIES__ = [];\\\\n// @ts-ignore\\\\nvar __LOCAL_DEPENDENCIES__ = {};\\\\n// @ts-ignore\\\\nvar __IDS_TO_FRAMEWORKS__ = {};\\\\n        \\\\nimport React from 'react'\\\\n\\\\nimport { path } from '..'\\\\nimport RichTextEditor from '.'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport { EditorState, convertToRaw } from 'draft-js'\\\\nimport { insertMention, convertHTMLToDraftState } from './apis'\\\\nimport draftToHtml from 'draftjs-to-html'\\\\nimport Box from '../../atoms/Box'\\\\nimport Button from '../../atoms/Button'\\\\nimport { boolean } from '@storybook/addon-knobs'\\\\n\\\\ninterface IMainComponentProps {\\\\n  showHTMLOutput?: boolean\\\\n  showJSONOutput?: boolean\\\\n  insertMentionsProgrammatically?: boolean\\\\n  initializeFromHTML?: boolean\\\\n}\\\\n\\\\nexport default {parameters: {\\\\\\\"storySource\\\\\\\":{\\\\\\\"source\\\\\\\":\\\\\\\"import React from 'react'\\\\\\\\n\\\\\\\\nimport { path } from '..'\\\\\\\\nimport RichTextEditor from '.'\\\\\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\\\\\nimport { EditorState, convertToRaw } from 'draft-js'\\\\\\\\nimport { insertMention, convertHTMLToDraftState } from './apis'\\\\\\\\nimport draftToHtml from 'draftjs-to-html'\\\\\\\\nimport Box from '../../atoms/Box'\\\\\\\\nimport Button from '../../atoms/Button'\\\\\\\\nimport { boolean } from '@storybook/addon-knobs'\\\\\\\\n\\\\\\\\ninterface IMainComponentProps {\\\\\\\\n  showHTMLOutput?: boolean\\\\\\\\n  showJSONOutput?: boolean\\\\\\\\n  insertMentionsProgrammatically?: boolean\\\\\\\\n  initializeFromHTML?: boolean\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/RichTextEditor`,\\\\\\\\n  component: RichTextEditor\\\\\\\\n}\\\\\\\\n\\\\\\\\n/** Mentions structure from API */\\\\\\\\nconst mentionSuggestionsFromAPI = [\\\\\\\\n  { text: 'Delivery Associate Name', value: 'dmmName', url: '#' },\\\\\\\\n  { text: 'Alert Date', value: 'time', url: '#' },\\\\\\\\n  { text: 'Account Name', value: 'accountname', url: '#' },\\\\\\\\n  { text: 'Account Code', value: 'accountCode', url: '#' },\\\\\\\\n  { text: 'Collected Value', value: 'collectedValue', url: '#' },\\\\\\\\n  { text: 'Package Value', value: 'actualvalue', url: '#' },\\\\\\\\n  { text: 'Currency', value: 'currency', url: '#' },\\\\\\\\n  { text: 'AWB Number', value: 'awbnumber', url: '#' }\\\\\\\\n]\\\\\\\\n\\\\\\\\n/** Mentions Text to Value map */\\\\\\\\nconst mentionSuggesstionsValueMap: Record<string, string> = {}\\\\\\\\n\\\\\\\\n/** Text & Value should have same content when sent to React-Draft */\\\\\\\\nconst mentionSuggesstionsProp = mentionSuggestionsFromAPI.map((m) => {\\\\\\\\n  mentionSuggesstionsValueMap[m.text] = m.value\\\\\\\\n  return { text: m.text, value: m.text, url: m.url }\\\\\\\\n})\\\\\\\\n\\\\\\\\nconst inputHTML =\\\\\\\\n  '<p style=\\\\\\\\\\\\\\\"text-align:left;\\\\\\\\\\\\\\\"><span style=\\\\\\\\\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\\\\\\\\\">Dear recipient,</span></p> <p><span style=\\\\\\\\\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\\\\\\\\\">Order </span><awbnumber><span style=\\\\\\\\\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\\\\\\\\\"> is arriving, should reach your destination at </span><time><span style=\\\\\\\\\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\\\\\\\\\">. </span></p>'\\\\\\\\n\\\\\\\\nconst MainCompoonent = ({\\\\\\\\n  initializeFromHTML,\\\\\\\\n  showHTMLOutput,\\\\\\\\n  showJSONOutput,\\\\\\\\n  insertMentionsProgrammatically\\\\\\\\n}: IMainComponentProps) => {\\\\\\\\n  /** Initialize with empty state */\\\\\\\\n  const [editorState, setEditorState] = React.useState(\\\\\\\\n    EditorState.createEmpty()\\\\\\\\n  )\\\\\\\\n\\\\\\\\n  const JSONOutput = React.useMemo(\\\\\\\\n    () => JSON.stringify(convertToRaw(editorState.getCurrentContent())),\\\\\\\\n    [editorState]\\\\\\\\n  )\\\\\\\\n\\\\\\\\n  const HTMLOutput = React.useMemo(\\\\\\\\n    () =>\\\\\\\\n      draftToHtml(\\\\\\\\n        convertToRaw(editorState.getCurrentContent()),\\\\\\\\n        undefined,\\\\\\\\n        false,\\\\\\\\n        (entity, _text) =>\\\\\\\\n          `<${mentionSuggesstionsValueMap[entity?.data?.value]}>`\\\\\\\\n      ),\\\\\\\\n    [editorState]\\\\\\\\n  )\\\\\\\\n\\\\\\\\n  /** Programmatically insert Mentions - Either at last cursor or at End */\\\\\\\\n  const handleClick = () => {\\\\\\\\n    setEditorState(insertMention(editorState, mentionSuggesstionsProp[0], true))\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  /** Initializing the editor state from HTML */\\\\\\\\n  React.useEffect(() => {\\\\\\\\n    initializeFromHTML &&\\\\\\\\n      setEditorState(\\\\\\\\n        convertHTMLToDraftState(inputHTML || '', mentionSuggestionsFromAPI)\\\\\\\\n      )\\\\\\\\n  }, [])\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <>\\\\\\\\n      {insertMentionsProgrammatically && (\\\\\\\\n        <Button onClick={handleClick}>Insert Mention</Button>\\\\\\\\n      )}\\\\\\\\n      <br />\\\\\\\\n      <br />\\\\\\\\n      <RichTextEditor\\\\\\\\n        label='Email Body'\\\\\\\\n        id='emailBody'\\\\\\\\n        className='emailBody'\\\\\\\\n        isStripPastedStyles={true}\\\\\\\\n        // defaultEditorState={EditorState.createEmpty()}\\\\\\\\n        editorState={editorState}\\\\\\\\n        mention={{\\\\\\\\n          separator: ' ',\\\\\\\\n          trigger: '@',\\\\\\\\n          suggestions: mentionSuggesstionsProp\\\\\\\\n        }}\\\\\\\\n        onEditorStateChange={setEditorState}\\\\\\\\n        placeholder='Enter Email Body'\\\\\\\\n        hideToolbar={boolean('hideToolbar', false)}\\\\\\\\n      />\\\\\\\\n      {/* {editorState.getCurrentContent().getPlainText().length} */}\\\\\\\\n      {showJSONOutput && (\\\\\\\\n        <>\\\\\\\\n          <br />\\\\\\\\n          <br />\\\\\\\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\\\\\\\n            <code>{JSONOutput}</code>\\\\\\\\n          </Box>\\\\\\\\n        </>\\\\\\\\n      )}\\\\\\\\n      {showHTMLOutput && (\\\\\\\\n        <>\\\\\\\\n          <br />\\\\\\\\n          <br />\\\\\\\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\\\\\\\n            <code>{HTMLOutput}</code>\\\\\\\\n          </Box>\\\\\\\\n        </>\\\\\\\\n      )}\\\\\\\\n    </>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const Default = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <MainCompoonent\\\\\\\\n        showHTMLOutput={boolean('showHTMLOutput', false)}\\\\\\\\n        showJSONOutput={boolean('showJSONOutput', false)}\\\\\\\\n        insertMentionsProgrammatically={boolean(\\\\\\\\n          'insertMentionsProgrammatically',\\\\\\\\n          false\\\\\\\\n        )}\\\\\\\\n        initializeFromHTML={boolean('initializeFromHTML', false)}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\",\\\\\\\"locationsMap\\\\\\\":{}},},\\\\n  title: `${path}/RichTextEditor`,\\\\n  component: RichTextEditor\\\\n}\\\\n\\\\n/** Mentions structure from API */\\\\nconst mentionSuggestionsFromAPI = [\\\\n  { text: 'Delivery Associate Name', value: 'dmmName', url: '#' },\\\\n  { text: 'Alert Date', value: 'time', url: '#' },\\\\n  { text: 'Account Name', value: 'accountname', url: '#' },\\\\n  { text: 'Account Code', value: 'accountCode', url: '#' },\\\\n  { text: 'Collected Value', value: 'collectedValue', url: '#' },\\\\n  { text: 'Package Value', value: 'actualvalue', url: '#' },\\\\n  { text: 'Currency', value: 'currency', url: '#' },\\\\n  { text: 'AWB Number', value: 'awbnumber', url: '#' }\\\\n]\\\\n\\\\n/** Mentions Text to Value map */\\\\nconst mentionSuggesstionsValueMap: Record<string, string> = {}\\\\n\\\\n/** Text & Value should have same content when sent to React-Draft */\\\\nconst mentionSuggesstionsProp = mentionSuggestionsFromAPI.map((m) => {\\\\n  mentionSuggesstionsValueMap[m.text] = m.value\\\\n  return { text: m.text, value: m.text, url: m.url }\\\\n})\\\\n\\\\nconst inputHTML =\\\\n  '<p style=\\\\\\\"text-align:left;\\\\\\\"><span style=\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\">Dear recipient,</span></p> <p><span style=\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\">Order </span><awbnumber><span style=\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\"> is arriving, should reach your destination at </span><time><span style=\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\">. </span></p>'\\\\n\\\\nconst MainCompoonent = ({\\\\n  initializeFromHTML,\\\\n  showHTMLOutput,\\\\n  showJSONOutput,\\\\n  insertMentionsProgrammatically\\\\n}: IMainComponentProps) => {\\\\n  /** Initialize with empty state */\\\\n  const [editorState, setEditorState] = React.useState(\\\\n    EditorState.createEmpty()\\\\n  )\\\\n\\\\n  const JSONOutput = React.useMemo(\\\\n    () => JSON.stringify(convertToRaw(editorState.getCurrentContent())),\\\\n    [editorState]\\\\n  )\\\\n\\\\n  const HTMLOutput = React.useMemo(\\\\n    () =>\\\\n      draftToHtml(\\\\n        convertToRaw(editorState.getCurrentContent()),\\\\n        undefined,\\\\n        false,\\\\n        (entity, _text) =>\\\\n          `<${mentionSuggesstionsValueMap[entity?.data?.value]}>`\\\\n      ),\\\\n    [editorState]\\\\n  )\\\\n\\\\n  /** Programmatically insert Mentions - Either at last cursor or at End */\\\\n  const handleClick = () => {\\\\n    setEditorState(insertMention(editorState, mentionSuggesstionsProp[0], true))\\\\n  }\\\\n\\\\n  /** Initializing the editor state from HTML */\\\\n  React.useEffect(() => {\\\\n    initializeFromHTML &&\\\\n      setEditorState(\\\\n        convertHTMLToDraftState(inputHTML || '', mentionSuggestionsFromAPI)\\\\n      )\\\\n  }, [])\\\\n\\\\n  return (\\\\n    <>\\\\n      {insertMentionsProgrammatically && (\\\\n        <Button onClick={handleClick}>Insert Mention</Button>\\\\n      )}\\\\n      <br />\\\\n      <br />\\\\n      <RichTextEditor\\\\n        label='Email Body'\\\\n        id='emailBody'\\\\n        className='emailBody'\\\\n        isStripPastedStyles={true}\\\\n        // defaultEditorState={EditorState.createEmpty()}\\\\n        editorState={editorState}\\\\n        mention={{\\\\n          separator: ' ',\\\\n          trigger: '@',\\\\n          suggestions: mentionSuggesstionsProp\\\\n        }}\\\\n        onEditorStateChange={setEditorState}\\\\n        placeholder='Enter Email Body'\\\\n        hideToolbar={boolean('hideToolbar', false)}\\\\n      />\\\\n      {/* {editorState.getCurrentContent().getPlainText().length} */}\\\\n      {showJSONOutput && (\\\\n        <>\\\\n          <br />\\\\n          <br />\\\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\\\n            <code>{JSONOutput}</code>\\\\n          </Box>\\\\n        </>\\\\n      )}\\\\n      {showHTMLOutput && (\\\\n        <>\\\\n          <br />\\\\n          <br />\\\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\\\n            <code>{HTMLOutput}</code>\\\\n          </Box>\\\\n        </>\\\\n      )}\\\\n    </>\\\\n  )\\\\n}\\\\n\\\\nexport const Default = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <MainCompoonent\\\\n        showHTMLOutput={boolean('showHTMLOutput', false)}\\\\n        showJSONOutput={boolean('showJSONOutput', false)}\\\\n        insertMentionsProgrammatically={boolean(\\\\n          'insertMentionsProgrammatically',\\\\n          false\\\\n        )}\\\\n        initializeFromHTML={boolean('initializeFromHTML', false)}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\",\\\"locationsMap\\\":{}},\\\"storySource\\\":{\\\"source\\\":\\\"import React from 'react'\\\\n\\\\nimport { path } from '..'\\\\nimport RichTextEditor from '.'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport { EditorState, convertToRaw } from 'draft-js'\\\\nimport { insertMention, convertHTMLToDraftState } from './apis'\\\\nimport draftToHtml from 'draftjs-to-html'\\\\nimport Box from '../../atoms/Box'\\\\nimport Button from '../../atoms/Button'\\\\nimport { boolean } from '@storybook/addon-knobs'\\\\n\\\\ninterface IMainComponentProps {\\\\n  showHTMLOutput?: boolean\\\\n  showJSONOutput?: boolean\\\\n  insertMentionsProgrammatically?: boolean\\\\n  initializeFromHTML?: boolean\\\\n}\\\\n\\\\nexport default {\\\\n  title: `${path}/RichTextEditor`,\\\\n  component: RichTextEditor\\\\n}\\\\n\\\\n/** Mentions structure from API */\\\\nconst mentionSuggestionsFromAPI = [\\\\n  { text: 'Delivery Associate Name', value: 'dmmName', url: '#' },\\\\n  { text: 'Alert Date', value: 'time', url: '#' },\\\\n  { text: 'Account Name', value: 'accountname', url: '#' },\\\\n  { text: 'Account Code', value: 'accountCode', url: '#' },\\\\n  { text: 'Collected Value', value: 'collectedValue', url: '#' },\\\\n  { text: 'Package Value', value: 'actualvalue', url: '#' },\\\\n  { text: 'Currency', value: 'currency', url: '#' },\\\\n  { text: 'AWB Number', value: 'awbnumber', url: '#' }\\\\n]\\\\n\\\\n/** Mentions Text to Value map */\\\\nconst mentionSuggesstionsValueMap: Record<string, string> = {}\\\\n\\\\n/** Text & Value should have same content when sent to React-Draft */\\\\nconst mentionSuggesstionsProp = mentionSuggestionsFromAPI.map((m) => {\\\\n  mentionSuggesstionsValueMap[m.text] = m.value\\\\n  return { text: m.text, value: m.text, url: m.url }\\\\n})\\\\n\\\\nconst inputHTML =\\\\n  '<p style=\\\\\\\"text-align:left;\\\\\\\"><span style=\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\">Dear recipient,</span></p> <p><span style=\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\">Order </span><awbnumber><span style=\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\"> is arriving, should reach your destination at </span><time><span style=\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\">. </span></p>'\\\\n\\\\nconst MainCompoonent = ({\\\\n  initializeFromHTML,\\\\n  showHTMLOutput,\\\\n  showJSONOutput,\\\\n  insertMentionsProgrammatically\\\\n}: IMainComponentProps) => {\\\\n  /** Initialize with empty state */\\\\n  const [editorState, setEditorState] = React.useState(\\\\n    EditorState.createEmpty()\\\\n  )\\\\n\\\\n  const JSONOutput = React.useMemo(\\\\n    () => JSON.stringify(convertToRaw(editorState.getCurrentContent())),\\\\n    [editorState]\\\\n  )\\\\n\\\\n  const HTMLOutput = React.useMemo(\\\\n    () =>\\\\n      draftToHtml(\\\\n        convertToRaw(editorState.getCurrentContent()),\\\\n        undefined,\\\\n        false,\\\\n        (entity, _text) =>\\\\n          `<${mentionSuggesstionsValueMap[entity?.data?.value]}>`\\\\n      ),\\\\n    [editorState]\\\\n  )\\\\n\\\\n  /** Programmatically insert Mentions - Either at last cursor or at End */\\\\n  const handleClick = () => {\\\\n    setEditorState(insertMention(editorState, mentionSuggesstionsProp[0], true))\\\\n  }\\\\n\\\\n  /** Initializing the editor state from HTML */\\\\n  React.useEffect(() => {\\\\n    initializeFromHTML &&\\\\n      setEditorState(\\\\n        convertHTMLToDraftState(inputHTML || '', mentionSuggestionsFromAPI)\\\\n      )\\\\n  }, [])\\\\n\\\\n  return (\\\\n    <>\\\\n      {insertMentionsProgrammatically && (\\\\n        <Button onClick={handleClick}>Insert Mention</Button>\\\\n      )}\\\\n      <br />\\\\n      <br />\\\\n      <RichTextEditor\\\\n        label='Email Body'\\\\n        id='emailBody'\\\\n        className='emailBody'\\\\n        isStripPastedStyles={true}\\\\n        // defaultEditorState={EditorState.createEmpty()}\\\\n        editorState={editorState}\\\\n        mention={{\\\\n          separator: ' ',\\\\n          trigger: '@',\\\\n          suggestions: mentionSuggesstionsProp\\\\n        }}\\\\n        onEditorStateChange={setEditorState}\\\\n        placeholder='Enter Email Body'\\\\n        hideToolbar={boolean('hideToolbar', false)}\\\\n      />\\\\n      {/* {editorState.getCurrentContent().getPlainText().length} */}\\\\n      {showJSONOutput && (\\\\n        <>\\\\n          <br />\\\\n          <br />\\\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\\\n            <code>{JSONOutput}</code>\\\\n          </Box>\\\\n        </>\\\\n      )}\\\\n      {showHTMLOutput && (\\\\n        <>\\\\n          <br />\\\\n          <br />\\\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\\\n            <code>{HTMLOutput}</code>\\\\n          </Box>\\\\n        </>\\\\n      )}\\\\n    </>\\\\n  )\\\\n}\\\\n\\\\nexport const Default = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <MainCompoonent\\\\n        showHTMLOutput={boolean('showHTMLOutput', false)}\\\\n        showJSONOutput={boolean('showJSONOutput', false)}\\\\n        insertMentionsProgrammatically={boolean(\\\\n          'insertMentionsProgrammatically',\\\\n          false\\\\n        )}\\\\n        initializeFromHTML={boolean('initializeFromHTML', false)}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\",\\\"locationsMap\\\":{}},},\\n  title: `${path}/RichTextEditor`,\\n  component: RichTextEditor\\n}\\n\\n/** Mentions structure from API */\\nconst mentionSuggestionsFromAPI = [\\n  { text: 'Delivery Associate Name', value: 'dmmName', url: '#' },\\n  { text: 'Alert Date', value: 'time', url: '#' },\\n  { text: 'Account Name', value: 'accountname', url: '#' },\\n  { text: 'Account Code', value: 'accountCode', url: '#' },\\n  { text: 'Collected Value', value: 'collectedValue', url: '#' },\\n  { text: 'Package Value', value: 'actualvalue', url: '#' },\\n  { text: 'Currency', value: 'currency', url: '#' },\\n  { text: 'AWB Number', value: 'awbnumber', url: '#' }\\n]\\n\\n/** Mentions Text to Value map */\\nconst mentionSuggesstionsValueMap: Record<string, string> = {}\\n\\n/** Text & Value should have same content when sent to React-Draft */\\nconst mentionSuggesstionsProp = mentionSuggestionsFromAPI.map((m) => {\\n  mentionSuggesstionsValueMap[m.text] = m.value\\n  return { text: m.text, value: m.text, url: m.url }\\n})\\n\\nconst inputHTML =\\n  '<p style=\\\"text-align:left;\\\"><span style=\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\">Dear recipient,</span></p> <p><span style=\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\">Order </span><awbnumber><span style=\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\"> is arriving, should reach your destination at </span><time><span style=\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\">. </span></p>'\\n\\nconst MainCompoonent = ({\\n  initializeFromHTML,\\n  showHTMLOutput,\\n  showJSONOutput,\\n  insertMentionsProgrammatically\\n}: IMainComponentProps) => {\\n  /** Initialize with empty state */\\n  const [editorState, setEditorState] = React.useState(\\n    EditorState.createEmpty()\\n  )\\n\\n  const JSONOutput = React.useMemo(\\n    () => JSON.stringify(convertToRaw(editorState.getCurrentContent())),\\n    [editorState]\\n  )\\n\\n  const HTMLOutput = React.useMemo(\\n    () =>\\n      draftToHtml(\\n        convertToRaw(editorState.getCurrentContent()),\\n        undefined,\\n        false,\\n        (entity, _text) =>\\n          `<${mentionSuggesstionsValueMap[entity?.data?.value]}>`\\n      ),\\n    [editorState]\\n  )\\n\\n  /** Programmatically insert Mentions - Either at last cursor or at End */\\n  const handleClick = () => {\\n    setEditorState(insertMention(editorState, mentionSuggesstionsProp[0], true))\\n  }\\n\\n  /** Initializing the editor state from HTML */\\n  React.useEffect(() => {\\n    initializeFromHTML &&\\n      setEditorState(\\n        convertHTMLToDraftState(inputHTML || '', mentionSuggestionsFromAPI)\\n      )\\n  }, [])\\n\\n  return (\\n    <>\\n      {insertMentionsProgrammatically && (\\n        <Button onClick={handleClick}>Insert Mention</Button>\\n      )}\\n      <br />\\n      <br />\\n      <RichTextEditor\\n        label='Email Body'\\n        id='emailBody'\\n        className='emailBody'\\n        isStripPastedStyles={true}\\n        // defaultEditorState={EditorState.createEmpty()}\\n        editorState={editorState}\\n        mention={{\\n          separator: ' ',\\n          trigger: '@',\\n          suggestions: mentionSuggesstionsProp\\n        }}\\n        onEditorStateChange={setEditorState}\\n        placeholder='Enter Email Body'\\n        hideToolbar={boolean('hideToolbar', false)}\\n      />\\n      {/* {editorState.getCurrentContent().getPlainText().length} */}\\n      {showJSONOutput && (\\n        <>\\n          <br />\\n          <br />\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\n            <code>{JSONOutput}</code>\\n          </Box>\\n        </>\\n      )}\\n      {showHTMLOutput && (\\n        <>\\n          <br />\\n          <br />\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\n            <code>{HTMLOutput}</code>\\n          </Box>\\n        </>\\n      )}\\n    </>\\n  )\\n}\\n\\nexport const Default = addSourceDecorator(addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <MainCompoonent\\n        showHTMLOutput={boolean('showHTMLOutput', false)}\\n        showJSONOutput={boolean('showJSONOutput', false)}\\n        insertMentionsProgrammatically={boolean(\\n          'insertMentionsProgrammatically',\\n          false\\n        )}\\n        initializeFromHTML={boolean('initializeFromHTML', false)}\\n      />\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\",\n      \"locationsMap\": {}\n    }\n  }, _defineProperty(_parameters, \"storySource\", {\n    \"source\": \"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/organisms/RichTextEditor\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"import React from 'react'\\\\n\\\\nimport { path } from '..'\\\\nimport RichTextEditor from '.'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport { EditorState, convertToRaw } from 'draft-js'\\\\nimport { insertMention, convertHTMLToDraftState } from './apis'\\\\nimport draftToHtml from 'draftjs-to-html'\\\\nimport Box from '../../atoms/Box'\\\\nimport Button from '../../atoms/Button'\\\\nimport { boolean } from '@storybook/addon-knobs'\\\\n\\\\ninterface IMainComponentProps {\\\\n  showHTMLOutput?: boolean\\\\n  showJSONOutput?: boolean\\\\n  insertMentionsProgrammatically?: boolean\\\\n  initializeFromHTML?: boolean\\\\n}\\\\n\\\\nexport default {\\\\n  title: `${path}/RichTextEditor`,\\\\n  component: RichTextEditor\\\\n}\\\\n\\\\n/** Mentions structure from API */\\\\nconst mentionSuggestionsFromAPI = [\\\\n  { text: 'Delivery Associate Name', value: 'dmmName', url: '#' },\\\\n  { text: 'Alert Date', value: 'time', url: '#' },\\\\n  { text: 'Account Name', value: 'accountname', url: '#' },\\\\n  { text: 'Account Code', value: 'accountCode', url: '#' },\\\\n  { text: 'Collected Value', value: 'collectedValue', url: '#' },\\\\n  { text: 'Package Value', value: 'actualvalue', url: '#' },\\\\n  { text: 'Currency', value: 'currency', url: '#' },\\\\n  { text: 'AWB Number', value: 'awbnumber', url: '#' }\\\\n]\\\\n\\\\n/** Mentions Text to Value map */\\\\nconst mentionSuggesstionsValueMap: Record<string, string> = {}\\\\n\\\\n/** Text & Value should have same content when sent to React-Draft */\\\\nconst mentionSuggesstionsProp = mentionSuggestionsFromAPI.map((m) => {\\\\n  mentionSuggesstionsValueMap[m.text] = m.value\\\\n  return { text: m.text, value: m.text, url: m.url }\\\\n})\\\\n\\\\nconst inputHTML =\\\\n  '<p style=\\\\\\\"text-align:left;\\\\\\\"><span style=\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\">Dear recipient,</span></p> <p><span style=\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\">Order </span><awbnumber><span style=\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\"> is arriving, should reach your destination at </span><time><span style=\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\">. </span></p>'\\\\n\\\\nconst MainCompoonent = ({\\\\n  initializeFromHTML,\\\\n  showHTMLOutput,\\\\n  showJSONOutput,\\\\n  insertMentionsProgrammatically\\\\n}: IMainComponentProps) => {\\\\n  /** Initialize with empty state */\\\\n  const [editorState, setEditorState] = React.useState(\\\\n    EditorState.createEmpty()\\\\n  )\\\\n\\\\n  const JSONOutput = React.useMemo(\\\\n    () => JSON.stringify(convertToRaw(editorState.getCurrentContent())),\\\\n    [editorState]\\\\n  )\\\\n\\\\n  const HTMLOutput = React.useMemo(\\\\n    () =>\\\\n      draftToHtml(\\\\n        convertToRaw(editorState.getCurrentContent()),\\\\n        undefined,\\\\n        false,\\\\n        (entity, _text) =>\\\\n          `<${mentionSuggesstionsValueMap[entity?.data?.value]}>`\\\\n      ),\\\\n    [editorState]\\\\n  )\\\\n\\\\n  /** Programmatically insert Mentions - Either at last cursor or at End */\\\\n  const handleClick = () => {\\\\n    setEditorState(insertMention(editorState, mentionSuggesstionsProp[0], true))\\\\n  }\\\\n\\\\n  /** Initializing the editor state from HTML */\\\\n  React.useEffect(() => {\\\\n    initializeFromHTML &&\\\\n      setEditorState(\\\\n        convertHTMLToDraftState(inputHTML || '', mentionSuggestionsFromAPI)\\\\n      )\\\\n  }, [])\\\\n\\\\n  return (\\\\n    <>\\\\n      {insertMentionsProgrammatically && (\\\\n        <Button onClick={handleClick}>Insert Mention</Button>\\\\n      )}\\\\n      <br />\\\\n      <br />\\\\n      <RichTextEditor\\\\n        label='Email Body'\\\\n        id='emailBody'\\\\n        className='emailBody'\\\\n        isStripPastedStyles={true}\\\\n        // defaultEditorState={EditorState.createEmpty()}\\\\n        editorState={editorState}\\\\n        mention={{\\\\n          separator: ' ',\\\\n          trigger: '@',\\\\n          suggestions: mentionSuggesstionsProp\\\\n        }}\\\\n        onEditorStateChange={setEditorState}\\\\n        placeholder='Enter Email Body'\\\\n        hideToolbar={boolean('hideToolbar', false)}\\\\n      />\\\\n      {/* {editorState.getCurrentContent().getPlainText().length} */}\\\\n      {showJSONOutput && (\\\\n        <>\\\\n          <br />\\\\n          <br />\\\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\\\n            <code>{JSONOutput}</code>\\\\n          </Box>\\\\n        </>\\\\n      )}\\\\n      {showHTMLOutput && (\\\\n        <>\\\\n          <br />\\\\n          <br />\\\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\\\n            <code>{HTMLOutput}</code>\\\\n          </Box>\\\\n        </>\\\\n      )}\\\\n    </>\\\\n  )\\\\n}\\\\n\\\\nexport const Default = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <MainCompoonent\\\\n        showHTMLOutput={boolean('showHTMLOutput', false)}\\\\n        showJSONOutput={boolean('showJSONOutput', false)}\\\\n        insertMentionsProgrammatically={boolean(\\\\n          'insertMentionsProgrammatically',\\\\n          false\\\\n        )}\\\\n        initializeFromHTML={boolean('initializeFromHTML', false)}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/RichTextEditor.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\nimport React from 'react'\\n\\nimport { path } from '..'\\nimport RichTextEditor from '.'\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\nimport { EditorState, convertToRaw } from 'draft-js'\\nimport { insertMention, convertHTMLToDraftState } from './apis'\\nimport draftToHtml from 'draftjs-to-html'\\nimport Box from '../../atoms/Box'\\nimport Button from '../../atoms/Button'\\nimport { boolean } from '@storybook/addon-knobs'\\n\\ninterface IMainComponentProps {\\n  showHTMLOutput?: boolean\\n  showJSONOutput?: boolean\\n  insertMentionsProgrammatically?: boolean\\n  initializeFromHTML?: boolean\\n}\\n\\nexport default {parameters: {\\\"storySource\\\":{\\\"source\\\":\\\"import React from 'react'\\\\n\\\\nimport { path } from '..'\\\\nimport RichTextEditor from '.'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport { EditorState, convertToRaw } from 'draft-js'\\\\nimport { insertMention, convertHTMLToDraftState } from './apis'\\\\nimport draftToHtml from 'draftjs-to-html'\\\\nimport Box from '../../atoms/Box'\\\\nimport Button from '../../atoms/Button'\\\\nimport { boolean } from '@storybook/addon-knobs'\\\\n\\\\ninterface IMainComponentProps {\\\\n  showHTMLOutput?: boolean\\\\n  showJSONOutput?: boolean\\\\n  insertMentionsProgrammatically?: boolean\\\\n  initializeFromHTML?: boolean\\\\n}\\\\n\\\\nexport default {\\\\n  title: `${path}/RichTextEditor`,\\\\n  component: RichTextEditor\\\\n}\\\\n\\\\n/** Mentions structure from API */\\\\nconst mentionSuggestionsFromAPI = [\\\\n  { text: 'Delivery Associate Name', value: 'dmmName', url: '#' },\\\\n  { text: 'Alert Date', value: 'time', url: '#' },\\\\n  { text: 'Account Name', value: 'accountname', url: '#' },\\\\n  { text: 'Account Code', value: 'accountCode', url: '#' },\\\\n  { text: 'Collected Value', value: 'collectedValue', url: '#' },\\\\n  { text: 'Package Value', value: 'actualvalue', url: '#' },\\\\n  { text: 'Currency', value: 'currency', url: '#' },\\\\n  { text: 'AWB Number', value: 'awbnumber', url: '#' }\\\\n]\\\\n\\\\n/** Mentions Text to Value map */\\\\nconst mentionSuggesstionsValueMap: Record<string, string> = {}\\\\n\\\\n/** Text & Value should have same content when sent to React-Draft */\\\\nconst mentionSuggesstionsProp = mentionSuggestionsFromAPI.map((m) => {\\\\n  mentionSuggesstionsValueMap[m.text] = m.value\\\\n  return { text: m.text, value: m.text, url: m.url }\\\\n})\\\\n\\\\nconst inputHTML =\\\\n  '<p style=\\\\\\\"text-align:left;\\\\\\\"><span style=\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\">Dear recipient,</span></p> <p><span style=\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\">Order </span><awbnumber><span style=\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\"> is arriving, should reach your destination at </span><time><span style=\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\">. </span></p>'\\\\n\\\\nconst MainCompoonent = ({\\\\n  initializeFromHTML,\\\\n  showHTMLOutput,\\\\n  showJSONOutput,\\\\n  insertMentionsProgrammatically\\\\n}: IMainComponentProps) => {\\\\n  /** Initialize with empty state */\\\\n  const [editorState, setEditorState] = React.useState(\\\\n    EditorState.createEmpty()\\\\n  )\\\\n\\\\n  const JSONOutput = React.useMemo(\\\\n    () => JSON.stringify(convertToRaw(editorState.getCurrentContent())),\\\\n    [editorState]\\\\n  )\\\\n\\\\n  const HTMLOutput = React.useMemo(\\\\n    () =>\\\\n      draftToHtml(\\\\n        convertToRaw(editorState.getCurrentContent()),\\\\n        undefined,\\\\n        false,\\\\n        (entity, _text) =>\\\\n          `<${mentionSuggesstionsValueMap[entity?.data?.value]}>`\\\\n      ),\\\\n    [editorState]\\\\n  )\\\\n\\\\n  /** Programmatically insert Mentions - Either at last cursor or at End */\\\\n  const handleClick = () => {\\\\n    setEditorState(insertMention(editorState, mentionSuggesstionsProp[0], true))\\\\n  }\\\\n\\\\n  /** Initializing the editor state from HTML */\\\\n  React.useEffect(() => {\\\\n    initializeFromHTML &&\\\\n      setEditorState(\\\\n        convertHTMLToDraftState(inputHTML || '', mentionSuggestionsFromAPI)\\\\n      )\\\\n  }, [])\\\\n\\\\n  return (\\\\n    <>\\\\n      {insertMentionsProgrammatically && (\\\\n        <Button onClick={handleClick}>Insert Mention</Button>\\\\n      )}\\\\n      <br />\\\\n      <br />\\\\n      <RichTextEditor\\\\n        label='Email Body'\\\\n        id='emailBody'\\\\n        className='emailBody'\\\\n        isStripPastedStyles={true}\\\\n        // defaultEditorState={EditorState.createEmpty()}\\\\n        editorState={editorState}\\\\n        mention={{\\\\n          separator: ' ',\\\\n          trigger: '@',\\\\n          suggestions: mentionSuggesstionsProp\\\\n        }}\\\\n        onEditorStateChange={setEditorState}\\\\n        placeholder='Enter Email Body'\\\\n        hideToolbar={boolean('hideToolbar', false)}\\\\n      />\\\\n      {/* {editorState.getCurrentContent().getPlainText().length} */}\\\\n      {showJSONOutput && (\\\\n        <>\\\\n          <br />\\\\n          <br />\\\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\\\n            <code>{JSONOutput}</code>\\\\n          </Box>\\\\n        </>\\\\n      )}\\\\n      {showHTMLOutput && (\\\\n        <>\\\\n          <br />\\\\n          <br />\\\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\\\n            <code>{HTMLOutput}</code>\\\\n          </Box>\\\\n        </>\\\\n      )}\\\\n    </>\\\\n  )\\\\n}\\\\n\\\\nexport const Default = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <MainCompoonent\\\\n        showHTMLOutput={boolean('showHTMLOutput', false)}\\\\n        showJSONOutput={boolean('showJSONOutput', false)}\\\\n        insertMentionsProgrammatically={boolean(\\\\n          'insertMentionsProgrammatically',\\\\n          false\\\\n        )}\\\\n        initializeFromHTML={boolean('initializeFromHTML', false)}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\",\\\"locationsMap\\\":{}},},\\n  title: `${path}/RichTextEditor`,\\n  component: RichTextEditor\\n}\\n\\n/** Mentions structure from API */\\nconst mentionSuggestionsFromAPI = [\\n  { text: 'Delivery Associate Name', value: 'dmmName', url: '#' },\\n  { text: 'Alert Date', value: 'time', url: '#' },\\n  { text: 'Account Name', value: 'accountname', url: '#' },\\n  { text: 'Account Code', value: 'accountCode', url: '#' },\\n  { text: 'Collected Value', value: 'collectedValue', url: '#' },\\n  { text: 'Package Value', value: 'actualvalue', url: '#' },\\n  { text: 'Currency', value: 'currency', url: '#' },\\n  { text: 'AWB Number', value: 'awbnumber', url: '#' }\\n]\\n\\n/** Mentions Text to Value map */\\nconst mentionSuggesstionsValueMap: Record<string, string> = {}\\n\\n/** Text & Value should have same content when sent to React-Draft */\\nconst mentionSuggesstionsProp = mentionSuggestionsFromAPI.map((m) => {\\n  mentionSuggesstionsValueMap[m.text] = m.value\\n  return { text: m.text, value: m.text, url: m.url }\\n})\\n\\nconst inputHTML =\\n  '<p style=\\\"text-align:left;\\\"><span style=\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\">Dear recipient,</span></p> <p><span style=\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\">Order </span><awbnumber><span style=\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\"> is arriving, should reach your destination at </span><time><span style=\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\">. </span></p>'\\n\\nconst MainCompoonent = ({\\n  initializeFromHTML,\\n  showHTMLOutput,\\n  showJSONOutput,\\n  insertMentionsProgrammatically\\n}: IMainComponentProps) => {\\n  /** Initialize with empty state */\\n  const [editorState, setEditorState] = React.useState(\\n    EditorState.createEmpty()\\n  )\\n\\n  const JSONOutput = React.useMemo(\\n    () => JSON.stringify(convertToRaw(editorState.getCurrentContent())),\\n    [editorState]\\n  )\\n\\n  const HTMLOutput = React.useMemo(\\n    () =>\\n      draftToHtml(\\n        convertToRaw(editorState.getCurrentContent()),\\n        undefined,\\n        false,\\n        (entity, _text) =>\\n          `<${mentionSuggesstionsValueMap[entity?.data?.value]}>`\\n      ),\\n    [editorState]\\n  )\\n\\n  /** Programmatically insert Mentions - Either at last cursor or at End */\\n  const handleClick = () => {\\n    setEditorState(insertMention(editorState, mentionSuggesstionsProp[0], true))\\n  }\\n\\n  /** Initializing the editor state from HTML */\\n  React.useEffect(() => {\\n    initializeFromHTML &&\\n      setEditorState(\\n        convertHTMLToDraftState(inputHTML || '', mentionSuggestionsFromAPI)\\n      )\\n  }, [])\\n\\n  return (\\n    <>\\n      {insertMentionsProgrammatically && (\\n        <Button onClick={handleClick}>Insert Mention</Button>\\n      )}\\n      <br />\\n      <br />\\n      <RichTextEditor\\n        label='Email Body'\\n        id='emailBody'\\n        className='emailBody'\\n        isStripPastedStyles={true}\\n        // defaultEditorState={EditorState.createEmpty()}\\n        editorState={editorState}\\n        mention={{\\n          separator: ' ',\\n          trigger: '@',\\n          suggestions: mentionSuggesstionsProp\\n        }}\\n        onEditorStateChange={setEditorState}\\n        placeholder='Enter Email Body'\\n        hideToolbar={boolean('hideToolbar', false)}\\n      />\\n      {/* {editorState.getCurrentContent().getPlainText().length} */}\\n      {showJSONOutput && (\\n        <>\\n          <br />\\n          <br />\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\n            <code>{JSONOutput}</code>\\n          </Box>\\n        </>\\n      )}\\n      {showHTMLOutput && (\\n        <>\\n          <br />\\n          <br />\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\n            <code>{HTMLOutput}</code>\\n          </Box>\\n        </>\\n      )}\\n    </>\\n  )\\n}\\n\\nexport const Default = addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <MainCompoonent\\n        showHTMLOutput={boolean('showHTMLOutput', false)}\\n        showJSONOutput={boolean('showJSONOutput', false)}\\n        insertMentionsProgrammatically={boolean(\\n          'insertMentionsProgrammatically',\\n          false\\n        )}\\n        initializeFromHTML={boolean('initializeFromHTML', false)}\\n      />\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\",\n    \"locationsMap\": {}\n  }), _defineProperty(_parameters, \"storySource\", {\n    \"source\": \"import React from 'react'\\n\\nimport { path } from '..'\\nimport RichTextEditor from '.'\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\nimport { EditorState, convertToRaw } from 'draft-js'\\nimport { insertMention, convertHTMLToDraftState } from './apis'\\nimport draftToHtml from 'draftjs-to-html'\\nimport Box from '../../atoms/Box'\\nimport Button from '../../atoms/Button'\\nimport { boolean } from '@storybook/addon-knobs'\\n\\ninterface IMainComponentProps {\\n  showHTMLOutput?: boolean\\n  showJSONOutput?: boolean\\n  insertMentionsProgrammatically?: boolean\\n  initializeFromHTML?: boolean\\n}\\n\\nexport default {\\n  title: `${path}/RichTextEditor`,\\n  component: RichTextEditor\\n}\\n\\n/** Mentions structure from API */\\nconst mentionSuggestionsFromAPI = [\\n  { text: 'Delivery Associate Name', value: 'dmmName', url: '#' },\\n  { text: 'Alert Date', value: 'time', url: '#' },\\n  { text: 'Account Name', value: 'accountname', url: '#' },\\n  { text: 'Account Code', value: 'accountCode', url: '#' },\\n  { text: 'Collected Value', value: 'collectedValue', url: '#' },\\n  { text: 'Package Value', value: 'actualvalue', url: '#' },\\n  { text: 'Currency', value: 'currency', url: '#' },\\n  { text: 'AWB Number', value: 'awbnumber', url: '#' }\\n]\\n\\n/** Mentions Text to Value map */\\nconst mentionSuggesstionsValueMap: Record<string, string> = {}\\n\\n/** Text & Value should have same content when sent to React-Draft */\\nconst mentionSuggesstionsProp = mentionSuggestionsFromAPI.map((m) => {\\n  mentionSuggesstionsValueMap[m.text] = m.value\\n  return { text: m.text, value: m.text, url: m.url }\\n})\\n\\nconst inputHTML =\\n  '<p style=\\\"text-align:left;\\\"><span style=\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\">Dear recipient,</span></p> <p><span style=\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\">Order </span><awbnumber><span style=\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\"> is arriving, should reach your destination at </span><time><span style=\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\">. </span></p>'\\n\\nconst MainCompoonent = ({\\n  initializeFromHTML,\\n  showHTMLOutput,\\n  showJSONOutput,\\n  insertMentionsProgrammatically\\n}: IMainComponentProps) => {\\n  /** Initialize with empty state */\\n  const [editorState, setEditorState] = React.useState(\\n    EditorState.createEmpty()\\n  )\\n\\n  const JSONOutput = React.useMemo(\\n    () => JSON.stringify(convertToRaw(editorState.getCurrentContent())),\\n    [editorState]\\n  )\\n\\n  const HTMLOutput = React.useMemo(\\n    () =>\\n      draftToHtml(\\n        convertToRaw(editorState.getCurrentContent()),\\n        undefined,\\n        false,\\n        (entity, _text) =>\\n          `<${mentionSuggesstionsValueMap[entity?.data?.value]}>`\\n      ),\\n    [editorState]\\n  )\\n\\n  /** Programmatically insert Mentions - Either at last cursor or at End */\\n  const handleClick = () => {\\n    setEditorState(insertMention(editorState, mentionSuggesstionsProp[0], true))\\n  }\\n\\n  /** Initializing the editor state from HTML */\\n  React.useEffect(() => {\\n    initializeFromHTML &&\\n      setEditorState(\\n        convertHTMLToDraftState(inputHTML || '', mentionSuggestionsFromAPI)\\n      )\\n  }, [])\\n\\n  return (\\n    <>\\n      {insertMentionsProgrammatically && (\\n        <Button onClick={handleClick}>Insert Mention</Button>\\n      )}\\n      <br />\\n      <br />\\n      <RichTextEditor\\n        label='Email Body'\\n        id='emailBody'\\n        className='emailBody'\\n        isStripPastedStyles={true}\\n        // defaultEditorState={EditorState.createEmpty()}\\n        editorState={editorState}\\n        mention={{\\n          separator: ' ',\\n          trigger: '@',\\n          suggestions: mentionSuggesstionsProp\\n        }}\\n        onEditorStateChange={setEditorState}\\n        placeholder='Enter Email Body'\\n        hideToolbar={boolean('hideToolbar', false)}\\n      />\\n      {/* {editorState.getCurrentContent().getPlainText().length} */}\\n      {showJSONOutput && (\\n        <>\\n          <br />\\n          <br />\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\n            <code>{JSONOutput}</code>\\n          </Box>\\n        </>\\n      )}\\n      {showHTMLOutput && (\\n        <>\\n          <br />\\n          <br />\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\n            <code>{HTMLOutput}</code>\\n          </Box>\\n        </>\\n      )}\\n    </>\\n  )\\n}\\n\\nexport const Default = () => {\\n  return (\\n    <ThemeWrapper>\\n      <MainCompoonent\\n        showHTMLOutput={boolean('showHTMLOutput', false)}\\n        showJSONOutput={boolean('showJSONOutput', false)}\\n        insertMentionsProgrammatically={boolean(\\n          'insertMentionsProgrammatically',\\n          false\\n        )}\\n        initializeFromHTML={boolean('initializeFromHTML', false)}\\n      />\\n    </ThemeWrapper>\\n  )\\n}\\n\",\n    \"locationsMap\": {}\n  }), _parameters),\n  title: path + \"/RichTextEditor\",\n  component: RichTextEditor\n};\n/** Mentions structure from API */\n\nvar mentionSuggestionsFromAPI = [{\n  text: 'Delivery Associate Name',\n  value: 'dmmName',\n  url: '#'\n}, {\n  text: 'Alert Date',\n  value: 'time',\n  url: '#'\n}, {\n  text: 'Account Name',\n  value: 'accountname',\n  url: '#'\n}, {\n  text: 'Account Code',\n  value: 'accountCode',\n  url: '#'\n}, {\n  text: 'Collected Value',\n  value: 'collectedValue',\n  url: '#'\n}, {\n  text: 'Package Value',\n  value: 'actualvalue',\n  url: '#'\n}, {\n  text: 'Currency',\n  value: 'currency',\n  url: '#'\n}, {\n  text: 'AWB Number',\n  value: 'awbnumber',\n  url: '#'\n}];\n/** Mentions Text to Value map */\n\nvar mentionSuggesstionsValueMap = {};\n/** Text & Value should have same content when sent to React-Draft */\n\nvar mentionSuggesstionsProp = mentionSuggestionsFromAPI.map(function (m) {\n  mentionSuggesstionsValueMap[m.text] = m.value;\n  return {\n    text: m.text,\n    value: m.text,\n    url: m.url\n  };\n});\nvar inputHTML = '<p style=\"text-align:left;\"><span style=\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\">Dear recipient,</span></p> <p><span style=\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\">Order </span><awbnumber><span style=\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\"> is arriving, should reach your destination at </span><time><span style=\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\">. </span></p>';\n\nvar MainCompoonent = function MainCompoonent(_a) {\n  var initializeFromHTML = _a.initializeFromHTML,\n      showHTMLOutput = _a.showHTMLOutput,\n      showJSONOutput = _a.showJSONOutput,\n      insertMentionsProgrammatically = _a.insertMentionsProgrammatically;\n  /** Initialize with empty state */\n\n  var _b = React.useState(EditorState.createEmpty()),\n      editorState = _b[0],\n      setEditorState = _b[1];\n\n  var JSONOutput = React.useMemo(function () {\n    return JSON.stringify(convertToRaw(editorState.getCurrentContent()));\n  }, [editorState]);\n  var HTMLOutput = React.useMemo(function () {\n    return draftToHtml(convertToRaw(editorState.getCurrentContent()), undefined, false, function (entity, _text) {\n      var _a;\n\n      return \"<\" + mentionSuggesstionsValueMap[(_a = entity === null || entity === void 0 ? void 0 : entity.data) === null || _a === void 0 ? void 0 : _a.value] + \">\";\n    });\n  }, [editorState]);\n  /** Programmatically insert Mentions - Either at last cursor or at End */\n\n  var handleClick = function handleClick() {\n    setEditorState(insertMention(editorState, mentionSuggesstionsProp[0], true));\n  };\n  /** Initializing the editor state from HTML */\n\n\n  React.useEffect(function () {\n    initializeFromHTML && setEditorState(convertHTMLToDraftState(inputHTML || '', mentionSuggestionsFromAPI));\n  }, []);\n  return React.createElement(React.Fragment, null, insertMentionsProgrammatically && React.createElement(Button, {\n    onClick: handleClick\n  }, \"Insert Mention\"), React.createElement(\"br\", null), React.createElement(\"br\", null), React.createElement(RichTextEditor, {\n    label: 'Email Body',\n    id: 'emailBody',\n    className: 'emailBody',\n    isStripPastedStyles: true,\n    // defaultEditorState={EditorState.createEmpty()}\n    editorState: editorState,\n    mention: {\n      separator: ' ',\n      trigger: '@',\n      suggestions: mentionSuggesstionsProp\n    },\n    onEditorStateChange: setEditorState,\n    placeholder: 'Enter Email Body',\n    hideToolbar: _boolean('hideToolbar', false)\n  }), showJSONOutput && React.createElement(React.Fragment, null, React.createElement(\"br\", null), React.createElement(\"br\", null), React.createElement(Box, {\n    style: {\n      backgroundColor: 'lightgrey'\n    },\n    p: '10px'\n  }, React.createElement(\"code\", null, JSONOutput))), showHTMLOutput && React.createElement(React.Fragment, null, React.createElement(\"br\", null), React.createElement(\"br\", null), React.createElement(Box, {\n    style: {\n      backgroundColor: 'lightgrey'\n    },\n    p: '10px'\n  }, React.createElement(\"code\", null, HTMLOutput))));\n};\n\nexport var Default = addSourceDecorator(addSourceDecorator(addSourceDecorator(function () {\n  return React.createElement(ThemeWrapper, null, React.createElement(MainCompoonent, {\n    showHTMLOutput: _boolean('showHTMLOutput', false),\n    showJSONOutput: _boolean('showJSONOutput', false),\n    insertMentionsProgrammatically: _boolean('insertMentionsProgrammatically', false),\n    initializeFromHTML: _boolean('initializeFromHTML', false)\n  }));\n}, {\n  __STORY__: __STORY__,\n  __ADDS_MAP__: __ADDS_MAP__,\n  __MAIN_FILE_LOCATION__: __MAIN_FILE_LOCATION__,\n  __MODULE_DEPENDENCIES__: __MODULE_DEPENDENCIES__,\n  __LOCAL_DEPENDENCIES__: __LOCAL_DEPENDENCIES__,\n  __SOURCE_PREFIX__: __SOURCE_PREFIX__,\n  __IDS_TO_FRAMEWORKS__: __IDS_TO_FRAMEWORKS__\n}), {\n  __STORY__: __STORY__,\n  __ADDS_MAP__: __ADDS_MAP__,\n  __MAIN_FILE_LOCATION__: __MAIN_FILE_LOCATION__,\n  __MODULE_DEPENDENCIES__: __MODULE_DEPENDENCIES__,\n  __LOCAL_DEPENDENCIES__: __LOCAL_DEPENDENCIES__,\n  __SOURCE_PREFIX__: __SOURCE_PREFIX__,\n  __IDS_TO_FRAMEWORKS__: __IDS_TO_FRAMEWORKS__\n}), {\n  __STORY__: __STORY__,\n  __ADDS_MAP__: __ADDS_MAP__,\n  __MAIN_FILE_LOCATION__: __MAIN_FILE_LOCATION__,\n  __MODULE_DEPENDENCIES__: __MODULE_DEPENDENCIES__,\n  __LOCAL_DEPENDENCIES__: __LOCAL_DEPENDENCIES__,\n  __SOURCE_PREFIX__: __SOURCE_PREFIX__,\n  __IDS_TO_FRAMEWORKS__: __IDS_TO_FRAMEWORKS__\n});","map":{"version":3,"sources":["/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/node_modules/react-docgen-typescript-loader/dist/index.js!/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/node_modules/eslint-loader/dist/cjs.js??ref--6-0!/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/node_modules/@storybook/source-loader/dist/server/index.js??ref--11!/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/node_modules/@storybook/source-loader/dist/server/index.js!/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/node_modules/@storybook/source-loader/dist/server/index.js!/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/organisms/RichTextEditor/RichTextEditor.stories.tsx"],"names":[],"mappings":";;;;AACA;AACA;AACA;AACA,IAAI,gBAAgB,GAAG,OAAO,CAAC,kCAAD,CAAP,CAA4C,UAAnE,C,CACA;;;AACA,IAAI,kBAAkB,GAAG,OAAO,CAAC,kCAAD,CAAP,CAA4C,SAArE,C,CACA;;;AACA,IAAI,iBAAiB,GAAG,oHAAxB,C,CACA;;AACA,IAAI,SAAS,GAAG,6riDAAhB,C,CACA;;AACA,IAAI,YAAY,GAAG,EAAnB,C,CACA;;AACA,IAAI,sBAAsB,GAAG,6BAA7B,C,CACA;;AACA,IAAI,uBAAuB,GAAG,EAA9B,C,CACA;;AACA,IAAI,sBAAsB,GAAG,EAA7B,C,CACA;;AACA,IAAI,qBAAqB,GAAG,EAA5B;AAGA;AACA;AACA;;AACA,IAAI,gBAAgB,GAAG,OAAO,CAAC,kCAAD,CAAP,CAA4C,UAAnE,C,CACA;;;AACA,IAAI,kBAAkB,GAAG,OAAO,CAAC,kCAAD,CAAP,CAA4C,SAArE,C,CACA;;;AACA,IAAI,iBAAiB,GAAG,oHAAxB,C,CACA;;AACA,IAAI,SAAS,GAAG,ihfAAhB,C,CACA;;AACA,IAAI,YAAY,GAAG,EAAnB,C,CACA;;AACA,IAAI,sBAAsB,GAAG,6BAA7B,C,CACA;;AACA,IAAI,uBAAuB,GAAG,EAA9B,C,CACA;;AACA,IAAI,sBAAsB,GAAG,EAA7B,C,CACA;;AACA,IAAI,qBAAqB,GAAG,EAA5B;AAGA;AACA;AACA;;AACA,IAAI,gBAAgB,GAAG,OAAO,CAAC,kCAAD,CAAP,CAA4C,UAAnE,C,CACA;;;AACA,IAAI,kBAAkB,GAAG,OAAO,CAAC,kCAAD,CAAP,CAA4C,SAArE,C,CACA;;;AACA,IAAI,iBAAiB,GAAG,oHAAxB,C,CACA;;AACA,IAAI,SAAS,GAAG,ixJAAhB,C,CACA;;AACA,IAAI,YAAY,GAAG,EAAnB,C,CACA;;AACA,IAAI,sBAAsB,GAAG,6BAA7B,C,CACA;;AACA,IAAI,uBAAuB,GAAG,EAA9B,C,CACA;;AACA,IAAI,sBAAsB,GAAG,EAA7B,C,CACA;;AACA,IAAI,qBAAqB,GAAG,EAA5B;AAEA,OAAO,KAAP,MAAkB,OAAlB;AAEA,SAAS,IAAT,QAAqB,IAArB;AACA,OAAO,cAAP,MAA2B,GAA3B;AACA,OAAO,YAAP,MAAyB,4CAAzB;AACA,SAAS,WAAT,EAAsB,YAAtB,QAA0C,UAA1C;AACA,SAAS,aAAT,EAAwB,uBAAxB,QAAuD,QAAvD;AACA,OAAO,WAAP,MAAwB,iBAAxB;AACA,OAAO,GAAP,MAAgB,iBAAhB;AACA,OAAO,MAAP,MAAmB,oBAAnB;AACA,SAAS,OAAO,IAAP,QAAT,QAAwB,wBAAxB;AASA,eAAe;AAAC,EAAA,UAAU;AAAG,mBAAc;AAAC,gBAAS,6riDAAV;AAAwsiD,sBAAe;AAAvtiD;AAAjB,iDAA0viD;AAAC,cAAS,ihfAAV;AAA4hf,oBAAe;AAA3if,GAA1viD,+CAAuzhE;AAAC,cAAS,ixJAAV;AAA4xJ,oBAAe;AAA3yJ,GAAvzhE,eAAX;AACb,EAAA,KAAK,EAAK,IAAI,GAAA,iBADD;AAEb,EAAA,SAAS,EAAE;AAFE,CAAf;AAKA;;AACA,IAAM,yBAAyB,GAAG,CAChC;AAAE,EAAA,IAAI,EAAE,yBAAR;AAAmC,EAAA,KAAK,EAAE,SAA1C;AAAqD,EAAA,GAAG,EAAE;AAA1D,CADgC,EAEhC;AAAE,EAAA,IAAI,EAAE,YAAR;AAAsB,EAAA,KAAK,EAAE,MAA7B;AAAqC,EAAA,GAAG,EAAE;AAA1C,CAFgC,EAGhC;AAAE,EAAA,IAAI,EAAE,cAAR;AAAwB,EAAA,KAAK,EAAE,aAA/B;AAA8C,EAAA,GAAG,EAAE;AAAnD,CAHgC,EAIhC;AAAE,EAAA,IAAI,EAAE,cAAR;AAAwB,EAAA,KAAK,EAAE,aAA/B;AAA8C,EAAA,GAAG,EAAE;AAAnD,CAJgC,EAKhC;AAAE,EAAA,IAAI,EAAE,iBAAR;AAA2B,EAAA,KAAK,EAAE,gBAAlC;AAAoD,EAAA,GAAG,EAAE;AAAzD,CALgC,EAMhC;AAAE,EAAA,IAAI,EAAE,eAAR;AAAyB,EAAA,KAAK,EAAE,aAAhC;AAA+C,EAAA,GAAG,EAAE;AAApD,CANgC,EAOhC;AAAE,EAAA,IAAI,EAAE,UAAR;AAAoB,EAAA,KAAK,EAAE,UAA3B;AAAuC,EAAA,GAAG,EAAE;AAA5C,CAPgC,EAQhC;AAAE,EAAA,IAAI,EAAE,YAAR;AAAsB,EAAA,KAAK,EAAE,WAA7B;AAA0C,EAAA,GAAG,EAAE;AAA/C,CARgC,CAAlC;AAWA;;AACA,IAAM,2BAA2B,GAA2B,EAA5D;AAEA;;AACA,IAAM,uBAAuB,GAAG,yBAAyB,CAAC,GAA1B,CAA8B,UAAC,CAAD,EAAE;AAC9D,EAAA,2BAA2B,CAAC,CAAC,CAAC,IAAH,CAA3B,GAAsC,CAAC,CAAC,KAAxC;AACA,SAAO;AAAE,IAAA,IAAI,EAAE,CAAC,CAAC,IAAV;AAAgB,IAAA,KAAK,EAAE,CAAC,CAAC,IAAzB;AAA+B,IAAA,GAAG,EAAE,CAAC,CAAC;AAAtC,GAAP;AACD,CAH+B,CAAhC;AAKA,IAAM,SAAS,GACb,qbADF;;AAGA,IAAM,cAAc,GAAG,SAAjB,cAAiB,CAAC,EAAD,EAKD;MAJpB,kBAAkB,GAAA,EAAA,CAAA,kB;MAClB,cAAc,GAAA,EAAA,CAAA,c;MACd,cAAc,GAAA,EAAA,CAAA,c;MACd,8BAA8B,GAAA,EAAA,CAAA,8B;AAE9B;;AACM,MAAA,EAAA,GAAgC,KAAK,CAAC,QAAN,CACpC,WAAW,CAAC,WAAZ,EADoC,CAAhC;AAAA,MAAC,WAAW,GAAA,EAAA,CAAA,CAAA,CAAZ;AAAA,MAAc,cAAc,GAAA,EAAA,CAAA,CAAA,CAA5B;;AAIN,MAAM,UAAU,GAAG,KAAK,CAAC,OAAN,CACjB,YAAA;AAAM,WAAA,IAAI,CAAC,SAAL,CAAe,YAAY,CAAC,WAAW,CAAvC,iBAA4B,EAAD,CAA3B,CAAA;AAA6D,GADlD,EAEjB,CAAC,WAAD,CAFiB,CAAnB;AAKA,MAAM,UAAU,GAAG,KAAK,CAAC,OAAN,CACjB,YAAA;AACE,WAAA,WAAW,CACT,YAAY,CAAC,WAAW,CAAC,iBAAZ,EAAD,CADH,EAET,SAFS,EAGT,KAHS,EAIT,UAAC,MAAD,EAAS,KAAT,EAAc;AAAA,UAAA,EAAA;;AACZ,aAAA,MAAI,2BAA2B,CAAA,CAAA,EAAA,GAAC,MAAM,KAAA,IAAN,IAAA,MAAM,KAAA,KAAA,CAAN,GAAM,KAAA,CAAN,GAAA,MAAM,CAAE,IAAT,MAAa,IAAb,IAAa,EAAA,KAAA,KAAA,CAAb,GAAa,KAAA,CAAb,GAAa,EAAA,CAAE,KAAf,CAA/B,GAAoD,GAApD;AAAuD,KALhD,CAAX;AAMC,GARc,EASjB,CAAC,WAAD,CATiB,CAAnB;AAYA;;AACA,MAAM,WAAW,GAAG,SAAd,WAAc,GAAA;AAClB,IAAA,cAAc,CAAC,aAAa,CAAC,WAAD,EAAc,uBAAuB,CAAC,CAAD,CAArC,EAA0C,IAA1C,CAAd,CAAd;AACD,GAFD;AAIA;;;AACA,EAAA,KAAK,CAAC,SAAN,CAAgB,YAAA;AACd,IAAA,kBAAkB,IAChB,cAAc,CACZ,uBAAuB,CAAC,SAAS,IAAI,EAAd,EAAkB,yBAAlB,CADX,CADhB;AAID,GALD,EAKG,EALH;AAOA,SACE,KAAA,CAAA,aAAA,CAAA,KAAA,CAAA,QAAA,EAAA,IAAA,EACG,8BAA8B,IAC7B,KAAA,CAAA,aAAA,CAAC,MAAD,EAAO;AAAC,IAAA,OAAO,EAAE;AAAV,GAAP,EAA4B,gBAA5B,CAFJ,EAIE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,IAAA,CAJF,EAKE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,IAAA,CALF,EAME,KAAA,CAAA,aAAA,CAAC,cAAD,EAAe;AACb,IAAA,KAAK,EAAC,YADO;AAEb,IAAA,EAAE,EAAC,WAFU;AAGb,IAAA,SAAS,EAAC,WAHG;AAIb,IAAA,mBAAmB,EAAE,IAJR;AAKb;AACA,IAAA,WAAW,EAAE,WANA;AAOb,IAAA,OAAO,EAAE;AACP,MAAA,SAAS,EAAE,GADJ;AAEP,MAAA,OAAO,EAAE,GAFF;AAGP,MAAA,WAAW,EAAE;AAHN,KAPI;AAYb,IAAA,mBAAmB,EAAE,cAZR;AAab,IAAA,WAAW,EAAC,kBAbC;AAcb,IAAA,WAAW,EAAE,QAAO,CAAC,aAAD,EAAgB,KAAhB;AAdP,GAAf,CANF,EAuBG,cAAc,IACb,KAAA,CAAA,aAAA,CAAA,KAAA,CAAA,QAAA,EAAA,IAAA,EACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,IAAA,CADF,EAEE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,IAAA,CAFF,EAGE,KAAA,CAAA,aAAA,CAAC,GAAD,EAAI;AAAC,IAAA,KAAK,EAAE;AAAE,MAAA,eAAe,EAAE;AAAnB,KAAR;AAA0C,IAAA,CAAC,EAAC;AAA5C,GAAJ,EACE,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA,IAAA,EAAO,UAAP,CADF,CAHF,CAxBJ,EAgCG,cAAc,IACb,KAAA,CAAA,aAAA,CAAA,KAAA,CAAA,QAAA,EAAA,IAAA,EACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,IAAA,CADF,EAEE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,IAAA,CAFF,EAGE,KAAA,CAAA,aAAA,CAAC,GAAD,EAAI;AAAC,IAAA,KAAK,EAAE;AAAE,MAAA,eAAe,EAAE;AAAnB,KAAR;AAA0C,IAAA,CAAC,EAAC;AAA5C,GAAJ,EACE,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA,IAAA,EAAO,UAAP,CADF,CAHF,CAjCJ,CADF;AA4CD,CArFD;;AAuFA,OAAO,IAAM,OAAO,GAAG,kBAAkB,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,YAAA;AAC9E,SACE,KAAA,CAAA,aAAA,CAAC,YAAD,EAAa,IAAb,EACE,KAAA,CAAA,aAAA,CAAC,cAAD,EAAe;AACb,IAAA,cAAc,EAAE,QAAO,CAAC,gBAAD,EAAmB,KAAnB,CADV;AAEb,IAAA,cAAc,EAAE,QAAO,CAAC,gBAAD,EAAmB,KAAnB,CAFV;AAGb,IAAA,8BAA8B,EAAE,QAAO,CACrC,gCADqC,EAErC,KAFqC,CAH1B;AAOb,IAAA,kBAAkB,EAAE,QAAO,CAAC,oBAAD,EAAuB,KAAvB;AAPd,GAAf,CADF,CADF;AAaD,CAd8E,EAc5E;AAAC,EAAA,SAAS,EAAA,SAAV;AAAY,EAAA,YAAY,EAAA,YAAxB;AAAyB,EAAA,sBAAsB,EAAA,sBAA/C;AAAgD,EAAA,uBAAuB,EAAA,uBAAvE;AAAwE,EAAA,sBAAsB,EAAA,sBAA9F;AAA+F,EAAA,iBAAiB,EAAA,iBAAhH;AAAiH,EAAA,qBAAqB,EAAA;AAAtI,CAd4E,CAAnB,EAciF;AAAC,EAAA,SAAS,EAAA,SAAV;AAAY,EAAA,YAAY,EAAA,YAAxB;AAAyB,EAAA,sBAAsB,EAAA,sBAA/C;AAAgD,EAAA,uBAAuB,EAAA,uBAAvE;AAAwE,EAAA,sBAAsB,EAAA,sBAA9F;AAA+F,EAAA,iBAAiB,EAAA,iBAAhH;AAAiH,EAAA,qBAAqB,EAAA;AAAtI,CAdjF,CAAnB,EAc8O;AAAC,EAAA,SAAS,EAAA,SAAV;AAAY,EAAA,YAAY,EAAA,YAAxB;AAAyB,EAAA,sBAAsB,EAAA,sBAA/C;AAAgD,EAAA,uBAAuB,EAAA,uBAAvE;AAAwE,EAAA,sBAAsB,EAAA,sBAA9F;AAA+F,EAAA,iBAAiB,EAAA,iBAAhH;AAAiH,EAAA,qBAAqB,EAAA;AAAtI,CAd9O,CAAlC","sourcesContent":["\n/* eslint-disable */\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\n// @ts-ignore\nvar addSourceDecorator = require(\"@storybook/source-loader/preview\").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/organisms/RichTextEditor\";\n// @ts-ignore\nvar __STORY__ = \"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/organisms/RichTextEditor\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"\\\\n\\\\n// @ts-nocheck\\\\n// @ts-ignore\\\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\\\n// @ts-ignore\\\\nvar addSourceDecorator = require(\\\\\\\"@storybook/source-loader/preview\\\\\\\").addSource;\\\\n// @ts-ignore\\\\nvar __SOURCE_PREFIX__ = \\\\\\\"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/organisms/RichTextEditor\\\\\\\";\\\\n// @ts-ignore\\\\nvar __STORY__ = \\\\\\\"import React from 'react'\\\\\\\\n\\\\\\\\nimport { path } from '..'\\\\\\\\nimport RichTextEditor from '.'\\\\\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\\\\\nimport { EditorState, convertToRaw } from 'draft-js'\\\\\\\\nimport { insertMention, convertHTMLToDraftState } from './apis'\\\\\\\\nimport draftToHtml from 'draftjs-to-html'\\\\\\\\nimport Box from '../../atoms/Box'\\\\\\\\nimport Button from '../../atoms/Button'\\\\\\\\nimport { boolean } from '@storybook/addon-knobs'\\\\\\\\n\\\\\\\\ninterface IMainComponentProps {\\\\\\\\n  showHTMLOutput?: boolean\\\\\\\\n  showJSONOutput?: boolean\\\\\\\\n  insertMentionsProgrammatically?: boolean\\\\\\\\n  initializeFromHTML?: boolean\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/RichTextEditor`,\\\\\\\\n  component: RichTextEditor\\\\\\\\n}\\\\\\\\n\\\\\\\\n/** Mentions structure from API */\\\\\\\\nconst mentionSuggestionsFromAPI = [\\\\\\\\n  { text: 'Delivery Associate Name', value: 'dmmName', url: '#' },\\\\\\\\n  { text: 'Alert Date', value: 'time', url: '#' },\\\\\\\\n  { text: 'Account Name', value: 'accountname', url: '#' },\\\\\\\\n  { text: 'Account Code', value: 'accountCode', url: '#' },\\\\\\\\n  { text: 'Collected Value', value: 'collectedValue', url: '#' },\\\\\\\\n  { text: 'Package Value', value: 'actualvalue', url: '#' },\\\\\\\\n  { text: 'Currency', value: 'currency', url: '#' },\\\\\\\\n  { text: 'AWB Number', value: 'awbnumber', url: '#' }\\\\\\\\n]\\\\\\\\n\\\\\\\\n/** Mentions Text to Value map */\\\\\\\\nconst mentionSuggesstionsValueMap: Record<string, string> = {}\\\\\\\\n\\\\\\\\n/** Text & Value should have same content when sent to React-Draft */\\\\\\\\nconst mentionSuggesstionsProp = mentionSuggestionsFromAPI.map((m) => {\\\\\\\\n  mentionSuggesstionsValueMap[m.text] = m.value\\\\\\\\n  return { text: m.text, value: m.text, url: m.url }\\\\\\\\n})\\\\\\\\n\\\\\\\\nconst inputHTML =\\\\\\\\n  '<p style=\\\\\\\\\\\\\\\"text-align:left;\\\\\\\\\\\\\\\"><span style=\\\\\\\\\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\\\\\\\\\">Dear recipient,</span></p> <p><span style=\\\\\\\\\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\\\\\\\\\">Order </span><awbnumber><span style=\\\\\\\\\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\\\\\\\\\"> is arriving, should reach your destination at </span><time><span style=\\\\\\\\\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\\\\\\\\\">. </span></p>'\\\\\\\\n\\\\\\\\nconst MainCompoonent = ({\\\\\\\\n  initializeFromHTML,\\\\\\\\n  showHTMLOutput,\\\\\\\\n  showJSONOutput,\\\\\\\\n  insertMentionsProgrammatically\\\\\\\\n}: IMainComponentProps) => {\\\\\\\\n  /** Initialize with empty state */\\\\\\\\n  const [editorState, setEditorState] = React.useState(\\\\\\\\n    EditorState.createEmpty()\\\\\\\\n  )\\\\\\\\n\\\\\\\\n  const JSONOutput = React.useMemo(\\\\\\\\n    () => JSON.stringify(convertToRaw(editorState.getCurrentContent())),\\\\\\\\n    [editorState]\\\\\\\\n  )\\\\\\\\n\\\\\\\\n  const HTMLOutput = React.useMemo(\\\\\\\\n    () =>\\\\\\\\n      draftToHtml(\\\\\\\\n        convertToRaw(editorState.getCurrentContent()),\\\\\\\\n        undefined,\\\\\\\\n        false,\\\\\\\\n        (entity, _text) =>\\\\\\\\n          `<${mentionSuggesstionsValueMap[entity?.data?.value]}>`\\\\\\\\n      ),\\\\\\\\n    [editorState]\\\\\\\\n  )\\\\\\\\n\\\\\\\\n  /** Programmatically insert Mentions - Either at last cursor or at End */\\\\\\\\n  const handleClick = () => {\\\\\\\\n    setEditorState(insertMention(editorState, mentionSuggesstionsProp[0], true))\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  /** Initializing the editor state from HTML */\\\\\\\\n  React.useEffect(() => {\\\\\\\\n    initializeFromHTML &&\\\\\\\\n      setEditorState(\\\\\\\\n        convertHTMLToDraftState(inputHTML || '', mentionSuggestionsFromAPI)\\\\\\\\n      )\\\\\\\\n  }, [])\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <>\\\\\\\\n      {insertMentionsProgrammatically && (\\\\\\\\n        <Button onClick={handleClick}>Insert Mention</Button>\\\\\\\\n      )}\\\\\\\\n      <br />\\\\\\\\n      <br />\\\\\\\\n      <RichTextEditor\\\\\\\\n        label='Email Body'\\\\\\\\n        id='emailBody'\\\\\\\\n        className='emailBody'\\\\\\\\n        isStripPastedStyles={true}\\\\\\\\n        // defaultEditorState={EditorState.createEmpty()}\\\\\\\\n        editorState={editorState}\\\\\\\\n        mention={{\\\\\\\\n          separator: ' ',\\\\\\\\n          trigger: '@',\\\\\\\\n          suggestions: mentionSuggesstionsProp\\\\\\\\n        }}\\\\\\\\n        onEditorStateChange={setEditorState}\\\\\\\\n        placeholder='Enter Email Body'\\\\\\\\n        hideToolbar={boolean('hideToolbar', false)}\\\\\\\\n      />\\\\\\\\n      {/* {editorState.getCurrentContent().getPlainText().length} */}\\\\\\\\n      {showJSONOutput && (\\\\\\\\n        <>\\\\\\\\n          <br />\\\\\\\\n          <br />\\\\\\\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\\\\\\\n            <code>{JSONOutput}</code>\\\\\\\\n          </Box>\\\\\\\\n        </>\\\\\\\\n      )}\\\\\\\\n      {showHTMLOutput && (\\\\\\\\n        <>\\\\\\\\n          <br />\\\\\\\\n          <br />\\\\\\\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\\\\\\\n            <code>{HTMLOutput}</code>\\\\\\\\n          </Box>\\\\\\\\n        </>\\\\\\\\n      )}\\\\\\\\n    </>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const Default = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <MainCompoonent\\\\\\\\n        showHTMLOutput={boolean('showHTMLOutput', false)}\\\\\\\\n        showJSONOutput={boolean('showJSONOutput', false)}\\\\\\\\n        insertMentionsProgrammatically={boolean(\\\\\\\\n          'insertMentionsProgrammatically',\\\\\\\\n          false\\\\\\\\n        )}\\\\\\\\n        initializeFromHTML={boolean('initializeFromHTML', false)}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\";\\\\n// @ts-ignore\\\\nvar __ADDS_MAP__ = {};\\\\n// @ts-ignore\\\\nvar __MAIN_FILE_LOCATION__ = \\\\\\\"/RichTextEditor.stories.tsx\\\\\\\";\\\\n// @ts-ignore\\\\nvar __MODULE_DEPENDENCIES__ = [];\\\\n// @ts-ignore\\\\nvar __LOCAL_DEPENDENCIES__ = {};\\\\n// @ts-ignore\\\\nvar __IDS_TO_FRAMEWORKS__ = {};\\\\n        \\\\nimport React from 'react'\\\\n\\\\nimport { path } from '..'\\\\nimport RichTextEditor from '.'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport { EditorState, convertToRaw } from 'draft-js'\\\\nimport { insertMention, convertHTMLToDraftState } from './apis'\\\\nimport draftToHtml from 'draftjs-to-html'\\\\nimport Box from '../../atoms/Box'\\\\nimport Button from '../../atoms/Button'\\\\nimport { boolean } from '@storybook/addon-knobs'\\\\n\\\\ninterface IMainComponentProps {\\\\n  showHTMLOutput?: boolean\\\\n  showJSONOutput?: boolean\\\\n  insertMentionsProgrammatically?: boolean\\\\n  initializeFromHTML?: boolean\\\\n}\\\\n\\\\nexport default {parameters: {\\\\\\\"storySource\\\\\\\":{\\\\\\\"source\\\\\\\":\\\\\\\"import React from 'react'\\\\\\\\n\\\\\\\\nimport { path } from '..'\\\\\\\\nimport RichTextEditor from '.'\\\\\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\\\\\nimport { EditorState, convertToRaw } from 'draft-js'\\\\\\\\nimport { insertMention, convertHTMLToDraftState } from './apis'\\\\\\\\nimport draftToHtml from 'draftjs-to-html'\\\\\\\\nimport Box from '../../atoms/Box'\\\\\\\\nimport Button from '../../atoms/Button'\\\\\\\\nimport { boolean } from '@storybook/addon-knobs'\\\\\\\\n\\\\\\\\ninterface IMainComponentProps {\\\\\\\\n  showHTMLOutput?: boolean\\\\\\\\n  showJSONOutput?: boolean\\\\\\\\n  insertMentionsProgrammatically?: boolean\\\\\\\\n  initializeFromHTML?: boolean\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/RichTextEditor`,\\\\\\\\n  component: RichTextEditor\\\\\\\\n}\\\\\\\\n\\\\\\\\n/** Mentions structure from API */\\\\\\\\nconst mentionSuggestionsFromAPI = [\\\\\\\\n  { text: 'Delivery Associate Name', value: 'dmmName', url: '#' },\\\\\\\\n  { text: 'Alert Date', value: 'time', url: '#' },\\\\\\\\n  { text: 'Account Name', value: 'accountname', url: '#' },\\\\\\\\n  { text: 'Account Code', value: 'accountCode', url: '#' },\\\\\\\\n  { text: 'Collected Value', value: 'collectedValue', url: '#' },\\\\\\\\n  { text: 'Package Value', value: 'actualvalue', url: '#' },\\\\\\\\n  { text: 'Currency', value: 'currency', url: '#' },\\\\\\\\n  { text: 'AWB Number', value: 'awbnumber', url: '#' }\\\\\\\\n]\\\\\\\\n\\\\\\\\n/** Mentions Text to Value map */\\\\\\\\nconst mentionSuggesstionsValueMap: Record<string, string> = {}\\\\\\\\n\\\\\\\\n/** Text & Value should have same content when sent to React-Draft */\\\\\\\\nconst mentionSuggesstionsProp = mentionSuggestionsFromAPI.map((m) => {\\\\\\\\n  mentionSuggesstionsValueMap[m.text] = m.value\\\\\\\\n  return { text: m.text, value: m.text, url: m.url }\\\\\\\\n})\\\\\\\\n\\\\\\\\nconst inputHTML =\\\\\\\\n  '<p style=\\\\\\\\\\\\\\\"text-align:left;\\\\\\\\\\\\\\\"><span style=\\\\\\\\\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\\\\\\\\\">Dear recipient,</span></p> <p><span style=\\\\\\\\\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\\\\\\\\\">Order </span><awbnumber><span style=\\\\\\\\\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\\\\\\\\\"> is arriving, should reach your destination at </span><time><span style=\\\\\\\\\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\\\\\\\\\">. </span></p>'\\\\\\\\n\\\\\\\\nconst MainCompoonent = ({\\\\\\\\n  initializeFromHTML,\\\\\\\\n  showHTMLOutput,\\\\\\\\n  showJSONOutput,\\\\\\\\n  insertMentionsProgrammatically\\\\\\\\n}: IMainComponentProps) => {\\\\\\\\n  /** Initialize with empty state */\\\\\\\\n  const [editorState, setEditorState] = React.useState(\\\\\\\\n    EditorState.createEmpty()\\\\\\\\n  )\\\\\\\\n\\\\\\\\n  const JSONOutput = React.useMemo(\\\\\\\\n    () => JSON.stringify(convertToRaw(editorState.getCurrentContent())),\\\\\\\\n    [editorState]\\\\\\\\n  )\\\\\\\\n\\\\\\\\n  const HTMLOutput = React.useMemo(\\\\\\\\n    () =>\\\\\\\\n      draftToHtml(\\\\\\\\n        convertToRaw(editorState.getCurrentContent()),\\\\\\\\n        undefined,\\\\\\\\n        false,\\\\\\\\n        (entity, _text) =>\\\\\\\\n          `<${mentionSuggesstionsValueMap[entity?.data?.value]}>`\\\\\\\\n      ),\\\\\\\\n    [editorState]\\\\\\\\n  )\\\\\\\\n\\\\\\\\n  /** Programmatically insert Mentions - Either at last cursor or at End */\\\\\\\\n  const handleClick = () => {\\\\\\\\n    setEditorState(insertMention(editorState, mentionSuggesstionsProp[0], true))\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  /** Initializing the editor state from HTML */\\\\\\\\n  React.useEffect(() => {\\\\\\\\n    initializeFromHTML &&\\\\\\\\n      setEditorState(\\\\\\\\n        convertHTMLToDraftState(inputHTML || '', mentionSuggestionsFromAPI)\\\\\\\\n      )\\\\\\\\n  }, [])\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <>\\\\\\\\n      {insertMentionsProgrammatically && (\\\\\\\\n        <Button onClick={handleClick}>Insert Mention</Button>\\\\\\\\n      )}\\\\\\\\n      <br />\\\\\\\\n      <br />\\\\\\\\n      <RichTextEditor\\\\\\\\n        label='Email Body'\\\\\\\\n        id='emailBody'\\\\\\\\n        className='emailBody'\\\\\\\\n        isStripPastedStyles={true}\\\\\\\\n        // defaultEditorState={EditorState.createEmpty()}\\\\\\\\n        editorState={editorState}\\\\\\\\n        mention={{\\\\\\\\n          separator: ' ',\\\\\\\\n          trigger: '@',\\\\\\\\n          suggestions: mentionSuggesstionsProp\\\\\\\\n        }}\\\\\\\\n        onEditorStateChange={setEditorState}\\\\\\\\n        placeholder='Enter Email Body'\\\\\\\\n        hideToolbar={boolean('hideToolbar', false)}\\\\\\\\n      />\\\\\\\\n      {/* {editorState.getCurrentContent().getPlainText().length} */}\\\\\\\\n      {showJSONOutput && (\\\\\\\\n        <>\\\\\\\\n          <br />\\\\\\\\n          <br />\\\\\\\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\\\\\\\n            <code>{JSONOutput}</code>\\\\\\\\n          </Box>\\\\\\\\n        </>\\\\\\\\n      )}\\\\\\\\n      {showHTMLOutput && (\\\\\\\\n        <>\\\\\\\\n          <br />\\\\\\\\n          <br />\\\\\\\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\\\\\\\n            <code>{HTMLOutput}</code>\\\\\\\\n          </Box>\\\\\\\\n        </>\\\\\\\\n      )}\\\\\\\\n    </>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const Default = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <MainCompoonent\\\\\\\\n        showHTMLOutput={boolean('showHTMLOutput', false)}\\\\\\\\n        showJSONOutput={boolean('showJSONOutput', false)}\\\\\\\\n        insertMentionsProgrammatically={boolean(\\\\\\\\n          'insertMentionsProgrammatically',\\\\\\\\n          false\\\\\\\\n        )}\\\\\\\\n        initializeFromHTML={boolean('initializeFromHTML', false)}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\",\\\\\\\"locationsMap\\\\\\\":{}},},\\\\n  title: `${path}/RichTextEditor`,\\\\n  component: RichTextEditor\\\\n}\\\\n\\\\n/** Mentions structure from API */\\\\nconst mentionSuggestionsFromAPI = [\\\\n  { text: 'Delivery Associate Name', value: 'dmmName', url: '#' },\\\\n  { text: 'Alert Date', value: 'time', url: '#' },\\\\n  { text: 'Account Name', value: 'accountname', url: '#' },\\\\n  { text: 'Account Code', value: 'accountCode', url: '#' },\\\\n  { text: 'Collected Value', value: 'collectedValue', url: '#' },\\\\n  { text: 'Package Value', value: 'actualvalue', url: '#' },\\\\n  { text: 'Currency', value: 'currency', url: '#' },\\\\n  { text: 'AWB Number', value: 'awbnumber', url: '#' }\\\\n]\\\\n\\\\n/** Mentions Text to Value map */\\\\nconst mentionSuggesstionsValueMap: Record<string, string> = {}\\\\n\\\\n/** Text & Value should have same content when sent to React-Draft */\\\\nconst mentionSuggesstionsProp = mentionSuggestionsFromAPI.map((m) => {\\\\n  mentionSuggesstionsValueMap[m.text] = m.value\\\\n  return { text: m.text, value: m.text, url: m.url }\\\\n})\\\\n\\\\nconst inputHTML =\\\\n  '<p style=\\\\\\\"text-align:left;\\\\\\\"><span style=\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\">Dear recipient,</span></p> <p><span style=\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\">Order </span><awbnumber><span style=\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\"> is arriving, should reach your destination at </span><time><span style=\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\">. </span></p>'\\\\n\\\\nconst MainCompoonent = ({\\\\n  initializeFromHTML,\\\\n  showHTMLOutput,\\\\n  showJSONOutput,\\\\n  insertMentionsProgrammatically\\\\n}: IMainComponentProps) => {\\\\n  /** Initialize with empty state */\\\\n  const [editorState, setEditorState] = React.useState(\\\\n    EditorState.createEmpty()\\\\n  )\\\\n\\\\n  const JSONOutput = React.useMemo(\\\\n    () => JSON.stringify(convertToRaw(editorState.getCurrentContent())),\\\\n    [editorState]\\\\n  )\\\\n\\\\n  const HTMLOutput = React.useMemo(\\\\n    () =>\\\\n      draftToHtml(\\\\n        convertToRaw(editorState.getCurrentContent()),\\\\n        undefined,\\\\n        false,\\\\n        (entity, _text) =>\\\\n          `<${mentionSuggesstionsValueMap[entity?.data?.value]}>`\\\\n      ),\\\\n    [editorState]\\\\n  )\\\\n\\\\n  /** Programmatically insert Mentions - Either at last cursor or at End */\\\\n  const handleClick = () => {\\\\n    setEditorState(insertMention(editorState, mentionSuggesstionsProp[0], true))\\\\n  }\\\\n\\\\n  /** Initializing the editor state from HTML */\\\\n  React.useEffect(() => {\\\\n    initializeFromHTML &&\\\\n      setEditorState(\\\\n        convertHTMLToDraftState(inputHTML || '', mentionSuggestionsFromAPI)\\\\n      )\\\\n  }, [])\\\\n\\\\n  return (\\\\n    <>\\\\n      {insertMentionsProgrammatically && (\\\\n        <Button onClick={handleClick}>Insert Mention</Button>\\\\n      )}\\\\n      <br />\\\\n      <br />\\\\n      <RichTextEditor\\\\n        label='Email Body'\\\\n        id='emailBody'\\\\n        className='emailBody'\\\\n        isStripPastedStyles={true}\\\\n        // defaultEditorState={EditorState.createEmpty()}\\\\n        editorState={editorState}\\\\n        mention={{\\\\n          separator: ' ',\\\\n          trigger: '@',\\\\n          suggestions: mentionSuggesstionsProp\\\\n        }}\\\\n        onEditorStateChange={setEditorState}\\\\n        placeholder='Enter Email Body'\\\\n        hideToolbar={boolean('hideToolbar', false)}\\\\n      />\\\\n      {/* {editorState.getCurrentContent().getPlainText().length} */}\\\\n      {showJSONOutput && (\\\\n        <>\\\\n          <br />\\\\n          <br />\\\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\\\n            <code>{JSONOutput}</code>\\\\n          </Box>\\\\n        </>\\\\n      )}\\\\n      {showHTMLOutput && (\\\\n        <>\\\\n          <br />\\\\n          <br />\\\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\\\n            <code>{HTMLOutput}</code>\\\\n          </Box>\\\\n        </>\\\\n      )}\\\\n    </>\\\\n  )\\\\n}\\\\n\\\\nexport const Default = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <MainCompoonent\\\\n        showHTMLOutput={boolean('showHTMLOutput', false)}\\\\n        showJSONOutput={boolean('showJSONOutput', false)}\\\\n        insertMentionsProgrammatically={boolean(\\\\n          'insertMentionsProgrammatically',\\\\n          false\\\\n        )}\\\\n        initializeFromHTML={boolean('initializeFromHTML', false)}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/RichTextEditor.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\n\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/organisms/RichTextEditor\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"import React from 'react'\\\\n\\\\nimport { path } from '..'\\\\nimport RichTextEditor from '.'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport { EditorState, convertToRaw } from 'draft-js'\\\\nimport { insertMention, convertHTMLToDraftState } from './apis'\\\\nimport draftToHtml from 'draftjs-to-html'\\\\nimport Box from '../../atoms/Box'\\\\nimport Button from '../../atoms/Button'\\\\nimport { boolean } from '@storybook/addon-knobs'\\\\n\\\\ninterface IMainComponentProps {\\\\n  showHTMLOutput?: boolean\\\\n  showJSONOutput?: boolean\\\\n  insertMentionsProgrammatically?: boolean\\\\n  initializeFromHTML?: boolean\\\\n}\\\\n\\\\nexport default {\\\\n  title: `${path}/RichTextEditor`,\\\\n  component: RichTextEditor\\\\n}\\\\n\\\\n/** Mentions structure from API */\\\\nconst mentionSuggestionsFromAPI = [\\\\n  { text: 'Delivery Associate Name', value: 'dmmName', url: '#' },\\\\n  { text: 'Alert Date', value: 'time', url: '#' },\\\\n  { text: 'Account Name', value: 'accountname', url: '#' },\\\\n  { text: 'Account Code', value: 'accountCode', url: '#' },\\\\n  { text: 'Collected Value', value: 'collectedValue', url: '#' },\\\\n  { text: 'Package Value', value: 'actualvalue', url: '#' },\\\\n  { text: 'Currency', value: 'currency', url: '#' },\\\\n  { text: 'AWB Number', value: 'awbnumber', url: '#' }\\\\n]\\\\n\\\\n/** Mentions Text to Value map */\\\\nconst mentionSuggesstionsValueMap: Record<string, string> = {}\\\\n\\\\n/** Text & Value should have same content when sent to React-Draft */\\\\nconst mentionSuggesstionsProp = mentionSuggestionsFromAPI.map((m) => {\\\\n  mentionSuggesstionsValueMap[m.text] = m.value\\\\n  return { text: m.text, value: m.text, url: m.url }\\\\n})\\\\n\\\\nconst inputHTML =\\\\n  '<p style=\\\\\\\"text-align:left;\\\\\\\"><span style=\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\">Dear recipient,</span></p> <p><span style=\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\">Order </span><awbnumber><span style=\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\"> is arriving, should reach your destination at </span><time><span style=\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\">. </span></p>'\\\\n\\\\nconst MainCompoonent = ({\\\\n  initializeFromHTML,\\\\n  showHTMLOutput,\\\\n  showJSONOutput,\\\\n  insertMentionsProgrammatically\\\\n}: IMainComponentProps) => {\\\\n  /** Initialize with empty state */\\\\n  const [editorState, setEditorState] = React.useState(\\\\n    EditorState.createEmpty()\\\\n  )\\\\n\\\\n  const JSONOutput = React.useMemo(\\\\n    () => JSON.stringify(convertToRaw(editorState.getCurrentContent())),\\\\n    [editorState]\\\\n  )\\\\n\\\\n  const HTMLOutput = React.useMemo(\\\\n    () =>\\\\n      draftToHtml(\\\\n        convertToRaw(editorState.getCurrentContent()),\\\\n        undefined,\\\\n        false,\\\\n        (entity, _text) =>\\\\n          `<${mentionSuggesstionsValueMap[entity?.data?.value]}>`\\\\n      ),\\\\n    [editorState]\\\\n  )\\\\n\\\\n  /** Programmatically insert Mentions - Either at last cursor or at End */\\\\n  const handleClick = () => {\\\\n    setEditorState(insertMention(editorState, mentionSuggesstionsProp[0], true))\\\\n  }\\\\n\\\\n  /** Initializing the editor state from HTML */\\\\n  React.useEffect(() => {\\\\n    initializeFromHTML &&\\\\n      setEditorState(\\\\n        convertHTMLToDraftState(inputHTML || '', mentionSuggestionsFromAPI)\\\\n      )\\\\n  }, [])\\\\n\\\\n  return (\\\\n    <>\\\\n      {insertMentionsProgrammatically && (\\\\n        <Button onClick={handleClick}>Insert Mention</Button>\\\\n      )}\\\\n      <br />\\\\n      <br />\\\\n      <RichTextEditor\\\\n        label='Email Body'\\\\n        id='emailBody'\\\\n        className='emailBody'\\\\n        isStripPastedStyles={true}\\\\n        // defaultEditorState={EditorState.createEmpty()}\\\\n        editorState={editorState}\\\\n        mention={{\\\\n          separator: ' ',\\\\n          trigger: '@',\\\\n          suggestions: mentionSuggesstionsProp\\\\n        }}\\\\n        onEditorStateChange={setEditorState}\\\\n        placeholder='Enter Email Body'\\\\n        hideToolbar={boolean('hideToolbar', false)}\\\\n      />\\\\n      {/* {editorState.getCurrentContent().getPlainText().length} */}\\\\n      {showJSONOutput && (\\\\n        <>\\\\n          <br />\\\\n          <br />\\\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\\\n            <code>{JSONOutput}</code>\\\\n          </Box>\\\\n        </>\\\\n      )}\\\\n      {showHTMLOutput && (\\\\n        <>\\\\n          <br />\\\\n          <br />\\\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\\\n            <code>{HTMLOutput}</code>\\\\n          </Box>\\\\n        </>\\\\n      )}\\\\n    </>\\\\n  )\\\\n}\\\\n\\\\nexport const Default = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <MainCompoonent\\\\n        showHTMLOutput={boolean('showHTMLOutput', false)}\\\\n        showJSONOutput={boolean('showJSONOutput', false)}\\\\n        insertMentionsProgrammatically={boolean(\\\\n          'insertMentionsProgrammatically',\\\\n          false\\\\n        )}\\\\n        initializeFromHTML={boolean('initializeFromHTML', false)}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/RichTextEditor.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\nimport React from 'react'\\n\\nimport { path } from '..'\\nimport RichTextEditor from '.'\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\nimport { EditorState, convertToRaw } from 'draft-js'\\nimport { insertMention, convertHTMLToDraftState } from './apis'\\nimport draftToHtml from 'draftjs-to-html'\\nimport Box from '../../atoms/Box'\\nimport Button from '../../atoms/Button'\\nimport { boolean } from '@storybook/addon-knobs'\\n\\ninterface IMainComponentProps {\\n  showHTMLOutput?: boolean\\n  showJSONOutput?: boolean\\n  insertMentionsProgrammatically?: boolean\\n  initializeFromHTML?: boolean\\n}\\n\\nexport default {parameters: {\\\"storySource\\\":{\\\"source\\\":\\\"\\\\n\\\\n// @ts-nocheck\\\\n// @ts-ignore\\\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\\\n// @ts-ignore\\\\nvar addSourceDecorator = require(\\\\\\\"@storybook/source-loader/preview\\\\\\\").addSource;\\\\n// @ts-ignore\\\\nvar __SOURCE_PREFIX__ = \\\\\\\"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/organisms/RichTextEditor\\\\\\\";\\\\n// @ts-ignore\\\\nvar __STORY__ = \\\\\\\"import React from 'react'\\\\\\\\n\\\\\\\\nimport { path } from '..'\\\\\\\\nimport RichTextEditor from '.'\\\\\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\\\\\nimport { EditorState, convertToRaw } from 'draft-js'\\\\\\\\nimport { insertMention, convertHTMLToDraftState } from './apis'\\\\\\\\nimport draftToHtml from 'draftjs-to-html'\\\\\\\\nimport Box from '../../atoms/Box'\\\\\\\\nimport Button from '../../atoms/Button'\\\\\\\\nimport { boolean } from '@storybook/addon-knobs'\\\\\\\\n\\\\\\\\ninterface IMainComponentProps {\\\\\\\\n  showHTMLOutput?: boolean\\\\\\\\n  showJSONOutput?: boolean\\\\\\\\n  insertMentionsProgrammatically?: boolean\\\\\\\\n  initializeFromHTML?: boolean\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/RichTextEditor`,\\\\\\\\n  component: RichTextEditor\\\\\\\\n}\\\\\\\\n\\\\\\\\n/** Mentions structure from API */\\\\\\\\nconst mentionSuggestionsFromAPI = [\\\\\\\\n  { text: 'Delivery Associate Name', value: 'dmmName', url: '#' },\\\\\\\\n  { text: 'Alert Date', value: 'time', url: '#' },\\\\\\\\n  { text: 'Account Name', value: 'accountname', url: '#' },\\\\\\\\n  { text: 'Account Code', value: 'accountCode', url: '#' },\\\\\\\\n  { text: 'Collected Value', value: 'collectedValue', url: '#' },\\\\\\\\n  { text: 'Package Value', value: 'actualvalue', url: '#' },\\\\\\\\n  { text: 'Currency', value: 'currency', url: '#' },\\\\\\\\n  { text: 'AWB Number', value: 'awbnumber', url: '#' }\\\\\\\\n]\\\\\\\\n\\\\\\\\n/** Mentions Text to Value map */\\\\\\\\nconst mentionSuggesstionsValueMap: Record<string, string> = {}\\\\\\\\n\\\\\\\\n/** Text & Value should have same content when sent to React-Draft */\\\\\\\\nconst mentionSuggesstionsProp = mentionSuggestionsFromAPI.map((m) => {\\\\\\\\n  mentionSuggesstionsValueMap[m.text] = m.value\\\\\\\\n  return { text: m.text, value: m.text, url: m.url }\\\\\\\\n})\\\\\\\\n\\\\\\\\nconst inputHTML =\\\\\\\\n  '<p style=\\\\\\\\\\\\\\\"text-align:left;\\\\\\\\\\\\\\\"><span style=\\\\\\\\\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\\\\\\\\\">Dear recipient,</span></p> <p><span style=\\\\\\\\\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\\\\\\\\\">Order </span><awbnumber><span style=\\\\\\\\\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\\\\\\\\\"> is arriving, should reach your destination at </span><time><span style=\\\\\\\\\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\\\\\\\\\">. </span></p>'\\\\\\\\n\\\\\\\\nconst MainCompoonent = ({\\\\\\\\n  initializeFromHTML,\\\\\\\\n  showHTMLOutput,\\\\\\\\n  showJSONOutput,\\\\\\\\n  insertMentionsProgrammatically\\\\\\\\n}: IMainComponentProps) => {\\\\\\\\n  /** Initialize with empty state */\\\\\\\\n  const [editorState, setEditorState] = React.useState(\\\\\\\\n    EditorState.createEmpty()\\\\\\\\n  )\\\\\\\\n\\\\\\\\n  const JSONOutput = React.useMemo(\\\\\\\\n    () => JSON.stringify(convertToRaw(editorState.getCurrentContent())),\\\\\\\\n    [editorState]\\\\\\\\n  )\\\\\\\\n\\\\\\\\n  const HTMLOutput = React.useMemo(\\\\\\\\n    () =>\\\\\\\\n      draftToHtml(\\\\\\\\n        convertToRaw(editorState.getCurrentContent()),\\\\\\\\n        undefined,\\\\\\\\n        false,\\\\\\\\n        (entity, _text) =>\\\\\\\\n          `<${mentionSuggesstionsValueMap[entity?.data?.value]}>`\\\\\\\\n      ),\\\\\\\\n    [editorState]\\\\\\\\n  )\\\\\\\\n\\\\\\\\n  /** Programmatically insert Mentions - Either at last cursor or at End */\\\\\\\\n  const handleClick = () => {\\\\\\\\n    setEditorState(insertMention(editorState, mentionSuggesstionsProp[0], true))\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  /** Initializing the editor state from HTML */\\\\\\\\n  React.useEffect(() => {\\\\\\\\n    initializeFromHTML &&\\\\\\\\n      setEditorState(\\\\\\\\n        convertHTMLToDraftState(inputHTML || '', mentionSuggestionsFromAPI)\\\\\\\\n      )\\\\\\\\n  }, [])\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <>\\\\\\\\n      {insertMentionsProgrammatically && (\\\\\\\\n        <Button onClick={handleClick}>Insert Mention</Button>\\\\\\\\n      )}\\\\\\\\n      <br />\\\\\\\\n      <br />\\\\\\\\n      <RichTextEditor\\\\\\\\n        label='Email Body'\\\\\\\\n        id='emailBody'\\\\\\\\n        className='emailBody'\\\\\\\\n        isStripPastedStyles={true}\\\\\\\\n        // defaultEditorState={EditorState.createEmpty()}\\\\\\\\n        editorState={editorState}\\\\\\\\n        mention={{\\\\\\\\n          separator: ' ',\\\\\\\\n          trigger: '@',\\\\\\\\n          suggestions: mentionSuggesstionsProp\\\\\\\\n        }}\\\\\\\\n        onEditorStateChange={setEditorState}\\\\\\\\n        placeholder='Enter Email Body'\\\\\\\\n        hideToolbar={boolean('hideToolbar', false)}\\\\\\\\n      />\\\\\\\\n      {/* {editorState.getCurrentContent().getPlainText().length} */}\\\\\\\\n      {showJSONOutput && (\\\\\\\\n        <>\\\\\\\\n          <br />\\\\\\\\n          <br />\\\\\\\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\\\\\\\n            <code>{JSONOutput}</code>\\\\\\\\n          </Box>\\\\\\\\n        </>\\\\\\\\n      )}\\\\\\\\n      {showHTMLOutput && (\\\\\\\\n        <>\\\\\\\\n          <br />\\\\\\\\n          <br />\\\\\\\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\\\\\\\n            <code>{HTMLOutput}</code>\\\\\\\\n          </Box>\\\\\\\\n        </>\\\\\\\\n      )}\\\\\\\\n    </>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const Default = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <MainCompoonent\\\\\\\\n        showHTMLOutput={boolean('showHTMLOutput', false)}\\\\\\\\n        showJSONOutput={boolean('showJSONOutput', false)}\\\\\\\\n        insertMentionsProgrammatically={boolean(\\\\\\\\n          'insertMentionsProgrammatically',\\\\\\\\n          false\\\\\\\\n        )}\\\\\\\\n        initializeFromHTML={boolean('initializeFromHTML', false)}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\";\\\\n// @ts-ignore\\\\nvar __ADDS_MAP__ = {};\\\\n// @ts-ignore\\\\nvar __MAIN_FILE_LOCATION__ = \\\\\\\"/RichTextEditor.stories.tsx\\\\\\\";\\\\n// @ts-ignore\\\\nvar __MODULE_DEPENDENCIES__ = [];\\\\n// @ts-ignore\\\\nvar __LOCAL_DEPENDENCIES__ = {};\\\\n// @ts-ignore\\\\nvar __IDS_TO_FRAMEWORKS__ = {};\\\\n        \\\\nimport React from 'react'\\\\n\\\\nimport { path } from '..'\\\\nimport RichTextEditor from '.'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport { EditorState, convertToRaw } from 'draft-js'\\\\nimport { insertMention, convertHTMLToDraftState } from './apis'\\\\nimport draftToHtml from 'draftjs-to-html'\\\\nimport Box from '../../atoms/Box'\\\\nimport Button from '../../atoms/Button'\\\\nimport { boolean } from '@storybook/addon-knobs'\\\\n\\\\ninterface IMainComponentProps {\\\\n  showHTMLOutput?: boolean\\\\n  showJSONOutput?: boolean\\\\n  insertMentionsProgrammatically?: boolean\\\\n  initializeFromHTML?: boolean\\\\n}\\\\n\\\\nexport default {parameters: {\\\\\\\"storySource\\\\\\\":{\\\\\\\"source\\\\\\\":\\\\\\\"import React from 'react'\\\\\\\\n\\\\\\\\nimport { path } from '..'\\\\\\\\nimport RichTextEditor from '.'\\\\\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\\\\\nimport { EditorState, convertToRaw } from 'draft-js'\\\\\\\\nimport { insertMention, convertHTMLToDraftState } from './apis'\\\\\\\\nimport draftToHtml from 'draftjs-to-html'\\\\\\\\nimport Box from '../../atoms/Box'\\\\\\\\nimport Button from '../../atoms/Button'\\\\\\\\nimport { boolean } from '@storybook/addon-knobs'\\\\\\\\n\\\\\\\\ninterface IMainComponentProps {\\\\\\\\n  showHTMLOutput?: boolean\\\\\\\\n  showJSONOutput?: boolean\\\\\\\\n  insertMentionsProgrammatically?: boolean\\\\\\\\n  initializeFromHTML?: boolean\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/RichTextEditor`,\\\\\\\\n  component: RichTextEditor\\\\\\\\n}\\\\\\\\n\\\\\\\\n/** Mentions structure from API */\\\\\\\\nconst mentionSuggestionsFromAPI = [\\\\\\\\n  { text: 'Delivery Associate Name', value: 'dmmName', url: '#' },\\\\\\\\n  { text: 'Alert Date', value: 'time', url: '#' },\\\\\\\\n  { text: 'Account Name', value: 'accountname', url: '#' },\\\\\\\\n  { text: 'Account Code', value: 'accountCode', url: '#' },\\\\\\\\n  { text: 'Collected Value', value: 'collectedValue', url: '#' },\\\\\\\\n  { text: 'Package Value', value: 'actualvalue', url: '#' },\\\\\\\\n  { text: 'Currency', value: 'currency', url: '#' },\\\\\\\\n  { text: 'AWB Number', value: 'awbnumber', url: '#' }\\\\\\\\n]\\\\\\\\n\\\\\\\\n/** Mentions Text to Value map */\\\\\\\\nconst mentionSuggesstionsValueMap: Record<string, string> = {}\\\\\\\\n\\\\\\\\n/** Text & Value should have same content when sent to React-Draft */\\\\\\\\nconst mentionSuggesstionsProp = mentionSuggestionsFromAPI.map((m) => {\\\\\\\\n  mentionSuggesstionsValueMap[m.text] = m.value\\\\\\\\n  return { text: m.text, value: m.text, url: m.url }\\\\\\\\n})\\\\\\\\n\\\\\\\\nconst inputHTML =\\\\\\\\n  '<p style=\\\\\\\\\\\\\\\"text-align:left;\\\\\\\\\\\\\\\"><span style=\\\\\\\\\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\\\\\\\\\">Dear recipient,</span></p> <p><span style=\\\\\\\\\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\\\\\\\\\">Order </span><awbnumber><span style=\\\\\\\\\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\\\\\\\\\"> is arriving, should reach your destination at </span><time><span style=\\\\\\\\\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\\\\\\\\\">. </span></p>'\\\\\\\\n\\\\\\\\nconst MainCompoonent = ({\\\\\\\\n  initializeFromHTML,\\\\\\\\n  showHTMLOutput,\\\\\\\\n  showJSONOutput,\\\\\\\\n  insertMentionsProgrammatically\\\\\\\\n}: IMainComponentProps) => {\\\\\\\\n  /** Initialize with empty state */\\\\\\\\n  const [editorState, setEditorState] = React.useState(\\\\\\\\n    EditorState.createEmpty()\\\\\\\\n  )\\\\\\\\n\\\\\\\\n  const JSONOutput = React.useMemo(\\\\\\\\n    () => JSON.stringify(convertToRaw(editorState.getCurrentContent())),\\\\\\\\n    [editorState]\\\\\\\\n  )\\\\\\\\n\\\\\\\\n  const HTMLOutput = React.useMemo(\\\\\\\\n    () =>\\\\\\\\n      draftToHtml(\\\\\\\\n        convertToRaw(editorState.getCurrentContent()),\\\\\\\\n        undefined,\\\\\\\\n        false,\\\\\\\\n        (entity, _text) =>\\\\\\\\n          `<${mentionSuggesstionsValueMap[entity?.data?.value]}>`\\\\\\\\n      ),\\\\\\\\n    [editorState]\\\\\\\\n  )\\\\\\\\n\\\\\\\\n  /** Programmatically insert Mentions - Either at last cursor or at End */\\\\\\\\n  const handleClick = () => {\\\\\\\\n    setEditorState(insertMention(editorState, mentionSuggesstionsProp[0], true))\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  /** Initializing the editor state from HTML */\\\\\\\\n  React.useEffect(() => {\\\\\\\\n    initializeFromHTML &&\\\\\\\\n      setEditorState(\\\\\\\\n        convertHTMLToDraftState(inputHTML || '', mentionSuggestionsFromAPI)\\\\\\\\n      )\\\\\\\\n  }, [])\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <>\\\\\\\\n      {insertMentionsProgrammatically && (\\\\\\\\n        <Button onClick={handleClick}>Insert Mention</Button>\\\\\\\\n      )}\\\\\\\\n      <br />\\\\\\\\n      <br />\\\\\\\\n      <RichTextEditor\\\\\\\\n        label='Email Body'\\\\\\\\n        id='emailBody'\\\\\\\\n        className='emailBody'\\\\\\\\n        isStripPastedStyles={true}\\\\\\\\n        // defaultEditorState={EditorState.createEmpty()}\\\\\\\\n        editorState={editorState}\\\\\\\\n        mention={{\\\\\\\\n          separator: ' ',\\\\\\\\n          trigger: '@',\\\\\\\\n          suggestions: mentionSuggesstionsProp\\\\\\\\n        }}\\\\\\\\n        onEditorStateChange={setEditorState}\\\\\\\\n        placeholder='Enter Email Body'\\\\\\\\n        hideToolbar={boolean('hideToolbar', false)}\\\\\\\\n      />\\\\\\\\n      {/* {editorState.getCurrentContent().getPlainText().length} */}\\\\\\\\n      {showJSONOutput && (\\\\\\\\n        <>\\\\\\\\n          <br />\\\\\\\\n          <br />\\\\\\\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\\\\\\\n            <code>{JSONOutput}</code>\\\\\\\\n          </Box>\\\\\\\\n        </>\\\\\\\\n      )}\\\\\\\\n      {showHTMLOutput && (\\\\\\\\n        <>\\\\\\\\n          <br />\\\\\\\\n          <br />\\\\\\\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\\\\\\\n            <code>{HTMLOutput}</code>\\\\\\\\n          </Box>\\\\\\\\n        </>\\\\\\\\n      )}\\\\\\\\n    </>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const Default = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <MainCompoonent\\\\\\\\n        showHTMLOutput={boolean('showHTMLOutput', false)}\\\\\\\\n        showJSONOutput={boolean('showJSONOutput', false)}\\\\\\\\n        insertMentionsProgrammatically={boolean(\\\\\\\\n          'insertMentionsProgrammatically',\\\\\\\\n          false\\\\\\\\n        )}\\\\\\\\n        initializeFromHTML={boolean('initializeFromHTML', false)}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\",\\\\\\\"locationsMap\\\\\\\":{}},},\\\\n  title: `${path}/RichTextEditor`,\\\\n  component: RichTextEditor\\\\n}\\\\n\\\\n/** Mentions structure from API */\\\\nconst mentionSuggestionsFromAPI = [\\\\n  { text: 'Delivery Associate Name', value: 'dmmName', url: '#' },\\\\n  { text: 'Alert Date', value: 'time', url: '#' },\\\\n  { text: 'Account Name', value: 'accountname', url: '#' },\\\\n  { text: 'Account Code', value: 'accountCode', url: '#' },\\\\n  { text: 'Collected Value', value: 'collectedValue', url: '#' },\\\\n  { text: 'Package Value', value: 'actualvalue', url: '#' },\\\\n  { text: 'Currency', value: 'currency', url: '#' },\\\\n  { text: 'AWB Number', value: 'awbnumber', url: '#' }\\\\n]\\\\n\\\\n/** Mentions Text to Value map */\\\\nconst mentionSuggesstionsValueMap: Record<string, string> = {}\\\\n\\\\n/** Text & Value should have same content when sent to React-Draft */\\\\nconst mentionSuggesstionsProp = mentionSuggestionsFromAPI.map((m) => {\\\\n  mentionSuggesstionsValueMap[m.text] = m.value\\\\n  return { text: m.text, value: m.text, url: m.url }\\\\n})\\\\n\\\\nconst inputHTML =\\\\n  '<p style=\\\\\\\"text-align:left;\\\\\\\"><span style=\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\">Dear recipient,</span></p> <p><span style=\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\">Order </span><awbnumber><span style=\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\"> is arriving, should reach your destination at </span><time><span style=\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\">. </span></p>'\\\\n\\\\nconst MainCompoonent = ({\\\\n  initializeFromHTML,\\\\n  showHTMLOutput,\\\\n  showJSONOutput,\\\\n  insertMentionsProgrammatically\\\\n}: IMainComponentProps) => {\\\\n  /** Initialize with empty state */\\\\n  const [editorState, setEditorState] = React.useState(\\\\n    EditorState.createEmpty()\\\\n  )\\\\n\\\\n  const JSONOutput = React.useMemo(\\\\n    () => JSON.stringify(convertToRaw(editorState.getCurrentContent())),\\\\n    [editorState]\\\\n  )\\\\n\\\\n  const HTMLOutput = React.useMemo(\\\\n    () =>\\\\n      draftToHtml(\\\\n        convertToRaw(editorState.getCurrentContent()),\\\\n        undefined,\\\\n        false,\\\\n        (entity, _text) =>\\\\n          `<${mentionSuggesstionsValueMap[entity?.data?.value]}>`\\\\n      ),\\\\n    [editorState]\\\\n  )\\\\n\\\\n  /** Programmatically insert Mentions - Either at last cursor or at End */\\\\n  const handleClick = () => {\\\\n    setEditorState(insertMention(editorState, mentionSuggesstionsProp[0], true))\\\\n  }\\\\n\\\\n  /** Initializing the editor state from HTML */\\\\n  React.useEffect(() => {\\\\n    initializeFromHTML &&\\\\n      setEditorState(\\\\n        convertHTMLToDraftState(inputHTML || '', mentionSuggestionsFromAPI)\\\\n      )\\\\n  }, [])\\\\n\\\\n  return (\\\\n    <>\\\\n      {insertMentionsProgrammatically && (\\\\n        <Button onClick={handleClick}>Insert Mention</Button>\\\\n      )}\\\\n      <br />\\\\n      <br />\\\\n      <RichTextEditor\\\\n        label='Email Body'\\\\n        id='emailBody'\\\\n        className='emailBody'\\\\n        isStripPastedStyles={true}\\\\n        // defaultEditorState={EditorState.createEmpty()}\\\\n        editorState={editorState}\\\\n        mention={{\\\\n          separator: ' ',\\\\n          trigger: '@',\\\\n          suggestions: mentionSuggesstionsProp\\\\n        }}\\\\n        onEditorStateChange={setEditorState}\\\\n        placeholder='Enter Email Body'\\\\n        hideToolbar={boolean('hideToolbar', false)}\\\\n      />\\\\n      {/* {editorState.getCurrentContent().getPlainText().length} */}\\\\n      {showJSONOutput && (\\\\n        <>\\\\n          <br />\\\\n          <br />\\\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\\\n            <code>{JSONOutput}</code>\\\\n          </Box>\\\\n        </>\\\\n      )}\\\\n      {showHTMLOutput && (\\\\n        <>\\\\n          <br />\\\\n          <br />\\\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\\\n            <code>{HTMLOutput}</code>\\\\n          </Box>\\\\n        </>\\\\n      )}\\\\n    </>\\\\n  )\\\\n}\\\\n\\\\nexport const Default = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <MainCompoonent\\\\n        showHTMLOutput={boolean('showHTMLOutput', false)}\\\\n        showJSONOutput={boolean('showJSONOutput', false)}\\\\n        insertMentionsProgrammatically={boolean(\\\\n          'insertMentionsProgrammatically',\\\\n          false\\\\n        )}\\\\n        initializeFromHTML={boolean('initializeFromHTML', false)}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\",\\\"locationsMap\\\":{}},\\\"storySource\\\":{\\\"source\\\":\\\"import React from 'react'\\\\n\\\\nimport { path } from '..'\\\\nimport RichTextEditor from '.'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport { EditorState, convertToRaw } from 'draft-js'\\\\nimport { insertMention, convertHTMLToDraftState } from './apis'\\\\nimport draftToHtml from 'draftjs-to-html'\\\\nimport Box from '../../atoms/Box'\\\\nimport Button from '../../atoms/Button'\\\\nimport { boolean } from '@storybook/addon-knobs'\\\\n\\\\ninterface IMainComponentProps {\\\\n  showHTMLOutput?: boolean\\\\n  showJSONOutput?: boolean\\\\n  insertMentionsProgrammatically?: boolean\\\\n  initializeFromHTML?: boolean\\\\n}\\\\n\\\\nexport default {\\\\n  title: `${path}/RichTextEditor`,\\\\n  component: RichTextEditor\\\\n}\\\\n\\\\n/** Mentions structure from API */\\\\nconst mentionSuggestionsFromAPI = [\\\\n  { text: 'Delivery Associate Name', value: 'dmmName', url: '#' },\\\\n  { text: 'Alert Date', value: 'time', url: '#' },\\\\n  { text: 'Account Name', value: 'accountname', url: '#' },\\\\n  { text: 'Account Code', value: 'accountCode', url: '#' },\\\\n  { text: 'Collected Value', value: 'collectedValue', url: '#' },\\\\n  { text: 'Package Value', value: 'actualvalue', url: '#' },\\\\n  { text: 'Currency', value: 'currency', url: '#' },\\\\n  { text: 'AWB Number', value: 'awbnumber', url: '#' }\\\\n]\\\\n\\\\n/** Mentions Text to Value map */\\\\nconst mentionSuggesstionsValueMap: Record<string, string> = {}\\\\n\\\\n/** Text & Value should have same content when sent to React-Draft */\\\\nconst mentionSuggesstionsProp = mentionSuggestionsFromAPI.map((m) => {\\\\n  mentionSuggesstionsValueMap[m.text] = m.value\\\\n  return { text: m.text, value: m.text, url: m.url }\\\\n})\\\\n\\\\nconst inputHTML =\\\\n  '<p style=\\\\\\\"text-align:left;\\\\\\\"><span style=\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\">Dear recipient,</span></p> <p><span style=\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\">Order </span><awbnumber><span style=\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\"> is arriving, should reach your destination at </span><time><span style=\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\">. </span></p>'\\\\n\\\\nconst MainCompoonent = ({\\\\n  initializeFromHTML,\\\\n  showHTMLOutput,\\\\n  showJSONOutput,\\\\n  insertMentionsProgrammatically\\\\n}: IMainComponentProps) => {\\\\n  /** Initialize with empty state */\\\\n  const [editorState, setEditorState] = React.useState(\\\\n    EditorState.createEmpty()\\\\n  )\\\\n\\\\n  const JSONOutput = React.useMemo(\\\\n    () => JSON.stringify(convertToRaw(editorState.getCurrentContent())),\\\\n    [editorState]\\\\n  )\\\\n\\\\n  const HTMLOutput = React.useMemo(\\\\n    () =>\\\\n      draftToHtml(\\\\n        convertToRaw(editorState.getCurrentContent()),\\\\n        undefined,\\\\n        false,\\\\n        (entity, _text) =>\\\\n          `<${mentionSuggesstionsValueMap[entity?.data?.value]}>`\\\\n      ),\\\\n    [editorState]\\\\n  )\\\\n\\\\n  /** Programmatically insert Mentions - Either at last cursor or at End */\\\\n  const handleClick = () => {\\\\n    setEditorState(insertMention(editorState, mentionSuggesstionsProp[0], true))\\\\n  }\\\\n\\\\n  /** Initializing the editor state from HTML */\\\\n  React.useEffect(() => {\\\\n    initializeFromHTML &&\\\\n      setEditorState(\\\\n        convertHTMLToDraftState(inputHTML || '', mentionSuggestionsFromAPI)\\\\n      )\\\\n  }, [])\\\\n\\\\n  return (\\\\n    <>\\\\n      {insertMentionsProgrammatically && (\\\\n        <Button onClick={handleClick}>Insert Mention</Button>\\\\n      )}\\\\n      <br />\\\\n      <br />\\\\n      <RichTextEditor\\\\n        label='Email Body'\\\\n        id='emailBody'\\\\n        className='emailBody'\\\\n        isStripPastedStyles={true}\\\\n        // defaultEditorState={EditorState.createEmpty()}\\\\n        editorState={editorState}\\\\n        mention={{\\\\n          separator: ' ',\\\\n          trigger: '@',\\\\n          suggestions: mentionSuggesstionsProp\\\\n        }}\\\\n        onEditorStateChange={setEditorState}\\\\n        placeholder='Enter Email Body'\\\\n        hideToolbar={boolean('hideToolbar', false)}\\\\n      />\\\\n      {/* {editorState.getCurrentContent().getPlainText().length} */}\\\\n      {showJSONOutput && (\\\\n        <>\\\\n          <br />\\\\n          <br />\\\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\\\n            <code>{JSONOutput}</code>\\\\n          </Box>\\\\n        </>\\\\n      )}\\\\n      {showHTMLOutput && (\\\\n        <>\\\\n          <br />\\\\n          <br />\\\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\\\n            <code>{HTMLOutput}</code>\\\\n          </Box>\\\\n        </>\\\\n      )}\\\\n    </>\\\\n  )\\\\n}\\\\n\\\\nexport const Default = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <MainCompoonent\\\\n        showHTMLOutput={boolean('showHTMLOutput', false)}\\\\n        showJSONOutput={boolean('showJSONOutput', false)}\\\\n        insertMentionsProgrammatically={boolean(\\\\n          'insertMentionsProgrammatically',\\\\n          false\\\\n        )}\\\\n        initializeFromHTML={boolean('initializeFromHTML', false)}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\",\\\"locationsMap\\\":{}},},\\n  title: `${path}/RichTextEditor`,\\n  component: RichTextEditor\\n}\\n\\n/** Mentions structure from API */\\nconst mentionSuggestionsFromAPI = [\\n  { text: 'Delivery Associate Name', value: 'dmmName', url: '#' },\\n  { text: 'Alert Date', value: 'time', url: '#' },\\n  { text: 'Account Name', value: 'accountname', url: '#' },\\n  { text: 'Account Code', value: 'accountCode', url: '#' },\\n  { text: 'Collected Value', value: 'collectedValue', url: '#' },\\n  { text: 'Package Value', value: 'actualvalue', url: '#' },\\n  { text: 'Currency', value: 'currency', url: '#' },\\n  { text: 'AWB Number', value: 'awbnumber', url: '#' }\\n]\\n\\n/** Mentions Text to Value map */\\nconst mentionSuggesstionsValueMap: Record<string, string> = {}\\n\\n/** Text & Value should have same content when sent to React-Draft */\\nconst mentionSuggesstionsProp = mentionSuggestionsFromAPI.map((m) => {\\n  mentionSuggesstionsValueMap[m.text] = m.value\\n  return { text: m.text, value: m.text, url: m.url }\\n})\\n\\nconst inputHTML =\\n  '<p style=\\\"text-align:left;\\\"><span style=\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\">Dear recipient,</span></p> <p><span style=\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\">Order </span><awbnumber><span style=\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\"> is arriving, should reach your destination at </span><time><span style=\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\">. </span></p>'\\n\\nconst MainCompoonent = ({\\n  initializeFromHTML,\\n  showHTMLOutput,\\n  showJSONOutput,\\n  insertMentionsProgrammatically\\n}: IMainComponentProps) => {\\n  /** Initialize with empty state */\\n  const [editorState, setEditorState] = React.useState(\\n    EditorState.createEmpty()\\n  )\\n\\n  const JSONOutput = React.useMemo(\\n    () => JSON.stringify(convertToRaw(editorState.getCurrentContent())),\\n    [editorState]\\n  )\\n\\n  const HTMLOutput = React.useMemo(\\n    () =>\\n      draftToHtml(\\n        convertToRaw(editorState.getCurrentContent()),\\n        undefined,\\n        false,\\n        (entity, _text) =>\\n          `<${mentionSuggesstionsValueMap[entity?.data?.value]}>`\\n      ),\\n    [editorState]\\n  )\\n\\n  /** Programmatically insert Mentions - Either at last cursor or at End */\\n  const handleClick = () => {\\n    setEditorState(insertMention(editorState, mentionSuggesstionsProp[0], true))\\n  }\\n\\n  /** Initializing the editor state from HTML */\\n  React.useEffect(() => {\\n    initializeFromHTML &&\\n      setEditorState(\\n        convertHTMLToDraftState(inputHTML || '', mentionSuggestionsFromAPI)\\n      )\\n  }, [])\\n\\n  return (\\n    <>\\n      {insertMentionsProgrammatically && (\\n        <Button onClick={handleClick}>Insert Mention</Button>\\n      )}\\n      <br />\\n      <br />\\n      <RichTextEditor\\n        label='Email Body'\\n        id='emailBody'\\n        className='emailBody'\\n        isStripPastedStyles={true}\\n        // defaultEditorState={EditorState.createEmpty()}\\n        editorState={editorState}\\n        mention={{\\n          separator: ' ',\\n          trigger: '@',\\n          suggestions: mentionSuggesstionsProp\\n        }}\\n        onEditorStateChange={setEditorState}\\n        placeholder='Enter Email Body'\\n        hideToolbar={boolean('hideToolbar', false)}\\n      />\\n      {/* {editorState.getCurrentContent().getPlainText().length} */}\\n      {showJSONOutput && (\\n        <>\\n          <br />\\n          <br />\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\n            <code>{JSONOutput}</code>\\n          </Box>\\n        </>\\n      )}\\n      {showHTMLOutput && (\\n        <>\\n          <br />\\n          <br />\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\n            <code>{HTMLOutput}</code>\\n          </Box>\\n        </>\\n      )}\\n    </>\\n  )\\n}\\n\\nexport const Default = addSourceDecorator(addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <MainCompoonent\\n        showHTMLOutput={boolean('showHTMLOutput', false)}\\n        showJSONOutput={boolean('showJSONOutput', false)}\\n        insertMentionsProgrammatically={boolean(\\n          'insertMentionsProgrammatically',\\n          false\\n        )}\\n        initializeFromHTML={boolean('initializeFromHTML', false)}\\n      />\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\";\n// @ts-ignore\nvar __ADDS_MAP__ = {};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = \"/RichTextEditor.stories.tsx\";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \n\n/* eslint-disable */\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\n// @ts-ignore\nvar addSourceDecorator = require(\"@storybook/source-loader/preview\").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/organisms/RichTextEditor\";\n// @ts-ignore\nvar __STORY__ = \"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/organisms/RichTextEditor\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"import React from 'react'\\\\n\\\\nimport { path } from '..'\\\\nimport RichTextEditor from '.'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport { EditorState, convertToRaw } from 'draft-js'\\\\nimport { insertMention, convertHTMLToDraftState } from './apis'\\\\nimport draftToHtml from 'draftjs-to-html'\\\\nimport Box from '../../atoms/Box'\\\\nimport Button from '../../atoms/Button'\\\\nimport { boolean } from '@storybook/addon-knobs'\\\\n\\\\ninterface IMainComponentProps {\\\\n  showHTMLOutput?: boolean\\\\n  showJSONOutput?: boolean\\\\n  insertMentionsProgrammatically?: boolean\\\\n  initializeFromHTML?: boolean\\\\n}\\\\n\\\\nexport default {\\\\n  title: `${path}/RichTextEditor`,\\\\n  component: RichTextEditor\\\\n}\\\\n\\\\n/** Mentions structure from API */\\\\nconst mentionSuggestionsFromAPI = [\\\\n  { text: 'Delivery Associate Name', value: 'dmmName', url: '#' },\\\\n  { text: 'Alert Date', value: 'time', url: '#' },\\\\n  { text: 'Account Name', value: 'accountname', url: '#' },\\\\n  { text: 'Account Code', value: 'accountCode', url: '#' },\\\\n  { text: 'Collected Value', value: 'collectedValue', url: '#' },\\\\n  { text: 'Package Value', value: 'actualvalue', url: '#' },\\\\n  { text: 'Currency', value: 'currency', url: '#' },\\\\n  { text: 'AWB Number', value: 'awbnumber', url: '#' }\\\\n]\\\\n\\\\n/** Mentions Text to Value map */\\\\nconst mentionSuggesstionsValueMap: Record<string, string> = {}\\\\n\\\\n/** Text & Value should have same content when sent to React-Draft */\\\\nconst mentionSuggesstionsProp = mentionSuggestionsFromAPI.map((m) => {\\\\n  mentionSuggesstionsValueMap[m.text] = m.value\\\\n  return { text: m.text, value: m.text, url: m.url }\\\\n})\\\\n\\\\nconst inputHTML =\\\\n  '<p style=\\\\\\\"text-align:left;\\\\\\\"><span style=\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\">Dear recipient,</span></p> <p><span style=\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\">Order </span><awbnumber><span style=\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\"> is arriving, should reach your destination at </span><time><span style=\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\">. </span></p>'\\\\n\\\\nconst MainCompoonent = ({\\\\n  initializeFromHTML,\\\\n  showHTMLOutput,\\\\n  showJSONOutput,\\\\n  insertMentionsProgrammatically\\\\n}: IMainComponentProps) => {\\\\n  /** Initialize with empty state */\\\\n  const [editorState, setEditorState] = React.useState(\\\\n    EditorState.createEmpty()\\\\n  )\\\\n\\\\n  const JSONOutput = React.useMemo(\\\\n    () => JSON.stringify(convertToRaw(editorState.getCurrentContent())),\\\\n    [editorState]\\\\n  )\\\\n\\\\n  const HTMLOutput = React.useMemo(\\\\n    () =>\\\\n      draftToHtml(\\\\n        convertToRaw(editorState.getCurrentContent()),\\\\n        undefined,\\\\n        false,\\\\n        (entity, _text) =>\\\\n          `<${mentionSuggesstionsValueMap[entity?.data?.value]}>`\\\\n      ),\\\\n    [editorState]\\\\n  )\\\\n\\\\n  /** Programmatically insert Mentions - Either at last cursor or at End */\\\\n  const handleClick = () => {\\\\n    setEditorState(insertMention(editorState, mentionSuggesstionsProp[0], true))\\\\n  }\\\\n\\\\n  /** Initializing the editor state from HTML */\\\\n  React.useEffect(() => {\\\\n    initializeFromHTML &&\\\\n      setEditorState(\\\\n        convertHTMLToDraftState(inputHTML || '', mentionSuggestionsFromAPI)\\\\n      )\\\\n  }, [])\\\\n\\\\n  return (\\\\n    <>\\\\n      {insertMentionsProgrammatically && (\\\\n        <Button onClick={handleClick}>Insert Mention</Button>\\\\n      )}\\\\n      <br />\\\\n      <br />\\\\n      <RichTextEditor\\\\n        label='Email Body'\\\\n        id='emailBody'\\\\n        className='emailBody'\\\\n        isStripPastedStyles={true}\\\\n        // defaultEditorState={EditorState.createEmpty()}\\\\n        editorState={editorState}\\\\n        mention={{\\\\n          separator: ' ',\\\\n          trigger: '@',\\\\n          suggestions: mentionSuggesstionsProp\\\\n        }}\\\\n        onEditorStateChange={setEditorState}\\\\n        placeholder='Enter Email Body'\\\\n        hideToolbar={boolean('hideToolbar', false)}\\\\n      />\\\\n      {/* {editorState.getCurrentContent().getPlainText().length} */}\\\\n      {showJSONOutput && (\\\\n        <>\\\\n          <br />\\\\n          <br />\\\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\\\n            <code>{JSONOutput}</code>\\\\n          </Box>\\\\n        </>\\\\n      )}\\\\n      {showHTMLOutput && (\\\\n        <>\\\\n          <br />\\\\n          <br />\\\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\\\n            <code>{HTMLOutput}</code>\\\\n          </Box>\\\\n        </>\\\\n      )}\\\\n    </>\\\\n  )\\\\n}\\\\n\\\\nexport const Default = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <MainCompoonent\\\\n        showHTMLOutput={boolean('showHTMLOutput', false)}\\\\n        showJSONOutput={boolean('showJSONOutput', false)}\\\\n        insertMentionsProgrammatically={boolean(\\\\n          'insertMentionsProgrammatically',\\\\n          false\\\\n        )}\\\\n        initializeFromHTML={boolean('initializeFromHTML', false)}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/RichTextEditor.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\nimport React from 'react'\\n\\nimport { path } from '..'\\nimport RichTextEditor from '.'\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\nimport { EditorState, convertToRaw } from 'draft-js'\\nimport { insertMention, convertHTMLToDraftState } from './apis'\\nimport draftToHtml from 'draftjs-to-html'\\nimport Box from '../../atoms/Box'\\nimport Button from '../../atoms/Button'\\nimport { boolean } from '@storybook/addon-knobs'\\n\\ninterface IMainComponentProps {\\n  showHTMLOutput?: boolean\\n  showJSONOutput?: boolean\\n  insertMentionsProgrammatically?: boolean\\n  initializeFromHTML?: boolean\\n}\\n\\nexport default {parameters: {\\\"storySource\\\":{\\\"source\\\":\\\"import React from 'react'\\\\n\\\\nimport { path } from '..'\\\\nimport RichTextEditor from '.'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport { EditorState, convertToRaw } from 'draft-js'\\\\nimport { insertMention, convertHTMLToDraftState } from './apis'\\\\nimport draftToHtml from 'draftjs-to-html'\\\\nimport Box from '../../atoms/Box'\\\\nimport Button from '../../atoms/Button'\\\\nimport { boolean } from '@storybook/addon-knobs'\\\\n\\\\ninterface IMainComponentProps {\\\\n  showHTMLOutput?: boolean\\\\n  showJSONOutput?: boolean\\\\n  insertMentionsProgrammatically?: boolean\\\\n  initializeFromHTML?: boolean\\\\n}\\\\n\\\\nexport default {\\\\n  title: `${path}/RichTextEditor`,\\\\n  component: RichTextEditor\\\\n}\\\\n\\\\n/** Mentions structure from API */\\\\nconst mentionSuggestionsFromAPI = [\\\\n  { text: 'Delivery Associate Name', value: 'dmmName', url: '#' },\\\\n  { text: 'Alert Date', value: 'time', url: '#' },\\\\n  { text: 'Account Name', value: 'accountname', url: '#' },\\\\n  { text: 'Account Code', value: 'accountCode', url: '#' },\\\\n  { text: 'Collected Value', value: 'collectedValue', url: '#' },\\\\n  { text: 'Package Value', value: 'actualvalue', url: '#' },\\\\n  { text: 'Currency', value: 'currency', url: '#' },\\\\n  { text: 'AWB Number', value: 'awbnumber', url: '#' }\\\\n]\\\\n\\\\n/** Mentions Text to Value map */\\\\nconst mentionSuggesstionsValueMap: Record<string, string> = {}\\\\n\\\\n/** Text & Value should have same content when sent to React-Draft */\\\\nconst mentionSuggesstionsProp = mentionSuggestionsFromAPI.map((m) => {\\\\n  mentionSuggesstionsValueMap[m.text] = m.value\\\\n  return { text: m.text, value: m.text, url: m.url }\\\\n})\\\\n\\\\nconst inputHTML =\\\\n  '<p style=\\\\\\\"text-align:left;\\\\\\\"><span style=\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\">Dear recipient,</span></p> <p><span style=\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\">Order </span><awbnumber><span style=\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\"> is arriving, should reach your destination at </span><time><span style=\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\">. </span></p>'\\\\n\\\\nconst MainCompoonent = ({\\\\n  initializeFromHTML,\\\\n  showHTMLOutput,\\\\n  showJSONOutput,\\\\n  insertMentionsProgrammatically\\\\n}: IMainComponentProps) => {\\\\n  /** Initialize with empty state */\\\\n  const [editorState, setEditorState] = React.useState(\\\\n    EditorState.createEmpty()\\\\n  )\\\\n\\\\n  const JSONOutput = React.useMemo(\\\\n    () => JSON.stringify(convertToRaw(editorState.getCurrentContent())),\\\\n    [editorState]\\\\n  )\\\\n\\\\n  const HTMLOutput = React.useMemo(\\\\n    () =>\\\\n      draftToHtml(\\\\n        convertToRaw(editorState.getCurrentContent()),\\\\n        undefined,\\\\n        false,\\\\n        (entity, _text) =>\\\\n          `<${mentionSuggesstionsValueMap[entity?.data?.value]}>`\\\\n      ),\\\\n    [editorState]\\\\n  )\\\\n\\\\n  /** Programmatically insert Mentions - Either at last cursor or at End */\\\\n  const handleClick = () => {\\\\n    setEditorState(insertMention(editorState, mentionSuggesstionsProp[0], true))\\\\n  }\\\\n\\\\n  /** Initializing the editor state from HTML */\\\\n  React.useEffect(() => {\\\\n    initializeFromHTML &&\\\\n      setEditorState(\\\\n        convertHTMLToDraftState(inputHTML || '', mentionSuggestionsFromAPI)\\\\n      )\\\\n  }, [])\\\\n\\\\n  return (\\\\n    <>\\\\n      {insertMentionsProgrammatically && (\\\\n        <Button onClick={handleClick}>Insert Mention</Button>\\\\n      )}\\\\n      <br />\\\\n      <br />\\\\n      <RichTextEditor\\\\n        label='Email Body'\\\\n        id='emailBody'\\\\n        className='emailBody'\\\\n        isStripPastedStyles={true}\\\\n        // defaultEditorState={EditorState.createEmpty()}\\\\n        editorState={editorState}\\\\n        mention={{\\\\n          separator: ' ',\\\\n          trigger: '@',\\\\n          suggestions: mentionSuggesstionsProp\\\\n        }}\\\\n        onEditorStateChange={setEditorState}\\\\n        placeholder='Enter Email Body'\\\\n        hideToolbar={boolean('hideToolbar', false)}\\\\n      />\\\\n      {/* {editorState.getCurrentContent().getPlainText().length} */}\\\\n      {showJSONOutput && (\\\\n        <>\\\\n          <br />\\\\n          <br />\\\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\\\n            <code>{JSONOutput}</code>\\\\n          </Box>\\\\n        </>\\\\n      )}\\\\n      {showHTMLOutput && (\\\\n        <>\\\\n          <br />\\\\n          <br />\\\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\\\n            <code>{HTMLOutput}</code>\\\\n          </Box>\\\\n        </>\\\\n      )}\\\\n    </>\\\\n  )\\\\n}\\\\n\\\\nexport const Default = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <MainCompoonent\\\\n        showHTMLOutput={boolean('showHTMLOutput', false)}\\\\n        showJSONOutput={boolean('showJSONOutput', false)}\\\\n        insertMentionsProgrammatically={boolean(\\\\n          'insertMentionsProgrammatically',\\\\n          false\\\\n        )}\\\\n        initializeFromHTML={boolean('initializeFromHTML', false)}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\",\\\"locationsMap\\\":{}},},\\n  title: `${path}/RichTextEditor`,\\n  component: RichTextEditor\\n}\\n\\n/** Mentions structure from API */\\nconst mentionSuggestionsFromAPI = [\\n  { text: 'Delivery Associate Name', value: 'dmmName', url: '#' },\\n  { text: 'Alert Date', value: 'time', url: '#' },\\n  { text: 'Account Name', value: 'accountname', url: '#' },\\n  { text: 'Account Code', value: 'accountCode', url: '#' },\\n  { text: 'Collected Value', value: 'collectedValue', url: '#' },\\n  { text: 'Package Value', value: 'actualvalue', url: '#' },\\n  { text: 'Currency', value: 'currency', url: '#' },\\n  { text: 'AWB Number', value: 'awbnumber', url: '#' }\\n]\\n\\n/** Mentions Text to Value map */\\nconst mentionSuggesstionsValueMap: Record<string, string> = {}\\n\\n/** Text & Value should have same content when sent to React-Draft */\\nconst mentionSuggesstionsProp = mentionSuggestionsFromAPI.map((m) => {\\n  mentionSuggesstionsValueMap[m.text] = m.value\\n  return { text: m.text, value: m.text, url: m.url }\\n})\\n\\nconst inputHTML =\\n  '<p style=\\\"text-align:left;\\\"><span style=\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\">Dear recipient,</span></p> <p><span style=\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\">Order </span><awbnumber><span style=\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\"> is arriving, should reach your destination at </span><time><span style=\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\">. </span></p>'\\n\\nconst MainCompoonent = ({\\n  initializeFromHTML,\\n  showHTMLOutput,\\n  showJSONOutput,\\n  insertMentionsProgrammatically\\n}: IMainComponentProps) => {\\n  /** Initialize with empty state */\\n  const [editorState, setEditorState] = React.useState(\\n    EditorState.createEmpty()\\n  )\\n\\n  const JSONOutput = React.useMemo(\\n    () => JSON.stringify(convertToRaw(editorState.getCurrentContent())),\\n    [editorState]\\n  )\\n\\n  const HTMLOutput = React.useMemo(\\n    () =>\\n      draftToHtml(\\n        convertToRaw(editorState.getCurrentContent()),\\n        undefined,\\n        false,\\n        (entity, _text) =>\\n          `<${mentionSuggesstionsValueMap[entity?.data?.value]}>`\\n      ),\\n    [editorState]\\n  )\\n\\n  /** Programmatically insert Mentions - Either at last cursor or at End */\\n  const handleClick = () => {\\n    setEditorState(insertMention(editorState, mentionSuggesstionsProp[0], true))\\n  }\\n\\n  /** Initializing the editor state from HTML */\\n  React.useEffect(() => {\\n    initializeFromHTML &&\\n      setEditorState(\\n        convertHTMLToDraftState(inputHTML || '', mentionSuggestionsFromAPI)\\n      )\\n  }, [])\\n\\n  return (\\n    <>\\n      {insertMentionsProgrammatically && (\\n        <Button onClick={handleClick}>Insert Mention</Button>\\n      )}\\n      <br />\\n      <br />\\n      <RichTextEditor\\n        label='Email Body'\\n        id='emailBody'\\n        className='emailBody'\\n        isStripPastedStyles={true}\\n        // defaultEditorState={EditorState.createEmpty()}\\n        editorState={editorState}\\n        mention={{\\n          separator: ' ',\\n          trigger: '@',\\n          suggestions: mentionSuggesstionsProp\\n        }}\\n        onEditorStateChange={setEditorState}\\n        placeholder='Enter Email Body'\\n        hideToolbar={boolean('hideToolbar', false)}\\n      />\\n      {/* {editorState.getCurrentContent().getPlainText().length} */}\\n      {showJSONOutput && (\\n        <>\\n          <br />\\n          <br />\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\n            <code>{JSONOutput}</code>\\n          </Box>\\n        </>\\n      )}\\n      {showHTMLOutput && (\\n        <>\\n          <br />\\n          <br />\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\n            <code>{HTMLOutput}</code>\\n          </Box>\\n        </>\\n      )}\\n    </>\\n  )\\n}\\n\\nexport const Default = addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <MainCompoonent\\n        showHTMLOutput={boolean('showHTMLOutput', false)}\\n        showJSONOutput={boolean('showJSONOutput', false)}\\n        insertMentionsProgrammatically={boolean(\\n          'insertMentionsProgrammatically',\\n          false\\n        )}\\n        initializeFromHTML={boolean('initializeFromHTML', false)}\\n      />\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\";\n// @ts-ignore\nvar __ADDS_MAP__ = {};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = \"/RichTextEditor.stories.tsx\";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \n\n/* eslint-disable */\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\n// @ts-ignore\nvar addSourceDecorator = require(\"@storybook/source-loader/preview\").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/organisms/RichTextEditor\";\n// @ts-ignore\nvar __STORY__ = \"import React from 'react'\\n\\nimport { path } from '..'\\nimport RichTextEditor from '.'\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\nimport { EditorState, convertToRaw } from 'draft-js'\\nimport { insertMention, convertHTMLToDraftState } from './apis'\\nimport draftToHtml from 'draftjs-to-html'\\nimport Box from '../../atoms/Box'\\nimport Button from '../../atoms/Button'\\nimport { boolean } from '@storybook/addon-knobs'\\n\\ninterface IMainComponentProps {\\n  showHTMLOutput?: boolean\\n  showJSONOutput?: boolean\\n  insertMentionsProgrammatically?: boolean\\n  initializeFromHTML?: boolean\\n}\\n\\nexport default {\\n  title: `${path}/RichTextEditor`,\\n  component: RichTextEditor\\n}\\n\\n/** Mentions structure from API */\\nconst mentionSuggestionsFromAPI = [\\n  { text: 'Delivery Associate Name', value: 'dmmName', url: '#' },\\n  { text: 'Alert Date', value: 'time', url: '#' },\\n  { text: 'Account Name', value: 'accountname', url: '#' },\\n  { text: 'Account Code', value: 'accountCode', url: '#' },\\n  { text: 'Collected Value', value: 'collectedValue', url: '#' },\\n  { text: 'Package Value', value: 'actualvalue', url: '#' },\\n  { text: 'Currency', value: 'currency', url: '#' },\\n  { text: 'AWB Number', value: 'awbnumber', url: '#' }\\n]\\n\\n/** Mentions Text to Value map */\\nconst mentionSuggesstionsValueMap: Record<string, string> = {}\\n\\n/** Text & Value should have same content when sent to React-Draft */\\nconst mentionSuggesstionsProp = mentionSuggestionsFromAPI.map((m) => {\\n  mentionSuggesstionsValueMap[m.text] = m.value\\n  return { text: m.text, value: m.text, url: m.url }\\n})\\n\\nconst inputHTML =\\n  '<p style=\\\"text-align:left;\\\"><span style=\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\">Dear recipient,</span></p> <p><span style=\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\">Order </span><awbnumber><span style=\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\"> is arriving, should reach your destination at </span><time><span style=\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\">. </span></p>'\\n\\nconst MainCompoonent = ({\\n  initializeFromHTML,\\n  showHTMLOutput,\\n  showJSONOutput,\\n  insertMentionsProgrammatically\\n}: IMainComponentProps) => {\\n  /** Initialize with empty state */\\n  const [editorState, setEditorState] = React.useState(\\n    EditorState.createEmpty()\\n  )\\n\\n  const JSONOutput = React.useMemo(\\n    () => JSON.stringify(convertToRaw(editorState.getCurrentContent())),\\n    [editorState]\\n  )\\n\\n  const HTMLOutput = React.useMemo(\\n    () =>\\n      draftToHtml(\\n        convertToRaw(editorState.getCurrentContent()),\\n        undefined,\\n        false,\\n        (entity, _text) =>\\n          `<${mentionSuggesstionsValueMap[entity?.data?.value]}>`\\n      ),\\n    [editorState]\\n  )\\n\\n  /** Programmatically insert Mentions - Either at last cursor or at End */\\n  const handleClick = () => {\\n    setEditorState(insertMention(editorState, mentionSuggesstionsProp[0], true))\\n  }\\n\\n  /** Initializing the editor state from HTML */\\n  React.useEffect(() => {\\n    initializeFromHTML &&\\n      setEditorState(\\n        convertHTMLToDraftState(inputHTML || '', mentionSuggestionsFromAPI)\\n      )\\n  }, [])\\n\\n  return (\\n    <>\\n      {insertMentionsProgrammatically && (\\n        <Button onClick={handleClick}>Insert Mention</Button>\\n      )}\\n      <br />\\n      <br />\\n      <RichTextEditor\\n        label='Email Body'\\n        id='emailBody'\\n        className='emailBody'\\n        isStripPastedStyles={true}\\n        // defaultEditorState={EditorState.createEmpty()}\\n        editorState={editorState}\\n        mention={{\\n          separator: ' ',\\n          trigger: '@',\\n          suggestions: mentionSuggesstionsProp\\n        }}\\n        onEditorStateChange={setEditorState}\\n        placeholder='Enter Email Body'\\n        hideToolbar={boolean('hideToolbar', false)}\\n      />\\n      {/* {editorState.getCurrentContent().getPlainText().length} */}\\n      {showJSONOutput && (\\n        <>\\n          <br />\\n          <br />\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\n            <code>{JSONOutput}</code>\\n          </Box>\\n        </>\\n      )}\\n      {showHTMLOutput && (\\n        <>\\n          <br />\\n          <br />\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\n            <code>{HTMLOutput}</code>\\n          </Box>\\n        </>\\n      )}\\n    </>\\n  )\\n}\\n\\nexport const Default = () => {\\n  return (\\n    <ThemeWrapper>\\n      <MainCompoonent\\n        showHTMLOutput={boolean('showHTMLOutput', false)}\\n        showJSONOutput={boolean('showJSONOutput', false)}\\n        insertMentionsProgrammatically={boolean(\\n          'insertMentionsProgrammatically',\\n          false\\n        )}\\n        initializeFromHTML={boolean('initializeFromHTML', false)}\\n      />\\n    </ThemeWrapper>\\n  )\\n}\\n\";\n// @ts-ignore\nvar __ADDS_MAP__ = {};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = \"/RichTextEditor.stories.tsx\";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \nimport React from 'react'\n\nimport { path } from '..'\nimport RichTextEditor from '.'\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\nimport { EditorState, convertToRaw } from 'draft-js'\nimport { insertMention, convertHTMLToDraftState } from './apis'\nimport draftToHtml from 'draftjs-to-html'\nimport Box from '../../atoms/Box'\nimport Button from '../../atoms/Button'\nimport { boolean } from '@storybook/addon-knobs'\n\ninterface IMainComponentProps {\n  showHTMLOutput?: boolean\n  showJSONOutput?: boolean\n  insertMentionsProgrammatically?: boolean\n  initializeFromHTML?: boolean\n}\n\nexport default {parameters: {\"storySource\":{\"source\":\"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/organisms/RichTextEditor\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"\\\\n\\\\n// @ts-nocheck\\\\n// @ts-ignore\\\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\\\n// @ts-ignore\\\\nvar addSourceDecorator = require(\\\\\\\"@storybook/source-loader/preview\\\\\\\").addSource;\\\\n// @ts-ignore\\\\nvar __SOURCE_PREFIX__ = \\\\\\\"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/organisms/RichTextEditor\\\\\\\";\\\\n// @ts-ignore\\\\nvar __STORY__ = \\\\\\\"import React from 'react'\\\\\\\\n\\\\\\\\nimport { path } from '..'\\\\\\\\nimport RichTextEditor from '.'\\\\\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\\\\\nimport { EditorState, convertToRaw } from 'draft-js'\\\\\\\\nimport { insertMention, convertHTMLToDraftState } from './apis'\\\\\\\\nimport draftToHtml from 'draftjs-to-html'\\\\\\\\nimport Box from '../../atoms/Box'\\\\\\\\nimport Button from '../../atoms/Button'\\\\\\\\nimport { boolean } from '@storybook/addon-knobs'\\\\\\\\n\\\\\\\\ninterface IMainComponentProps {\\\\\\\\n  showHTMLOutput?: boolean\\\\\\\\n  showJSONOutput?: boolean\\\\\\\\n  insertMentionsProgrammatically?: boolean\\\\\\\\n  initializeFromHTML?: boolean\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/RichTextEditor`,\\\\\\\\n  component: RichTextEditor\\\\\\\\n}\\\\\\\\n\\\\\\\\n/** Mentions structure from API */\\\\\\\\nconst mentionSuggestionsFromAPI = [\\\\\\\\n  { text: 'Delivery Associate Name', value: 'dmmName', url: '#' },\\\\\\\\n  { text: 'Alert Date', value: 'time', url: '#' },\\\\\\\\n  { text: 'Account Name', value: 'accountname', url: '#' },\\\\\\\\n  { text: 'Account Code', value: 'accountCode', url: '#' },\\\\\\\\n  { text: 'Collected Value', value: 'collectedValue', url: '#' },\\\\\\\\n  { text: 'Package Value', value: 'actualvalue', url: '#' },\\\\\\\\n  { text: 'Currency', value: 'currency', url: '#' },\\\\\\\\n  { text: 'AWB Number', value: 'awbnumber', url: '#' }\\\\\\\\n]\\\\\\\\n\\\\\\\\n/** Mentions Text to Value map */\\\\\\\\nconst mentionSuggesstionsValueMap: Record<string, string> = {}\\\\\\\\n\\\\\\\\n/** Text & Value should have same content when sent to React-Draft */\\\\\\\\nconst mentionSuggesstionsProp = mentionSuggestionsFromAPI.map((m) => {\\\\\\\\n  mentionSuggesstionsValueMap[m.text] = m.value\\\\\\\\n  return { text: m.text, value: m.text, url: m.url }\\\\\\\\n})\\\\\\\\n\\\\\\\\nconst inputHTML =\\\\\\\\n  '<p style=\\\\\\\\\\\\\\\"text-align:left;\\\\\\\\\\\\\\\"><span style=\\\\\\\\\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\\\\\\\\\">Dear recipient,</span></p> <p><span style=\\\\\\\\\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\\\\\\\\\">Order </span><awbnumber><span style=\\\\\\\\\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\\\\\\\\\"> is arriving, should reach your destination at </span><time><span style=\\\\\\\\\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\\\\\\\\\">. </span></p>'\\\\\\\\n\\\\\\\\nconst MainCompoonent = ({\\\\\\\\n  initializeFromHTML,\\\\\\\\n  showHTMLOutput,\\\\\\\\n  showJSONOutput,\\\\\\\\n  insertMentionsProgrammatically\\\\\\\\n}: IMainComponentProps) => {\\\\\\\\n  /** Initialize with empty state */\\\\\\\\n  const [editorState, setEditorState] = React.useState(\\\\\\\\n    EditorState.createEmpty()\\\\\\\\n  )\\\\\\\\n\\\\\\\\n  const JSONOutput = React.useMemo(\\\\\\\\n    () => JSON.stringify(convertToRaw(editorState.getCurrentContent())),\\\\\\\\n    [editorState]\\\\\\\\n  )\\\\\\\\n\\\\\\\\n  const HTMLOutput = React.useMemo(\\\\\\\\n    () =>\\\\\\\\n      draftToHtml(\\\\\\\\n        convertToRaw(editorState.getCurrentContent()),\\\\\\\\n        undefined,\\\\\\\\n        false,\\\\\\\\n        (entity, _text) =>\\\\\\\\n          `<${mentionSuggesstionsValueMap[entity?.data?.value]}>`\\\\\\\\n      ),\\\\\\\\n    [editorState]\\\\\\\\n  )\\\\\\\\n\\\\\\\\n  /** Programmatically insert Mentions - Either at last cursor or at End */\\\\\\\\n  const handleClick = () => {\\\\\\\\n    setEditorState(insertMention(editorState, mentionSuggesstionsProp[0], true))\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  /** Initializing the editor state from HTML */\\\\\\\\n  React.useEffect(() => {\\\\\\\\n    initializeFromHTML &&\\\\\\\\n      setEditorState(\\\\\\\\n        convertHTMLToDraftState(inputHTML || '', mentionSuggestionsFromAPI)\\\\\\\\n      )\\\\\\\\n  }, [])\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <>\\\\\\\\n      {insertMentionsProgrammatically && (\\\\\\\\n        <Button onClick={handleClick}>Insert Mention</Button>\\\\\\\\n      )}\\\\\\\\n      <br />\\\\\\\\n      <br />\\\\\\\\n      <RichTextEditor\\\\\\\\n        label='Email Body'\\\\\\\\n        id='emailBody'\\\\\\\\n        className='emailBody'\\\\\\\\n        isStripPastedStyles={true}\\\\\\\\n        // defaultEditorState={EditorState.createEmpty()}\\\\\\\\n        editorState={editorState}\\\\\\\\n        mention={{\\\\\\\\n          separator: ' ',\\\\\\\\n          trigger: '@',\\\\\\\\n          suggestions: mentionSuggesstionsProp\\\\\\\\n        }}\\\\\\\\n        onEditorStateChange={setEditorState}\\\\\\\\n        placeholder='Enter Email Body'\\\\\\\\n        hideToolbar={boolean('hideToolbar', false)}\\\\\\\\n      />\\\\\\\\n      {/* {editorState.getCurrentContent().getPlainText().length} */}\\\\\\\\n      {showJSONOutput && (\\\\\\\\n        <>\\\\\\\\n          <br />\\\\\\\\n          <br />\\\\\\\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\\\\\\\n            <code>{JSONOutput}</code>\\\\\\\\n          </Box>\\\\\\\\n        </>\\\\\\\\n      )}\\\\\\\\n      {showHTMLOutput && (\\\\\\\\n        <>\\\\\\\\n          <br />\\\\\\\\n          <br />\\\\\\\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\\\\\\\n            <code>{HTMLOutput}</code>\\\\\\\\n          </Box>\\\\\\\\n        </>\\\\\\\\n      )}\\\\\\\\n    </>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const Default = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <MainCompoonent\\\\\\\\n        showHTMLOutput={boolean('showHTMLOutput', false)}\\\\\\\\n        showJSONOutput={boolean('showJSONOutput', false)}\\\\\\\\n        insertMentionsProgrammatically={boolean(\\\\\\\\n          'insertMentionsProgrammatically',\\\\\\\\n          false\\\\\\\\n        )}\\\\\\\\n        initializeFromHTML={boolean('initializeFromHTML', false)}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\";\\\\n// @ts-ignore\\\\nvar __ADDS_MAP__ = {};\\\\n// @ts-ignore\\\\nvar __MAIN_FILE_LOCATION__ = \\\\\\\"/RichTextEditor.stories.tsx\\\\\\\";\\\\n// @ts-ignore\\\\nvar __MODULE_DEPENDENCIES__ = [];\\\\n// @ts-ignore\\\\nvar __LOCAL_DEPENDENCIES__ = {};\\\\n// @ts-ignore\\\\nvar __IDS_TO_FRAMEWORKS__ = {};\\\\n        \\\\nimport React from 'react'\\\\n\\\\nimport { path } from '..'\\\\nimport RichTextEditor from '.'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport { EditorState, convertToRaw } from 'draft-js'\\\\nimport { insertMention, convertHTMLToDraftState } from './apis'\\\\nimport draftToHtml from 'draftjs-to-html'\\\\nimport Box from '../../atoms/Box'\\\\nimport Button from '../../atoms/Button'\\\\nimport { boolean } from '@storybook/addon-knobs'\\\\n\\\\ninterface IMainComponentProps {\\\\n  showHTMLOutput?: boolean\\\\n  showJSONOutput?: boolean\\\\n  insertMentionsProgrammatically?: boolean\\\\n  initializeFromHTML?: boolean\\\\n}\\\\n\\\\nexport default {parameters: {\\\\\\\"storySource\\\\\\\":{\\\\\\\"source\\\\\\\":\\\\\\\"import React from 'react'\\\\\\\\n\\\\\\\\nimport { path } from '..'\\\\\\\\nimport RichTextEditor from '.'\\\\\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\\\\\nimport { EditorState, convertToRaw } from 'draft-js'\\\\\\\\nimport { insertMention, convertHTMLToDraftState } from './apis'\\\\\\\\nimport draftToHtml from 'draftjs-to-html'\\\\\\\\nimport Box from '../../atoms/Box'\\\\\\\\nimport Button from '../../atoms/Button'\\\\\\\\nimport { boolean } from '@storybook/addon-knobs'\\\\\\\\n\\\\\\\\ninterface IMainComponentProps {\\\\\\\\n  showHTMLOutput?: boolean\\\\\\\\n  showJSONOutput?: boolean\\\\\\\\n  insertMentionsProgrammatically?: boolean\\\\\\\\n  initializeFromHTML?: boolean\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/RichTextEditor`,\\\\\\\\n  component: RichTextEditor\\\\\\\\n}\\\\\\\\n\\\\\\\\n/** Mentions structure from API */\\\\\\\\nconst mentionSuggestionsFromAPI = [\\\\\\\\n  { text: 'Delivery Associate Name', value: 'dmmName', url: '#' },\\\\\\\\n  { text: 'Alert Date', value: 'time', url: '#' },\\\\\\\\n  { text: 'Account Name', value: 'accountname', url: '#' },\\\\\\\\n  { text: 'Account Code', value: 'accountCode', url: '#' },\\\\\\\\n  { text: 'Collected Value', value: 'collectedValue', url: '#' },\\\\\\\\n  { text: 'Package Value', value: 'actualvalue', url: '#' },\\\\\\\\n  { text: 'Currency', value: 'currency', url: '#' },\\\\\\\\n  { text: 'AWB Number', value: 'awbnumber', url: '#' }\\\\\\\\n]\\\\\\\\n\\\\\\\\n/** Mentions Text to Value map */\\\\\\\\nconst mentionSuggesstionsValueMap: Record<string, string> = {}\\\\\\\\n\\\\\\\\n/** Text & Value should have same content when sent to React-Draft */\\\\\\\\nconst mentionSuggesstionsProp = mentionSuggestionsFromAPI.map((m) => {\\\\\\\\n  mentionSuggesstionsValueMap[m.text] = m.value\\\\\\\\n  return { text: m.text, value: m.text, url: m.url }\\\\\\\\n})\\\\\\\\n\\\\\\\\nconst inputHTML =\\\\\\\\n  '<p style=\\\\\\\\\\\\\\\"text-align:left;\\\\\\\\\\\\\\\"><span style=\\\\\\\\\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\\\\\\\\\">Dear recipient,</span></p> <p><span style=\\\\\\\\\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\\\\\\\\\">Order </span><awbnumber><span style=\\\\\\\\\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\\\\\\\\\"> is arriving, should reach your destination at </span><time><span style=\\\\\\\\\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\\\\\\\\\">. </span></p>'\\\\\\\\n\\\\\\\\nconst MainCompoonent = ({\\\\\\\\n  initializeFromHTML,\\\\\\\\n  showHTMLOutput,\\\\\\\\n  showJSONOutput,\\\\\\\\n  insertMentionsProgrammatically\\\\\\\\n}: IMainComponentProps) => {\\\\\\\\n  /** Initialize with empty state */\\\\\\\\n  const [editorState, setEditorState] = React.useState(\\\\\\\\n    EditorState.createEmpty()\\\\\\\\n  )\\\\\\\\n\\\\\\\\n  const JSONOutput = React.useMemo(\\\\\\\\n    () => JSON.stringify(convertToRaw(editorState.getCurrentContent())),\\\\\\\\n    [editorState]\\\\\\\\n  )\\\\\\\\n\\\\\\\\n  const HTMLOutput = React.useMemo(\\\\\\\\n    () =>\\\\\\\\n      draftToHtml(\\\\\\\\n        convertToRaw(editorState.getCurrentContent()),\\\\\\\\n        undefined,\\\\\\\\n        false,\\\\\\\\n        (entity, _text) =>\\\\\\\\n          `<${mentionSuggesstionsValueMap[entity?.data?.value]}>`\\\\\\\\n      ),\\\\\\\\n    [editorState]\\\\\\\\n  )\\\\\\\\n\\\\\\\\n  /** Programmatically insert Mentions - Either at last cursor or at End */\\\\\\\\n  const handleClick = () => {\\\\\\\\n    setEditorState(insertMention(editorState, mentionSuggesstionsProp[0], true))\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  /** Initializing the editor state from HTML */\\\\\\\\n  React.useEffect(() => {\\\\\\\\n    initializeFromHTML &&\\\\\\\\n      setEditorState(\\\\\\\\n        convertHTMLToDraftState(inputHTML || '', mentionSuggestionsFromAPI)\\\\\\\\n      )\\\\\\\\n  }, [])\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <>\\\\\\\\n      {insertMentionsProgrammatically && (\\\\\\\\n        <Button onClick={handleClick}>Insert Mention</Button>\\\\\\\\n      )}\\\\\\\\n      <br />\\\\\\\\n      <br />\\\\\\\\n      <RichTextEditor\\\\\\\\n        label='Email Body'\\\\\\\\n        id='emailBody'\\\\\\\\n        className='emailBody'\\\\\\\\n        isStripPastedStyles={true}\\\\\\\\n        // defaultEditorState={EditorState.createEmpty()}\\\\\\\\n        editorState={editorState}\\\\\\\\n        mention={{\\\\\\\\n          separator: ' ',\\\\\\\\n          trigger: '@',\\\\\\\\n          suggestions: mentionSuggesstionsProp\\\\\\\\n        }}\\\\\\\\n        onEditorStateChange={setEditorState}\\\\\\\\n        placeholder='Enter Email Body'\\\\\\\\n        hideToolbar={boolean('hideToolbar', false)}\\\\\\\\n      />\\\\\\\\n      {/* {editorState.getCurrentContent().getPlainText().length} */}\\\\\\\\n      {showJSONOutput && (\\\\\\\\n        <>\\\\\\\\n          <br />\\\\\\\\n          <br />\\\\\\\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\\\\\\\n            <code>{JSONOutput}</code>\\\\\\\\n          </Box>\\\\\\\\n        </>\\\\\\\\n      )}\\\\\\\\n      {showHTMLOutput && (\\\\\\\\n        <>\\\\\\\\n          <br />\\\\\\\\n          <br />\\\\\\\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\\\\\\\n            <code>{HTMLOutput}</code>\\\\\\\\n          </Box>\\\\\\\\n        </>\\\\\\\\n      )}\\\\\\\\n    </>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const Default = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <MainCompoonent\\\\\\\\n        showHTMLOutput={boolean('showHTMLOutput', false)}\\\\\\\\n        showJSONOutput={boolean('showJSONOutput', false)}\\\\\\\\n        insertMentionsProgrammatically={boolean(\\\\\\\\n          'insertMentionsProgrammatically',\\\\\\\\n          false\\\\\\\\n        )}\\\\\\\\n        initializeFromHTML={boolean('initializeFromHTML', false)}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\",\\\\\\\"locationsMap\\\\\\\":{}},},\\\\n  title: `${path}/RichTextEditor`,\\\\n  component: RichTextEditor\\\\n}\\\\n\\\\n/** Mentions structure from API */\\\\nconst mentionSuggestionsFromAPI = [\\\\n  { text: 'Delivery Associate Name', value: 'dmmName', url: '#' },\\\\n  { text: 'Alert Date', value: 'time', url: '#' },\\\\n  { text: 'Account Name', value: 'accountname', url: '#' },\\\\n  { text: 'Account Code', value: 'accountCode', url: '#' },\\\\n  { text: 'Collected Value', value: 'collectedValue', url: '#' },\\\\n  { text: 'Package Value', value: 'actualvalue', url: '#' },\\\\n  { text: 'Currency', value: 'currency', url: '#' },\\\\n  { text: 'AWB Number', value: 'awbnumber', url: '#' }\\\\n]\\\\n\\\\n/** Mentions Text to Value map */\\\\nconst mentionSuggesstionsValueMap: Record<string, string> = {}\\\\n\\\\n/** Text & Value should have same content when sent to React-Draft */\\\\nconst mentionSuggesstionsProp = mentionSuggestionsFromAPI.map((m) => {\\\\n  mentionSuggesstionsValueMap[m.text] = m.value\\\\n  return { text: m.text, value: m.text, url: m.url }\\\\n})\\\\n\\\\nconst inputHTML =\\\\n  '<p style=\\\\\\\"text-align:left;\\\\\\\"><span style=\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\">Dear recipient,</span></p> <p><span style=\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\">Order </span><awbnumber><span style=\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\"> is arriving, should reach your destination at </span><time><span style=\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\">. </span></p>'\\\\n\\\\nconst MainCompoonent = ({\\\\n  initializeFromHTML,\\\\n  showHTMLOutput,\\\\n  showJSONOutput,\\\\n  insertMentionsProgrammatically\\\\n}: IMainComponentProps) => {\\\\n  /** Initialize with empty state */\\\\n  const [editorState, setEditorState] = React.useState(\\\\n    EditorState.createEmpty()\\\\n  )\\\\n\\\\n  const JSONOutput = React.useMemo(\\\\n    () => JSON.stringify(convertToRaw(editorState.getCurrentContent())),\\\\n    [editorState]\\\\n  )\\\\n\\\\n  const HTMLOutput = React.useMemo(\\\\n    () =>\\\\n      draftToHtml(\\\\n        convertToRaw(editorState.getCurrentContent()),\\\\n        undefined,\\\\n        false,\\\\n        (entity, _text) =>\\\\n          `<${mentionSuggesstionsValueMap[entity?.data?.value]}>`\\\\n      ),\\\\n    [editorState]\\\\n  )\\\\n\\\\n  /** Programmatically insert Mentions - Either at last cursor or at End */\\\\n  const handleClick = () => {\\\\n    setEditorState(insertMention(editorState, mentionSuggesstionsProp[0], true))\\\\n  }\\\\n\\\\n  /** Initializing the editor state from HTML */\\\\n  React.useEffect(() => {\\\\n    initializeFromHTML &&\\\\n      setEditorState(\\\\n        convertHTMLToDraftState(inputHTML || '', mentionSuggestionsFromAPI)\\\\n      )\\\\n  }, [])\\\\n\\\\n  return (\\\\n    <>\\\\n      {insertMentionsProgrammatically && (\\\\n        <Button onClick={handleClick}>Insert Mention</Button>\\\\n      )}\\\\n      <br />\\\\n      <br />\\\\n      <RichTextEditor\\\\n        label='Email Body'\\\\n        id='emailBody'\\\\n        className='emailBody'\\\\n        isStripPastedStyles={true}\\\\n        // defaultEditorState={EditorState.createEmpty()}\\\\n        editorState={editorState}\\\\n        mention={{\\\\n          separator: ' ',\\\\n          trigger: '@',\\\\n          suggestions: mentionSuggesstionsProp\\\\n        }}\\\\n        onEditorStateChange={setEditorState}\\\\n        placeholder='Enter Email Body'\\\\n        hideToolbar={boolean('hideToolbar', false)}\\\\n      />\\\\n      {/* {editorState.getCurrentContent().getPlainText().length} */}\\\\n      {showJSONOutput && (\\\\n        <>\\\\n          <br />\\\\n          <br />\\\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\\\n            <code>{JSONOutput}</code>\\\\n          </Box>\\\\n        </>\\\\n      )}\\\\n      {showHTMLOutput && (\\\\n        <>\\\\n          <br />\\\\n          <br />\\\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\\\n            <code>{HTMLOutput}</code>\\\\n          </Box>\\\\n        </>\\\\n      )}\\\\n    </>\\\\n  )\\\\n}\\\\n\\\\nexport const Default = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <MainCompoonent\\\\n        showHTMLOutput={boolean('showHTMLOutput', false)}\\\\n        showJSONOutput={boolean('showJSONOutput', false)}\\\\n        insertMentionsProgrammatically={boolean(\\\\n          'insertMentionsProgrammatically',\\\\n          false\\\\n        )}\\\\n        initializeFromHTML={boolean('initializeFromHTML', false)}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/RichTextEditor.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\n\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/organisms/RichTextEditor\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"import React from 'react'\\\\n\\\\nimport { path } from '..'\\\\nimport RichTextEditor from '.'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport { EditorState, convertToRaw } from 'draft-js'\\\\nimport { insertMention, convertHTMLToDraftState } from './apis'\\\\nimport draftToHtml from 'draftjs-to-html'\\\\nimport Box from '../../atoms/Box'\\\\nimport Button from '../../atoms/Button'\\\\nimport { boolean } from '@storybook/addon-knobs'\\\\n\\\\ninterface IMainComponentProps {\\\\n  showHTMLOutput?: boolean\\\\n  showJSONOutput?: boolean\\\\n  insertMentionsProgrammatically?: boolean\\\\n  initializeFromHTML?: boolean\\\\n}\\\\n\\\\nexport default {\\\\n  title: `${path}/RichTextEditor`,\\\\n  component: RichTextEditor\\\\n}\\\\n\\\\n/** Mentions structure from API */\\\\nconst mentionSuggestionsFromAPI = [\\\\n  { text: 'Delivery Associate Name', value: 'dmmName', url: '#' },\\\\n  { text: 'Alert Date', value: 'time', url: '#' },\\\\n  { text: 'Account Name', value: 'accountname', url: '#' },\\\\n  { text: 'Account Code', value: 'accountCode', url: '#' },\\\\n  { text: 'Collected Value', value: 'collectedValue', url: '#' },\\\\n  { text: 'Package Value', value: 'actualvalue', url: '#' },\\\\n  { text: 'Currency', value: 'currency', url: '#' },\\\\n  { text: 'AWB Number', value: 'awbnumber', url: '#' }\\\\n]\\\\n\\\\n/** Mentions Text to Value map */\\\\nconst mentionSuggesstionsValueMap: Record<string, string> = {}\\\\n\\\\n/** Text & Value should have same content when sent to React-Draft */\\\\nconst mentionSuggesstionsProp = mentionSuggestionsFromAPI.map((m) => {\\\\n  mentionSuggesstionsValueMap[m.text] = m.value\\\\n  return { text: m.text, value: m.text, url: m.url }\\\\n})\\\\n\\\\nconst inputHTML =\\\\n  '<p style=\\\\\\\"text-align:left;\\\\\\\"><span style=\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\">Dear recipient,</span></p> <p><span style=\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\">Order </span><awbnumber><span style=\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\"> is arriving, should reach your destination at </span><time><span style=\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\">. </span></p>'\\\\n\\\\nconst MainCompoonent = ({\\\\n  initializeFromHTML,\\\\n  showHTMLOutput,\\\\n  showJSONOutput,\\\\n  insertMentionsProgrammatically\\\\n}: IMainComponentProps) => {\\\\n  /** Initialize with empty state */\\\\n  const [editorState, setEditorState] = React.useState(\\\\n    EditorState.createEmpty()\\\\n  )\\\\n\\\\n  const JSONOutput = React.useMemo(\\\\n    () => JSON.stringify(convertToRaw(editorState.getCurrentContent())),\\\\n    [editorState]\\\\n  )\\\\n\\\\n  const HTMLOutput = React.useMemo(\\\\n    () =>\\\\n      draftToHtml(\\\\n        convertToRaw(editorState.getCurrentContent()),\\\\n        undefined,\\\\n        false,\\\\n        (entity, _text) =>\\\\n          `<${mentionSuggesstionsValueMap[entity?.data?.value]}>`\\\\n      ),\\\\n    [editorState]\\\\n  )\\\\n\\\\n  /** Programmatically insert Mentions - Either at last cursor or at End */\\\\n  const handleClick = () => {\\\\n    setEditorState(insertMention(editorState, mentionSuggesstionsProp[0], true))\\\\n  }\\\\n\\\\n  /** Initializing the editor state from HTML */\\\\n  React.useEffect(() => {\\\\n    initializeFromHTML &&\\\\n      setEditorState(\\\\n        convertHTMLToDraftState(inputHTML || '', mentionSuggestionsFromAPI)\\\\n      )\\\\n  }, [])\\\\n\\\\n  return (\\\\n    <>\\\\n      {insertMentionsProgrammatically && (\\\\n        <Button onClick={handleClick}>Insert Mention</Button>\\\\n      )}\\\\n      <br />\\\\n      <br />\\\\n      <RichTextEditor\\\\n        label='Email Body'\\\\n        id='emailBody'\\\\n        className='emailBody'\\\\n        isStripPastedStyles={true}\\\\n        // defaultEditorState={EditorState.createEmpty()}\\\\n        editorState={editorState}\\\\n        mention={{\\\\n          separator: ' ',\\\\n          trigger: '@',\\\\n          suggestions: mentionSuggesstionsProp\\\\n        }}\\\\n        onEditorStateChange={setEditorState}\\\\n        placeholder='Enter Email Body'\\\\n        hideToolbar={boolean('hideToolbar', false)}\\\\n      />\\\\n      {/* {editorState.getCurrentContent().getPlainText().length} */}\\\\n      {showJSONOutput && (\\\\n        <>\\\\n          <br />\\\\n          <br />\\\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\\\n            <code>{JSONOutput}</code>\\\\n          </Box>\\\\n        </>\\\\n      )}\\\\n      {showHTMLOutput && (\\\\n        <>\\\\n          <br />\\\\n          <br />\\\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\\\n            <code>{HTMLOutput}</code>\\\\n          </Box>\\\\n        </>\\\\n      )}\\\\n    </>\\\\n  )\\\\n}\\\\n\\\\nexport const Default = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <MainCompoonent\\\\n        showHTMLOutput={boolean('showHTMLOutput', false)}\\\\n        showJSONOutput={boolean('showJSONOutput', false)}\\\\n        insertMentionsProgrammatically={boolean(\\\\n          'insertMentionsProgrammatically',\\\\n          false\\\\n        )}\\\\n        initializeFromHTML={boolean('initializeFromHTML', false)}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/RichTextEditor.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\nimport React from 'react'\\n\\nimport { path } from '..'\\nimport RichTextEditor from '.'\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\nimport { EditorState, convertToRaw } from 'draft-js'\\nimport { insertMention, convertHTMLToDraftState } from './apis'\\nimport draftToHtml from 'draftjs-to-html'\\nimport Box from '../../atoms/Box'\\nimport Button from '../../atoms/Button'\\nimport { boolean } from '@storybook/addon-knobs'\\n\\ninterface IMainComponentProps {\\n  showHTMLOutput?: boolean\\n  showJSONOutput?: boolean\\n  insertMentionsProgrammatically?: boolean\\n  initializeFromHTML?: boolean\\n}\\n\\nexport default {parameters: {\\\"storySource\\\":{\\\"source\\\":\\\"\\\\n\\\\n// @ts-nocheck\\\\n// @ts-ignore\\\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\\\n// @ts-ignore\\\\nvar addSourceDecorator = require(\\\\\\\"@storybook/source-loader/preview\\\\\\\").addSource;\\\\n// @ts-ignore\\\\nvar __SOURCE_PREFIX__ = \\\\\\\"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/organisms/RichTextEditor\\\\\\\";\\\\n// @ts-ignore\\\\nvar __STORY__ = \\\\\\\"import React from 'react'\\\\\\\\n\\\\\\\\nimport { path } from '..'\\\\\\\\nimport RichTextEditor from '.'\\\\\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\\\\\nimport { EditorState, convertToRaw } from 'draft-js'\\\\\\\\nimport { insertMention, convertHTMLToDraftState } from './apis'\\\\\\\\nimport draftToHtml from 'draftjs-to-html'\\\\\\\\nimport Box from '../../atoms/Box'\\\\\\\\nimport Button from '../../atoms/Button'\\\\\\\\nimport { boolean } from '@storybook/addon-knobs'\\\\\\\\n\\\\\\\\ninterface IMainComponentProps {\\\\\\\\n  showHTMLOutput?: boolean\\\\\\\\n  showJSONOutput?: boolean\\\\\\\\n  insertMentionsProgrammatically?: boolean\\\\\\\\n  initializeFromHTML?: boolean\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/RichTextEditor`,\\\\\\\\n  component: RichTextEditor\\\\\\\\n}\\\\\\\\n\\\\\\\\n/** Mentions structure from API */\\\\\\\\nconst mentionSuggestionsFromAPI = [\\\\\\\\n  { text: 'Delivery Associate Name', value: 'dmmName', url: '#' },\\\\\\\\n  { text: 'Alert Date', value: 'time', url: '#' },\\\\\\\\n  { text: 'Account Name', value: 'accountname', url: '#' },\\\\\\\\n  { text: 'Account Code', value: 'accountCode', url: '#' },\\\\\\\\n  { text: 'Collected Value', value: 'collectedValue', url: '#' },\\\\\\\\n  { text: 'Package Value', value: 'actualvalue', url: '#' },\\\\\\\\n  { text: 'Currency', value: 'currency', url: '#' },\\\\\\\\n  { text: 'AWB Number', value: 'awbnumber', url: '#' }\\\\\\\\n]\\\\\\\\n\\\\\\\\n/** Mentions Text to Value map */\\\\\\\\nconst mentionSuggesstionsValueMap: Record<string, string> = {}\\\\\\\\n\\\\\\\\n/** Text & Value should have same content when sent to React-Draft */\\\\\\\\nconst mentionSuggesstionsProp = mentionSuggestionsFromAPI.map((m) => {\\\\\\\\n  mentionSuggesstionsValueMap[m.text] = m.value\\\\\\\\n  return { text: m.text, value: m.text, url: m.url }\\\\\\\\n})\\\\\\\\n\\\\\\\\nconst inputHTML =\\\\\\\\n  '<p style=\\\\\\\\\\\\\\\"text-align:left;\\\\\\\\\\\\\\\"><span style=\\\\\\\\\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\\\\\\\\\">Dear recipient,</span></p> <p><span style=\\\\\\\\\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\\\\\\\\\">Order </span><awbnumber><span style=\\\\\\\\\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\\\\\\\\\"> is arriving, should reach your destination at </span><time><span style=\\\\\\\\\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\\\\\\\\\">. </span></p>'\\\\\\\\n\\\\\\\\nconst MainCompoonent = ({\\\\\\\\n  initializeFromHTML,\\\\\\\\n  showHTMLOutput,\\\\\\\\n  showJSONOutput,\\\\\\\\n  insertMentionsProgrammatically\\\\\\\\n}: IMainComponentProps) => {\\\\\\\\n  /** Initialize with empty state */\\\\\\\\n  const [editorState, setEditorState] = React.useState(\\\\\\\\n    EditorState.createEmpty()\\\\\\\\n  )\\\\\\\\n\\\\\\\\n  const JSONOutput = React.useMemo(\\\\\\\\n    () => JSON.stringify(convertToRaw(editorState.getCurrentContent())),\\\\\\\\n    [editorState]\\\\\\\\n  )\\\\\\\\n\\\\\\\\n  const HTMLOutput = React.useMemo(\\\\\\\\n    () =>\\\\\\\\n      draftToHtml(\\\\\\\\n        convertToRaw(editorState.getCurrentContent()),\\\\\\\\n        undefined,\\\\\\\\n        false,\\\\\\\\n        (entity, _text) =>\\\\\\\\n          `<${mentionSuggesstionsValueMap[entity?.data?.value]}>`\\\\\\\\n      ),\\\\\\\\n    [editorState]\\\\\\\\n  )\\\\\\\\n\\\\\\\\n  /** Programmatically insert Mentions - Either at last cursor or at End */\\\\\\\\n  const handleClick = () => {\\\\\\\\n    setEditorState(insertMention(editorState, mentionSuggesstionsProp[0], true))\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  /** Initializing the editor state from HTML */\\\\\\\\n  React.useEffect(() => {\\\\\\\\n    initializeFromHTML &&\\\\\\\\n      setEditorState(\\\\\\\\n        convertHTMLToDraftState(inputHTML || '', mentionSuggestionsFromAPI)\\\\\\\\n      )\\\\\\\\n  }, [])\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <>\\\\\\\\n      {insertMentionsProgrammatically && (\\\\\\\\n        <Button onClick={handleClick}>Insert Mention</Button>\\\\\\\\n      )}\\\\\\\\n      <br />\\\\\\\\n      <br />\\\\\\\\n      <RichTextEditor\\\\\\\\n        label='Email Body'\\\\\\\\n        id='emailBody'\\\\\\\\n        className='emailBody'\\\\\\\\n        isStripPastedStyles={true}\\\\\\\\n        // defaultEditorState={EditorState.createEmpty()}\\\\\\\\n        editorState={editorState}\\\\\\\\n        mention={{\\\\\\\\n          separator: ' ',\\\\\\\\n          trigger: '@',\\\\\\\\n          suggestions: mentionSuggesstionsProp\\\\\\\\n        }}\\\\\\\\n        onEditorStateChange={setEditorState}\\\\\\\\n        placeholder='Enter Email Body'\\\\\\\\n        hideToolbar={boolean('hideToolbar', false)}\\\\\\\\n      />\\\\\\\\n      {/* {editorState.getCurrentContent().getPlainText().length} */}\\\\\\\\n      {showJSONOutput && (\\\\\\\\n        <>\\\\\\\\n          <br />\\\\\\\\n          <br />\\\\\\\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\\\\\\\n            <code>{JSONOutput}</code>\\\\\\\\n          </Box>\\\\\\\\n        </>\\\\\\\\n      )}\\\\\\\\n      {showHTMLOutput && (\\\\\\\\n        <>\\\\\\\\n          <br />\\\\\\\\n          <br />\\\\\\\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\\\\\\\n            <code>{HTMLOutput}</code>\\\\\\\\n          </Box>\\\\\\\\n        </>\\\\\\\\n      )}\\\\\\\\n    </>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const Default = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <MainCompoonent\\\\\\\\n        showHTMLOutput={boolean('showHTMLOutput', false)}\\\\\\\\n        showJSONOutput={boolean('showJSONOutput', false)}\\\\\\\\n        insertMentionsProgrammatically={boolean(\\\\\\\\n          'insertMentionsProgrammatically',\\\\\\\\n          false\\\\\\\\n        )}\\\\\\\\n        initializeFromHTML={boolean('initializeFromHTML', false)}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\";\\\\n// @ts-ignore\\\\nvar __ADDS_MAP__ = {};\\\\n// @ts-ignore\\\\nvar __MAIN_FILE_LOCATION__ = \\\\\\\"/RichTextEditor.stories.tsx\\\\\\\";\\\\n// @ts-ignore\\\\nvar __MODULE_DEPENDENCIES__ = [];\\\\n// @ts-ignore\\\\nvar __LOCAL_DEPENDENCIES__ = {};\\\\n// @ts-ignore\\\\nvar __IDS_TO_FRAMEWORKS__ = {};\\\\n        \\\\nimport React from 'react'\\\\n\\\\nimport { path } from '..'\\\\nimport RichTextEditor from '.'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport { EditorState, convertToRaw } from 'draft-js'\\\\nimport { insertMention, convertHTMLToDraftState } from './apis'\\\\nimport draftToHtml from 'draftjs-to-html'\\\\nimport Box from '../../atoms/Box'\\\\nimport Button from '../../atoms/Button'\\\\nimport { boolean } from '@storybook/addon-knobs'\\\\n\\\\ninterface IMainComponentProps {\\\\n  showHTMLOutput?: boolean\\\\n  showJSONOutput?: boolean\\\\n  insertMentionsProgrammatically?: boolean\\\\n  initializeFromHTML?: boolean\\\\n}\\\\n\\\\nexport default {parameters: {\\\\\\\"storySource\\\\\\\":{\\\\\\\"source\\\\\\\":\\\\\\\"import React from 'react'\\\\\\\\n\\\\\\\\nimport { path } from '..'\\\\\\\\nimport RichTextEditor from '.'\\\\\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\\\\\nimport { EditorState, convertToRaw } from 'draft-js'\\\\\\\\nimport { insertMention, convertHTMLToDraftState } from './apis'\\\\\\\\nimport draftToHtml from 'draftjs-to-html'\\\\\\\\nimport Box from '../../atoms/Box'\\\\\\\\nimport Button from '../../atoms/Button'\\\\\\\\nimport { boolean } from '@storybook/addon-knobs'\\\\\\\\n\\\\\\\\ninterface IMainComponentProps {\\\\\\\\n  showHTMLOutput?: boolean\\\\\\\\n  showJSONOutput?: boolean\\\\\\\\n  insertMentionsProgrammatically?: boolean\\\\\\\\n  initializeFromHTML?: boolean\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/RichTextEditor`,\\\\\\\\n  component: RichTextEditor\\\\\\\\n}\\\\\\\\n\\\\\\\\n/** Mentions structure from API */\\\\\\\\nconst mentionSuggestionsFromAPI = [\\\\\\\\n  { text: 'Delivery Associate Name', value: 'dmmName', url: '#' },\\\\\\\\n  { text: 'Alert Date', value: 'time', url: '#' },\\\\\\\\n  { text: 'Account Name', value: 'accountname', url: '#' },\\\\\\\\n  { text: 'Account Code', value: 'accountCode', url: '#' },\\\\\\\\n  { text: 'Collected Value', value: 'collectedValue', url: '#' },\\\\\\\\n  { text: 'Package Value', value: 'actualvalue', url: '#' },\\\\\\\\n  { text: 'Currency', value: 'currency', url: '#' },\\\\\\\\n  { text: 'AWB Number', value: 'awbnumber', url: '#' }\\\\\\\\n]\\\\\\\\n\\\\\\\\n/** Mentions Text to Value map */\\\\\\\\nconst mentionSuggesstionsValueMap: Record<string, string> = {}\\\\\\\\n\\\\\\\\n/** Text & Value should have same content when sent to React-Draft */\\\\\\\\nconst mentionSuggesstionsProp = mentionSuggestionsFromAPI.map((m) => {\\\\\\\\n  mentionSuggesstionsValueMap[m.text] = m.value\\\\\\\\n  return { text: m.text, value: m.text, url: m.url }\\\\\\\\n})\\\\\\\\n\\\\\\\\nconst inputHTML =\\\\\\\\n  '<p style=\\\\\\\\\\\\\\\"text-align:left;\\\\\\\\\\\\\\\"><span style=\\\\\\\\\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\\\\\\\\\">Dear recipient,</span></p> <p><span style=\\\\\\\\\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\\\\\\\\\">Order </span><awbnumber><span style=\\\\\\\\\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\\\\\\\\\"> is arriving, should reach your destination at </span><time><span style=\\\\\\\\\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\\\\\\\\\">. </span></p>'\\\\\\\\n\\\\\\\\nconst MainCompoonent = ({\\\\\\\\n  initializeFromHTML,\\\\\\\\n  showHTMLOutput,\\\\\\\\n  showJSONOutput,\\\\\\\\n  insertMentionsProgrammatically\\\\\\\\n}: IMainComponentProps) => {\\\\\\\\n  /** Initialize with empty state */\\\\\\\\n  const [editorState, setEditorState] = React.useState(\\\\\\\\n    EditorState.createEmpty()\\\\\\\\n  )\\\\\\\\n\\\\\\\\n  const JSONOutput = React.useMemo(\\\\\\\\n    () => JSON.stringify(convertToRaw(editorState.getCurrentContent())),\\\\\\\\n    [editorState]\\\\\\\\n  )\\\\\\\\n\\\\\\\\n  const HTMLOutput = React.useMemo(\\\\\\\\n    () =>\\\\\\\\n      draftToHtml(\\\\\\\\n        convertToRaw(editorState.getCurrentContent()),\\\\\\\\n        undefined,\\\\\\\\n        false,\\\\\\\\n        (entity, _text) =>\\\\\\\\n          `<${mentionSuggesstionsValueMap[entity?.data?.value]}>`\\\\\\\\n      ),\\\\\\\\n    [editorState]\\\\\\\\n  )\\\\\\\\n\\\\\\\\n  /** Programmatically insert Mentions - Either at last cursor or at End */\\\\\\\\n  const handleClick = () => {\\\\\\\\n    setEditorState(insertMention(editorState, mentionSuggesstionsProp[0], true))\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  /** Initializing the editor state from HTML */\\\\\\\\n  React.useEffect(() => {\\\\\\\\n    initializeFromHTML &&\\\\\\\\n      setEditorState(\\\\\\\\n        convertHTMLToDraftState(inputHTML || '', mentionSuggestionsFromAPI)\\\\\\\\n      )\\\\\\\\n  }, [])\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <>\\\\\\\\n      {insertMentionsProgrammatically && (\\\\\\\\n        <Button onClick={handleClick}>Insert Mention</Button>\\\\\\\\n      )}\\\\\\\\n      <br />\\\\\\\\n      <br />\\\\\\\\n      <RichTextEditor\\\\\\\\n        label='Email Body'\\\\\\\\n        id='emailBody'\\\\\\\\n        className='emailBody'\\\\\\\\n        isStripPastedStyles={true}\\\\\\\\n        // defaultEditorState={EditorState.createEmpty()}\\\\\\\\n        editorState={editorState}\\\\\\\\n        mention={{\\\\\\\\n          separator: ' ',\\\\\\\\n          trigger: '@',\\\\\\\\n          suggestions: mentionSuggesstionsProp\\\\\\\\n        }}\\\\\\\\n        onEditorStateChange={setEditorState}\\\\\\\\n        placeholder='Enter Email Body'\\\\\\\\n        hideToolbar={boolean('hideToolbar', false)}\\\\\\\\n      />\\\\\\\\n      {/* {editorState.getCurrentContent().getPlainText().length} */}\\\\\\\\n      {showJSONOutput && (\\\\\\\\n        <>\\\\\\\\n          <br />\\\\\\\\n          <br />\\\\\\\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\\\\\\\n            <code>{JSONOutput}</code>\\\\\\\\n          </Box>\\\\\\\\n        </>\\\\\\\\n      )}\\\\\\\\n      {showHTMLOutput && (\\\\\\\\n        <>\\\\\\\\n          <br />\\\\\\\\n          <br />\\\\\\\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\\\\\\\n            <code>{HTMLOutput}</code>\\\\\\\\n          </Box>\\\\\\\\n        </>\\\\\\\\n      )}\\\\\\\\n    </>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const Default = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <MainCompoonent\\\\\\\\n        showHTMLOutput={boolean('showHTMLOutput', false)}\\\\\\\\n        showJSONOutput={boolean('showJSONOutput', false)}\\\\\\\\n        insertMentionsProgrammatically={boolean(\\\\\\\\n          'insertMentionsProgrammatically',\\\\\\\\n          false\\\\\\\\n        )}\\\\\\\\n        initializeFromHTML={boolean('initializeFromHTML', false)}\\\\\\\\n      />\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\",\\\\\\\"locationsMap\\\\\\\":{}},},\\\\n  title: `${path}/RichTextEditor`,\\\\n  component: RichTextEditor\\\\n}\\\\n\\\\n/** Mentions structure from API */\\\\nconst mentionSuggestionsFromAPI = [\\\\n  { text: 'Delivery Associate Name', value: 'dmmName', url: '#' },\\\\n  { text: 'Alert Date', value: 'time', url: '#' },\\\\n  { text: 'Account Name', value: 'accountname', url: '#' },\\\\n  { text: 'Account Code', value: 'accountCode', url: '#' },\\\\n  { text: 'Collected Value', value: 'collectedValue', url: '#' },\\\\n  { text: 'Package Value', value: 'actualvalue', url: '#' },\\\\n  { text: 'Currency', value: 'currency', url: '#' },\\\\n  { text: 'AWB Number', value: 'awbnumber', url: '#' }\\\\n]\\\\n\\\\n/** Mentions Text to Value map */\\\\nconst mentionSuggesstionsValueMap: Record<string, string> = {}\\\\n\\\\n/** Text & Value should have same content when sent to React-Draft */\\\\nconst mentionSuggesstionsProp = mentionSuggestionsFromAPI.map((m) => {\\\\n  mentionSuggesstionsValueMap[m.text] = m.value\\\\n  return { text: m.text, value: m.text, url: m.url }\\\\n})\\\\n\\\\nconst inputHTML =\\\\n  '<p style=\\\\\\\"text-align:left;\\\\\\\"><span style=\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\">Dear recipient,</span></p> <p><span style=\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\">Order </span><awbnumber><span style=\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\"> is arriving, should reach your destination at </span><time><span style=\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\">. </span></p>'\\\\n\\\\nconst MainCompoonent = ({\\\\n  initializeFromHTML,\\\\n  showHTMLOutput,\\\\n  showJSONOutput,\\\\n  insertMentionsProgrammatically\\\\n}: IMainComponentProps) => {\\\\n  /** Initialize with empty state */\\\\n  const [editorState, setEditorState] = React.useState(\\\\n    EditorState.createEmpty()\\\\n  )\\\\n\\\\n  const JSONOutput = React.useMemo(\\\\n    () => JSON.stringify(convertToRaw(editorState.getCurrentContent())),\\\\n    [editorState]\\\\n  )\\\\n\\\\n  const HTMLOutput = React.useMemo(\\\\n    () =>\\\\n      draftToHtml(\\\\n        convertToRaw(editorState.getCurrentContent()),\\\\n        undefined,\\\\n        false,\\\\n        (entity, _text) =>\\\\n          `<${mentionSuggesstionsValueMap[entity?.data?.value]}>`\\\\n      ),\\\\n    [editorState]\\\\n  )\\\\n\\\\n  /** Programmatically insert Mentions - Either at last cursor or at End */\\\\n  const handleClick = () => {\\\\n    setEditorState(insertMention(editorState, mentionSuggesstionsProp[0], true))\\\\n  }\\\\n\\\\n  /** Initializing the editor state from HTML */\\\\n  React.useEffect(() => {\\\\n    initializeFromHTML &&\\\\n      setEditorState(\\\\n        convertHTMLToDraftState(inputHTML || '', mentionSuggestionsFromAPI)\\\\n      )\\\\n  }, [])\\\\n\\\\n  return (\\\\n    <>\\\\n      {insertMentionsProgrammatically && (\\\\n        <Button onClick={handleClick}>Insert Mention</Button>\\\\n      )}\\\\n      <br />\\\\n      <br />\\\\n      <RichTextEditor\\\\n        label='Email Body'\\\\n        id='emailBody'\\\\n        className='emailBody'\\\\n        isStripPastedStyles={true}\\\\n        // defaultEditorState={EditorState.createEmpty()}\\\\n        editorState={editorState}\\\\n        mention={{\\\\n          separator: ' ',\\\\n          trigger: '@',\\\\n          suggestions: mentionSuggesstionsProp\\\\n        }}\\\\n        onEditorStateChange={setEditorState}\\\\n        placeholder='Enter Email Body'\\\\n        hideToolbar={boolean('hideToolbar', false)}\\\\n      />\\\\n      {/* {editorState.getCurrentContent().getPlainText().length} */}\\\\n      {showJSONOutput && (\\\\n        <>\\\\n          <br />\\\\n          <br />\\\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\\\n            <code>{JSONOutput}</code>\\\\n          </Box>\\\\n        </>\\\\n      )}\\\\n      {showHTMLOutput && (\\\\n        <>\\\\n          <br />\\\\n          <br />\\\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\\\n            <code>{HTMLOutput}</code>\\\\n          </Box>\\\\n        </>\\\\n      )}\\\\n    </>\\\\n  )\\\\n}\\\\n\\\\nexport const Default = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <MainCompoonent\\\\n        showHTMLOutput={boolean('showHTMLOutput', false)}\\\\n        showJSONOutput={boolean('showJSONOutput', false)}\\\\n        insertMentionsProgrammatically={boolean(\\\\n          'insertMentionsProgrammatically',\\\\n          false\\\\n        )}\\\\n        initializeFromHTML={boolean('initializeFromHTML', false)}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\",\\\"locationsMap\\\":{}},\\\"storySource\\\":{\\\"source\\\":\\\"import React from 'react'\\\\n\\\\nimport { path } from '..'\\\\nimport RichTextEditor from '.'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport { EditorState, convertToRaw } from 'draft-js'\\\\nimport { insertMention, convertHTMLToDraftState } from './apis'\\\\nimport draftToHtml from 'draftjs-to-html'\\\\nimport Box from '../../atoms/Box'\\\\nimport Button from '../../atoms/Button'\\\\nimport { boolean } from '@storybook/addon-knobs'\\\\n\\\\ninterface IMainComponentProps {\\\\n  showHTMLOutput?: boolean\\\\n  showJSONOutput?: boolean\\\\n  insertMentionsProgrammatically?: boolean\\\\n  initializeFromHTML?: boolean\\\\n}\\\\n\\\\nexport default {\\\\n  title: `${path}/RichTextEditor`,\\\\n  component: RichTextEditor\\\\n}\\\\n\\\\n/** Mentions structure from API */\\\\nconst mentionSuggestionsFromAPI = [\\\\n  { text: 'Delivery Associate Name', value: 'dmmName', url: '#' },\\\\n  { text: 'Alert Date', value: 'time', url: '#' },\\\\n  { text: 'Account Name', value: 'accountname', url: '#' },\\\\n  { text: 'Account Code', value: 'accountCode', url: '#' },\\\\n  { text: 'Collected Value', value: 'collectedValue', url: '#' },\\\\n  { text: 'Package Value', value: 'actualvalue', url: '#' },\\\\n  { text: 'Currency', value: 'currency', url: '#' },\\\\n  { text: 'AWB Number', value: 'awbnumber', url: '#' }\\\\n]\\\\n\\\\n/** Mentions Text to Value map */\\\\nconst mentionSuggesstionsValueMap: Record<string, string> = {}\\\\n\\\\n/** Text & Value should have same content when sent to React-Draft */\\\\nconst mentionSuggesstionsProp = mentionSuggestionsFromAPI.map((m) => {\\\\n  mentionSuggesstionsValueMap[m.text] = m.value\\\\n  return { text: m.text, value: m.text, url: m.url }\\\\n})\\\\n\\\\nconst inputHTML =\\\\n  '<p style=\\\\\\\"text-align:left;\\\\\\\"><span style=\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\">Dear recipient,</span></p> <p><span style=\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\">Order </span><awbnumber><span style=\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\"> is arriving, should reach your destination at </span><time><span style=\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\">. </span></p>'\\\\n\\\\nconst MainCompoonent = ({\\\\n  initializeFromHTML,\\\\n  showHTMLOutput,\\\\n  showJSONOutput,\\\\n  insertMentionsProgrammatically\\\\n}: IMainComponentProps) => {\\\\n  /** Initialize with empty state */\\\\n  const [editorState, setEditorState] = React.useState(\\\\n    EditorState.createEmpty()\\\\n  )\\\\n\\\\n  const JSONOutput = React.useMemo(\\\\n    () => JSON.stringify(convertToRaw(editorState.getCurrentContent())),\\\\n    [editorState]\\\\n  )\\\\n\\\\n  const HTMLOutput = React.useMemo(\\\\n    () =>\\\\n      draftToHtml(\\\\n        convertToRaw(editorState.getCurrentContent()),\\\\n        undefined,\\\\n        false,\\\\n        (entity, _text) =>\\\\n          `<${mentionSuggesstionsValueMap[entity?.data?.value]}>`\\\\n      ),\\\\n    [editorState]\\\\n  )\\\\n\\\\n  /** Programmatically insert Mentions - Either at last cursor or at End */\\\\n  const handleClick = () => {\\\\n    setEditorState(insertMention(editorState, mentionSuggesstionsProp[0], true))\\\\n  }\\\\n\\\\n  /** Initializing the editor state from HTML */\\\\n  React.useEffect(() => {\\\\n    initializeFromHTML &&\\\\n      setEditorState(\\\\n        convertHTMLToDraftState(inputHTML || '', mentionSuggestionsFromAPI)\\\\n      )\\\\n  }, [])\\\\n\\\\n  return (\\\\n    <>\\\\n      {insertMentionsProgrammatically && (\\\\n        <Button onClick={handleClick}>Insert Mention</Button>\\\\n      )}\\\\n      <br />\\\\n      <br />\\\\n      <RichTextEditor\\\\n        label='Email Body'\\\\n        id='emailBody'\\\\n        className='emailBody'\\\\n        isStripPastedStyles={true}\\\\n        // defaultEditorState={EditorState.createEmpty()}\\\\n        editorState={editorState}\\\\n        mention={{\\\\n          separator: ' ',\\\\n          trigger: '@',\\\\n          suggestions: mentionSuggesstionsProp\\\\n        }}\\\\n        onEditorStateChange={setEditorState}\\\\n        placeholder='Enter Email Body'\\\\n        hideToolbar={boolean('hideToolbar', false)}\\\\n      />\\\\n      {/* {editorState.getCurrentContent().getPlainText().length} */}\\\\n      {showJSONOutput && (\\\\n        <>\\\\n          <br />\\\\n          <br />\\\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\\\n            <code>{JSONOutput}</code>\\\\n          </Box>\\\\n        </>\\\\n      )}\\\\n      {showHTMLOutput && (\\\\n        <>\\\\n          <br />\\\\n          <br />\\\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\\\n            <code>{HTMLOutput}</code>\\\\n          </Box>\\\\n        </>\\\\n      )}\\\\n    </>\\\\n  )\\\\n}\\\\n\\\\nexport const Default = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <MainCompoonent\\\\n        showHTMLOutput={boolean('showHTMLOutput', false)}\\\\n        showJSONOutput={boolean('showJSONOutput', false)}\\\\n        insertMentionsProgrammatically={boolean(\\\\n          'insertMentionsProgrammatically',\\\\n          false\\\\n        )}\\\\n        initializeFromHTML={boolean('initializeFromHTML', false)}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\",\\\"locationsMap\\\":{}},},\\n  title: `${path}/RichTextEditor`,\\n  component: RichTextEditor\\n}\\n\\n/** Mentions structure from API */\\nconst mentionSuggestionsFromAPI = [\\n  { text: 'Delivery Associate Name', value: 'dmmName', url: '#' },\\n  { text: 'Alert Date', value: 'time', url: '#' },\\n  { text: 'Account Name', value: 'accountname', url: '#' },\\n  { text: 'Account Code', value: 'accountCode', url: '#' },\\n  { text: 'Collected Value', value: 'collectedValue', url: '#' },\\n  { text: 'Package Value', value: 'actualvalue', url: '#' },\\n  { text: 'Currency', value: 'currency', url: '#' },\\n  { text: 'AWB Number', value: 'awbnumber', url: '#' }\\n]\\n\\n/** Mentions Text to Value map */\\nconst mentionSuggesstionsValueMap: Record<string, string> = {}\\n\\n/** Text & Value should have same content when sent to React-Draft */\\nconst mentionSuggesstionsProp = mentionSuggestionsFromAPI.map((m) => {\\n  mentionSuggesstionsValueMap[m.text] = m.value\\n  return { text: m.text, value: m.text, url: m.url }\\n})\\n\\nconst inputHTML =\\n  '<p style=\\\"text-align:left;\\\"><span style=\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\">Dear recipient,</span></p> <p><span style=\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\">Order </span><awbnumber><span style=\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\"> is arriving, should reach your destination at </span><time><span style=\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\">. </span></p>'\\n\\nconst MainCompoonent = ({\\n  initializeFromHTML,\\n  showHTMLOutput,\\n  showJSONOutput,\\n  insertMentionsProgrammatically\\n}: IMainComponentProps) => {\\n  /** Initialize with empty state */\\n  const [editorState, setEditorState] = React.useState(\\n    EditorState.createEmpty()\\n  )\\n\\n  const JSONOutput = React.useMemo(\\n    () => JSON.stringify(convertToRaw(editorState.getCurrentContent())),\\n    [editorState]\\n  )\\n\\n  const HTMLOutput = React.useMemo(\\n    () =>\\n      draftToHtml(\\n        convertToRaw(editorState.getCurrentContent()),\\n        undefined,\\n        false,\\n        (entity, _text) =>\\n          `<${mentionSuggesstionsValueMap[entity?.data?.value]}>`\\n      ),\\n    [editorState]\\n  )\\n\\n  /** Programmatically insert Mentions - Either at last cursor or at End */\\n  const handleClick = () => {\\n    setEditorState(insertMention(editorState, mentionSuggesstionsProp[0], true))\\n  }\\n\\n  /** Initializing the editor state from HTML */\\n  React.useEffect(() => {\\n    initializeFromHTML &&\\n      setEditorState(\\n        convertHTMLToDraftState(inputHTML || '', mentionSuggestionsFromAPI)\\n      )\\n  }, [])\\n\\n  return (\\n    <>\\n      {insertMentionsProgrammatically && (\\n        <Button onClick={handleClick}>Insert Mention</Button>\\n      )}\\n      <br />\\n      <br />\\n      <RichTextEditor\\n        label='Email Body'\\n        id='emailBody'\\n        className='emailBody'\\n        isStripPastedStyles={true}\\n        // defaultEditorState={EditorState.createEmpty()}\\n        editorState={editorState}\\n        mention={{\\n          separator: ' ',\\n          trigger: '@',\\n          suggestions: mentionSuggesstionsProp\\n        }}\\n        onEditorStateChange={setEditorState}\\n        placeholder='Enter Email Body'\\n        hideToolbar={boolean('hideToolbar', false)}\\n      />\\n      {/* {editorState.getCurrentContent().getPlainText().length} */}\\n      {showJSONOutput && (\\n        <>\\n          <br />\\n          <br />\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\n            <code>{JSONOutput}</code>\\n          </Box>\\n        </>\\n      )}\\n      {showHTMLOutput && (\\n        <>\\n          <br />\\n          <br />\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\n            <code>{HTMLOutput}</code>\\n          </Box>\\n        </>\\n      )}\\n    </>\\n  )\\n}\\n\\nexport const Default = addSourceDecorator(addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <MainCompoonent\\n        showHTMLOutput={boolean('showHTMLOutput', false)}\\n        showJSONOutput={boolean('showJSONOutput', false)}\\n        insertMentionsProgrammatically={boolean(\\n          'insertMentionsProgrammatically',\\n          false\\n        )}\\n        initializeFromHTML={boolean('initializeFromHTML', false)}\\n      />\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\",\"locationsMap\":{}},\"storySource\":{\"source\":\"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/organisms/RichTextEditor\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"import React from 'react'\\\\n\\\\nimport { path } from '..'\\\\nimport RichTextEditor from '.'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport { EditorState, convertToRaw } from 'draft-js'\\\\nimport { insertMention, convertHTMLToDraftState } from './apis'\\\\nimport draftToHtml from 'draftjs-to-html'\\\\nimport Box from '../../atoms/Box'\\\\nimport Button from '../../atoms/Button'\\\\nimport { boolean } from '@storybook/addon-knobs'\\\\n\\\\ninterface IMainComponentProps {\\\\n  showHTMLOutput?: boolean\\\\n  showJSONOutput?: boolean\\\\n  insertMentionsProgrammatically?: boolean\\\\n  initializeFromHTML?: boolean\\\\n}\\\\n\\\\nexport default {\\\\n  title: `${path}/RichTextEditor`,\\\\n  component: RichTextEditor\\\\n}\\\\n\\\\n/** Mentions structure from API */\\\\nconst mentionSuggestionsFromAPI = [\\\\n  { text: 'Delivery Associate Name', value: 'dmmName', url: '#' },\\\\n  { text: 'Alert Date', value: 'time', url: '#' },\\\\n  { text: 'Account Name', value: 'accountname', url: '#' },\\\\n  { text: 'Account Code', value: 'accountCode', url: '#' },\\\\n  { text: 'Collected Value', value: 'collectedValue', url: '#' },\\\\n  { text: 'Package Value', value: 'actualvalue', url: '#' },\\\\n  { text: 'Currency', value: 'currency', url: '#' },\\\\n  { text: 'AWB Number', value: 'awbnumber', url: '#' }\\\\n]\\\\n\\\\n/** Mentions Text to Value map */\\\\nconst mentionSuggesstionsValueMap: Record<string, string> = {}\\\\n\\\\n/** Text & Value should have same content when sent to React-Draft */\\\\nconst mentionSuggesstionsProp = mentionSuggestionsFromAPI.map((m) => {\\\\n  mentionSuggesstionsValueMap[m.text] = m.value\\\\n  return { text: m.text, value: m.text, url: m.url }\\\\n})\\\\n\\\\nconst inputHTML =\\\\n  '<p style=\\\\\\\"text-align:left;\\\\\\\"><span style=\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\">Dear recipient,</span></p> <p><span style=\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\">Order </span><awbnumber><span style=\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\"> is arriving, should reach your destination at </span><time><span style=\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\">. </span></p>'\\\\n\\\\nconst MainCompoonent = ({\\\\n  initializeFromHTML,\\\\n  showHTMLOutput,\\\\n  showJSONOutput,\\\\n  insertMentionsProgrammatically\\\\n}: IMainComponentProps) => {\\\\n  /** Initialize with empty state */\\\\n  const [editorState, setEditorState] = React.useState(\\\\n    EditorState.createEmpty()\\\\n  )\\\\n\\\\n  const JSONOutput = React.useMemo(\\\\n    () => JSON.stringify(convertToRaw(editorState.getCurrentContent())),\\\\n    [editorState]\\\\n  )\\\\n\\\\n  const HTMLOutput = React.useMemo(\\\\n    () =>\\\\n      draftToHtml(\\\\n        convertToRaw(editorState.getCurrentContent()),\\\\n        undefined,\\\\n        false,\\\\n        (entity, _text) =>\\\\n          `<${mentionSuggesstionsValueMap[entity?.data?.value]}>`\\\\n      ),\\\\n    [editorState]\\\\n  )\\\\n\\\\n  /** Programmatically insert Mentions - Either at last cursor or at End */\\\\n  const handleClick = () => {\\\\n    setEditorState(insertMention(editorState, mentionSuggesstionsProp[0], true))\\\\n  }\\\\n\\\\n  /** Initializing the editor state from HTML */\\\\n  React.useEffect(() => {\\\\n    initializeFromHTML &&\\\\n      setEditorState(\\\\n        convertHTMLToDraftState(inputHTML || '', mentionSuggestionsFromAPI)\\\\n      )\\\\n  }, [])\\\\n\\\\n  return (\\\\n    <>\\\\n      {insertMentionsProgrammatically && (\\\\n        <Button onClick={handleClick}>Insert Mention</Button>\\\\n      )}\\\\n      <br />\\\\n      <br />\\\\n      <RichTextEditor\\\\n        label='Email Body'\\\\n        id='emailBody'\\\\n        className='emailBody'\\\\n        isStripPastedStyles={true}\\\\n        // defaultEditorState={EditorState.createEmpty()}\\\\n        editorState={editorState}\\\\n        mention={{\\\\n          separator: ' ',\\\\n          trigger: '@',\\\\n          suggestions: mentionSuggesstionsProp\\\\n        }}\\\\n        onEditorStateChange={setEditorState}\\\\n        placeholder='Enter Email Body'\\\\n        hideToolbar={boolean('hideToolbar', false)}\\\\n      />\\\\n      {/* {editorState.getCurrentContent().getPlainText().length} */}\\\\n      {showJSONOutput && (\\\\n        <>\\\\n          <br />\\\\n          <br />\\\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\\\n            <code>{JSONOutput}</code>\\\\n          </Box>\\\\n        </>\\\\n      )}\\\\n      {showHTMLOutput && (\\\\n        <>\\\\n          <br />\\\\n          <br />\\\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\\\n            <code>{HTMLOutput}</code>\\\\n          </Box>\\\\n        </>\\\\n      )}\\\\n    </>\\\\n  )\\\\n}\\\\n\\\\nexport const Default = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <MainCompoonent\\\\n        showHTMLOutput={boolean('showHTMLOutput', false)}\\\\n        showJSONOutput={boolean('showJSONOutput', false)}\\\\n        insertMentionsProgrammatically={boolean(\\\\n          'insertMentionsProgrammatically',\\\\n          false\\\\n        )}\\\\n        initializeFromHTML={boolean('initializeFromHTML', false)}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/RichTextEditor.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\nimport React from 'react'\\n\\nimport { path } from '..'\\nimport RichTextEditor from '.'\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\nimport { EditorState, convertToRaw } from 'draft-js'\\nimport { insertMention, convertHTMLToDraftState } from './apis'\\nimport draftToHtml from 'draftjs-to-html'\\nimport Box from '../../atoms/Box'\\nimport Button from '../../atoms/Button'\\nimport { boolean } from '@storybook/addon-knobs'\\n\\ninterface IMainComponentProps {\\n  showHTMLOutput?: boolean\\n  showJSONOutput?: boolean\\n  insertMentionsProgrammatically?: boolean\\n  initializeFromHTML?: boolean\\n}\\n\\nexport default {parameters: {\\\"storySource\\\":{\\\"source\\\":\\\"import React from 'react'\\\\n\\\\nimport { path } from '..'\\\\nimport RichTextEditor from '.'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport { EditorState, convertToRaw } from 'draft-js'\\\\nimport { insertMention, convertHTMLToDraftState } from './apis'\\\\nimport draftToHtml from 'draftjs-to-html'\\\\nimport Box from '../../atoms/Box'\\\\nimport Button from '../../atoms/Button'\\\\nimport { boolean } from '@storybook/addon-knobs'\\\\n\\\\ninterface IMainComponentProps {\\\\n  showHTMLOutput?: boolean\\\\n  showJSONOutput?: boolean\\\\n  insertMentionsProgrammatically?: boolean\\\\n  initializeFromHTML?: boolean\\\\n}\\\\n\\\\nexport default {\\\\n  title: `${path}/RichTextEditor`,\\\\n  component: RichTextEditor\\\\n}\\\\n\\\\n/** Mentions structure from API */\\\\nconst mentionSuggestionsFromAPI = [\\\\n  { text: 'Delivery Associate Name', value: 'dmmName', url: '#' },\\\\n  { text: 'Alert Date', value: 'time', url: '#' },\\\\n  { text: 'Account Name', value: 'accountname', url: '#' },\\\\n  { text: 'Account Code', value: 'accountCode', url: '#' },\\\\n  { text: 'Collected Value', value: 'collectedValue', url: '#' },\\\\n  { text: 'Package Value', value: 'actualvalue', url: '#' },\\\\n  { text: 'Currency', value: 'currency', url: '#' },\\\\n  { text: 'AWB Number', value: 'awbnumber', url: '#' }\\\\n]\\\\n\\\\n/** Mentions Text to Value map */\\\\nconst mentionSuggesstionsValueMap: Record<string, string> = {}\\\\n\\\\n/** Text & Value should have same content when sent to React-Draft */\\\\nconst mentionSuggesstionsProp = mentionSuggestionsFromAPI.map((m) => {\\\\n  mentionSuggesstionsValueMap[m.text] = m.value\\\\n  return { text: m.text, value: m.text, url: m.url }\\\\n})\\\\n\\\\nconst inputHTML =\\\\n  '<p style=\\\\\\\"text-align:left;\\\\\\\"><span style=\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\">Dear recipient,</span></p> <p><span style=\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\">Order </span><awbnumber><span style=\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\"> is arriving, should reach your destination at </span><time><span style=\\\\\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\\\\\">. </span></p>'\\\\n\\\\nconst MainCompoonent = ({\\\\n  initializeFromHTML,\\\\n  showHTMLOutput,\\\\n  showJSONOutput,\\\\n  insertMentionsProgrammatically\\\\n}: IMainComponentProps) => {\\\\n  /** Initialize with empty state */\\\\n  const [editorState, setEditorState] = React.useState(\\\\n    EditorState.createEmpty()\\\\n  )\\\\n\\\\n  const JSONOutput = React.useMemo(\\\\n    () => JSON.stringify(convertToRaw(editorState.getCurrentContent())),\\\\n    [editorState]\\\\n  )\\\\n\\\\n  const HTMLOutput = React.useMemo(\\\\n    () =>\\\\n      draftToHtml(\\\\n        convertToRaw(editorState.getCurrentContent()),\\\\n        undefined,\\\\n        false,\\\\n        (entity, _text) =>\\\\n          `<${mentionSuggesstionsValueMap[entity?.data?.value]}>`\\\\n      ),\\\\n    [editorState]\\\\n  )\\\\n\\\\n  /** Programmatically insert Mentions - Either at last cursor or at End */\\\\n  const handleClick = () => {\\\\n    setEditorState(insertMention(editorState, mentionSuggesstionsProp[0], true))\\\\n  }\\\\n\\\\n  /** Initializing the editor state from HTML */\\\\n  React.useEffect(() => {\\\\n    initializeFromHTML &&\\\\n      setEditorState(\\\\n        convertHTMLToDraftState(inputHTML || '', mentionSuggestionsFromAPI)\\\\n      )\\\\n  }, [])\\\\n\\\\n  return (\\\\n    <>\\\\n      {insertMentionsProgrammatically && (\\\\n        <Button onClick={handleClick}>Insert Mention</Button>\\\\n      )}\\\\n      <br />\\\\n      <br />\\\\n      <RichTextEditor\\\\n        label='Email Body'\\\\n        id='emailBody'\\\\n        className='emailBody'\\\\n        isStripPastedStyles={true}\\\\n        // defaultEditorState={EditorState.createEmpty()}\\\\n        editorState={editorState}\\\\n        mention={{\\\\n          separator: ' ',\\\\n          trigger: '@',\\\\n          suggestions: mentionSuggesstionsProp\\\\n        }}\\\\n        onEditorStateChange={setEditorState}\\\\n        placeholder='Enter Email Body'\\\\n        hideToolbar={boolean('hideToolbar', false)}\\\\n      />\\\\n      {/* {editorState.getCurrentContent().getPlainText().length} */}\\\\n      {showJSONOutput && (\\\\n        <>\\\\n          <br />\\\\n          <br />\\\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\\\n            <code>{JSONOutput}</code>\\\\n          </Box>\\\\n        </>\\\\n      )}\\\\n      {showHTMLOutput && (\\\\n        <>\\\\n          <br />\\\\n          <br />\\\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\\\n            <code>{HTMLOutput}</code>\\\\n          </Box>\\\\n        </>\\\\n      )}\\\\n    </>\\\\n  )\\\\n}\\\\n\\\\nexport const Default = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <MainCompoonent\\\\n        showHTMLOutput={boolean('showHTMLOutput', false)}\\\\n        showJSONOutput={boolean('showJSONOutput', false)}\\\\n        insertMentionsProgrammatically={boolean(\\\\n          'insertMentionsProgrammatically',\\\\n          false\\\\n        )}\\\\n        initializeFromHTML={boolean('initializeFromHTML', false)}\\\\n      />\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\",\\\"locationsMap\\\":{}},},\\n  title: `${path}/RichTextEditor`,\\n  component: RichTextEditor\\n}\\n\\n/** Mentions structure from API */\\nconst mentionSuggestionsFromAPI = [\\n  { text: 'Delivery Associate Name', value: 'dmmName', url: '#' },\\n  { text: 'Alert Date', value: 'time', url: '#' },\\n  { text: 'Account Name', value: 'accountname', url: '#' },\\n  { text: 'Account Code', value: 'accountCode', url: '#' },\\n  { text: 'Collected Value', value: 'collectedValue', url: '#' },\\n  { text: 'Package Value', value: 'actualvalue', url: '#' },\\n  { text: 'Currency', value: 'currency', url: '#' },\\n  { text: 'AWB Number', value: 'awbnumber', url: '#' }\\n]\\n\\n/** Mentions Text to Value map */\\nconst mentionSuggesstionsValueMap: Record<string, string> = {}\\n\\n/** Text & Value should have same content when sent to React-Draft */\\nconst mentionSuggesstionsProp = mentionSuggestionsFromAPI.map((m) => {\\n  mentionSuggesstionsValueMap[m.text] = m.value\\n  return { text: m.text, value: m.text, url: m.url }\\n})\\n\\nconst inputHTML =\\n  '<p style=\\\"text-align:left;\\\"><span style=\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\">Dear recipient,</span></p> <p><span style=\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\">Order </span><awbnumber><span style=\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\"> is arriving, should reach your destination at </span><time><span style=\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\">. </span></p>'\\n\\nconst MainCompoonent = ({\\n  initializeFromHTML,\\n  showHTMLOutput,\\n  showJSONOutput,\\n  insertMentionsProgrammatically\\n}: IMainComponentProps) => {\\n  /** Initialize with empty state */\\n  const [editorState, setEditorState] = React.useState(\\n    EditorState.createEmpty()\\n  )\\n\\n  const JSONOutput = React.useMemo(\\n    () => JSON.stringify(convertToRaw(editorState.getCurrentContent())),\\n    [editorState]\\n  )\\n\\n  const HTMLOutput = React.useMemo(\\n    () =>\\n      draftToHtml(\\n        convertToRaw(editorState.getCurrentContent()),\\n        undefined,\\n        false,\\n        (entity, _text) =>\\n          `<${mentionSuggesstionsValueMap[entity?.data?.value]}>`\\n      ),\\n    [editorState]\\n  )\\n\\n  /** Programmatically insert Mentions - Either at last cursor or at End */\\n  const handleClick = () => {\\n    setEditorState(insertMention(editorState, mentionSuggesstionsProp[0], true))\\n  }\\n\\n  /** Initializing the editor state from HTML */\\n  React.useEffect(() => {\\n    initializeFromHTML &&\\n      setEditorState(\\n        convertHTMLToDraftState(inputHTML || '', mentionSuggestionsFromAPI)\\n      )\\n  }, [])\\n\\n  return (\\n    <>\\n      {insertMentionsProgrammatically && (\\n        <Button onClick={handleClick}>Insert Mention</Button>\\n      )}\\n      <br />\\n      <br />\\n      <RichTextEditor\\n        label='Email Body'\\n        id='emailBody'\\n        className='emailBody'\\n        isStripPastedStyles={true}\\n        // defaultEditorState={EditorState.createEmpty()}\\n        editorState={editorState}\\n        mention={{\\n          separator: ' ',\\n          trigger: '@',\\n          suggestions: mentionSuggesstionsProp\\n        }}\\n        onEditorStateChange={setEditorState}\\n        placeholder='Enter Email Body'\\n        hideToolbar={boolean('hideToolbar', false)}\\n      />\\n      {/* {editorState.getCurrentContent().getPlainText().length} */}\\n      {showJSONOutput && (\\n        <>\\n          <br />\\n          <br />\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\n            <code>{JSONOutput}</code>\\n          </Box>\\n        </>\\n      )}\\n      {showHTMLOutput && (\\n        <>\\n          <br />\\n          <br />\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\n            <code>{HTMLOutput}</code>\\n          </Box>\\n        </>\\n      )}\\n    </>\\n  )\\n}\\n\\nexport const Default = addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <MainCompoonent\\n        showHTMLOutput={boolean('showHTMLOutput', false)}\\n        showJSONOutput={boolean('showJSONOutput', false)}\\n        insertMentionsProgrammatically={boolean(\\n          'insertMentionsProgrammatically',\\n          false\\n        )}\\n        initializeFromHTML={boolean('initializeFromHTML', false)}\\n      />\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\",\"locationsMap\":{}},\"storySource\":{\"source\":\"import React from 'react'\\n\\nimport { path } from '..'\\nimport RichTextEditor from '.'\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\nimport { EditorState, convertToRaw } from 'draft-js'\\nimport { insertMention, convertHTMLToDraftState } from './apis'\\nimport draftToHtml from 'draftjs-to-html'\\nimport Box from '../../atoms/Box'\\nimport Button from '../../atoms/Button'\\nimport { boolean } from '@storybook/addon-knobs'\\n\\ninterface IMainComponentProps {\\n  showHTMLOutput?: boolean\\n  showJSONOutput?: boolean\\n  insertMentionsProgrammatically?: boolean\\n  initializeFromHTML?: boolean\\n}\\n\\nexport default {\\n  title: `${path}/RichTextEditor`,\\n  component: RichTextEditor\\n}\\n\\n/** Mentions structure from API */\\nconst mentionSuggestionsFromAPI = [\\n  { text: 'Delivery Associate Name', value: 'dmmName', url: '#' },\\n  { text: 'Alert Date', value: 'time', url: '#' },\\n  { text: 'Account Name', value: 'accountname', url: '#' },\\n  { text: 'Account Code', value: 'accountCode', url: '#' },\\n  { text: 'Collected Value', value: 'collectedValue', url: '#' },\\n  { text: 'Package Value', value: 'actualvalue', url: '#' },\\n  { text: 'Currency', value: 'currency', url: '#' },\\n  { text: 'AWB Number', value: 'awbnumber', url: '#' }\\n]\\n\\n/** Mentions Text to Value map */\\nconst mentionSuggesstionsValueMap: Record<string, string> = {}\\n\\n/** Text & Value should have same content when sent to React-Draft */\\nconst mentionSuggesstionsProp = mentionSuggestionsFromAPI.map((m) => {\\n  mentionSuggesstionsValueMap[m.text] = m.value\\n  return { text: m.text, value: m.text, url: m.url }\\n})\\n\\nconst inputHTML =\\n  '<p style=\\\"text-align:left;\\\"><span style=\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\">Dear recipient,</span></p> <p><span style=\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\">Order </span><awbnumber><span style=\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\"> is arriving, should reach your destination at </span><time><span style=\\\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\\\">. </span></p>'\\n\\nconst MainCompoonent = ({\\n  initializeFromHTML,\\n  showHTMLOutput,\\n  showJSONOutput,\\n  insertMentionsProgrammatically\\n}: IMainComponentProps) => {\\n  /** Initialize with empty state */\\n  const [editorState, setEditorState] = React.useState(\\n    EditorState.createEmpty()\\n  )\\n\\n  const JSONOutput = React.useMemo(\\n    () => JSON.stringify(convertToRaw(editorState.getCurrentContent())),\\n    [editorState]\\n  )\\n\\n  const HTMLOutput = React.useMemo(\\n    () =>\\n      draftToHtml(\\n        convertToRaw(editorState.getCurrentContent()),\\n        undefined,\\n        false,\\n        (entity, _text) =>\\n          `<${mentionSuggesstionsValueMap[entity?.data?.value]}>`\\n      ),\\n    [editorState]\\n  )\\n\\n  /** Programmatically insert Mentions - Either at last cursor or at End */\\n  const handleClick = () => {\\n    setEditorState(insertMention(editorState, mentionSuggesstionsProp[0], true))\\n  }\\n\\n  /** Initializing the editor state from HTML */\\n  React.useEffect(() => {\\n    initializeFromHTML &&\\n      setEditorState(\\n        convertHTMLToDraftState(inputHTML || '', mentionSuggestionsFromAPI)\\n      )\\n  }, [])\\n\\n  return (\\n    <>\\n      {insertMentionsProgrammatically && (\\n        <Button onClick={handleClick}>Insert Mention</Button>\\n      )}\\n      <br />\\n      <br />\\n      <RichTextEditor\\n        label='Email Body'\\n        id='emailBody'\\n        className='emailBody'\\n        isStripPastedStyles={true}\\n        // defaultEditorState={EditorState.createEmpty()}\\n        editorState={editorState}\\n        mention={{\\n          separator: ' ',\\n          trigger: '@',\\n          suggestions: mentionSuggesstionsProp\\n        }}\\n        onEditorStateChange={setEditorState}\\n        placeholder='Enter Email Body'\\n        hideToolbar={boolean('hideToolbar', false)}\\n      />\\n      {/* {editorState.getCurrentContent().getPlainText().length} */}\\n      {showJSONOutput && (\\n        <>\\n          <br />\\n          <br />\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\n            <code>{JSONOutput}</code>\\n          </Box>\\n        </>\\n      )}\\n      {showHTMLOutput && (\\n        <>\\n          <br />\\n          <br />\\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\\n            <code>{HTMLOutput}</code>\\n          </Box>\\n        </>\\n      )}\\n    </>\\n  )\\n}\\n\\nexport const Default = () => {\\n  return (\\n    <ThemeWrapper>\\n      <MainCompoonent\\n        showHTMLOutput={boolean('showHTMLOutput', false)}\\n        showJSONOutput={boolean('showJSONOutput', false)}\\n        insertMentionsProgrammatically={boolean(\\n          'insertMentionsProgrammatically',\\n          false\\n        )}\\n        initializeFromHTML={boolean('initializeFromHTML', false)}\\n      />\\n    </ThemeWrapper>\\n  )\\n}\\n\",\"locationsMap\":{}},},\n  title: `${path}/RichTextEditor`,\n  component: RichTextEditor\n}\n\n/** Mentions structure from API */\nconst mentionSuggestionsFromAPI = [\n  { text: 'Delivery Associate Name', value: 'dmmName', url: '#' },\n  { text: 'Alert Date', value: 'time', url: '#' },\n  { text: 'Account Name', value: 'accountname', url: '#' },\n  { text: 'Account Code', value: 'accountCode', url: '#' },\n  { text: 'Collected Value', value: 'collectedValue', url: '#' },\n  { text: 'Package Value', value: 'actualvalue', url: '#' },\n  { text: 'Currency', value: 'currency', url: '#' },\n  { text: 'AWB Number', value: 'awbnumber', url: '#' }\n]\n\n/** Mentions Text to Value map */\nconst mentionSuggesstionsValueMap: Record<string, string> = {}\n\n/** Text & Value should have same content when sent to React-Draft */\nconst mentionSuggesstionsProp = mentionSuggestionsFromAPI.map((m) => {\n  mentionSuggesstionsValueMap[m.text] = m.value\n  return { text: m.text, value: m.text, url: m.url }\n})\n\nconst inputHTML =\n  '<p style=\"text-align:left;\"><span style=\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\">Dear recipient,</span></p> <p><span style=\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\">Order </span><awbnumber><span style=\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\"> is arriving, should reach your destination at </span><time><span style=\"color: rgb(0,0,0);font-size: 16px;font-family: Verdana;\">. </span></p>'\n\nconst MainCompoonent = ({\n  initializeFromHTML,\n  showHTMLOutput,\n  showJSONOutput,\n  insertMentionsProgrammatically\n}: IMainComponentProps) => {\n  /** Initialize with empty state */\n  const [editorState, setEditorState] = React.useState(\n    EditorState.createEmpty()\n  )\n\n  const JSONOutput = React.useMemo(\n    () => JSON.stringify(convertToRaw(editorState.getCurrentContent())),\n    [editorState]\n  )\n\n  const HTMLOutput = React.useMemo(\n    () =>\n      draftToHtml(\n        convertToRaw(editorState.getCurrentContent()),\n        undefined,\n        false,\n        (entity, _text) =>\n          `<${mentionSuggesstionsValueMap[entity?.data?.value]}>`\n      ),\n    [editorState]\n  )\n\n  /** Programmatically insert Mentions - Either at last cursor or at End */\n  const handleClick = () => {\n    setEditorState(insertMention(editorState, mentionSuggesstionsProp[0], true))\n  }\n\n  /** Initializing the editor state from HTML */\n  React.useEffect(() => {\n    initializeFromHTML &&\n      setEditorState(\n        convertHTMLToDraftState(inputHTML || '', mentionSuggestionsFromAPI)\n      )\n  }, [])\n\n  return (\n    <>\n      {insertMentionsProgrammatically && (\n        <Button onClick={handleClick}>Insert Mention</Button>\n      )}\n      <br />\n      <br />\n      <RichTextEditor\n        label='Email Body'\n        id='emailBody'\n        className='emailBody'\n        isStripPastedStyles={true}\n        // defaultEditorState={EditorState.createEmpty()}\n        editorState={editorState}\n        mention={{\n          separator: ' ',\n          trigger: '@',\n          suggestions: mentionSuggesstionsProp\n        }}\n        onEditorStateChange={setEditorState}\n        placeholder='Enter Email Body'\n        hideToolbar={boolean('hideToolbar', false)}\n      />\n      {/* {editorState.getCurrentContent().getPlainText().length} */}\n      {showJSONOutput && (\n        <>\n          <br />\n          <br />\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\n            <code>{JSONOutput}</code>\n          </Box>\n        </>\n      )}\n      {showHTMLOutput && (\n        <>\n          <br />\n          <br />\n          <Box style={{ backgroundColor: 'lightgrey' }} p='10px'>\n            <code>{HTMLOutput}</code>\n          </Box>\n        </>\n      )}\n    </>\n  )\n}\n\nexport const Default = addSourceDecorator(addSourceDecorator(addSourceDecorator(() => {\n  return (\n    <ThemeWrapper>\n      <MainCompoonent\n        showHTMLOutput={boolean('showHTMLOutput', false)}\n        showJSONOutput={boolean('showJSONOutput', false)}\n        insertMentionsProgrammatically={boolean(\n          'insertMentionsProgrammatically',\n          false\n        )}\n        initializeFromHTML={boolean('initializeFromHTML', false)}\n      />\n    </ThemeWrapper>\n  )\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});"],"sourceRoot":""},"metadata":{},"sourceType":"module"}