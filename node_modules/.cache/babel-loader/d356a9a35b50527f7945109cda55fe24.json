{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/atoms/Map/layers/LeafletCircleEditLayer.tsx\";\n\nimport LL from 'leaflet';\nimport React, { useEffect } from 'react';\nimport { FeatureGroup, useLeaflet } from 'react-leaflet';\nimport { EditControl } from 'react-leaflet-draw';\nimport { StyledPopUp } from '../StyledMap';\n\nvar LeafletCircleEditLayer = function LeafletCircleEditLayer(_ref) {\n  var circle = _ref.circle,\n      editPopUpComponent = _ref.editPopUpComponent,\n      onChange = _ref.onChange;\n  var featureGroupRef = React.useRef();\n  var renderer = LL.canvas({\n    padding: 0.5\n  }); // adding renderer if data entries more than 200\n\n  var radiusKey = circle === null || circle === void 0 ? void 0 : circle.radiusKey;\n  var styleKeys = circle === null || circle === void 0 ? void 0 : circle.styleKey; // circle style\n\n  var editLayer = circle === null || circle === void 0 ? void 0 : circle.editLayer;\n  var createPermission = (circle === null || circle === void 0 ? void 0 : circle.createPermission) || false;\n  var orinalCoordinatesKey = circle === null || circle === void 0 ? void 0 : circle.center;\n\n  var _useLeaflet = useLeaflet(),\n      map = _useLeaflet.map;\n\n  useEffect(function () {\n    renderPloyLayer();\n  }, []);\n\n  var renderPloyLayer = function renderPloyLayer() {\n    // populate the leaflet FeatureGroup with the geoJson layers\n    if (featureGroupRef === null || featureGroupRef === void 0 ? void 0 : featureGroupRef.current) {\n      // eslint-disable-next-line\n      var leafletFG = featureGroupRef === null || featureGroupRef === void 0 ? void 0 : featureGroupRef.current;\n      /* eslint-disable-line no-alert */\n\n      var leafletElement = leafletFG.leafletElement;\n      var geoJsonData = editLayer === null || editLayer === void 0 ? void 0 : editLayer.data; // suppose geoJsonData [{bhiwandi},{Dadar}]\n\n      var coordinates = geoJsonData.map(function (option) {\n        var optionObj = orinalCoordinatesKey.map(function (key) {\n          return option[key];\n        }); // [lat,long]\n\n        return [optionObj];\n      }); // [[],[]]\n\n      var circleLayer = [];\n      coordinates === null || coordinates === void 0 ? void 0 : coordinates.forEach(function (option, index) {\n        var currentData = geoJsonData[index];\n        var parsedRadiusKey = radiusKey && parseFloat(currentData[radiusKey]);\n        var circle = LL.circle(option[index], {\n          interactive: true,\n          lineJoin: 'round',\n          lineCap: 'round',\n          fill: true,\n          stroke: true,\n          fillColor: '#5698d3',\n          radius: parsedRadiusKey ? parseFloat((parsedRadiusKey * 1000).toFixed(2)) : 200,\n          weight: (styleKeys === null || styleKeys === void 0 ? void 0 : styleKeys.weight) && currentData[styleKeys === null || styleKeys === void 0 ? void 0 : styleKeys.weight] ? currentData[styleKeys === null || styleKeys === void 0 ? void 0 : styleKeys.weight] : 3,\n          dashArray: (styleKeys === null || styleKeys === void 0 ? void 0 : styleKeys.dashArray) && currentData[styleKeys === null || styleKeys === void 0 ? void 0 : styleKeys.dashArray] ? currentData[styleKeys === null || styleKeys === void 0 ? void 0 : styleKeys.dashArray] : null,\n          fillOpacity: (styleKeys === null || styleKeys === void 0 ? void 0 : styleKeys.fillOpacity) && currentData[styleKeys === null || styleKeys === void 0 ? void 0 : styleKeys.fillOpacity] ? currentData[styleKeys === null || styleKeys === void 0 ? void 0 : styleKeys.fillOpacity] : 0.2,\n          renderer: geoJsonData.length > 200 ? renderer : undefined\n        });\n        circleLayer.push(circle);\n      });\n      circleLayer.forEach(function (layer, index) {\n        var _layer$editing;\n\n        var currentData = geoJsonData[index];\n        var parsedRadiusKey = radiusKey && parseFloat(currentData[radiusKey]);\n        var optionObj = orinalCoordinatesKey.map(function (key) {\n          return currentData[key];\n        }); // manually adding initial radius and center\n\n        layer.originalCenter = optionObj;\n        layer.originalRadius = parsedRadiusKey && parseFloat((parsedRadiusKey * 1000).toFixed(2)); // add circle layer to featuregroup\n\n        leafletElement.addLayer(layer); // make circle layer editable on load\n\n        layer === null || layer === void 0 ? void 0 : (_layer$editing = layer.editing) === null || _layer$editing === void 0 ? void 0 : _layer$editing.enable();\n      });\n    }\n  }; // when creating new layer, keep it editable and remove previous all layer, only one edited layer creation is permitted\n\n\n  var _onCreated = function _onCreated(e) {\n    var _layer$editing2, _drawnItems$latestCre;\n\n    var layer = e.layer; // on creation make it editable\n\n    layer === null || layer === void 0 ? void 0 : (_layer$editing2 = layer.editing) === null || _layer$editing2 === void 0 ? void 0 : _layer$editing2.enable(); // all layer on featuregroup\n\n    var drawnItems = featureGroupRef.current.leafletElement._layers; // all editable layer with newly created layer on last index on array\n\n    var drawnItemsValue = Object.keys(drawnItems);\n    var latestCreatedItem = drawnItemsValue[drawnItemsValue.length - 1];\n\n    if (drawnItemsValue.length > 1) {\n      drawnItemsValue.forEach(function (layerid) {\n        // keep last, latest area,remove remaining, (we are allowing only one area to create)\n        if (latestCreatedItem === layerid) return;\n        var layer = drawnItems[layerid];\n        featureGroupRef.current.leafletElement.removeLayer(layer);\n      });\n    } // bind popup and open it once created\n    // only created layer will remain,lat lang of that layer {lat: ,long:}\n\n\n    var newLatLng = (_drawnItems$latestCre = drawnItems[latestCreatedItem]) === null || _drawnItems$latestCre === void 0 ? void 0 : _drawnItems$latestCre._latlng; // send out to save in the form\n\n    onChange({\n      center: [],\n      originalCenter: Object.values(newLatLng),\n      isChanged: false,\n      radius: '',\n      originalRadius: layer._mRadius\n    });\n  }; // when user clicks on create layer\n\n\n  var _onDrawStart = function _onDrawStart(_e) {\n    // all layer on featuregroup\n    var drawnItems = featureGroupRef.current.leafletElement._layers; // all editable layer with newly created layer on last index on array\n\n    var drawnItemsValue = Object.keys(drawnItems);\n\n    if (drawnItemsValue.length > 1) {\n      drawnItemsValue.forEach(function (layerid) {\n        // remove all existing edited layer if start creating new\n        var layer = drawnItems[layerid];\n        featureGroupRef.current.leafletElement.removeLayer(layer);\n      });\n    }\n  }; // when edited or created circle moves from center\n\n\n  var onEditMove = function onEditMove(e) {\n    var layer = e.layer; // if original and changed center coordinates different teh  go inside\n\n    if (layer.originalCenter !== Object.values(layer._latlng)) {\n      var _layer$editing3;\n\n      // on creation make it editable\n      layer === null || layer === void 0 ? void 0 : (_layer$editing3 = layer.editing) === null || _layer$editing3 === void 0 ? void 0 : _layer$editing3.enable();\n      onChange({\n        center: Object.values(layer._latlng),\n        originalCenter: layer.originalCenter,\n        isChanged: true,\n        radius: '',\n        originalRadius: layer._mRadius\n      });\n    }\n  }; // when edited or created circle radius changes\n\n\n  var onEditResize = function onEditResize(e) {\n    var _layer$editing4;\n\n    var layer = e.layer; // on creation make it editable\n\n    layer === null || layer === void 0 ? void 0 : (_layer$editing4 = layer.editing) === null || _layer$editing4 === void 0 ? void 0 : _layer$editing4.enable();\n    var newRadius = layer === null || layer === void 0 ? void 0 : layer._mRadius;\n    onChange({\n      center: layer.originalCenter ? Object.values(layer._latlng) : [],\n      // if original center(edition going on) present then newer will come here\n      originalCenter: layer.originalCenter ? layer.originalCenter : Object.values(layer._latlng),\n      // if original center(edition going on) present then original will be original or show new coordinates (creation)\n      isChanged: false,\n      radius: layer.originalRadius ? newRadius : '',\n      originalRadius: layer.originalRadius ? layer.originalRadius : newRadius\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(FeatureGroup, {\n    ref: featureGroupRef,\n    renderer: renderer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(EditControl, {\n    position: \"bottomright\",\n    onCreated: _onCreated,\n    onDrawStart: _onDrawStart,\n    onEditMove: onEditMove,\n    onEditResize: onEditResize,\n    draw: createPermission ? {\n      rectangle: false,\n      polyline: false,\n      polygon: false,\n      marker: false,\n      circlemarker: false,\n      circle: {\n        allowIntersection: false,\n        showArea: true,\n        clickable: true\n      }\n    } : false,\n    edit: {\n      remove: false,\n      allowIntersection: false,\n      edit: false,\n      toolbar: false\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(StyledPopUp, {\n    keepInView: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 7\n    }\n  }, editPopUpComponent && editPopUpComponent({\n    map: map\n  })));\n};\n\nexport default LeafletCircleEditLayer;","map":{"version":3,"sources":["/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/atoms/Map/layers/LeafletCircleEditLayer.tsx"],"names":["LL","React","useEffect","FeatureGroup","useLeaflet","EditControl","StyledPopUp","LeafletCircleEditLayer","circle","editPopUpComponent","onChange","featureGroupRef","useRef","renderer","canvas","padding","radiusKey","styleKeys","styleKey","editLayer","createPermission","orinalCoordinatesKey","center","map","renderPloyLayer","current","leafletFG","leafletElement","geoJsonData","data","coordinates","option","optionObj","key","circleLayer","forEach","index","currentData","parsedRadiusKey","parseFloat","interactive","lineJoin","lineCap","fill","stroke","fillColor","radius","toFixed","weight","dashArray","fillOpacity","length","undefined","push","layer","originalCenter","originalRadius","addLayer","editing","enable","_onCreated","e","drawnItems","_layers","drawnItemsValue","Object","keys","latestCreatedItem","layerid","removeLayer","newLatLng","_latlng","values","isChanged","_mRadius","_onDrawStart","_e","onEditMove","onEditResize","newRadius","rectangle","polyline","polygon","marker","circlemarker","allowIntersection","showArea","clickable","remove","edit","toolbar"],"mappings":"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","sourcesContent":["import LL from 'leaflet'\nimport React, { useEffect } from 'react'\nimport { FeatureGroup, useLeaflet } from 'react-leaflet'\nimport { EditControl } from 'react-leaflet-draw'\nimport { ICircle } from '../interfaces.d'\nimport { StyledPopUp } from '../StyledMap'\n\ninterface ILeafletCircleEditLayer {\n  onChange: (changedObject: IChangedObject) => void\n  createShape: boolean\n  setCreateShape: (createShape: boolean) => void\n  editPopUpComponent: any\n  circle: ICircle\n}\ninterface IChangedObject {\n  center: any[]\n  originalCenter: any[]\n  isChanged: boolean\n  radius: string | number\n  originalRadius: string | number\n}\n\nconst LeafletCircleEditLayer = ({\n  // createShape,\n  // setCreateShape,\n  circle,\n  editPopUpComponent,\n  onChange\n}: ILeafletCircleEditLayer) => {\n  const featureGroupRef: any = React.useRef()\n  const renderer: any = LL.canvas({ padding: 0.5 }) // adding renderer if data entries more than 200\n  const radiusKey = circle?.radiusKey\n  const styleKeys = circle?.styleKey // circle style\n  const editLayer = circle?.editLayer\n  const createPermission = circle?.createPermission || false\n  const orinalCoordinatesKey = circle?.center\n\n  const { map } = useLeaflet()\n\n  useEffect(() => {\n    renderPloyLayer()\n  }, [])\n  const renderPloyLayer = () => {\n    // populate the leaflet FeatureGroup with the geoJson layers\n\n    if (featureGroupRef?.current) {\n      // eslint-disable-next-line\n      const leafletFG =\n        featureGroupRef?.current /* eslint-disable-line no-alert */\n      const { leafletElement } = leafletFG\n      const geoJsonData = editLayer?.data\n\n      // suppose geoJsonData [{bhiwandi},{Dadar}]\n      const coordinates = geoJsonData.map((option: any) => {\n        const optionObj = orinalCoordinatesKey.map((key: string) => option[key])\n        // [lat,long]\n        return [optionObj]\n      }) // [[],[]]\n\n      const circleLayer: any[] = []\n      coordinates?.forEach((option: any, index: number) => {\n        const currentData = geoJsonData[index]\n        const parsedRadiusKey = radiusKey && parseFloat(currentData[radiusKey])\n        const circle = LL.circle(option[index], {\n          interactive: true,\n          lineJoin: 'round',\n          lineCap: 'round',\n          fill: true,\n          stroke: true,\n          fillColor: '#5698d3',\n          radius: parsedRadiusKey\n            ? parseFloat((parsedRadiusKey * 1000).toFixed(2))\n            : 200,\n          weight:\n            styleKeys?.weight && currentData[styleKeys?.weight]\n              ? currentData[styleKeys?.weight]\n              : 3,\n          dashArray:\n            styleKeys?.dashArray && currentData[styleKeys?.dashArray]\n              ? currentData[styleKeys?.dashArray]\n              : null,\n          fillOpacity:\n            styleKeys?.fillOpacity && currentData[styleKeys?.fillOpacity]\n              ? currentData[styleKeys?.fillOpacity]\n              : 0.2,\n\n          renderer: geoJsonData.length > 200 ? renderer : undefined\n        })\n\n        circleLayer.push(circle)\n      })\n\n      circleLayer.forEach((layer: any, index: number) => {\n        const currentData = geoJsonData[index]\n        const parsedRadiusKey = radiusKey && parseFloat(currentData[radiusKey])\n        const optionObj = orinalCoordinatesKey.map(\n          (key: string) => currentData[key]\n        )\n        // manually adding initial radius and center\n        layer.originalCenter = optionObj\n        layer.originalRadius =\n          parsedRadiusKey && parseFloat((parsedRadiusKey * 1000).toFixed(2))\n        // add circle layer to featuregroup\n        leafletElement.addLayer(layer)\n\n        // make circle layer editable on load\n        layer?.editing?.enable()\n      })\n    }\n  }\n\n  // when creating new layer, keep it editable and remove previous all layer, only one edited layer creation is permitted\n  const _onCreated = (e: any) => {\n    const layer = e.layer\n    // on creation make it editable\n    layer?.editing?.enable()\n    // all layer on featuregroup\n    const drawnItems = featureGroupRef.current.leafletElement._layers\n    // all editable layer with newly created layer on last index on array\n    const drawnItemsValue = Object.keys(drawnItems)\n    const latestCreatedItem = drawnItemsValue[drawnItemsValue.length - 1]\n    if (drawnItemsValue.length > 1) {\n      drawnItemsValue.forEach((layerid) => {\n        // keep last, latest area,remove remaining, (we are allowing only one area to create)\n        if (latestCreatedItem === layerid) return\n        const layer = drawnItems[layerid]\n        featureGroupRef.current.leafletElement.removeLayer(layer)\n      })\n    }\n    // bind popup and open it once created\n\n    // only created layer will remain,lat lang of that layer {lat: ,long:}\n    const newLatLng = drawnItems[latestCreatedItem]?._latlng\n\n    // send out to save in the form\n    onChange({\n      center: [],\n      originalCenter: Object.values(newLatLng),\n      isChanged: false,\n      radius: '',\n      originalRadius: layer._mRadius\n    })\n  }\n\n  // when user clicks on create layer\n  const _onDrawStart = (_e: any) => {\n    // all layer on featuregroup\n    const drawnItems = featureGroupRef.current.leafletElement._layers\n    // all editable layer with newly created layer on last index on array\n    const drawnItemsValue = Object.keys(drawnItems)\n\n    if (drawnItemsValue.length > 1) {\n      drawnItemsValue.forEach((layerid) => {\n        // remove all existing edited layer if start creating new\n        const layer = drawnItems[layerid]\n        featureGroupRef.current.leafletElement.removeLayer(layer)\n      })\n    }\n  }\n\n  // when edited or created circle moves from center\n  const onEditMove = (e: any) => {\n    const layer = e.layer\n    // if original and changed center coordinates different teh  go inside\n    if (layer.originalCenter !== Object.values(layer._latlng)) {\n      // on creation make it editable\n      layer?.editing?.enable()\n      onChange({\n        center: Object.values(layer._latlng),\n        originalCenter: layer.originalCenter,\n        isChanged: true,\n        radius: '',\n        originalRadius: layer._mRadius\n      })\n    }\n  }\n  // when edited or created circle radius changes\n  const onEditResize = (e: any) => {\n    const layer = e.layer\n    // on creation make it editable\n    layer?.editing?.enable()\n\n    const newRadius = layer?._mRadius\n    onChange({\n      center: layer.originalCenter ? Object.values(layer._latlng) : [], // if original center(edition going on) present then newer will come here\n      originalCenter: layer.originalCenter\n        ? layer.originalCenter\n        : Object.values(layer._latlng), // if original center(edition going on) present then original will be original or show new coordinates (creation)\n      isChanged: false,\n      radius: layer.originalRadius ? newRadius : '',\n      originalRadius: layer.originalRadius ? layer.originalRadius : newRadius\n    })\n  }\n\n  return (\n    <FeatureGroup ref={featureGroupRef as any} renderer={renderer}>\n      <EditControl\n        position='bottomright'\n        onCreated={_onCreated}\n        onDrawStart={_onDrawStart}\n        onEditMove={onEditMove}\n        onEditResize={onEditResize}\n        draw={\n          createPermission\n            ? {\n                rectangle: false,\n                polyline: false,\n                polygon: false,\n                marker: false,\n                circlemarker: false,\n                circle: {\n                  allowIntersection: false,\n                  showArea: true,\n                  clickable: true\n                }\n              }\n            : false\n        }\n        edit={{\n          remove: false,\n          allowIntersection: false,\n          edit: false,\n          toolbar: false\n        }}\n      />\n\n      <StyledPopUp keepInView>\n        {editPopUpComponent && editPopUpComponent({ map })}\n      </StyledPopUp>\n    </FeatureGroup>\n  )\n}\n\nexport default LeafletCircleEditLayer\n"]},"metadata":{},"sourceType":"module"}