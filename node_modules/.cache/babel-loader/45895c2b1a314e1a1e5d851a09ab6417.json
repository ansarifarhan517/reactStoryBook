{"ast":null,"code":"import _objectSpread from \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/atoms/Charts/BoxPlot/index.tsx\";\n\nimport HighchartMore from 'highcharts/highcharts-more';\nimport React, { useEffect } from 'react';\nimport ReactHighchart from 'react-highcharts';\nimport { StyledBoxPlot } from './StyledBoxPlot'; // import Highcharts from 'highcharts'\n\nHighchartMore(ReactHighchart.Highcharts); // keeping below code in case need to make change in tooltip, below line will not let tooltip disappear while inspect\n// Highcharts.wrap(Highcharts.Tooltip.prototype, 'hide', function () {\n//   console.log('****')\n// })\n\nvar defaultCallback = function defaultCallback() {};\n\nvar BoxPlot = function BoxPlot(_ref) {\n  var xAxisTicks = _ref.xAxisTicks,\n      xAxisLabel = _ref.xAxisLabel,\n      yAxisLabel = _ref.yAxisLabel,\n      _ref$onClick = _ref.onClick,\n      onClick = _ref$onClick === void 0 ? defaultCallback : _ref$onClick,\n      _ref$disableClick = _ref.disableClick,\n      disableClick = _ref$disableClick === void 0 ? false : _ref$disableClick,\n      _ref$yAxisTickInterva = _ref.yAxisTickInterval,\n      yAxisTickInterval = _ref$yAxisTickInterva === void 0 ? 20 : _ref$yAxisTickInterva,\n      boxPlotData = _ref.boxPlotData,\n      scatterPlotData = _ref.scatterPlotData,\n      lineData = _ref.lineData,\n      scatterPlotName = _ref.scatterPlotName,\n      lineName = _ref.lineName,\n      boxPlotName = _ref.boxPlotName,\n      yAxisTick = _ref.yAxisTick,\n      tooltipData = _ref.tooltipData,\n      boxPlotPartColor = _ref.boxPlotPartColor,\n      boxPlotToolTip = _ref.boxPlotToolTip,\n      scrattorTooltip = _ref.scrattorTooltip,\n      _ref$selectedCategory = _ref.selectedCategoryName,\n      selectedCategoryName = _ref$selectedCategory === void 0 ? '' : _ref$selectedCategory;\n\n  var _React$useState = React.useState(selectedCategoryName),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      selectedCategory = _React$useState2[0],\n      setSelectedCategory = _React$useState2[1];\n\n  useEffect(function () {\n    setSelectedCategory(selectedCategoryName);\n  }, [selectedCategoryName]);\n\n  var handleClick = function handleClick(event) {\n    if (disableClick) {\n      return;\n    }\n\n    var point = event.point;\n    setSelectedCategory(point.category);\n    var category = point.category;\n    var q1 = point.q1; // start of box\n\n    var q3 = point.q3; // end of box\n\n    var whiskerLow = point.low; // starting horizontal line(whisker start)\n\n    var median = point.median;\n    var whiskerHigh = point.high; // end horizontal line(whisker end)\n\n    onClick({\n      category: category,\n      whiskerLow: whiskerLow,\n      q1: q1,\n      median: median,\n      q3: q3,\n      whiskerHigh: whiskerHigh,\n      event: event\n    });\n    return true;\n  };\n\n  return /*#__PURE__*/React.createElement(StyledBoxPlot, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ReactHighchart, {\n    config: {\n      xAxis: {\n        categories: xAxisTicks,\n        title: {\n          text: xAxisLabel,\n          style: {\n            color: '#485465',\n            fontSize: '15px !important'\n          },\n          y: 15\n        },\n        labels: {\n          style: {\n            color: '#485465',\n            fontSize: '10px'\n          },\n          y: 20\n        },\n        className: 'axis-title',\n        endOnTick: false,\n        lineWidth: 0.6,\n        lineColor: '#070707'\n      },\n      credits: {\n        enabled: false\n      },\n      yAxis: {\n        title: {\n          text: yAxisLabel,\n          style: {\n            color: '#485465',\n            fontSize: '15px !important'\n          }\n        },\n        categories: yAxisTick || [0, 20, 40, 60, 80, 100, 150],\n        className: 'axis-title',\n        tickInterval: yAxisTickInterval,\n        labels: {\n          format: '{value} %',\n          style: {\n            fontSize: '11px',\n            color: '#485465'\n          },\n          x: -10\n        },\n        lineWidth: 0.6,\n        lineColor: '#070707'\n      },\n      chart: {\n        type: 'boxplot',\n        events: {\n          load: function load() {\n            var _chart$series$0$point;\n\n            var chart = this; // if (xAxisTicks.includes(selectedCategory)) {\n\n            var indexOFSelectedCategory = selectedCategory ? xAxisTicks.indexOf(selectedCategory) : -1;\n            chart === null || chart === void 0 ? void 0 : (_chart$series$0$point = chart.series[0].points) === null || _chart$series$0$point === void 0 ? void 0 : _chart$series$0$point.forEach(function (_point, index) {\n              if (indexOFSelectedCategory === index) {\n                var _chart$series$;\n\n                chart === null || chart === void 0 ? void 0 : (_chart$series$ = chart.series[0]) === null || _chart$series$ === void 0 ? void 0 : _chart$series$.points[indexOFSelectedCategory].update({\n                  fillColor: boxPlotPartColor.highLight || 'rgba(86, 152, 211,1)'\n                });\n              } else {\n                var _chart$series$2;\n\n                chart === null || chart === void 0 ? void 0 : (_chart$series$2 = chart.series[0]) === null || _chart$series$2 === void 0 ? void 0 : _chart$series$2.points[index].update({\n                  fillColor: boxPlotPartColor.box || 'rgba(86, 152, 211,0.7)'\n                });\n              }\n            }); // }\n          }\n        }\n      },\n      title: {\n        text: ''\n      },\n      tooltip: {\n        style: {\n          padding: '9px',\n          color: 'white',\n          margin: '10px',\n          opacity: 0.74,\n          height: 'auto',\n          cursor: 'pointer',\n          whiteSpace: 'normal'\n        },\n        backgroundColor: 'black',\n        shadow: true,\n        useHTML: true,\n        borderColor: 'transparent',\n        borderRadius: 0,\n        followPointer: true,\n        formatter: function formatter() {\n          var _this$series, _this$series$userOpti;\n\n          var tool = tooltipData[this.key]; // x axis name will be key\n\n          if ((this === null || this === void 0 ? void 0 : (_this$series = this.series) === null || _this$series === void 0 ? void 0 : (_this$series$userOpti = _this$series.userOptions) === null || _this$series$userOpti === void 0 ? void 0 : _this$series$userOpti.type) === 'scatter') {\n            // scatter tooltip dynamic\n            var scatterTip = scrattorTooltip && scrattorTooltip({\n              key: this.key,\n              value: this.y\n            });\n            return scatterTip || \"\".concat(this.key, \": \").concat(this.y);\n          } else {\n            var first = tool.first || '';\n            var last = tool.last || '';\n            var median = tool.median || '';\n            var q3 = tool.q3 || '';\n            var q1 = tool.q1 || '';\n            var tooltip = boxPlotToolTip && boxPlotToolTip({\n              first: first,\n              last: last,\n              q1: q1,\n              q3: q3,\n              median: median,\n              category: this.key\n            }) || '';\n            var defaulTooltip = \"<table style=\\\"border-collapse:separate;border-spacing: 0 1em;overflow-wrap: break-word;\\\">\\n                \".concat(first ? \"<tr>\\n                      <td style=\\\"width:20px;height:15px;margin-right: 5px;\\\">\\n                      <div class=\\\"color-box\\\"  style=\\\"background-color:\".concat(boxPlotPartColor.first || '#5698d3', \";\\\"></div>\\n\\n                      </td>\\n                      <td>\\n                        <div style=\\\"display:inline;\\\">\").concat(first, \"</div>\\n                      </td>\\n                    </tr>\") : '', \"\\n                   \").concat(q3 ? \"<tr>\\n                       <td style=\\\"width:20px;height:15px;margin-right: 5px;\\\">\\n                     <div class=\\\"color-box\\\"  style=\\\"background-color:#5698d3;\\\"></div>\\n                     </td>\\n                     <td>\\n                     <div class=\\\"text\\\">\".concat(q3, \"</div>\\n                     </td>\\n                   </tr>\") : '', \"\\n\\n                   \").concat(median ? \"<tr>\\n                       <td style=\\\"width:20px;height:15px;margin-right: 5px;\\\">\\n                         <div class=\\\"color-box\\\"  style=\\\"background-color:white;\\\"></div>\\n\\n                         </td>\\n                         <td>\\n                           <div class=\\\"text\\\">\".concat(median, \"</div>\\n                         </td>\\n                       </tr>\") : '', \"\\n\\n                   \").concat(q1 ? \"<tr>\\n                       <td style=\\\"width:20px;height:15px;margin-right: 5px;\\\">\\n                     <div class=\\\"color-box\\\"  style=\\\"background-color: #5698d3;\\\"></div>\\n                     </td>\\n                     <td>\\n                     <div class=\\\"text\\\">\".concat(q1, \"</div>\\n                     </td>\\n                   </tr>\") : '', \"\\n                \").concat(last ? \"<tr>\\n                    <td style=\\\"width:15px;height:15px;margin-right: 5px;\\\">\\n                     <div class=\\\"color-box\\\"  style=\\\"background-color:\".concat(boxPlotPartColor.first || '#5698d3', \"\\\"></div>\\n                     </td>\\n                     <td>\\n                     <div class=\\\"text\\\">\").concat(last, \"</div>\\n                     </td>\\n                   </tr>\") : '', \"\\n                   </table>\\n                   \");\n            return tooltip || defaulTooltip;\n          }\n        }\n      },\n      legend: {\n        layout: 'horizontal',\n        align: 'right',\n        verticalAlign: 'top',\n        y: -20,\n        navigation: {\n          animation: true,\n          arrowSize: 12,\n          style: {\n            fontWeight: 'bold',\n            fontSize: '12px'\n          }\n        },\n        margin: 30\n      },\n      plotOptions: {\n        boxplot: {\n          fillColor: boxPlotPartColor.box || 'rgba(86, 152, 211,0.7)',\n          lineWidth: 2,\n          medianColor: boxPlotPartColor.median || 'white',\n          medianWidth: 3,\n          stemColor: boxPlotPartColor.q1 || '#5698d3',\n          stemWidth: 3,\n          whiskerColor: boxPlotPartColor.first || '#5698d3',\n          whiskerLength: '70%',\n          whiskerWidth: 3,\n          showInLegend: false\n        },\n        series: {\n          events: {\n            click: function click(e) {\n              if (e.point.category) {\n                handleClick(_objectSpread(_objectSpread({}, e), {}, {\n                  point: _objectSpread({}, e.point)\n                }));\n              }\n            }\n          },\n          stickyTracking: false\n        },\n        scatter: {\n          marker: {\n            symbol: 'circle'\n          },\n          showInLegend: false\n        },\n        line: {\n          animation: false,\n          states: {\n            hover: {\n              enabled: false\n            }\n          },\n          enableMouseTracking: false,\n          showInLegend: true\n        }\n      },\n      series: [{\n        name: boxPlotName,\n        data: boxPlotData,\n        cursor: disableClick ? 'default' : 'pointer'\n      }, {\n        name: lineName,\n        type: 'line',\n        data: lineData,\n        color: 'red'\n      }, {\n        name: scatterPlotName,\n        color: '#5698d3',\n        type: 'scatter',\n        data: scatterPlotData\n      }]\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default BoxPlot;","map":{"version":3,"sources":["/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/atoms/Charts/BoxPlot/index.tsx"],"names":["HighchartMore","React","useEffect","ReactHighchart","StyledBoxPlot","Highcharts","defaultCallback","BoxPlot","xAxisTicks","xAxisLabel","yAxisLabel","onClick","disableClick","yAxisTickInterval","boxPlotData","scatterPlotData","lineData","scatterPlotName","lineName","boxPlotName","yAxisTick","tooltipData","boxPlotPartColor","boxPlotToolTip","scrattorTooltip","selectedCategoryName","useState","selectedCategory","setSelectedCategory","handleClick","event","point","category","q1","q3","whiskerLow","low","median","whiskerHigh","high","xAxis","categories","title","text","style","color","fontSize","y","labels","className","endOnTick","lineWidth","lineColor","credits","enabled","yAxis","tickInterval","format","x","chart","type","events","load","indexOFSelectedCategory","indexOf","series","points","forEach","_point","index","update","fillColor","highLight","box","tooltip","padding","margin","opacity","height","cursor","whiteSpace","backgroundColor","shadow","useHTML","borderColor","borderRadius","followPointer","formatter","tool","key","userOptions","scatterTip","value","first","last","defaulTooltip","legend","layout","align","verticalAlign","navigation","animation","arrowSize","fontWeight","plotOptions","boxplot","medianColor","medianWidth","stemColor","stemWidth","whiskerColor","whiskerLength","whiskerWidth","showInLegend","click","e","stickyTracking","scatter","marker","symbol","line","states","hover","enableMouseTracking","name","data"],"mappings":"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","sourcesContent":["import HighchartMore from 'highcharts/highcharts-more'\nimport React, { useEffect } from 'react'\nimport ReactHighchart from 'react-highcharts'\nimport { IBoxPlot } from '../interface'\nimport { StyledBoxPlot } from './StyledBoxPlot'\n\n// import Highcharts from 'highcharts'\nHighchartMore(ReactHighchart.Highcharts)\n\n// keeping below code in case need to make change in tooltip, below line will not let tooltip disappear while inspect\n// Highcharts.wrap(Highcharts.Tooltip.prototype, 'hide', function () {\n//   console.log('****')\n// })\n\nconst defaultCallback = () => {}\n\nconst BoxPlot = ({\n  xAxisTicks,\n  xAxisLabel,\n  yAxisLabel,\n  onClick = defaultCallback,\n  disableClick = false,\n  yAxisTickInterval = 20,\n  boxPlotData,\n  scatterPlotData,\n  lineData,\n  scatterPlotName,\n  lineName,\n  boxPlotName,\n  yAxisTick,\n  tooltipData,\n  boxPlotPartColor,\n  boxPlotToolTip,\n  scrattorTooltip,\n  selectedCategoryName = ''\n}: IBoxPlot) => {\n  const [selectedCategory, setSelectedCategory] = React.useState(\n    selectedCategoryName\n  )\n  useEffect(() => {\n    setSelectedCategory(selectedCategoryName)\n  }, [selectedCategoryName])\n\n  const handleClick = (event: any) => {\n    if (disableClick) {\n      return\n    }\n\n    const point = event.point\n    setSelectedCategory(point.category)\n    const category = point.category\n    const q1 = point.q1 // start of box\n    const q3 = point.q3 // end of box\n    const whiskerLow = point.low // starting horizontal line(whisker start)\n    const median = point.median\n    const whiskerHigh = point.high // end horizontal line(whisker end)\n    onClick({\n      category,\n      whiskerLow,\n      q1,\n      median,\n      q3,\n      whiskerHigh,\n      event\n    })\n    return true\n  }\n\n  return (\n    <StyledBoxPlot>\n      <ReactHighchart\n        config={{\n          xAxis: {\n            categories: xAxisTicks,\n            title: {\n              text: xAxisLabel,\n              style: {\n                color: '#485465',\n                fontSize: '15px !important'\n              },\n              y: 15\n            },\n            labels: {\n              style: {\n                color: '#485465',\n                fontSize: '10px'\n              },\n              y: 20\n            },\n            className: 'axis-title',\n            endOnTick: false,\n            lineWidth: 0.6,\n            lineColor: '#070707'\n          },\n\n          credits: {\n            enabled: false\n          },\n\n          yAxis: {\n            title: {\n              text: yAxisLabel,\n              style: {\n                color: '#485465',\n                fontSize: '15px !important'\n              }\n            },\n            categories: yAxisTick || [0, 20, 40, 60, 80, 100, 150],\n            className: 'axis-title',\n            tickInterval: yAxisTickInterval,\n            labels: {\n              format: '{value} %',\n              style: {\n                fontSize: '11px',\n                color: '#485465'\n              },\n              x: -10\n            },\n            lineWidth: 0.6,\n            lineColor: '#070707'\n          },\n          chart: {\n            type: 'boxplot',\n            events: {\n              load: function () {\n                var chart = this as any\n                // if (xAxisTicks.includes(selectedCategory)) {\n                const indexOFSelectedCategory = selectedCategory\n                  ? xAxisTicks.indexOf(selectedCategory)\n                  : -1\n\n                chart?.series[0].points?.forEach(\n                  (_point: any, index: number) => {\n                    if (indexOFSelectedCategory === index) {\n                      chart?.series[0]?.points[indexOFSelectedCategory].update({\n                        fillColor:\n                          boxPlotPartColor.highLight || 'rgba(86, 152, 211,1)'\n                      })\n                    } else {\n                      chart?.series[0]?.points[index].update({\n                        fillColor:\n                          boxPlotPartColor.box || 'rgba(86, 152, 211,0.7)'\n                      })\n                    }\n                  }\n                )\n                // }\n              }\n            }\n          },\n          title: {\n            text: ''\n          },\n          tooltip: {\n            style: {\n              padding: '9px',\n              color: 'white',\n              margin: '10px',\n              opacity: 0.74,\n              height: 'auto',\n              cursor: 'pointer',\n              whiteSpace: 'normal'\n            },\n            backgroundColor: 'black',\n            shadow: true,\n            useHTML: true,\n            borderColor: 'transparent',\n            borderRadius: 0,\n            followPointer: true,\n\n            formatter: function (this: any) {\n              const tool = tooltipData[this.key] // x axis name will be key\n\n              if (this?.series?.userOptions?.type === 'scatter') {\n                // scatter tooltip dynamic\n                const scatterTip =\n                  scrattorTooltip &&\n                  scrattorTooltip({ key: this.key, value: this.y })\n\n                return scatterTip || `${this.key}: ${this.y}`\n              } else {\n                const first = tool.first || ''\n                const last = tool.last || ''\n                const median = tool.median || ''\n                const q3 = tool.q3 || ''\n                const q1 = tool.q1 || ''\n                const tooltip =\n                  (boxPlotToolTip &&\n                    boxPlotToolTip({\n                      first,\n                      last,\n                      q1,\n                      q3,\n                      median,\n                      category: this.key\n                    })) ||\n                  ''\n\n                var defaulTooltip = `<table style=\"border-collapse:separate;border-spacing: 0 1em;overflow-wrap: break-word;\">\n                ${\n                  first\n                    ? `<tr>\n                      <td style=\"width:20px;height:15px;margin-right: 5px;\">\n                      <div class=\"color-box\"  style=\"background-color:${\n                        boxPlotPartColor.first || '#5698d3'\n                      };\"></div>\n\n                      </td>\n                      <td>\n                        <div style=\"display:inline;\">${first}</div>\n                      </td>\n                    </tr>`\n                    : ''\n                }\n                   ${\n                     q3\n                       ? `<tr>\n                       <td style=\"width:20px;height:15px;margin-right: 5px;\">\n                     <div class=\"color-box\"  style=\"background-color:#5698d3;\"></div>\n                     </td>\n                     <td>\n                     <div class=\"text\">${q3}</div>\n                     </td>\n                   </tr>`\n                       : ''\n                   }\n\n                   ${\n                     median\n                       ? `<tr>\n                       <td style=\"width:20px;height:15px;margin-right: 5px;\">\n                         <div class=\"color-box\"  style=\"background-color:white;\"></div>\n\n                         </td>\n                         <td>\n                           <div class=\"text\">${median}</div>\n                         </td>\n                       </tr>`\n                       : ''\n                   }\n\n                   ${\n                     q1\n                       ? `<tr>\n                       <td style=\"width:20px;height:15px;margin-right: 5px;\">\n                     <div class=\"color-box\"  style=\"background-color: #5698d3;\"></div>\n                     </td>\n                     <td>\n                     <div class=\"text\">${q1}</div>\n                     </td>\n                   </tr>`\n                       : ''\n                   }\n                ${\n                  last\n                    ? `<tr>\n                    <td style=\"width:15px;height:15px;margin-right: 5px;\">\n                     <div class=\"color-box\"  style=\"background-color:${\n                       boxPlotPartColor.first || '#5698d3'\n                     }\"></div>\n                     </td>\n                     <td>\n                     <div class=\"text\">${last}</div>\n                     </td>\n                   </tr>`\n                    : ''\n                }\n                   </table>\n                   `\n                return tooltip || defaulTooltip\n              }\n            }\n          },\n\n          legend: {\n            layout: 'horizontal',\n            align: 'right',\n            verticalAlign: 'top',\n            y: -20,\n            navigation: {\n              animation: true,\n              arrowSize: 12,\n              style: {\n                fontWeight: 'bold',\n                fontSize: '12px'\n              }\n            },\n            margin: 30\n          },\n\n          plotOptions: {\n            boxplot: {\n              fillColor: boxPlotPartColor.box || 'rgba(86, 152, 211,0.7)',\n              lineWidth: 2,\n              medianColor: boxPlotPartColor.median || 'white',\n              medianWidth: 3,\n              stemColor: boxPlotPartColor.q1 || '#5698d3',\n              stemWidth: 3,\n              whiskerColor: boxPlotPartColor.first || '#5698d3',\n              whiskerLength: '70%',\n              whiskerWidth: 3,\n              showInLegend: false\n            },\n            series: {\n              events: {\n                click: (e: any) => {\n                  if (e.point.category) {\n                    handleClick({ ...e, point: { ...e.point } })\n                  }\n                }\n              },\n              stickyTracking: false\n            },\n            scatter: {\n              marker: {\n                symbol: 'circle'\n              },\n              showInLegend: false\n            },\n            line: {\n              animation: false,\n              states: {\n                hover: {\n                  enabled: false\n                }\n              },\n              enableMouseTracking: false,\n              showInLegend: true\n            }\n          },\n\n          series: [\n            {\n              name: boxPlotName,\n              data: boxPlotData as Array<any>,\n              cursor: disableClick ? 'default' : 'pointer'\n            },\n            {\n              name: lineName,\n              type: 'line',\n              data: lineData,\n              color: 'red'\n            },\n            {\n              name: scatterPlotName,\n              color: '#5698d3',\n              type: 'scatter',\n              data: scatterPlotData\n            }\n          ]\n        }}\n      />\n    </StyledBoxPlot>\n  )\n}\n\nexport default BoxPlot\n"]},"metadata":{},"sourceType":"module"}