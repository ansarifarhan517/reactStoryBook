{"ast":null,"code":"","map":{"version":3,"sources":[],"names":[],"mappings":"","sourcesContent":["import { InputActionMeta } from 'react-select'\n\nimport { ReactNode } from 'react'\n\nexport interface IMultiSelectOptions {\n  [key: string]: string\n  label: string\n  value: string\n}\n\nexport interface ISelectProps {\n  loadOptions: (options: any, callback: any) => void\n  options?: IMultiSelectOptions[]\n  components: Object\n  allOption?: IMultiSelectOptions\n  value?: IMultiSelectOptions[]\n  onChange?: (\n    value: string,\n    isSelected: boolean,\n    selectedOption: IMultiSelectOptions[],\n    event: React.ChangeEvent<HTMLInputElement>\n  ) => void\n  allowSelectAll?: boolean\n  menuIsOpen?: boolean\n  hideSelectedOptions?: boolean\n  closeMenuOnSelect?: boolean\n  isMulti?: boolean\n  styles?: {}\n  closeMenuOnScroll?: boolean\n  noOptionsMessage?: () => string\n  inputValue?: string\n  onInputChange?:\n    | ((newValue: string, actionMeta: InputActionMeta) => any)\n    | undefined\n\n  onMenuOpen?: () => void\n  /* Handle the menu closing */\n  onMenuClose?: () => void\n  onOutsideClick?: () => void\n}\n\nexport type tMultiSelectChildren = {\n  optionSelected: IMultiSelectOptions[]\n  isMenuOpen: boolean\n  openMenu: React.Dispatch<React.SetStateAction<boolean>>\n}\nexport interface IMultiSelectProps\n  extends React.HTMLAttributes<HTMLDivElement> {\n  options?: IMultiSelectOptions[]\n  width?: string\n  onChange?: (\n    event: React.ChangeEvent<HTMLInputElement>,\n    value?: string,\n    isSelected?: boolean,\n    selectedOption?: IMultiSelectOptions[]\n  ) => void\n  children: ({\n    optionSelected,\n    isMenuOpen,\n    openMenu\n  }: tMultiSelectChildren) => ReactNode\n  loadOptions?: (inputValue: string, callback: any) => void\n  isLoading?: boolean\n  isNoOption?: boolean\n  menuOpen?: boolean\n  defaultSelected?: IMultiSelectOptions[]\n  selected?: IMultiSelectOptions[]\n  allowSelectAll?: boolean\n  maximumSelected?: number\n  searchableKeys?: string[]\n  onMenuOpen?: () => void\n  onMenuClose?: () => void\n  resultLimit?: number\n  onInputChange?: (newValue: string) => void\n  onOutsideClick?: () => void\n}\n\nexport interface tMultiSelectWrapperProps\n  extends React.HTMLAttributes<HTMLDivElement> {\n  width?: string\n}\n\nexport type tCallback = (\n  func: IMultiSelectOptions[] | undefined\n) => IMultiSelectOptions[]\n\nexport interface IValueContainerProps {\n  children: IMultiSelectOptions[]\n  getValue: () => any\n}\n"]},"metadata":{},"sourceType":"module"}