{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/atoms/Charts/ToolTip/index.tsx\";\n\nimport React, { useContext } from 'react';\nimport { ThemeContext } from 'styled-components';\nimport { LabelWrapper, Options, StyledColorBox, StyledCount, StyledToolTip } from './StyledToolTip'; // KPI will be provided as a part of tooltip\n\nvar KPIToolTip = function KPIToolTip(_ref) {\n  var _theme$primary;\n\n  var label = _ref.label,\n      values = _ref.values,\n      theme = _ref.theme,\n      color = _ref.color;\n  return /*#__PURE__*/React.createElement(StyledToolTip, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: 'flex',\n      width: '100%'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(StyledColorBox, {\n    color: color || (theme === null || theme === void 0 ? void 0 : (_theme$primary = theme.primary) === null || _theme$primary === void 0 ? void 0 : _theme$primary.main),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(NameTooltip, {\n    label: label,\n    values: values,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 9\n    }\n  })));\n}; // only name and Achievement will be shown on tooltip\n\n\nvar NameTooltip = function NameTooltip(_ref2) {\n  var label = _ref2.label,\n      values = _ref2.values;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: '100%',\n      display: 'flex'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(LabelWrapper, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }\n  }, label.map(function (option) {\n    return /*#__PURE__*/React.createElement(Options, {\n      key: option,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 11\n      }\n    }, \" \", option);\n  })), /*#__PURE__*/React.createElement(LabelWrapper, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }\n  }, values.map(function (value, index) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        marginLeft: '3px'\n      },\n      key: \"\".concat(value).concat(index),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Options, {\n      key: \"\".concat(value).concat(index),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 15\n      }\n    }, \" \", \" \".concat(value)));\n  })));\n}; // selected color of legend, name and value will be shown\n\n\nvar DefaultTooltip = function DefaultTooltip(_ref3) {\n  var color = _ref3.color,\n      value = _ref3.value,\n      name = _ref3.name;\n  return /*#__PURE__*/React.createElement(StyledToolTip, {\n    toolTipVariant: \"default\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: 'flex',\n      width: '100%'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(StyledColorBox, {\n    color: color,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      whiteSpace: 'nowrap'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, \"\".concat(name), \" \")), /*#__PURE__*/React.createElement(StyledCount, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }, \"\".concat(value, \"%\")));\n};\n\nvar ToolTip = function ToolTip(_ref4) {\n  var value = _ref4.value,\n      name = _ref4.name,\n      color = _ref4.color,\n      legend = _ref4.legend,\n      _ref4$toolTipVariant = _ref4.toolTipVariant,\n      toolTipVariant = _ref4$toolTipVariant === void 0 ? 'default' : _ref4$toolTipVariant,\n      tooltipTitleList = _ref4.tooltipTitleList,\n      barChartTooltip = _ref4.barChartTooltip;\n  var theme = useContext(ThemeContext);\n  var ToolTipComponent = {\n    \"default\": /*#__PURE__*/React.createElement(DefaultTooltip, {\n      color: color,\n      value: value,\n      name: name,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 14\n      }\n    }),\n    withKpi: /*#__PURE__*/React.createElement(KPIToolTip, {\n      theme: theme,\n      color: color,\n      label: tooltipTitleList || ['KPI:', 'Branch:', 'Achievement:'],\n      values: [legend, name, \"\".concat(value)],\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 7\n      }\n    }),\n    withoutKpi: /*#__PURE__*/React.createElement(StyledToolTip, {\n      style: {\n        padding: '8px 16px 3px 16px'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(NameTooltip, {\n      label: tooltipTitleList || ['Name:', 'Achievement:'],\n      values: [name, \"\".concat(value, \"%\")],\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }\n    }))\n  };\n\n  if (barChartTooltip) {\n    return barChartTooltip({\n      value: value,\n      name: name,\n      color: color,\n      legend: legend\n    });\n  } else {\n    return ToolTipComponent[toolTipVariant] || null;\n  }\n};\n\nexport default React.memo(ToolTip);","map":{"version":3,"sources":["/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/atoms/Charts/ToolTip/index.tsx"],"names":["React","useContext","ThemeContext","LabelWrapper","Options","StyledColorBox","StyledCount","StyledToolTip","KPIToolTip","label","values","theme","color","display","width","primary","main","NameTooltip","map","option","value","index","marginLeft","DefaultTooltip","name","whiteSpace","ToolTip","legend","toolTipVariant","tooltipTitleList","barChartTooltip","ToolTipComponent","withKpi","withoutKpi","padding","memo"],"mappings":"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","sourcesContent":["import React, { useContext } from 'react'\nimport { ThemeContext } from 'styled-components'\nimport { INameTooltip, IToolTip } from '../interface'\nimport {\n  LabelWrapper,\n  Options,\n  StyledColorBox,\n  StyledCount,\n  StyledToolTip\n} from './StyledToolTip'\n\n// KPI will be provided as a part of tooltip\nconst KPIToolTip = ({ label, values, theme, color }: INameTooltip) => {\n  return (\n    <StyledToolTip>\n      <div style={{ display: 'flex', width: '100%' }}>\n        <StyledColorBox color={color || theme?.primary?.main} />\n        <NameTooltip label={label} values={values} />\n      </div>\n    </StyledToolTip>\n  )\n}\n\n// only name and Achievement will be shown on tooltip\nconst NameTooltip = ({ label, values }: INameTooltip) => {\n  return (\n    <div style={{ width: '100%', display: 'flex' }}>\n      <LabelWrapper>\n        {label.map((option) => (\n          <Options key={option}> {option}</Options>\n        ))}\n      </LabelWrapper>\n      <LabelWrapper>\n        {values.map((value, index) => {\n          return (\n            <div style={{ marginLeft: '3px' }} key={`${value}${index}`}>\n              <Options key={`${value}${index}`}> {` ${value}`}</Options>\n            </div>\n          )\n        })}\n      </LabelWrapper>\n    </div>\n  )\n}\n\n// selected color of legend, name and value will be shown\nconst DefaultTooltip = ({ color, value, name }: IToolTip) => {\n  return (\n    <StyledToolTip toolTipVariant='default'>\n      <div style={{ display: 'flex', width: '100%' }}>\n        <StyledColorBox color={color} />\n        <div style={{ whiteSpace: 'nowrap' }}>{`${name}`} </div>\n      </div>\n      <StyledCount>{`${value}%`}</StyledCount>\n    </StyledToolTip>\n  )\n}\n\nconst ToolTip = ({\n  value,\n  name,\n  color,\n  legend,\n  toolTipVariant = 'default',\n  tooltipTitleList,\n  barChartTooltip\n}: IToolTip) => {\n  const theme = useContext(ThemeContext)\n\n  const ToolTipComponent = {\n    default: <DefaultTooltip color={color} value={value} name={name} />,\n    withKpi: (\n      <KPIToolTip\n        theme={theme}\n        color={color}\n        label={tooltipTitleList || ['KPI:', 'Branch:', 'Achievement:']}\n        values={[legend, name, `${value}`]}\n      />\n    ),\n    withoutKpi: (\n      <StyledToolTip style={{ padding: '8px 16px 3px 16px' }}>\n        <NameTooltip\n          label={tooltipTitleList || ['Name:', 'Achievement:']}\n          values={[name, `${value}%`]}\n        />\n      </StyledToolTip>\n    )\n  }\n  if (barChartTooltip) {\n    return barChartTooltip({ value, name, color, legend })\n  } else {\n    return ToolTipComponent[toolTipVariant] || null\n  }\n}\n\nexport default React.memo(ToolTip)\n"]},"metadata":{},"sourceType":"module"}