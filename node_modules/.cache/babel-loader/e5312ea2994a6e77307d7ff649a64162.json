{"ast":null,"code":"import _defineProperty from \"/Users/farhanansari/Code/ui-library/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/Users/farhanansari/Code/ui-library/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/Users/farhanansari/Code/ui-library/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState, useCallback } from 'react';\nexport var useCustomFilters = function useCustomFilters() {\n  var filtersObject = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  var _useState = useState(filtersObject),\n      _useState2 = _slicedToArray(_useState, 2),\n      filters = _useState2[0],\n      setFilters = _useState2[1];\n\n  var combinedFilterOptions = useCallback(function () {\n    var entries = Object.entries(filters);\n\n    if (!entries.length) {\n      return {};\n    }\n\n    var reducedEntries = entries.reduce(function () {\n      var previousEntry = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ['', ''];\n      var currentEntry = arguments.length > 1 ? arguments[1] : undefined;\n      return [\"\".concat(previousEntry[0], \"#@#\").concat(currentEntry[0]), \"\".concat(previousEntry[1], \"#@#\").concat(currentEntry[1])];\n    });\n    return {\n      searchBy: reducedEntries[0],\n      searchText: reducedEntries[1]\n    };\n  }, [filters]);\n\n  var getTextFieldProps = function getTextFieldProps(column) {\n    return {\n      id: \"\".concat(column.id, \"-filter\"),\n      type: 'text',\n      // onChange: (e: React.FormEvent<HTMLInputElement>) => {\n      // },\n      onClear: function onClear() {\n        setFilters(function (f) {\n          var newFilter = _objectSpread({}, f);\n\n          delete newFilter[column.id || ''];\n          return newFilter;\n        });\n      },\n      onKeyDown: function onKeyDown(e) {\n        if (e.key === 'Enter') {\n          var value = e.currentTarget.value;\n\n          if (value) {\n            setFilters(function (f) {\n              return _objectSpread(_objectSpread({}, f), {}, _defineProperty({}, column.id || value, value));\n            });\n          } else {\n            setFilters(function (f) {\n              var newFilter = _objectSpread({}, f);\n\n              delete newFilter[column.id || value];\n              return newFilter;\n            });\n          }\n        }\n      }\n    };\n  };\n\n  var getSelectFieldProps = function getSelectFieldProps(column) {\n    return {\n      id: \"\".concat(column.id, \"-filter\"),\n      type: 'text',\n      // onChange: (e: React.FormEvent<HTMLInputElement>) => {\n      // },\n      value: (filters === null || filters === void 0 ? void 0 : filters[column.id || '']) || '',\n      // onChange: ({ target: { value } }: React.ChangeEvent<HTMLInputElement>) => {\n      onChange: function onChange() {\n        var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n        // const value = e.currentTarget.value\n        if (value) {\n          setFilters(function (f) {\n            return _objectSpread(_objectSpread({}, f), {}, _defineProperty({}, column.id || value, value));\n          });\n        } else {\n          setFilters(function (f) {\n            var newFilter = _objectSpread({}, f);\n\n            delete newFilter[column.id || value];\n            return newFilter;\n          });\n        }\n      }\n    };\n  };\n\n  var resetFilters = function resetFilters() {\n    setFilters({});\n  };\n\n  return {\n    filters: filters,\n    setFilters: setFilters,\n    getTextFieldProps: getTextFieldProps,\n    getSelectFieldProps: getSelectFieldProps,\n    combinedFilterOptions: combinedFilterOptions,\n    resetFilters: resetFilters\n  };\n};","map":{"version":3,"sources":["/Users/farhanansari/Code/ui-library/src/components/organisms/ListView/utils/useCustomFilters.tsx"],"names":["useState","useCallback","useCustomFilters","filtersObject","filters","setFilters","combinedFilterOptions","entries","Object","length","reducedEntries","reduce","previousEntry","currentEntry","searchBy","searchText","getTextFieldProps","column","id","type","onClear","f","newFilter","onKeyDown","e","key","value","currentTarget","getSelectFieldProps","onChange","resetFilters"],"mappings":"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","sourcesContent":["import { useState, useCallback } from 'react'\nimport {\n  IFilterOptions,\n  ICustomFiltersInstance,\n  ITextFieldProps,\n  ISelectFieldProps\n} from '../interfaces'\nimport { Column } from 'react-table'\n\nexport const useCustomFilters = (\n  filtersObject: Record<string, string> = {}\n): ICustomFiltersInstance => {\n  const [filters, setFilters] = useState<Record<string, string>>(filtersObject)\n\n  const combinedFilterOptions = useCallback((): IFilterOptions => {\n    const entries = Object.entries(filters)\n    if (!entries.length) {\n      return {}\n    }\n\n    const reducedEntries = entries.reduce(\n      (\n        previousEntry: [string, string] = ['', ''],\n        currentEntry: [string, string]\n      ): [string, string] => {\n        return [\n          `${previousEntry[0]}#@#${currentEntry[0]}`,\n          `${previousEntry[1]}#@#${currentEntry[1]}`\n        ]\n      }\n    )\n\n    return {\n      searchBy: reducedEntries[0],\n      searchText: reducedEntries[1]\n    }\n  }, [filters])\n\n  const getTextFieldProps = (column: Column): ITextFieldProps => ({\n    id: `${column.id}-filter`,\n    type: 'text',\n    // onChange: (e: React.FormEvent<HTMLInputElement>) => {\n    // },\n    onClear: () => {\n      setFilters((f) => {\n        const newFilter = { ...f }\n        delete newFilter[column.id || '']\n        return newFilter\n      })\n    },\n    onKeyDown: (e: React.KeyboardEvent<HTMLInputElement>) => {\n      if (e.key === 'Enter') {\n        const value = e.currentTarget.value\n        if (value) {\n          setFilters((f) => ({ ...f, [column.id || value]: value }))\n        } else {\n          setFilters((f) => {\n            const newFilter = { ...f }\n            delete newFilter[column.id || value]\n            return newFilter\n          })\n        }\n      }\n    }\n  })\n\n  const getSelectFieldProps = (column: Column): ISelectFieldProps => ({\n    id: `${column.id}-filter`,\n    type: 'text',\n    // onChange: (e: React.FormEvent<HTMLInputElement>) => {\n    // },\n    value: filters?.[column.id || ''] || '',\n    // onChange: ({ target: { value } }: React.ChangeEvent<HTMLInputElement>) => {\n    onChange: (value: string | undefined = '') => {\n      // const value = e.currentTarget.value\n      if (value) {\n        setFilters((f) => ({ ...f, [column.id || value]: value }))\n      } else {\n        setFilters((f) => {\n          const newFilter = { ...f }\n          delete newFilter[column.id || value]\n          return newFilter\n        })\n      }\n    }\n  })\n\n  const resetFilters = () => {\n    setFilters({})\n  }\n\n  return {\n    filters,\n    setFilters,\n    getTextFieldProps,\n    getSelectFieldProps,\n    combinedFilterOptions,\n    resetFilters\n  }\n}\n"]},"metadata":{},"sourceType":"module"}