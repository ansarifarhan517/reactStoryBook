{"ast":null,"code":"import _objectSpread from \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/atoms/Map/layers/LeafletMarkerLayer.tsx\";\n\n// The marker layer which will display all the markers and marker clusters\nimport React, { useState, useRef } from 'react';\nimport { useLeaflet } from 'react-leaflet';\nimport Checkbox from '../../Checkbox';\nimport { CheckBoxLabel } from '../../Checkbox/Checkbox.styled';\nimport { convertArrayToObject } from '../helperMethods';\nimport MarkerComponent from '../SubComponent/Marker';\nimport { LegendsWrapper, SequenceIcon } from './../utils/Legends/StyledLegends';\nimport { SequenceWrapper, TripIconWrapper } from './../utils/GoogleIntegration/StyledSequenceBar'; // import { ReactComponent as Right , } from '../../../../assets/map/right.svg'\n\nimport FontIcon from '../../FontIcon';\n\nvar htmlDecode = function htmlDecode(input) {\n  var e = document.createElement('div');\n  e.innerHTML = input;\n  return e.childNodes.length === 0 ? '' : e.childNodes[0].nodeValue;\n};\n\nvar ShowMarkerIcon = function ShowMarkerIcon(props) {\n  var icon = props.icon,\n      lastIndex = props.lastIndex;\n  var html = icon.html ? icon.html : htmlDecode(icon);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: 'flex',\n      alignItems: 'center',\n      margin: lastIndex ? '5px' : '0 5px'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 5\n    }\n  }, html && /*#__PURE__*/React.createElement(\"div\", {\n    dangerouslySetInnerHTML: {\n      __html: html\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 16\n    }\n  }), !lastIndex && /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      marginLeft: '5px'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: '20px',\n      opacity: '0.5'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"svg\", {\n    xmlns: \"http://www.w3.org/2000/svg\",\n    height: \"24px\",\n    viewBox: \"0 0 24 24\",\n    width: \"24px\",\n    fill: \"#000000\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M0 0h24v24H0V0z\",\n    fill: \"none\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M16.01 11H5c-.55 0-1 .45-1 1s.45 1 1 1h11.01v1.79c0 .45.54.67.85.35l2.78-2.79c.19-.2.19-.51 0-.71l-2.78-2.79c-.31-.32-.85-.09-.85.35V11z\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 15\n    }\n  })))));\n};\n\nvar LegendWrapperBox = function LegendWrapperBox(_ref) {\n  var _entitiesMap$entity, _entitiesMap$entity$l;\n\n  var map = _ref.map,\n      entitiesMap = _ref.entitiesMap,\n      entity = _ref.entity,\n      setLegendModel = _ref.setLegendModel,\n      heatMap = _ref.heatMap,\n      updateMarkers = _ref.updateMarkers,\n      iconsRef = _ref.iconsRef;\n  var ref = useRef(null);\n\n  var _useState = useState(ref),\n      _useState2 = _slicedToArray(_useState, 2),\n      refNew = _useState2[0],\n      setRefNew = _useState2[1]; // console.log(\n  //   map,\n  //   entitiesMap,\n  //   entity,\n  //   setLegendModel,\n  //   heatMap,\n  //   updateMarkers,\n  //   iconsRef,\n  //   ref\n  // )\n\n\n  React.useEffect(function () {\n    setRefNew(ref);\n  }, [ref]);\n\n  var scroll = function scroll(scrollOffset) {\n    if (refNew && refNew.current !== null) {\n      var newObj = _objectSpread({}, refNew);\n\n      newObj.current.scrollLeft = newObj.current.scrollLeft + scrollOffset;\n      console.log(newObj.current.scrollLeft, 'newObj.current.scrollLeft');\n      setRefNew(newObj);\n    }\n  };\n\n  var eligibleEntities = entitiesMap === null || entitiesMap === void 0 ? void 0 : (_entitiesMap$entity = entitiesMap[entity]) === null || _entitiesMap$entity === void 0 ? void 0 : (_entitiesMap$entity$l = _entitiesMap$entity.legends) === null || _entitiesMap$entity$l === void 0 ? void 0 : _entitiesMap$entity$l.filter(function (_legendName, index) {\n    if (index >= 4) {\n      return false; // skip\n    }\n\n    return true;\n  });\n  return /*#__PURE__*/React.createElement(LegendsWrapper, {\n    onClick: function onClick() {\n      // disable zoom option when u click on legend\n      map === null || map === void 0 ? void 0 : map.doubleClickZoom.disable();\n      map === null || map === void 0 ? void 0 : map.boxZoom.disable();\n      map === null || map === void 0 ? void 0 : map.scrollWheelZoom.disable();\n      map === null || map === void 0 ? void 0 : map.dragging.disable();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    onClick: function onClick() {\n      return scroll(-20);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FontIcon, {\n    variant: \"angle-left-thin\",\n    size: \"xs\",\n    color: \"black\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"legend-wrapper\",\n    ref: refNew,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }\n  }, eligibleEntities.map(function (legendName, index) {\n    var _entitiesMap$entity2;\n\n    var entry = entitiesMap === null || entitiesMap === void 0 ? void 0 : (_entitiesMap$entity2 = entitiesMap[entity]) === null || _entitiesMap$entity2 === void 0 ? void 0 : _entitiesMap$entity2.legendsMap[legendName];\n    var isConnect = entry === null || entry === void 0 ? void 0 : entry.connect;\n    var showLegendIcon = (entry === null || entry === void 0 ? void 0 : entry.icon) || (iconsRef === null || iconsRef === void 0 ? void 0 : iconsRef.iconRef);\n    return (entry === null || entry === void 0 ? void 0 : entry.permission) ? isConnect && (showLegendIcon === null || showLegendIcon === void 0 ? void 0 : showLegendIcon.html_sequence) ? /*#__PURE__*/React.createElement(ShowMarkerIcon, {\n      entry: entry,\n      icon: showLegendIcon,\n      key: index,\n      lastIndex: eligibleEntities.length - 1 === index,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 15\n      }\n    }) : /*#__PURE__*/React.createElement(\"div\", {\n      key: entry.id,\n      title: \"\".concat(entry.value, \" \").concat((entry === null || entry === void 0 ? void 0 : entry.extraInfo) ? \"(\".concat(entry === null || entry === void 0 ? void 0 : entry.extraInfo, \")\") : ''),\n      style: {\n        display: 'flex',\n        whiteSpace: 'nowrap',\n        marginRight: '10px',\n        marginTop: '5px',\n        textOverflow: 'ellipsis'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Checkbox, {\n      id: entry.value,\n      onChange: function onChange(_e) {\n        var _entitiesMap$entity3;\n\n        return legendToggled(entry.id, !entry.checked, Object.values(entitiesMap === null || entitiesMap === void 0 ? void 0 : (_entitiesMap$entity3 = entitiesMap[entity]) === null || _entitiesMap$entity3 === void 0 ? void 0 : _entitiesMap$entity3.legendsMap), setLegendModel, updateMarkers, map);\n      },\n      customStyle: \"border-radius:2px;\",\n      disabled: !!entry.disabled,\n      checked: !!entry.checked,\n      labelComponent: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(CheckBoxLabel, {\n        style: {\n          fontSize: '13px',\n          marginBottom: '0.5em',\n          color: '#000'\n        },\n        htmlFor: entry.value,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 23\n        }\n      }, \"\".concat(entry.value, \"\\n                      \").concat((entry === null || entry === void 0 ? void 0 : entry.extraInfo) ? \"(\".concat(entry === null || entry === void 0 ? void 0 : entry.extraInfo, \")\") : ''))),\n      checkboxSize: \"md\",\n      color: heatMap ? '#979797' : entry === null || entry === void 0 ? void 0 : entry.color,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 17\n      }\n    })) : null;\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    onClick: function onClick() {\n      return scroll(20);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FontIcon, {\n    variant: \"angle-right-thin\",\n    size: \"xs\",\n    color: \"black\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 9\n    }\n  })));\n};\n\nvar SequenceWrapperBox = function SequenceWrapperBox(_ref2) {\n  var markers = _ref2.markers;\n  var seqRef = useRef(null);\n\n  var _useState3 = useState(seqRef),\n      _useState4 = _slicedToArray(_useState3, 2),\n      sequenceRef = _useState4[0],\n      setSequenceRef = _useState4[1];\n\n  React.useEffect(function () {\n    setSequenceRef(seqRef);\n  }, [seqRef]); //left button\n\n  var LeftButton = function LeftButton() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      onClick: function onClick() {\n        return scroll(-20);\n      },\n      style: {\n        alignSelf: 'center'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(FontIcon, {\n      variant: \"angle-left-thin\",\n      size: \"xs\",\n      color: \"black\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 7\n      }\n    }));\n  }; //right button\n\n\n  var RightButton = function RightButton() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      onClick: function onClick() {\n        return scroll(20);\n      },\n      style: {\n        alignSelf: 'center'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(FontIcon, {\n      variant: \"angle-right-thin\",\n      size: \"xs\",\n      color: \"black\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 7\n      }\n    }));\n  }; // callback\n\n\n  var scroll = function scroll(scrollOffset) {\n    if (sequenceRef && sequenceRef.current !== null) {\n      var newObj = _objectSpread({}, sequenceRef);\n\n      newObj.current.scrollLeft = newObj.current.scrollLeft + scrollOffset;\n      console.log(newObj.current.scrollLeft, 'newObj.current.scrollLeft');\n      setSequenceRef(newObj);\n    }\n  };\n\n  var handleCallBack = function handleCallBack(id) {\n    console.log('handleCallBack', id); // document.getElementsByClassName(id)?.click();\n  };\n\n  return /*#__PURE__*/React.createElement(SequenceWrapper, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(LeftButton, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(TripIconWrapper, {\n    ref: sequenceRef,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 7\n    }\n  }, markers.map(function (marker, index) {\n    return /*#__PURE__*/React.createElement(SequenceIcon, {\n      onClick: function onClick() {\n        return handleCallBack(marker.id);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(ShowMarkerIcon, {\n      icon: marker.icon,\n      lastIndex: index === markers.length - 1,\n      sequenceBox: true,\n      sequence: marker.sequence,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 15\n      }\n    }));\n  })), /*#__PURE__*/React.createElement(RightButton, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 7\n    }\n  }));\n}; // function called whenever a legend is toggled\n\n\nvar legendToggled = function legendToggled(checkboxId, checked, checkOptions, setLegendModel, updateMarkers, _map) {\n  var newModelArray = checkOptions.map(function (opn) {\n    var newOpn = opn;\n    newOpn.checked = opn.id === checkboxId ? checked : newOpn.checked;\n    return newOpn;\n  }); // dewanshs code\n  // const newCheckOptions: any = {}\n  // checkOptions.forEach((item: any) => {\n  //   if (!item.disabled && checkboxId === item.id) {\n  //     newCheckOptions[item.id] = { ...item, checked: checked }\n  //   } else {\n  //     newCheckOptions[item.id] = item\n  //   }\n  // })\n\n  var legendObj = convertArrayToObject(newModelArray, 'id');\n  setLegendModel(legendObj); // send updated legend list in array\n\n  updateMarkers(newModelArray);\n}; // The layer with actual markers and marker clustering\n\n\nvar LeafletMarkerLayer = function LeafletMarkerLayer(props) {\n  var _marker$entities;\n\n  var marker = props.marker,\n      iconsRef = props.iconsRef,\n      popupRef = props.popupRef,\n      updateMarkers = props.updateMarkers,\n      heatMap = props.heatMap,\n      showModal = props.showModal,\n      geocoding = props.geocoding,\n      focusSearchPlace = props.focusSearchPlace,\n      ignoreMarkerPermission = props.ignoreMarkerPermission,\n      _props$showLegendWrap = props.showLegendWrapper,\n      showLegendWrapper = _props$showLegendWrap === void 0 ? true : _props$showLegendWrap,\n      _props$showSequenceWr = props.showSequenceWrapperBox,\n      showSequenceWrapperBox = _props$showSequenceWr === void 0 ? false : _props$showSequenceWr; // the actual model of legends in this marker layer, when user toggled on legend on map this legend model gets changed\n\n  var _useState5 = useState(props.legendModel),\n      _useState6 = _slicedToArray(_useState5, 2),\n      legendModel = _useState6[0],\n      setLegendModel = _useState6[1];\n\n  var entities = marker === null || marker === void 0 ? void 0 : marker.entities;\n  var entitiesMap = marker === null || marker === void 0 ? void 0 : marker.entitiesMap;\n\n  var _useLeaflet = useLeaflet(),\n      map = _useLeaflet.map;\n\n  console.log('LeafletMarkerLayer.tsx ===>', props);\n  React.useEffect(function () {\n    // on toggle of a legend, update the marker layers\n    // todo: proper optimized support of multiple entities in 1 map\n    // todo: memoization of markers/layers which have not changed\n    setLegendModel(props.legendModel); // whenever it gets trigger from settings, this value will force to update legend on map as well\n  }, [props.legendModel]); // if heatmap or marker map show legendWrapperbox (settingbox modal should be closed)\n  // cluster we are showing only in marker map\n  // for heatmap we have seperate heatlayer\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 346,\n      columnNumber: 5\n    }\n  }, (marker === null || marker === void 0 ? void 0 : marker.permission) || heatMap ? marker === null || marker === void 0 ? void 0 : (_marker$entities = marker.entities) === null || _marker$entities === void 0 ? void 0 : _marker$entities.map(function (entity, i) {\n    var _entitiesMap$entity4, _entitiesMap$entity4$;\n\n    console.log('LeafletMarkerLayer.tsx', entity, entitiesMap);\n    return (entitiesMap === null || entitiesMap === void 0 ? void 0 : entitiesMap[entity].permission) && /*#__PURE__*/React.createElement(React.Fragment, {\n      key: i,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 17\n      }\n    }, console.log('LeafletMarkerLayer.tsx', entity, entitiesMap, heatMap), !heatMap && /*#__PURE__*/React.createElement(MarkerComponent, {\n      entities: entities,\n      entitiesMap: entitiesMap,\n      iconsRef: iconsRef,\n      popupRef: popupRef,\n      legendModel: legendModel,\n      google: google,\n      focusMarkerId: props.focusMarkerId,\n      geocoding: geocoding,\n      focusSearchPlace: focusSearchPlace,\n      ignoreMarkerPermission: ignoreMarkerPermission,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 21\n      }\n    }), !showModal && showLegendWrapper && /*#__PURE__*/React.createElement(LegendWrapperBox, {\n      map: map,\n      entitiesMap: entitiesMap,\n      entity: entity,\n      setLegendModel: setLegendModel,\n      heatMap: heatMap,\n      updateMarkers: updateMarkers,\n      iconsRef: iconsRef,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 21\n      }\n    }), !showModal && showSequenceWrapperBox && /*#__PURE__*/React.createElement(SequenceWrapperBox, {\n      markers: entitiesMap === null || entitiesMap === void 0 ? void 0 : (_entitiesMap$entity4 = entitiesMap[entity]) === null || _entitiesMap$entity4 === void 0 ? void 0 : (_entitiesMap$entity4$ = _entitiesMap$entity4.markers) === null || _entitiesMap$entity4$ === void 0 ? void 0 : _entitiesMap$entity4$.list,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 389,\n        columnNumber: 21\n      }\n    }));\n  }) : undefined);\n};\n\nexport default LeafletMarkerLayer;","map":{"version":3,"sources":["/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/atoms/Map/layers/LeafletMarkerLayer.tsx"],"names":["React","useState","useRef","useLeaflet","Checkbox","CheckBoxLabel","convertArrayToObject","MarkerComponent","LegendsWrapper","SequenceIcon","SequenceWrapper","TripIconWrapper","FontIcon","htmlDecode","input","e","document","createElement","innerHTML","childNodes","length","nodeValue","ShowMarkerIcon","props","icon","lastIndex","html","display","alignItems","margin","__html","marginLeft","width","opacity","LegendWrapperBox","map","entitiesMap","entity","setLegendModel","heatMap","updateMarkers","iconsRef","ref","refNew","setRefNew","useEffect","scroll","scrollOffset","current","newObj","scrollLeft","console","log","eligibleEntities","legends","filter","_legendName","index","doubleClickZoom","disable","boxZoom","scrollWheelZoom","dragging","legendName","entry","legendsMap","isConnect","connect","showLegendIcon","iconRef","permission","html_sequence","id","value","extraInfo","whiteSpace","marginRight","marginTop","textOverflow","_e","legendToggled","checked","Object","values","disabled","fontSize","marginBottom","color","SequenceWrapperBox","markers","seqRef","sequenceRef","setSequenceRef","LeftButton","alignSelf","RightButton","handleCallBack","marker","sequence","checkboxId","checkOptions","_map","newModelArray","opn","newOpn","legendObj","LeafletMarkerLayer","popupRef","showModal","geocoding","focusSearchPlace","ignoreMarkerPermission","showLegendWrapper","showSequenceWrapperBox","legendModel","entities","i","google","focusMarkerId","list","undefined"],"mappings":"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","sourcesContent":["// The marker layer which will display all the markers and marker clusters\n\nimport React, { useState, useRef } from 'react'\nimport { useLeaflet } from 'react-leaflet'\nimport Checkbox from '../../Checkbox'\nimport { CheckBoxLabel } from '../../Checkbox/Checkbox.styled'\nimport { convertArrayToObject } from '../helperMethods'\nimport MarkerComponent from '../SubComponent/Marker'\nimport { LegendsWrapper, SequenceIcon } from './../utils/Legends/StyledLegends'\nimport {\n  SequenceWrapper,\n  TripIconWrapper\n} from './../utils/GoogleIntegration/StyledSequenceBar'\n// import { ReactComponent as Right , } from '../../../../assets/map/right.svg'\nimport FontIcon from '../../FontIcon'\n\ninterface IMarkerLayer {\n  legendModel?: any\n  popupRef: any\n  iconsRef: any\n  marker: any\n  showModal: boolean\n  updateMarkers?: (marker: any) => void\n  google: any\n  focusMarkerId?: string\n  heatMap: boolean\n  geocoding?: any\n  focusSearchPlace: boolean\n  ignoreMarkerPermission?: boolean\n  handleCallback?: any\n  showLegendWrapper?: boolean\n  showSequenceWrapperBox?: boolean\n}\n\nconst htmlDecode = (input: string) => {\n  var e = document.createElement('div')\n  e.innerHTML = input\n  return e.childNodes.length === 0 ? '' : e.childNodes[0].nodeValue\n}\ninterface ILegendWrapperBox {\n  map: any\n  entitiesMap: any\n  entity: any\n  setLegendModel: any\n  heatMap: boolean\n  updateMarkers: any\n  iconsRef: any\n}\n\ninterface ISequenceWrapperBox {\n  markers: Array<{\n    iconRef: string\n    id: string\n    popupRef: string\n    position: Array<Number>\n    title: string\n    type: string\n    sequence: Number\n    icon: {\n      iconLocation: string\n      iconAnchor: [number, number]\n      divIcon: boolean\n      html: string\n    }\n  }>\n}\n\nconst ShowMarkerIcon = (props: any) => {\n  const { icon, lastIndex } = props\n  const html = icon.html ? icon.html : htmlDecode(icon)\n\n  return (\n    <div\n      style={{\n        display: 'flex',\n        alignItems: 'center',\n        margin: lastIndex ? '5px' : '0 5px'\n      }}\n    >\n      {html && <div dangerouslySetInnerHTML={{ __html: html }} />}\n      {!lastIndex && (\n        <div style={{ marginLeft: '5px' }}>\n          {/* <Right width='20px' opacity='0.5' className='marker-connector' /> */}\n          <div style={{ width: '20px', opacity: '0.5' }}>\n            <svg\n              xmlns='http://www.w3.org/2000/svg'\n              height='24px'\n              viewBox='0 0 24 24'\n              width='24px'\n              fill='#000000'\n            >\n              <path d='M0 0h24v24H0V0z' fill='none' />\n              <path d='M16.01 11H5c-.55 0-1 .45-1 1s.45 1 1 1h11.01v1.79c0 .45.54.67.85.35l2.78-2.79c.19-.2.19-.51 0-.71l-2.78-2.79c-.31-.32-.85-.09-.85.35V11z' />\n            </svg>\n          </div>\n        </div>\n      )}\n    </div>\n  )\n}\nconst LegendWrapperBox = ({\n  map,\n  entitiesMap,\n  entity,\n  setLegendModel,\n  heatMap,\n  updateMarkers,\n  iconsRef\n}: ILegendWrapperBox) => {\n  const ref = useRef(null)\n  const [refNew, setRefNew] = useState(ref)\n  // console.log(\n  //   map,\n  //   entitiesMap,\n  //   entity,\n  //   setLegendModel,\n  //   heatMap,\n  //   updateMarkers,\n  //   iconsRef,\n  //   ref\n  // )\n  React.useEffect(() => {\n    setRefNew(ref)\n  }, [ref])\n\n  const scroll = (scrollOffset: number) => {\n    if (refNew && refNew.current !== null) {\n      const newObj: any = { ...refNew }\n      newObj.current.scrollLeft = newObj.current.scrollLeft + scrollOffset\n      console.log(newObj.current.scrollLeft, 'newObj.current.scrollLeft')\n      setRefNew(newObj)\n    }\n  }\n\n  const eligibleEntities = entitiesMap?.[entity]?.legends?.filter(function (\n    _legendName: any,\n    index: number\n  ) {\n    if (index >= 4) {\n      return false // skip\n    }\n    return true\n  })\n  return (\n    <LegendsWrapper\n      onClick={() => {\n        // disable zoom option when u click on legend\n        map?.doubleClickZoom.disable()\n        map?.boxZoom.disable()\n        map?.scrollWheelZoom.disable()\n        map?.dragging.disable()\n      }}\n    >\n      <div onClick={() => scroll(-20)}>\n        <FontIcon variant='angle-left-thin' size='xs' color='black' />\n      </div>\n      <div className='legend-wrapper' ref={refNew}>\n        {eligibleEntities.map((legendName: any, index: number) => {\n          const entry = entitiesMap?.[entity]?.legendsMap[legendName]\n          const isConnect = entry?.connect\n          const showLegendIcon = entry?.icon || iconsRef?.iconRef\n          return entry?.permission ? (\n            isConnect && showLegendIcon?.html_sequence ? (\n              <ShowMarkerIcon\n                entry={entry}\n                icon={showLegendIcon}\n                key={index}\n                lastIndex={eligibleEntities.length - 1 === index}\n              />\n            ) : (\n              <div\n                key={entry.id}\n                title={`${entry.value} ${\n                  entry?.extraInfo ? `(${entry?.extraInfo})` : ''\n                }`}\n                style={{\n                  display: 'flex',\n                  whiteSpace: 'nowrap',\n                  marginRight: '10px',\n                  marginTop: '5px',\n                  textOverflow: 'ellipsis'\n                }}\n              >\n                <Checkbox\n                  id={entry.value}\n                  onChange={(_e) =>\n                    legendToggled(\n                      entry.id,\n                      !entry.checked,\n                      Object.values(entitiesMap?.[entity]?.legendsMap),\n                      setLegendModel,\n                      updateMarkers,\n                      map\n                    )\n                  }\n                  customStyle='border-radius:2px;'\n                  disabled={!!entry.disabled}\n                  checked={!!entry.checked}\n                  labelComponent={\n                    <>\n                      <CheckBoxLabel\n                        style={{\n                          fontSize: '13px',\n                          marginBottom: '0.5em',\n                          color: '#000'\n                        }}\n                        htmlFor={entry.value}\n                      >\n                        {`${entry.value}\n                      ${entry?.extraInfo ? `(${entry?.extraInfo})` : ''}`}\n                      </CheckBoxLabel>\n                    </>\n                  }\n                  checkboxSize='md'\n                  color={heatMap ? '#979797' : entry?.color}\n                />\n              </div>\n            )\n          ) : null\n        })}\n      </div>\n      <div onClick={() => scroll(20)}>\n        <FontIcon variant='angle-right-thin' size='xs' color='black' />\n      </div>\n    </LegendsWrapper>\n  )\n}\n\nconst SequenceWrapperBox = ({ markers }: ISequenceWrapperBox) => {\n  const seqRef = useRef(null)\n  const [sequenceRef, setSequenceRef] = useState(seqRef)\n  React.useEffect(() => {\n    setSequenceRef(seqRef)\n  }, [seqRef])\n  //left button\n  const LeftButton = () => (\n    <div onClick={() => scroll(-20)} style={{ alignSelf: 'center' }}>\n      <FontIcon variant='angle-left-thin' size='xs' color='black' />\n    </div>\n  )\n  //right button\n  const RightButton = () => (\n    <div onClick={() => scroll(20)} style={{ alignSelf: 'center' }}>\n      <FontIcon variant='angle-right-thin' size='xs' color='black' />\n    </div>\n  )\n  // callback\n  const scroll = (scrollOffset: number) => {\n    if (sequenceRef && sequenceRef.current !== null) {\n      const newObj: any = { ...sequenceRef }\n      newObj.current.scrollLeft = newObj.current.scrollLeft + scrollOffset\n      console.log(newObj.current.scrollLeft, 'newObj.current.scrollLeft')\n      setSequenceRef(newObj)\n    }\n  }\n\n  const handleCallBack = (id: string) => {\n    console.log('handleCallBack', id)\n    // document.getElementsByClassName(id)?.click();\n  }\n\n  return (\n    <SequenceWrapper>\n      <LeftButton />\n      <TripIconWrapper ref={sequenceRef}>\n        {markers.map((marker, index) => {\n          return (\n            <SequenceIcon onClick={() => handleCallBack(marker.id)}>\n              <ShowMarkerIcon\n                icon={marker.icon}\n                lastIndex={index === markers.length - 1}\n                sequenceBox={true}\n                sequence={marker.sequence}\n              ></ShowMarkerIcon>\n            </SequenceIcon>\n          )\n        })}\n      </TripIconWrapper>\n\n      <RightButton />\n    </SequenceWrapper>\n  )\n}\n\n// function called whenever a legend is toggled\nconst legendToggled = (\n  checkboxId: any,\n  checked: boolean,\n  checkOptions: any,\n  setLegendModel: any,\n  updateMarkers: any,\n  _map: any\n) => {\n  const newModelArray = checkOptions.map((opn: any) => {\n    const newOpn = opn\n    newOpn.checked = opn.id === checkboxId ? checked : newOpn.checked\n    return newOpn\n  })\n  // dewanshs code\n  // const newCheckOptions: any = {}\n  // checkOptions.forEach((item: any) => {\n  //   if (!item.disabled && checkboxId === item.id) {\n  //     newCheckOptions[item.id] = { ...item, checked: checked }\n  //   } else {\n  //     newCheckOptions[item.id] = item\n  //   }\n  // })\n  const legendObj = convertArrayToObject(newModelArray, 'id')\n  setLegendModel(legendObj)\n  // send updated legend list in array\n\n  updateMarkers(newModelArray)\n}\n// The layer with actual markers and marker clustering\nconst LeafletMarkerLayer = (props: IMarkerLayer) => {\n  const {\n    marker,\n    iconsRef,\n    popupRef,\n    updateMarkers,\n    heatMap,\n    showModal,\n    geocoding,\n    focusSearchPlace,\n    ignoreMarkerPermission,\n    showLegendWrapper = true,\n    showSequenceWrapperBox = false\n  } = props\n  // the actual model of legends in this marker layer, when user toggled on legend on map this legend model gets changed\n  const [legendModel, setLegendModel] = useState(props.legendModel)\n  const entities = marker?.entities\n  const entitiesMap = marker?.entitiesMap\n  const { map } = useLeaflet()\n  console.log('LeafletMarkerLayer.tsx ===>', props)\n  React.useEffect(() => {\n    // on toggle of a legend, update the marker layers\n    // todo: proper optimized support of multiple entities in 1 map\n    // todo: memoization of markers/layers which have not changed\n    setLegendModel(props.legendModel) // whenever it gets trigger from settings, this value will force to update legend on map as well\n  }, [props.legendModel])\n\n  // if heatmap or marker map show legendWrapperbox (settingbox modal should be closed)\n  // cluster we are showing only in marker map\n  // for heatmap we have seperate heatlayer\n  return (\n    <React.Fragment>\n      {marker?.permission || heatMap\n        ? marker?.entities?.map((entity: string, i: number) => {\n            console.log('LeafletMarkerLayer.tsx', entity, entitiesMap)\n            return (\n              entitiesMap?.[entity].permission && (\n                <React.Fragment key={i}>\n                  {/* The marker group which has clustering on. if heatmap enable then dont show cluster */}\n                  {console.log(\n                    'LeafletMarkerLayer.tsx',\n                    entity,\n                    entitiesMap,\n                    heatMap\n                  )}\n                  {!heatMap && (\n                    <MarkerComponent\n                      entities={entities}\n                      entitiesMap={entitiesMap}\n                      iconsRef={iconsRef}\n                      popupRef={popupRef}\n                      legendModel={legendModel}\n                      google={google}\n                      focusMarkerId={props.focusMarkerId}\n                      geocoding={geocoding}\n                      focusSearchPlace={focusSearchPlace}\n                      ignoreMarkerPermission={ignoreMarkerPermission}\n                    />\n                  )}\n\n                  {/* Legends box which controls which markers to show, show only if setting is not open */}\n                  {!showModal && showLegendWrapper && (\n                    <LegendWrapperBox\n                      map={map}\n                      entitiesMap={entitiesMap}\n                      entity={entity}\n                      setLegendModel={setLegendModel}\n                      heatMap={heatMap}\n                      updateMarkers={updateMarkers}\n                      iconsRef={iconsRef}\n                    />\n                  )}\n\n                  {!showModal && showSequenceWrapperBox && (\n                    <SequenceWrapperBox\n                      markers={entitiesMap?.[entity]?.markers?.list}\n                    />\n                  )}\n                </React.Fragment>\n              )\n            )\n          })\n        : undefined}\n    </React.Fragment>\n  )\n}\n\nexport default LeafletMarkerLayer\n"]},"metadata":{},"sourceType":"module"}