{"ast":null,"code":"import _defineProperty from \"/Users/farhanansari/Code/ui-library/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nvar _parameters;\n\n/* eslint-disable */\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource; // @ts-ignore\n\n\nvar addSourceDecorator = require(\"@storybook/source-loader/preview\").addSource; // @ts-ignore\n\n\nvar __SOURCE_PREFIX__ = \"/Users/farhanansari/Code/ui-library/src/components/molecules/IconDropdown\"; // @ts-ignore\n\nvar __STORY__ = \"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/farhanansari/Code/ui-library/src/components/molecules/IconDropdown\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"\\\\n\\\\n// @ts-nocheck\\\\n// @ts-ignore\\\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\\\n// @ts-ignore\\\\nvar addSourceDecorator = require(\\\\\\\"@storybook/source-loader/preview\\\\\\\").addSource;\\\\n// @ts-ignore\\\\nvar __SOURCE_PREFIX__ = \\\\\\\"/Users/farhanansari/Code/ui-library/src/components/molecules/IconDropdown\\\\\\\";\\\\n// @ts-ignore\\\\nvar __STORY__ = \\\\\\\"import { action } from '@storybook/addon-actions'\\\\\\\\nimport {\\\\\\\\n  array,\\\\\\\\n  boolean,\\\\\\\\n  number,\\\\\\\\n  object,\\\\\\\\n  text,\\\\\\\\n  withKnobs\\\\\\\\n} from '@storybook/addon-knobs'\\\\\\\\nimport React from 'react'\\\\\\\\nimport IconDropdown from '.'\\\\\\\\nimport { path } from '..'\\\\\\\\nimport { Box } from '../../..'\\\\\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\\\\\nimport Button, { tIntent } from '../../atoms/Button'\\\\\\\\nimport CardComponent from '../../atoms/Card'\\\\\\\\nimport { tPlacement } from '../../../utilities/types'\\\\\\\\nimport {\\\\\\\\n  IUniversalDropdownChildren,\\\\\\\\n  tSelectVariant\\\\\\\\n} from '../DropDown/interface'\\\\\\\\nimport TextInput from '../TextInput'\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/IconDropdown`,\\\\\\\\n  decorators: [withKnobs],\\\\\\\\n  component: IconDropdown\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst ListViewOption = [\\\\\\\\n  {\\\\\\\\n    value: 'available',\\\\\\\\n    label: 'Mark As Available',\\\\\\\\n    color: 'blue',\\\\\\\\n    tooltipText: 'Mark As Available',\\\\\\\\n    isDisabled: true\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    value: 'unavailable',\\\\\\\\n    label: 'Mark As Unavailable',\\\\\\\\n    color: 'red',\\\\\\\\n    tooltipText: 'Mark As Unavailable'\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    value: 'active',\\\\\\\\n    label: 'Mark As Active',\\\\\\\\n    color: 'purple',\\\\\\\\n    tooltipText: 'Mark As Active'\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    value: 'inactive',\\\\\\\\n    label: 'Mark As Inactive',\\\\\\\\n    color: 'green',\\\\\\\\n    tooltipText: 'Mark As Inactive'\\\\\\\\n  }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst MultiLevelListViewOption = [\\\\\\\\n  {\\\\\\\\n    id: 'available',\\\\\\\\n    value: 'available',\\\\\\\\n    label: 'Mark As Available',\\\\\\\\n    color: 'blue',\\\\\\\\n    tooltipText: 'Mark As Available',\\\\\\\\n    options: [\\\\\\\\n      {\\\\\\\\n        id: 'available',\\\\\\\\n        value: 'available',\\\\\\\\n        label: 'Mark As Child Available',\\\\\\\\n        color: 'blue',\\\\\\\\n        tooltipText: 'Mark As Child Available'\\\\\\\\n      },\\\\\\\\n      {\\\\\\\\n        id: 'unavailable',\\\\\\\\n        value: 'unavailable',\\\\\\\\n        label: 'Mark As Child Unavailable',\\\\\\\\n        color: 'red',\\\\\\\\n        tooltipText: 'Mark As Child Unavailable'\\\\\\\\n      },\\\\\\\\n      {\\\\\\\\n        id: 'active',\\\\\\\\n        value: 'active',\\\\\\\\n        label: 'Mark As Child Active',\\\\\\\\n        color: 'purple',\\\\\\\\n        tooltipText: 'Mark As Child Active'\\\\\\\\n      },\\\\\\\\n      {\\\\\\\\n        id: 'inactive',\\\\\\\\n        value: 'inactive',\\\\\\\\n        label: 'Mark As Child Inactive',\\\\\\\\n        color: 'green',\\\\\\\\n        tooltipText: 'Mark As Child Inactive',\\\\\\\\n        options: [\\\\\\\\n          {\\\\\\\\n            id: 'available',\\\\\\\\n            value: 'available',\\\\\\\\n            label: 'Mark As Grand Child Available',\\\\\\\\n            color: 'blue',\\\\\\\\n            tooltipText: 'Mark As Grand Child Available'\\\\\\\\n          },\\\\\\\\n          {\\\\\\\\n            id: 'unavailable',\\\\\\\\n            value: 'unavailable',\\\\\\\\n            label: 'Mark As Grand Child Unavailable',\\\\\\\\n            color: 'red',\\\\\\\\n            tooltipText: 'Mark As Grand Child Unavailable'\\\\\\\\n          }\\\\\\\\n        ]\\\\\\\\n      }\\\\\\\\n    ]\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    id: 'unavailable',\\\\\\\\n    value: 'unavailable',\\\\\\\\n    label: 'Mark As Unavailable',\\\\\\\\n    color: 'red',\\\\\\\\n    tooltipText: 'Mark As Unavailable'\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    id: 'active',\\\\\\\\n    value: 'active',\\\\\\\\n    label: 'Mark As Active',\\\\\\\\n    color: 'purple',\\\\\\\\n    tooltipText: 'Mark As Active'\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    id: 'inactive',\\\\\\\\n    value: 'inactive',\\\\\\\\n    label: 'Mark As Inactive',\\\\\\\\n    color: 'green',\\\\\\\\n    tooltipText: 'Mark As Inactive'\\\\\\\\n  }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst paginationOptions = [\\\\\\\\n  { value: '25', label: '25 per page', title: '25 per page' },\\\\\\\\n  { value: '50', label: '50 per page', title: '50 per page' },\\\\\\\\n  { value: '100', label: '100 per page', title: '100 per page' },\\\\\\\\n  { value: '200', label: '200 per page', title: '200 per page' }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst columnOption = [\\\\\\\\n  { value: 'ascending', label: 'Sort Ascending', iconVariant: 'hide-menu-box' },\\\\\\\\n  {\\\\\\\\n    value: 'descending',\\\\\\\\n    label: 'Sort Descending',\\\\\\\\n    iconVariant: 'hub-location'\\\\\\\\n  },\\\\\\\\n  { value: 'hideColumn', label: 'Hide Column', iconVariant: 'close' },\\\\\\\\n  { value: 'pinLeft', label: 'Pin Left', iconVariant: 'angle-left' },\\\\\\\\n  { value: 'pinright', label: 'Pin Right', iconVariant: 'angle-right-thin' }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst options = [\\\\\\\\n  {\\\\\\\\n    value: 'emailVerificationPending',\\\\\\\\n    label: 'Email Verification Pending Shipper'\\\\\\\\n  },\\\\\\\\n  { value: 'allShippers', label: 'All Shippers' },\\\\\\\\n  { value: 'approvalPendingShippers', label: 'Approval Pending Shippers' }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst datePickerOptions = [\\\\\\\\n  { value: 'January', label: 'January' },\\\\\\\\n  { value: 'February', label: 'February' },\\\\\\\\n  { value: 'March', label: 'March' },\\\\\\\\n  { value: 'April', label: 'April' },\\\\\\\\n  { value: 'May', label: 'May' },\\\\\\\\n  { value: 'June', label: 'June' },\\\\\\\\n  { value: 'July', label: 'July' },\\\\\\\\n  { value: 'August', label: 'August' },\\\\\\\\n  { value: 'September', label: 'September' },\\\\\\\\n  { value: 'October', label: 'October' },\\\\\\\\n  { value: 'November', label: 'November' },\\\\\\\\n  { value: 'December', label: 'December' }\\\\\\\\n]\\\\\\\\n\\\\\\\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\\\\\\\nexport const ButtonDropdown = () => (\\\\\\\\n  <ThemeWrapper>\\\\\\\\n    <Box p='2em' bgColor='grey.50'>\\\\\\\\n      <IconDropdown\\\\\\\\n        variant={text('varaint', 'button-dropdown') as tSelectVariant}\\\\\\\\n        optionList={object('optionList', ListViewOption)}\\\\\\\\n        width={text('width', '120px')}\\\\\\\\n        menuIsOpen={boolean('menuIsOpen', false)}\\\\\\\\n        iconButtonDetails={array('iconList', [\\\\\\\\n          'hide-menu-box',\\\\\\\\n          'More',\\\\\\\\n          'angle-down'\\\\\\\\n        ])}\\\\\\\\n        primary={boolean('primary', false)}\\\\\\\\n        intent={text('intent', 'page') as tIntent}\\\\\\\\n        onChange={action('Value Changed')}\\\\\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n        disabled={boolean('disabled', false)}\\\\\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\\\\\n        tooltipProps={{\\\\\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </Box>\\\\\\\\n  </ThemeWrapper>\\\\\\\\n)\\\\\\\\n\\\\\\\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\\\\\\\nexport const TextDropdown = () => (\\\\\\\\n  <ThemeWrapper>\\\\\\\\n    <Box p='2em' bgColor='grey.50'>\\\\\\\\n      <IconDropdown\\\\\\\\n        variant={text('varaint', 'text-dropdown') as tSelectVariant}\\\\\\\\n        optionList={object('optionList', ListViewOption)}\\\\\\\\n        width={text('width', '120px')}\\\\\\\\n        menuIsOpen={boolean('menuIsOpen', false)}\\\\\\\\n        iconButtonDetails={array('iconList', [\\\\\\\\n          'hide-menu-box',\\\\\\\\n          'More',\\\\\\\\n          'angle-down'\\\\\\\\n        ])}\\\\\\\\n        primary={boolean('primary', false)}\\\\\\\\n        intent={text('intent', 'page') as tIntent}\\\\\\\\n        onChange={action('Value Changed')}\\\\\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n        disabled={boolean('disabled', false)}\\\\\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\\\\\n        tooltipProps={{\\\\\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </Box>\\\\\\\\n  </ThemeWrapper>\\\\\\\\n)\\\\\\\\n\\\\\\\\nexport const MultiLevelBreadCrumb = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='2em' bgColor='grey.50'>\\\\\\\\n        <IconDropdown\\\\\\\\n          variant={text('variant', 'multilevel-breadcrumb') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', MultiLevelListViewOption)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          value={text('value', 'strawberry')}\\\\\\\\n          width={text('width', '260px')}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n  }\\\\\\\\n\\\\\\\\nexport const MultiLevelButtonDropdown = () => (\\\\\\\\n  <ThemeWrapper>\\\\\\\\n    <Box p='2em' bgColor='grey.50'>\\\\\\\\n      <IconDropdown\\\\\\\\n        variant={\\\\\\\\n          text('varaint', 'multilevel-button-dropdown') as tSelectVariant\\\\\\\\n        }\\\\\\\\n        optionList={object('optionList', MultiLevelListViewOption)}\\\\\\\\n        width={text('width', '120px')}\\\\\\\\n        menuIsOpen\\\\\\\\n        iconButtonDetails={array('iconList', [\\\\\\\\n          'hide-menu-box',\\\\\\\\n          'More',\\\\\\\\n          'angle-down'\\\\\\\\n        ])}\\\\\\\\n        defaultOpen='right'\\\\\\\\n        primary={boolean('primary', false)}\\\\\\\\n        intent={text('intent', 'page') as tIntent}\\\\\\\\n        handleClick={(id: any) => console.log('clicked from storybook', id)}\\\\\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n        disabled={boolean('disabled', false)}\\\\\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\\\\\n        tooltipProps={{\\\\\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </Box>\\\\\\\\n  </ThemeWrapper>\\\\\\\\n)\\\\\\\\n\\\\\\\\nexport const PaginationDropdown = () => (\\\\\\\\n  <ThemeWrapper>\\\\\\\\n    <CardComponent style={{ height: '300px' }}>\\\\\\\\n      <IconDropdown\\\\\\\\n        variant={text('variant', 'pagination-size') as tSelectVariant}\\\\\\\\n        optionList={object('optionList', paginationOptions)}\\\\\\\\n        onChange={action('Value selected')}\\\\\\\\n        value={text('value', '50')}\\\\\\\\n        width={text('width', '120px')}\\\\\\\\n      />\\\\\\\\n    </CardComponent>\\\\\\\\n  </ThemeWrapper>\\\\\\\\n)\\\\\\\\n\\\\\\\\nexport const columnOptionComponent = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='2em' bgColor='grey.50'>\\\\\\\\n        <div style={{ width: '200px', margin: 'auto' }}>\\\\\\\\n          <IconDropdown\\\\\\\\n            variant={text('variant', 'column-filter') as tSelectVariant}\\\\\\\\n            optionList={object('optionList', columnOption)}\\\\\\\\n            onChange={action('Value selected')}\\\\\\\\n            width={text('width', '10px')}\\\\\\\\n            isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n          />\\\\\\\\n        </div>\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const BreadCrumbComponent = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='2em' bgColor='grey.50'>\\\\\\\\n        <IconDropdown\\\\\\\\n          variant={text('variant', 'bread-crumb') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', options)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          value={text('value', 'strawberry')}\\\\\\\\n          width={text('width', '260px')}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const DatePickerDropDown = () => (\\\\\\\\n  <ThemeWrapper>\\\\\\\\n    <CardComponent style={{ height: '200px' }}>\\\\\\\\n      <IconDropdown\\\\\\\\n        variant={text('variant', 'date-picker') as tSelectVariant}\\\\\\\\n        optionList={object('optionList', datePickerOptions)}\\\\\\\\n        onChange={action('Value selected')}\\\\\\\\n        value={text('value', '50')}\\\\\\\\n        width={text('width', '80px')}\\\\\\\\n        showDownArrow={boolean('Show Down Arrow', true)}\\\\\\\\n        isMultiRegionStyled={boolean('Is Multi Region Styled', false)}\\\\\\\\n      />\\\\\\\\n    </CardComponent>\\\\\\\\n  </ThemeWrapper>\\\\\\\\n)\\\\\\\\nconst arrayMap = [\\\\\\\\n  { variant: 'column-filter', name: 'column-filter0' },\\\\\\\\n  { variant: 'column-filter', name: 'column-filter1' },\\\\\\\\n  { variant: 'column-filter', name: 'column-filter2' }\\\\\\\\n]\\\\\\\\n\\\\\\\\nexport const columnOptionList = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='2em' bgColor='grey.50'>\\\\\\\\n        <div style={{ width: '200px', margin: 'auto' }}>\\\\\\\\n          {arrayMap.map((obj: any, index: number) => {\\\\\\\\n            return (\\\\\\\\n              <IconDropdown\\\\\\\\n                variant={text('variant', obj?.variant) as tSelectVariant}\\\\\\\\n                optionList={object('optionList', columnOption)}\\\\\\\\n                onChange={action('Value selected')}\\\\\\\\n                width={text('width', '10px')}\\\\\\\\n                isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n                key={index}\\\\\\\\n              />\\\\\\\\n            )\\\\\\\\n          })}\\\\\\\\n        </div>\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const DropdownUniversal = () => {\\\\\\\\n  // reference to style\\\\\\\\n  // const theme = useContext(ThemeContext)\\\\\\\\n  // const borderBottom = `1px solid ${theme?.colors?.grey['A800']}`\\\\\\\\n  // const customStyle = {\\\\\\\\n  //   control: (provided: any) => ({\\\\\\\\n  //     ...provided,\\\\\\\\n  //     borderStyle: 'none',\\\\\\\\n  //     borderBottom,\\\\\\\\n  //     borderRadius: '0px',\\\\\\\\n  //     boxShadow: 'none',\\\\\\\\n  //     borderColor: theme?.colors?.grey?.A800,\\\\\\\\n  //     '&:focus': {\\\\\\\\n  //       borderStyle: 'none',\\\\\\\\n  //       borderBottom,\\\\\\\\n  //       boxShadow: 'none',\\\\\\\\n  //       borderColor: theme?.colors?.grey?.A800\\\\\\\\n  //     },\\\\\\\\n  //     '&:hover': {\\\\\\\\n  //       borderStyle: 'none',\\\\\\\\n  //       borderBottom,\\\\\\\\n  //       boxShadow: 'none',\\\\\\\\n  //       borderColor: theme?.colors?.grey?.A800\\\\\\\\n  //     }\\\\\\\\n  //   }),\\\\\\\\n  //   option: (provided: any, state: any) => ({\\\\\\\\n  //     ...provided,\\\\\\\\n  //     backgroundColor: state?.isSelected\\\\\\\\n  //       ? theme?.colors?.primary?.main\\\\\\\\n  //       : theme?.colors?.white,\\\\\\\\n  //     '&:hover': {\\\\\\\\n  //       backgroundColor: state?.isSelected\\\\\\\\n  //         ? theme?.colors?.primary?.main\\\\\\\\n  //         : theme?.colors?.grey['50']\\\\\\\\n  //     }\\\\\\\\n  //   }),\\\\\\\\n\\\\\\\\n  //   menu: (provided: any, state: any) => ({\\\\\\\\n  //     ...provided,\\\\\\\\n  //     backgroundColor: state?.isSelected\\\\\\\\n  //       ? theme.colors.primary.main\\\\\\\\n  //       : theme?.colors?.white,\\\\\\\\n  //     borderRadius: '2px',\\\\\\\\n  //     '&:hover': {\\\\\\\\n  //       backgroundColor: state?.isSelected\\\\\\\\n  //         ? theme?.colors?.primary?.main\\\\\\\\n  //         : theme?.colors?.white\\\\\\\\n  //     },\\\\\\\\n  //     marginTop: '5px',\\\\\\\\n  //     marginLeft: '16px',\\\\\\\\n  //     width: '90%'\\\\\\\\n  //   }),\\\\\\\\n  //   menuList: (provided: any) => ({\\\\\\\\n  //     ...provided,\\\\\\\\n  //     marginTop: '0px'\\\\\\\\n  //   }),\\\\\\\\n  //   valueContainer: (provided: any) => ({\\\\\\\\n  //     ...provided,\\\\\\\\n  //     padding: '0px'\\\\\\\\n  //   })\\\\\\\\n  // }\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='2em' bgColor='grey.50'>\\\\\\\\n        <IconDropdown\\\\\\\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', ListViewOption)}\\\\\\\\n          width={text('width', '120px')}\\\\\\\\n          menuIsOpen={boolean('menuIsOpen', false)}\\\\\\\\n          primary={boolean('primary', false)}\\\\\\\\n          intent={text('intent', 'page') as tIntent}\\\\\\\\n          onChange={action('Value Changed')}\\\\\\\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n          value='available'\\\\\\\\n          optionComponent={({ selectedOption }: any) => {\\\\\\\\n            return (\\\\\\\\n              <div>\\\\\\\\n                <div>{selectedOption?.color}</div>\\\\\\\\n                <div>{selectedOption?.label}</div>\\\\\\\\n              </div>\\\\\\\\n            )\\\\\\\\n          }}\\\\\\\\n          // customStyle={customStyle}\\\\\\\\n        >\\\\\\\\n          {({\\\\\\\\n            selectedOption,\\\\\\\\n            menuIsOpen,\\\\\\\\n            setMenuIsOpen\\\\\\\\n          }: IUniversalDropdownChildren) => {\\\\\\\\n            return (\\\\\\\\n              <Button\\\\\\\\n                onClick={() => {\\\\\\\\n                  setMenuIsOpen(!menuIsOpen)\\\\\\\\n                  action('Universal open/closed')(menuIsOpen)\\\\\\\\n                }}\\\\\\\\n                color={text('color', 'white')}\\\\\\\\n                bgColor={text('bgColor', 'black')}\\\\\\\\n                fullWidth={boolean('fullWidth', false)}\\\\\\\\n              >\\\\\\\\n                {selectedOption?.label}\\\\\\\\n              </Button>\\\\\\\\n            )\\\\\\\\n          }}\\\\\\\\n        </IconDropdown>\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const TextFieldDropdown = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='2em' bgColor='grey.50'>\\\\\\\\n        <IconDropdown\\\\\\\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', ListViewOption)}\\\\\\\\n          width={text('width', '120px')}\\\\\\\\n          menuIsOpen={boolean('menuIsOpen', false)}\\\\\\\\n          primary={boolean('primary', false)}\\\\\\\\n          intent={text('intent', 'page') as tIntent}\\\\\\\\n          onChange={action('Value Changed')}\\\\\\\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n          value='available'\\\\\\\\n          optionComponent={({ selectedOption }: any) => {\\\\\\\\n            return (\\\\\\\\n              <div>\\\\\\\\n                <div>{selectedOption?.color}</div>\\\\\\\\n                <div>{selectedOption?.label}</div>\\\\\\\\n              </div>\\\\\\\\n            )\\\\\\\\n          }}\\\\\\\\n          // customStyle={customStyle}\\\\\\\\n        >\\\\\\\\n          {({\\\\\\\\n            selectedOption,\\\\\\\\n            menuIsOpen,\\\\\\\\n            setMenuIsOpen\\\\\\\\n          }: IUniversalDropdownChildren) => {\\\\\\\\n            return (\\\\\\\\n              <TextInput\\\\\\\\n                id='someId'\\\\\\\\n                name='someName'\\\\\\\\n                className='someClassName'\\\\\\\\n                label={text('label', 'Username')}\\\\\\\\n                labelColor={text('labelColor', 'text.inputLabel.default')}\\\\\\\\n                placeholder={text('placeholder', 'Enter text here...')}\\\\\\\\n                maxLength={number('maxLength', 10)}\\\\\\\\n                error={boolean('error', false)}\\\\\\\\n                errorMessage={text('errorMessage', '')}\\\\\\\\n                required={boolean('required', false)}\\\\\\\\n                fullWidth={boolean('fullWidth', false)}\\\\\\\\n                onChange={action('Triggered: onChange')}\\\\\\\\n                onClick={() => {\\\\\\\\n                  setMenuIsOpen(!menuIsOpen)\\\\\\\\n                  action('universal open/closed')(menuIsOpen)\\\\\\\\n                }}\\\\\\\\n                value={selectedOption?.value}\\\\\\\\n              />\\\\\\\\n            )\\\\\\\\n          }}\\\\\\\\n        </IconDropdown>\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\";\\\\n// @ts-ignore\\\\nvar __ADDS_MAP__ = {};\\\\n// @ts-ignore\\\\nvar __MAIN_FILE_LOCATION__ = \\\\\\\"/IconDropdown.stories.tsx\\\\\\\";\\\\n// @ts-ignore\\\\nvar __MODULE_DEPENDENCIES__ = [];\\\\n// @ts-ignore\\\\nvar __LOCAL_DEPENDENCIES__ = {};\\\\n// @ts-ignore\\\\nvar __IDS_TO_FRAMEWORKS__ = {};\\\\n        \\\\nimport { action } from '@storybook/addon-actions'\\\\nimport {\\\\n  array,\\\\n  boolean,\\\\n  number,\\\\n  object,\\\\n  text,\\\\n  withKnobs\\\\n} from '@storybook/addon-knobs'\\\\nimport React from 'react'\\\\nimport IconDropdown from '.'\\\\nimport { path } from '..'\\\\nimport { Box } from '../../..'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport Button, { tIntent } from '../../atoms/Button'\\\\nimport CardComponent from '../../atoms/Card'\\\\nimport { tPlacement } from '../../../utilities/types'\\\\nimport {\\\\n  IUniversalDropdownChildren,\\\\n  tSelectVariant\\\\n} from '../DropDown/interface'\\\\nimport TextInput from '../TextInput'\\\\n\\\\nexport default {parameters: {\\\\\\\"storySource\\\\\\\":{\\\\\\\"source\\\\\\\":\\\\\\\"import { action } from '@storybook/addon-actions'\\\\\\\\nimport {\\\\\\\\n  array,\\\\\\\\n  boolean,\\\\\\\\n  number,\\\\\\\\n  object,\\\\\\\\n  text,\\\\\\\\n  withKnobs\\\\\\\\n} from '@storybook/addon-knobs'\\\\\\\\nimport React from 'react'\\\\\\\\nimport IconDropdown from '.'\\\\\\\\nimport { path } from '..'\\\\\\\\nimport { Box } from '../../..'\\\\\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\\\\\nimport Button, { tIntent } from '../../atoms/Button'\\\\\\\\nimport CardComponent from '../../atoms/Card'\\\\\\\\nimport { tPlacement } from '../../../utilities/types'\\\\\\\\nimport {\\\\\\\\n  IUniversalDropdownChildren,\\\\\\\\n  tSelectVariant\\\\\\\\n} from '../DropDown/interface'\\\\\\\\nimport TextInput from '../TextInput'\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/IconDropdown`,\\\\\\\\n  decorators: [withKnobs],\\\\\\\\n  component: IconDropdown\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst ListViewOption = [\\\\\\\\n  {\\\\\\\\n    value: 'available',\\\\\\\\n    label: 'Mark As Available',\\\\\\\\n    color: 'blue',\\\\\\\\n    tooltipText: 'Mark As Available',\\\\\\\\n    isDisabled: true\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    value: 'unavailable',\\\\\\\\n    label: 'Mark As Unavailable',\\\\\\\\n    color: 'red',\\\\\\\\n    tooltipText: 'Mark As Unavailable'\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    value: 'active',\\\\\\\\n    label: 'Mark As Active',\\\\\\\\n    color: 'purple',\\\\\\\\n    tooltipText: 'Mark As Active'\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    value: 'inactive',\\\\\\\\n    label: 'Mark As Inactive',\\\\\\\\n    color: 'green',\\\\\\\\n    tooltipText: 'Mark As Inactive'\\\\\\\\n  }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst MultiLevelListViewOption = [\\\\\\\\n  {\\\\\\\\n    id: 'available',\\\\\\\\n    value: 'available',\\\\\\\\n    label: 'Mark As Available',\\\\\\\\n    color: 'blue',\\\\\\\\n    tooltipText: 'Mark As Available',\\\\\\\\n    options: [\\\\\\\\n      {\\\\\\\\n        id: 'available',\\\\\\\\n        value: 'available',\\\\\\\\n        label: 'Mark As Child Available',\\\\\\\\n        color: 'blue',\\\\\\\\n        tooltipText: 'Mark As Child Available'\\\\\\\\n      },\\\\\\\\n      {\\\\\\\\n        id: 'unavailable',\\\\\\\\n        value: 'unavailable',\\\\\\\\n        label: 'Mark As Child Unavailable',\\\\\\\\n        color: 'red',\\\\\\\\n        tooltipText: 'Mark As Child Unavailable'\\\\\\\\n      },\\\\\\\\n      {\\\\\\\\n        id: 'active',\\\\\\\\n        value: 'active',\\\\\\\\n        label: 'Mark As Child Active',\\\\\\\\n        color: 'purple',\\\\\\\\n        tooltipText: 'Mark As Child Active'\\\\\\\\n      },\\\\\\\\n      {\\\\\\\\n        id: 'inactive',\\\\\\\\n        value: 'inactive',\\\\\\\\n        label: 'Mark As Child Inactive',\\\\\\\\n        color: 'green',\\\\\\\\n        tooltipText: 'Mark As Child Inactive',\\\\\\\\n        options: [\\\\\\\\n          {\\\\\\\\n            id: 'available',\\\\\\\\n            value: 'available',\\\\\\\\n            label: 'Mark As Grand Child Available',\\\\\\\\n            color: 'blue',\\\\\\\\n            tooltipText: 'Mark As Grand Child Available'\\\\\\\\n          },\\\\\\\\n          {\\\\\\\\n            id: 'unavailable',\\\\\\\\n            value: 'unavailable',\\\\\\\\n            label: 'Mark As Grand Child Unavailable',\\\\\\\\n            color: 'red',\\\\\\\\n            tooltipText: 'Mark As Grand Child Unavailable'\\\\\\\\n          }\\\\\\\\n        ]\\\\\\\\n      }\\\\\\\\n    ]\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    id: 'unavailable',\\\\\\\\n    value: 'unavailable',\\\\\\\\n    label: 'Mark As Unavailable',\\\\\\\\n    color: 'red',\\\\\\\\n    tooltipText: 'Mark As Unavailable'\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    id: 'active',\\\\\\\\n    value: 'active',\\\\\\\\n    label: 'Mark As Active',\\\\\\\\n    color: 'purple',\\\\\\\\n    tooltipText: 'Mark As Active'\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    id: 'inactive',\\\\\\\\n    value: 'inactive',\\\\\\\\n    label: 'Mark As Inactive',\\\\\\\\n    color: 'green',\\\\\\\\n    tooltipText: 'Mark As Inactive'\\\\\\\\n  }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst paginationOptions = [\\\\\\\\n  { value: '25', label: '25 per page', title: '25 per page' },\\\\\\\\n  { value: '50', label: '50 per page', title: '50 per page' },\\\\\\\\n  { value: '100', label: '100 per page', title: '100 per page' },\\\\\\\\n  { value: '200', label: '200 per page', title: '200 per page' }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst columnOption = [\\\\\\\\n  { value: 'ascending', label: 'Sort Ascending', iconVariant: 'hide-menu-box' },\\\\\\\\n  {\\\\\\\\n    value: 'descending',\\\\\\\\n    label: 'Sort Descending',\\\\\\\\n    iconVariant: 'hub-location'\\\\\\\\n  },\\\\\\\\n  { value: 'hideColumn', label: 'Hide Column', iconVariant: 'close' },\\\\\\\\n  { value: 'pinLeft', label: 'Pin Left', iconVariant: 'angle-left' },\\\\\\\\n  { value: 'pinright', label: 'Pin Right', iconVariant: 'angle-right-thin' }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst options = [\\\\\\\\n  {\\\\\\\\n    value: 'emailVerificationPending',\\\\\\\\n    label: 'Email Verification Pending Shipper'\\\\\\\\n  },\\\\\\\\n  { value: 'allShippers', label: 'All Shippers' },\\\\\\\\n  { value: 'approvalPendingShippers', label: 'Approval Pending Shippers' }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst datePickerOptions = [\\\\\\\\n  { value: 'January', label: 'January' },\\\\\\\\n  { value: 'February', label: 'February' },\\\\\\\\n  { value: 'March', label: 'March' },\\\\\\\\n  { value: 'April', label: 'April' },\\\\\\\\n  { value: 'May', label: 'May' },\\\\\\\\n  { value: 'June', label: 'June' },\\\\\\\\n  { value: 'July', label: 'July' },\\\\\\\\n  { value: 'August', label: 'August' },\\\\\\\\n  { value: 'September', label: 'September' },\\\\\\\\n  { value: 'October', label: 'October' },\\\\\\\\n  { value: 'November', label: 'November' },\\\\\\\\n  { value: 'December', label: 'December' }\\\\\\\\n]\\\\\\\\n\\\\\\\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\\\\\\\nexport const ButtonDropdown = () => (\\\\\\\\n  <ThemeWrapper>\\\\\\\\n    <Box p='2em' bgColor='grey.50'>\\\\\\\\n      <IconDropdown\\\\\\\\n        variant={text('varaint', 'button-dropdown') as tSelectVariant}\\\\\\\\n        optionList={object('optionList', ListViewOption)}\\\\\\\\n        width={text('width', '120px')}\\\\\\\\n        menuIsOpen={boolean('menuIsOpen', false)}\\\\\\\\n        iconButtonDetails={array('iconList', [\\\\\\\\n          'hide-menu-box',\\\\\\\\n          'More',\\\\\\\\n          'angle-down'\\\\\\\\n        ])}\\\\\\\\n        primary={boolean('primary', false)}\\\\\\\\n        intent={text('intent', 'page') as tIntent}\\\\\\\\n        onChange={action('Value Changed')}\\\\\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n        disabled={boolean('disabled', false)}\\\\\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\\\\\n        tooltipProps={{\\\\\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </Box>\\\\\\\\n  </ThemeWrapper>\\\\\\\\n)\\\\\\\\n\\\\\\\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\\\\\\\nexport const TextDropdown = () => (\\\\\\\\n  <ThemeWrapper>\\\\\\\\n    <Box p='2em' bgColor='grey.50'>\\\\\\\\n      <IconDropdown\\\\\\\\n        variant={text('varaint', 'text-dropdown') as tSelectVariant}\\\\\\\\n        optionList={object('optionList', ListViewOption)}\\\\\\\\n        width={text('width', '120px')}\\\\\\\\n        menuIsOpen={boolean('menuIsOpen', false)}\\\\\\\\n        iconButtonDetails={array('iconList', [\\\\\\\\n          'hide-menu-box',\\\\\\\\n          'More',\\\\\\\\n          'angle-down'\\\\\\\\n        ])}\\\\\\\\n        primary={boolean('primary', false)}\\\\\\\\n        intent={text('intent', 'page') as tIntent}\\\\\\\\n        onChange={action('Value Changed')}\\\\\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n        disabled={boolean('disabled', false)}\\\\\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\\\\\n        tooltipProps={{\\\\\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </Box>\\\\\\\\n  </ThemeWrapper>\\\\\\\\n)\\\\\\\\n\\\\\\\\nexport const MultiLevelBreadCrumb = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='2em' bgColor='grey.50'>\\\\\\\\n        <IconDropdown\\\\\\\\n          variant={text('variant', 'multilevel-breadcrumb') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', MultiLevelListViewOption)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          value={text('value', 'strawberry')}\\\\\\\\n          width={text('width', '260px')}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n  }\\\\\\\\n\\\\\\\\nexport const MultiLevelButtonDropdown = () => (\\\\\\\\n  <ThemeWrapper>\\\\\\\\n    <Box p='2em' bgColor='grey.50'>\\\\\\\\n      <IconDropdown\\\\\\\\n        variant={\\\\\\\\n          text('varaint', 'multilevel-button-dropdown') as tSelectVariant\\\\\\\\n        }\\\\\\\\n        optionList={object('optionList', MultiLevelListViewOption)}\\\\\\\\n        width={text('width', '120px')}\\\\\\\\n        menuIsOpen\\\\\\\\n        iconButtonDetails={array('iconList', [\\\\\\\\n          'hide-menu-box',\\\\\\\\n          'More',\\\\\\\\n          'angle-down'\\\\\\\\n        ])}\\\\\\\\n        defaultOpen='right'\\\\\\\\n        primary={boolean('primary', false)}\\\\\\\\n        intent={text('intent', 'page') as tIntent}\\\\\\\\n        handleClick={(id: any) => console.log('clicked from storybook', id)}\\\\\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n        disabled={boolean('disabled', false)}\\\\\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\\\\\n        tooltipProps={{\\\\\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </Box>\\\\\\\\n  </ThemeWrapper>\\\\\\\\n)\\\\\\\\n\\\\\\\\nexport const PaginationDropdown = () => (\\\\\\\\n  <ThemeWrapper>\\\\\\\\n    <CardComponent style={{ height: '300px' }}>\\\\\\\\n      <IconDropdown\\\\\\\\n        variant={text('variant', 'pagination-size') as tSelectVariant}\\\\\\\\n        optionList={object('optionList', paginationOptions)}\\\\\\\\n        onChange={action('Value selected')}\\\\\\\\n        value={text('value', '50')}\\\\\\\\n        width={text('width', '120px')}\\\\\\\\n      />\\\\\\\\n    </CardComponent>\\\\\\\\n  </ThemeWrapper>\\\\\\\\n)\\\\\\\\n\\\\\\\\nexport const columnOptionComponent = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='2em' bgColor='grey.50'>\\\\\\\\n        <div style={{ width: '200px', margin: 'auto' }}>\\\\\\\\n          <IconDropdown\\\\\\\\n            variant={text('variant', 'column-filter') as tSelectVariant}\\\\\\\\n            optionList={object('optionList', columnOption)}\\\\\\\\n            onChange={action('Value selected')}\\\\\\\\n            width={text('width', '10px')}\\\\\\\\n            isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n          />\\\\\\\\n        </div>\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const BreadCrumbComponent = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='2em' bgColor='grey.50'>\\\\\\\\n        <IconDropdown\\\\\\\\n          variant={text('variant', 'bread-crumb') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', options)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          value={text('value', 'strawberry')}\\\\\\\\n          width={text('width', '260px')}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const DatePickerDropDown = () => (\\\\\\\\n  <ThemeWrapper>\\\\\\\\n    <CardComponent style={{ height: '200px' }}>\\\\\\\\n      <IconDropdown\\\\\\\\n        variant={text('variant', 'date-picker') as tSelectVariant}\\\\\\\\n        optionList={object('optionList', datePickerOptions)}\\\\\\\\n        onChange={action('Value selected')}\\\\\\\\n        value={text('value', '50')}\\\\\\\\n        width={text('width', '80px')}\\\\\\\\n        showDownArrow={boolean('Show Down Arrow', true)}\\\\\\\\n        isMultiRegionStyled={boolean('Is Multi Region Styled', false)}\\\\\\\\n      />\\\\\\\\n    </CardComponent>\\\\\\\\n  </ThemeWrapper>\\\\\\\\n)\\\\\\\\nconst arrayMap = [\\\\\\\\n  { variant: 'column-filter', name: 'column-filter0' },\\\\\\\\n  { variant: 'column-filter', name: 'column-filter1' },\\\\\\\\n  { variant: 'column-filter', name: 'column-filter2' }\\\\\\\\n]\\\\\\\\n\\\\\\\\nexport const columnOptionList = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='2em' bgColor='grey.50'>\\\\\\\\n        <div style={{ width: '200px', margin: 'auto' }}>\\\\\\\\n          {arrayMap.map((obj: any, index: number) => {\\\\\\\\n            return (\\\\\\\\n              <IconDropdown\\\\\\\\n                variant={text('variant', obj?.variant) as tSelectVariant}\\\\\\\\n                optionList={object('optionList', columnOption)}\\\\\\\\n                onChange={action('Value selected')}\\\\\\\\n                width={text('width', '10px')}\\\\\\\\n                isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n                key={index}\\\\\\\\n              />\\\\\\\\n            )\\\\\\\\n          })}\\\\\\\\n        </div>\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const DropdownUniversal = () => {\\\\\\\\n  // reference to style\\\\\\\\n  // const theme = useContext(ThemeContext)\\\\\\\\n  // const borderBottom = `1px solid ${theme?.colors?.grey['A800']}`\\\\\\\\n  // const customStyle = {\\\\\\\\n  //   control: (provided: any) => ({\\\\\\\\n  //     ...provided,\\\\\\\\n  //     borderStyle: 'none',\\\\\\\\n  //     borderBottom,\\\\\\\\n  //     borderRadius: '0px',\\\\\\\\n  //     boxShadow: 'none',\\\\\\\\n  //     borderColor: theme?.colors?.grey?.A800,\\\\\\\\n  //     '&:focus': {\\\\\\\\n  //       borderStyle: 'none',\\\\\\\\n  //       borderBottom,\\\\\\\\n  //       boxShadow: 'none',\\\\\\\\n  //       borderColor: theme?.colors?.grey?.A800\\\\\\\\n  //     },\\\\\\\\n  //     '&:hover': {\\\\\\\\n  //       borderStyle: 'none',\\\\\\\\n  //       borderBottom,\\\\\\\\n  //       boxShadow: 'none',\\\\\\\\n  //       borderColor: theme?.colors?.grey?.A800\\\\\\\\n  //     }\\\\\\\\n  //   }),\\\\\\\\n  //   option: (provided: any, state: any) => ({\\\\\\\\n  //     ...provided,\\\\\\\\n  //     backgroundColor: state?.isSelected\\\\\\\\n  //       ? theme?.colors?.primary?.main\\\\\\\\n  //       : theme?.colors?.white,\\\\\\\\n  //     '&:hover': {\\\\\\\\n  //       backgroundColor: state?.isSelected\\\\\\\\n  //         ? theme?.colors?.primary?.main\\\\\\\\n  //         : theme?.colors?.grey['50']\\\\\\\\n  //     }\\\\\\\\n  //   }),\\\\\\\\n\\\\\\\\n  //   menu: (provided: any, state: any) => ({\\\\\\\\n  //     ...provided,\\\\\\\\n  //     backgroundColor: state?.isSelected\\\\\\\\n  //       ? theme.colors.primary.main\\\\\\\\n  //       : theme?.colors?.white,\\\\\\\\n  //     borderRadius: '2px',\\\\\\\\n  //     '&:hover': {\\\\\\\\n  //       backgroundColor: state?.isSelected\\\\\\\\n  //         ? theme?.colors?.primary?.main\\\\\\\\n  //         : theme?.colors?.white\\\\\\\\n  //     },\\\\\\\\n  //     marginTop: '5px',\\\\\\\\n  //     marginLeft: '16px',\\\\\\\\n  //     width: '90%'\\\\\\\\n  //   }),\\\\\\\\n  //   menuList: (provided: any) => ({\\\\\\\\n  //     ...provided,\\\\\\\\n  //     marginTop: '0px'\\\\\\\\n  //   }),\\\\\\\\n  //   valueContainer: (provided: any) => ({\\\\\\\\n  //     ...provided,\\\\\\\\n  //     padding: '0px'\\\\\\\\n  //   })\\\\\\\\n  // }\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='2em' bgColor='grey.50'>\\\\\\\\n        <IconDropdown\\\\\\\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', ListViewOption)}\\\\\\\\n          width={text('width', '120px')}\\\\\\\\n          menuIsOpen={boolean('menuIsOpen', false)}\\\\\\\\n          primary={boolean('primary', false)}\\\\\\\\n          intent={text('intent', 'page') as tIntent}\\\\\\\\n          onChange={action('Value Changed')}\\\\\\\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n          value='available'\\\\\\\\n          optionComponent={({ selectedOption }: any) => {\\\\\\\\n            return (\\\\\\\\n              <div>\\\\\\\\n                <div>{selectedOption?.color}</div>\\\\\\\\n                <div>{selectedOption?.label}</div>\\\\\\\\n              </div>\\\\\\\\n            )\\\\\\\\n          }}\\\\\\\\n          // customStyle={customStyle}\\\\\\\\n        >\\\\\\\\n          {({\\\\\\\\n            selectedOption,\\\\\\\\n            menuIsOpen,\\\\\\\\n            setMenuIsOpen\\\\\\\\n          }: IUniversalDropdownChildren) => {\\\\\\\\n            return (\\\\\\\\n              <Button\\\\\\\\n                onClick={() => {\\\\\\\\n                  setMenuIsOpen(!menuIsOpen)\\\\\\\\n                  action('Universal open/closed')(menuIsOpen)\\\\\\\\n                }}\\\\\\\\n                color={text('color', 'white')}\\\\\\\\n                bgColor={text('bgColor', 'black')}\\\\\\\\n                fullWidth={boolean('fullWidth', false)}\\\\\\\\n              >\\\\\\\\n                {selectedOption?.label}\\\\\\\\n              </Button>\\\\\\\\n            )\\\\\\\\n          }}\\\\\\\\n        </IconDropdown>\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const TextFieldDropdown = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='2em' bgColor='grey.50'>\\\\\\\\n        <IconDropdown\\\\\\\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', ListViewOption)}\\\\\\\\n          width={text('width', '120px')}\\\\\\\\n          menuIsOpen={boolean('menuIsOpen', false)}\\\\\\\\n          primary={boolean('primary', false)}\\\\\\\\n          intent={text('intent', 'page') as tIntent}\\\\\\\\n          onChange={action('Value Changed')}\\\\\\\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n          value='available'\\\\\\\\n          optionComponent={({ selectedOption }: any) => {\\\\\\\\n            return (\\\\\\\\n              <div>\\\\\\\\n                <div>{selectedOption?.color}</div>\\\\\\\\n                <div>{selectedOption?.label}</div>\\\\\\\\n              </div>\\\\\\\\n            )\\\\\\\\n          }}\\\\\\\\n          // customStyle={customStyle}\\\\\\\\n        >\\\\\\\\n          {({\\\\\\\\n            selectedOption,\\\\\\\\n            menuIsOpen,\\\\\\\\n            setMenuIsOpen\\\\\\\\n          }: IUniversalDropdownChildren) => {\\\\\\\\n            return (\\\\\\\\n              <TextInput\\\\\\\\n                id='someId'\\\\\\\\n                name='someName'\\\\\\\\n                className='someClassName'\\\\\\\\n                label={text('label', 'Username')}\\\\\\\\n                labelColor={text('labelColor', 'text.inputLabel.default')}\\\\\\\\n                placeholder={text('placeholder', 'Enter text here...')}\\\\\\\\n                maxLength={number('maxLength', 10)}\\\\\\\\n                error={boolean('error', false)}\\\\\\\\n                errorMessage={text('errorMessage', '')}\\\\\\\\n                required={boolean('required', false)}\\\\\\\\n                fullWidth={boolean('fullWidth', false)}\\\\\\\\n                onChange={action('Triggered: onChange')}\\\\\\\\n                onClick={() => {\\\\\\\\n                  setMenuIsOpen(!menuIsOpen)\\\\\\\\n                  action('universal open/closed')(menuIsOpen)\\\\\\\\n                }}\\\\\\\\n                value={selectedOption?.value}\\\\\\\\n              />\\\\\\\\n            )\\\\\\\\n          }}\\\\\\\\n        </IconDropdown>\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\",\\\\\\\"locationsMap\\\\\\\":{}},},\\\\n  title: `${path}/IconDropdown`,\\\\n  decorators: [withKnobs],\\\\n  component: IconDropdown\\\\n}\\\\n\\\\nconst ListViewOption = [\\\\n  {\\\\n    value: 'available',\\\\n    label: 'Mark As Available',\\\\n    color: 'blue',\\\\n    tooltipText: 'Mark As Available',\\\\n    isDisabled: true\\\\n  },\\\\n  {\\\\n    value: 'unavailable',\\\\n    label: 'Mark As Unavailable',\\\\n    color: 'red',\\\\n    tooltipText: 'Mark As Unavailable'\\\\n  },\\\\n  {\\\\n    value: 'active',\\\\n    label: 'Mark As Active',\\\\n    color: 'purple',\\\\n    tooltipText: 'Mark As Active'\\\\n  },\\\\n  {\\\\n    value: 'inactive',\\\\n    label: 'Mark As Inactive',\\\\n    color: 'green',\\\\n    tooltipText: 'Mark As Inactive'\\\\n  }\\\\n]\\\\n\\\\nconst MultiLevelListViewOption = [\\\\n  {\\\\n    id: 'available',\\\\n    value: 'available',\\\\n    label: 'Mark As Available',\\\\n    color: 'blue',\\\\n    tooltipText: 'Mark As Available',\\\\n    options: [\\\\n      {\\\\n        id: 'available',\\\\n        value: 'available',\\\\n        label: 'Mark As Child Available',\\\\n        color: 'blue',\\\\n        tooltipText: 'Mark As Child Available'\\\\n      },\\\\n      {\\\\n        id: 'unavailable',\\\\n        value: 'unavailable',\\\\n        label: 'Mark As Child Unavailable',\\\\n        color: 'red',\\\\n        tooltipText: 'Mark As Child Unavailable'\\\\n      },\\\\n      {\\\\n        id: 'active',\\\\n        value: 'active',\\\\n        label: 'Mark As Child Active',\\\\n        color: 'purple',\\\\n        tooltipText: 'Mark As Child Active'\\\\n      },\\\\n      {\\\\n        id: 'inactive',\\\\n        value: 'inactive',\\\\n        label: 'Mark As Child Inactive',\\\\n        color: 'green',\\\\n        tooltipText: 'Mark As Child Inactive',\\\\n        options: [\\\\n          {\\\\n            id: 'available',\\\\n            value: 'available',\\\\n            label: 'Mark As Grand Child Available',\\\\n            color: 'blue',\\\\n            tooltipText: 'Mark As Grand Child Available'\\\\n          },\\\\n          {\\\\n            id: 'unavailable',\\\\n            value: 'unavailable',\\\\n            label: 'Mark As Grand Child Unavailable',\\\\n            color: 'red',\\\\n            tooltipText: 'Mark As Grand Child Unavailable'\\\\n          }\\\\n        ]\\\\n      }\\\\n    ]\\\\n  },\\\\n  {\\\\n    id: 'unavailable',\\\\n    value: 'unavailable',\\\\n    label: 'Mark As Unavailable',\\\\n    color: 'red',\\\\n    tooltipText: 'Mark As Unavailable'\\\\n  },\\\\n  {\\\\n    id: 'active',\\\\n    value: 'active',\\\\n    label: 'Mark As Active',\\\\n    color: 'purple',\\\\n    tooltipText: 'Mark As Active'\\\\n  },\\\\n  {\\\\n    id: 'inactive',\\\\n    value: 'inactive',\\\\n    label: 'Mark As Inactive',\\\\n    color: 'green',\\\\n    tooltipText: 'Mark As Inactive'\\\\n  }\\\\n]\\\\n\\\\nconst paginationOptions = [\\\\n  { value: '25', label: '25 per page', title: '25 per page' },\\\\n  { value: '50', label: '50 per page', title: '50 per page' },\\\\n  { value: '100', label: '100 per page', title: '100 per page' },\\\\n  { value: '200', label: '200 per page', title: '200 per page' }\\\\n]\\\\n\\\\nconst columnOption = [\\\\n  { value: 'ascending', label: 'Sort Ascending', iconVariant: 'hide-menu-box' },\\\\n  {\\\\n    value: 'descending',\\\\n    label: 'Sort Descending',\\\\n    iconVariant: 'hub-location'\\\\n  },\\\\n  { value: 'hideColumn', label: 'Hide Column', iconVariant: 'close' },\\\\n  { value: 'pinLeft', label: 'Pin Left', iconVariant: 'angle-left' },\\\\n  { value: 'pinright', label: 'Pin Right', iconVariant: 'angle-right-thin' }\\\\n]\\\\n\\\\nconst options = [\\\\n  {\\\\n    value: 'emailVerificationPending',\\\\n    label: 'Email Verification Pending Shipper'\\\\n  },\\\\n  { value: 'allShippers', label: 'All Shippers' },\\\\n  { value: 'approvalPendingShippers', label: 'Approval Pending Shippers' }\\\\n]\\\\n\\\\nconst datePickerOptions = [\\\\n  { value: 'January', label: 'January' },\\\\n  { value: 'February', label: 'February' },\\\\n  { value: 'March', label: 'March' },\\\\n  { value: 'April', label: 'April' },\\\\n  { value: 'May', label: 'May' },\\\\n  { value: 'June', label: 'June' },\\\\n  { value: 'July', label: 'July' },\\\\n  { value: 'August', label: 'August' },\\\\n  { value: 'September', label: 'September' },\\\\n  { value: 'October', label: 'October' },\\\\n  { value: 'November', label: 'November' },\\\\n  { value: 'December', label: 'December' }\\\\n]\\\\n\\\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\\\nexport const ButtonDropdown = addSourceDecorator(() => (\\\\n  <ThemeWrapper>\\\\n    <Box p='2em' bgColor='grey.50'>\\\\n      <IconDropdown\\\\n        variant={text('varaint', 'button-dropdown') as tSelectVariant}\\\\n        optionList={object('optionList', ListViewOption)}\\\\n        width={text('width', '120px')}\\\\n        menuIsOpen={boolean('menuIsOpen', false)}\\\\n        iconButtonDetails={array('iconList', [\\\\n          'hide-menu-box',\\\\n          'More',\\\\n          'angle-down'\\\\n        ])}\\\\n        primary={boolean('primary', false)}\\\\n        intent={text('intent', 'page') as tIntent}\\\\n        onChange={action('Value Changed')}\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n        disabled={boolean('disabled', false)}\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\n        tooltipProps={{\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\n        }}\\\\n      />\\\\n    </Box>\\\\n  </ThemeWrapper>\\\\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\\\nexport const TextDropdown = addSourceDecorator(() => (\\\\n  <ThemeWrapper>\\\\n    <Box p='2em' bgColor='grey.50'>\\\\n      <IconDropdown\\\\n        variant={text('varaint', 'text-dropdown') as tSelectVariant}\\\\n        optionList={object('optionList', ListViewOption)}\\\\n        width={text('width', '120px')}\\\\n        menuIsOpen={boolean('menuIsOpen', false)}\\\\n        iconButtonDetails={array('iconList', [\\\\n          'hide-menu-box',\\\\n          'More',\\\\n          'angle-down'\\\\n        ])}\\\\n        primary={boolean('primary', false)}\\\\n        intent={text('intent', 'page') as tIntent}\\\\n        onChange={action('Value Changed')}\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n        disabled={boolean('disabled', false)}\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\n        tooltipProps={{\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\n        }}\\\\n      />\\\\n    </Box>\\\\n  </ThemeWrapper>\\\\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const MultiLevelBreadCrumb = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <IconDropdown\\\\n          variant={text('variant', 'multilevel-breadcrumb') as tSelectVariant}\\\\n          optionList={object('optionList', MultiLevelListViewOption)}\\\\n          onChange={action('Value selected')}\\\\n          value={text('value', 'strawberry')}\\\\n          width={text('width', '260px')}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n  }, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const MultiLevelButtonDropdown = addSourceDecorator(() => (\\\\n  <ThemeWrapper>\\\\n    <Box p='2em' bgColor='grey.50'>\\\\n      <IconDropdown\\\\n        variant={\\\\n          text('varaint', 'multilevel-button-dropdown') as tSelectVariant\\\\n        }\\\\n        optionList={object('optionList', MultiLevelListViewOption)}\\\\n        width={text('width', '120px')}\\\\n        menuIsOpen\\\\n        iconButtonDetails={array('iconList', [\\\\n          'hide-menu-box',\\\\n          'More',\\\\n          'angle-down'\\\\n        ])}\\\\n        defaultOpen='right'\\\\n        primary={boolean('primary', false)}\\\\n        intent={text('intent', 'page') as tIntent}\\\\n        handleClick={(id: any) => console.log('clicked from storybook', id)}\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n        disabled={boolean('disabled', false)}\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\n        tooltipProps={{\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\n        }}\\\\n      />\\\\n    </Box>\\\\n  </ThemeWrapper>\\\\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const PaginationDropdown = addSourceDecorator(() => (\\\\n  <ThemeWrapper>\\\\n    <CardComponent style={{ height: '300px' }}>\\\\n      <IconDropdown\\\\n        variant={text('variant', 'pagination-size') as tSelectVariant}\\\\n        optionList={object('optionList', paginationOptions)}\\\\n        onChange={action('Value selected')}\\\\n        value={text('value', '50')}\\\\n        width={text('width', '120px')}\\\\n      />\\\\n    </CardComponent>\\\\n  </ThemeWrapper>\\\\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const columnOptionComponent = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <div style={{ width: '200px', margin: 'auto' }}>\\\\n          <IconDropdown\\\\n            variant={text('variant', 'column-filter') as tSelectVariant}\\\\n            optionList={object('optionList', columnOption)}\\\\n            onChange={action('Value selected')}\\\\n            width={text('width', '10px')}\\\\n            isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n          />\\\\n        </div>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const BreadCrumbComponent = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <IconDropdown\\\\n          variant={text('variant', 'bread-crumb') as tSelectVariant}\\\\n          optionList={object('optionList', options)}\\\\n          onChange={action('Value selected')}\\\\n          value={text('value', 'strawberry')}\\\\n          width={text('width', '260px')}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const DatePickerDropDown = addSourceDecorator(() => (\\\\n  <ThemeWrapper>\\\\n    <CardComponent style={{ height: '200px' }}>\\\\n      <IconDropdown\\\\n        variant={text('variant', 'date-picker') as tSelectVariant}\\\\n        optionList={object('optionList', datePickerOptions)}\\\\n        onChange={action('Value selected')}\\\\n        value={text('value', '50')}\\\\n        width={text('width', '80px')}\\\\n        showDownArrow={boolean('Show Down Arrow', true)}\\\\n        isMultiRegionStyled={boolean('Is Multi Region Styled', false)}\\\\n      />\\\\n    </CardComponent>\\\\n  </ThemeWrapper>\\\\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\nconst arrayMap = [\\\\n  { variant: 'column-filter', name: 'column-filter0' },\\\\n  { variant: 'column-filter', name: 'column-filter1' },\\\\n  { variant: 'column-filter', name: 'column-filter2' }\\\\n]\\\\n\\\\nexport const columnOptionList = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <div style={{ width: '200px', margin: 'auto' }}>\\\\n          {arrayMap.map((obj: any, index: number) => {\\\\n            return (\\\\n              <IconDropdown\\\\n                variant={text('variant', obj?.variant) as tSelectVariant}\\\\n                optionList={object('optionList', columnOption)}\\\\n                onChange={action('Value selected')}\\\\n                width={text('width', '10px')}\\\\n                isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n                key={index}\\\\n              />\\\\n            )\\\\n          })}\\\\n        </div>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const DropdownUniversal = addSourceDecorator(() => {\\\\n  // reference to style\\\\n  // const theme = useContext(ThemeContext)\\\\n  // const borderBottom = `1px solid ${theme?.colors?.grey['A800']}`\\\\n  // const customStyle = {\\\\n  //   control: (provided: any) => ({\\\\n  //     ...provided,\\\\n  //     borderStyle: 'none',\\\\n  //     borderBottom,\\\\n  //     borderRadius: '0px',\\\\n  //     boxShadow: 'none',\\\\n  //     borderColor: theme?.colors?.grey?.A800,\\\\n  //     '&:focus': {\\\\n  //       borderStyle: 'none',\\\\n  //       borderBottom,\\\\n  //       boxShadow: 'none',\\\\n  //       borderColor: theme?.colors?.grey?.A800\\\\n  //     },\\\\n  //     '&:hover': {\\\\n  //       borderStyle: 'none',\\\\n  //       borderBottom,\\\\n  //       boxShadow: 'none',\\\\n  //       borderColor: theme?.colors?.grey?.A800\\\\n  //     }\\\\n  //   }),\\\\n  //   option: (provided: any, state: any) => ({\\\\n  //     ...provided,\\\\n  //     backgroundColor: state?.isSelected\\\\n  //       ? theme?.colors?.primary?.main\\\\n  //       : theme?.colors?.white,\\\\n  //     '&:hover': {\\\\n  //       backgroundColor: state?.isSelected\\\\n  //         ? theme?.colors?.primary?.main\\\\n  //         : theme?.colors?.grey['50']\\\\n  //     }\\\\n  //   }),\\\\n\\\\n  //   menu: (provided: any, state: any) => ({\\\\n  //     ...provided,\\\\n  //     backgroundColor: state?.isSelected\\\\n  //       ? theme.colors.primary.main\\\\n  //       : theme?.colors?.white,\\\\n  //     borderRadius: '2px',\\\\n  //     '&:hover': {\\\\n  //       backgroundColor: state?.isSelected\\\\n  //         ? theme?.colors?.primary?.main\\\\n  //         : theme?.colors?.white\\\\n  //     },\\\\n  //     marginTop: '5px',\\\\n  //     marginLeft: '16px',\\\\n  //     width: '90%'\\\\n  //   }),\\\\n  //   menuList: (provided: any) => ({\\\\n  //     ...provided,\\\\n  //     marginTop: '0px'\\\\n  //   }),\\\\n  //   valueContainer: (provided: any) => ({\\\\n  //     ...provided,\\\\n  //     padding: '0px'\\\\n  //   })\\\\n  // }\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <IconDropdown\\\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          width={text('width', '120px')}\\\\n          menuIsOpen={boolean('menuIsOpen', false)}\\\\n          primary={boolean('primary', false)}\\\\n          intent={text('intent', 'page') as tIntent}\\\\n          onChange={action('Value Changed')}\\\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n          disabled={boolean('disabled', false)}\\\\n          value='available'\\\\n          optionComponent={({ selectedOption }: any) => {\\\\n            return (\\\\n              <div>\\\\n                <div>{selectedOption?.color}</div>\\\\n                <div>{selectedOption?.label}</div>\\\\n              </div>\\\\n            )\\\\n          }}\\\\n          // customStyle={customStyle}\\\\n        >\\\\n          {({\\\\n            selectedOption,\\\\n            menuIsOpen,\\\\n            setMenuIsOpen\\\\n          }: IUniversalDropdownChildren) => {\\\\n            return (\\\\n              <Button\\\\n                onClick={() => {\\\\n                  setMenuIsOpen(!menuIsOpen)\\\\n                  action('Universal open/closed')(menuIsOpen)\\\\n                }}\\\\n                color={text('color', 'white')}\\\\n                bgColor={text('bgColor', 'black')}\\\\n                fullWidth={boolean('fullWidth', false)}\\\\n              >\\\\n                {selectedOption?.label}\\\\n              </Button>\\\\n            )\\\\n          }}\\\\n        </IconDropdown>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const TextFieldDropdown = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <IconDropdown\\\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          width={text('width', '120px')}\\\\n          menuIsOpen={boolean('menuIsOpen', false)}\\\\n          primary={boolean('primary', false)}\\\\n          intent={text('intent', 'page') as tIntent}\\\\n          onChange={action('Value Changed')}\\\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n          disabled={boolean('disabled', false)}\\\\n          value='available'\\\\n          optionComponent={({ selectedOption }: any) => {\\\\n            return (\\\\n              <div>\\\\n                <div>{selectedOption?.color}</div>\\\\n                <div>{selectedOption?.label}</div>\\\\n              </div>\\\\n            )\\\\n          }}\\\\n          // customStyle={customStyle}\\\\n        >\\\\n          {({\\\\n            selectedOption,\\\\n            menuIsOpen,\\\\n            setMenuIsOpen\\\\n          }: IUniversalDropdownChildren) => {\\\\n            return (\\\\n              <TextInput\\\\n                id='someId'\\\\n                name='someName'\\\\n                className='someClassName'\\\\n                label={text('label', 'Username')}\\\\n                labelColor={text('labelColor', 'text.inputLabel.default')}\\\\n                placeholder={text('placeholder', 'Enter text here...')}\\\\n                maxLength={number('maxLength', 10)}\\\\n                error={boolean('error', false)}\\\\n                errorMessage={text('errorMessage', '')}\\\\n                required={boolean('required', false)}\\\\n                fullWidth={boolean('fullWidth', false)}\\\\n                onChange={action('Triggered: onChange')}\\\\n                onClick={() => {\\\\n                  setMenuIsOpen(!menuIsOpen)\\\\n                  action('universal open/closed')(menuIsOpen)\\\\n                }}\\\\n                value={selectedOption?.value}\\\\n              />\\\\n            )\\\\n          }}\\\\n        </IconDropdown>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/IconDropdown.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\n\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/farhanansari/Code/ui-library/src/components/molecules/IconDropdown\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"import { action } from '@storybook/addon-actions'\\\\nimport {\\\\n  array,\\\\n  boolean,\\\\n  number,\\\\n  object,\\\\n  text,\\\\n  withKnobs\\\\n} from '@storybook/addon-knobs'\\\\nimport React from 'react'\\\\nimport IconDropdown from '.'\\\\nimport { path } from '..'\\\\nimport { Box } from '../../..'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport Button, { tIntent } from '../../atoms/Button'\\\\nimport CardComponent from '../../atoms/Card'\\\\nimport { tPlacement } from '../../../utilities/types'\\\\nimport {\\\\n  IUniversalDropdownChildren,\\\\n  tSelectVariant\\\\n} from '../DropDown/interface'\\\\nimport TextInput from '../TextInput'\\\\n\\\\nexport default {\\\\n  title: `${path}/IconDropdown`,\\\\n  decorators: [withKnobs],\\\\n  component: IconDropdown\\\\n}\\\\n\\\\nconst ListViewOption = [\\\\n  {\\\\n    value: 'available',\\\\n    label: 'Mark As Available',\\\\n    color: 'blue',\\\\n    tooltipText: 'Mark As Available',\\\\n    isDisabled: true\\\\n  },\\\\n  {\\\\n    value: 'unavailable',\\\\n    label: 'Mark As Unavailable',\\\\n    color: 'red',\\\\n    tooltipText: 'Mark As Unavailable'\\\\n  },\\\\n  {\\\\n    value: 'active',\\\\n    label: 'Mark As Active',\\\\n    color: 'purple',\\\\n    tooltipText: 'Mark As Active'\\\\n  },\\\\n  {\\\\n    value: 'inactive',\\\\n    label: 'Mark As Inactive',\\\\n    color: 'green',\\\\n    tooltipText: 'Mark As Inactive'\\\\n  }\\\\n]\\\\n\\\\nconst MultiLevelListViewOption = [\\\\n  {\\\\n    id: 'available',\\\\n    value: 'available',\\\\n    label: 'Mark As Available',\\\\n    color: 'blue',\\\\n    tooltipText: 'Mark As Available',\\\\n    options: [\\\\n      {\\\\n        id: 'available',\\\\n        value: 'available',\\\\n        label: 'Mark As Child Available',\\\\n        color: 'blue',\\\\n        tooltipText: 'Mark As Child Available'\\\\n      },\\\\n      {\\\\n        id: 'unavailable',\\\\n        value: 'unavailable',\\\\n        label: 'Mark As Child Unavailable',\\\\n        color: 'red',\\\\n        tooltipText: 'Mark As Child Unavailable'\\\\n      },\\\\n      {\\\\n        id: 'active',\\\\n        value: 'active',\\\\n        label: 'Mark As Child Active',\\\\n        color: 'purple',\\\\n        tooltipText: 'Mark As Child Active'\\\\n      },\\\\n      {\\\\n        id: 'inactive',\\\\n        value: 'inactive',\\\\n        label: 'Mark As Child Inactive',\\\\n        color: 'green',\\\\n        tooltipText: 'Mark As Child Inactive',\\\\n        options: [\\\\n          {\\\\n            id: 'available',\\\\n            value: 'available',\\\\n            label: 'Mark As Grand Child Available',\\\\n            color: 'blue',\\\\n            tooltipText: 'Mark As Grand Child Available'\\\\n          },\\\\n          {\\\\n            id: 'unavailable',\\\\n            value: 'unavailable',\\\\n            label: 'Mark As Grand Child Unavailable',\\\\n            color: 'red',\\\\n            tooltipText: 'Mark As Grand Child Unavailable'\\\\n          }\\\\n        ]\\\\n      }\\\\n    ]\\\\n  },\\\\n  {\\\\n    id: 'unavailable',\\\\n    value: 'unavailable',\\\\n    label: 'Mark As Unavailable',\\\\n    color: 'red',\\\\n    tooltipText: 'Mark As Unavailable'\\\\n  },\\\\n  {\\\\n    id: 'active',\\\\n    value: 'active',\\\\n    label: 'Mark As Active',\\\\n    color: 'purple',\\\\n    tooltipText: 'Mark As Active'\\\\n  },\\\\n  {\\\\n    id: 'inactive',\\\\n    value: 'inactive',\\\\n    label: 'Mark As Inactive',\\\\n    color: 'green',\\\\n    tooltipText: 'Mark As Inactive'\\\\n  }\\\\n]\\\\n\\\\nconst paginationOptions = [\\\\n  { value: '25', label: '25 per page', title: '25 per page' },\\\\n  { value: '50', label: '50 per page', title: '50 per page' },\\\\n  { value: '100', label: '100 per page', title: '100 per page' },\\\\n  { value: '200', label: '200 per page', title: '200 per page' }\\\\n]\\\\n\\\\nconst columnOption = [\\\\n  { value: 'ascending', label: 'Sort Ascending', iconVariant: 'hide-menu-box' },\\\\n  {\\\\n    value: 'descending',\\\\n    label: 'Sort Descending',\\\\n    iconVariant: 'hub-location'\\\\n  },\\\\n  { value: 'hideColumn', label: 'Hide Column', iconVariant: 'close' },\\\\n  { value: 'pinLeft', label: 'Pin Left', iconVariant: 'angle-left' },\\\\n  { value: 'pinright', label: 'Pin Right', iconVariant: 'angle-right-thin' }\\\\n]\\\\n\\\\nconst options = [\\\\n  {\\\\n    value: 'emailVerificationPending',\\\\n    label: 'Email Verification Pending Shipper'\\\\n  },\\\\n  { value: 'allShippers', label: 'All Shippers' },\\\\n  { value: 'approvalPendingShippers', label: 'Approval Pending Shippers' }\\\\n]\\\\n\\\\nconst datePickerOptions = [\\\\n  { value: 'January', label: 'January' },\\\\n  { value: 'February', label: 'February' },\\\\n  { value: 'March', label: 'March' },\\\\n  { value: 'April', label: 'April' },\\\\n  { value: 'May', label: 'May' },\\\\n  { value: 'June', label: 'June' },\\\\n  { value: 'July', label: 'July' },\\\\n  { value: 'August', label: 'August' },\\\\n  { value: 'September', label: 'September' },\\\\n  { value: 'October', label: 'October' },\\\\n  { value: 'November', label: 'November' },\\\\n  { value: 'December', label: 'December' }\\\\n]\\\\n\\\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\\\nexport const ButtonDropdown = () => (\\\\n  <ThemeWrapper>\\\\n    <Box p='2em' bgColor='grey.50'>\\\\n      <IconDropdown\\\\n        variant={text('varaint', 'button-dropdown') as tSelectVariant}\\\\n        optionList={object('optionList', ListViewOption)}\\\\n        width={text('width', '120px')}\\\\n        menuIsOpen={boolean('menuIsOpen', false)}\\\\n        iconButtonDetails={array('iconList', [\\\\n          'hide-menu-box',\\\\n          'More',\\\\n          'angle-down'\\\\n        ])}\\\\n        primary={boolean('primary', false)}\\\\n        intent={text('intent', 'page') as tIntent}\\\\n        onChange={action('Value Changed')}\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n        disabled={boolean('disabled', false)}\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\n        tooltipProps={{\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\n        }}\\\\n      />\\\\n    </Box>\\\\n  </ThemeWrapper>\\\\n)\\\\n\\\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\\\nexport const TextDropdown = () => (\\\\n  <ThemeWrapper>\\\\n    <Box p='2em' bgColor='grey.50'>\\\\n      <IconDropdown\\\\n        variant={text('varaint', 'text-dropdown') as tSelectVariant}\\\\n        optionList={object('optionList', ListViewOption)}\\\\n        width={text('width', '120px')}\\\\n        menuIsOpen={boolean('menuIsOpen', false)}\\\\n        iconButtonDetails={array('iconList', [\\\\n          'hide-menu-box',\\\\n          'More',\\\\n          'angle-down'\\\\n        ])}\\\\n        primary={boolean('primary', false)}\\\\n        intent={text('intent', 'page') as tIntent}\\\\n        onChange={action('Value Changed')}\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n        disabled={boolean('disabled', false)}\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\n        tooltipProps={{\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\n        }}\\\\n      />\\\\n    </Box>\\\\n  </ThemeWrapper>\\\\n)\\\\n\\\\nexport const MultiLevelBreadCrumb = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <IconDropdown\\\\n          variant={text('variant', 'multilevel-breadcrumb') as tSelectVariant}\\\\n          optionList={object('optionList', MultiLevelListViewOption)}\\\\n          onChange={action('Value selected')}\\\\n          value={text('value', 'strawberry')}\\\\n          width={text('width', '260px')}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n  }\\\\n\\\\nexport const MultiLevelButtonDropdown = () => (\\\\n  <ThemeWrapper>\\\\n    <Box p='2em' bgColor='grey.50'>\\\\n      <IconDropdown\\\\n        variant={\\\\n          text('varaint', 'multilevel-button-dropdown') as tSelectVariant\\\\n        }\\\\n        optionList={object('optionList', MultiLevelListViewOption)}\\\\n        width={text('width', '120px')}\\\\n        menuIsOpen\\\\n        iconButtonDetails={array('iconList', [\\\\n          'hide-menu-box',\\\\n          'More',\\\\n          'angle-down'\\\\n        ])}\\\\n        defaultOpen='right'\\\\n        primary={boolean('primary', false)}\\\\n        intent={text('intent', 'page') as tIntent}\\\\n        handleClick={(id: any) => console.log('clicked from storybook', id)}\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n        disabled={boolean('disabled', false)}\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\n        tooltipProps={{\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\n        }}\\\\n      />\\\\n    </Box>\\\\n  </ThemeWrapper>\\\\n)\\\\n\\\\nexport const PaginationDropdown = () => (\\\\n  <ThemeWrapper>\\\\n    <CardComponent style={{ height: '300px' }}>\\\\n      <IconDropdown\\\\n        variant={text('variant', 'pagination-size') as tSelectVariant}\\\\n        optionList={object('optionList', paginationOptions)}\\\\n        onChange={action('Value selected')}\\\\n        value={text('value', '50')}\\\\n        width={text('width', '120px')}\\\\n      />\\\\n    </CardComponent>\\\\n  </ThemeWrapper>\\\\n)\\\\n\\\\nexport const columnOptionComponent = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <div style={{ width: '200px', margin: 'auto' }}>\\\\n          <IconDropdown\\\\n            variant={text('variant', 'column-filter') as tSelectVariant}\\\\n            optionList={object('optionList', columnOption)}\\\\n            onChange={action('Value selected')}\\\\n            width={text('width', '10px')}\\\\n            isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n          />\\\\n        </div>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const BreadCrumbComponent = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <IconDropdown\\\\n          variant={text('variant', 'bread-crumb') as tSelectVariant}\\\\n          optionList={object('optionList', options)}\\\\n          onChange={action('Value selected')}\\\\n          value={text('value', 'strawberry')}\\\\n          width={text('width', '260px')}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const DatePickerDropDown = () => (\\\\n  <ThemeWrapper>\\\\n    <CardComponent style={{ height: '200px' }}>\\\\n      <IconDropdown\\\\n        variant={text('variant', 'date-picker') as tSelectVariant}\\\\n        optionList={object('optionList', datePickerOptions)}\\\\n        onChange={action('Value selected')}\\\\n        value={text('value', '50')}\\\\n        width={text('width', '80px')}\\\\n        showDownArrow={boolean('Show Down Arrow', true)}\\\\n        isMultiRegionStyled={boolean('Is Multi Region Styled', false)}\\\\n      />\\\\n    </CardComponent>\\\\n  </ThemeWrapper>\\\\n)\\\\nconst arrayMap = [\\\\n  { variant: 'column-filter', name: 'column-filter0' },\\\\n  { variant: 'column-filter', name: 'column-filter1' },\\\\n  { variant: 'column-filter', name: 'column-filter2' }\\\\n]\\\\n\\\\nexport const columnOptionList = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <div style={{ width: '200px', margin: 'auto' }}>\\\\n          {arrayMap.map((obj: any, index: number) => {\\\\n            return (\\\\n              <IconDropdown\\\\n                variant={text('variant', obj?.variant) as tSelectVariant}\\\\n                optionList={object('optionList', columnOption)}\\\\n                onChange={action('Value selected')}\\\\n                width={text('width', '10px')}\\\\n                isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n                key={index}\\\\n              />\\\\n            )\\\\n          })}\\\\n        </div>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const DropdownUniversal = () => {\\\\n  // reference to style\\\\n  // const theme = useContext(ThemeContext)\\\\n  // const borderBottom = `1px solid ${theme?.colors?.grey['A800']}`\\\\n  // const customStyle = {\\\\n  //   control: (provided: any) => ({\\\\n  //     ...provided,\\\\n  //     borderStyle: 'none',\\\\n  //     borderBottom,\\\\n  //     borderRadius: '0px',\\\\n  //     boxShadow: 'none',\\\\n  //     borderColor: theme?.colors?.grey?.A800,\\\\n  //     '&:focus': {\\\\n  //       borderStyle: 'none',\\\\n  //       borderBottom,\\\\n  //       boxShadow: 'none',\\\\n  //       borderColor: theme?.colors?.grey?.A800\\\\n  //     },\\\\n  //     '&:hover': {\\\\n  //       borderStyle: 'none',\\\\n  //       borderBottom,\\\\n  //       boxShadow: 'none',\\\\n  //       borderColor: theme?.colors?.grey?.A800\\\\n  //     }\\\\n  //   }),\\\\n  //   option: (provided: any, state: any) => ({\\\\n  //     ...provided,\\\\n  //     backgroundColor: state?.isSelected\\\\n  //       ? theme?.colors?.primary?.main\\\\n  //       : theme?.colors?.white,\\\\n  //     '&:hover': {\\\\n  //       backgroundColor: state?.isSelected\\\\n  //         ? theme?.colors?.primary?.main\\\\n  //         : theme?.colors?.grey['50']\\\\n  //     }\\\\n  //   }),\\\\n\\\\n  //   menu: (provided: any, state: any) => ({\\\\n  //     ...provided,\\\\n  //     backgroundColor: state?.isSelected\\\\n  //       ? theme.colors.primary.main\\\\n  //       : theme?.colors?.white,\\\\n  //     borderRadius: '2px',\\\\n  //     '&:hover': {\\\\n  //       backgroundColor: state?.isSelected\\\\n  //         ? theme?.colors?.primary?.main\\\\n  //         : theme?.colors?.white\\\\n  //     },\\\\n  //     marginTop: '5px',\\\\n  //     marginLeft: '16px',\\\\n  //     width: '90%'\\\\n  //   }),\\\\n  //   menuList: (provided: any) => ({\\\\n  //     ...provided,\\\\n  //     marginTop: '0px'\\\\n  //   }),\\\\n  //   valueContainer: (provided: any) => ({\\\\n  //     ...provided,\\\\n  //     padding: '0px'\\\\n  //   })\\\\n  // }\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <IconDropdown\\\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          width={text('width', '120px')}\\\\n          menuIsOpen={boolean('menuIsOpen', false)}\\\\n          primary={boolean('primary', false)}\\\\n          intent={text('intent', 'page') as tIntent}\\\\n          onChange={action('Value Changed')}\\\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n          disabled={boolean('disabled', false)}\\\\n          value='available'\\\\n          optionComponent={({ selectedOption }: any) => {\\\\n            return (\\\\n              <div>\\\\n                <div>{selectedOption?.color}</div>\\\\n                <div>{selectedOption?.label}</div>\\\\n              </div>\\\\n            )\\\\n          }}\\\\n          // customStyle={customStyle}\\\\n        >\\\\n          {({\\\\n            selectedOption,\\\\n            menuIsOpen,\\\\n            setMenuIsOpen\\\\n          }: IUniversalDropdownChildren) => {\\\\n            return (\\\\n              <Button\\\\n                onClick={() => {\\\\n                  setMenuIsOpen(!menuIsOpen)\\\\n                  action('Universal open/closed')(menuIsOpen)\\\\n                }}\\\\n                color={text('color', 'white')}\\\\n                bgColor={text('bgColor', 'black')}\\\\n                fullWidth={boolean('fullWidth', false)}\\\\n              >\\\\n                {selectedOption?.label}\\\\n              </Button>\\\\n            )\\\\n          }}\\\\n        </IconDropdown>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const TextFieldDropdown = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <IconDropdown\\\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          width={text('width', '120px')}\\\\n          menuIsOpen={boolean('menuIsOpen', false)}\\\\n          primary={boolean('primary', false)}\\\\n          intent={text('intent', 'page') as tIntent}\\\\n          onChange={action('Value Changed')}\\\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n          disabled={boolean('disabled', false)}\\\\n          value='available'\\\\n          optionComponent={({ selectedOption }: any) => {\\\\n            return (\\\\n              <div>\\\\n                <div>{selectedOption?.color}</div>\\\\n                <div>{selectedOption?.label}</div>\\\\n              </div>\\\\n            )\\\\n          }}\\\\n          // customStyle={customStyle}\\\\n        >\\\\n          {({\\\\n            selectedOption,\\\\n            menuIsOpen,\\\\n            setMenuIsOpen\\\\n          }: IUniversalDropdownChildren) => {\\\\n            return (\\\\n              <TextInput\\\\n                id='someId'\\\\n                name='someName'\\\\n                className='someClassName'\\\\n                label={text('label', 'Username')}\\\\n                labelColor={text('labelColor', 'text.inputLabel.default')}\\\\n                placeholder={text('placeholder', 'Enter text here...')}\\\\n                maxLength={number('maxLength', 10)}\\\\n                error={boolean('error', false)}\\\\n                errorMessage={text('errorMessage', '')}\\\\n                required={boolean('required', false)}\\\\n                fullWidth={boolean('fullWidth', false)}\\\\n                onChange={action('Triggered: onChange')}\\\\n                onClick={() => {\\\\n                  setMenuIsOpen(!menuIsOpen)\\\\n                  action('universal open/closed')(menuIsOpen)\\\\n                }}\\\\n                value={selectedOption?.value}\\\\n              />\\\\n            )\\\\n          }}\\\\n        </IconDropdown>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/IconDropdown.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\nimport { action } from '@storybook/addon-actions'\\nimport {\\n  array,\\n  boolean,\\n  number,\\n  object,\\n  text,\\n  withKnobs\\n} from '@storybook/addon-knobs'\\nimport React from 'react'\\nimport IconDropdown from '.'\\nimport { path } from '..'\\nimport { Box } from '../../..'\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\nimport Button, { tIntent } from '../../atoms/Button'\\nimport CardComponent from '../../atoms/Card'\\nimport { tPlacement } from '../../../utilities/types'\\nimport {\\n  IUniversalDropdownChildren,\\n  tSelectVariant\\n} from '../DropDown/interface'\\nimport TextInput from '../TextInput'\\n\\nexport default {parameters: {\\\"storySource\\\":{\\\"source\\\":\\\"\\\\n\\\\n// @ts-nocheck\\\\n// @ts-ignore\\\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\\\n// @ts-ignore\\\\nvar addSourceDecorator = require(\\\\\\\"@storybook/source-loader/preview\\\\\\\").addSource;\\\\n// @ts-ignore\\\\nvar __SOURCE_PREFIX__ = \\\\\\\"/Users/farhanansari/Code/ui-library/src/components/molecules/IconDropdown\\\\\\\";\\\\n// @ts-ignore\\\\nvar __STORY__ = \\\\\\\"import { action } from '@storybook/addon-actions'\\\\\\\\nimport {\\\\\\\\n  array,\\\\\\\\n  boolean,\\\\\\\\n  number,\\\\\\\\n  object,\\\\\\\\n  text,\\\\\\\\n  withKnobs\\\\\\\\n} from '@storybook/addon-knobs'\\\\\\\\nimport React from 'react'\\\\\\\\nimport IconDropdown from '.'\\\\\\\\nimport { path } from '..'\\\\\\\\nimport { Box } from '../../..'\\\\\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\\\\\nimport Button, { tIntent } from '../../atoms/Button'\\\\\\\\nimport CardComponent from '../../atoms/Card'\\\\\\\\nimport { tPlacement } from '../../../utilities/types'\\\\\\\\nimport {\\\\\\\\n  IUniversalDropdownChildren,\\\\\\\\n  tSelectVariant\\\\\\\\n} from '../DropDown/interface'\\\\\\\\nimport TextInput from '../TextInput'\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/IconDropdown`,\\\\\\\\n  decorators: [withKnobs],\\\\\\\\n  component: IconDropdown\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst ListViewOption = [\\\\\\\\n  {\\\\\\\\n    value: 'available',\\\\\\\\n    label: 'Mark As Available',\\\\\\\\n    color: 'blue',\\\\\\\\n    tooltipText: 'Mark As Available',\\\\\\\\n    isDisabled: true\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    value: 'unavailable',\\\\\\\\n    label: 'Mark As Unavailable',\\\\\\\\n    color: 'red',\\\\\\\\n    tooltipText: 'Mark As Unavailable'\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    value: 'active',\\\\\\\\n    label: 'Mark As Active',\\\\\\\\n    color: 'purple',\\\\\\\\n    tooltipText: 'Mark As Active'\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    value: 'inactive',\\\\\\\\n    label: 'Mark As Inactive',\\\\\\\\n    color: 'green',\\\\\\\\n    tooltipText: 'Mark As Inactive'\\\\\\\\n  }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst MultiLevelListViewOption = [\\\\\\\\n  {\\\\\\\\n    id: 'available',\\\\\\\\n    value: 'available',\\\\\\\\n    label: 'Mark As Available',\\\\\\\\n    color: 'blue',\\\\\\\\n    tooltipText: 'Mark As Available',\\\\\\\\n    options: [\\\\\\\\n      {\\\\\\\\n        id: 'available',\\\\\\\\n        value: 'available',\\\\\\\\n        label: 'Mark As Child Available',\\\\\\\\n        color: 'blue',\\\\\\\\n        tooltipText: 'Mark As Child Available'\\\\\\\\n      },\\\\\\\\n      {\\\\\\\\n        id: 'unavailable',\\\\\\\\n        value: 'unavailable',\\\\\\\\n        label: 'Mark As Child Unavailable',\\\\\\\\n        color: 'red',\\\\\\\\n        tooltipText: 'Mark As Child Unavailable'\\\\\\\\n      },\\\\\\\\n      {\\\\\\\\n        id: 'active',\\\\\\\\n        value: 'active',\\\\\\\\n        label: 'Mark As Child Active',\\\\\\\\n        color: 'purple',\\\\\\\\n        tooltipText: 'Mark As Child Active'\\\\\\\\n      },\\\\\\\\n      {\\\\\\\\n        id: 'inactive',\\\\\\\\n        value: 'inactive',\\\\\\\\n        label: 'Mark As Child Inactive',\\\\\\\\n        color: 'green',\\\\\\\\n        tooltipText: 'Mark As Child Inactive',\\\\\\\\n        options: [\\\\\\\\n          {\\\\\\\\n            id: 'available',\\\\\\\\n            value: 'available',\\\\\\\\n            label: 'Mark As Grand Child Available',\\\\\\\\n            color: 'blue',\\\\\\\\n            tooltipText: 'Mark As Grand Child Available'\\\\\\\\n          },\\\\\\\\n          {\\\\\\\\n            id: 'unavailable',\\\\\\\\n            value: 'unavailable',\\\\\\\\n            label: 'Mark As Grand Child Unavailable',\\\\\\\\n            color: 'red',\\\\\\\\n            tooltipText: 'Mark As Grand Child Unavailable'\\\\\\\\n          }\\\\\\\\n        ]\\\\\\\\n      }\\\\\\\\n    ]\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    id: 'unavailable',\\\\\\\\n    value: 'unavailable',\\\\\\\\n    label: 'Mark As Unavailable',\\\\\\\\n    color: 'red',\\\\\\\\n    tooltipText: 'Mark As Unavailable'\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    id: 'active',\\\\\\\\n    value: 'active',\\\\\\\\n    label: 'Mark As Active',\\\\\\\\n    color: 'purple',\\\\\\\\n    tooltipText: 'Mark As Active'\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    id: 'inactive',\\\\\\\\n    value: 'inactive',\\\\\\\\n    label: 'Mark As Inactive',\\\\\\\\n    color: 'green',\\\\\\\\n    tooltipText: 'Mark As Inactive'\\\\\\\\n  }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst paginationOptions = [\\\\\\\\n  { value: '25', label: '25 per page', title: '25 per page' },\\\\\\\\n  { value: '50', label: '50 per page', title: '50 per page' },\\\\\\\\n  { value: '100', label: '100 per page', title: '100 per page' },\\\\\\\\n  { value: '200', label: '200 per page', title: '200 per page' }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst columnOption = [\\\\\\\\n  { value: 'ascending', label: 'Sort Ascending', iconVariant: 'hide-menu-box' },\\\\\\\\n  {\\\\\\\\n    value: 'descending',\\\\\\\\n    label: 'Sort Descending',\\\\\\\\n    iconVariant: 'hub-location'\\\\\\\\n  },\\\\\\\\n  { value: 'hideColumn', label: 'Hide Column', iconVariant: 'close' },\\\\\\\\n  { value: 'pinLeft', label: 'Pin Left', iconVariant: 'angle-left' },\\\\\\\\n  { value: 'pinright', label: 'Pin Right', iconVariant: 'angle-right-thin' }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst options = [\\\\\\\\n  {\\\\\\\\n    value: 'emailVerificationPending',\\\\\\\\n    label: 'Email Verification Pending Shipper'\\\\\\\\n  },\\\\\\\\n  { value: 'allShippers', label: 'All Shippers' },\\\\\\\\n  { value: 'approvalPendingShippers', label: 'Approval Pending Shippers' }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst datePickerOptions = [\\\\\\\\n  { value: 'January', label: 'January' },\\\\\\\\n  { value: 'February', label: 'February' },\\\\\\\\n  { value: 'March', label: 'March' },\\\\\\\\n  { value: 'April', label: 'April' },\\\\\\\\n  { value: 'May', label: 'May' },\\\\\\\\n  { value: 'June', label: 'June' },\\\\\\\\n  { value: 'July', label: 'July' },\\\\\\\\n  { value: 'August', label: 'August' },\\\\\\\\n  { value: 'September', label: 'September' },\\\\\\\\n  { value: 'October', label: 'October' },\\\\\\\\n  { value: 'November', label: 'November' },\\\\\\\\n  { value: 'December', label: 'December' }\\\\\\\\n]\\\\\\\\n\\\\\\\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\\\\\\\nexport const ButtonDropdown = () => (\\\\\\\\n  <ThemeWrapper>\\\\\\\\n    <Box p='2em' bgColor='grey.50'>\\\\\\\\n      <IconDropdown\\\\\\\\n        variant={text('varaint', 'button-dropdown') as tSelectVariant}\\\\\\\\n        optionList={object('optionList', ListViewOption)}\\\\\\\\n        width={text('width', '120px')}\\\\\\\\n        menuIsOpen={boolean('menuIsOpen', false)}\\\\\\\\n        iconButtonDetails={array('iconList', [\\\\\\\\n          'hide-menu-box',\\\\\\\\n          'More',\\\\\\\\n          'angle-down'\\\\\\\\n        ])}\\\\\\\\n        primary={boolean('primary', false)}\\\\\\\\n        intent={text('intent', 'page') as tIntent}\\\\\\\\n        onChange={action('Value Changed')}\\\\\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n        disabled={boolean('disabled', false)}\\\\\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\\\\\n        tooltipProps={{\\\\\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </Box>\\\\\\\\n  </ThemeWrapper>\\\\\\\\n)\\\\\\\\n\\\\\\\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\\\\\\\nexport const TextDropdown = () => (\\\\\\\\n  <ThemeWrapper>\\\\\\\\n    <Box p='2em' bgColor='grey.50'>\\\\\\\\n      <IconDropdown\\\\\\\\n        variant={text('varaint', 'text-dropdown') as tSelectVariant}\\\\\\\\n        optionList={object('optionList', ListViewOption)}\\\\\\\\n        width={text('width', '120px')}\\\\\\\\n        menuIsOpen={boolean('menuIsOpen', false)}\\\\\\\\n        iconButtonDetails={array('iconList', [\\\\\\\\n          'hide-menu-box',\\\\\\\\n          'More',\\\\\\\\n          'angle-down'\\\\\\\\n        ])}\\\\\\\\n        primary={boolean('primary', false)}\\\\\\\\n        intent={text('intent', 'page') as tIntent}\\\\\\\\n        onChange={action('Value Changed')}\\\\\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n        disabled={boolean('disabled', false)}\\\\\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\\\\\n        tooltipProps={{\\\\\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </Box>\\\\\\\\n  </ThemeWrapper>\\\\\\\\n)\\\\\\\\n\\\\\\\\nexport const MultiLevelBreadCrumb = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='2em' bgColor='grey.50'>\\\\\\\\n        <IconDropdown\\\\\\\\n          variant={text('variant', 'multilevel-breadcrumb') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', MultiLevelListViewOption)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          value={text('value', 'strawberry')}\\\\\\\\n          width={text('width', '260px')}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n  }\\\\\\\\n\\\\\\\\nexport const MultiLevelButtonDropdown = () => (\\\\\\\\n  <ThemeWrapper>\\\\\\\\n    <Box p='2em' bgColor='grey.50'>\\\\\\\\n      <IconDropdown\\\\\\\\n        variant={\\\\\\\\n          text('varaint', 'multilevel-button-dropdown') as tSelectVariant\\\\\\\\n        }\\\\\\\\n        optionList={object('optionList', MultiLevelListViewOption)}\\\\\\\\n        width={text('width', '120px')}\\\\\\\\n        menuIsOpen\\\\\\\\n        iconButtonDetails={array('iconList', [\\\\\\\\n          'hide-menu-box',\\\\\\\\n          'More',\\\\\\\\n          'angle-down'\\\\\\\\n        ])}\\\\\\\\n        defaultOpen='right'\\\\\\\\n        primary={boolean('primary', false)}\\\\\\\\n        intent={text('intent', 'page') as tIntent}\\\\\\\\n        handleClick={(id: any) => console.log('clicked from storybook', id)}\\\\\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n        disabled={boolean('disabled', false)}\\\\\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\\\\\n        tooltipProps={{\\\\\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </Box>\\\\\\\\n  </ThemeWrapper>\\\\\\\\n)\\\\\\\\n\\\\\\\\nexport const PaginationDropdown = () => (\\\\\\\\n  <ThemeWrapper>\\\\\\\\n    <CardComponent style={{ height: '300px' }}>\\\\\\\\n      <IconDropdown\\\\\\\\n        variant={text('variant', 'pagination-size') as tSelectVariant}\\\\\\\\n        optionList={object('optionList', paginationOptions)}\\\\\\\\n        onChange={action('Value selected')}\\\\\\\\n        value={text('value', '50')}\\\\\\\\n        width={text('width', '120px')}\\\\\\\\n      />\\\\\\\\n    </CardComponent>\\\\\\\\n  </ThemeWrapper>\\\\\\\\n)\\\\\\\\n\\\\\\\\nexport const columnOptionComponent = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='2em' bgColor='grey.50'>\\\\\\\\n        <div style={{ width: '200px', margin: 'auto' }}>\\\\\\\\n          <IconDropdown\\\\\\\\n            variant={text('variant', 'column-filter') as tSelectVariant}\\\\\\\\n            optionList={object('optionList', columnOption)}\\\\\\\\n            onChange={action('Value selected')}\\\\\\\\n            width={text('width', '10px')}\\\\\\\\n            isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n          />\\\\\\\\n        </div>\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const BreadCrumbComponent = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='2em' bgColor='grey.50'>\\\\\\\\n        <IconDropdown\\\\\\\\n          variant={text('variant', 'bread-crumb') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', options)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          value={text('value', 'strawberry')}\\\\\\\\n          width={text('width', '260px')}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const DatePickerDropDown = () => (\\\\\\\\n  <ThemeWrapper>\\\\\\\\n    <CardComponent style={{ height: '200px' }}>\\\\\\\\n      <IconDropdown\\\\\\\\n        variant={text('variant', 'date-picker') as tSelectVariant}\\\\\\\\n        optionList={object('optionList', datePickerOptions)}\\\\\\\\n        onChange={action('Value selected')}\\\\\\\\n        value={text('value', '50')}\\\\\\\\n        width={text('width', '80px')}\\\\\\\\n        showDownArrow={boolean('Show Down Arrow', true)}\\\\\\\\n        isMultiRegionStyled={boolean('Is Multi Region Styled', false)}\\\\\\\\n      />\\\\\\\\n    </CardComponent>\\\\\\\\n  </ThemeWrapper>\\\\\\\\n)\\\\\\\\nconst arrayMap = [\\\\\\\\n  { variant: 'column-filter', name: 'column-filter0' },\\\\\\\\n  { variant: 'column-filter', name: 'column-filter1' },\\\\\\\\n  { variant: 'column-filter', name: 'column-filter2' }\\\\\\\\n]\\\\\\\\n\\\\\\\\nexport const columnOptionList = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='2em' bgColor='grey.50'>\\\\\\\\n        <div style={{ width: '200px', margin: 'auto' }}>\\\\\\\\n          {arrayMap.map((obj: any, index: number) => {\\\\\\\\n            return (\\\\\\\\n              <IconDropdown\\\\\\\\n                variant={text('variant', obj?.variant) as tSelectVariant}\\\\\\\\n                optionList={object('optionList', columnOption)}\\\\\\\\n                onChange={action('Value selected')}\\\\\\\\n                width={text('width', '10px')}\\\\\\\\n                isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n                key={index}\\\\\\\\n              />\\\\\\\\n            )\\\\\\\\n          })}\\\\\\\\n        </div>\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const DropdownUniversal = () => {\\\\\\\\n  // reference to style\\\\\\\\n  // const theme = useContext(ThemeContext)\\\\\\\\n  // const borderBottom = `1px solid ${theme?.colors?.grey['A800']}`\\\\\\\\n  // const customStyle = {\\\\\\\\n  //   control: (provided: any) => ({\\\\\\\\n  //     ...provided,\\\\\\\\n  //     borderStyle: 'none',\\\\\\\\n  //     borderBottom,\\\\\\\\n  //     borderRadius: '0px',\\\\\\\\n  //     boxShadow: 'none',\\\\\\\\n  //     borderColor: theme?.colors?.grey?.A800,\\\\\\\\n  //     '&:focus': {\\\\\\\\n  //       borderStyle: 'none',\\\\\\\\n  //       borderBottom,\\\\\\\\n  //       boxShadow: 'none',\\\\\\\\n  //       borderColor: theme?.colors?.grey?.A800\\\\\\\\n  //     },\\\\\\\\n  //     '&:hover': {\\\\\\\\n  //       borderStyle: 'none',\\\\\\\\n  //       borderBottom,\\\\\\\\n  //       boxShadow: 'none',\\\\\\\\n  //       borderColor: theme?.colors?.grey?.A800\\\\\\\\n  //     }\\\\\\\\n  //   }),\\\\\\\\n  //   option: (provided: any, state: any) => ({\\\\\\\\n  //     ...provided,\\\\\\\\n  //     backgroundColor: state?.isSelected\\\\\\\\n  //       ? theme?.colors?.primary?.main\\\\\\\\n  //       : theme?.colors?.white,\\\\\\\\n  //     '&:hover': {\\\\\\\\n  //       backgroundColor: state?.isSelected\\\\\\\\n  //         ? theme?.colors?.primary?.main\\\\\\\\n  //         : theme?.colors?.grey['50']\\\\\\\\n  //     }\\\\\\\\n  //   }),\\\\\\\\n\\\\\\\\n  //   menu: (provided: any, state: any) => ({\\\\\\\\n  //     ...provided,\\\\\\\\n  //     backgroundColor: state?.isSelected\\\\\\\\n  //       ? theme.colors.primary.main\\\\\\\\n  //       : theme?.colors?.white,\\\\\\\\n  //     borderRadius: '2px',\\\\\\\\n  //     '&:hover': {\\\\\\\\n  //       backgroundColor: state?.isSelected\\\\\\\\n  //         ? theme?.colors?.primary?.main\\\\\\\\n  //         : theme?.colors?.white\\\\\\\\n  //     },\\\\\\\\n  //     marginTop: '5px',\\\\\\\\n  //     marginLeft: '16px',\\\\\\\\n  //     width: '90%'\\\\\\\\n  //   }),\\\\\\\\n  //   menuList: (provided: any) => ({\\\\\\\\n  //     ...provided,\\\\\\\\n  //     marginTop: '0px'\\\\\\\\n  //   }),\\\\\\\\n  //   valueContainer: (provided: any) => ({\\\\\\\\n  //     ...provided,\\\\\\\\n  //     padding: '0px'\\\\\\\\n  //   })\\\\\\\\n  // }\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='2em' bgColor='grey.50'>\\\\\\\\n        <IconDropdown\\\\\\\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', ListViewOption)}\\\\\\\\n          width={text('width', '120px')}\\\\\\\\n          menuIsOpen={boolean('menuIsOpen', false)}\\\\\\\\n          primary={boolean('primary', false)}\\\\\\\\n          intent={text('intent', 'page') as tIntent}\\\\\\\\n          onChange={action('Value Changed')}\\\\\\\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n          value='available'\\\\\\\\n          optionComponent={({ selectedOption }: any) => {\\\\\\\\n            return (\\\\\\\\n              <div>\\\\\\\\n                <div>{selectedOption?.color}</div>\\\\\\\\n                <div>{selectedOption?.label}</div>\\\\\\\\n              </div>\\\\\\\\n            )\\\\\\\\n          }}\\\\\\\\n          // customStyle={customStyle}\\\\\\\\n        >\\\\\\\\n          {({\\\\\\\\n            selectedOption,\\\\\\\\n            menuIsOpen,\\\\\\\\n            setMenuIsOpen\\\\\\\\n          }: IUniversalDropdownChildren) => {\\\\\\\\n            return (\\\\\\\\n              <Button\\\\\\\\n                onClick={() => {\\\\\\\\n                  setMenuIsOpen(!menuIsOpen)\\\\\\\\n                  action('Universal open/closed')(menuIsOpen)\\\\\\\\n                }}\\\\\\\\n                color={text('color', 'white')}\\\\\\\\n                bgColor={text('bgColor', 'black')}\\\\\\\\n                fullWidth={boolean('fullWidth', false)}\\\\\\\\n              >\\\\\\\\n                {selectedOption?.label}\\\\\\\\n              </Button>\\\\\\\\n            )\\\\\\\\n          }}\\\\\\\\n        </IconDropdown>\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const TextFieldDropdown = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='2em' bgColor='grey.50'>\\\\\\\\n        <IconDropdown\\\\\\\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', ListViewOption)}\\\\\\\\n          width={text('width', '120px')}\\\\\\\\n          menuIsOpen={boolean('menuIsOpen', false)}\\\\\\\\n          primary={boolean('primary', false)}\\\\\\\\n          intent={text('intent', 'page') as tIntent}\\\\\\\\n          onChange={action('Value Changed')}\\\\\\\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n          value='available'\\\\\\\\n          optionComponent={({ selectedOption }: any) => {\\\\\\\\n            return (\\\\\\\\n              <div>\\\\\\\\n                <div>{selectedOption?.color}</div>\\\\\\\\n                <div>{selectedOption?.label}</div>\\\\\\\\n              </div>\\\\\\\\n            )\\\\\\\\n          }}\\\\\\\\n          // customStyle={customStyle}\\\\\\\\n        >\\\\\\\\n          {({\\\\\\\\n            selectedOption,\\\\\\\\n            menuIsOpen,\\\\\\\\n            setMenuIsOpen\\\\\\\\n          }: IUniversalDropdownChildren) => {\\\\\\\\n            return (\\\\\\\\n              <TextInput\\\\\\\\n                id='someId'\\\\\\\\n                name='someName'\\\\\\\\n                className='someClassName'\\\\\\\\n                label={text('label', 'Username')}\\\\\\\\n                labelColor={text('labelColor', 'text.inputLabel.default')}\\\\\\\\n                placeholder={text('placeholder', 'Enter text here...')}\\\\\\\\n                maxLength={number('maxLength', 10)}\\\\\\\\n                error={boolean('error', false)}\\\\\\\\n                errorMessage={text('errorMessage', '')}\\\\\\\\n                required={boolean('required', false)}\\\\\\\\n                fullWidth={boolean('fullWidth', false)}\\\\\\\\n                onChange={action('Triggered: onChange')}\\\\\\\\n                onClick={() => {\\\\\\\\n                  setMenuIsOpen(!menuIsOpen)\\\\\\\\n                  action('universal open/closed')(menuIsOpen)\\\\\\\\n                }}\\\\\\\\n                value={selectedOption?.value}\\\\\\\\n              />\\\\\\\\n            )\\\\\\\\n          }}\\\\\\\\n        </IconDropdown>\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\";\\\\n// @ts-ignore\\\\nvar __ADDS_MAP__ = {};\\\\n// @ts-ignore\\\\nvar __MAIN_FILE_LOCATION__ = \\\\\\\"/IconDropdown.stories.tsx\\\\\\\";\\\\n// @ts-ignore\\\\nvar __MODULE_DEPENDENCIES__ = [];\\\\n// @ts-ignore\\\\nvar __LOCAL_DEPENDENCIES__ = {};\\\\n// @ts-ignore\\\\nvar __IDS_TO_FRAMEWORKS__ = {};\\\\n        \\\\nimport { action } from '@storybook/addon-actions'\\\\nimport {\\\\n  array,\\\\n  boolean,\\\\n  number,\\\\n  object,\\\\n  text,\\\\n  withKnobs\\\\n} from '@storybook/addon-knobs'\\\\nimport React from 'react'\\\\nimport IconDropdown from '.'\\\\nimport { path } from '..'\\\\nimport { Box } from '../../..'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport Button, { tIntent } from '../../atoms/Button'\\\\nimport CardComponent from '../../atoms/Card'\\\\nimport { tPlacement } from '../../../utilities/types'\\\\nimport {\\\\n  IUniversalDropdownChildren,\\\\n  tSelectVariant\\\\n} from '../DropDown/interface'\\\\nimport TextInput from '../TextInput'\\\\n\\\\nexport default {parameters: {\\\\\\\"storySource\\\\\\\":{\\\\\\\"source\\\\\\\":\\\\\\\"import { action } from '@storybook/addon-actions'\\\\\\\\nimport {\\\\\\\\n  array,\\\\\\\\n  boolean,\\\\\\\\n  number,\\\\\\\\n  object,\\\\\\\\n  text,\\\\\\\\n  withKnobs\\\\\\\\n} from '@storybook/addon-knobs'\\\\\\\\nimport React from 'react'\\\\\\\\nimport IconDropdown from '.'\\\\\\\\nimport { path } from '..'\\\\\\\\nimport { Box } from '../../..'\\\\\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\\\\\nimport Button, { tIntent } from '../../atoms/Button'\\\\\\\\nimport CardComponent from '../../atoms/Card'\\\\\\\\nimport { tPlacement } from '../../../utilities/types'\\\\\\\\nimport {\\\\\\\\n  IUniversalDropdownChildren,\\\\\\\\n  tSelectVariant\\\\\\\\n} from '../DropDown/interface'\\\\\\\\nimport TextInput from '../TextInput'\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/IconDropdown`,\\\\\\\\n  decorators: [withKnobs],\\\\\\\\n  component: IconDropdown\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst ListViewOption = [\\\\\\\\n  {\\\\\\\\n    value: 'available',\\\\\\\\n    label: 'Mark As Available',\\\\\\\\n    color: 'blue',\\\\\\\\n    tooltipText: 'Mark As Available',\\\\\\\\n    isDisabled: true\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    value: 'unavailable',\\\\\\\\n    label: 'Mark As Unavailable',\\\\\\\\n    color: 'red',\\\\\\\\n    tooltipText: 'Mark As Unavailable'\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    value: 'active',\\\\\\\\n    label: 'Mark As Active',\\\\\\\\n    color: 'purple',\\\\\\\\n    tooltipText: 'Mark As Active'\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    value: 'inactive',\\\\\\\\n    label: 'Mark As Inactive',\\\\\\\\n    color: 'green',\\\\\\\\n    tooltipText: 'Mark As Inactive'\\\\\\\\n  }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst MultiLevelListViewOption = [\\\\\\\\n  {\\\\\\\\n    id: 'available',\\\\\\\\n    value: 'available',\\\\\\\\n    label: 'Mark As Available',\\\\\\\\n    color: 'blue',\\\\\\\\n    tooltipText: 'Mark As Available',\\\\\\\\n    options: [\\\\\\\\n      {\\\\\\\\n        id: 'available',\\\\\\\\n        value: 'available',\\\\\\\\n        label: 'Mark As Child Available',\\\\\\\\n        color: 'blue',\\\\\\\\n        tooltipText: 'Mark As Child Available'\\\\\\\\n      },\\\\\\\\n      {\\\\\\\\n        id: 'unavailable',\\\\\\\\n        value: 'unavailable',\\\\\\\\n        label: 'Mark As Child Unavailable',\\\\\\\\n        color: 'red',\\\\\\\\n        tooltipText: 'Mark As Child Unavailable'\\\\\\\\n      },\\\\\\\\n      {\\\\\\\\n        id: 'active',\\\\\\\\n        value: 'active',\\\\\\\\n        label: 'Mark As Child Active',\\\\\\\\n        color: 'purple',\\\\\\\\n        tooltipText: 'Mark As Child Active'\\\\\\\\n      },\\\\\\\\n      {\\\\\\\\n        id: 'inactive',\\\\\\\\n        value: 'inactive',\\\\\\\\n        label: 'Mark As Child Inactive',\\\\\\\\n        color: 'green',\\\\\\\\n        tooltipText: 'Mark As Child Inactive',\\\\\\\\n        options: [\\\\\\\\n          {\\\\\\\\n            id: 'available',\\\\\\\\n            value: 'available',\\\\\\\\n            label: 'Mark As Grand Child Available',\\\\\\\\n            color: 'blue',\\\\\\\\n            tooltipText: 'Mark As Grand Child Available'\\\\\\\\n          },\\\\\\\\n          {\\\\\\\\n            id: 'unavailable',\\\\\\\\n            value: 'unavailable',\\\\\\\\n            label: 'Mark As Grand Child Unavailable',\\\\\\\\n            color: 'red',\\\\\\\\n            tooltipText: 'Mark As Grand Child Unavailable'\\\\\\\\n          }\\\\\\\\n        ]\\\\\\\\n      }\\\\\\\\n    ]\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    id: 'unavailable',\\\\\\\\n    value: 'unavailable',\\\\\\\\n    label: 'Mark As Unavailable',\\\\\\\\n    color: 'red',\\\\\\\\n    tooltipText: 'Mark As Unavailable'\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    id: 'active',\\\\\\\\n    value: 'active',\\\\\\\\n    label: 'Mark As Active',\\\\\\\\n    color: 'purple',\\\\\\\\n    tooltipText: 'Mark As Active'\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    id: 'inactive',\\\\\\\\n    value: 'inactive',\\\\\\\\n    label: 'Mark As Inactive',\\\\\\\\n    color: 'green',\\\\\\\\n    tooltipText: 'Mark As Inactive'\\\\\\\\n  }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst paginationOptions = [\\\\\\\\n  { value: '25', label: '25 per page', title: '25 per page' },\\\\\\\\n  { value: '50', label: '50 per page', title: '50 per page' },\\\\\\\\n  { value: '100', label: '100 per page', title: '100 per page' },\\\\\\\\n  { value: '200', label: '200 per page', title: '200 per page' }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst columnOption = [\\\\\\\\n  { value: 'ascending', label: 'Sort Ascending', iconVariant: 'hide-menu-box' },\\\\\\\\n  {\\\\\\\\n    value: 'descending',\\\\\\\\n    label: 'Sort Descending',\\\\\\\\n    iconVariant: 'hub-location'\\\\\\\\n  },\\\\\\\\n  { value: 'hideColumn', label: 'Hide Column', iconVariant: 'close' },\\\\\\\\n  { value: 'pinLeft', label: 'Pin Left', iconVariant: 'angle-left' },\\\\\\\\n  { value: 'pinright', label: 'Pin Right', iconVariant: 'angle-right-thin' }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst options = [\\\\\\\\n  {\\\\\\\\n    value: 'emailVerificationPending',\\\\\\\\n    label: 'Email Verification Pending Shipper'\\\\\\\\n  },\\\\\\\\n  { value: 'allShippers', label: 'All Shippers' },\\\\\\\\n  { value: 'approvalPendingShippers', label: 'Approval Pending Shippers' }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst datePickerOptions = [\\\\\\\\n  { value: 'January', label: 'January' },\\\\\\\\n  { value: 'February', label: 'February' },\\\\\\\\n  { value: 'March', label: 'March' },\\\\\\\\n  { value: 'April', label: 'April' },\\\\\\\\n  { value: 'May', label: 'May' },\\\\\\\\n  { value: 'June', label: 'June' },\\\\\\\\n  { value: 'July', label: 'July' },\\\\\\\\n  { value: 'August', label: 'August' },\\\\\\\\n  { value: 'September', label: 'September' },\\\\\\\\n  { value: 'October', label: 'October' },\\\\\\\\n  { value: 'November', label: 'November' },\\\\\\\\n  { value: 'December', label: 'December' }\\\\\\\\n]\\\\\\\\n\\\\\\\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\\\\\\\nexport const ButtonDropdown = () => (\\\\\\\\n  <ThemeWrapper>\\\\\\\\n    <Box p='2em' bgColor='grey.50'>\\\\\\\\n      <IconDropdown\\\\\\\\n        variant={text('varaint', 'button-dropdown') as tSelectVariant}\\\\\\\\n        optionList={object('optionList', ListViewOption)}\\\\\\\\n        width={text('width', '120px')}\\\\\\\\n        menuIsOpen={boolean('menuIsOpen', false)}\\\\\\\\n        iconButtonDetails={array('iconList', [\\\\\\\\n          'hide-menu-box',\\\\\\\\n          'More',\\\\\\\\n          'angle-down'\\\\\\\\n        ])}\\\\\\\\n        primary={boolean('primary', false)}\\\\\\\\n        intent={text('intent', 'page') as tIntent}\\\\\\\\n        onChange={action('Value Changed')}\\\\\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n        disabled={boolean('disabled', false)}\\\\\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\\\\\n        tooltipProps={{\\\\\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </Box>\\\\\\\\n  </ThemeWrapper>\\\\\\\\n)\\\\\\\\n\\\\\\\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\\\\\\\nexport const TextDropdown = () => (\\\\\\\\n  <ThemeWrapper>\\\\\\\\n    <Box p='2em' bgColor='grey.50'>\\\\\\\\n      <IconDropdown\\\\\\\\n        variant={text('varaint', 'text-dropdown') as tSelectVariant}\\\\\\\\n        optionList={object('optionList', ListViewOption)}\\\\\\\\n        width={text('width', '120px')}\\\\\\\\n        menuIsOpen={boolean('menuIsOpen', false)}\\\\\\\\n        iconButtonDetails={array('iconList', [\\\\\\\\n          'hide-menu-box',\\\\\\\\n          'More',\\\\\\\\n          'angle-down'\\\\\\\\n        ])}\\\\\\\\n        primary={boolean('primary', false)}\\\\\\\\n        intent={text('intent', 'page') as tIntent}\\\\\\\\n        onChange={action('Value Changed')}\\\\\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n        disabled={boolean('disabled', false)}\\\\\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\\\\\n        tooltipProps={{\\\\\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </Box>\\\\\\\\n  </ThemeWrapper>\\\\\\\\n)\\\\\\\\n\\\\\\\\nexport const MultiLevelBreadCrumb = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='2em' bgColor='grey.50'>\\\\\\\\n        <IconDropdown\\\\\\\\n          variant={text('variant', 'multilevel-breadcrumb') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', MultiLevelListViewOption)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          value={text('value', 'strawberry')}\\\\\\\\n          width={text('width', '260px')}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n  }\\\\\\\\n\\\\\\\\nexport const MultiLevelButtonDropdown = () => (\\\\\\\\n  <ThemeWrapper>\\\\\\\\n    <Box p='2em' bgColor='grey.50'>\\\\\\\\n      <IconDropdown\\\\\\\\n        variant={\\\\\\\\n          text('varaint', 'multilevel-button-dropdown') as tSelectVariant\\\\\\\\n        }\\\\\\\\n        optionList={object('optionList', MultiLevelListViewOption)}\\\\\\\\n        width={text('width', '120px')}\\\\\\\\n        menuIsOpen\\\\\\\\n        iconButtonDetails={array('iconList', [\\\\\\\\n          'hide-menu-box',\\\\\\\\n          'More',\\\\\\\\n          'angle-down'\\\\\\\\n        ])}\\\\\\\\n        defaultOpen='right'\\\\\\\\n        primary={boolean('primary', false)}\\\\\\\\n        intent={text('intent', 'page') as tIntent}\\\\\\\\n        handleClick={(id: any) => console.log('clicked from storybook', id)}\\\\\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n        disabled={boolean('disabled', false)}\\\\\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\\\\\n        tooltipProps={{\\\\\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </Box>\\\\\\\\n  </ThemeWrapper>\\\\\\\\n)\\\\\\\\n\\\\\\\\nexport const PaginationDropdown = () => (\\\\\\\\n  <ThemeWrapper>\\\\\\\\n    <CardComponent style={{ height: '300px' }}>\\\\\\\\n      <IconDropdown\\\\\\\\n        variant={text('variant', 'pagination-size') as tSelectVariant}\\\\\\\\n        optionList={object('optionList', paginationOptions)}\\\\\\\\n        onChange={action('Value selected')}\\\\\\\\n        value={text('value', '50')}\\\\\\\\n        width={text('width', '120px')}\\\\\\\\n      />\\\\\\\\n    </CardComponent>\\\\\\\\n  </ThemeWrapper>\\\\\\\\n)\\\\\\\\n\\\\\\\\nexport const columnOptionComponent = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='2em' bgColor='grey.50'>\\\\\\\\n        <div style={{ width: '200px', margin: 'auto' }}>\\\\\\\\n          <IconDropdown\\\\\\\\n            variant={text('variant', 'column-filter') as tSelectVariant}\\\\\\\\n            optionList={object('optionList', columnOption)}\\\\\\\\n            onChange={action('Value selected')}\\\\\\\\n            width={text('width', '10px')}\\\\\\\\n            isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n          />\\\\\\\\n        </div>\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const BreadCrumbComponent = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='2em' bgColor='grey.50'>\\\\\\\\n        <IconDropdown\\\\\\\\n          variant={text('variant', 'bread-crumb') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', options)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          value={text('value', 'strawberry')}\\\\\\\\n          width={text('width', '260px')}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const DatePickerDropDown = () => (\\\\\\\\n  <ThemeWrapper>\\\\\\\\n    <CardComponent style={{ height: '200px' }}>\\\\\\\\n      <IconDropdown\\\\\\\\n        variant={text('variant', 'date-picker') as tSelectVariant}\\\\\\\\n        optionList={object('optionList', datePickerOptions)}\\\\\\\\n        onChange={action('Value selected')}\\\\\\\\n        value={text('value', '50')}\\\\\\\\n        width={text('width', '80px')}\\\\\\\\n        showDownArrow={boolean('Show Down Arrow', true)}\\\\\\\\n        isMultiRegionStyled={boolean('Is Multi Region Styled', false)}\\\\\\\\n      />\\\\\\\\n    </CardComponent>\\\\\\\\n  </ThemeWrapper>\\\\\\\\n)\\\\\\\\nconst arrayMap = [\\\\\\\\n  { variant: 'column-filter', name: 'column-filter0' },\\\\\\\\n  { variant: 'column-filter', name: 'column-filter1' },\\\\\\\\n  { variant: 'column-filter', name: 'column-filter2' }\\\\\\\\n]\\\\\\\\n\\\\\\\\nexport const columnOptionList = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='2em' bgColor='grey.50'>\\\\\\\\n        <div style={{ width: '200px', margin: 'auto' }}>\\\\\\\\n          {arrayMap.map((obj: any, index: number) => {\\\\\\\\n            return (\\\\\\\\n              <IconDropdown\\\\\\\\n                variant={text('variant', obj?.variant) as tSelectVariant}\\\\\\\\n                optionList={object('optionList', columnOption)}\\\\\\\\n                onChange={action('Value selected')}\\\\\\\\n                width={text('width', '10px')}\\\\\\\\n                isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n                key={index}\\\\\\\\n              />\\\\\\\\n            )\\\\\\\\n          })}\\\\\\\\n        </div>\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const DropdownUniversal = () => {\\\\\\\\n  // reference to style\\\\\\\\n  // const theme = useContext(ThemeContext)\\\\\\\\n  // const borderBottom = `1px solid ${theme?.colors?.grey['A800']}`\\\\\\\\n  // const customStyle = {\\\\\\\\n  //   control: (provided: any) => ({\\\\\\\\n  //     ...provided,\\\\\\\\n  //     borderStyle: 'none',\\\\\\\\n  //     borderBottom,\\\\\\\\n  //     borderRadius: '0px',\\\\\\\\n  //     boxShadow: 'none',\\\\\\\\n  //     borderColor: theme?.colors?.grey?.A800,\\\\\\\\n  //     '&:focus': {\\\\\\\\n  //       borderStyle: 'none',\\\\\\\\n  //       borderBottom,\\\\\\\\n  //       boxShadow: 'none',\\\\\\\\n  //       borderColor: theme?.colors?.grey?.A800\\\\\\\\n  //     },\\\\\\\\n  //     '&:hover': {\\\\\\\\n  //       borderStyle: 'none',\\\\\\\\n  //       borderBottom,\\\\\\\\n  //       boxShadow: 'none',\\\\\\\\n  //       borderColor: theme?.colors?.grey?.A800\\\\\\\\n  //     }\\\\\\\\n  //   }),\\\\\\\\n  //   option: (provided: any, state: any) => ({\\\\\\\\n  //     ...provided,\\\\\\\\n  //     backgroundColor: state?.isSelected\\\\\\\\n  //       ? theme?.colors?.primary?.main\\\\\\\\n  //       : theme?.colors?.white,\\\\\\\\n  //     '&:hover': {\\\\\\\\n  //       backgroundColor: state?.isSelected\\\\\\\\n  //         ? theme?.colors?.primary?.main\\\\\\\\n  //         : theme?.colors?.grey['50']\\\\\\\\n  //     }\\\\\\\\n  //   }),\\\\\\\\n\\\\\\\\n  //   menu: (provided: any, state: any) => ({\\\\\\\\n  //     ...provided,\\\\\\\\n  //     backgroundColor: state?.isSelected\\\\\\\\n  //       ? theme.colors.primary.main\\\\\\\\n  //       : theme?.colors?.white,\\\\\\\\n  //     borderRadius: '2px',\\\\\\\\n  //     '&:hover': {\\\\\\\\n  //       backgroundColor: state?.isSelected\\\\\\\\n  //         ? theme?.colors?.primary?.main\\\\\\\\n  //         : theme?.colors?.white\\\\\\\\n  //     },\\\\\\\\n  //     marginTop: '5px',\\\\\\\\n  //     marginLeft: '16px',\\\\\\\\n  //     width: '90%'\\\\\\\\n  //   }),\\\\\\\\n  //   menuList: (provided: any) => ({\\\\\\\\n  //     ...provided,\\\\\\\\n  //     marginTop: '0px'\\\\\\\\n  //   }),\\\\\\\\n  //   valueContainer: (provided: any) => ({\\\\\\\\n  //     ...provided,\\\\\\\\n  //     padding: '0px'\\\\\\\\n  //   })\\\\\\\\n  // }\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='2em' bgColor='grey.50'>\\\\\\\\n        <IconDropdown\\\\\\\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', ListViewOption)}\\\\\\\\n          width={text('width', '120px')}\\\\\\\\n          menuIsOpen={boolean('menuIsOpen', false)}\\\\\\\\n          primary={boolean('primary', false)}\\\\\\\\n          intent={text('intent', 'page') as tIntent}\\\\\\\\n          onChange={action('Value Changed')}\\\\\\\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n          value='available'\\\\\\\\n          optionComponent={({ selectedOption }: any) => {\\\\\\\\n            return (\\\\\\\\n              <div>\\\\\\\\n                <div>{selectedOption?.color}</div>\\\\\\\\n                <div>{selectedOption?.label}</div>\\\\\\\\n              </div>\\\\\\\\n            )\\\\\\\\n          }}\\\\\\\\n          // customStyle={customStyle}\\\\\\\\n        >\\\\\\\\n          {({\\\\\\\\n            selectedOption,\\\\\\\\n            menuIsOpen,\\\\\\\\n            setMenuIsOpen\\\\\\\\n          }: IUniversalDropdownChildren) => {\\\\\\\\n            return (\\\\\\\\n              <Button\\\\\\\\n                onClick={() => {\\\\\\\\n                  setMenuIsOpen(!menuIsOpen)\\\\\\\\n                  action('Universal open/closed')(menuIsOpen)\\\\\\\\n                }}\\\\\\\\n                color={text('color', 'white')}\\\\\\\\n                bgColor={text('bgColor', 'black')}\\\\\\\\n                fullWidth={boolean('fullWidth', false)}\\\\\\\\n              >\\\\\\\\n                {selectedOption?.label}\\\\\\\\n              </Button>\\\\\\\\n            )\\\\\\\\n          }}\\\\\\\\n        </IconDropdown>\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const TextFieldDropdown = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='2em' bgColor='grey.50'>\\\\\\\\n        <IconDropdown\\\\\\\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', ListViewOption)}\\\\\\\\n          width={text('width', '120px')}\\\\\\\\n          menuIsOpen={boolean('menuIsOpen', false)}\\\\\\\\n          primary={boolean('primary', false)}\\\\\\\\n          intent={text('intent', 'page') as tIntent}\\\\\\\\n          onChange={action('Value Changed')}\\\\\\\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n          value='available'\\\\\\\\n          optionComponent={({ selectedOption }: any) => {\\\\\\\\n            return (\\\\\\\\n              <div>\\\\\\\\n                <div>{selectedOption?.color}</div>\\\\\\\\n                <div>{selectedOption?.label}</div>\\\\\\\\n              </div>\\\\\\\\n            )\\\\\\\\n          }}\\\\\\\\n          // customStyle={customStyle}\\\\\\\\n        >\\\\\\\\n          {({\\\\\\\\n            selectedOption,\\\\\\\\n            menuIsOpen,\\\\\\\\n            setMenuIsOpen\\\\\\\\n          }: IUniversalDropdownChildren) => {\\\\\\\\n            return (\\\\\\\\n              <TextInput\\\\\\\\n                id='someId'\\\\\\\\n                name='someName'\\\\\\\\n                className='someClassName'\\\\\\\\n                label={text('label', 'Username')}\\\\\\\\n                labelColor={text('labelColor', 'text.inputLabel.default')}\\\\\\\\n                placeholder={text('placeholder', 'Enter text here...')}\\\\\\\\n                maxLength={number('maxLength', 10)}\\\\\\\\n                error={boolean('error', false)}\\\\\\\\n                errorMessage={text('errorMessage', '')}\\\\\\\\n                required={boolean('required', false)}\\\\\\\\n                fullWidth={boolean('fullWidth', false)}\\\\\\\\n                onChange={action('Triggered: onChange')}\\\\\\\\n                onClick={() => {\\\\\\\\n                  setMenuIsOpen(!menuIsOpen)\\\\\\\\n                  action('universal open/closed')(menuIsOpen)\\\\\\\\n                }}\\\\\\\\n                value={selectedOption?.value}\\\\\\\\n              />\\\\\\\\n            )\\\\\\\\n          }}\\\\\\\\n        </IconDropdown>\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\",\\\\\\\"locationsMap\\\\\\\":{}},},\\\\n  title: `${path}/IconDropdown`,\\\\n  decorators: [withKnobs],\\\\n  component: IconDropdown\\\\n}\\\\n\\\\nconst ListViewOption = [\\\\n  {\\\\n    value: 'available',\\\\n    label: 'Mark As Available',\\\\n    color: 'blue',\\\\n    tooltipText: 'Mark As Available',\\\\n    isDisabled: true\\\\n  },\\\\n  {\\\\n    value: 'unavailable',\\\\n    label: 'Mark As Unavailable',\\\\n    color: 'red',\\\\n    tooltipText: 'Mark As Unavailable'\\\\n  },\\\\n  {\\\\n    value: 'active',\\\\n    label: 'Mark As Active',\\\\n    color: 'purple',\\\\n    tooltipText: 'Mark As Active'\\\\n  },\\\\n  {\\\\n    value: 'inactive',\\\\n    label: 'Mark As Inactive',\\\\n    color: 'green',\\\\n    tooltipText: 'Mark As Inactive'\\\\n  }\\\\n]\\\\n\\\\nconst MultiLevelListViewOption = [\\\\n  {\\\\n    id: 'available',\\\\n    value: 'available',\\\\n    label: 'Mark As Available',\\\\n    color: 'blue',\\\\n    tooltipText: 'Mark As Available',\\\\n    options: [\\\\n      {\\\\n        id: 'available',\\\\n        value: 'available',\\\\n        label: 'Mark As Child Available',\\\\n        color: 'blue',\\\\n        tooltipText: 'Mark As Child Available'\\\\n      },\\\\n      {\\\\n        id: 'unavailable',\\\\n        value: 'unavailable',\\\\n        label: 'Mark As Child Unavailable',\\\\n        color: 'red',\\\\n        tooltipText: 'Mark As Child Unavailable'\\\\n      },\\\\n      {\\\\n        id: 'active',\\\\n        value: 'active',\\\\n        label: 'Mark As Child Active',\\\\n        color: 'purple',\\\\n        tooltipText: 'Mark As Child Active'\\\\n      },\\\\n      {\\\\n        id: 'inactive',\\\\n        value: 'inactive',\\\\n        label: 'Mark As Child Inactive',\\\\n        color: 'green',\\\\n        tooltipText: 'Mark As Child Inactive',\\\\n        options: [\\\\n          {\\\\n            id: 'available',\\\\n            value: 'available',\\\\n            label: 'Mark As Grand Child Available',\\\\n            color: 'blue',\\\\n            tooltipText: 'Mark As Grand Child Available'\\\\n          },\\\\n          {\\\\n            id: 'unavailable',\\\\n            value: 'unavailable',\\\\n            label: 'Mark As Grand Child Unavailable',\\\\n            color: 'red',\\\\n            tooltipText: 'Mark As Grand Child Unavailable'\\\\n          }\\\\n        ]\\\\n      }\\\\n    ]\\\\n  },\\\\n  {\\\\n    id: 'unavailable',\\\\n    value: 'unavailable',\\\\n    label: 'Mark As Unavailable',\\\\n    color: 'red',\\\\n    tooltipText: 'Mark As Unavailable'\\\\n  },\\\\n  {\\\\n    id: 'active',\\\\n    value: 'active',\\\\n    label: 'Mark As Active',\\\\n    color: 'purple',\\\\n    tooltipText: 'Mark As Active'\\\\n  },\\\\n  {\\\\n    id: 'inactive',\\\\n    value: 'inactive',\\\\n    label: 'Mark As Inactive',\\\\n    color: 'green',\\\\n    tooltipText: 'Mark As Inactive'\\\\n  }\\\\n]\\\\n\\\\nconst paginationOptions = [\\\\n  { value: '25', label: '25 per page', title: '25 per page' },\\\\n  { value: '50', label: '50 per page', title: '50 per page' },\\\\n  { value: '100', label: '100 per page', title: '100 per page' },\\\\n  { value: '200', label: '200 per page', title: '200 per page' }\\\\n]\\\\n\\\\nconst columnOption = [\\\\n  { value: 'ascending', label: 'Sort Ascending', iconVariant: 'hide-menu-box' },\\\\n  {\\\\n    value: 'descending',\\\\n    label: 'Sort Descending',\\\\n    iconVariant: 'hub-location'\\\\n  },\\\\n  { value: 'hideColumn', label: 'Hide Column', iconVariant: 'close' },\\\\n  { value: 'pinLeft', label: 'Pin Left', iconVariant: 'angle-left' },\\\\n  { value: 'pinright', label: 'Pin Right', iconVariant: 'angle-right-thin' }\\\\n]\\\\n\\\\nconst options = [\\\\n  {\\\\n    value: 'emailVerificationPending',\\\\n    label: 'Email Verification Pending Shipper'\\\\n  },\\\\n  { value: 'allShippers', label: 'All Shippers' },\\\\n  { value: 'approvalPendingShippers', label: 'Approval Pending Shippers' }\\\\n]\\\\n\\\\nconst datePickerOptions = [\\\\n  { value: 'January', label: 'January' },\\\\n  { value: 'February', label: 'February' },\\\\n  { value: 'March', label: 'March' },\\\\n  { value: 'April', label: 'April' },\\\\n  { value: 'May', label: 'May' },\\\\n  { value: 'June', label: 'June' },\\\\n  { value: 'July', label: 'July' },\\\\n  { value: 'August', label: 'August' },\\\\n  { value: 'September', label: 'September' },\\\\n  { value: 'October', label: 'October' },\\\\n  { value: 'November', label: 'November' },\\\\n  { value: 'December', label: 'December' }\\\\n]\\\\n\\\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\\\nexport const ButtonDropdown = addSourceDecorator(() => (\\\\n  <ThemeWrapper>\\\\n    <Box p='2em' bgColor='grey.50'>\\\\n      <IconDropdown\\\\n        variant={text('varaint', 'button-dropdown') as tSelectVariant}\\\\n        optionList={object('optionList', ListViewOption)}\\\\n        width={text('width', '120px')}\\\\n        menuIsOpen={boolean('menuIsOpen', false)}\\\\n        iconButtonDetails={array('iconList', [\\\\n          'hide-menu-box',\\\\n          'More',\\\\n          'angle-down'\\\\n        ])}\\\\n        primary={boolean('primary', false)}\\\\n        intent={text('intent', 'page') as tIntent}\\\\n        onChange={action('Value Changed')}\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n        disabled={boolean('disabled', false)}\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\n        tooltipProps={{\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\n        }}\\\\n      />\\\\n    </Box>\\\\n  </ThemeWrapper>\\\\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\\\nexport const TextDropdown = addSourceDecorator(() => (\\\\n  <ThemeWrapper>\\\\n    <Box p='2em' bgColor='grey.50'>\\\\n      <IconDropdown\\\\n        variant={text('varaint', 'text-dropdown') as tSelectVariant}\\\\n        optionList={object('optionList', ListViewOption)}\\\\n        width={text('width', '120px')}\\\\n        menuIsOpen={boolean('menuIsOpen', false)}\\\\n        iconButtonDetails={array('iconList', [\\\\n          'hide-menu-box',\\\\n          'More',\\\\n          'angle-down'\\\\n        ])}\\\\n        primary={boolean('primary', false)}\\\\n        intent={text('intent', 'page') as tIntent}\\\\n        onChange={action('Value Changed')}\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n        disabled={boolean('disabled', false)}\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\n        tooltipProps={{\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\n        }}\\\\n      />\\\\n    </Box>\\\\n  </ThemeWrapper>\\\\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const MultiLevelBreadCrumb = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <IconDropdown\\\\n          variant={text('variant', 'multilevel-breadcrumb') as tSelectVariant}\\\\n          optionList={object('optionList', MultiLevelListViewOption)}\\\\n          onChange={action('Value selected')}\\\\n          value={text('value', 'strawberry')}\\\\n          width={text('width', '260px')}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n  }, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const MultiLevelButtonDropdown = addSourceDecorator(() => (\\\\n  <ThemeWrapper>\\\\n    <Box p='2em' bgColor='grey.50'>\\\\n      <IconDropdown\\\\n        variant={\\\\n          text('varaint', 'multilevel-button-dropdown') as tSelectVariant\\\\n        }\\\\n        optionList={object('optionList', MultiLevelListViewOption)}\\\\n        width={text('width', '120px')}\\\\n        menuIsOpen\\\\n        iconButtonDetails={array('iconList', [\\\\n          'hide-menu-box',\\\\n          'More',\\\\n          'angle-down'\\\\n        ])}\\\\n        defaultOpen='right'\\\\n        primary={boolean('primary', false)}\\\\n        intent={text('intent', 'page') as tIntent}\\\\n        handleClick={(id: any) => console.log('clicked from storybook', id)}\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n        disabled={boolean('disabled', false)}\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\n        tooltipProps={{\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\n        }}\\\\n      />\\\\n    </Box>\\\\n  </ThemeWrapper>\\\\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const PaginationDropdown = addSourceDecorator(() => (\\\\n  <ThemeWrapper>\\\\n    <CardComponent style={{ height: '300px' }}>\\\\n      <IconDropdown\\\\n        variant={text('variant', 'pagination-size') as tSelectVariant}\\\\n        optionList={object('optionList', paginationOptions)}\\\\n        onChange={action('Value selected')}\\\\n        value={text('value', '50')}\\\\n        width={text('width', '120px')}\\\\n      />\\\\n    </CardComponent>\\\\n  </ThemeWrapper>\\\\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const columnOptionComponent = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <div style={{ width: '200px', margin: 'auto' }}>\\\\n          <IconDropdown\\\\n            variant={text('variant', 'column-filter') as tSelectVariant}\\\\n            optionList={object('optionList', columnOption)}\\\\n            onChange={action('Value selected')}\\\\n            width={text('width', '10px')}\\\\n            isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n          />\\\\n        </div>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const BreadCrumbComponent = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <IconDropdown\\\\n          variant={text('variant', 'bread-crumb') as tSelectVariant}\\\\n          optionList={object('optionList', options)}\\\\n          onChange={action('Value selected')}\\\\n          value={text('value', 'strawberry')}\\\\n          width={text('width', '260px')}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const DatePickerDropDown = addSourceDecorator(() => (\\\\n  <ThemeWrapper>\\\\n    <CardComponent style={{ height: '200px' }}>\\\\n      <IconDropdown\\\\n        variant={text('variant', 'date-picker') as tSelectVariant}\\\\n        optionList={object('optionList', datePickerOptions)}\\\\n        onChange={action('Value selected')}\\\\n        value={text('value', '50')}\\\\n        width={text('width', '80px')}\\\\n        showDownArrow={boolean('Show Down Arrow', true)}\\\\n        isMultiRegionStyled={boolean('Is Multi Region Styled', false)}\\\\n      />\\\\n    </CardComponent>\\\\n  </ThemeWrapper>\\\\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\nconst arrayMap = [\\\\n  { variant: 'column-filter', name: 'column-filter0' },\\\\n  { variant: 'column-filter', name: 'column-filter1' },\\\\n  { variant: 'column-filter', name: 'column-filter2' }\\\\n]\\\\n\\\\nexport const columnOptionList = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <div style={{ width: '200px', margin: 'auto' }}>\\\\n          {arrayMap.map((obj: any, index: number) => {\\\\n            return (\\\\n              <IconDropdown\\\\n                variant={text('variant', obj?.variant) as tSelectVariant}\\\\n                optionList={object('optionList', columnOption)}\\\\n                onChange={action('Value selected')}\\\\n                width={text('width', '10px')}\\\\n                isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n                key={index}\\\\n              />\\\\n            )\\\\n          })}\\\\n        </div>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const DropdownUniversal = addSourceDecorator(() => {\\\\n  // reference to style\\\\n  // const theme = useContext(ThemeContext)\\\\n  // const borderBottom = `1px solid ${theme?.colors?.grey['A800']}`\\\\n  // const customStyle = {\\\\n  //   control: (provided: any) => ({\\\\n  //     ...provided,\\\\n  //     borderStyle: 'none',\\\\n  //     borderBottom,\\\\n  //     borderRadius: '0px',\\\\n  //     boxShadow: 'none',\\\\n  //     borderColor: theme?.colors?.grey?.A800,\\\\n  //     '&:focus': {\\\\n  //       borderStyle: 'none',\\\\n  //       borderBottom,\\\\n  //       boxShadow: 'none',\\\\n  //       borderColor: theme?.colors?.grey?.A800\\\\n  //     },\\\\n  //     '&:hover': {\\\\n  //       borderStyle: 'none',\\\\n  //       borderBottom,\\\\n  //       boxShadow: 'none',\\\\n  //       borderColor: theme?.colors?.grey?.A800\\\\n  //     }\\\\n  //   }),\\\\n  //   option: (provided: any, state: any) => ({\\\\n  //     ...provided,\\\\n  //     backgroundColor: state?.isSelected\\\\n  //       ? theme?.colors?.primary?.main\\\\n  //       : theme?.colors?.white,\\\\n  //     '&:hover': {\\\\n  //       backgroundColor: state?.isSelected\\\\n  //         ? theme?.colors?.primary?.main\\\\n  //         : theme?.colors?.grey['50']\\\\n  //     }\\\\n  //   }),\\\\n\\\\n  //   menu: (provided: any, state: any) => ({\\\\n  //     ...provided,\\\\n  //     backgroundColor: state?.isSelected\\\\n  //       ? theme.colors.primary.main\\\\n  //       : theme?.colors?.white,\\\\n  //     borderRadius: '2px',\\\\n  //     '&:hover': {\\\\n  //       backgroundColor: state?.isSelected\\\\n  //         ? theme?.colors?.primary?.main\\\\n  //         : theme?.colors?.white\\\\n  //     },\\\\n  //     marginTop: '5px',\\\\n  //     marginLeft: '16px',\\\\n  //     width: '90%'\\\\n  //   }),\\\\n  //   menuList: (provided: any) => ({\\\\n  //     ...provided,\\\\n  //     marginTop: '0px'\\\\n  //   }),\\\\n  //   valueContainer: (provided: any) => ({\\\\n  //     ...provided,\\\\n  //     padding: '0px'\\\\n  //   })\\\\n  // }\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <IconDropdown\\\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          width={text('width', '120px')}\\\\n          menuIsOpen={boolean('menuIsOpen', false)}\\\\n          primary={boolean('primary', false)}\\\\n          intent={text('intent', 'page') as tIntent}\\\\n          onChange={action('Value Changed')}\\\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n          disabled={boolean('disabled', false)}\\\\n          value='available'\\\\n          optionComponent={({ selectedOption }: any) => {\\\\n            return (\\\\n              <div>\\\\n                <div>{selectedOption?.color}</div>\\\\n                <div>{selectedOption?.label}</div>\\\\n              </div>\\\\n            )\\\\n          }}\\\\n          // customStyle={customStyle}\\\\n        >\\\\n          {({\\\\n            selectedOption,\\\\n            menuIsOpen,\\\\n            setMenuIsOpen\\\\n          }: IUniversalDropdownChildren) => {\\\\n            return (\\\\n              <Button\\\\n                onClick={() => {\\\\n                  setMenuIsOpen(!menuIsOpen)\\\\n                  action('Universal open/closed')(menuIsOpen)\\\\n                }}\\\\n                color={text('color', 'white')}\\\\n                bgColor={text('bgColor', 'black')}\\\\n                fullWidth={boolean('fullWidth', false)}\\\\n              >\\\\n                {selectedOption?.label}\\\\n              </Button>\\\\n            )\\\\n          }}\\\\n        </IconDropdown>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const TextFieldDropdown = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <IconDropdown\\\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          width={text('width', '120px')}\\\\n          menuIsOpen={boolean('menuIsOpen', false)}\\\\n          primary={boolean('primary', false)}\\\\n          intent={text('intent', 'page') as tIntent}\\\\n          onChange={action('Value Changed')}\\\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n          disabled={boolean('disabled', false)}\\\\n          value='available'\\\\n          optionComponent={({ selectedOption }: any) => {\\\\n            return (\\\\n              <div>\\\\n                <div>{selectedOption?.color}</div>\\\\n                <div>{selectedOption?.label}</div>\\\\n              </div>\\\\n            )\\\\n          }}\\\\n          // customStyle={customStyle}\\\\n        >\\\\n          {({\\\\n            selectedOption,\\\\n            menuIsOpen,\\\\n            setMenuIsOpen\\\\n          }: IUniversalDropdownChildren) => {\\\\n            return (\\\\n              <TextInput\\\\n                id='someId'\\\\n                name='someName'\\\\n                className='someClassName'\\\\n                label={text('label', 'Username')}\\\\n                labelColor={text('labelColor', 'text.inputLabel.default')}\\\\n                placeholder={text('placeholder', 'Enter text here...')}\\\\n                maxLength={number('maxLength', 10)}\\\\n                error={boolean('error', false)}\\\\n                errorMessage={text('errorMessage', '')}\\\\n                required={boolean('required', false)}\\\\n                fullWidth={boolean('fullWidth', false)}\\\\n                onChange={action('Triggered: onChange')}\\\\n                onClick={() => {\\\\n                  setMenuIsOpen(!menuIsOpen)\\\\n                  action('universal open/closed')(menuIsOpen)\\\\n                }}\\\\n                value={selectedOption?.value}\\\\n              />\\\\n            )\\\\n          }}\\\\n        </IconDropdown>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\",\\\"locationsMap\\\":{}},\\\"storySource\\\":{\\\"source\\\":\\\"import { action } from '@storybook/addon-actions'\\\\nimport {\\\\n  array,\\\\n  boolean,\\\\n  number,\\\\n  object,\\\\n  text,\\\\n  withKnobs\\\\n} from '@storybook/addon-knobs'\\\\nimport React from 'react'\\\\nimport IconDropdown from '.'\\\\nimport { path } from '..'\\\\nimport { Box } from '../../..'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport Button, { tIntent } from '../../atoms/Button'\\\\nimport CardComponent from '../../atoms/Card'\\\\nimport { tPlacement } from '../../../utilities/types'\\\\nimport {\\\\n  IUniversalDropdownChildren,\\\\n  tSelectVariant\\\\n} from '../DropDown/interface'\\\\nimport TextInput from '../TextInput'\\\\n\\\\nexport default {\\\\n  title: `${path}/IconDropdown`,\\\\n  decorators: [withKnobs],\\\\n  component: IconDropdown\\\\n}\\\\n\\\\nconst ListViewOption = [\\\\n  {\\\\n    value: 'available',\\\\n    label: 'Mark As Available',\\\\n    color: 'blue',\\\\n    tooltipText: 'Mark As Available',\\\\n    isDisabled: true\\\\n  },\\\\n  {\\\\n    value: 'unavailable',\\\\n    label: 'Mark As Unavailable',\\\\n    color: 'red',\\\\n    tooltipText: 'Mark As Unavailable'\\\\n  },\\\\n  {\\\\n    value: 'active',\\\\n    label: 'Mark As Active',\\\\n    color: 'purple',\\\\n    tooltipText: 'Mark As Active'\\\\n  },\\\\n  {\\\\n    value: 'inactive',\\\\n    label: 'Mark As Inactive',\\\\n    color: 'green',\\\\n    tooltipText: 'Mark As Inactive'\\\\n  }\\\\n]\\\\n\\\\nconst MultiLevelListViewOption = [\\\\n  {\\\\n    id: 'available',\\\\n    value: 'available',\\\\n    label: 'Mark As Available',\\\\n    color: 'blue',\\\\n    tooltipText: 'Mark As Available',\\\\n    options: [\\\\n      {\\\\n        id: 'available',\\\\n        value: 'available',\\\\n        label: 'Mark As Child Available',\\\\n        color: 'blue',\\\\n        tooltipText: 'Mark As Child Available'\\\\n      },\\\\n      {\\\\n        id: 'unavailable',\\\\n        value: 'unavailable',\\\\n        label: 'Mark As Child Unavailable',\\\\n        color: 'red',\\\\n        tooltipText: 'Mark As Child Unavailable'\\\\n      },\\\\n      {\\\\n        id: 'active',\\\\n        value: 'active',\\\\n        label: 'Mark As Child Active',\\\\n        color: 'purple',\\\\n        tooltipText: 'Mark As Child Active'\\\\n      },\\\\n      {\\\\n        id: 'inactive',\\\\n        value: 'inactive',\\\\n        label: 'Mark As Child Inactive',\\\\n        color: 'green',\\\\n        tooltipText: 'Mark As Child Inactive',\\\\n        options: [\\\\n          {\\\\n            id: 'available',\\\\n            value: 'available',\\\\n            label: 'Mark As Grand Child Available',\\\\n            color: 'blue',\\\\n            tooltipText: 'Mark As Grand Child Available'\\\\n          },\\\\n          {\\\\n            id: 'unavailable',\\\\n            value: 'unavailable',\\\\n            label: 'Mark As Grand Child Unavailable',\\\\n            color: 'red',\\\\n            tooltipText: 'Mark As Grand Child Unavailable'\\\\n          }\\\\n        ]\\\\n      }\\\\n    ]\\\\n  },\\\\n  {\\\\n    id: 'unavailable',\\\\n    value: 'unavailable',\\\\n    label: 'Mark As Unavailable',\\\\n    color: 'red',\\\\n    tooltipText: 'Mark As Unavailable'\\\\n  },\\\\n  {\\\\n    id: 'active',\\\\n    value: 'active',\\\\n    label: 'Mark As Active',\\\\n    color: 'purple',\\\\n    tooltipText: 'Mark As Active'\\\\n  },\\\\n  {\\\\n    id: 'inactive',\\\\n    value: 'inactive',\\\\n    label: 'Mark As Inactive',\\\\n    color: 'green',\\\\n    tooltipText: 'Mark As Inactive'\\\\n  }\\\\n]\\\\n\\\\nconst paginationOptions = [\\\\n  { value: '25', label: '25 per page', title: '25 per page' },\\\\n  { value: '50', label: '50 per page', title: '50 per page' },\\\\n  { value: '100', label: '100 per page', title: '100 per page' },\\\\n  { value: '200', label: '200 per page', title: '200 per page' }\\\\n]\\\\n\\\\nconst columnOption = [\\\\n  { value: 'ascending', label: 'Sort Ascending', iconVariant: 'hide-menu-box' },\\\\n  {\\\\n    value: 'descending',\\\\n    label: 'Sort Descending',\\\\n    iconVariant: 'hub-location'\\\\n  },\\\\n  { value: 'hideColumn', label: 'Hide Column', iconVariant: 'close' },\\\\n  { value: 'pinLeft', label: 'Pin Left', iconVariant: 'angle-left' },\\\\n  { value: 'pinright', label: 'Pin Right', iconVariant: 'angle-right-thin' }\\\\n]\\\\n\\\\nconst options = [\\\\n  {\\\\n    value: 'emailVerificationPending',\\\\n    label: 'Email Verification Pending Shipper'\\\\n  },\\\\n  { value: 'allShippers', label: 'All Shippers' },\\\\n  { value: 'approvalPendingShippers', label: 'Approval Pending Shippers' }\\\\n]\\\\n\\\\nconst datePickerOptions = [\\\\n  { value: 'January', label: 'January' },\\\\n  { value: 'February', label: 'February' },\\\\n  { value: 'March', label: 'March' },\\\\n  { value: 'April', label: 'April' },\\\\n  { value: 'May', label: 'May' },\\\\n  { value: 'June', label: 'June' },\\\\n  { value: 'July', label: 'July' },\\\\n  { value: 'August', label: 'August' },\\\\n  { value: 'September', label: 'September' },\\\\n  { value: 'October', label: 'October' },\\\\n  { value: 'November', label: 'November' },\\\\n  { value: 'December', label: 'December' }\\\\n]\\\\n\\\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\\\nexport const ButtonDropdown = () => (\\\\n  <ThemeWrapper>\\\\n    <Box p='2em' bgColor='grey.50'>\\\\n      <IconDropdown\\\\n        variant={text('varaint', 'button-dropdown') as tSelectVariant}\\\\n        optionList={object('optionList', ListViewOption)}\\\\n        width={text('width', '120px')}\\\\n        menuIsOpen={boolean('menuIsOpen', false)}\\\\n        iconButtonDetails={array('iconList', [\\\\n          'hide-menu-box',\\\\n          'More',\\\\n          'angle-down'\\\\n        ])}\\\\n        primary={boolean('primary', false)}\\\\n        intent={text('intent', 'page') as tIntent}\\\\n        onChange={action('Value Changed')}\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n        disabled={boolean('disabled', false)}\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\n        tooltipProps={{\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\n        }}\\\\n      />\\\\n    </Box>\\\\n  </ThemeWrapper>\\\\n)\\\\n\\\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\\\nexport const TextDropdown = () => (\\\\n  <ThemeWrapper>\\\\n    <Box p='2em' bgColor='grey.50'>\\\\n      <IconDropdown\\\\n        variant={text('varaint', 'text-dropdown') as tSelectVariant}\\\\n        optionList={object('optionList', ListViewOption)}\\\\n        width={text('width', '120px')}\\\\n        menuIsOpen={boolean('menuIsOpen', false)}\\\\n        iconButtonDetails={array('iconList', [\\\\n          'hide-menu-box',\\\\n          'More',\\\\n          'angle-down'\\\\n        ])}\\\\n        primary={boolean('primary', false)}\\\\n        intent={text('intent', 'page') as tIntent}\\\\n        onChange={action('Value Changed')}\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n        disabled={boolean('disabled', false)}\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\n        tooltipProps={{\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\n        }}\\\\n      />\\\\n    </Box>\\\\n  </ThemeWrapper>\\\\n)\\\\n\\\\nexport const MultiLevelBreadCrumb = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <IconDropdown\\\\n          variant={text('variant', 'multilevel-breadcrumb') as tSelectVariant}\\\\n          optionList={object('optionList', MultiLevelListViewOption)}\\\\n          onChange={action('Value selected')}\\\\n          value={text('value', 'strawberry')}\\\\n          width={text('width', '260px')}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n  }\\\\n\\\\nexport const MultiLevelButtonDropdown = () => (\\\\n  <ThemeWrapper>\\\\n    <Box p='2em' bgColor='grey.50'>\\\\n      <IconDropdown\\\\n        variant={\\\\n          text('varaint', 'multilevel-button-dropdown') as tSelectVariant\\\\n        }\\\\n        optionList={object('optionList', MultiLevelListViewOption)}\\\\n        width={text('width', '120px')}\\\\n        menuIsOpen\\\\n        iconButtonDetails={array('iconList', [\\\\n          'hide-menu-box',\\\\n          'More',\\\\n          'angle-down'\\\\n        ])}\\\\n        defaultOpen='right'\\\\n        primary={boolean('primary', false)}\\\\n        intent={text('intent', 'page') as tIntent}\\\\n        handleClick={(id: any) => console.log('clicked from storybook', id)}\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n        disabled={boolean('disabled', false)}\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\n        tooltipProps={{\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\n        }}\\\\n      />\\\\n    </Box>\\\\n  </ThemeWrapper>\\\\n)\\\\n\\\\nexport const PaginationDropdown = () => (\\\\n  <ThemeWrapper>\\\\n    <CardComponent style={{ height: '300px' }}>\\\\n      <IconDropdown\\\\n        variant={text('variant', 'pagination-size') as tSelectVariant}\\\\n        optionList={object('optionList', paginationOptions)}\\\\n        onChange={action('Value selected')}\\\\n        value={text('value', '50')}\\\\n        width={text('width', '120px')}\\\\n      />\\\\n    </CardComponent>\\\\n  </ThemeWrapper>\\\\n)\\\\n\\\\nexport const columnOptionComponent = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <div style={{ width: '200px', margin: 'auto' }}>\\\\n          <IconDropdown\\\\n            variant={text('variant', 'column-filter') as tSelectVariant}\\\\n            optionList={object('optionList', columnOption)}\\\\n            onChange={action('Value selected')}\\\\n            width={text('width', '10px')}\\\\n            isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n          />\\\\n        </div>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const BreadCrumbComponent = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <IconDropdown\\\\n          variant={text('variant', 'bread-crumb') as tSelectVariant}\\\\n          optionList={object('optionList', options)}\\\\n          onChange={action('Value selected')}\\\\n          value={text('value', 'strawberry')}\\\\n          width={text('width', '260px')}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const DatePickerDropDown = () => (\\\\n  <ThemeWrapper>\\\\n    <CardComponent style={{ height: '200px' }}>\\\\n      <IconDropdown\\\\n        variant={text('variant', 'date-picker') as tSelectVariant}\\\\n        optionList={object('optionList', datePickerOptions)}\\\\n        onChange={action('Value selected')}\\\\n        value={text('value', '50')}\\\\n        width={text('width', '80px')}\\\\n        showDownArrow={boolean('Show Down Arrow', true)}\\\\n        isMultiRegionStyled={boolean('Is Multi Region Styled', false)}\\\\n      />\\\\n    </CardComponent>\\\\n  </ThemeWrapper>\\\\n)\\\\nconst arrayMap = [\\\\n  { variant: 'column-filter', name: 'column-filter0' },\\\\n  { variant: 'column-filter', name: 'column-filter1' },\\\\n  { variant: 'column-filter', name: 'column-filter2' }\\\\n]\\\\n\\\\nexport const columnOptionList = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <div style={{ width: '200px', margin: 'auto' }}>\\\\n          {arrayMap.map((obj: any, index: number) => {\\\\n            return (\\\\n              <IconDropdown\\\\n                variant={text('variant', obj?.variant) as tSelectVariant}\\\\n                optionList={object('optionList', columnOption)}\\\\n                onChange={action('Value selected')}\\\\n                width={text('width', '10px')}\\\\n                isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n                key={index}\\\\n              />\\\\n            )\\\\n          })}\\\\n        </div>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const DropdownUniversal = () => {\\\\n  // reference to style\\\\n  // const theme = useContext(ThemeContext)\\\\n  // const borderBottom = `1px solid ${theme?.colors?.grey['A800']}`\\\\n  // const customStyle = {\\\\n  //   control: (provided: any) => ({\\\\n  //     ...provided,\\\\n  //     borderStyle: 'none',\\\\n  //     borderBottom,\\\\n  //     borderRadius: '0px',\\\\n  //     boxShadow: 'none',\\\\n  //     borderColor: theme?.colors?.grey?.A800,\\\\n  //     '&:focus': {\\\\n  //       borderStyle: 'none',\\\\n  //       borderBottom,\\\\n  //       boxShadow: 'none',\\\\n  //       borderColor: theme?.colors?.grey?.A800\\\\n  //     },\\\\n  //     '&:hover': {\\\\n  //       borderStyle: 'none',\\\\n  //       borderBottom,\\\\n  //       boxShadow: 'none',\\\\n  //       borderColor: theme?.colors?.grey?.A800\\\\n  //     }\\\\n  //   }),\\\\n  //   option: (provided: any, state: any) => ({\\\\n  //     ...provided,\\\\n  //     backgroundColor: state?.isSelected\\\\n  //       ? theme?.colors?.primary?.main\\\\n  //       : theme?.colors?.white,\\\\n  //     '&:hover': {\\\\n  //       backgroundColor: state?.isSelected\\\\n  //         ? theme?.colors?.primary?.main\\\\n  //         : theme?.colors?.grey['50']\\\\n  //     }\\\\n  //   }),\\\\n\\\\n  //   menu: (provided: any, state: any) => ({\\\\n  //     ...provided,\\\\n  //     backgroundColor: state?.isSelected\\\\n  //       ? theme.colors.primary.main\\\\n  //       : theme?.colors?.white,\\\\n  //     borderRadius: '2px',\\\\n  //     '&:hover': {\\\\n  //       backgroundColor: state?.isSelected\\\\n  //         ? theme?.colors?.primary?.main\\\\n  //         : theme?.colors?.white\\\\n  //     },\\\\n  //     marginTop: '5px',\\\\n  //     marginLeft: '16px',\\\\n  //     width: '90%'\\\\n  //   }),\\\\n  //   menuList: (provided: any) => ({\\\\n  //     ...provided,\\\\n  //     marginTop: '0px'\\\\n  //   }),\\\\n  //   valueContainer: (provided: any) => ({\\\\n  //     ...provided,\\\\n  //     padding: '0px'\\\\n  //   })\\\\n  // }\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <IconDropdown\\\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          width={text('width', '120px')}\\\\n          menuIsOpen={boolean('menuIsOpen', false)}\\\\n          primary={boolean('primary', false)}\\\\n          intent={text('intent', 'page') as tIntent}\\\\n          onChange={action('Value Changed')}\\\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n          disabled={boolean('disabled', false)}\\\\n          value='available'\\\\n          optionComponent={({ selectedOption }: any) => {\\\\n            return (\\\\n              <div>\\\\n                <div>{selectedOption?.color}</div>\\\\n                <div>{selectedOption?.label}</div>\\\\n              </div>\\\\n            )\\\\n          }}\\\\n          // customStyle={customStyle}\\\\n        >\\\\n          {({\\\\n            selectedOption,\\\\n            menuIsOpen,\\\\n            setMenuIsOpen\\\\n          }: IUniversalDropdownChildren) => {\\\\n            return (\\\\n              <Button\\\\n                onClick={() => {\\\\n                  setMenuIsOpen(!menuIsOpen)\\\\n                  action('Universal open/closed')(menuIsOpen)\\\\n                }}\\\\n                color={text('color', 'white')}\\\\n                bgColor={text('bgColor', 'black')}\\\\n                fullWidth={boolean('fullWidth', false)}\\\\n              >\\\\n                {selectedOption?.label}\\\\n              </Button>\\\\n            )\\\\n          }}\\\\n        </IconDropdown>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const TextFieldDropdown = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <IconDropdown\\\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          width={text('width', '120px')}\\\\n          menuIsOpen={boolean('menuIsOpen', false)}\\\\n          primary={boolean('primary', false)}\\\\n          intent={text('intent', 'page') as tIntent}\\\\n          onChange={action('Value Changed')}\\\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n          disabled={boolean('disabled', false)}\\\\n          value='available'\\\\n          optionComponent={({ selectedOption }: any) => {\\\\n            return (\\\\n              <div>\\\\n                <div>{selectedOption?.color}</div>\\\\n                <div>{selectedOption?.label}</div>\\\\n              </div>\\\\n            )\\\\n          }}\\\\n          // customStyle={customStyle}\\\\n        >\\\\n          {({\\\\n            selectedOption,\\\\n            menuIsOpen,\\\\n            setMenuIsOpen\\\\n          }: IUniversalDropdownChildren) => {\\\\n            return (\\\\n              <TextInput\\\\n                id='someId'\\\\n                name='someName'\\\\n                className='someClassName'\\\\n                label={text('label', 'Username')}\\\\n                labelColor={text('labelColor', 'text.inputLabel.default')}\\\\n                placeholder={text('placeholder', 'Enter text here...')}\\\\n                maxLength={number('maxLength', 10)}\\\\n                error={boolean('error', false)}\\\\n                errorMessage={text('errorMessage', '')}\\\\n                required={boolean('required', false)}\\\\n                fullWidth={boolean('fullWidth', false)}\\\\n                onChange={action('Triggered: onChange')}\\\\n                onClick={() => {\\\\n                  setMenuIsOpen(!menuIsOpen)\\\\n                  action('universal open/closed')(menuIsOpen)\\\\n                }}\\\\n                value={selectedOption?.value}\\\\n              />\\\\n            )\\\\n          }}\\\\n        </IconDropdown>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\",\\\"locationsMap\\\":{}},},\\n  title: `${path}/IconDropdown`,\\n  decorators: [withKnobs],\\n  component: IconDropdown\\n}\\n\\nconst ListViewOption = [\\n  {\\n    value: 'available',\\n    label: 'Mark As Available',\\n    color: 'blue',\\n    tooltipText: 'Mark As Available',\\n    isDisabled: true\\n  },\\n  {\\n    value: 'unavailable',\\n    label: 'Mark As Unavailable',\\n    color: 'red',\\n    tooltipText: 'Mark As Unavailable'\\n  },\\n  {\\n    value: 'active',\\n    label: 'Mark As Active',\\n    color: 'purple',\\n    tooltipText: 'Mark As Active'\\n  },\\n  {\\n    value: 'inactive',\\n    label: 'Mark As Inactive',\\n    color: 'green',\\n    tooltipText: 'Mark As Inactive'\\n  }\\n]\\n\\nconst MultiLevelListViewOption = [\\n  {\\n    id: 'available',\\n    value: 'available',\\n    label: 'Mark As Available',\\n    color: 'blue',\\n    tooltipText: 'Mark As Available',\\n    options: [\\n      {\\n        id: 'available',\\n        value: 'available',\\n        label: 'Mark As Child Available',\\n        color: 'blue',\\n        tooltipText: 'Mark As Child Available'\\n      },\\n      {\\n        id: 'unavailable',\\n        value: 'unavailable',\\n        label: 'Mark As Child Unavailable',\\n        color: 'red',\\n        tooltipText: 'Mark As Child Unavailable'\\n      },\\n      {\\n        id: 'active',\\n        value: 'active',\\n        label: 'Mark As Child Active',\\n        color: 'purple',\\n        tooltipText: 'Mark As Child Active'\\n      },\\n      {\\n        id: 'inactive',\\n        value: 'inactive',\\n        label: 'Mark As Child Inactive',\\n        color: 'green',\\n        tooltipText: 'Mark As Child Inactive',\\n        options: [\\n          {\\n            id: 'available',\\n            value: 'available',\\n            label: 'Mark As Grand Child Available',\\n            color: 'blue',\\n            tooltipText: 'Mark As Grand Child Available'\\n          },\\n          {\\n            id: 'unavailable',\\n            value: 'unavailable',\\n            label: 'Mark As Grand Child Unavailable',\\n            color: 'red',\\n            tooltipText: 'Mark As Grand Child Unavailable'\\n          }\\n        ]\\n      }\\n    ]\\n  },\\n  {\\n    id: 'unavailable',\\n    value: 'unavailable',\\n    label: 'Mark As Unavailable',\\n    color: 'red',\\n    tooltipText: 'Mark As Unavailable'\\n  },\\n  {\\n    id: 'active',\\n    value: 'active',\\n    label: 'Mark As Active',\\n    color: 'purple',\\n    tooltipText: 'Mark As Active'\\n  },\\n  {\\n    id: 'inactive',\\n    value: 'inactive',\\n    label: 'Mark As Inactive',\\n    color: 'green',\\n    tooltipText: 'Mark As Inactive'\\n  }\\n]\\n\\nconst paginationOptions = [\\n  { value: '25', label: '25 per page', title: '25 per page' },\\n  { value: '50', label: '50 per page', title: '50 per page' },\\n  { value: '100', label: '100 per page', title: '100 per page' },\\n  { value: '200', label: '200 per page', title: '200 per page' }\\n]\\n\\nconst columnOption = [\\n  { value: 'ascending', label: 'Sort Ascending', iconVariant: 'hide-menu-box' },\\n  {\\n    value: 'descending',\\n    label: 'Sort Descending',\\n    iconVariant: 'hub-location'\\n  },\\n  { value: 'hideColumn', label: 'Hide Column', iconVariant: 'close' },\\n  { value: 'pinLeft', label: 'Pin Left', iconVariant: 'angle-left' },\\n  { value: 'pinright', label: 'Pin Right', iconVariant: 'angle-right-thin' }\\n]\\n\\nconst options = [\\n  {\\n    value: 'emailVerificationPending',\\n    label: 'Email Verification Pending Shipper'\\n  },\\n  { value: 'allShippers', label: 'All Shippers' },\\n  { value: 'approvalPendingShippers', label: 'Approval Pending Shippers' }\\n]\\n\\nconst datePickerOptions = [\\n  { value: 'January', label: 'January' },\\n  { value: 'February', label: 'February' },\\n  { value: 'March', label: 'March' },\\n  { value: 'April', label: 'April' },\\n  { value: 'May', label: 'May' },\\n  { value: 'June', label: 'June' },\\n  { value: 'July', label: 'July' },\\n  { value: 'August', label: 'August' },\\n  { value: 'September', label: 'September' },\\n  { value: 'October', label: 'October' },\\n  { value: 'November', label: 'November' },\\n  { value: 'December', label: 'December' }\\n]\\n\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\nexport const ButtonDropdown = addSourceDecorator(addSourceDecorator(() => (\\n  <ThemeWrapper>\\n    <Box p='2em' bgColor='grey.50'>\\n      <IconDropdown\\n        variant={text('varaint', 'button-dropdown') as tSelectVariant}\\n        optionList={object('optionList', ListViewOption)}\\n        width={text('width', '120px')}\\n        menuIsOpen={boolean('menuIsOpen', false)}\\n        iconButtonDetails={array('iconList', [\\n          'hide-menu-box',\\n          'More',\\n          'angle-down'\\n        ])}\\n        primary={boolean('primary', false)}\\n        intent={text('intent', 'page') as tIntent}\\n        onChange={action('Value Changed')}\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\n        disabled={boolean('disabled', false)}\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\n        tooltipProps={{\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\n        }}\\n      />\\n    </Box>\\n  </ThemeWrapper>\\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\nexport const TextDropdown = addSourceDecorator(addSourceDecorator(() => (\\n  <ThemeWrapper>\\n    <Box p='2em' bgColor='grey.50'>\\n      <IconDropdown\\n        variant={text('varaint', 'text-dropdown') as tSelectVariant}\\n        optionList={object('optionList', ListViewOption)}\\n        width={text('width', '120px')}\\n        menuIsOpen={boolean('menuIsOpen', false)}\\n        iconButtonDetails={array('iconList', [\\n          'hide-menu-box',\\n          'More',\\n          'angle-down'\\n        ])}\\n        primary={boolean('primary', false)}\\n        intent={text('intent', 'page') as tIntent}\\n        onChange={action('Value Changed')}\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\n        disabled={boolean('disabled', false)}\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\n        tooltipProps={{\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\n        }}\\n      />\\n    </Box>\\n  </ThemeWrapper>\\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const MultiLevelBreadCrumb = addSourceDecorator(addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='2em' bgColor='grey.50'>\\n        <IconDropdown\\n          variant={text('variant', 'multilevel-breadcrumb') as tSelectVariant}\\n          optionList={object('optionList', MultiLevelListViewOption)}\\n          onChange={action('Value selected')}\\n          value={text('value', 'strawberry')}\\n          width={text('width', '260px')}\\n        />\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n  }, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const MultiLevelButtonDropdown = addSourceDecorator(addSourceDecorator(() => (\\n  <ThemeWrapper>\\n    <Box p='2em' bgColor='grey.50'>\\n      <IconDropdown\\n        variant={\\n          text('varaint', 'multilevel-button-dropdown') as tSelectVariant\\n        }\\n        optionList={object('optionList', MultiLevelListViewOption)}\\n        width={text('width', '120px')}\\n        menuIsOpen\\n        iconButtonDetails={array('iconList', [\\n          'hide-menu-box',\\n          'More',\\n          'angle-down'\\n        ])}\\n        defaultOpen='right'\\n        primary={boolean('primary', false)}\\n        intent={text('intent', 'page') as tIntent}\\n        handleClick={(id: any) => console.log('clicked from storybook', id)}\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\n        disabled={boolean('disabled', false)}\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\n        tooltipProps={{\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\n        }}\\n      />\\n    </Box>\\n  </ThemeWrapper>\\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const PaginationDropdown = addSourceDecorator(addSourceDecorator(() => (\\n  <ThemeWrapper>\\n    <CardComponent style={{ height: '300px' }}>\\n      <IconDropdown\\n        variant={text('variant', 'pagination-size') as tSelectVariant}\\n        optionList={object('optionList', paginationOptions)}\\n        onChange={action('Value selected')}\\n        value={text('value', '50')}\\n        width={text('width', '120px')}\\n      />\\n    </CardComponent>\\n  </ThemeWrapper>\\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const columnOptionComponent = addSourceDecorator(addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='2em' bgColor='grey.50'>\\n        <div style={{ width: '200px', margin: 'auto' }}>\\n          <IconDropdown\\n            variant={text('variant', 'column-filter') as tSelectVariant}\\n            optionList={object('optionList', columnOption)}\\n            onChange={action('Value selected')}\\n            width={text('width', '10px')}\\n            isSingleClickOption={boolean('isSingleClickOption', true)}\\n          />\\n        </div>\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const BreadCrumbComponent = addSourceDecorator(addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='2em' bgColor='grey.50'>\\n        <IconDropdown\\n          variant={text('variant', 'bread-crumb') as tSelectVariant}\\n          optionList={object('optionList', options)}\\n          onChange={action('Value selected')}\\n          value={text('value', 'strawberry')}\\n          width={text('width', '260px')}\\n        />\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const DatePickerDropDown = addSourceDecorator(addSourceDecorator(() => (\\n  <ThemeWrapper>\\n    <CardComponent style={{ height: '200px' }}>\\n      <IconDropdown\\n        variant={text('variant', 'date-picker') as tSelectVariant}\\n        optionList={object('optionList', datePickerOptions)}\\n        onChange={action('Value selected')}\\n        value={text('value', '50')}\\n        width={text('width', '80px')}\\n        showDownArrow={boolean('Show Down Arrow', true)}\\n        isMultiRegionStyled={boolean('Is Multi Region Styled', false)}\\n      />\\n    </CardComponent>\\n  </ThemeWrapper>\\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\nconst arrayMap = [\\n  { variant: 'column-filter', name: 'column-filter0' },\\n  { variant: 'column-filter', name: 'column-filter1' },\\n  { variant: 'column-filter', name: 'column-filter2' }\\n]\\n\\nexport const columnOptionList = addSourceDecorator(addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='2em' bgColor='grey.50'>\\n        <div style={{ width: '200px', margin: 'auto' }}>\\n          {arrayMap.map((obj: any, index: number) => {\\n            return (\\n              <IconDropdown\\n                variant={text('variant', obj?.variant) as tSelectVariant}\\n                optionList={object('optionList', columnOption)}\\n                onChange={action('Value selected')}\\n                width={text('width', '10px')}\\n                isSingleClickOption={boolean('isSingleClickOption', true)}\\n                key={index}\\n              />\\n            )\\n          })}\\n        </div>\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const DropdownUniversal = addSourceDecorator(addSourceDecorator(() => {\\n  // reference to style\\n  // const theme = useContext(ThemeContext)\\n  // const borderBottom = `1px solid ${theme?.colors?.grey['A800']}`\\n  // const customStyle = {\\n  //   control: (provided: any) => ({\\n  //     ...provided,\\n  //     borderStyle: 'none',\\n  //     borderBottom,\\n  //     borderRadius: '0px',\\n  //     boxShadow: 'none',\\n  //     borderColor: theme?.colors?.grey?.A800,\\n  //     '&:focus': {\\n  //       borderStyle: 'none',\\n  //       borderBottom,\\n  //       boxShadow: 'none',\\n  //       borderColor: theme?.colors?.grey?.A800\\n  //     },\\n  //     '&:hover': {\\n  //       borderStyle: 'none',\\n  //       borderBottom,\\n  //       boxShadow: 'none',\\n  //       borderColor: theme?.colors?.grey?.A800\\n  //     }\\n  //   }),\\n  //   option: (provided: any, state: any) => ({\\n  //     ...provided,\\n  //     backgroundColor: state?.isSelected\\n  //       ? theme?.colors?.primary?.main\\n  //       : theme?.colors?.white,\\n  //     '&:hover': {\\n  //       backgroundColor: state?.isSelected\\n  //         ? theme?.colors?.primary?.main\\n  //         : theme?.colors?.grey['50']\\n  //     }\\n  //   }),\\n\\n  //   menu: (provided: any, state: any) => ({\\n  //     ...provided,\\n  //     backgroundColor: state?.isSelected\\n  //       ? theme.colors.primary.main\\n  //       : theme?.colors?.white,\\n  //     borderRadius: '2px',\\n  //     '&:hover': {\\n  //       backgroundColor: state?.isSelected\\n  //         ? theme?.colors?.primary?.main\\n  //         : theme?.colors?.white\\n  //     },\\n  //     marginTop: '5px',\\n  //     marginLeft: '16px',\\n  //     width: '90%'\\n  //   }),\\n  //   menuList: (provided: any) => ({\\n  //     ...provided,\\n  //     marginTop: '0px'\\n  //   }),\\n  //   valueContainer: (provided: any) => ({\\n  //     ...provided,\\n  //     padding: '0px'\\n  //   })\\n  // }\\n  return (\\n    <ThemeWrapper>\\n      <Box p='2em' bgColor='grey.50'>\\n        <IconDropdown\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\n          optionList={object('optionList', ListViewOption)}\\n          width={text('width', '120px')}\\n          menuIsOpen={boolean('menuIsOpen', false)}\\n          primary={boolean('primary', false)}\\n          intent={text('intent', 'page') as tIntent}\\n          onChange={action('Value Changed')}\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\n          disabled={boolean('disabled', false)}\\n          value='available'\\n          optionComponent={({ selectedOption }: any) => {\\n            return (\\n              <div>\\n                <div>{selectedOption?.color}</div>\\n                <div>{selectedOption?.label}</div>\\n              </div>\\n            )\\n          }}\\n          // customStyle={customStyle}\\n        >\\n          {({\\n            selectedOption,\\n            menuIsOpen,\\n            setMenuIsOpen\\n          }: IUniversalDropdownChildren) => {\\n            return (\\n              <Button\\n                onClick={() => {\\n                  setMenuIsOpen(!menuIsOpen)\\n                  action('Universal open/closed')(menuIsOpen)\\n                }}\\n                color={text('color', 'white')}\\n                bgColor={text('bgColor', 'black')}\\n                fullWidth={boolean('fullWidth', false)}\\n              >\\n                {selectedOption?.label}\\n              </Button>\\n            )\\n          }}\\n        </IconDropdown>\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const TextFieldDropdown = addSourceDecorator(addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='2em' bgColor='grey.50'>\\n        <IconDropdown\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\n          optionList={object('optionList', ListViewOption)}\\n          width={text('width', '120px')}\\n          menuIsOpen={boolean('menuIsOpen', false)}\\n          primary={boolean('primary', false)}\\n          intent={text('intent', 'page') as tIntent}\\n          onChange={action('Value Changed')}\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\n          disabled={boolean('disabled', false)}\\n          value='available'\\n          optionComponent={({ selectedOption }: any) => {\\n            return (\\n              <div>\\n                <div>{selectedOption?.color}</div>\\n                <div>{selectedOption?.label}</div>\\n              </div>\\n            )\\n          }}\\n          // customStyle={customStyle}\\n        >\\n          {({\\n            selectedOption,\\n            menuIsOpen,\\n            setMenuIsOpen\\n          }: IUniversalDropdownChildren) => {\\n            return (\\n              <TextInput\\n                id='someId'\\n                name='someName'\\n                className='someClassName'\\n                label={text('label', 'Username')}\\n                labelColor={text('labelColor', 'text.inputLabel.default')}\\n                placeholder={text('placeholder', 'Enter text here...')}\\n                maxLength={number('maxLength', 10)}\\n                error={boolean('error', false)}\\n                errorMessage={text('errorMessage', '')}\\n                required={boolean('required', false)}\\n                fullWidth={boolean('fullWidth', false)}\\n                onChange={action('Triggered: onChange')}\\n                onClick={() => {\\n                  setMenuIsOpen(!menuIsOpen)\\n                  action('universal open/closed')(menuIsOpen)\\n                }}\\n                value={selectedOption?.value}\\n              />\\n            )\\n          }}\\n        </IconDropdown>\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\"; // @ts-ignore\n\nvar __ADDS_MAP__ = {}; // @ts-ignore\n\nvar __MAIN_FILE_LOCATION__ = \"/IconDropdown.stories.tsx\"; // @ts-ignore\n\nvar __MODULE_DEPENDENCIES__ = []; // @ts-ignore\n\nvar __LOCAL_DEPENDENCIES__ = {}; // @ts-ignore\n\nvar __IDS_TO_FRAMEWORKS__ = {};\n/* eslint-disable */\n// @ts-nocheck\n// @ts-ignore\n\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource; // @ts-ignore\n\n\nvar addSourceDecorator = require(\"@storybook/source-loader/preview\").addSource; // @ts-ignore\n\n\nvar __SOURCE_PREFIX__ = \"/Users/farhanansari/Code/ui-library/src/components/molecules/IconDropdown\"; // @ts-ignore\n\nvar __STORY__ = \"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/farhanansari/Code/ui-library/src/components/molecules/IconDropdown\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"import { action } from '@storybook/addon-actions'\\\\nimport {\\\\n  array,\\\\n  boolean,\\\\n  number,\\\\n  object,\\\\n  text,\\\\n  withKnobs\\\\n} from '@storybook/addon-knobs'\\\\nimport React from 'react'\\\\nimport IconDropdown from '.'\\\\nimport { path } from '..'\\\\nimport { Box } from '../../..'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport Button, { tIntent } from '../../atoms/Button'\\\\nimport CardComponent from '../../atoms/Card'\\\\nimport { tPlacement } from '../../../utilities/types'\\\\nimport {\\\\n  IUniversalDropdownChildren,\\\\n  tSelectVariant\\\\n} from '../DropDown/interface'\\\\nimport TextInput from '../TextInput'\\\\n\\\\nexport default {\\\\n  title: `${path}/IconDropdown`,\\\\n  decorators: [withKnobs],\\\\n  component: IconDropdown\\\\n}\\\\n\\\\nconst ListViewOption = [\\\\n  {\\\\n    value: 'available',\\\\n    label: 'Mark As Available',\\\\n    color: 'blue',\\\\n    tooltipText: 'Mark As Available',\\\\n    isDisabled: true\\\\n  },\\\\n  {\\\\n    value: 'unavailable',\\\\n    label: 'Mark As Unavailable',\\\\n    color: 'red',\\\\n    tooltipText: 'Mark As Unavailable'\\\\n  },\\\\n  {\\\\n    value: 'active',\\\\n    label: 'Mark As Active',\\\\n    color: 'purple',\\\\n    tooltipText: 'Mark As Active'\\\\n  },\\\\n  {\\\\n    value: 'inactive',\\\\n    label: 'Mark As Inactive',\\\\n    color: 'green',\\\\n    tooltipText: 'Mark As Inactive'\\\\n  }\\\\n]\\\\n\\\\nconst MultiLevelListViewOption = [\\\\n  {\\\\n    id: 'available',\\\\n    value: 'available',\\\\n    label: 'Mark As Available',\\\\n    color: 'blue',\\\\n    tooltipText: 'Mark As Available',\\\\n    options: [\\\\n      {\\\\n        id: 'available',\\\\n        value: 'available',\\\\n        label: 'Mark As Child Available',\\\\n        color: 'blue',\\\\n        tooltipText: 'Mark As Child Available'\\\\n      },\\\\n      {\\\\n        id: 'unavailable',\\\\n        value: 'unavailable',\\\\n        label: 'Mark As Child Unavailable',\\\\n        color: 'red',\\\\n        tooltipText: 'Mark As Child Unavailable'\\\\n      },\\\\n      {\\\\n        id: 'active',\\\\n        value: 'active',\\\\n        label: 'Mark As Child Active',\\\\n        color: 'purple',\\\\n        tooltipText: 'Mark As Child Active'\\\\n      },\\\\n      {\\\\n        id: 'inactive',\\\\n        value: 'inactive',\\\\n        label: 'Mark As Child Inactive',\\\\n        color: 'green',\\\\n        tooltipText: 'Mark As Child Inactive',\\\\n        options: [\\\\n          {\\\\n            id: 'available',\\\\n            value: 'available',\\\\n            label: 'Mark As Grand Child Available',\\\\n            color: 'blue',\\\\n            tooltipText: 'Mark As Grand Child Available'\\\\n          },\\\\n          {\\\\n            id: 'unavailable',\\\\n            value: 'unavailable',\\\\n            label: 'Mark As Grand Child Unavailable',\\\\n            color: 'red',\\\\n            tooltipText: 'Mark As Grand Child Unavailable'\\\\n          }\\\\n        ]\\\\n      }\\\\n    ]\\\\n  },\\\\n  {\\\\n    id: 'unavailable',\\\\n    value: 'unavailable',\\\\n    label: 'Mark As Unavailable',\\\\n    color: 'red',\\\\n    tooltipText: 'Mark As Unavailable'\\\\n  },\\\\n  {\\\\n    id: 'active',\\\\n    value: 'active',\\\\n    label: 'Mark As Active',\\\\n    color: 'purple',\\\\n    tooltipText: 'Mark As Active'\\\\n  },\\\\n  {\\\\n    id: 'inactive',\\\\n    value: 'inactive',\\\\n    label: 'Mark As Inactive',\\\\n    color: 'green',\\\\n    tooltipText: 'Mark As Inactive'\\\\n  }\\\\n]\\\\n\\\\nconst paginationOptions = [\\\\n  { value: '25', label: '25 per page', title: '25 per page' },\\\\n  { value: '50', label: '50 per page', title: '50 per page' },\\\\n  { value: '100', label: '100 per page', title: '100 per page' },\\\\n  { value: '200', label: '200 per page', title: '200 per page' }\\\\n]\\\\n\\\\nconst columnOption = [\\\\n  { value: 'ascending', label: 'Sort Ascending', iconVariant: 'hide-menu-box' },\\\\n  {\\\\n    value: 'descending',\\\\n    label: 'Sort Descending',\\\\n    iconVariant: 'hub-location'\\\\n  },\\\\n  { value: 'hideColumn', label: 'Hide Column', iconVariant: 'close' },\\\\n  { value: 'pinLeft', label: 'Pin Left', iconVariant: 'angle-left' },\\\\n  { value: 'pinright', label: 'Pin Right', iconVariant: 'angle-right-thin' }\\\\n]\\\\n\\\\nconst options = [\\\\n  {\\\\n    value: 'emailVerificationPending',\\\\n    label: 'Email Verification Pending Shipper'\\\\n  },\\\\n  { value: 'allShippers', label: 'All Shippers' },\\\\n  { value: 'approvalPendingShippers', label: 'Approval Pending Shippers' }\\\\n]\\\\n\\\\nconst datePickerOptions = [\\\\n  { value: 'January', label: 'January' },\\\\n  { value: 'February', label: 'February' },\\\\n  { value: 'March', label: 'March' },\\\\n  { value: 'April', label: 'April' },\\\\n  { value: 'May', label: 'May' },\\\\n  { value: 'June', label: 'June' },\\\\n  { value: 'July', label: 'July' },\\\\n  { value: 'August', label: 'August' },\\\\n  { value: 'September', label: 'September' },\\\\n  { value: 'October', label: 'October' },\\\\n  { value: 'November', label: 'November' },\\\\n  { value: 'December', label: 'December' }\\\\n]\\\\n\\\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\\\nexport const ButtonDropdown = () => (\\\\n  <ThemeWrapper>\\\\n    <Box p='2em' bgColor='grey.50'>\\\\n      <IconDropdown\\\\n        variant={text('varaint', 'button-dropdown') as tSelectVariant}\\\\n        optionList={object('optionList', ListViewOption)}\\\\n        width={text('width', '120px')}\\\\n        menuIsOpen={boolean('menuIsOpen', false)}\\\\n        iconButtonDetails={array('iconList', [\\\\n          'hide-menu-box',\\\\n          'More',\\\\n          'angle-down'\\\\n        ])}\\\\n        primary={boolean('primary', false)}\\\\n        intent={text('intent', 'page') as tIntent}\\\\n        onChange={action('Value Changed')}\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n        disabled={boolean('disabled', false)}\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\n        tooltipProps={{\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\n        }}\\\\n      />\\\\n    </Box>\\\\n  </ThemeWrapper>\\\\n)\\\\n\\\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\\\nexport const TextDropdown = () => (\\\\n  <ThemeWrapper>\\\\n    <Box p='2em' bgColor='grey.50'>\\\\n      <IconDropdown\\\\n        variant={text('varaint', 'text-dropdown') as tSelectVariant}\\\\n        optionList={object('optionList', ListViewOption)}\\\\n        width={text('width', '120px')}\\\\n        menuIsOpen={boolean('menuIsOpen', false)}\\\\n        iconButtonDetails={array('iconList', [\\\\n          'hide-menu-box',\\\\n          'More',\\\\n          'angle-down'\\\\n        ])}\\\\n        primary={boolean('primary', false)}\\\\n        intent={text('intent', 'page') as tIntent}\\\\n        onChange={action('Value Changed')}\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n        disabled={boolean('disabled', false)}\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\n        tooltipProps={{\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\n        }}\\\\n      />\\\\n    </Box>\\\\n  </ThemeWrapper>\\\\n)\\\\n\\\\nexport const MultiLevelBreadCrumb = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <IconDropdown\\\\n          variant={text('variant', 'multilevel-breadcrumb') as tSelectVariant}\\\\n          optionList={object('optionList', MultiLevelListViewOption)}\\\\n          onChange={action('Value selected')}\\\\n          value={text('value', 'strawberry')}\\\\n          width={text('width', '260px')}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n  }\\\\n\\\\nexport const MultiLevelButtonDropdown = () => (\\\\n  <ThemeWrapper>\\\\n    <Box p='2em' bgColor='grey.50'>\\\\n      <IconDropdown\\\\n        variant={\\\\n          text('varaint', 'multilevel-button-dropdown') as tSelectVariant\\\\n        }\\\\n        optionList={object('optionList', MultiLevelListViewOption)}\\\\n        width={text('width', '120px')}\\\\n        menuIsOpen\\\\n        iconButtonDetails={array('iconList', [\\\\n          'hide-menu-box',\\\\n          'More',\\\\n          'angle-down'\\\\n        ])}\\\\n        defaultOpen='right'\\\\n        primary={boolean('primary', false)}\\\\n        intent={text('intent', 'page') as tIntent}\\\\n        handleClick={(id: any) => console.log('clicked from storybook', id)}\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n        disabled={boolean('disabled', false)}\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\n        tooltipProps={{\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\n        }}\\\\n      />\\\\n    </Box>\\\\n  </ThemeWrapper>\\\\n)\\\\n\\\\nexport const PaginationDropdown = () => (\\\\n  <ThemeWrapper>\\\\n    <CardComponent style={{ height: '300px' }}>\\\\n      <IconDropdown\\\\n        variant={text('variant', 'pagination-size') as tSelectVariant}\\\\n        optionList={object('optionList', paginationOptions)}\\\\n        onChange={action('Value selected')}\\\\n        value={text('value', '50')}\\\\n        width={text('width', '120px')}\\\\n      />\\\\n    </CardComponent>\\\\n  </ThemeWrapper>\\\\n)\\\\n\\\\nexport const columnOptionComponent = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <div style={{ width: '200px', margin: 'auto' }}>\\\\n          <IconDropdown\\\\n            variant={text('variant', 'column-filter') as tSelectVariant}\\\\n            optionList={object('optionList', columnOption)}\\\\n            onChange={action('Value selected')}\\\\n            width={text('width', '10px')}\\\\n            isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n          />\\\\n        </div>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const BreadCrumbComponent = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <IconDropdown\\\\n          variant={text('variant', 'bread-crumb') as tSelectVariant}\\\\n          optionList={object('optionList', options)}\\\\n          onChange={action('Value selected')}\\\\n          value={text('value', 'strawberry')}\\\\n          width={text('width', '260px')}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const DatePickerDropDown = () => (\\\\n  <ThemeWrapper>\\\\n    <CardComponent style={{ height: '200px' }}>\\\\n      <IconDropdown\\\\n        variant={text('variant', 'date-picker') as tSelectVariant}\\\\n        optionList={object('optionList', datePickerOptions)}\\\\n        onChange={action('Value selected')}\\\\n        value={text('value', '50')}\\\\n        width={text('width', '80px')}\\\\n        showDownArrow={boolean('Show Down Arrow', true)}\\\\n        isMultiRegionStyled={boolean('Is Multi Region Styled', false)}\\\\n      />\\\\n    </CardComponent>\\\\n  </ThemeWrapper>\\\\n)\\\\nconst arrayMap = [\\\\n  { variant: 'column-filter', name: 'column-filter0' },\\\\n  { variant: 'column-filter', name: 'column-filter1' },\\\\n  { variant: 'column-filter', name: 'column-filter2' }\\\\n]\\\\n\\\\nexport const columnOptionList = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <div style={{ width: '200px', margin: 'auto' }}>\\\\n          {arrayMap.map((obj: any, index: number) => {\\\\n            return (\\\\n              <IconDropdown\\\\n                variant={text('variant', obj?.variant) as tSelectVariant}\\\\n                optionList={object('optionList', columnOption)}\\\\n                onChange={action('Value selected')}\\\\n                width={text('width', '10px')}\\\\n                isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n                key={index}\\\\n              />\\\\n            )\\\\n          })}\\\\n        </div>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const DropdownUniversal = () => {\\\\n  // reference to style\\\\n  // const theme = useContext(ThemeContext)\\\\n  // const borderBottom = `1px solid ${theme?.colors?.grey['A800']}`\\\\n  // const customStyle = {\\\\n  //   control: (provided: any) => ({\\\\n  //     ...provided,\\\\n  //     borderStyle: 'none',\\\\n  //     borderBottom,\\\\n  //     borderRadius: '0px',\\\\n  //     boxShadow: 'none',\\\\n  //     borderColor: theme?.colors?.grey?.A800,\\\\n  //     '&:focus': {\\\\n  //       borderStyle: 'none',\\\\n  //       borderBottom,\\\\n  //       boxShadow: 'none',\\\\n  //       borderColor: theme?.colors?.grey?.A800\\\\n  //     },\\\\n  //     '&:hover': {\\\\n  //       borderStyle: 'none',\\\\n  //       borderBottom,\\\\n  //       boxShadow: 'none',\\\\n  //       borderColor: theme?.colors?.grey?.A800\\\\n  //     }\\\\n  //   }),\\\\n  //   option: (provided: any, state: any) => ({\\\\n  //     ...provided,\\\\n  //     backgroundColor: state?.isSelected\\\\n  //       ? theme?.colors?.primary?.main\\\\n  //       : theme?.colors?.white,\\\\n  //     '&:hover': {\\\\n  //       backgroundColor: state?.isSelected\\\\n  //         ? theme?.colors?.primary?.main\\\\n  //         : theme?.colors?.grey['50']\\\\n  //     }\\\\n  //   }),\\\\n\\\\n  //   menu: (provided: any, state: any) => ({\\\\n  //     ...provided,\\\\n  //     backgroundColor: state?.isSelected\\\\n  //       ? theme.colors.primary.main\\\\n  //       : theme?.colors?.white,\\\\n  //     borderRadius: '2px',\\\\n  //     '&:hover': {\\\\n  //       backgroundColor: state?.isSelected\\\\n  //         ? theme?.colors?.primary?.main\\\\n  //         : theme?.colors?.white\\\\n  //     },\\\\n  //     marginTop: '5px',\\\\n  //     marginLeft: '16px',\\\\n  //     width: '90%'\\\\n  //   }),\\\\n  //   menuList: (provided: any) => ({\\\\n  //     ...provided,\\\\n  //     marginTop: '0px'\\\\n  //   }),\\\\n  //   valueContainer: (provided: any) => ({\\\\n  //     ...provided,\\\\n  //     padding: '0px'\\\\n  //   })\\\\n  // }\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <IconDropdown\\\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          width={text('width', '120px')}\\\\n          menuIsOpen={boolean('menuIsOpen', false)}\\\\n          primary={boolean('primary', false)}\\\\n          intent={text('intent', 'page') as tIntent}\\\\n          onChange={action('Value Changed')}\\\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n          disabled={boolean('disabled', false)}\\\\n          value='available'\\\\n          optionComponent={({ selectedOption }: any) => {\\\\n            return (\\\\n              <div>\\\\n                <div>{selectedOption?.color}</div>\\\\n                <div>{selectedOption?.label}</div>\\\\n              </div>\\\\n            )\\\\n          }}\\\\n          // customStyle={customStyle}\\\\n        >\\\\n          {({\\\\n            selectedOption,\\\\n            menuIsOpen,\\\\n            setMenuIsOpen\\\\n          }: IUniversalDropdownChildren) => {\\\\n            return (\\\\n              <Button\\\\n                onClick={() => {\\\\n                  setMenuIsOpen(!menuIsOpen)\\\\n                  action('Universal open/closed')(menuIsOpen)\\\\n                }}\\\\n                color={text('color', 'white')}\\\\n                bgColor={text('bgColor', 'black')}\\\\n                fullWidth={boolean('fullWidth', false)}\\\\n              >\\\\n                {selectedOption?.label}\\\\n              </Button>\\\\n            )\\\\n          }}\\\\n        </IconDropdown>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const TextFieldDropdown = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <IconDropdown\\\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          width={text('width', '120px')}\\\\n          menuIsOpen={boolean('menuIsOpen', false)}\\\\n          primary={boolean('primary', false)}\\\\n          intent={text('intent', 'page') as tIntent}\\\\n          onChange={action('Value Changed')}\\\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n          disabled={boolean('disabled', false)}\\\\n          value='available'\\\\n          optionComponent={({ selectedOption }: any) => {\\\\n            return (\\\\n              <div>\\\\n                <div>{selectedOption?.color}</div>\\\\n                <div>{selectedOption?.label}</div>\\\\n              </div>\\\\n            )\\\\n          }}\\\\n          // customStyle={customStyle}\\\\n        >\\\\n          {({\\\\n            selectedOption,\\\\n            menuIsOpen,\\\\n            setMenuIsOpen\\\\n          }: IUniversalDropdownChildren) => {\\\\n            return (\\\\n              <TextInput\\\\n                id='someId'\\\\n                name='someName'\\\\n                className='someClassName'\\\\n                label={text('label', 'Username')}\\\\n                labelColor={text('labelColor', 'text.inputLabel.default')}\\\\n                placeholder={text('placeholder', 'Enter text here...')}\\\\n                maxLength={number('maxLength', 10)}\\\\n                error={boolean('error', false)}\\\\n                errorMessage={text('errorMessage', '')}\\\\n                required={boolean('required', false)}\\\\n                fullWidth={boolean('fullWidth', false)}\\\\n                onChange={action('Triggered: onChange')}\\\\n                onClick={() => {\\\\n                  setMenuIsOpen(!menuIsOpen)\\\\n                  action('universal open/closed')(menuIsOpen)\\\\n                }}\\\\n                value={selectedOption?.value}\\\\n              />\\\\n            )\\\\n          }}\\\\n        </IconDropdown>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/IconDropdown.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\nimport { action } from '@storybook/addon-actions'\\nimport {\\n  array,\\n  boolean,\\n  number,\\n  object,\\n  text,\\n  withKnobs\\n} from '@storybook/addon-knobs'\\nimport React from 'react'\\nimport IconDropdown from '.'\\nimport { path } from '..'\\nimport { Box } from '../../..'\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\nimport Button, { tIntent } from '../../atoms/Button'\\nimport CardComponent from '../../atoms/Card'\\nimport { tPlacement } from '../../../utilities/types'\\nimport {\\n  IUniversalDropdownChildren,\\n  tSelectVariant\\n} from '../DropDown/interface'\\nimport TextInput from '../TextInput'\\n\\nexport default {parameters: {\\\"storySource\\\":{\\\"source\\\":\\\"import { action } from '@storybook/addon-actions'\\\\nimport {\\\\n  array,\\\\n  boolean,\\\\n  number,\\\\n  object,\\\\n  text,\\\\n  withKnobs\\\\n} from '@storybook/addon-knobs'\\\\nimport React from 'react'\\\\nimport IconDropdown from '.'\\\\nimport { path } from '..'\\\\nimport { Box } from '../../..'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport Button, { tIntent } from '../../atoms/Button'\\\\nimport CardComponent from '../../atoms/Card'\\\\nimport { tPlacement } from '../../../utilities/types'\\\\nimport {\\\\n  IUniversalDropdownChildren,\\\\n  tSelectVariant\\\\n} from '../DropDown/interface'\\\\nimport TextInput from '../TextInput'\\\\n\\\\nexport default {\\\\n  title: `${path}/IconDropdown`,\\\\n  decorators: [withKnobs],\\\\n  component: IconDropdown\\\\n}\\\\n\\\\nconst ListViewOption = [\\\\n  {\\\\n    value: 'available',\\\\n    label: 'Mark As Available',\\\\n    color: 'blue',\\\\n    tooltipText: 'Mark As Available',\\\\n    isDisabled: true\\\\n  },\\\\n  {\\\\n    value: 'unavailable',\\\\n    label: 'Mark As Unavailable',\\\\n    color: 'red',\\\\n    tooltipText: 'Mark As Unavailable'\\\\n  },\\\\n  {\\\\n    value: 'active',\\\\n    label: 'Mark As Active',\\\\n    color: 'purple',\\\\n    tooltipText: 'Mark As Active'\\\\n  },\\\\n  {\\\\n    value: 'inactive',\\\\n    label: 'Mark As Inactive',\\\\n    color: 'green',\\\\n    tooltipText: 'Mark As Inactive'\\\\n  }\\\\n]\\\\n\\\\nconst MultiLevelListViewOption = [\\\\n  {\\\\n    id: 'available',\\\\n    value: 'available',\\\\n    label: 'Mark As Available',\\\\n    color: 'blue',\\\\n    tooltipText: 'Mark As Available',\\\\n    options: [\\\\n      {\\\\n        id: 'available',\\\\n        value: 'available',\\\\n        label: 'Mark As Child Available',\\\\n        color: 'blue',\\\\n        tooltipText: 'Mark As Child Available'\\\\n      },\\\\n      {\\\\n        id: 'unavailable',\\\\n        value: 'unavailable',\\\\n        label: 'Mark As Child Unavailable',\\\\n        color: 'red',\\\\n        tooltipText: 'Mark As Child Unavailable'\\\\n      },\\\\n      {\\\\n        id: 'active',\\\\n        value: 'active',\\\\n        label: 'Mark As Child Active',\\\\n        color: 'purple',\\\\n        tooltipText: 'Mark As Child Active'\\\\n      },\\\\n      {\\\\n        id: 'inactive',\\\\n        value: 'inactive',\\\\n        label: 'Mark As Child Inactive',\\\\n        color: 'green',\\\\n        tooltipText: 'Mark As Child Inactive',\\\\n        options: [\\\\n          {\\\\n            id: 'available',\\\\n            value: 'available',\\\\n            label: 'Mark As Grand Child Available',\\\\n            color: 'blue',\\\\n            tooltipText: 'Mark As Grand Child Available'\\\\n          },\\\\n          {\\\\n            id: 'unavailable',\\\\n            value: 'unavailable',\\\\n            label: 'Mark As Grand Child Unavailable',\\\\n            color: 'red',\\\\n            tooltipText: 'Mark As Grand Child Unavailable'\\\\n          }\\\\n        ]\\\\n      }\\\\n    ]\\\\n  },\\\\n  {\\\\n    id: 'unavailable',\\\\n    value: 'unavailable',\\\\n    label: 'Mark As Unavailable',\\\\n    color: 'red',\\\\n    tooltipText: 'Mark As Unavailable'\\\\n  },\\\\n  {\\\\n    id: 'active',\\\\n    value: 'active',\\\\n    label: 'Mark As Active',\\\\n    color: 'purple',\\\\n    tooltipText: 'Mark As Active'\\\\n  },\\\\n  {\\\\n    id: 'inactive',\\\\n    value: 'inactive',\\\\n    label: 'Mark As Inactive',\\\\n    color: 'green',\\\\n    tooltipText: 'Mark As Inactive'\\\\n  }\\\\n]\\\\n\\\\nconst paginationOptions = [\\\\n  { value: '25', label: '25 per page', title: '25 per page' },\\\\n  { value: '50', label: '50 per page', title: '50 per page' },\\\\n  { value: '100', label: '100 per page', title: '100 per page' },\\\\n  { value: '200', label: '200 per page', title: '200 per page' }\\\\n]\\\\n\\\\nconst columnOption = [\\\\n  { value: 'ascending', label: 'Sort Ascending', iconVariant: 'hide-menu-box' },\\\\n  {\\\\n    value: 'descending',\\\\n    label: 'Sort Descending',\\\\n    iconVariant: 'hub-location'\\\\n  },\\\\n  { value: 'hideColumn', label: 'Hide Column', iconVariant: 'close' },\\\\n  { value: 'pinLeft', label: 'Pin Left', iconVariant: 'angle-left' },\\\\n  { value: 'pinright', label: 'Pin Right', iconVariant: 'angle-right-thin' }\\\\n]\\\\n\\\\nconst options = [\\\\n  {\\\\n    value: 'emailVerificationPending',\\\\n    label: 'Email Verification Pending Shipper'\\\\n  },\\\\n  { value: 'allShippers', label: 'All Shippers' },\\\\n  { value: 'approvalPendingShippers', label: 'Approval Pending Shippers' }\\\\n]\\\\n\\\\nconst datePickerOptions = [\\\\n  { value: 'January', label: 'January' },\\\\n  { value: 'February', label: 'February' },\\\\n  { value: 'March', label: 'March' },\\\\n  { value: 'April', label: 'April' },\\\\n  { value: 'May', label: 'May' },\\\\n  { value: 'June', label: 'June' },\\\\n  { value: 'July', label: 'July' },\\\\n  { value: 'August', label: 'August' },\\\\n  { value: 'September', label: 'September' },\\\\n  { value: 'October', label: 'October' },\\\\n  { value: 'November', label: 'November' },\\\\n  { value: 'December', label: 'December' }\\\\n]\\\\n\\\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\\\nexport const ButtonDropdown = () => (\\\\n  <ThemeWrapper>\\\\n    <Box p='2em' bgColor='grey.50'>\\\\n      <IconDropdown\\\\n        variant={text('varaint', 'button-dropdown') as tSelectVariant}\\\\n        optionList={object('optionList', ListViewOption)}\\\\n        width={text('width', '120px')}\\\\n        menuIsOpen={boolean('menuIsOpen', false)}\\\\n        iconButtonDetails={array('iconList', [\\\\n          'hide-menu-box',\\\\n          'More',\\\\n          'angle-down'\\\\n        ])}\\\\n        primary={boolean('primary', false)}\\\\n        intent={text('intent', 'page') as tIntent}\\\\n        onChange={action('Value Changed')}\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n        disabled={boolean('disabled', false)}\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\n        tooltipProps={{\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\n        }}\\\\n      />\\\\n    </Box>\\\\n  </ThemeWrapper>\\\\n)\\\\n\\\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\\\nexport const TextDropdown = () => (\\\\n  <ThemeWrapper>\\\\n    <Box p='2em' bgColor='grey.50'>\\\\n      <IconDropdown\\\\n        variant={text('varaint', 'text-dropdown') as tSelectVariant}\\\\n        optionList={object('optionList', ListViewOption)}\\\\n        width={text('width', '120px')}\\\\n        menuIsOpen={boolean('menuIsOpen', false)}\\\\n        iconButtonDetails={array('iconList', [\\\\n          'hide-menu-box',\\\\n          'More',\\\\n          'angle-down'\\\\n        ])}\\\\n        primary={boolean('primary', false)}\\\\n        intent={text('intent', 'page') as tIntent}\\\\n        onChange={action('Value Changed')}\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n        disabled={boolean('disabled', false)}\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\n        tooltipProps={{\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\n        }}\\\\n      />\\\\n    </Box>\\\\n  </ThemeWrapper>\\\\n)\\\\n\\\\nexport const MultiLevelBreadCrumb = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <IconDropdown\\\\n          variant={text('variant', 'multilevel-breadcrumb') as tSelectVariant}\\\\n          optionList={object('optionList', MultiLevelListViewOption)}\\\\n          onChange={action('Value selected')}\\\\n          value={text('value', 'strawberry')}\\\\n          width={text('width', '260px')}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n  }\\\\n\\\\nexport const MultiLevelButtonDropdown = () => (\\\\n  <ThemeWrapper>\\\\n    <Box p='2em' bgColor='grey.50'>\\\\n      <IconDropdown\\\\n        variant={\\\\n          text('varaint', 'multilevel-button-dropdown') as tSelectVariant\\\\n        }\\\\n        optionList={object('optionList', MultiLevelListViewOption)}\\\\n        width={text('width', '120px')}\\\\n        menuIsOpen\\\\n        iconButtonDetails={array('iconList', [\\\\n          'hide-menu-box',\\\\n          'More',\\\\n          'angle-down'\\\\n        ])}\\\\n        defaultOpen='right'\\\\n        primary={boolean('primary', false)}\\\\n        intent={text('intent', 'page') as tIntent}\\\\n        handleClick={(id: any) => console.log('clicked from storybook', id)}\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n        disabled={boolean('disabled', false)}\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\n        tooltipProps={{\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\n        }}\\\\n      />\\\\n    </Box>\\\\n  </ThemeWrapper>\\\\n)\\\\n\\\\nexport const PaginationDropdown = () => (\\\\n  <ThemeWrapper>\\\\n    <CardComponent style={{ height: '300px' }}>\\\\n      <IconDropdown\\\\n        variant={text('variant', 'pagination-size') as tSelectVariant}\\\\n        optionList={object('optionList', paginationOptions)}\\\\n        onChange={action('Value selected')}\\\\n        value={text('value', '50')}\\\\n        width={text('width', '120px')}\\\\n      />\\\\n    </CardComponent>\\\\n  </ThemeWrapper>\\\\n)\\\\n\\\\nexport const columnOptionComponent = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <div style={{ width: '200px', margin: 'auto' }}>\\\\n          <IconDropdown\\\\n            variant={text('variant', 'column-filter') as tSelectVariant}\\\\n            optionList={object('optionList', columnOption)}\\\\n            onChange={action('Value selected')}\\\\n            width={text('width', '10px')}\\\\n            isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n          />\\\\n        </div>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const BreadCrumbComponent = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <IconDropdown\\\\n          variant={text('variant', 'bread-crumb') as tSelectVariant}\\\\n          optionList={object('optionList', options)}\\\\n          onChange={action('Value selected')}\\\\n          value={text('value', 'strawberry')}\\\\n          width={text('width', '260px')}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const DatePickerDropDown = () => (\\\\n  <ThemeWrapper>\\\\n    <CardComponent style={{ height: '200px' }}>\\\\n      <IconDropdown\\\\n        variant={text('variant', 'date-picker') as tSelectVariant}\\\\n        optionList={object('optionList', datePickerOptions)}\\\\n        onChange={action('Value selected')}\\\\n        value={text('value', '50')}\\\\n        width={text('width', '80px')}\\\\n        showDownArrow={boolean('Show Down Arrow', true)}\\\\n        isMultiRegionStyled={boolean('Is Multi Region Styled', false)}\\\\n      />\\\\n    </CardComponent>\\\\n  </ThemeWrapper>\\\\n)\\\\nconst arrayMap = [\\\\n  { variant: 'column-filter', name: 'column-filter0' },\\\\n  { variant: 'column-filter', name: 'column-filter1' },\\\\n  { variant: 'column-filter', name: 'column-filter2' }\\\\n]\\\\n\\\\nexport const columnOptionList = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <div style={{ width: '200px', margin: 'auto' }}>\\\\n          {arrayMap.map((obj: any, index: number) => {\\\\n            return (\\\\n              <IconDropdown\\\\n                variant={text('variant', obj?.variant) as tSelectVariant}\\\\n                optionList={object('optionList', columnOption)}\\\\n                onChange={action('Value selected')}\\\\n                width={text('width', '10px')}\\\\n                isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n                key={index}\\\\n              />\\\\n            )\\\\n          })}\\\\n        </div>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const DropdownUniversal = () => {\\\\n  // reference to style\\\\n  // const theme = useContext(ThemeContext)\\\\n  // const borderBottom = `1px solid ${theme?.colors?.grey['A800']}`\\\\n  // const customStyle = {\\\\n  //   control: (provided: any) => ({\\\\n  //     ...provided,\\\\n  //     borderStyle: 'none',\\\\n  //     borderBottom,\\\\n  //     borderRadius: '0px',\\\\n  //     boxShadow: 'none',\\\\n  //     borderColor: theme?.colors?.grey?.A800,\\\\n  //     '&:focus': {\\\\n  //       borderStyle: 'none',\\\\n  //       borderBottom,\\\\n  //       boxShadow: 'none',\\\\n  //       borderColor: theme?.colors?.grey?.A800\\\\n  //     },\\\\n  //     '&:hover': {\\\\n  //       borderStyle: 'none',\\\\n  //       borderBottom,\\\\n  //       boxShadow: 'none',\\\\n  //       borderColor: theme?.colors?.grey?.A800\\\\n  //     }\\\\n  //   }),\\\\n  //   option: (provided: any, state: any) => ({\\\\n  //     ...provided,\\\\n  //     backgroundColor: state?.isSelected\\\\n  //       ? theme?.colors?.primary?.main\\\\n  //       : theme?.colors?.white,\\\\n  //     '&:hover': {\\\\n  //       backgroundColor: state?.isSelected\\\\n  //         ? theme?.colors?.primary?.main\\\\n  //         : theme?.colors?.grey['50']\\\\n  //     }\\\\n  //   }),\\\\n\\\\n  //   menu: (provided: any, state: any) => ({\\\\n  //     ...provided,\\\\n  //     backgroundColor: state?.isSelected\\\\n  //       ? theme.colors.primary.main\\\\n  //       : theme?.colors?.white,\\\\n  //     borderRadius: '2px',\\\\n  //     '&:hover': {\\\\n  //       backgroundColor: state?.isSelected\\\\n  //         ? theme?.colors?.primary?.main\\\\n  //         : theme?.colors?.white\\\\n  //     },\\\\n  //     marginTop: '5px',\\\\n  //     marginLeft: '16px',\\\\n  //     width: '90%'\\\\n  //   }),\\\\n  //   menuList: (provided: any) => ({\\\\n  //     ...provided,\\\\n  //     marginTop: '0px'\\\\n  //   }),\\\\n  //   valueContainer: (provided: any) => ({\\\\n  //     ...provided,\\\\n  //     padding: '0px'\\\\n  //   })\\\\n  // }\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <IconDropdown\\\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          width={text('width', '120px')}\\\\n          menuIsOpen={boolean('menuIsOpen', false)}\\\\n          primary={boolean('primary', false)}\\\\n          intent={text('intent', 'page') as tIntent}\\\\n          onChange={action('Value Changed')}\\\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n          disabled={boolean('disabled', false)}\\\\n          value='available'\\\\n          optionComponent={({ selectedOption }: any) => {\\\\n            return (\\\\n              <div>\\\\n                <div>{selectedOption?.color}</div>\\\\n                <div>{selectedOption?.label}</div>\\\\n              </div>\\\\n            )\\\\n          }}\\\\n          // customStyle={customStyle}\\\\n        >\\\\n          {({\\\\n            selectedOption,\\\\n            menuIsOpen,\\\\n            setMenuIsOpen\\\\n          }: IUniversalDropdownChildren) => {\\\\n            return (\\\\n              <Button\\\\n                onClick={() => {\\\\n                  setMenuIsOpen(!menuIsOpen)\\\\n                  action('Universal open/closed')(menuIsOpen)\\\\n                }}\\\\n                color={text('color', 'white')}\\\\n                bgColor={text('bgColor', 'black')}\\\\n                fullWidth={boolean('fullWidth', false)}\\\\n              >\\\\n                {selectedOption?.label}\\\\n              </Button>\\\\n            )\\\\n          }}\\\\n        </IconDropdown>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const TextFieldDropdown = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <IconDropdown\\\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          width={text('width', '120px')}\\\\n          menuIsOpen={boolean('menuIsOpen', false)}\\\\n          primary={boolean('primary', false)}\\\\n          intent={text('intent', 'page') as tIntent}\\\\n          onChange={action('Value Changed')}\\\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n          disabled={boolean('disabled', false)}\\\\n          value='available'\\\\n          optionComponent={({ selectedOption }: any) => {\\\\n            return (\\\\n              <div>\\\\n                <div>{selectedOption?.color}</div>\\\\n                <div>{selectedOption?.label}</div>\\\\n              </div>\\\\n            )\\\\n          }}\\\\n          // customStyle={customStyle}\\\\n        >\\\\n          {({\\\\n            selectedOption,\\\\n            menuIsOpen,\\\\n            setMenuIsOpen\\\\n          }: IUniversalDropdownChildren) => {\\\\n            return (\\\\n              <TextInput\\\\n                id='someId'\\\\n                name='someName'\\\\n                className='someClassName'\\\\n                label={text('label', 'Username')}\\\\n                labelColor={text('labelColor', 'text.inputLabel.default')}\\\\n                placeholder={text('placeholder', 'Enter text here...')}\\\\n                maxLength={number('maxLength', 10)}\\\\n                error={boolean('error', false)}\\\\n                errorMessage={text('errorMessage', '')}\\\\n                required={boolean('required', false)}\\\\n                fullWidth={boolean('fullWidth', false)}\\\\n                onChange={action('Triggered: onChange')}\\\\n                onClick={() => {\\\\n                  setMenuIsOpen(!menuIsOpen)\\\\n                  action('universal open/closed')(menuIsOpen)\\\\n                }}\\\\n                value={selectedOption?.value}\\\\n              />\\\\n            )\\\\n          }}\\\\n        </IconDropdown>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\",\\\"locationsMap\\\":{}},},\\n  title: `${path}/IconDropdown`,\\n  decorators: [withKnobs],\\n  component: IconDropdown\\n}\\n\\nconst ListViewOption = [\\n  {\\n    value: 'available',\\n    label: 'Mark As Available',\\n    color: 'blue',\\n    tooltipText: 'Mark As Available',\\n    isDisabled: true\\n  },\\n  {\\n    value: 'unavailable',\\n    label: 'Mark As Unavailable',\\n    color: 'red',\\n    tooltipText: 'Mark As Unavailable'\\n  },\\n  {\\n    value: 'active',\\n    label: 'Mark As Active',\\n    color: 'purple',\\n    tooltipText: 'Mark As Active'\\n  },\\n  {\\n    value: 'inactive',\\n    label: 'Mark As Inactive',\\n    color: 'green',\\n    tooltipText: 'Mark As Inactive'\\n  }\\n]\\n\\nconst MultiLevelListViewOption = [\\n  {\\n    id: 'available',\\n    value: 'available',\\n    label: 'Mark As Available',\\n    color: 'blue',\\n    tooltipText: 'Mark As Available',\\n    options: [\\n      {\\n        id: 'available',\\n        value: 'available',\\n        label: 'Mark As Child Available',\\n        color: 'blue',\\n        tooltipText: 'Mark As Child Available'\\n      },\\n      {\\n        id: 'unavailable',\\n        value: 'unavailable',\\n        label: 'Mark As Child Unavailable',\\n        color: 'red',\\n        tooltipText: 'Mark As Child Unavailable'\\n      },\\n      {\\n        id: 'active',\\n        value: 'active',\\n        label: 'Mark As Child Active',\\n        color: 'purple',\\n        tooltipText: 'Mark As Child Active'\\n      },\\n      {\\n        id: 'inactive',\\n        value: 'inactive',\\n        label: 'Mark As Child Inactive',\\n        color: 'green',\\n        tooltipText: 'Mark As Child Inactive',\\n        options: [\\n          {\\n            id: 'available',\\n            value: 'available',\\n            label: 'Mark As Grand Child Available',\\n            color: 'blue',\\n            tooltipText: 'Mark As Grand Child Available'\\n          },\\n          {\\n            id: 'unavailable',\\n            value: 'unavailable',\\n            label: 'Mark As Grand Child Unavailable',\\n            color: 'red',\\n            tooltipText: 'Mark As Grand Child Unavailable'\\n          }\\n        ]\\n      }\\n    ]\\n  },\\n  {\\n    id: 'unavailable',\\n    value: 'unavailable',\\n    label: 'Mark As Unavailable',\\n    color: 'red',\\n    tooltipText: 'Mark As Unavailable'\\n  },\\n  {\\n    id: 'active',\\n    value: 'active',\\n    label: 'Mark As Active',\\n    color: 'purple',\\n    tooltipText: 'Mark As Active'\\n  },\\n  {\\n    id: 'inactive',\\n    value: 'inactive',\\n    label: 'Mark As Inactive',\\n    color: 'green',\\n    tooltipText: 'Mark As Inactive'\\n  }\\n]\\n\\nconst paginationOptions = [\\n  { value: '25', label: '25 per page', title: '25 per page' },\\n  { value: '50', label: '50 per page', title: '50 per page' },\\n  { value: '100', label: '100 per page', title: '100 per page' },\\n  { value: '200', label: '200 per page', title: '200 per page' }\\n]\\n\\nconst columnOption = [\\n  { value: 'ascending', label: 'Sort Ascending', iconVariant: 'hide-menu-box' },\\n  {\\n    value: 'descending',\\n    label: 'Sort Descending',\\n    iconVariant: 'hub-location'\\n  },\\n  { value: 'hideColumn', label: 'Hide Column', iconVariant: 'close' },\\n  { value: 'pinLeft', label: 'Pin Left', iconVariant: 'angle-left' },\\n  { value: 'pinright', label: 'Pin Right', iconVariant: 'angle-right-thin' }\\n]\\n\\nconst options = [\\n  {\\n    value: 'emailVerificationPending',\\n    label: 'Email Verification Pending Shipper'\\n  },\\n  { value: 'allShippers', label: 'All Shippers' },\\n  { value: 'approvalPendingShippers', label: 'Approval Pending Shippers' }\\n]\\n\\nconst datePickerOptions = [\\n  { value: 'January', label: 'January' },\\n  { value: 'February', label: 'February' },\\n  { value: 'March', label: 'March' },\\n  { value: 'April', label: 'April' },\\n  { value: 'May', label: 'May' },\\n  { value: 'June', label: 'June' },\\n  { value: 'July', label: 'July' },\\n  { value: 'August', label: 'August' },\\n  { value: 'September', label: 'September' },\\n  { value: 'October', label: 'October' },\\n  { value: 'November', label: 'November' },\\n  { value: 'December', label: 'December' }\\n]\\n\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\nexport const ButtonDropdown = addSourceDecorator(() => (\\n  <ThemeWrapper>\\n    <Box p='2em' bgColor='grey.50'>\\n      <IconDropdown\\n        variant={text('varaint', 'button-dropdown') as tSelectVariant}\\n        optionList={object('optionList', ListViewOption)}\\n        width={text('width', '120px')}\\n        menuIsOpen={boolean('menuIsOpen', false)}\\n        iconButtonDetails={array('iconList', [\\n          'hide-menu-box',\\n          'More',\\n          'angle-down'\\n        ])}\\n        primary={boolean('primary', false)}\\n        intent={text('intent', 'page') as tIntent}\\n        onChange={action('Value Changed')}\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\n        disabled={boolean('disabled', false)}\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\n        tooltipProps={{\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\n        }}\\n      />\\n    </Box>\\n  </ThemeWrapper>\\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\nexport const TextDropdown = addSourceDecorator(() => (\\n  <ThemeWrapper>\\n    <Box p='2em' bgColor='grey.50'>\\n      <IconDropdown\\n        variant={text('varaint', 'text-dropdown') as tSelectVariant}\\n        optionList={object('optionList', ListViewOption)}\\n        width={text('width', '120px')}\\n        menuIsOpen={boolean('menuIsOpen', false)}\\n        iconButtonDetails={array('iconList', [\\n          'hide-menu-box',\\n          'More',\\n          'angle-down'\\n        ])}\\n        primary={boolean('primary', false)}\\n        intent={text('intent', 'page') as tIntent}\\n        onChange={action('Value Changed')}\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\n        disabled={boolean('disabled', false)}\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\n        tooltipProps={{\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\n        }}\\n      />\\n    </Box>\\n  </ThemeWrapper>\\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nexport const MultiLevelBreadCrumb = addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='2em' bgColor='grey.50'>\\n        <IconDropdown\\n          variant={text('variant', 'multilevel-breadcrumb') as tSelectVariant}\\n          optionList={object('optionList', MultiLevelListViewOption)}\\n          onChange={action('Value selected')}\\n          value={text('value', 'strawberry')}\\n          width={text('width', '260px')}\\n        />\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n  }, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nexport const MultiLevelButtonDropdown = addSourceDecorator(() => (\\n  <ThemeWrapper>\\n    <Box p='2em' bgColor='grey.50'>\\n      <IconDropdown\\n        variant={\\n          text('varaint', 'multilevel-button-dropdown') as tSelectVariant\\n        }\\n        optionList={object('optionList', MultiLevelListViewOption)}\\n        width={text('width', '120px')}\\n        menuIsOpen\\n        iconButtonDetails={array('iconList', [\\n          'hide-menu-box',\\n          'More',\\n          'angle-down'\\n        ])}\\n        defaultOpen='right'\\n        primary={boolean('primary', false)}\\n        intent={text('intent', 'page') as tIntent}\\n        handleClick={(id: any) => console.log('clicked from storybook', id)}\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\n        disabled={boolean('disabled', false)}\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\n        tooltipProps={{\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\n        }}\\n      />\\n    </Box>\\n  </ThemeWrapper>\\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nexport const PaginationDropdown = addSourceDecorator(() => (\\n  <ThemeWrapper>\\n    <CardComponent style={{ height: '300px' }}>\\n      <IconDropdown\\n        variant={text('variant', 'pagination-size') as tSelectVariant}\\n        optionList={object('optionList', paginationOptions)}\\n        onChange={action('Value selected')}\\n        value={text('value', '50')}\\n        width={text('width', '120px')}\\n      />\\n    </CardComponent>\\n  </ThemeWrapper>\\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nexport const columnOptionComponent = addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='2em' bgColor='grey.50'>\\n        <div style={{ width: '200px', margin: 'auto' }}>\\n          <IconDropdown\\n            variant={text('variant', 'column-filter') as tSelectVariant}\\n            optionList={object('optionList', columnOption)}\\n            onChange={action('Value selected')}\\n            width={text('width', '10px')}\\n            isSingleClickOption={boolean('isSingleClickOption', true)}\\n          />\\n        </div>\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nexport const BreadCrumbComponent = addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='2em' bgColor='grey.50'>\\n        <IconDropdown\\n          variant={text('variant', 'bread-crumb') as tSelectVariant}\\n          optionList={object('optionList', options)}\\n          onChange={action('Value selected')}\\n          value={text('value', 'strawberry')}\\n          width={text('width', '260px')}\\n        />\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nexport const DatePickerDropDown = addSourceDecorator(() => (\\n  <ThemeWrapper>\\n    <CardComponent style={{ height: '200px' }}>\\n      <IconDropdown\\n        variant={text('variant', 'date-picker') as tSelectVariant}\\n        optionList={object('optionList', datePickerOptions)}\\n        onChange={action('Value selected')}\\n        value={text('value', '50')}\\n        width={text('width', '80px')}\\n        showDownArrow={boolean('Show Down Arrow', true)}\\n        isMultiRegionStyled={boolean('Is Multi Region Styled', false)}\\n      />\\n    </CardComponent>\\n  </ThemeWrapper>\\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\nconst arrayMap = [\\n  { variant: 'column-filter', name: 'column-filter0' },\\n  { variant: 'column-filter', name: 'column-filter1' },\\n  { variant: 'column-filter', name: 'column-filter2' }\\n]\\n\\nexport const columnOptionList = addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='2em' bgColor='grey.50'>\\n        <div style={{ width: '200px', margin: 'auto' }}>\\n          {arrayMap.map((obj: any, index: number) => {\\n            return (\\n              <IconDropdown\\n                variant={text('variant', obj?.variant) as tSelectVariant}\\n                optionList={object('optionList', columnOption)}\\n                onChange={action('Value selected')}\\n                width={text('width', '10px')}\\n                isSingleClickOption={boolean('isSingleClickOption', true)}\\n                key={index}\\n              />\\n            )\\n          })}\\n        </div>\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nexport const DropdownUniversal = addSourceDecorator(() => {\\n  // reference to style\\n  // const theme = useContext(ThemeContext)\\n  // const borderBottom = `1px solid ${theme?.colors?.grey['A800']}`\\n  // const customStyle = {\\n  //   control: (provided: any) => ({\\n  //     ...provided,\\n  //     borderStyle: 'none',\\n  //     borderBottom,\\n  //     borderRadius: '0px',\\n  //     boxShadow: 'none',\\n  //     borderColor: theme?.colors?.grey?.A800,\\n  //     '&:focus': {\\n  //       borderStyle: 'none',\\n  //       borderBottom,\\n  //       boxShadow: 'none',\\n  //       borderColor: theme?.colors?.grey?.A800\\n  //     },\\n  //     '&:hover': {\\n  //       borderStyle: 'none',\\n  //       borderBottom,\\n  //       boxShadow: 'none',\\n  //       borderColor: theme?.colors?.grey?.A800\\n  //     }\\n  //   }),\\n  //   option: (provided: any, state: any) => ({\\n  //     ...provided,\\n  //     backgroundColor: state?.isSelected\\n  //       ? theme?.colors?.primary?.main\\n  //       : theme?.colors?.white,\\n  //     '&:hover': {\\n  //       backgroundColor: state?.isSelected\\n  //         ? theme?.colors?.primary?.main\\n  //         : theme?.colors?.grey['50']\\n  //     }\\n  //   }),\\n\\n  //   menu: (provided: any, state: any) => ({\\n  //     ...provided,\\n  //     backgroundColor: state?.isSelected\\n  //       ? theme.colors.primary.main\\n  //       : theme?.colors?.white,\\n  //     borderRadius: '2px',\\n  //     '&:hover': {\\n  //       backgroundColor: state?.isSelected\\n  //         ? theme?.colors?.primary?.main\\n  //         : theme?.colors?.white\\n  //     },\\n  //     marginTop: '5px',\\n  //     marginLeft: '16px',\\n  //     width: '90%'\\n  //   }),\\n  //   menuList: (provided: any) => ({\\n  //     ...provided,\\n  //     marginTop: '0px'\\n  //   }),\\n  //   valueContainer: (provided: any) => ({\\n  //     ...provided,\\n  //     padding: '0px'\\n  //   })\\n  // }\\n  return (\\n    <ThemeWrapper>\\n      <Box p='2em' bgColor='grey.50'>\\n        <IconDropdown\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\n          optionList={object('optionList', ListViewOption)}\\n          width={text('width', '120px')}\\n          menuIsOpen={boolean('menuIsOpen', false)}\\n          primary={boolean('primary', false)}\\n          intent={text('intent', 'page') as tIntent}\\n          onChange={action('Value Changed')}\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\n          disabled={boolean('disabled', false)}\\n          value='available'\\n          optionComponent={({ selectedOption }: any) => {\\n            return (\\n              <div>\\n                <div>{selectedOption?.color}</div>\\n                <div>{selectedOption?.label}</div>\\n              </div>\\n            )\\n          }}\\n          // customStyle={customStyle}\\n        >\\n          {({\\n            selectedOption,\\n            menuIsOpen,\\n            setMenuIsOpen\\n          }: IUniversalDropdownChildren) => {\\n            return (\\n              <Button\\n                onClick={() => {\\n                  setMenuIsOpen(!menuIsOpen)\\n                  action('Universal open/closed')(menuIsOpen)\\n                }}\\n                color={text('color', 'white')}\\n                bgColor={text('bgColor', 'black')}\\n                fullWidth={boolean('fullWidth', false)}\\n              >\\n                {selectedOption?.label}\\n              </Button>\\n            )\\n          }}\\n        </IconDropdown>\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nexport const TextFieldDropdown = addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='2em' bgColor='grey.50'>\\n        <IconDropdown\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\n          optionList={object('optionList', ListViewOption)}\\n          width={text('width', '120px')}\\n          menuIsOpen={boolean('menuIsOpen', false)}\\n          primary={boolean('primary', false)}\\n          intent={text('intent', 'page') as tIntent}\\n          onChange={action('Value Changed')}\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\n          disabled={boolean('disabled', false)}\\n          value='available'\\n          optionComponent={({ selectedOption }: any) => {\\n            return (\\n              <div>\\n                <div>{selectedOption?.color}</div>\\n                <div>{selectedOption?.label}</div>\\n              </div>\\n            )\\n          }}\\n          // customStyle={customStyle}\\n        >\\n          {({\\n            selectedOption,\\n            menuIsOpen,\\n            setMenuIsOpen\\n          }: IUniversalDropdownChildren) => {\\n            return (\\n              <TextInput\\n                id='someId'\\n                name='someName'\\n                className='someClassName'\\n                label={text('label', 'Username')}\\n                labelColor={text('labelColor', 'text.inputLabel.default')}\\n                placeholder={text('placeholder', 'Enter text here...')}\\n                maxLength={number('maxLength', 10)}\\n                error={boolean('error', false)}\\n                errorMessage={text('errorMessage', '')}\\n                required={boolean('required', false)}\\n                fullWidth={boolean('fullWidth', false)}\\n                onChange={action('Triggered: onChange')}\\n                onClick={() => {\\n                  setMenuIsOpen(!menuIsOpen)\\n                  action('universal open/closed')(menuIsOpen)\\n                }}\\n                value={selectedOption?.value}\\n              />\\n            )\\n          }}\\n        </IconDropdown>\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\"; // @ts-ignore\n\nvar __ADDS_MAP__ = {}; // @ts-ignore\n\nvar __MAIN_FILE_LOCATION__ = \"/IconDropdown.stories.tsx\"; // @ts-ignore\n\nvar __MODULE_DEPENDENCIES__ = []; // @ts-ignore\n\nvar __LOCAL_DEPENDENCIES__ = {}; // @ts-ignore\n\nvar __IDS_TO_FRAMEWORKS__ = {};\n/* eslint-disable */\n// @ts-nocheck\n// @ts-ignore\n\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource; // @ts-ignore\n\n\nvar addSourceDecorator = require(\"@storybook/source-loader/preview\").addSource; // @ts-ignore\n\n\nvar __SOURCE_PREFIX__ = \"/Users/farhanansari/Code/ui-library/src/components/molecules/IconDropdown\"; // @ts-ignore\n\nvar __STORY__ = \"import { action } from '@storybook/addon-actions'\\nimport {\\n  array,\\n  boolean,\\n  number,\\n  object,\\n  text,\\n  withKnobs\\n} from '@storybook/addon-knobs'\\nimport React from 'react'\\nimport IconDropdown from '.'\\nimport { path } from '..'\\nimport { Box } from '../../..'\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\nimport Button, { tIntent } from '../../atoms/Button'\\nimport CardComponent from '../../atoms/Card'\\nimport { tPlacement } from '../../../utilities/types'\\nimport {\\n  IUniversalDropdownChildren,\\n  tSelectVariant\\n} from '../DropDown/interface'\\nimport TextInput from '../TextInput'\\n\\nexport default {\\n  title: `${path}/IconDropdown`,\\n  decorators: [withKnobs],\\n  component: IconDropdown\\n}\\n\\nconst ListViewOption = [\\n  {\\n    value: 'available',\\n    label: 'Mark As Available',\\n    color: 'blue',\\n    tooltipText: 'Mark As Available',\\n    isDisabled: true\\n  },\\n  {\\n    value: 'unavailable',\\n    label: 'Mark As Unavailable',\\n    color: 'red',\\n    tooltipText: 'Mark As Unavailable'\\n  },\\n  {\\n    value: 'active',\\n    label: 'Mark As Active',\\n    color: 'purple',\\n    tooltipText: 'Mark As Active'\\n  },\\n  {\\n    value: 'inactive',\\n    label: 'Mark As Inactive',\\n    color: 'green',\\n    tooltipText: 'Mark As Inactive'\\n  }\\n]\\n\\nconst MultiLevelListViewOption = [\\n  {\\n    id: 'available',\\n    value: 'available',\\n    label: 'Mark As Available',\\n    color: 'blue',\\n    tooltipText: 'Mark As Available',\\n    options: [\\n      {\\n        id: 'available',\\n        value: 'available',\\n        label: 'Mark As Child Available',\\n        color: 'blue',\\n        tooltipText: 'Mark As Child Available'\\n      },\\n      {\\n        id: 'unavailable',\\n        value: 'unavailable',\\n        label: 'Mark As Child Unavailable',\\n        color: 'red',\\n        tooltipText: 'Mark As Child Unavailable'\\n      },\\n      {\\n        id: 'active',\\n        value: 'active',\\n        label: 'Mark As Child Active',\\n        color: 'purple',\\n        tooltipText: 'Mark As Child Active'\\n      },\\n      {\\n        id: 'inactive',\\n        value: 'inactive',\\n        label: 'Mark As Child Inactive',\\n        color: 'green',\\n        tooltipText: 'Mark As Child Inactive',\\n        options: [\\n          {\\n            id: 'available',\\n            value: 'available',\\n            label: 'Mark As Grand Child Available',\\n            color: 'blue',\\n            tooltipText: 'Mark As Grand Child Available'\\n          },\\n          {\\n            id: 'unavailable',\\n            value: 'unavailable',\\n            label: 'Mark As Grand Child Unavailable',\\n            color: 'red',\\n            tooltipText: 'Mark As Grand Child Unavailable'\\n          }\\n        ]\\n      }\\n    ]\\n  },\\n  {\\n    id: 'unavailable',\\n    value: 'unavailable',\\n    label: 'Mark As Unavailable',\\n    color: 'red',\\n    tooltipText: 'Mark As Unavailable'\\n  },\\n  {\\n    id: 'active',\\n    value: 'active',\\n    label: 'Mark As Active',\\n    color: 'purple',\\n    tooltipText: 'Mark As Active'\\n  },\\n  {\\n    id: 'inactive',\\n    value: 'inactive',\\n    label: 'Mark As Inactive',\\n    color: 'green',\\n    tooltipText: 'Mark As Inactive'\\n  }\\n]\\n\\nconst paginationOptions = [\\n  { value: '25', label: '25 per page', title: '25 per page' },\\n  { value: '50', label: '50 per page', title: '50 per page' },\\n  { value: '100', label: '100 per page', title: '100 per page' },\\n  { value: '200', label: '200 per page', title: '200 per page' }\\n]\\n\\nconst columnOption = [\\n  { value: 'ascending', label: 'Sort Ascending', iconVariant: 'hide-menu-box' },\\n  {\\n    value: 'descending',\\n    label: 'Sort Descending',\\n    iconVariant: 'hub-location'\\n  },\\n  { value: 'hideColumn', label: 'Hide Column', iconVariant: 'close' },\\n  { value: 'pinLeft', label: 'Pin Left', iconVariant: 'angle-left' },\\n  { value: 'pinright', label: 'Pin Right', iconVariant: 'angle-right-thin' }\\n]\\n\\nconst options = [\\n  {\\n    value: 'emailVerificationPending',\\n    label: 'Email Verification Pending Shipper'\\n  },\\n  { value: 'allShippers', label: 'All Shippers' },\\n  { value: 'approvalPendingShippers', label: 'Approval Pending Shippers' }\\n]\\n\\nconst datePickerOptions = [\\n  { value: 'January', label: 'January' },\\n  { value: 'February', label: 'February' },\\n  { value: 'March', label: 'March' },\\n  { value: 'April', label: 'April' },\\n  { value: 'May', label: 'May' },\\n  { value: 'June', label: 'June' },\\n  { value: 'July', label: 'July' },\\n  { value: 'August', label: 'August' },\\n  { value: 'September', label: 'September' },\\n  { value: 'October', label: 'October' },\\n  { value: 'November', label: 'November' },\\n  { value: 'December', label: 'December' }\\n]\\n\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\nexport const ButtonDropdown = () => (\\n  <ThemeWrapper>\\n    <Box p='2em' bgColor='grey.50'>\\n      <IconDropdown\\n        variant={text('varaint', 'button-dropdown') as tSelectVariant}\\n        optionList={object('optionList', ListViewOption)}\\n        width={text('width', '120px')}\\n        menuIsOpen={boolean('menuIsOpen', false)}\\n        iconButtonDetails={array('iconList', [\\n          'hide-menu-box',\\n          'More',\\n          'angle-down'\\n        ])}\\n        primary={boolean('primary', false)}\\n        intent={text('intent', 'page') as tIntent}\\n        onChange={action('Value Changed')}\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\n        disabled={boolean('disabled', false)}\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\n        tooltipProps={{\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\n        }}\\n      />\\n    </Box>\\n  </ThemeWrapper>\\n)\\n\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\nexport const TextDropdown = () => (\\n  <ThemeWrapper>\\n    <Box p='2em' bgColor='grey.50'>\\n      <IconDropdown\\n        variant={text('varaint', 'text-dropdown') as tSelectVariant}\\n        optionList={object('optionList', ListViewOption)}\\n        width={text('width', '120px')}\\n        menuIsOpen={boolean('menuIsOpen', false)}\\n        iconButtonDetails={array('iconList', [\\n          'hide-menu-box',\\n          'More',\\n          'angle-down'\\n        ])}\\n        primary={boolean('primary', false)}\\n        intent={text('intent', 'page') as tIntent}\\n        onChange={action('Value Changed')}\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\n        disabled={boolean('disabled', false)}\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\n        tooltipProps={{\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\n        }}\\n      />\\n    </Box>\\n  </ThemeWrapper>\\n)\\n\\nexport const MultiLevelBreadCrumb = () => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='2em' bgColor='grey.50'>\\n        <IconDropdown\\n          variant={text('variant', 'multilevel-breadcrumb') as tSelectVariant}\\n          optionList={object('optionList', MultiLevelListViewOption)}\\n          onChange={action('Value selected')}\\n          value={text('value', 'strawberry')}\\n          width={text('width', '260px')}\\n        />\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n  }\\n\\nexport const MultiLevelButtonDropdown = () => (\\n  <ThemeWrapper>\\n    <Box p='2em' bgColor='grey.50'>\\n      <IconDropdown\\n        variant={\\n          text('varaint', 'multilevel-button-dropdown') as tSelectVariant\\n        }\\n        optionList={object('optionList', MultiLevelListViewOption)}\\n        width={text('width', '120px')}\\n        menuIsOpen\\n        iconButtonDetails={array('iconList', [\\n          'hide-menu-box',\\n          'More',\\n          'angle-down'\\n        ])}\\n        defaultOpen='right'\\n        primary={boolean('primary', false)}\\n        intent={text('intent', 'page') as tIntent}\\n        handleClick={(id: any) => console.log('clicked from storybook', id)}\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\n        disabled={boolean('disabled', false)}\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\n        tooltipProps={{\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\n        }}\\n      />\\n    </Box>\\n  </ThemeWrapper>\\n)\\n\\nexport const PaginationDropdown = () => (\\n  <ThemeWrapper>\\n    <CardComponent style={{ height: '300px' }}>\\n      <IconDropdown\\n        variant={text('variant', 'pagination-size') as tSelectVariant}\\n        optionList={object('optionList', paginationOptions)}\\n        onChange={action('Value selected')}\\n        value={text('value', '50')}\\n        width={text('width', '120px')}\\n      />\\n    </CardComponent>\\n  </ThemeWrapper>\\n)\\n\\nexport const columnOptionComponent = () => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='2em' bgColor='grey.50'>\\n        <div style={{ width: '200px', margin: 'auto' }}>\\n          <IconDropdown\\n            variant={text('variant', 'column-filter') as tSelectVariant}\\n            optionList={object('optionList', columnOption)}\\n            onChange={action('Value selected')}\\n            width={text('width', '10px')}\\n            isSingleClickOption={boolean('isSingleClickOption', true)}\\n          />\\n        </div>\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}\\n\\nexport const BreadCrumbComponent = () => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='2em' bgColor='grey.50'>\\n        <IconDropdown\\n          variant={text('variant', 'bread-crumb') as tSelectVariant}\\n          optionList={object('optionList', options)}\\n          onChange={action('Value selected')}\\n          value={text('value', 'strawberry')}\\n          width={text('width', '260px')}\\n        />\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}\\n\\nexport const DatePickerDropDown = () => (\\n  <ThemeWrapper>\\n    <CardComponent style={{ height: '200px' }}>\\n      <IconDropdown\\n        variant={text('variant', 'date-picker') as tSelectVariant}\\n        optionList={object('optionList', datePickerOptions)}\\n        onChange={action('Value selected')}\\n        value={text('value', '50')}\\n        width={text('width', '80px')}\\n        showDownArrow={boolean('Show Down Arrow', true)}\\n        isMultiRegionStyled={boolean('Is Multi Region Styled', false)}\\n      />\\n    </CardComponent>\\n  </ThemeWrapper>\\n)\\nconst arrayMap = [\\n  { variant: 'column-filter', name: 'column-filter0' },\\n  { variant: 'column-filter', name: 'column-filter1' },\\n  { variant: 'column-filter', name: 'column-filter2' }\\n]\\n\\nexport const columnOptionList = () => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='2em' bgColor='grey.50'>\\n        <div style={{ width: '200px', margin: 'auto' }}>\\n          {arrayMap.map((obj: any, index: number) => {\\n            return (\\n              <IconDropdown\\n                variant={text('variant', obj?.variant) as tSelectVariant}\\n                optionList={object('optionList', columnOption)}\\n                onChange={action('Value selected')}\\n                width={text('width', '10px')}\\n                isSingleClickOption={boolean('isSingleClickOption', true)}\\n                key={index}\\n              />\\n            )\\n          })}\\n        </div>\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}\\n\\nexport const DropdownUniversal = () => {\\n  // reference to style\\n  // const theme = useContext(ThemeContext)\\n  // const borderBottom = `1px solid ${theme?.colors?.grey['A800']}`\\n  // const customStyle = {\\n  //   control: (provided: any) => ({\\n  //     ...provided,\\n  //     borderStyle: 'none',\\n  //     borderBottom,\\n  //     borderRadius: '0px',\\n  //     boxShadow: 'none',\\n  //     borderColor: theme?.colors?.grey?.A800,\\n  //     '&:focus': {\\n  //       borderStyle: 'none',\\n  //       borderBottom,\\n  //       boxShadow: 'none',\\n  //       borderColor: theme?.colors?.grey?.A800\\n  //     },\\n  //     '&:hover': {\\n  //       borderStyle: 'none',\\n  //       borderBottom,\\n  //       boxShadow: 'none',\\n  //       borderColor: theme?.colors?.grey?.A800\\n  //     }\\n  //   }),\\n  //   option: (provided: any, state: any) => ({\\n  //     ...provided,\\n  //     backgroundColor: state?.isSelected\\n  //       ? theme?.colors?.primary?.main\\n  //       : theme?.colors?.white,\\n  //     '&:hover': {\\n  //       backgroundColor: state?.isSelected\\n  //         ? theme?.colors?.primary?.main\\n  //         : theme?.colors?.grey['50']\\n  //     }\\n  //   }),\\n\\n  //   menu: (provided: any, state: any) => ({\\n  //     ...provided,\\n  //     backgroundColor: state?.isSelected\\n  //       ? theme.colors.primary.main\\n  //       : theme?.colors?.white,\\n  //     borderRadius: '2px',\\n  //     '&:hover': {\\n  //       backgroundColor: state?.isSelected\\n  //         ? theme?.colors?.primary?.main\\n  //         : theme?.colors?.white\\n  //     },\\n  //     marginTop: '5px',\\n  //     marginLeft: '16px',\\n  //     width: '90%'\\n  //   }),\\n  //   menuList: (provided: any) => ({\\n  //     ...provided,\\n  //     marginTop: '0px'\\n  //   }),\\n  //   valueContainer: (provided: any) => ({\\n  //     ...provided,\\n  //     padding: '0px'\\n  //   })\\n  // }\\n  return (\\n    <ThemeWrapper>\\n      <Box p='2em' bgColor='grey.50'>\\n        <IconDropdown\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\n          optionList={object('optionList', ListViewOption)}\\n          width={text('width', '120px')}\\n          menuIsOpen={boolean('menuIsOpen', false)}\\n          primary={boolean('primary', false)}\\n          intent={text('intent', 'page') as tIntent}\\n          onChange={action('Value Changed')}\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\n          disabled={boolean('disabled', false)}\\n          value='available'\\n          optionComponent={({ selectedOption }: any) => {\\n            return (\\n              <div>\\n                <div>{selectedOption?.color}</div>\\n                <div>{selectedOption?.label}</div>\\n              </div>\\n            )\\n          }}\\n          // customStyle={customStyle}\\n        >\\n          {({\\n            selectedOption,\\n            menuIsOpen,\\n            setMenuIsOpen\\n          }: IUniversalDropdownChildren) => {\\n            return (\\n              <Button\\n                onClick={() => {\\n                  setMenuIsOpen(!menuIsOpen)\\n                  action('Universal open/closed')(menuIsOpen)\\n                }}\\n                color={text('color', 'white')}\\n                bgColor={text('bgColor', 'black')}\\n                fullWidth={boolean('fullWidth', false)}\\n              >\\n                {selectedOption?.label}\\n              </Button>\\n            )\\n          }}\\n        </IconDropdown>\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}\\n\\nexport const TextFieldDropdown = () => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='2em' bgColor='grey.50'>\\n        <IconDropdown\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\n          optionList={object('optionList', ListViewOption)}\\n          width={text('width', '120px')}\\n          menuIsOpen={boolean('menuIsOpen', false)}\\n          primary={boolean('primary', false)}\\n          intent={text('intent', 'page') as tIntent}\\n          onChange={action('Value Changed')}\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\n          disabled={boolean('disabled', false)}\\n          value='available'\\n          optionComponent={({ selectedOption }: any) => {\\n            return (\\n              <div>\\n                <div>{selectedOption?.color}</div>\\n                <div>{selectedOption?.label}</div>\\n              </div>\\n            )\\n          }}\\n          // customStyle={customStyle}\\n        >\\n          {({\\n            selectedOption,\\n            menuIsOpen,\\n            setMenuIsOpen\\n          }: IUniversalDropdownChildren) => {\\n            return (\\n              <TextInput\\n                id='someId'\\n                name='someName'\\n                className='someClassName'\\n                label={text('label', 'Username')}\\n                labelColor={text('labelColor', 'text.inputLabel.default')}\\n                placeholder={text('placeholder', 'Enter text here...')}\\n                maxLength={number('maxLength', 10)}\\n                error={boolean('error', false)}\\n                errorMessage={text('errorMessage', '')}\\n                required={boolean('required', false)}\\n                fullWidth={boolean('fullWidth', false)}\\n                onChange={action('Triggered: onChange')}\\n                onClick={() => {\\n                  setMenuIsOpen(!menuIsOpen)\\n                  action('universal open/closed')(menuIsOpen)\\n                }}\\n                value={selectedOption?.value}\\n              />\\n            )\\n          }}\\n        </IconDropdown>\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}\\n\"; // @ts-ignore\n\nvar __ADDS_MAP__ = {}; // @ts-ignore\n\nvar __MAIN_FILE_LOCATION__ = \"/IconDropdown.stories.tsx\"; // @ts-ignore\n\nvar __MODULE_DEPENDENCIES__ = []; // @ts-ignore\n\nvar __LOCAL_DEPENDENCIES__ = {}; // @ts-ignore\n\nvar __IDS_TO_FRAMEWORKS__ = {};\nimport { action } from '@storybook/addon-actions';\nimport { array, boolean as _boolean, number, object, text, withKnobs } from '@storybook/addon-knobs';\nimport React from 'react';\nimport IconDropdown from '.';\nimport { path } from '..';\nimport { Box } from '../../..';\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper';\nimport Button from '../../atoms/Button';\nimport CardComponent from '../../atoms/Card';\nimport TextInput from '../TextInput';\nexport default {\n  parameters: (_parameters = {\n    \"storySource\": {\n      \"source\": \"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/farhanansari/Code/ui-library/src/components/molecules/IconDropdown\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"\\\\n\\\\n// @ts-nocheck\\\\n// @ts-ignore\\\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\\\n// @ts-ignore\\\\nvar addSourceDecorator = require(\\\\\\\"@storybook/source-loader/preview\\\\\\\").addSource;\\\\n// @ts-ignore\\\\nvar __SOURCE_PREFIX__ = \\\\\\\"/Users/farhanansari/Code/ui-library/src/components/molecules/IconDropdown\\\\\\\";\\\\n// @ts-ignore\\\\nvar __STORY__ = \\\\\\\"import { action } from '@storybook/addon-actions'\\\\\\\\nimport {\\\\\\\\n  array,\\\\\\\\n  boolean,\\\\\\\\n  number,\\\\\\\\n  object,\\\\\\\\n  text,\\\\\\\\n  withKnobs\\\\\\\\n} from '@storybook/addon-knobs'\\\\\\\\nimport React from 'react'\\\\\\\\nimport IconDropdown from '.'\\\\\\\\nimport { path } from '..'\\\\\\\\nimport { Box } from '../../..'\\\\\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\\\\\nimport Button, { tIntent } from '../../atoms/Button'\\\\\\\\nimport CardComponent from '../../atoms/Card'\\\\\\\\nimport { tPlacement } from '../../../utilities/types'\\\\\\\\nimport {\\\\\\\\n  IUniversalDropdownChildren,\\\\\\\\n  tSelectVariant\\\\\\\\n} from '../DropDown/interface'\\\\\\\\nimport TextInput from '../TextInput'\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/IconDropdown`,\\\\\\\\n  decorators: [withKnobs],\\\\\\\\n  component: IconDropdown\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst ListViewOption = [\\\\\\\\n  {\\\\\\\\n    value: 'available',\\\\\\\\n    label: 'Mark As Available',\\\\\\\\n    color: 'blue',\\\\\\\\n    tooltipText: 'Mark As Available',\\\\\\\\n    isDisabled: true\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    value: 'unavailable',\\\\\\\\n    label: 'Mark As Unavailable',\\\\\\\\n    color: 'red',\\\\\\\\n    tooltipText: 'Mark As Unavailable'\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    value: 'active',\\\\\\\\n    label: 'Mark As Active',\\\\\\\\n    color: 'purple',\\\\\\\\n    tooltipText: 'Mark As Active'\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    value: 'inactive',\\\\\\\\n    label: 'Mark As Inactive',\\\\\\\\n    color: 'green',\\\\\\\\n    tooltipText: 'Mark As Inactive'\\\\\\\\n  }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst MultiLevelListViewOption = [\\\\\\\\n  {\\\\\\\\n    id: 'available',\\\\\\\\n    value: 'available',\\\\\\\\n    label: 'Mark As Available',\\\\\\\\n    color: 'blue',\\\\\\\\n    tooltipText: 'Mark As Available',\\\\\\\\n    options: [\\\\\\\\n      {\\\\\\\\n        id: 'available',\\\\\\\\n        value: 'available',\\\\\\\\n        label: 'Mark As Child Available',\\\\\\\\n        color: 'blue',\\\\\\\\n        tooltipText: 'Mark As Child Available'\\\\\\\\n      },\\\\\\\\n      {\\\\\\\\n        id: 'unavailable',\\\\\\\\n        value: 'unavailable',\\\\\\\\n        label: 'Mark As Child Unavailable',\\\\\\\\n        color: 'red',\\\\\\\\n        tooltipText: 'Mark As Child Unavailable'\\\\\\\\n      },\\\\\\\\n      {\\\\\\\\n        id: 'active',\\\\\\\\n        value: 'active',\\\\\\\\n        label: 'Mark As Child Active',\\\\\\\\n        color: 'purple',\\\\\\\\n        tooltipText: 'Mark As Child Active'\\\\\\\\n      },\\\\\\\\n      {\\\\\\\\n        id: 'inactive',\\\\\\\\n        value: 'inactive',\\\\\\\\n        label: 'Mark As Child Inactive',\\\\\\\\n        color: 'green',\\\\\\\\n        tooltipText: 'Mark As Child Inactive',\\\\\\\\n        options: [\\\\\\\\n          {\\\\\\\\n            id: 'available',\\\\\\\\n            value: 'available',\\\\\\\\n            label: 'Mark As Grand Child Available',\\\\\\\\n            color: 'blue',\\\\\\\\n            tooltipText: 'Mark As Grand Child Available'\\\\\\\\n          },\\\\\\\\n          {\\\\\\\\n            id: 'unavailable',\\\\\\\\n            value: 'unavailable',\\\\\\\\n            label: 'Mark As Grand Child Unavailable',\\\\\\\\n            color: 'red',\\\\\\\\n            tooltipText: 'Mark As Grand Child Unavailable'\\\\\\\\n          }\\\\\\\\n        ]\\\\\\\\n      }\\\\\\\\n    ]\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    id: 'unavailable',\\\\\\\\n    value: 'unavailable',\\\\\\\\n    label: 'Mark As Unavailable',\\\\\\\\n    color: 'red',\\\\\\\\n    tooltipText: 'Mark As Unavailable'\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    id: 'active',\\\\\\\\n    value: 'active',\\\\\\\\n    label: 'Mark As Active',\\\\\\\\n    color: 'purple',\\\\\\\\n    tooltipText: 'Mark As Active'\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    id: 'inactive',\\\\\\\\n    value: 'inactive',\\\\\\\\n    label: 'Mark As Inactive',\\\\\\\\n    color: 'green',\\\\\\\\n    tooltipText: 'Mark As Inactive'\\\\\\\\n  }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst paginationOptions = [\\\\\\\\n  { value: '25', label: '25 per page', title: '25 per page' },\\\\\\\\n  { value: '50', label: '50 per page', title: '50 per page' },\\\\\\\\n  { value: '100', label: '100 per page', title: '100 per page' },\\\\\\\\n  { value: '200', label: '200 per page', title: '200 per page' }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst columnOption = [\\\\\\\\n  { value: 'ascending', label: 'Sort Ascending', iconVariant: 'hide-menu-box' },\\\\\\\\n  {\\\\\\\\n    value: 'descending',\\\\\\\\n    label: 'Sort Descending',\\\\\\\\n    iconVariant: 'hub-location'\\\\\\\\n  },\\\\\\\\n  { value: 'hideColumn', label: 'Hide Column', iconVariant: 'close' },\\\\\\\\n  { value: 'pinLeft', label: 'Pin Left', iconVariant: 'angle-left' },\\\\\\\\n  { value: 'pinright', label: 'Pin Right', iconVariant: 'angle-right-thin' }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst options = [\\\\\\\\n  {\\\\\\\\n    value: 'emailVerificationPending',\\\\\\\\n    label: 'Email Verification Pending Shipper'\\\\\\\\n  },\\\\\\\\n  { value: 'allShippers', label: 'All Shippers' },\\\\\\\\n  { value: 'approvalPendingShippers', label: 'Approval Pending Shippers' }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst datePickerOptions = [\\\\\\\\n  { value: 'January', label: 'January' },\\\\\\\\n  { value: 'February', label: 'February' },\\\\\\\\n  { value: 'March', label: 'March' },\\\\\\\\n  { value: 'April', label: 'April' },\\\\\\\\n  { value: 'May', label: 'May' },\\\\\\\\n  { value: 'June', label: 'June' },\\\\\\\\n  { value: 'July', label: 'July' },\\\\\\\\n  { value: 'August', label: 'August' },\\\\\\\\n  { value: 'September', label: 'September' },\\\\\\\\n  { value: 'October', label: 'October' },\\\\\\\\n  { value: 'November', label: 'November' },\\\\\\\\n  { value: 'December', label: 'December' }\\\\\\\\n]\\\\\\\\n\\\\\\\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\\\\\\\nexport const ButtonDropdown = () => (\\\\\\\\n  <ThemeWrapper>\\\\\\\\n    <Box p='2em' bgColor='grey.50'>\\\\\\\\n      <IconDropdown\\\\\\\\n        variant={text('varaint', 'button-dropdown') as tSelectVariant}\\\\\\\\n        optionList={object('optionList', ListViewOption)}\\\\\\\\n        width={text('width', '120px')}\\\\\\\\n        menuIsOpen={boolean('menuIsOpen', false)}\\\\\\\\n        iconButtonDetails={array('iconList', [\\\\\\\\n          'hide-menu-box',\\\\\\\\n          'More',\\\\\\\\n          'angle-down'\\\\\\\\n        ])}\\\\\\\\n        primary={boolean('primary', false)}\\\\\\\\n        intent={text('intent', 'page') as tIntent}\\\\\\\\n        onChange={action('Value Changed')}\\\\\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n        disabled={boolean('disabled', false)}\\\\\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\\\\\n        tooltipProps={{\\\\\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </Box>\\\\\\\\n  </ThemeWrapper>\\\\\\\\n)\\\\\\\\n\\\\\\\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\\\\\\\nexport const TextDropdown = () => (\\\\\\\\n  <ThemeWrapper>\\\\\\\\n    <Box p='2em' bgColor='grey.50'>\\\\\\\\n      <IconDropdown\\\\\\\\n        variant={text('varaint', 'text-dropdown') as tSelectVariant}\\\\\\\\n        optionList={object('optionList', ListViewOption)}\\\\\\\\n        width={text('width', '120px')}\\\\\\\\n        menuIsOpen={boolean('menuIsOpen', false)}\\\\\\\\n        iconButtonDetails={array('iconList', [\\\\\\\\n          'hide-menu-box',\\\\\\\\n          'More',\\\\\\\\n          'angle-down'\\\\\\\\n        ])}\\\\\\\\n        primary={boolean('primary', false)}\\\\\\\\n        intent={text('intent', 'page') as tIntent}\\\\\\\\n        onChange={action('Value Changed')}\\\\\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n        disabled={boolean('disabled', false)}\\\\\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\\\\\n        tooltipProps={{\\\\\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </Box>\\\\\\\\n  </ThemeWrapper>\\\\\\\\n)\\\\\\\\n\\\\\\\\nexport const MultiLevelBreadCrumb = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='2em' bgColor='grey.50'>\\\\\\\\n        <IconDropdown\\\\\\\\n          variant={text('variant', 'multilevel-breadcrumb') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', MultiLevelListViewOption)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          value={text('value', 'strawberry')}\\\\\\\\n          width={text('width', '260px')}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n  }\\\\\\\\n\\\\\\\\nexport const MultiLevelButtonDropdown = () => (\\\\\\\\n  <ThemeWrapper>\\\\\\\\n    <Box p='2em' bgColor='grey.50'>\\\\\\\\n      <IconDropdown\\\\\\\\n        variant={\\\\\\\\n          text('varaint', 'multilevel-button-dropdown') as tSelectVariant\\\\\\\\n        }\\\\\\\\n        optionList={object('optionList', MultiLevelListViewOption)}\\\\\\\\n        width={text('width', '120px')}\\\\\\\\n        menuIsOpen\\\\\\\\n        iconButtonDetails={array('iconList', [\\\\\\\\n          'hide-menu-box',\\\\\\\\n          'More',\\\\\\\\n          'angle-down'\\\\\\\\n        ])}\\\\\\\\n        defaultOpen='right'\\\\\\\\n        primary={boolean('primary', false)}\\\\\\\\n        intent={text('intent', 'page') as tIntent}\\\\\\\\n        handleClick={(id: any) => console.log('clicked from storybook', id)}\\\\\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n        disabled={boolean('disabled', false)}\\\\\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\\\\\n        tooltipProps={{\\\\\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </Box>\\\\\\\\n  </ThemeWrapper>\\\\\\\\n)\\\\\\\\n\\\\\\\\nexport const PaginationDropdown = () => (\\\\\\\\n  <ThemeWrapper>\\\\\\\\n    <CardComponent style={{ height: '300px' }}>\\\\\\\\n      <IconDropdown\\\\\\\\n        variant={text('variant', 'pagination-size') as tSelectVariant}\\\\\\\\n        optionList={object('optionList', paginationOptions)}\\\\\\\\n        onChange={action('Value selected')}\\\\\\\\n        value={text('value', '50')}\\\\\\\\n        width={text('width', '120px')}\\\\\\\\n      />\\\\\\\\n    </CardComponent>\\\\\\\\n  </ThemeWrapper>\\\\\\\\n)\\\\\\\\n\\\\\\\\nexport const columnOptionComponent = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='2em' bgColor='grey.50'>\\\\\\\\n        <div style={{ width: '200px', margin: 'auto' }}>\\\\\\\\n          <IconDropdown\\\\\\\\n            variant={text('variant', 'column-filter') as tSelectVariant}\\\\\\\\n            optionList={object('optionList', columnOption)}\\\\\\\\n            onChange={action('Value selected')}\\\\\\\\n            width={text('width', '10px')}\\\\\\\\n            isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n          />\\\\\\\\n        </div>\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const BreadCrumbComponent = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='2em' bgColor='grey.50'>\\\\\\\\n        <IconDropdown\\\\\\\\n          variant={text('variant', 'bread-crumb') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', options)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          value={text('value', 'strawberry')}\\\\\\\\n          width={text('width', '260px')}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const DatePickerDropDown = () => (\\\\\\\\n  <ThemeWrapper>\\\\\\\\n    <CardComponent style={{ height: '200px' }}>\\\\\\\\n      <IconDropdown\\\\\\\\n        variant={text('variant', 'date-picker') as tSelectVariant}\\\\\\\\n        optionList={object('optionList', datePickerOptions)}\\\\\\\\n        onChange={action('Value selected')}\\\\\\\\n        value={text('value', '50')}\\\\\\\\n        width={text('width', '80px')}\\\\\\\\n        showDownArrow={boolean('Show Down Arrow', true)}\\\\\\\\n        isMultiRegionStyled={boolean('Is Multi Region Styled', false)}\\\\\\\\n      />\\\\\\\\n    </CardComponent>\\\\\\\\n  </ThemeWrapper>\\\\\\\\n)\\\\\\\\nconst arrayMap = [\\\\\\\\n  { variant: 'column-filter', name: 'column-filter0' },\\\\\\\\n  { variant: 'column-filter', name: 'column-filter1' },\\\\\\\\n  { variant: 'column-filter', name: 'column-filter2' }\\\\\\\\n]\\\\\\\\n\\\\\\\\nexport const columnOptionList = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='2em' bgColor='grey.50'>\\\\\\\\n        <div style={{ width: '200px', margin: 'auto' }}>\\\\\\\\n          {arrayMap.map((obj: any, index: number) => {\\\\\\\\n            return (\\\\\\\\n              <IconDropdown\\\\\\\\n                variant={text('variant', obj?.variant) as tSelectVariant}\\\\\\\\n                optionList={object('optionList', columnOption)}\\\\\\\\n                onChange={action('Value selected')}\\\\\\\\n                width={text('width', '10px')}\\\\\\\\n                isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n                key={index}\\\\\\\\n              />\\\\\\\\n            )\\\\\\\\n          })}\\\\\\\\n        </div>\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const DropdownUniversal = () => {\\\\\\\\n  // reference to style\\\\\\\\n  // const theme = useContext(ThemeContext)\\\\\\\\n  // const borderBottom = `1px solid ${theme?.colors?.grey['A800']}`\\\\\\\\n  // const customStyle = {\\\\\\\\n  //   control: (provided: any) => ({\\\\\\\\n  //     ...provided,\\\\\\\\n  //     borderStyle: 'none',\\\\\\\\n  //     borderBottom,\\\\\\\\n  //     borderRadius: '0px',\\\\\\\\n  //     boxShadow: 'none',\\\\\\\\n  //     borderColor: theme?.colors?.grey?.A800,\\\\\\\\n  //     '&:focus': {\\\\\\\\n  //       borderStyle: 'none',\\\\\\\\n  //       borderBottom,\\\\\\\\n  //       boxShadow: 'none',\\\\\\\\n  //       borderColor: theme?.colors?.grey?.A800\\\\\\\\n  //     },\\\\\\\\n  //     '&:hover': {\\\\\\\\n  //       borderStyle: 'none',\\\\\\\\n  //       borderBottom,\\\\\\\\n  //       boxShadow: 'none',\\\\\\\\n  //       borderColor: theme?.colors?.grey?.A800\\\\\\\\n  //     }\\\\\\\\n  //   }),\\\\\\\\n  //   option: (provided: any, state: any) => ({\\\\\\\\n  //     ...provided,\\\\\\\\n  //     backgroundColor: state?.isSelected\\\\\\\\n  //       ? theme?.colors?.primary?.main\\\\\\\\n  //       : theme?.colors?.white,\\\\\\\\n  //     '&:hover': {\\\\\\\\n  //       backgroundColor: state?.isSelected\\\\\\\\n  //         ? theme?.colors?.primary?.main\\\\\\\\n  //         : theme?.colors?.grey['50']\\\\\\\\n  //     }\\\\\\\\n  //   }),\\\\\\\\n\\\\\\\\n  //   menu: (provided: any, state: any) => ({\\\\\\\\n  //     ...provided,\\\\\\\\n  //     backgroundColor: state?.isSelected\\\\\\\\n  //       ? theme.colors.primary.main\\\\\\\\n  //       : theme?.colors?.white,\\\\\\\\n  //     borderRadius: '2px',\\\\\\\\n  //     '&:hover': {\\\\\\\\n  //       backgroundColor: state?.isSelected\\\\\\\\n  //         ? theme?.colors?.primary?.main\\\\\\\\n  //         : theme?.colors?.white\\\\\\\\n  //     },\\\\\\\\n  //     marginTop: '5px',\\\\\\\\n  //     marginLeft: '16px',\\\\\\\\n  //     width: '90%'\\\\\\\\n  //   }),\\\\\\\\n  //   menuList: (provided: any) => ({\\\\\\\\n  //     ...provided,\\\\\\\\n  //     marginTop: '0px'\\\\\\\\n  //   }),\\\\\\\\n  //   valueContainer: (provided: any) => ({\\\\\\\\n  //     ...provided,\\\\\\\\n  //     padding: '0px'\\\\\\\\n  //   })\\\\\\\\n  // }\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='2em' bgColor='grey.50'>\\\\\\\\n        <IconDropdown\\\\\\\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', ListViewOption)}\\\\\\\\n          width={text('width', '120px')}\\\\\\\\n          menuIsOpen={boolean('menuIsOpen', false)}\\\\\\\\n          primary={boolean('primary', false)}\\\\\\\\n          intent={text('intent', 'page') as tIntent}\\\\\\\\n          onChange={action('Value Changed')}\\\\\\\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n          value='available'\\\\\\\\n          optionComponent={({ selectedOption }: any) => {\\\\\\\\n            return (\\\\\\\\n              <div>\\\\\\\\n                <div>{selectedOption?.color}</div>\\\\\\\\n                <div>{selectedOption?.label}</div>\\\\\\\\n              </div>\\\\\\\\n            )\\\\\\\\n          }}\\\\\\\\n          // customStyle={customStyle}\\\\\\\\n        >\\\\\\\\n          {({\\\\\\\\n            selectedOption,\\\\\\\\n            menuIsOpen,\\\\\\\\n            setMenuIsOpen\\\\\\\\n          }: IUniversalDropdownChildren) => {\\\\\\\\n            return (\\\\\\\\n              <Button\\\\\\\\n                onClick={() => {\\\\\\\\n                  setMenuIsOpen(!menuIsOpen)\\\\\\\\n                  action('Universal open/closed')(menuIsOpen)\\\\\\\\n                }}\\\\\\\\n                color={text('color', 'white')}\\\\\\\\n                bgColor={text('bgColor', 'black')}\\\\\\\\n                fullWidth={boolean('fullWidth', false)}\\\\\\\\n              >\\\\\\\\n                {selectedOption?.label}\\\\\\\\n              </Button>\\\\\\\\n            )\\\\\\\\n          }}\\\\\\\\n        </IconDropdown>\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const TextFieldDropdown = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='2em' bgColor='grey.50'>\\\\\\\\n        <IconDropdown\\\\\\\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', ListViewOption)}\\\\\\\\n          width={text('width', '120px')}\\\\\\\\n          menuIsOpen={boolean('menuIsOpen', false)}\\\\\\\\n          primary={boolean('primary', false)}\\\\\\\\n          intent={text('intent', 'page') as tIntent}\\\\\\\\n          onChange={action('Value Changed')}\\\\\\\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n          value='available'\\\\\\\\n          optionComponent={({ selectedOption }: any) => {\\\\\\\\n            return (\\\\\\\\n              <div>\\\\\\\\n                <div>{selectedOption?.color}</div>\\\\\\\\n                <div>{selectedOption?.label}</div>\\\\\\\\n              </div>\\\\\\\\n            )\\\\\\\\n          }}\\\\\\\\n          // customStyle={customStyle}\\\\\\\\n        >\\\\\\\\n          {({\\\\\\\\n            selectedOption,\\\\\\\\n            menuIsOpen,\\\\\\\\n            setMenuIsOpen\\\\\\\\n          }: IUniversalDropdownChildren) => {\\\\\\\\n            return (\\\\\\\\n              <TextInput\\\\\\\\n                id='someId'\\\\\\\\n                name='someName'\\\\\\\\n                className='someClassName'\\\\\\\\n                label={text('label', 'Username')}\\\\\\\\n                labelColor={text('labelColor', 'text.inputLabel.default')}\\\\\\\\n                placeholder={text('placeholder', 'Enter text here...')}\\\\\\\\n                maxLength={number('maxLength', 10)}\\\\\\\\n                error={boolean('error', false)}\\\\\\\\n                errorMessage={text('errorMessage', '')}\\\\\\\\n                required={boolean('required', false)}\\\\\\\\n                fullWidth={boolean('fullWidth', false)}\\\\\\\\n                onChange={action('Triggered: onChange')}\\\\\\\\n                onClick={() => {\\\\\\\\n                  setMenuIsOpen(!menuIsOpen)\\\\\\\\n                  action('universal open/closed')(menuIsOpen)\\\\\\\\n                }}\\\\\\\\n                value={selectedOption?.value}\\\\\\\\n              />\\\\\\\\n            )\\\\\\\\n          }}\\\\\\\\n        </IconDropdown>\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\";\\\\n// @ts-ignore\\\\nvar __ADDS_MAP__ = {};\\\\n// @ts-ignore\\\\nvar __MAIN_FILE_LOCATION__ = \\\\\\\"/IconDropdown.stories.tsx\\\\\\\";\\\\n// @ts-ignore\\\\nvar __MODULE_DEPENDENCIES__ = [];\\\\n// @ts-ignore\\\\nvar __LOCAL_DEPENDENCIES__ = {};\\\\n// @ts-ignore\\\\nvar __IDS_TO_FRAMEWORKS__ = {};\\\\n        \\\\nimport { action } from '@storybook/addon-actions'\\\\nimport {\\\\n  array,\\\\n  boolean,\\\\n  number,\\\\n  object,\\\\n  text,\\\\n  withKnobs\\\\n} from '@storybook/addon-knobs'\\\\nimport React from 'react'\\\\nimport IconDropdown from '.'\\\\nimport { path } from '..'\\\\nimport { Box } from '../../..'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport Button, { tIntent } from '../../atoms/Button'\\\\nimport CardComponent from '../../atoms/Card'\\\\nimport { tPlacement } from '../../../utilities/types'\\\\nimport {\\\\n  IUniversalDropdownChildren,\\\\n  tSelectVariant\\\\n} from '../DropDown/interface'\\\\nimport TextInput from '../TextInput'\\\\n\\\\nexport default {parameters: {\\\\\\\"storySource\\\\\\\":{\\\\\\\"source\\\\\\\":\\\\\\\"import { action } from '@storybook/addon-actions'\\\\\\\\nimport {\\\\\\\\n  array,\\\\\\\\n  boolean,\\\\\\\\n  number,\\\\\\\\n  object,\\\\\\\\n  text,\\\\\\\\n  withKnobs\\\\\\\\n} from '@storybook/addon-knobs'\\\\\\\\nimport React from 'react'\\\\\\\\nimport IconDropdown from '.'\\\\\\\\nimport { path } from '..'\\\\\\\\nimport { Box } from '../../..'\\\\\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\\\\\nimport Button, { tIntent } from '../../atoms/Button'\\\\\\\\nimport CardComponent from '../../atoms/Card'\\\\\\\\nimport { tPlacement } from '../../../utilities/types'\\\\\\\\nimport {\\\\\\\\n  IUniversalDropdownChildren,\\\\\\\\n  tSelectVariant\\\\\\\\n} from '../DropDown/interface'\\\\\\\\nimport TextInput from '../TextInput'\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/IconDropdown`,\\\\\\\\n  decorators: [withKnobs],\\\\\\\\n  component: IconDropdown\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst ListViewOption = [\\\\\\\\n  {\\\\\\\\n    value: 'available',\\\\\\\\n    label: 'Mark As Available',\\\\\\\\n    color: 'blue',\\\\\\\\n    tooltipText: 'Mark As Available',\\\\\\\\n    isDisabled: true\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    value: 'unavailable',\\\\\\\\n    label: 'Mark As Unavailable',\\\\\\\\n    color: 'red',\\\\\\\\n    tooltipText: 'Mark As Unavailable'\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    value: 'active',\\\\\\\\n    label: 'Mark As Active',\\\\\\\\n    color: 'purple',\\\\\\\\n    tooltipText: 'Mark As Active'\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    value: 'inactive',\\\\\\\\n    label: 'Mark As Inactive',\\\\\\\\n    color: 'green',\\\\\\\\n    tooltipText: 'Mark As Inactive'\\\\\\\\n  }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst MultiLevelListViewOption = [\\\\\\\\n  {\\\\\\\\n    id: 'available',\\\\\\\\n    value: 'available',\\\\\\\\n    label: 'Mark As Available',\\\\\\\\n    color: 'blue',\\\\\\\\n    tooltipText: 'Mark As Available',\\\\\\\\n    options: [\\\\\\\\n      {\\\\\\\\n        id: 'available',\\\\\\\\n        value: 'available',\\\\\\\\n        label: 'Mark As Child Available',\\\\\\\\n        color: 'blue',\\\\\\\\n        tooltipText: 'Mark As Child Available'\\\\\\\\n      },\\\\\\\\n      {\\\\\\\\n        id: 'unavailable',\\\\\\\\n        value: 'unavailable',\\\\\\\\n        label: 'Mark As Child Unavailable',\\\\\\\\n        color: 'red',\\\\\\\\n        tooltipText: 'Mark As Child Unavailable'\\\\\\\\n      },\\\\\\\\n      {\\\\\\\\n        id: 'active',\\\\\\\\n        value: 'active',\\\\\\\\n        label: 'Mark As Child Active',\\\\\\\\n        color: 'purple',\\\\\\\\n        tooltipText: 'Mark As Child Active'\\\\\\\\n      },\\\\\\\\n      {\\\\\\\\n        id: 'inactive',\\\\\\\\n        value: 'inactive',\\\\\\\\n        label: 'Mark As Child Inactive',\\\\\\\\n        color: 'green',\\\\\\\\n        tooltipText: 'Mark As Child Inactive',\\\\\\\\n        options: [\\\\\\\\n          {\\\\\\\\n            id: 'available',\\\\\\\\n            value: 'available',\\\\\\\\n            label: 'Mark As Grand Child Available',\\\\\\\\n            color: 'blue',\\\\\\\\n            tooltipText: 'Mark As Grand Child Available'\\\\\\\\n          },\\\\\\\\n          {\\\\\\\\n            id: 'unavailable',\\\\\\\\n            value: 'unavailable',\\\\\\\\n            label: 'Mark As Grand Child Unavailable',\\\\\\\\n            color: 'red',\\\\\\\\n            tooltipText: 'Mark As Grand Child Unavailable'\\\\\\\\n          }\\\\\\\\n        ]\\\\\\\\n      }\\\\\\\\n    ]\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    id: 'unavailable',\\\\\\\\n    value: 'unavailable',\\\\\\\\n    label: 'Mark As Unavailable',\\\\\\\\n    color: 'red',\\\\\\\\n    tooltipText: 'Mark As Unavailable'\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    id: 'active',\\\\\\\\n    value: 'active',\\\\\\\\n    label: 'Mark As Active',\\\\\\\\n    color: 'purple',\\\\\\\\n    tooltipText: 'Mark As Active'\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    id: 'inactive',\\\\\\\\n    value: 'inactive',\\\\\\\\n    label: 'Mark As Inactive',\\\\\\\\n    color: 'green',\\\\\\\\n    tooltipText: 'Mark As Inactive'\\\\\\\\n  }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst paginationOptions = [\\\\\\\\n  { value: '25', label: '25 per page', title: '25 per page' },\\\\\\\\n  { value: '50', label: '50 per page', title: '50 per page' },\\\\\\\\n  { value: '100', label: '100 per page', title: '100 per page' },\\\\\\\\n  { value: '200', label: '200 per page', title: '200 per page' }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst columnOption = [\\\\\\\\n  { value: 'ascending', label: 'Sort Ascending', iconVariant: 'hide-menu-box' },\\\\\\\\n  {\\\\\\\\n    value: 'descending',\\\\\\\\n    label: 'Sort Descending',\\\\\\\\n    iconVariant: 'hub-location'\\\\\\\\n  },\\\\\\\\n  { value: 'hideColumn', label: 'Hide Column', iconVariant: 'close' },\\\\\\\\n  { value: 'pinLeft', label: 'Pin Left', iconVariant: 'angle-left' },\\\\\\\\n  { value: 'pinright', label: 'Pin Right', iconVariant: 'angle-right-thin' }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst options = [\\\\\\\\n  {\\\\\\\\n    value: 'emailVerificationPending',\\\\\\\\n    label: 'Email Verification Pending Shipper'\\\\\\\\n  },\\\\\\\\n  { value: 'allShippers', label: 'All Shippers' },\\\\\\\\n  { value: 'approvalPendingShippers', label: 'Approval Pending Shippers' }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst datePickerOptions = [\\\\\\\\n  { value: 'January', label: 'January' },\\\\\\\\n  { value: 'February', label: 'February' },\\\\\\\\n  { value: 'March', label: 'March' },\\\\\\\\n  { value: 'April', label: 'April' },\\\\\\\\n  { value: 'May', label: 'May' },\\\\\\\\n  { value: 'June', label: 'June' },\\\\\\\\n  { value: 'July', label: 'July' },\\\\\\\\n  { value: 'August', label: 'August' },\\\\\\\\n  { value: 'September', label: 'September' },\\\\\\\\n  { value: 'October', label: 'October' },\\\\\\\\n  { value: 'November', label: 'November' },\\\\\\\\n  { value: 'December', label: 'December' }\\\\\\\\n]\\\\\\\\n\\\\\\\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\\\\\\\nexport const ButtonDropdown = () => (\\\\\\\\n  <ThemeWrapper>\\\\\\\\n    <Box p='2em' bgColor='grey.50'>\\\\\\\\n      <IconDropdown\\\\\\\\n        variant={text('varaint', 'button-dropdown') as tSelectVariant}\\\\\\\\n        optionList={object('optionList', ListViewOption)}\\\\\\\\n        width={text('width', '120px')}\\\\\\\\n        menuIsOpen={boolean('menuIsOpen', false)}\\\\\\\\n        iconButtonDetails={array('iconList', [\\\\\\\\n          'hide-menu-box',\\\\\\\\n          'More',\\\\\\\\n          'angle-down'\\\\\\\\n        ])}\\\\\\\\n        primary={boolean('primary', false)}\\\\\\\\n        intent={text('intent', 'page') as tIntent}\\\\\\\\n        onChange={action('Value Changed')}\\\\\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n        disabled={boolean('disabled', false)}\\\\\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\\\\\n        tooltipProps={{\\\\\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </Box>\\\\\\\\n  </ThemeWrapper>\\\\\\\\n)\\\\\\\\n\\\\\\\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\\\\\\\nexport const TextDropdown = () => (\\\\\\\\n  <ThemeWrapper>\\\\\\\\n    <Box p='2em' bgColor='grey.50'>\\\\\\\\n      <IconDropdown\\\\\\\\n        variant={text('varaint', 'text-dropdown') as tSelectVariant}\\\\\\\\n        optionList={object('optionList', ListViewOption)}\\\\\\\\n        width={text('width', '120px')}\\\\\\\\n        menuIsOpen={boolean('menuIsOpen', false)}\\\\\\\\n        iconButtonDetails={array('iconList', [\\\\\\\\n          'hide-menu-box',\\\\\\\\n          'More',\\\\\\\\n          'angle-down'\\\\\\\\n        ])}\\\\\\\\n        primary={boolean('primary', false)}\\\\\\\\n        intent={text('intent', 'page') as tIntent}\\\\\\\\n        onChange={action('Value Changed')}\\\\\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n        disabled={boolean('disabled', false)}\\\\\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\\\\\n        tooltipProps={{\\\\\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </Box>\\\\\\\\n  </ThemeWrapper>\\\\\\\\n)\\\\\\\\n\\\\\\\\nexport const MultiLevelBreadCrumb = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='2em' bgColor='grey.50'>\\\\\\\\n        <IconDropdown\\\\\\\\n          variant={text('variant', 'multilevel-breadcrumb') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', MultiLevelListViewOption)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          value={text('value', 'strawberry')}\\\\\\\\n          width={text('width', '260px')}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n  }\\\\\\\\n\\\\\\\\nexport const MultiLevelButtonDropdown = () => (\\\\\\\\n  <ThemeWrapper>\\\\\\\\n    <Box p='2em' bgColor='grey.50'>\\\\\\\\n      <IconDropdown\\\\\\\\n        variant={\\\\\\\\n          text('varaint', 'multilevel-button-dropdown') as tSelectVariant\\\\\\\\n        }\\\\\\\\n        optionList={object('optionList', MultiLevelListViewOption)}\\\\\\\\n        width={text('width', '120px')}\\\\\\\\n        menuIsOpen\\\\\\\\n        iconButtonDetails={array('iconList', [\\\\\\\\n          'hide-menu-box',\\\\\\\\n          'More',\\\\\\\\n          'angle-down'\\\\\\\\n        ])}\\\\\\\\n        defaultOpen='right'\\\\\\\\n        primary={boolean('primary', false)}\\\\\\\\n        intent={text('intent', 'page') as tIntent}\\\\\\\\n        handleClick={(id: any) => console.log('clicked from storybook', id)}\\\\\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n        disabled={boolean('disabled', false)}\\\\\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\\\\\n        tooltipProps={{\\\\\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </Box>\\\\\\\\n  </ThemeWrapper>\\\\\\\\n)\\\\\\\\n\\\\\\\\nexport const PaginationDropdown = () => (\\\\\\\\n  <ThemeWrapper>\\\\\\\\n    <CardComponent style={{ height: '300px' }}>\\\\\\\\n      <IconDropdown\\\\\\\\n        variant={text('variant', 'pagination-size') as tSelectVariant}\\\\\\\\n        optionList={object('optionList', paginationOptions)}\\\\\\\\n        onChange={action('Value selected')}\\\\\\\\n        value={text('value', '50')}\\\\\\\\n        width={text('width', '120px')}\\\\\\\\n      />\\\\\\\\n    </CardComponent>\\\\\\\\n  </ThemeWrapper>\\\\\\\\n)\\\\\\\\n\\\\\\\\nexport const columnOptionComponent = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='2em' bgColor='grey.50'>\\\\\\\\n        <div style={{ width: '200px', margin: 'auto' }}>\\\\\\\\n          <IconDropdown\\\\\\\\n            variant={text('variant', 'column-filter') as tSelectVariant}\\\\\\\\n            optionList={object('optionList', columnOption)}\\\\\\\\n            onChange={action('Value selected')}\\\\\\\\n            width={text('width', '10px')}\\\\\\\\n            isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n          />\\\\\\\\n        </div>\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const BreadCrumbComponent = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='2em' bgColor='grey.50'>\\\\\\\\n        <IconDropdown\\\\\\\\n          variant={text('variant', 'bread-crumb') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', options)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          value={text('value', 'strawberry')}\\\\\\\\n          width={text('width', '260px')}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const DatePickerDropDown = () => (\\\\\\\\n  <ThemeWrapper>\\\\\\\\n    <CardComponent style={{ height: '200px' }}>\\\\\\\\n      <IconDropdown\\\\\\\\n        variant={text('variant', 'date-picker') as tSelectVariant}\\\\\\\\n        optionList={object('optionList', datePickerOptions)}\\\\\\\\n        onChange={action('Value selected')}\\\\\\\\n        value={text('value', '50')}\\\\\\\\n        width={text('width', '80px')}\\\\\\\\n        showDownArrow={boolean('Show Down Arrow', true)}\\\\\\\\n        isMultiRegionStyled={boolean('Is Multi Region Styled', false)}\\\\\\\\n      />\\\\\\\\n    </CardComponent>\\\\\\\\n  </ThemeWrapper>\\\\\\\\n)\\\\\\\\nconst arrayMap = [\\\\\\\\n  { variant: 'column-filter', name: 'column-filter0' },\\\\\\\\n  { variant: 'column-filter', name: 'column-filter1' },\\\\\\\\n  { variant: 'column-filter', name: 'column-filter2' }\\\\\\\\n]\\\\\\\\n\\\\\\\\nexport const columnOptionList = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='2em' bgColor='grey.50'>\\\\\\\\n        <div style={{ width: '200px', margin: 'auto' }}>\\\\\\\\n          {arrayMap.map((obj: any, index: number) => {\\\\\\\\n            return (\\\\\\\\n              <IconDropdown\\\\\\\\n                variant={text('variant', obj?.variant) as tSelectVariant}\\\\\\\\n                optionList={object('optionList', columnOption)}\\\\\\\\n                onChange={action('Value selected')}\\\\\\\\n                width={text('width', '10px')}\\\\\\\\n                isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n                key={index}\\\\\\\\n              />\\\\\\\\n            )\\\\\\\\n          })}\\\\\\\\n        </div>\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const DropdownUniversal = () => {\\\\\\\\n  // reference to style\\\\\\\\n  // const theme = useContext(ThemeContext)\\\\\\\\n  // const borderBottom = `1px solid ${theme?.colors?.grey['A800']}`\\\\\\\\n  // const customStyle = {\\\\\\\\n  //   control: (provided: any) => ({\\\\\\\\n  //     ...provided,\\\\\\\\n  //     borderStyle: 'none',\\\\\\\\n  //     borderBottom,\\\\\\\\n  //     borderRadius: '0px',\\\\\\\\n  //     boxShadow: 'none',\\\\\\\\n  //     borderColor: theme?.colors?.grey?.A800,\\\\\\\\n  //     '&:focus': {\\\\\\\\n  //       borderStyle: 'none',\\\\\\\\n  //       borderBottom,\\\\\\\\n  //       boxShadow: 'none',\\\\\\\\n  //       borderColor: theme?.colors?.grey?.A800\\\\\\\\n  //     },\\\\\\\\n  //     '&:hover': {\\\\\\\\n  //       borderStyle: 'none',\\\\\\\\n  //       borderBottom,\\\\\\\\n  //       boxShadow: 'none',\\\\\\\\n  //       borderColor: theme?.colors?.grey?.A800\\\\\\\\n  //     }\\\\\\\\n  //   }),\\\\\\\\n  //   option: (provided: any, state: any) => ({\\\\\\\\n  //     ...provided,\\\\\\\\n  //     backgroundColor: state?.isSelected\\\\\\\\n  //       ? theme?.colors?.primary?.main\\\\\\\\n  //       : theme?.colors?.white,\\\\\\\\n  //     '&:hover': {\\\\\\\\n  //       backgroundColor: state?.isSelected\\\\\\\\n  //         ? theme?.colors?.primary?.main\\\\\\\\n  //         : theme?.colors?.grey['50']\\\\\\\\n  //     }\\\\\\\\n  //   }),\\\\\\\\n\\\\\\\\n  //   menu: (provided: any, state: any) => ({\\\\\\\\n  //     ...provided,\\\\\\\\n  //     backgroundColor: state?.isSelected\\\\\\\\n  //       ? theme.colors.primary.main\\\\\\\\n  //       : theme?.colors?.white,\\\\\\\\n  //     borderRadius: '2px',\\\\\\\\n  //     '&:hover': {\\\\\\\\n  //       backgroundColor: state?.isSelected\\\\\\\\n  //         ? theme?.colors?.primary?.main\\\\\\\\n  //         : theme?.colors?.white\\\\\\\\n  //     },\\\\\\\\n  //     marginTop: '5px',\\\\\\\\n  //     marginLeft: '16px',\\\\\\\\n  //     width: '90%'\\\\\\\\n  //   }),\\\\\\\\n  //   menuList: (provided: any) => ({\\\\\\\\n  //     ...provided,\\\\\\\\n  //     marginTop: '0px'\\\\\\\\n  //   }),\\\\\\\\n  //   valueContainer: (provided: any) => ({\\\\\\\\n  //     ...provided,\\\\\\\\n  //     padding: '0px'\\\\\\\\n  //   })\\\\\\\\n  // }\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='2em' bgColor='grey.50'>\\\\\\\\n        <IconDropdown\\\\\\\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', ListViewOption)}\\\\\\\\n          width={text('width', '120px')}\\\\\\\\n          menuIsOpen={boolean('menuIsOpen', false)}\\\\\\\\n          primary={boolean('primary', false)}\\\\\\\\n          intent={text('intent', 'page') as tIntent}\\\\\\\\n          onChange={action('Value Changed')}\\\\\\\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n          value='available'\\\\\\\\n          optionComponent={({ selectedOption }: any) => {\\\\\\\\n            return (\\\\\\\\n              <div>\\\\\\\\n                <div>{selectedOption?.color}</div>\\\\\\\\n                <div>{selectedOption?.label}</div>\\\\\\\\n              </div>\\\\\\\\n            )\\\\\\\\n          }}\\\\\\\\n          // customStyle={customStyle}\\\\\\\\n        >\\\\\\\\n          {({\\\\\\\\n            selectedOption,\\\\\\\\n            menuIsOpen,\\\\\\\\n            setMenuIsOpen\\\\\\\\n          }: IUniversalDropdownChildren) => {\\\\\\\\n            return (\\\\\\\\n              <Button\\\\\\\\n                onClick={() => {\\\\\\\\n                  setMenuIsOpen(!menuIsOpen)\\\\\\\\n                  action('Universal open/closed')(menuIsOpen)\\\\\\\\n                }}\\\\\\\\n                color={text('color', 'white')}\\\\\\\\n                bgColor={text('bgColor', 'black')}\\\\\\\\n                fullWidth={boolean('fullWidth', false)}\\\\\\\\n              >\\\\\\\\n                {selectedOption?.label}\\\\\\\\n              </Button>\\\\\\\\n            )\\\\\\\\n          }}\\\\\\\\n        </IconDropdown>\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const TextFieldDropdown = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='2em' bgColor='grey.50'>\\\\\\\\n        <IconDropdown\\\\\\\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', ListViewOption)}\\\\\\\\n          width={text('width', '120px')}\\\\\\\\n          menuIsOpen={boolean('menuIsOpen', false)}\\\\\\\\n          primary={boolean('primary', false)}\\\\\\\\n          intent={text('intent', 'page') as tIntent}\\\\\\\\n          onChange={action('Value Changed')}\\\\\\\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n          value='available'\\\\\\\\n          optionComponent={({ selectedOption }: any) => {\\\\\\\\n            return (\\\\\\\\n              <div>\\\\\\\\n                <div>{selectedOption?.color}</div>\\\\\\\\n                <div>{selectedOption?.label}</div>\\\\\\\\n              </div>\\\\\\\\n            )\\\\\\\\n          }}\\\\\\\\n          // customStyle={customStyle}\\\\\\\\n        >\\\\\\\\n          {({\\\\\\\\n            selectedOption,\\\\\\\\n            menuIsOpen,\\\\\\\\n            setMenuIsOpen\\\\\\\\n          }: IUniversalDropdownChildren) => {\\\\\\\\n            return (\\\\\\\\n              <TextInput\\\\\\\\n                id='someId'\\\\\\\\n                name='someName'\\\\\\\\n                className='someClassName'\\\\\\\\n                label={text('label', 'Username')}\\\\\\\\n                labelColor={text('labelColor', 'text.inputLabel.default')}\\\\\\\\n                placeholder={text('placeholder', 'Enter text here...')}\\\\\\\\n                maxLength={number('maxLength', 10)}\\\\\\\\n                error={boolean('error', false)}\\\\\\\\n                errorMessage={text('errorMessage', '')}\\\\\\\\n                required={boolean('required', false)}\\\\\\\\n                fullWidth={boolean('fullWidth', false)}\\\\\\\\n                onChange={action('Triggered: onChange')}\\\\\\\\n                onClick={() => {\\\\\\\\n                  setMenuIsOpen(!menuIsOpen)\\\\\\\\n                  action('universal open/closed')(menuIsOpen)\\\\\\\\n                }}\\\\\\\\n                value={selectedOption?.value}\\\\\\\\n              />\\\\\\\\n            )\\\\\\\\n          }}\\\\\\\\n        </IconDropdown>\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\",\\\\\\\"locationsMap\\\\\\\":{}},},\\\\n  title: `${path}/IconDropdown`,\\\\n  decorators: [withKnobs],\\\\n  component: IconDropdown\\\\n}\\\\n\\\\nconst ListViewOption = [\\\\n  {\\\\n    value: 'available',\\\\n    label: 'Mark As Available',\\\\n    color: 'blue',\\\\n    tooltipText: 'Mark As Available',\\\\n    isDisabled: true\\\\n  },\\\\n  {\\\\n    value: 'unavailable',\\\\n    label: 'Mark As Unavailable',\\\\n    color: 'red',\\\\n    tooltipText: 'Mark As Unavailable'\\\\n  },\\\\n  {\\\\n    value: 'active',\\\\n    label: 'Mark As Active',\\\\n    color: 'purple',\\\\n    tooltipText: 'Mark As Active'\\\\n  },\\\\n  {\\\\n    value: 'inactive',\\\\n    label: 'Mark As Inactive',\\\\n    color: 'green',\\\\n    tooltipText: 'Mark As Inactive'\\\\n  }\\\\n]\\\\n\\\\nconst MultiLevelListViewOption = [\\\\n  {\\\\n    id: 'available',\\\\n    value: 'available',\\\\n    label: 'Mark As Available',\\\\n    color: 'blue',\\\\n    tooltipText: 'Mark As Available',\\\\n    options: [\\\\n      {\\\\n        id: 'available',\\\\n        value: 'available',\\\\n        label: 'Mark As Child Available',\\\\n        color: 'blue',\\\\n        tooltipText: 'Mark As Child Available'\\\\n      },\\\\n      {\\\\n        id: 'unavailable',\\\\n        value: 'unavailable',\\\\n        label: 'Mark As Child Unavailable',\\\\n        color: 'red',\\\\n        tooltipText: 'Mark As Child Unavailable'\\\\n      },\\\\n      {\\\\n        id: 'active',\\\\n        value: 'active',\\\\n        label: 'Mark As Child Active',\\\\n        color: 'purple',\\\\n        tooltipText: 'Mark As Child Active'\\\\n      },\\\\n      {\\\\n        id: 'inactive',\\\\n        value: 'inactive',\\\\n        label: 'Mark As Child Inactive',\\\\n        color: 'green',\\\\n        tooltipText: 'Mark As Child Inactive',\\\\n        options: [\\\\n          {\\\\n            id: 'available',\\\\n            value: 'available',\\\\n            label: 'Mark As Grand Child Available',\\\\n            color: 'blue',\\\\n            tooltipText: 'Mark As Grand Child Available'\\\\n          },\\\\n          {\\\\n            id: 'unavailable',\\\\n            value: 'unavailable',\\\\n            label: 'Mark As Grand Child Unavailable',\\\\n            color: 'red',\\\\n            tooltipText: 'Mark As Grand Child Unavailable'\\\\n          }\\\\n        ]\\\\n      }\\\\n    ]\\\\n  },\\\\n  {\\\\n    id: 'unavailable',\\\\n    value: 'unavailable',\\\\n    label: 'Mark As Unavailable',\\\\n    color: 'red',\\\\n    tooltipText: 'Mark As Unavailable'\\\\n  },\\\\n  {\\\\n    id: 'active',\\\\n    value: 'active',\\\\n    label: 'Mark As Active',\\\\n    color: 'purple',\\\\n    tooltipText: 'Mark As Active'\\\\n  },\\\\n  {\\\\n    id: 'inactive',\\\\n    value: 'inactive',\\\\n    label: 'Mark As Inactive',\\\\n    color: 'green',\\\\n    tooltipText: 'Mark As Inactive'\\\\n  }\\\\n]\\\\n\\\\nconst paginationOptions = [\\\\n  { value: '25', label: '25 per page', title: '25 per page' },\\\\n  { value: '50', label: '50 per page', title: '50 per page' },\\\\n  { value: '100', label: '100 per page', title: '100 per page' },\\\\n  { value: '200', label: '200 per page', title: '200 per page' }\\\\n]\\\\n\\\\nconst columnOption = [\\\\n  { value: 'ascending', label: 'Sort Ascending', iconVariant: 'hide-menu-box' },\\\\n  {\\\\n    value: 'descending',\\\\n    label: 'Sort Descending',\\\\n    iconVariant: 'hub-location'\\\\n  },\\\\n  { value: 'hideColumn', label: 'Hide Column', iconVariant: 'close' },\\\\n  { value: 'pinLeft', label: 'Pin Left', iconVariant: 'angle-left' },\\\\n  { value: 'pinright', label: 'Pin Right', iconVariant: 'angle-right-thin' }\\\\n]\\\\n\\\\nconst options = [\\\\n  {\\\\n    value: 'emailVerificationPending',\\\\n    label: 'Email Verification Pending Shipper'\\\\n  },\\\\n  { value: 'allShippers', label: 'All Shippers' },\\\\n  { value: 'approvalPendingShippers', label: 'Approval Pending Shippers' }\\\\n]\\\\n\\\\nconst datePickerOptions = [\\\\n  { value: 'January', label: 'January' },\\\\n  { value: 'February', label: 'February' },\\\\n  { value: 'March', label: 'March' },\\\\n  { value: 'April', label: 'April' },\\\\n  { value: 'May', label: 'May' },\\\\n  { value: 'June', label: 'June' },\\\\n  { value: 'July', label: 'July' },\\\\n  { value: 'August', label: 'August' },\\\\n  { value: 'September', label: 'September' },\\\\n  { value: 'October', label: 'October' },\\\\n  { value: 'November', label: 'November' },\\\\n  { value: 'December', label: 'December' }\\\\n]\\\\n\\\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\\\nexport const ButtonDropdown = addSourceDecorator(() => (\\\\n  <ThemeWrapper>\\\\n    <Box p='2em' bgColor='grey.50'>\\\\n      <IconDropdown\\\\n        variant={text('varaint', 'button-dropdown') as tSelectVariant}\\\\n        optionList={object('optionList', ListViewOption)}\\\\n        width={text('width', '120px')}\\\\n        menuIsOpen={boolean('menuIsOpen', false)}\\\\n        iconButtonDetails={array('iconList', [\\\\n          'hide-menu-box',\\\\n          'More',\\\\n          'angle-down'\\\\n        ])}\\\\n        primary={boolean('primary', false)}\\\\n        intent={text('intent', 'page') as tIntent}\\\\n        onChange={action('Value Changed')}\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n        disabled={boolean('disabled', false)}\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\n        tooltipProps={{\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\n        }}\\\\n      />\\\\n    </Box>\\\\n  </ThemeWrapper>\\\\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\\\nexport const TextDropdown = addSourceDecorator(() => (\\\\n  <ThemeWrapper>\\\\n    <Box p='2em' bgColor='grey.50'>\\\\n      <IconDropdown\\\\n        variant={text('varaint', 'text-dropdown') as tSelectVariant}\\\\n        optionList={object('optionList', ListViewOption)}\\\\n        width={text('width', '120px')}\\\\n        menuIsOpen={boolean('menuIsOpen', false)}\\\\n        iconButtonDetails={array('iconList', [\\\\n          'hide-menu-box',\\\\n          'More',\\\\n          'angle-down'\\\\n        ])}\\\\n        primary={boolean('primary', false)}\\\\n        intent={text('intent', 'page') as tIntent}\\\\n        onChange={action('Value Changed')}\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n        disabled={boolean('disabled', false)}\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\n        tooltipProps={{\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\n        }}\\\\n      />\\\\n    </Box>\\\\n  </ThemeWrapper>\\\\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const MultiLevelBreadCrumb = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <IconDropdown\\\\n          variant={text('variant', 'multilevel-breadcrumb') as tSelectVariant}\\\\n          optionList={object('optionList', MultiLevelListViewOption)}\\\\n          onChange={action('Value selected')}\\\\n          value={text('value', 'strawberry')}\\\\n          width={text('width', '260px')}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n  }, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const MultiLevelButtonDropdown = addSourceDecorator(() => (\\\\n  <ThemeWrapper>\\\\n    <Box p='2em' bgColor='grey.50'>\\\\n      <IconDropdown\\\\n        variant={\\\\n          text('varaint', 'multilevel-button-dropdown') as tSelectVariant\\\\n        }\\\\n        optionList={object('optionList', MultiLevelListViewOption)}\\\\n        width={text('width', '120px')}\\\\n        menuIsOpen\\\\n        iconButtonDetails={array('iconList', [\\\\n          'hide-menu-box',\\\\n          'More',\\\\n          'angle-down'\\\\n        ])}\\\\n        defaultOpen='right'\\\\n        primary={boolean('primary', false)}\\\\n        intent={text('intent', 'page') as tIntent}\\\\n        handleClick={(id: any) => console.log('clicked from storybook', id)}\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n        disabled={boolean('disabled', false)}\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\n        tooltipProps={{\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\n        }}\\\\n      />\\\\n    </Box>\\\\n  </ThemeWrapper>\\\\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const PaginationDropdown = addSourceDecorator(() => (\\\\n  <ThemeWrapper>\\\\n    <CardComponent style={{ height: '300px' }}>\\\\n      <IconDropdown\\\\n        variant={text('variant', 'pagination-size') as tSelectVariant}\\\\n        optionList={object('optionList', paginationOptions)}\\\\n        onChange={action('Value selected')}\\\\n        value={text('value', '50')}\\\\n        width={text('width', '120px')}\\\\n      />\\\\n    </CardComponent>\\\\n  </ThemeWrapper>\\\\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const columnOptionComponent = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <div style={{ width: '200px', margin: 'auto' }}>\\\\n          <IconDropdown\\\\n            variant={text('variant', 'column-filter') as tSelectVariant}\\\\n            optionList={object('optionList', columnOption)}\\\\n            onChange={action('Value selected')}\\\\n            width={text('width', '10px')}\\\\n            isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n          />\\\\n        </div>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const BreadCrumbComponent = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <IconDropdown\\\\n          variant={text('variant', 'bread-crumb') as tSelectVariant}\\\\n          optionList={object('optionList', options)}\\\\n          onChange={action('Value selected')}\\\\n          value={text('value', 'strawberry')}\\\\n          width={text('width', '260px')}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const DatePickerDropDown = addSourceDecorator(() => (\\\\n  <ThemeWrapper>\\\\n    <CardComponent style={{ height: '200px' }}>\\\\n      <IconDropdown\\\\n        variant={text('variant', 'date-picker') as tSelectVariant}\\\\n        optionList={object('optionList', datePickerOptions)}\\\\n        onChange={action('Value selected')}\\\\n        value={text('value', '50')}\\\\n        width={text('width', '80px')}\\\\n        showDownArrow={boolean('Show Down Arrow', true)}\\\\n        isMultiRegionStyled={boolean('Is Multi Region Styled', false)}\\\\n      />\\\\n    </CardComponent>\\\\n  </ThemeWrapper>\\\\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\nconst arrayMap = [\\\\n  { variant: 'column-filter', name: 'column-filter0' },\\\\n  { variant: 'column-filter', name: 'column-filter1' },\\\\n  { variant: 'column-filter', name: 'column-filter2' }\\\\n]\\\\n\\\\nexport const columnOptionList = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <div style={{ width: '200px', margin: 'auto' }}>\\\\n          {arrayMap.map((obj: any, index: number) => {\\\\n            return (\\\\n              <IconDropdown\\\\n                variant={text('variant', obj?.variant) as tSelectVariant}\\\\n                optionList={object('optionList', columnOption)}\\\\n                onChange={action('Value selected')}\\\\n                width={text('width', '10px')}\\\\n                isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n                key={index}\\\\n              />\\\\n            )\\\\n          })}\\\\n        </div>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const DropdownUniversal = addSourceDecorator(() => {\\\\n  // reference to style\\\\n  // const theme = useContext(ThemeContext)\\\\n  // const borderBottom = `1px solid ${theme?.colors?.grey['A800']}`\\\\n  // const customStyle = {\\\\n  //   control: (provided: any) => ({\\\\n  //     ...provided,\\\\n  //     borderStyle: 'none',\\\\n  //     borderBottom,\\\\n  //     borderRadius: '0px',\\\\n  //     boxShadow: 'none',\\\\n  //     borderColor: theme?.colors?.grey?.A800,\\\\n  //     '&:focus': {\\\\n  //       borderStyle: 'none',\\\\n  //       borderBottom,\\\\n  //       boxShadow: 'none',\\\\n  //       borderColor: theme?.colors?.grey?.A800\\\\n  //     },\\\\n  //     '&:hover': {\\\\n  //       borderStyle: 'none',\\\\n  //       borderBottom,\\\\n  //       boxShadow: 'none',\\\\n  //       borderColor: theme?.colors?.grey?.A800\\\\n  //     }\\\\n  //   }),\\\\n  //   option: (provided: any, state: any) => ({\\\\n  //     ...provided,\\\\n  //     backgroundColor: state?.isSelected\\\\n  //       ? theme?.colors?.primary?.main\\\\n  //       : theme?.colors?.white,\\\\n  //     '&:hover': {\\\\n  //       backgroundColor: state?.isSelected\\\\n  //         ? theme?.colors?.primary?.main\\\\n  //         : theme?.colors?.grey['50']\\\\n  //     }\\\\n  //   }),\\\\n\\\\n  //   menu: (provided: any, state: any) => ({\\\\n  //     ...provided,\\\\n  //     backgroundColor: state?.isSelected\\\\n  //       ? theme.colors.primary.main\\\\n  //       : theme?.colors?.white,\\\\n  //     borderRadius: '2px',\\\\n  //     '&:hover': {\\\\n  //       backgroundColor: state?.isSelected\\\\n  //         ? theme?.colors?.primary?.main\\\\n  //         : theme?.colors?.white\\\\n  //     },\\\\n  //     marginTop: '5px',\\\\n  //     marginLeft: '16px',\\\\n  //     width: '90%'\\\\n  //   }),\\\\n  //   menuList: (provided: any) => ({\\\\n  //     ...provided,\\\\n  //     marginTop: '0px'\\\\n  //   }),\\\\n  //   valueContainer: (provided: any) => ({\\\\n  //     ...provided,\\\\n  //     padding: '0px'\\\\n  //   })\\\\n  // }\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <IconDropdown\\\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          width={text('width', '120px')}\\\\n          menuIsOpen={boolean('menuIsOpen', false)}\\\\n          primary={boolean('primary', false)}\\\\n          intent={text('intent', 'page') as tIntent}\\\\n          onChange={action('Value Changed')}\\\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n          disabled={boolean('disabled', false)}\\\\n          value='available'\\\\n          optionComponent={({ selectedOption }: any) => {\\\\n            return (\\\\n              <div>\\\\n                <div>{selectedOption?.color}</div>\\\\n                <div>{selectedOption?.label}</div>\\\\n              </div>\\\\n            )\\\\n          }}\\\\n          // customStyle={customStyle}\\\\n        >\\\\n          {({\\\\n            selectedOption,\\\\n            menuIsOpen,\\\\n            setMenuIsOpen\\\\n          }: IUniversalDropdownChildren) => {\\\\n            return (\\\\n              <Button\\\\n                onClick={() => {\\\\n                  setMenuIsOpen(!menuIsOpen)\\\\n                  action('Universal open/closed')(menuIsOpen)\\\\n                }}\\\\n                color={text('color', 'white')}\\\\n                bgColor={text('bgColor', 'black')}\\\\n                fullWidth={boolean('fullWidth', false)}\\\\n              >\\\\n                {selectedOption?.label}\\\\n              </Button>\\\\n            )\\\\n          }}\\\\n        </IconDropdown>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const TextFieldDropdown = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <IconDropdown\\\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          width={text('width', '120px')}\\\\n          menuIsOpen={boolean('menuIsOpen', false)}\\\\n          primary={boolean('primary', false)}\\\\n          intent={text('intent', 'page') as tIntent}\\\\n          onChange={action('Value Changed')}\\\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n          disabled={boolean('disabled', false)}\\\\n          value='available'\\\\n          optionComponent={({ selectedOption }: any) => {\\\\n            return (\\\\n              <div>\\\\n                <div>{selectedOption?.color}</div>\\\\n                <div>{selectedOption?.label}</div>\\\\n              </div>\\\\n            )\\\\n          }}\\\\n          // customStyle={customStyle}\\\\n        >\\\\n          {({\\\\n            selectedOption,\\\\n            menuIsOpen,\\\\n            setMenuIsOpen\\\\n          }: IUniversalDropdownChildren) => {\\\\n            return (\\\\n              <TextInput\\\\n                id='someId'\\\\n                name='someName'\\\\n                className='someClassName'\\\\n                label={text('label', 'Username')}\\\\n                labelColor={text('labelColor', 'text.inputLabel.default')}\\\\n                placeholder={text('placeholder', 'Enter text here...')}\\\\n                maxLength={number('maxLength', 10)}\\\\n                error={boolean('error', false)}\\\\n                errorMessage={text('errorMessage', '')}\\\\n                required={boolean('required', false)}\\\\n                fullWidth={boolean('fullWidth', false)}\\\\n                onChange={action('Triggered: onChange')}\\\\n                onClick={() => {\\\\n                  setMenuIsOpen(!menuIsOpen)\\\\n                  action('universal open/closed')(menuIsOpen)\\\\n                }}\\\\n                value={selectedOption?.value}\\\\n              />\\\\n            )\\\\n          }}\\\\n        </IconDropdown>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/IconDropdown.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\n\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/farhanansari/Code/ui-library/src/components/molecules/IconDropdown\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"import { action } from '@storybook/addon-actions'\\\\nimport {\\\\n  array,\\\\n  boolean,\\\\n  number,\\\\n  object,\\\\n  text,\\\\n  withKnobs\\\\n} from '@storybook/addon-knobs'\\\\nimport React from 'react'\\\\nimport IconDropdown from '.'\\\\nimport { path } from '..'\\\\nimport { Box } from '../../..'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport Button, { tIntent } from '../../atoms/Button'\\\\nimport CardComponent from '../../atoms/Card'\\\\nimport { tPlacement } from '../../../utilities/types'\\\\nimport {\\\\n  IUniversalDropdownChildren,\\\\n  tSelectVariant\\\\n} from '../DropDown/interface'\\\\nimport TextInput from '../TextInput'\\\\n\\\\nexport default {\\\\n  title: `${path}/IconDropdown`,\\\\n  decorators: [withKnobs],\\\\n  component: IconDropdown\\\\n}\\\\n\\\\nconst ListViewOption = [\\\\n  {\\\\n    value: 'available',\\\\n    label: 'Mark As Available',\\\\n    color: 'blue',\\\\n    tooltipText: 'Mark As Available',\\\\n    isDisabled: true\\\\n  },\\\\n  {\\\\n    value: 'unavailable',\\\\n    label: 'Mark As Unavailable',\\\\n    color: 'red',\\\\n    tooltipText: 'Mark As Unavailable'\\\\n  },\\\\n  {\\\\n    value: 'active',\\\\n    label: 'Mark As Active',\\\\n    color: 'purple',\\\\n    tooltipText: 'Mark As Active'\\\\n  },\\\\n  {\\\\n    value: 'inactive',\\\\n    label: 'Mark As Inactive',\\\\n    color: 'green',\\\\n    tooltipText: 'Mark As Inactive'\\\\n  }\\\\n]\\\\n\\\\nconst MultiLevelListViewOption = [\\\\n  {\\\\n    id: 'available',\\\\n    value: 'available',\\\\n    label: 'Mark As Available',\\\\n    color: 'blue',\\\\n    tooltipText: 'Mark As Available',\\\\n    options: [\\\\n      {\\\\n        id: 'available',\\\\n        value: 'available',\\\\n        label: 'Mark As Child Available',\\\\n        color: 'blue',\\\\n        tooltipText: 'Mark As Child Available'\\\\n      },\\\\n      {\\\\n        id: 'unavailable',\\\\n        value: 'unavailable',\\\\n        label: 'Mark As Child Unavailable',\\\\n        color: 'red',\\\\n        tooltipText: 'Mark As Child Unavailable'\\\\n      },\\\\n      {\\\\n        id: 'active',\\\\n        value: 'active',\\\\n        label: 'Mark As Child Active',\\\\n        color: 'purple',\\\\n        tooltipText: 'Mark As Child Active'\\\\n      },\\\\n      {\\\\n        id: 'inactive',\\\\n        value: 'inactive',\\\\n        label: 'Mark As Child Inactive',\\\\n        color: 'green',\\\\n        tooltipText: 'Mark As Child Inactive',\\\\n        options: [\\\\n          {\\\\n            id: 'available',\\\\n            value: 'available',\\\\n            label: 'Mark As Grand Child Available',\\\\n            color: 'blue',\\\\n            tooltipText: 'Mark As Grand Child Available'\\\\n          },\\\\n          {\\\\n            id: 'unavailable',\\\\n            value: 'unavailable',\\\\n            label: 'Mark As Grand Child Unavailable',\\\\n            color: 'red',\\\\n            tooltipText: 'Mark As Grand Child Unavailable'\\\\n          }\\\\n        ]\\\\n      }\\\\n    ]\\\\n  },\\\\n  {\\\\n    id: 'unavailable',\\\\n    value: 'unavailable',\\\\n    label: 'Mark As Unavailable',\\\\n    color: 'red',\\\\n    tooltipText: 'Mark As Unavailable'\\\\n  },\\\\n  {\\\\n    id: 'active',\\\\n    value: 'active',\\\\n    label: 'Mark As Active',\\\\n    color: 'purple',\\\\n    tooltipText: 'Mark As Active'\\\\n  },\\\\n  {\\\\n    id: 'inactive',\\\\n    value: 'inactive',\\\\n    label: 'Mark As Inactive',\\\\n    color: 'green',\\\\n    tooltipText: 'Mark As Inactive'\\\\n  }\\\\n]\\\\n\\\\nconst paginationOptions = [\\\\n  { value: '25', label: '25 per page', title: '25 per page' },\\\\n  { value: '50', label: '50 per page', title: '50 per page' },\\\\n  { value: '100', label: '100 per page', title: '100 per page' },\\\\n  { value: '200', label: '200 per page', title: '200 per page' }\\\\n]\\\\n\\\\nconst columnOption = [\\\\n  { value: 'ascending', label: 'Sort Ascending', iconVariant: 'hide-menu-box' },\\\\n  {\\\\n    value: 'descending',\\\\n    label: 'Sort Descending',\\\\n    iconVariant: 'hub-location'\\\\n  },\\\\n  { value: 'hideColumn', label: 'Hide Column', iconVariant: 'close' },\\\\n  { value: 'pinLeft', label: 'Pin Left', iconVariant: 'angle-left' },\\\\n  { value: 'pinright', label: 'Pin Right', iconVariant: 'angle-right-thin' }\\\\n]\\\\n\\\\nconst options = [\\\\n  {\\\\n    value: 'emailVerificationPending',\\\\n    label: 'Email Verification Pending Shipper'\\\\n  },\\\\n  { value: 'allShippers', label: 'All Shippers' },\\\\n  { value: 'approvalPendingShippers', label: 'Approval Pending Shippers' }\\\\n]\\\\n\\\\nconst datePickerOptions = [\\\\n  { value: 'January', label: 'January' },\\\\n  { value: 'February', label: 'February' },\\\\n  { value: 'March', label: 'March' },\\\\n  { value: 'April', label: 'April' },\\\\n  { value: 'May', label: 'May' },\\\\n  { value: 'June', label: 'June' },\\\\n  { value: 'July', label: 'July' },\\\\n  { value: 'August', label: 'August' },\\\\n  { value: 'September', label: 'September' },\\\\n  { value: 'October', label: 'October' },\\\\n  { value: 'November', label: 'November' },\\\\n  { value: 'December', label: 'December' }\\\\n]\\\\n\\\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\\\nexport const ButtonDropdown = () => (\\\\n  <ThemeWrapper>\\\\n    <Box p='2em' bgColor='grey.50'>\\\\n      <IconDropdown\\\\n        variant={text('varaint', 'button-dropdown') as tSelectVariant}\\\\n        optionList={object('optionList', ListViewOption)}\\\\n        width={text('width', '120px')}\\\\n        menuIsOpen={boolean('menuIsOpen', false)}\\\\n        iconButtonDetails={array('iconList', [\\\\n          'hide-menu-box',\\\\n          'More',\\\\n          'angle-down'\\\\n        ])}\\\\n        primary={boolean('primary', false)}\\\\n        intent={text('intent', 'page') as tIntent}\\\\n        onChange={action('Value Changed')}\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n        disabled={boolean('disabled', false)}\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\n        tooltipProps={{\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\n        }}\\\\n      />\\\\n    </Box>\\\\n  </ThemeWrapper>\\\\n)\\\\n\\\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\\\nexport const TextDropdown = () => (\\\\n  <ThemeWrapper>\\\\n    <Box p='2em' bgColor='grey.50'>\\\\n      <IconDropdown\\\\n        variant={text('varaint', 'text-dropdown') as tSelectVariant}\\\\n        optionList={object('optionList', ListViewOption)}\\\\n        width={text('width', '120px')}\\\\n        menuIsOpen={boolean('menuIsOpen', false)}\\\\n        iconButtonDetails={array('iconList', [\\\\n          'hide-menu-box',\\\\n          'More',\\\\n          'angle-down'\\\\n        ])}\\\\n        primary={boolean('primary', false)}\\\\n        intent={text('intent', 'page') as tIntent}\\\\n        onChange={action('Value Changed')}\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n        disabled={boolean('disabled', false)}\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\n        tooltipProps={{\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\n        }}\\\\n      />\\\\n    </Box>\\\\n  </ThemeWrapper>\\\\n)\\\\n\\\\nexport const MultiLevelBreadCrumb = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <IconDropdown\\\\n          variant={text('variant', 'multilevel-breadcrumb') as tSelectVariant}\\\\n          optionList={object('optionList', MultiLevelListViewOption)}\\\\n          onChange={action('Value selected')}\\\\n          value={text('value', 'strawberry')}\\\\n          width={text('width', '260px')}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n  }\\\\n\\\\nexport const MultiLevelButtonDropdown = () => (\\\\n  <ThemeWrapper>\\\\n    <Box p='2em' bgColor='grey.50'>\\\\n      <IconDropdown\\\\n        variant={\\\\n          text('varaint', 'multilevel-button-dropdown') as tSelectVariant\\\\n        }\\\\n        optionList={object('optionList', MultiLevelListViewOption)}\\\\n        width={text('width', '120px')}\\\\n        menuIsOpen\\\\n        iconButtonDetails={array('iconList', [\\\\n          'hide-menu-box',\\\\n          'More',\\\\n          'angle-down'\\\\n        ])}\\\\n        defaultOpen='right'\\\\n        primary={boolean('primary', false)}\\\\n        intent={text('intent', 'page') as tIntent}\\\\n        handleClick={(id: any) => console.log('clicked from storybook', id)}\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n        disabled={boolean('disabled', false)}\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\n        tooltipProps={{\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\n        }}\\\\n      />\\\\n    </Box>\\\\n  </ThemeWrapper>\\\\n)\\\\n\\\\nexport const PaginationDropdown = () => (\\\\n  <ThemeWrapper>\\\\n    <CardComponent style={{ height: '300px' }}>\\\\n      <IconDropdown\\\\n        variant={text('variant', 'pagination-size') as tSelectVariant}\\\\n        optionList={object('optionList', paginationOptions)}\\\\n        onChange={action('Value selected')}\\\\n        value={text('value', '50')}\\\\n        width={text('width', '120px')}\\\\n      />\\\\n    </CardComponent>\\\\n  </ThemeWrapper>\\\\n)\\\\n\\\\nexport const columnOptionComponent = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <div style={{ width: '200px', margin: 'auto' }}>\\\\n          <IconDropdown\\\\n            variant={text('variant', 'column-filter') as tSelectVariant}\\\\n            optionList={object('optionList', columnOption)}\\\\n            onChange={action('Value selected')}\\\\n            width={text('width', '10px')}\\\\n            isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n          />\\\\n        </div>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const BreadCrumbComponent = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <IconDropdown\\\\n          variant={text('variant', 'bread-crumb') as tSelectVariant}\\\\n          optionList={object('optionList', options)}\\\\n          onChange={action('Value selected')}\\\\n          value={text('value', 'strawberry')}\\\\n          width={text('width', '260px')}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const DatePickerDropDown = () => (\\\\n  <ThemeWrapper>\\\\n    <CardComponent style={{ height: '200px' }}>\\\\n      <IconDropdown\\\\n        variant={text('variant', 'date-picker') as tSelectVariant}\\\\n        optionList={object('optionList', datePickerOptions)}\\\\n        onChange={action('Value selected')}\\\\n        value={text('value', '50')}\\\\n        width={text('width', '80px')}\\\\n        showDownArrow={boolean('Show Down Arrow', true)}\\\\n        isMultiRegionStyled={boolean('Is Multi Region Styled', false)}\\\\n      />\\\\n    </CardComponent>\\\\n  </ThemeWrapper>\\\\n)\\\\nconst arrayMap = [\\\\n  { variant: 'column-filter', name: 'column-filter0' },\\\\n  { variant: 'column-filter', name: 'column-filter1' },\\\\n  { variant: 'column-filter', name: 'column-filter2' }\\\\n]\\\\n\\\\nexport const columnOptionList = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <div style={{ width: '200px', margin: 'auto' }}>\\\\n          {arrayMap.map((obj: any, index: number) => {\\\\n            return (\\\\n              <IconDropdown\\\\n                variant={text('variant', obj?.variant) as tSelectVariant}\\\\n                optionList={object('optionList', columnOption)}\\\\n                onChange={action('Value selected')}\\\\n                width={text('width', '10px')}\\\\n                isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n                key={index}\\\\n              />\\\\n            )\\\\n          })}\\\\n        </div>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const DropdownUniversal = () => {\\\\n  // reference to style\\\\n  // const theme = useContext(ThemeContext)\\\\n  // const borderBottom = `1px solid ${theme?.colors?.grey['A800']}`\\\\n  // const customStyle = {\\\\n  //   control: (provided: any) => ({\\\\n  //     ...provided,\\\\n  //     borderStyle: 'none',\\\\n  //     borderBottom,\\\\n  //     borderRadius: '0px',\\\\n  //     boxShadow: 'none',\\\\n  //     borderColor: theme?.colors?.grey?.A800,\\\\n  //     '&:focus': {\\\\n  //       borderStyle: 'none',\\\\n  //       borderBottom,\\\\n  //       boxShadow: 'none',\\\\n  //       borderColor: theme?.colors?.grey?.A800\\\\n  //     },\\\\n  //     '&:hover': {\\\\n  //       borderStyle: 'none',\\\\n  //       borderBottom,\\\\n  //       boxShadow: 'none',\\\\n  //       borderColor: theme?.colors?.grey?.A800\\\\n  //     }\\\\n  //   }),\\\\n  //   option: (provided: any, state: any) => ({\\\\n  //     ...provided,\\\\n  //     backgroundColor: state?.isSelected\\\\n  //       ? theme?.colors?.primary?.main\\\\n  //       : theme?.colors?.white,\\\\n  //     '&:hover': {\\\\n  //       backgroundColor: state?.isSelected\\\\n  //         ? theme?.colors?.primary?.main\\\\n  //         : theme?.colors?.grey['50']\\\\n  //     }\\\\n  //   }),\\\\n\\\\n  //   menu: (provided: any, state: any) => ({\\\\n  //     ...provided,\\\\n  //     backgroundColor: state?.isSelected\\\\n  //       ? theme.colors.primary.main\\\\n  //       : theme?.colors?.white,\\\\n  //     borderRadius: '2px',\\\\n  //     '&:hover': {\\\\n  //       backgroundColor: state?.isSelected\\\\n  //         ? theme?.colors?.primary?.main\\\\n  //         : theme?.colors?.white\\\\n  //     },\\\\n  //     marginTop: '5px',\\\\n  //     marginLeft: '16px',\\\\n  //     width: '90%'\\\\n  //   }),\\\\n  //   menuList: (provided: any) => ({\\\\n  //     ...provided,\\\\n  //     marginTop: '0px'\\\\n  //   }),\\\\n  //   valueContainer: (provided: any) => ({\\\\n  //     ...provided,\\\\n  //     padding: '0px'\\\\n  //   })\\\\n  // }\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <IconDropdown\\\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          width={text('width', '120px')}\\\\n          menuIsOpen={boolean('menuIsOpen', false)}\\\\n          primary={boolean('primary', false)}\\\\n          intent={text('intent', 'page') as tIntent}\\\\n          onChange={action('Value Changed')}\\\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n          disabled={boolean('disabled', false)}\\\\n          value='available'\\\\n          optionComponent={({ selectedOption }: any) => {\\\\n            return (\\\\n              <div>\\\\n                <div>{selectedOption?.color}</div>\\\\n                <div>{selectedOption?.label}</div>\\\\n              </div>\\\\n            )\\\\n          }}\\\\n          // customStyle={customStyle}\\\\n        >\\\\n          {({\\\\n            selectedOption,\\\\n            menuIsOpen,\\\\n            setMenuIsOpen\\\\n          }: IUniversalDropdownChildren) => {\\\\n            return (\\\\n              <Button\\\\n                onClick={() => {\\\\n                  setMenuIsOpen(!menuIsOpen)\\\\n                  action('Universal open/closed')(menuIsOpen)\\\\n                }}\\\\n                color={text('color', 'white')}\\\\n                bgColor={text('bgColor', 'black')}\\\\n                fullWidth={boolean('fullWidth', false)}\\\\n              >\\\\n                {selectedOption?.label}\\\\n              </Button>\\\\n            )\\\\n          }}\\\\n        </IconDropdown>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const TextFieldDropdown = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <IconDropdown\\\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          width={text('width', '120px')}\\\\n          menuIsOpen={boolean('menuIsOpen', false)}\\\\n          primary={boolean('primary', false)}\\\\n          intent={text('intent', 'page') as tIntent}\\\\n          onChange={action('Value Changed')}\\\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n          disabled={boolean('disabled', false)}\\\\n          value='available'\\\\n          optionComponent={({ selectedOption }: any) => {\\\\n            return (\\\\n              <div>\\\\n                <div>{selectedOption?.color}</div>\\\\n                <div>{selectedOption?.label}</div>\\\\n              </div>\\\\n            )\\\\n          }}\\\\n          // customStyle={customStyle}\\\\n        >\\\\n          {({\\\\n            selectedOption,\\\\n            menuIsOpen,\\\\n            setMenuIsOpen\\\\n          }: IUniversalDropdownChildren) => {\\\\n            return (\\\\n              <TextInput\\\\n                id='someId'\\\\n                name='someName'\\\\n                className='someClassName'\\\\n                label={text('label', 'Username')}\\\\n                labelColor={text('labelColor', 'text.inputLabel.default')}\\\\n                placeholder={text('placeholder', 'Enter text here...')}\\\\n                maxLength={number('maxLength', 10)}\\\\n                error={boolean('error', false)}\\\\n                errorMessage={text('errorMessage', '')}\\\\n                required={boolean('required', false)}\\\\n                fullWidth={boolean('fullWidth', false)}\\\\n                onChange={action('Triggered: onChange')}\\\\n                onClick={() => {\\\\n                  setMenuIsOpen(!menuIsOpen)\\\\n                  action('universal open/closed')(menuIsOpen)\\\\n                }}\\\\n                value={selectedOption?.value}\\\\n              />\\\\n            )\\\\n          }}\\\\n        </IconDropdown>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/IconDropdown.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\nimport { action } from '@storybook/addon-actions'\\nimport {\\n  array,\\n  boolean,\\n  number,\\n  object,\\n  text,\\n  withKnobs\\n} from '@storybook/addon-knobs'\\nimport React from 'react'\\nimport IconDropdown from '.'\\nimport { path } from '..'\\nimport { Box } from '../../..'\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\nimport Button, { tIntent } from '../../atoms/Button'\\nimport CardComponent from '../../atoms/Card'\\nimport { tPlacement } from '../../../utilities/types'\\nimport {\\n  IUniversalDropdownChildren,\\n  tSelectVariant\\n} from '../DropDown/interface'\\nimport TextInput from '../TextInput'\\n\\nexport default {parameters: {\\\"storySource\\\":{\\\"source\\\":\\\"\\\\n\\\\n// @ts-nocheck\\\\n// @ts-ignore\\\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\\\n// @ts-ignore\\\\nvar addSourceDecorator = require(\\\\\\\"@storybook/source-loader/preview\\\\\\\").addSource;\\\\n// @ts-ignore\\\\nvar __SOURCE_PREFIX__ = \\\\\\\"/Users/farhanansari/Code/ui-library/src/components/molecules/IconDropdown\\\\\\\";\\\\n// @ts-ignore\\\\nvar __STORY__ = \\\\\\\"import { action } from '@storybook/addon-actions'\\\\\\\\nimport {\\\\\\\\n  array,\\\\\\\\n  boolean,\\\\\\\\n  number,\\\\\\\\n  object,\\\\\\\\n  text,\\\\\\\\n  withKnobs\\\\\\\\n} from '@storybook/addon-knobs'\\\\\\\\nimport React from 'react'\\\\\\\\nimport IconDropdown from '.'\\\\\\\\nimport { path } from '..'\\\\\\\\nimport { Box } from '../../..'\\\\\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\\\\\nimport Button, { tIntent } from '../../atoms/Button'\\\\\\\\nimport CardComponent from '../../atoms/Card'\\\\\\\\nimport { tPlacement } from '../../../utilities/types'\\\\\\\\nimport {\\\\\\\\n  IUniversalDropdownChildren,\\\\\\\\n  tSelectVariant\\\\\\\\n} from '../DropDown/interface'\\\\\\\\nimport TextInput from '../TextInput'\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/IconDropdown`,\\\\\\\\n  decorators: [withKnobs],\\\\\\\\n  component: IconDropdown\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst ListViewOption = [\\\\\\\\n  {\\\\\\\\n    value: 'available',\\\\\\\\n    label: 'Mark As Available',\\\\\\\\n    color: 'blue',\\\\\\\\n    tooltipText: 'Mark As Available',\\\\\\\\n    isDisabled: true\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    value: 'unavailable',\\\\\\\\n    label: 'Mark As Unavailable',\\\\\\\\n    color: 'red',\\\\\\\\n    tooltipText: 'Mark As Unavailable'\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    value: 'active',\\\\\\\\n    label: 'Mark As Active',\\\\\\\\n    color: 'purple',\\\\\\\\n    tooltipText: 'Mark As Active'\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    value: 'inactive',\\\\\\\\n    label: 'Mark As Inactive',\\\\\\\\n    color: 'green',\\\\\\\\n    tooltipText: 'Mark As Inactive'\\\\\\\\n  }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst MultiLevelListViewOption = [\\\\\\\\n  {\\\\\\\\n    id: 'available',\\\\\\\\n    value: 'available',\\\\\\\\n    label: 'Mark As Available',\\\\\\\\n    color: 'blue',\\\\\\\\n    tooltipText: 'Mark As Available',\\\\\\\\n    options: [\\\\\\\\n      {\\\\\\\\n        id: 'available',\\\\\\\\n        value: 'available',\\\\\\\\n        label: 'Mark As Child Available',\\\\\\\\n        color: 'blue',\\\\\\\\n        tooltipText: 'Mark As Child Available'\\\\\\\\n      },\\\\\\\\n      {\\\\\\\\n        id: 'unavailable',\\\\\\\\n        value: 'unavailable',\\\\\\\\n        label: 'Mark As Child Unavailable',\\\\\\\\n        color: 'red',\\\\\\\\n        tooltipText: 'Mark As Child Unavailable'\\\\\\\\n      },\\\\\\\\n      {\\\\\\\\n        id: 'active',\\\\\\\\n        value: 'active',\\\\\\\\n        label: 'Mark As Child Active',\\\\\\\\n        color: 'purple',\\\\\\\\n        tooltipText: 'Mark As Child Active'\\\\\\\\n      },\\\\\\\\n      {\\\\\\\\n        id: 'inactive',\\\\\\\\n        value: 'inactive',\\\\\\\\n        label: 'Mark As Child Inactive',\\\\\\\\n        color: 'green',\\\\\\\\n        tooltipText: 'Mark As Child Inactive',\\\\\\\\n        options: [\\\\\\\\n          {\\\\\\\\n            id: 'available',\\\\\\\\n            value: 'available',\\\\\\\\n            label: 'Mark As Grand Child Available',\\\\\\\\n            color: 'blue',\\\\\\\\n            tooltipText: 'Mark As Grand Child Available'\\\\\\\\n          },\\\\\\\\n          {\\\\\\\\n            id: 'unavailable',\\\\\\\\n            value: 'unavailable',\\\\\\\\n            label: 'Mark As Grand Child Unavailable',\\\\\\\\n            color: 'red',\\\\\\\\n            tooltipText: 'Mark As Grand Child Unavailable'\\\\\\\\n          }\\\\\\\\n        ]\\\\\\\\n      }\\\\\\\\n    ]\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    id: 'unavailable',\\\\\\\\n    value: 'unavailable',\\\\\\\\n    label: 'Mark As Unavailable',\\\\\\\\n    color: 'red',\\\\\\\\n    tooltipText: 'Mark As Unavailable'\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    id: 'active',\\\\\\\\n    value: 'active',\\\\\\\\n    label: 'Mark As Active',\\\\\\\\n    color: 'purple',\\\\\\\\n    tooltipText: 'Mark As Active'\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    id: 'inactive',\\\\\\\\n    value: 'inactive',\\\\\\\\n    label: 'Mark As Inactive',\\\\\\\\n    color: 'green',\\\\\\\\n    tooltipText: 'Mark As Inactive'\\\\\\\\n  }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst paginationOptions = [\\\\\\\\n  { value: '25', label: '25 per page', title: '25 per page' },\\\\\\\\n  { value: '50', label: '50 per page', title: '50 per page' },\\\\\\\\n  { value: '100', label: '100 per page', title: '100 per page' },\\\\\\\\n  { value: '200', label: '200 per page', title: '200 per page' }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst columnOption = [\\\\\\\\n  { value: 'ascending', label: 'Sort Ascending', iconVariant: 'hide-menu-box' },\\\\\\\\n  {\\\\\\\\n    value: 'descending',\\\\\\\\n    label: 'Sort Descending',\\\\\\\\n    iconVariant: 'hub-location'\\\\\\\\n  },\\\\\\\\n  { value: 'hideColumn', label: 'Hide Column', iconVariant: 'close' },\\\\\\\\n  { value: 'pinLeft', label: 'Pin Left', iconVariant: 'angle-left' },\\\\\\\\n  { value: 'pinright', label: 'Pin Right', iconVariant: 'angle-right-thin' }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst options = [\\\\\\\\n  {\\\\\\\\n    value: 'emailVerificationPending',\\\\\\\\n    label: 'Email Verification Pending Shipper'\\\\\\\\n  },\\\\\\\\n  { value: 'allShippers', label: 'All Shippers' },\\\\\\\\n  { value: 'approvalPendingShippers', label: 'Approval Pending Shippers' }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst datePickerOptions = [\\\\\\\\n  { value: 'January', label: 'January' },\\\\\\\\n  { value: 'February', label: 'February' },\\\\\\\\n  { value: 'March', label: 'March' },\\\\\\\\n  { value: 'April', label: 'April' },\\\\\\\\n  { value: 'May', label: 'May' },\\\\\\\\n  { value: 'June', label: 'June' },\\\\\\\\n  { value: 'July', label: 'July' },\\\\\\\\n  { value: 'August', label: 'August' },\\\\\\\\n  { value: 'September', label: 'September' },\\\\\\\\n  { value: 'October', label: 'October' },\\\\\\\\n  { value: 'November', label: 'November' },\\\\\\\\n  { value: 'December', label: 'December' }\\\\\\\\n]\\\\\\\\n\\\\\\\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\\\\\\\nexport const ButtonDropdown = () => (\\\\\\\\n  <ThemeWrapper>\\\\\\\\n    <Box p='2em' bgColor='grey.50'>\\\\\\\\n      <IconDropdown\\\\\\\\n        variant={text('varaint', 'button-dropdown') as tSelectVariant}\\\\\\\\n        optionList={object('optionList', ListViewOption)}\\\\\\\\n        width={text('width', '120px')}\\\\\\\\n        menuIsOpen={boolean('menuIsOpen', false)}\\\\\\\\n        iconButtonDetails={array('iconList', [\\\\\\\\n          'hide-menu-box',\\\\\\\\n          'More',\\\\\\\\n          'angle-down'\\\\\\\\n        ])}\\\\\\\\n        primary={boolean('primary', false)}\\\\\\\\n        intent={text('intent', 'page') as tIntent}\\\\\\\\n        onChange={action('Value Changed')}\\\\\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n        disabled={boolean('disabled', false)}\\\\\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\\\\\n        tooltipProps={{\\\\\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </Box>\\\\\\\\n  </ThemeWrapper>\\\\\\\\n)\\\\\\\\n\\\\\\\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\\\\\\\nexport const TextDropdown = () => (\\\\\\\\n  <ThemeWrapper>\\\\\\\\n    <Box p='2em' bgColor='grey.50'>\\\\\\\\n      <IconDropdown\\\\\\\\n        variant={text('varaint', 'text-dropdown') as tSelectVariant}\\\\\\\\n        optionList={object('optionList', ListViewOption)}\\\\\\\\n        width={text('width', '120px')}\\\\\\\\n        menuIsOpen={boolean('menuIsOpen', false)}\\\\\\\\n        iconButtonDetails={array('iconList', [\\\\\\\\n          'hide-menu-box',\\\\\\\\n          'More',\\\\\\\\n          'angle-down'\\\\\\\\n        ])}\\\\\\\\n        primary={boolean('primary', false)}\\\\\\\\n        intent={text('intent', 'page') as tIntent}\\\\\\\\n        onChange={action('Value Changed')}\\\\\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n        disabled={boolean('disabled', false)}\\\\\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\\\\\n        tooltipProps={{\\\\\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </Box>\\\\\\\\n  </ThemeWrapper>\\\\\\\\n)\\\\\\\\n\\\\\\\\nexport const MultiLevelBreadCrumb = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='2em' bgColor='grey.50'>\\\\\\\\n        <IconDropdown\\\\\\\\n          variant={text('variant', 'multilevel-breadcrumb') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', MultiLevelListViewOption)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          value={text('value', 'strawberry')}\\\\\\\\n          width={text('width', '260px')}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n  }\\\\\\\\n\\\\\\\\nexport const MultiLevelButtonDropdown = () => (\\\\\\\\n  <ThemeWrapper>\\\\\\\\n    <Box p='2em' bgColor='grey.50'>\\\\\\\\n      <IconDropdown\\\\\\\\n        variant={\\\\\\\\n          text('varaint', 'multilevel-button-dropdown') as tSelectVariant\\\\\\\\n        }\\\\\\\\n        optionList={object('optionList', MultiLevelListViewOption)}\\\\\\\\n        width={text('width', '120px')}\\\\\\\\n        menuIsOpen\\\\\\\\n        iconButtonDetails={array('iconList', [\\\\\\\\n          'hide-menu-box',\\\\\\\\n          'More',\\\\\\\\n          'angle-down'\\\\\\\\n        ])}\\\\\\\\n        defaultOpen='right'\\\\\\\\n        primary={boolean('primary', false)}\\\\\\\\n        intent={text('intent', 'page') as tIntent}\\\\\\\\n        handleClick={(id: any) => console.log('clicked from storybook', id)}\\\\\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n        disabled={boolean('disabled', false)}\\\\\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\\\\\n        tooltipProps={{\\\\\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </Box>\\\\\\\\n  </ThemeWrapper>\\\\\\\\n)\\\\\\\\n\\\\\\\\nexport const PaginationDropdown = () => (\\\\\\\\n  <ThemeWrapper>\\\\\\\\n    <CardComponent style={{ height: '300px' }}>\\\\\\\\n      <IconDropdown\\\\\\\\n        variant={text('variant', 'pagination-size') as tSelectVariant}\\\\\\\\n        optionList={object('optionList', paginationOptions)}\\\\\\\\n        onChange={action('Value selected')}\\\\\\\\n        value={text('value', '50')}\\\\\\\\n        width={text('width', '120px')}\\\\\\\\n      />\\\\\\\\n    </CardComponent>\\\\\\\\n  </ThemeWrapper>\\\\\\\\n)\\\\\\\\n\\\\\\\\nexport const columnOptionComponent = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='2em' bgColor='grey.50'>\\\\\\\\n        <div style={{ width: '200px', margin: 'auto' }}>\\\\\\\\n          <IconDropdown\\\\\\\\n            variant={text('variant', 'column-filter') as tSelectVariant}\\\\\\\\n            optionList={object('optionList', columnOption)}\\\\\\\\n            onChange={action('Value selected')}\\\\\\\\n            width={text('width', '10px')}\\\\\\\\n            isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n          />\\\\\\\\n        </div>\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const BreadCrumbComponent = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='2em' bgColor='grey.50'>\\\\\\\\n        <IconDropdown\\\\\\\\n          variant={text('variant', 'bread-crumb') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', options)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          value={text('value', 'strawberry')}\\\\\\\\n          width={text('width', '260px')}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const DatePickerDropDown = () => (\\\\\\\\n  <ThemeWrapper>\\\\\\\\n    <CardComponent style={{ height: '200px' }}>\\\\\\\\n      <IconDropdown\\\\\\\\n        variant={text('variant', 'date-picker') as tSelectVariant}\\\\\\\\n        optionList={object('optionList', datePickerOptions)}\\\\\\\\n        onChange={action('Value selected')}\\\\\\\\n        value={text('value', '50')}\\\\\\\\n        width={text('width', '80px')}\\\\\\\\n        showDownArrow={boolean('Show Down Arrow', true)}\\\\\\\\n        isMultiRegionStyled={boolean('Is Multi Region Styled', false)}\\\\\\\\n      />\\\\\\\\n    </CardComponent>\\\\\\\\n  </ThemeWrapper>\\\\\\\\n)\\\\\\\\nconst arrayMap = [\\\\\\\\n  { variant: 'column-filter', name: 'column-filter0' },\\\\\\\\n  { variant: 'column-filter', name: 'column-filter1' },\\\\\\\\n  { variant: 'column-filter', name: 'column-filter2' }\\\\\\\\n]\\\\\\\\n\\\\\\\\nexport const columnOptionList = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='2em' bgColor='grey.50'>\\\\\\\\n        <div style={{ width: '200px', margin: 'auto' }}>\\\\\\\\n          {arrayMap.map((obj: any, index: number) => {\\\\\\\\n            return (\\\\\\\\n              <IconDropdown\\\\\\\\n                variant={text('variant', obj?.variant) as tSelectVariant}\\\\\\\\n                optionList={object('optionList', columnOption)}\\\\\\\\n                onChange={action('Value selected')}\\\\\\\\n                width={text('width', '10px')}\\\\\\\\n                isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n                key={index}\\\\\\\\n              />\\\\\\\\n            )\\\\\\\\n          })}\\\\\\\\n        </div>\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const DropdownUniversal = () => {\\\\\\\\n  // reference to style\\\\\\\\n  // const theme = useContext(ThemeContext)\\\\\\\\n  // const borderBottom = `1px solid ${theme?.colors?.grey['A800']}`\\\\\\\\n  // const customStyle = {\\\\\\\\n  //   control: (provided: any) => ({\\\\\\\\n  //     ...provided,\\\\\\\\n  //     borderStyle: 'none',\\\\\\\\n  //     borderBottom,\\\\\\\\n  //     borderRadius: '0px',\\\\\\\\n  //     boxShadow: 'none',\\\\\\\\n  //     borderColor: theme?.colors?.grey?.A800,\\\\\\\\n  //     '&:focus': {\\\\\\\\n  //       borderStyle: 'none',\\\\\\\\n  //       borderBottom,\\\\\\\\n  //       boxShadow: 'none',\\\\\\\\n  //       borderColor: theme?.colors?.grey?.A800\\\\\\\\n  //     },\\\\\\\\n  //     '&:hover': {\\\\\\\\n  //       borderStyle: 'none',\\\\\\\\n  //       borderBottom,\\\\\\\\n  //       boxShadow: 'none',\\\\\\\\n  //       borderColor: theme?.colors?.grey?.A800\\\\\\\\n  //     }\\\\\\\\n  //   }),\\\\\\\\n  //   option: (provided: any, state: any) => ({\\\\\\\\n  //     ...provided,\\\\\\\\n  //     backgroundColor: state?.isSelected\\\\\\\\n  //       ? theme?.colors?.primary?.main\\\\\\\\n  //       : theme?.colors?.white,\\\\\\\\n  //     '&:hover': {\\\\\\\\n  //       backgroundColor: state?.isSelected\\\\\\\\n  //         ? theme?.colors?.primary?.main\\\\\\\\n  //         : theme?.colors?.grey['50']\\\\\\\\n  //     }\\\\\\\\n  //   }),\\\\\\\\n\\\\\\\\n  //   menu: (provided: any, state: any) => ({\\\\\\\\n  //     ...provided,\\\\\\\\n  //     backgroundColor: state?.isSelected\\\\\\\\n  //       ? theme.colors.primary.main\\\\\\\\n  //       : theme?.colors?.white,\\\\\\\\n  //     borderRadius: '2px',\\\\\\\\n  //     '&:hover': {\\\\\\\\n  //       backgroundColor: state?.isSelected\\\\\\\\n  //         ? theme?.colors?.primary?.main\\\\\\\\n  //         : theme?.colors?.white\\\\\\\\n  //     },\\\\\\\\n  //     marginTop: '5px',\\\\\\\\n  //     marginLeft: '16px',\\\\\\\\n  //     width: '90%'\\\\\\\\n  //   }),\\\\\\\\n  //   menuList: (provided: any) => ({\\\\\\\\n  //     ...provided,\\\\\\\\n  //     marginTop: '0px'\\\\\\\\n  //   }),\\\\\\\\n  //   valueContainer: (provided: any) => ({\\\\\\\\n  //     ...provided,\\\\\\\\n  //     padding: '0px'\\\\\\\\n  //   })\\\\\\\\n  // }\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='2em' bgColor='grey.50'>\\\\\\\\n        <IconDropdown\\\\\\\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', ListViewOption)}\\\\\\\\n          width={text('width', '120px')}\\\\\\\\n          menuIsOpen={boolean('menuIsOpen', false)}\\\\\\\\n          primary={boolean('primary', false)}\\\\\\\\n          intent={text('intent', 'page') as tIntent}\\\\\\\\n          onChange={action('Value Changed')}\\\\\\\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n          value='available'\\\\\\\\n          optionComponent={({ selectedOption }: any) => {\\\\\\\\n            return (\\\\\\\\n              <div>\\\\\\\\n                <div>{selectedOption?.color}</div>\\\\\\\\n                <div>{selectedOption?.label}</div>\\\\\\\\n              </div>\\\\\\\\n            )\\\\\\\\n          }}\\\\\\\\n          // customStyle={customStyle}\\\\\\\\n        >\\\\\\\\n          {({\\\\\\\\n            selectedOption,\\\\\\\\n            menuIsOpen,\\\\\\\\n            setMenuIsOpen\\\\\\\\n          }: IUniversalDropdownChildren) => {\\\\\\\\n            return (\\\\\\\\n              <Button\\\\\\\\n                onClick={() => {\\\\\\\\n                  setMenuIsOpen(!menuIsOpen)\\\\\\\\n                  action('Universal open/closed')(menuIsOpen)\\\\\\\\n                }}\\\\\\\\n                color={text('color', 'white')}\\\\\\\\n                bgColor={text('bgColor', 'black')}\\\\\\\\n                fullWidth={boolean('fullWidth', false)}\\\\\\\\n              >\\\\\\\\n                {selectedOption?.label}\\\\\\\\n              </Button>\\\\\\\\n            )\\\\\\\\n          }}\\\\\\\\n        </IconDropdown>\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const TextFieldDropdown = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='2em' bgColor='grey.50'>\\\\\\\\n        <IconDropdown\\\\\\\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', ListViewOption)}\\\\\\\\n          width={text('width', '120px')}\\\\\\\\n          menuIsOpen={boolean('menuIsOpen', false)}\\\\\\\\n          primary={boolean('primary', false)}\\\\\\\\n          intent={text('intent', 'page') as tIntent}\\\\\\\\n          onChange={action('Value Changed')}\\\\\\\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n          value='available'\\\\\\\\n          optionComponent={({ selectedOption }: any) => {\\\\\\\\n            return (\\\\\\\\n              <div>\\\\\\\\n                <div>{selectedOption?.color}</div>\\\\\\\\n                <div>{selectedOption?.label}</div>\\\\\\\\n              </div>\\\\\\\\n            )\\\\\\\\n          }}\\\\\\\\n          // customStyle={customStyle}\\\\\\\\n        >\\\\\\\\n          {({\\\\\\\\n            selectedOption,\\\\\\\\n            menuIsOpen,\\\\\\\\n            setMenuIsOpen\\\\\\\\n          }: IUniversalDropdownChildren) => {\\\\\\\\n            return (\\\\\\\\n              <TextInput\\\\\\\\n                id='someId'\\\\\\\\n                name='someName'\\\\\\\\n                className='someClassName'\\\\\\\\n                label={text('label', 'Username')}\\\\\\\\n                labelColor={text('labelColor', 'text.inputLabel.default')}\\\\\\\\n                placeholder={text('placeholder', 'Enter text here...')}\\\\\\\\n                maxLength={number('maxLength', 10)}\\\\\\\\n                error={boolean('error', false)}\\\\\\\\n                errorMessage={text('errorMessage', '')}\\\\\\\\n                required={boolean('required', false)}\\\\\\\\n                fullWidth={boolean('fullWidth', false)}\\\\\\\\n                onChange={action('Triggered: onChange')}\\\\\\\\n                onClick={() => {\\\\\\\\n                  setMenuIsOpen(!menuIsOpen)\\\\\\\\n                  action('universal open/closed')(menuIsOpen)\\\\\\\\n                }}\\\\\\\\n                value={selectedOption?.value}\\\\\\\\n              />\\\\\\\\n            )\\\\\\\\n          }}\\\\\\\\n        </IconDropdown>\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\";\\\\n// @ts-ignore\\\\nvar __ADDS_MAP__ = {};\\\\n// @ts-ignore\\\\nvar __MAIN_FILE_LOCATION__ = \\\\\\\"/IconDropdown.stories.tsx\\\\\\\";\\\\n// @ts-ignore\\\\nvar __MODULE_DEPENDENCIES__ = [];\\\\n// @ts-ignore\\\\nvar __LOCAL_DEPENDENCIES__ = {};\\\\n// @ts-ignore\\\\nvar __IDS_TO_FRAMEWORKS__ = {};\\\\n        \\\\nimport { action } from '@storybook/addon-actions'\\\\nimport {\\\\n  array,\\\\n  boolean,\\\\n  number,\\\\n  object,\\\\n  text,\\\\n  withKnobs\\\\n} from '@storybook/addon-knobs'\\\\nimport React from 'react'\\\\nimport IconDropdown from '.'\\\\nimport { path } from '..'\\\\nimport { Box } from '../../..'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport Button, { tIntent } from '../../atoms/Button'\\\\nimport CardComponent from '../../atoms/Card'\\\\nimport { tPlacement } from '../../../utilities/types'\\\\nimport {\\\\n  IUniversalDropdownChildren,\\\\n  tSelectVariant\\\\n} from '../DropDown/interface'\\\\nimport TextInput from '../TextInput'\\\\n\\\\nexport default {parameters: {\\\\\\\"storySource\\\\\\\":{\\\\\\\"source\\\\\\\":\\\\\\\"import { action } from '@storybook/addon-actions'\\\\\\\\nimport {\\\\\\\\n  array,\\\\\\\\n  boolean,\\\\\\\\n  number,\\\\\\\\n  object,\\\\\\\\n  text,\\\\\\\\n  withKnobs\\\\\\\\n} from '@storybook/addon-knobs'\\\\\\\\nimport React from 'react'\\\\\\\\nimport IconDropdown from '.'\\\\\\\\nimport { path } from '..'\\\\\\\\nimport { Box } from '../../..'\\\\\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\\\\\nimport Button, { tIntent } from '../../atoms/Button'\\\\\\\\nimport CardComponent from '../../atoms/Card'\\\\\\\\nimport { tPlacement } from '../../../utilities/types'\\\\\\\\nimport {\\\\\\\\n  IUniversalDropdownChildren,\\\\\\\\n  tSelectVariant\\\\\\\\n} from '../DropDown/interface'\\\\\\\\nimport TextInput from '../TextInput'\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/IconDropdown`,\\\\\\\\n  decorators: [withKnobs],\\\\\\\\n  component: IconDropdown\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst ListViewOption = [\\\\\\\\n  {\\\\\\\\n    value: 'available',\\\\\\\\n    label: 'Mark As Available',\\\\\\\\n    color: 'blue',\\\\\\\\n    tooltipText: 'Mark As Available',\\\\\\\\n    isDisabled: true\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    value: 'unavailable',\\\\\\\\n    label: 'Mark As Unavailable',\\\\\\\\n    color: 'red',\\\\\\\\n    tooltipText: 'Mark As Unavailable'\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    value: 'active',\\\\\\\\n    label: 'Mark As Active',\\\\\\\\n    color: 'purple',\\\\\\\\n    tooltipText: 'Mark As Active'\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    value: 'inactive',\\\\\\\\n    label: 'Mark As Inactive',\\\\\\\\n    color: 'green',\\\\\\\\n    tooltipText: 'Mark As Inactive'\\\\\\\\n  }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst MultiLevelListViewOption = [\\\\\\\\n  {\\\\\\\\n    id: 'available',\\\\\\\\n    value: 'available',\\\\\\\\n    label: 'Mark As Available',\\\\\\\\n    color: 'blue',\\\\\\\\n    tooltipText: 'Mark As Available',\\\\\\\\n    options: [\\\\\\\\n      {\\\\\\\\n        id: 'available',\\\\\\\\n        value: 'available',\\\\\\\\n        label: 'Mark As Child Available',\\\\\\\\n        color: 'blue',\\\\\\\\n        tooltipText: 'Mark As Child Available'\\\\\\\\n      },\\\\\\\\n      {\\\\\\\\n        id: 'unavailable',\\\\\\\\n        value: 'unavailable',\\\\\\\\n        label: 'Mark As Child Unavailable',\\\\\\\\n        color: 'red',\\\\\\\\n        tooltipText: 'Mark As Child Unavailable'\\\\\\\\n      },\\\\\\\\n      {\\\\\\\\n        id: 'active',\\\\\\\\n        value: 'active',\\\\\\\\n        label: 'Mark As Child Active',\\\\\\\\n        color: 'purple',\\\\\\\\n        tooltipText: 'Mark As Child Active'\\\\\\\\n      },\\\\\\\\n      {\\\\\\\\n        id: 'inactive',\\\\\\\\n        value: 'inactive',\\\\\\\\n        label: 'Mark As Child Inactive',\\\\\\\\n        color: 'green',\\\\\\\\n        tooltipText: 'Mark As Child Inactive',\\\\\\\\n        options: [\\\\\\\\n          {\\\\\\\\n            id: 'available',\\\\\\\\n            value: 'available',\\\\\\\\n            label: 'Mark As Grand Child Available',\\\\\\\\n            color: 'blue',\\\\\\\\n            tooltipText: 'Mark As Grand Child Available'\\\\\\\\n          },\\\\\\\\n          {\\\\\\\\n            id: 'unavailable',\\\\\\\\n            value: 'unavailable',\\\\\\\\n            label: 'Mark As Grand Child Unavailable',\\\\\\\\n            color: 'red',\\\\\\\\n            tooltipText: 'Mark As Grand Child Unavailable'\\\\\\\\n          }\\\\\\\\n        ]\\\\\\\\n      }\\\\\\\\n    ]\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    id: 'unavailable',\\\\\\\\n    value: 'unavailable',\\\\\\\\n    label: 'Mark As Unavailable',\\\\\\\\n    color: 'red',\\\\\\\\n    tooltipText: 'Mark As Unavailable'\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    id: 'active',\\\\\\\\n    value: 'active',\\\\\\\\n    label: 'Mark As Active',\\\\\\\\n    color: 'purple',\\\\\\\\n    tooltipText: 'Mark As Active'\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    id: 'inactive',\\\\\\\\n    value: 'inactive',\\\\\\\\n    label: 'Mark As Inactive',\\\\\\\\n    color: 'green',\\\\\\\\n    tooltipText: 'Mark As Inactive'\\\\\\\\n  }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst paginationOptions = [\\\\\\\\n  { value: '25', label: '25 per page', title: '25 per page' },\\\\\\\\n  { value: '50', label: '50 per page', title: '50 per page' },\\\\\\\\n  { value: '100', label: '100 per page', title: '100 per page' },\\\\\\\\n  { value: '200', label: '200 per page', title: '200 per page' }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst columnOption = [\\\\\\\\n  { value: 'ascending', label: 'Sort Ascending', iconVariant: 'hide-menu-box' },\\\\\\\\n  {\\\\\\\\n    value: 'descending',\\\\\\\\n    label: 'Sort Descending',\\\\\\\\n    iconVariant: 'hub-location'\\\\\\\\n  },\\\\\\\\n  { value: 'hideColumn', label: 'Hide Column', iconVariant: 'close' },\\\\\\\\n  { value: 'pinLeft', label: 'Pin Left', iconVariant: 'angle-left' },\\\\\\\\n  { value: 'pinright', label: 'Pin Right', iconVariant: 'angle-right-thin' }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst options = [\\\\\\\\n  {\\\\\\\\n    value: 'emailVerificationPending',\\\\\\\\n    label: 'Email Verification Pending Shipper'\\\\\\\\n  },\\\\\\\\n  { value: 'allShippers', label: 'All Shippers' },\\\\\\\\n  { value: 'approvalPendingShippers', label: 'Approval Pending Shippers' }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst datePickerOptions = [\\\\\\\\n  { value: 'January', label: 'January' },\\\\\\\\n  { value: 'February', label: 'February' },\\\\\\\\n  { value: 'March', label: 'March' },\\\\\\\\n  { value: 'April', label: 'April' },\\\\\\\\n  { value: 'May', label: 'May' },\\\\\\\\n  { value: 'June', label: 'June' },\\\\\\\\n  { value: 'July', label: 'July' },\\\\\\\\n  { value: 'August', label: 'August' },\\\\\\\\n  { value: 'September', label: 'September' },\\\\\\\\n  { value: 'October', label: 'October' },\\\\\\\\n  { value: 'November', label: 'November' },\\\\\\\\n  { value: 'December', label: 'December' }\\\\\\\\n]\\\\\\\\n\\\\\\\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\\\\\\\nexport const ButtonDropdown = () => (\\\\\\\\n  <ThemeWrapper>\\\\\\\\n    <Box p='2em' bgColor='grey.50'>\\\\\\\\n      <IconDropdown\\\\\\\\n        variant={text('varaint', 'button-dropdown') as tSelectVariant}\\\\\\\\n        optionList={object('optionList', ListViewOption)}\\\\\\\\n        width={text('width', '120px')}\\\\\\\\n        menuIsOpen={boolean('menuIsOpen', false)}\\\\\\\\n        iconButtonDetails={array('iconList', [\\\\\\\\n          'hide-menu-box',\\\\\\\\n          'More',\\\\\\\\n          'angle-down'\\\\\\\\n        ])}\\\\\\\\n        primary={boolean('primary', false)}\\\\\\\\n        intent={text('intent', 'page') as tIntent}\\\\\\\\n        onChange={action('Value Changed')}\\\\\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n        disabled={boolean('disabled', false)}\\\\\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\\\\\n        tooltipProps={{\\\\\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </Box>\\\\\\\\n  </ThemeWrapper>\\\\\\\\n)\\\\\\\\n\\\\\\\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\\\\\\\nexport const TextDropdown = () => (\\\\\\\\n  <ThemeWrapper>\\\\\\\\n    <Box p='2em' bgColor='grey.50'>\\\\\\\\n      <IconDropdown\\\\\\\\n        variant={text('varaint', 'text-dropdown') as tSelectVariant}\\\\\\\\n        optionList={object('optionList', ListViewOption)}\\\\\\\\n        width={text('width', '120px')}\\\\\\\\n        menuIsOpen={boolean('menuIsOpen', false)}\\\\\\\\n        iconButtonDetails={array('iconList', [\\\\\\\\n          'hide-menu-box',\\\\\\\\n          'More',\\\\\\\\n          'angle-down'\\\\\\\\n        ])}\\\\\\\\n        primary={boolean('primary', false)}\\\\\\\\n        intent={text('intent', 'page') as tIntent}\\\\\\\\n        onChange={action('Value Changed')}\\\\\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n        disabled={boolean('disabled', false)}\\\\\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\\\\\n        tooltipProps={{\\\\\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </Box>\\\\\\\\n  </ThemeWrapper>\\\\\\\\n)\\\\\\\\n\\\\\\\\nexport const MultiLevelBreadCrumb = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='2em' bgColor='grey.50'>\\\\\\\\n        <IconDropdown\\\\\\\\n          variant={text('variant', 'multilevel-breadcrumb') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', MultiLevelListViewOption)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          value={text('value', 'strawberry')}\\\\\\\\n          width={text('width', '260px')}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n  }\\\\\\\\n\\\\\\\\nexport const MultiLevelButtonDropdown = () => (\\\\\\\\n  <ThemeWrapper>\\\\\\\\n    <Box p='2em' bgColor='grey.50'>\\\\\\\\n      <IconDropdown\\\\\\\\n        variant={\\\\\\\\n          text('varaint', 'multilevel-button-dropdown') as tSelectVariant\\\\\\\\n        }\\\\\\\\n        optionList={object('optionList', MultiLevelListViewOption)}\\\\\\\\n        width={text('width', '120px')}\\\\\\\\n        menuIsOpen\\\\\\\\n        iconButtonDetails={array('iconList', [\\\\\\\\n          'hide-menu-box',\\\\\\\\n          'More',\\\\\\\\n          'angle-down'\\\\\\\\n        ])}\\\\\\\\n        defaultOpen='right'\\\\\\\\n        primary={boolean('primary', false)}\\\\\\\\n        intent={text('intent', 'page') as tIntent}\\\\\\\\n        handleClick={(id: any) => console.log('clicked from storybook', id)}\\\\\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n        disabled={boolean('disabled', false)}\\\\\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\\\\\n        tooltipProps={{\\\\\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </Box>\\\\\\\\n  </ThemeWrapper>\\\\\\\\n)\\\\\\\\n\\\\\\\\nexport const PaginationDropdown = () => (\\\\\\\\n  <ThemeWrapper>\\\\\\\\n    <CardComponent style={{ height: '300px' }}>\\\\\\\\n      <IconDropdown\\\\\\\\n        variant={text('variant', 'pagination-size') as tSelectVariant}\\\\\\\\n        optionList={object('optionList', paginationOptions)}\\\\\\\\n        onChange={action('Value selected')}\\\\\\\\n        value={text('value', '50')}\\\\\\\\n        width={text('width', '120px')}\\\\\\\\n      />\\\\\\\\n    </CardComponent>\\\\\\\\n  </ThemeWrapper>\\\\\\\\n)\\\\\\\\n\\\\\\\\nexport const columnOptionComponent = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='2em' bgColor='grey.50'>\\\\\\\\n        <div style={{ width: '200px', margin: 'auto' }}>\\\\\\\\n          <IconDropdown\\\\\\\\n            variant={text('variant', 'column-filter') as tSelectVariant}\\\\\\\\n            optionList={object('optionList', columnOption)}\\\\\\\\n            onChange={action('Value selected')}\\\\\\\\n            width={text('width', '10px')}\\\\\\\\n            isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n          />\\\\\\\\n        </div>\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const BreadCrumbComponent = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='2em' bgColor='grey.50'>\\\\\\\\n        <IconDropdown\\\\\\\\n          variant={text('variant', 'bread-crumb') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', options)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          value={text('value', 'strawberry')}\\\\\\\\n          width={text('width', '260px')}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const DatePickerDropDown = () => (\\\\\\\\n  <ThemeWrapper>\\\\\\\\n    <CardComponent style={{ height: '200px' }}>\\\\\\\\n      <IconDropdown\\\\\\\\n        variant={text('variant', 'date-picker') as tSelectVariant}\\\\\\\\n        optionList={object('optionList', datePickerOptions)}\\\\\\\\n        onChange={action('Value selected')}\\\\\\\\n        value={text('value', '50')}\\\\\\\\n        width={text('width', '80px')}\\\\\\\\n        showDownArrow={boolean('Show Down Arrow', true)}\\\\\\\\n        isMultiRegionStyled={boolean('Is Multi Region Styled', false)}\\\\\\\\n      />\\\\\\\\n    </CardComponent>\\\\\\\\n  </ThemeWrapper>\\\\\\\\n)\\\\\\\\nconst arrayMap = [\\\\\\\\n  { variant: 'column-filter', name: 'column-filter0' },\\\\\\\\n  { variant: 'column-filter', name: 'column-filter1' },\\\\\\\\n  { variant: 'column-filter', name: 'column-filter2' }\\\\\\\\n]\\\\\\\\n\\\\\\\\nexport const columnOptionList = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='2em' bgColor='grey.50'>\\\\\\\\n        <div style={{ width: '200px', margin: 'auto' }}>\\\\\\\\n          {arrayMap.map((obj: any, index: number) => {\\\\\\\\n            return (\\\\\\\\n              <IconDropdown\\\\\\\\n                variant={text('variant', obj?.variant) as tSelectVariant}\\\\\\\\n                optionList={object('optionList', columnOption)}\\\\\\\\n                onChange={action('Value selected')}\\\\\\\\n                width={text('width', '10px')}\\\\\\\\n                isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n                key={index}\\\\\\\\n              />\\\\\\\\n            )\\\\\\\\n          })}\\\\\\\\n        </div>\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const DropdownUniversal = () => {\\\\\\\\n  // reference to style\\\\\\\\n  // const theme = useContext(ThemeContext)\\\\\\\\n  // const borderBottom = `1px solid ${theme?.colors?.grey['A800']}`\\\\\\\\n  // const customStyle = {\\\\\\\\n  //   control: (provided: any) => ({\\\\\\\\n  //     ...provided,\\\\\\\\n  //     borderStyle: 'none',\\\\\\\\n  //     borderBottom,\\\\\\\\n  //     borderRadius: '0px',\\\\\\\\n  //     boxShadow: 'none',\\\\\\\\n  //     borderColor: theme?.colors?.grey?.A800,\\\\\\\\n  //     '&:focus': {\\\\\\\\n  //       borderStyle: 'none',\\\\\\\\n  //       borderBottom,\\\\\\\\n  //       boxShadow: 'none',\\\\\\\\n  //       borderColor: theme?.colors?.grey?.A800\\\\\\\\n  //     },\\\\\\\\n  //     '&:hover': {\\\\\\\\n  //       borderStyle: 'none',\\\\\\\\n  //       borderBottom,\\\\\\\\n  //       boxShadow: 'none',\\\\\\\\n  //       borderColor: theme?.colors?.grey?.A800\\\\\\\\n  //     }\\\\\\\\n  //   }),\\\\\\\\n  //   option: (provided: any, state: any) => ({\\\\\\\\n  //     ...provided,\\\\\\\\n  //     backgroundColor: state?.isSelected\\\\\\\\n  //       ? theme?.colors?.primary?.main\\\\\\\\n  //       : theme?.colors?.white,\\\\\\\\n  //     '&:hover': {\\\\\\\\n  //       backgroundColor: state?.isSelected\\\\\\\\n  //         ? theme?.colors?.primary?.main\\\\\\\\n  //         : theme?.colors?.grey['50']\\\\\\\\n  //     }\\\\\\\\n  //   }),\\\\\\\\n\\\\\\\\n  //   menu: (provided: any, state: any) => ({\\\\\\\\n  //     ...provided,\\\\\\\\n  //     backgroundColor: state?.isSelected\\\\\\\\n  //       ? theme.colors.primary.main\\\\\\\\n  //       : theme?.colors?.white,\\\\\\\\n  //     borderRadius: '2px',\\\\\\\\n  //     '&:hover': {\\\\\\\\n  //       backgroundColor: state?.isSelected\\\\\\\\n  //         ? theme?.colors?.primary?.main\\\\\\\\n  //         : theme?.colors?.white\\\\\\\\n  //     },\\\\\\\\n  //     marginTop: '5px',\\\\\\\\n  //     marginLeft: '16px',\\\\\\\\n  //     width: '90%'\\\\\\\\n  //   }),\\\\\\\\n  //   menuList: (provided: any) => ({\\\\\\\\n  //     ...provided,\\\\\\\\n  //     marginTop: '0px'\\\\\\\\n  //   }),\\\\\\\\n  //   valueContainer: (provided: any) => ({\\\\\\\\n  //     ...provided,\\\\\\\\n  //     padding: '0px'\\\\\\\\n  //   })\\\\\\\\n  // }\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='2em' bgColor='grey.50'>\\\\\\\\n        <IconDropdown\\\\\\\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', ListViewOption)}\\\\\\\\n          width={text('width', '120px')}\\\\\\\\n          menuIsOpen={boolean('menuIsOpen', false)}\\\\\\\\n          primary={boolean('primary', false)}\\\\\\\\n          intent={text('intent', 'page') as tIntent}\\\\\\\\n          onChange={action('Value Changed')}\\\\\\\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n          value='available'\\\\\\\\n          optionComponent={({ selectedOption }: any) => {\\\\\\\\n            return (\\\\\\\\n              <div>\\\\\\\\n                <div>{selectedOption?.color}</div>\\\\\\\\n                <div>{selectedOption?.label}</div>\\\\\\\\n              </div>\\\\\\\\n            )\\\\\\\\n          }}\\\\\\\\n          // customStyle={customStyle}\\\\\\\\n        >\\\\\\\\n          {({\\\\\\\\n            selectedOption,\\\\\\\\n            menuIsOpen,\\\\\\\\n            setMenuIsOpen\\\\\\\\n          }: IUniversalDropdownChildren) => {\\\\\\\\n            return (\\\\\\\\n              <Button\\\\\\\\n                onClick={() => {\\\\\\\\n                  setMenuIsOpen(!menuIsOpen)\\\\\\\\n                  action('Universal open/closed')(menuIsOpen)\\\\\\\\n                }}\\\\\\\\n                color={text('color', 'white')}\\\\\\\\n                bgColor={text('bgColor', 'black')}\\\\\\\\n                fullWidth={boolean('fullWidth', false)}\\\\\\\\n              >\\\\\\\\n                {selectedOption?.label}\\\\\\\\n              </Button>\\\\\\\\n            )\\\\\\\\n          }}\\\\\\\\n        </IconDropdown>\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const TextFieldDropdown = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='2em' bgColor='grey.50'>\\\\\\\\n        <IconDropdown\\\\\\\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', ListViewOption)}\\\\\\\\n          width={text('width', '120px')}\\\\\\\\n          menuIsOpen={boolean('menuIsOpen', false)}\\\\\\\\n          primary={boolean('primary', false)}\\\\\\\\n          intent={text('intent', 'page') as tIntent}\\\\\\\\n          onChange={action('Value Changed')}\\\\\\\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n          value='available'\\\\\\\\n          optionComponent={({ selectedOption }: any) => {\\\\\\\\n            return (\\\\\\\\n              <div>\\\\\\\\n                <div>{selectedOption?.color}</div>\\\\\\\\n                <div>{selectedOption?.label}</div>\\\\\\\\n              </div>\\\\\\\\n            )\\\\\\\\n          }}\\\\\\\\n          // customStyle={customStyle}\\\\\\\\n        >\\\\\\\\n          {({\\\\\\\\n            selectedOption,\\\\\\\\n            menuIsOpen,\\\\\\\\n            setMenuIsOpen\\\\\\\\n          }: IUniversalDropdownChildren) => {\\\\\\\\n            return (\\\\\\\\n              <TextInput\\\\\\\\n                id='someId'\\\\\\\\n                name='someName'\\\\\\\\n                className='someClassName'\\\\\\\\n                label={text('label', 'Username')}\\\\\\\\n                labelColor={text('labelColor', 'text.inputLabel.default')}\\\\\\\\n                placeholder={text('placeholder', 'Enter text here...')}\\\\\\\\n                maxLength={number('maxLength', 10)}\\\\\\\\n                error={boolean('error', false)}\\\\\\\\n                errorMessage={text('errorMessage', '')}\\\\\\\\n                required={boolean('required', false)}\\\\\\\\n                fullWidth={boolean('fullWidth', false)}\\\\\\\\n                onChange={action('Triggered: onChange')}\\\\\\\\n                onClick={() => {\\\\\\\\n                  setMenuIsOpen(!menuIsOpen)\\\\\\\\n                  action('universal open/closed')(menuIsOpen)\\\\\\\\n                }}\\\\\\\\n                value={selectedOption?.value}\\\\\\\\n              />\\\\\\\\n            )\\\\\\\\n          }}\\\\\\\\n        </IconDropdown>\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\",\\\\\\\"locationsMap\\\\\\\":{}},},\\\\n  title: `${path}/IconDropdown`,\\\\n  decorators: [withKnobs],\\\\n  component: IconDropdown\\\\n}\\\\n\\\\nconst ListViewOption = [\\\\n  {\\\\n    value: 'available',\\\\n    label: 'Mark As Available',\\\\n    color: 'blue',\\\\n    tooltipText: 'Mark As Available',\\\\n    isDisabled: true\\\\n  },\\\\n  {\\\\n    value: 'unavailable',\\\\n    label: 'Mark As Unavailable',\\\\n    color: 'red',\\\\n    tooltipText: 'Mark As Unavailable'\\\\n  },\\\\n  {\\\\n    value: 'active',\\\\n    label: 'Mark As Active',\\\\n    color: 'purple',\\\\n    tooltipText: 'Mark As Active'\\\\n  },\\\\n  {\\\\n    value: 'inactive',\\\\n    label: 'Mark As Inactive',\\\\n    color: 'green',\\\\n    tooltipText: 'Mark As Inactive'\\\\n  }\\\\n]\\\\n\\\\nconst MultiLevelListViewOption = [\\\\n  {\\\\n    id: 'available',\\\\n    value: 'available',\\\\n    label: 'Mark As Available',\\\\n    color: 'blue',\\\\n    tooltipText: 'Mark As Available',\\\\n    options: [\\\\n      {\\\\n        id: 'available',\\\\n        value: 'available',\\\\n        label: 'Mark As Child Available',\\\\n        color: 'blue',\\\\n        tooltipText: 'Mark As Child Available'\\\\n      },\\\\n      {\\\\n        id: 'unavailable',\\\\n        value: 'unavailable',\\\\n        label: 'Mark As Child Unavailable',\\\\n        color: 'red',\\\\n        tooltipText: 'Mark As Child Unavailable'\\\\n      },\\\\n      {\\\\n        id: 'active',\\\\n        value: 'active',\\\\n        label: 'Mark As Child Active',\\\\n        color: 'purple',\\\\n        tooltipText: 'Mark As Child Active'\\\\n      },\\\\n      {\\\\n        id: 'inactive',\\\\n        value: 'inactive',\\\\n        label: 'Mark As Child Inactive',\\\\n        color: 'green',\\\\n        tooltipText: 'Mark As Child Inactive',\\\\n        options: [\\\\n          {\\\\n            id: 'available',\\\\n            value: 'available',\\\\n            label: 'Mark As Grand Child Available',\\\\n            color: 'blue',\\\\n            tooltipText: 'Mark As Grand Child Available'\\\\n          },\\\\n          {\\\\n            id: 'unavailable',\\\\n            value: 'unavailable',\\\\n            label: 'Mark As Grand Child Unavailable',\\\\n            color: 'red',\\\\n            tooltipText: 'Mark As Grand Child Unavailable'\\\\n          }\\\\n        ]\\\\n      }\\\\n    ]\\\\n  },\\\\n  {\\\\n    id: 'unavailable',\\\\n    value: 'unavailable',\\\\n    label: 'Mark As Unavailable',\\\\n    color: 'red',\\\\n    tooltipText: 'Mark As Unavailable'\\\\n  },\\\\n  {\\\\n    id: 'active',\\\\n    value: 'active',\\\\n    label: 'Mark As Active',\\\\n    color: 'purple',\\\\n    tooltipText: 'Mark As Active'\\\\n  },\\\\n  {\\\\n    id: 'inactive',\\\\n    value: 'inactive',\\\\n    label: 'Mark As Inactive',\\\\n    color: 'green',\\\\n    tooltipText: 'Mark As Inactive'\\\\n  }\\\\n]\\\\n\\\\nconst paginationOptions = [\\\\n  { value: '25', label: '25 per page', title: '25 per page' },\\\\n  { value: '50', label: '50 per page', title: '50 per page' },\\\\n  { value: '100', label: '100 per page', title: '100 per page' },\\\\n  { value: '200', label: '200 per page', title: '200 per page' }\\\\n]\\\\n\\\\nconst columnOption = [\\\\n  { value: 'ascending', label: 'Sort Ascending', iconVariant: 'hide-menu-box' },\\\\n  {\\\\n    value: 'descending',\\\\n    label: 'Sort Descending',\\\\n    iconVariant: 'hub-location'\\\\n  },\\\\n  { value: 'hideColumn', label: 'Hide Column', iconVariant: 'close' },\\\\n  { value: 'pinLeft', label: 'Pin Left', iconVariant: 'angle-left' },\\\\n  { value: 'pinright', label: 'Pin Right', iconVariant: 'angle-right-thin' }\\\\n]\\\\n\\\\nconst options = [\\\\n  {\\\\n    value: 'emailVerificationPending',\\\\n    label: 'Email Verification Pending Shipper'\\\\n  },\\\\n  { value: 'allShippers', label: 'All Shippers' },\\\\n  { value: 'approvalPendingShippers', label: 'Approval Pending Shippers' }\\\\n]\\\\n\\\\nconst datePickerOptions = [\\\\n  { value: 'January', label: 'January' },\\\\n  { value: 'February', label: 'February' },\\\\n  { value: 'March', label: 'March' },\\\\n  { value: 'April', label: 'April' },\\\\n  { value: 'May', label: 'May' },\\\\n  { value: 'June', label: 'June' },\\\\n  { value: 'July', label: 'July' },\\\\n  { value: 'August', label: 'August' },\\\\n  { value: 'September', label: 'September' },\\\\n  { value: 'October', label: 'October' },\\\\n  { value: 'November', label: 'November' },\\\\n  { value: 'December', label: 'December' }\\\\n]\\\\n\\\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\\\nexport const ButtonDropdown = addSourceDecorator(() => (\\\\n  <ThemeWrapper>\\\\n    <Box p='2em' bgColor='grey.50'>\\\\n      <IconDropdown\\\\n        variant={text('varaint', 'button-dropdown') as tSelectVariant}\\\\n        optionList={object('optionList', ListViewOption)}\\\\n        width={text('width', '120px')}\\\\n        menuIsOpen={boolean('menuIsOpen', false)}\\\\n        iconButtonDetails={array('iconList', [\\\\n          'hide-menu-box',\\\\n          'More',\\\\n          'angle-down'\\\\n        ])}\\\\n        primary={boolean('primary', false)}\\\\n        intent={text('intent', 'page') as tIntent}\\\\n        onChange={action('Value Changed')}\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n        disabled={boolean('disabled', false)}\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\n        tooltipProps={{\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\n        }}\\\\n      />\\\\n    </Box>\\\\n  </ThemeWrapper>\\\\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\\\nexport const TextDropdown = addSourceDecorator(() => (\\\\n  <ThemeWrapper>\\\\n    <Box p='2em' bgColor='grey.50'>\\\\n      <IconDropdown\\\\n        variant={text('varaint', 'text-dropdown') as tSelectVariant}\\\\n        optionList={object('optionList', ListViewOption)}\\\\n        width={text('width', '120px')}\\\\n        menuIsOpen={boolean('menuIsOpen', false)}\\\\n        iconButtonDetails={array('iconList', [\\\\n          'hide-menu-box',\\\\n          'More',\\\\n          'angle-down'\\\\n        ])}\\\\n        primary={boolean('primary', false)}\\\\n        intent={text('intent', 'page') as tIntent}\\\\n        onChange={action('Value Changed')}\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n        disabled={boolean('disabled', false)}\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\n        tooltipProps={{\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\n        }}\\\\n      />\\\\n    </Box>\\\\n  </ThemeWrapper>\\\\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const MultiLevelBreadCrumb = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <IconDropdown\\\\n          variant={text('variant', 'multilevel-breadcrumb') as tSelectVariant}\\\\n          optionList={object('optionList', MultiLevelListViewOption)}\\\\n          onChange={action('Value selected')}\\\\n          value={text('value', 'strawberry')}\\\\n          width={text('width', '260px')}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n  }, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const MultiLevelButtonDropdown = addSourceDecorator(() => (\\\\n  <ThemeWrapper>\\\\n    <Box p='2em' bgColor='grey.50'>\\\\n      <IconDropdown\\\\n        variant={\\\\n          text('varaint', 'multilevel-button-dropdown') as tSelectVariant\\\\n        }\\\\n        optionList={object('optionList', MultiLevelListViewOption)}\\\\n        width={text('width', '120px')}\\\\n        menuIsOpen\\\\n        iconButtonDetails={array('iconList', [\\\\n          'hide-menu-box',\\\\n          'More',\\\\n          'angle-down'\\\\n        ])}\\\\n        defaultOpen='right'\\\\n        primary={boolean('primary', false)}\\\\n        intent={text('intent', 'page') as tIntent}\\\\n        handleClick={(id: any) => console.log('clicked from storybook', id)}\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n        disabled={boolean('disabled', false)}\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\n        tooltipProps={{\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\n        }}\\\\n      />\\\\n    </Box>\\\\n  </ThemeWrapper>\\\\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const PaginationDropdown = addSourceDecorator(() => (\\\\n  <ThemeWrapper>\\\\n    <CardComponent style={{ height: '300px' }}>\\\\n      <IconDropdown\\\\n        variant={text('variant', 'pagination-size') as tSelectVariant}\\\\n        optionList={object('optionList', paginationOptions)}\\\\n        onChange={action('Value selected')}\\\\n        value={text('value', '50')}\\\\n        width={text('width', '120px')}\\\\n      />\\\\n    </CardComponent>\\\\n  </ThemeWrapper>\\\\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const columnOptionComponent = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <div style={{ width: '200px', margin: 'auto' }}>\\\\n          <IconDropdown\\\\n            variant={text('variant', 'column-filter') as tSelectVariant}\\\\n            optionList={object('optionList', columnOption)}\\\\n            onChange={action('Value selected')}\\\\n            width={text('width', '10px')}\\\\n            isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n          />\\\\n        </div>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const BreadCrumbComponent = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <IconDropdown\\\\n          variant={text('variant', 'bread-crumb') as tSelectVariant}\\\\n          optionList={object('optionList', options)}\\\\n          onChange={action('Value selected')}\\\\n          value={text('value', 'strawberry')}\\\\n          width={text('width', '260px')}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const DatePickerDropDown = addSourceDecorator(() => (\\\\n  <ThemeWrapper>\\\\n    <CardComponent style={{ height: '200px' }}>\\\\n      <IconDropdown\\\\n        variant={text('variant', 'date-picker') as tSelectVariant}\\\\n        optionList={object('optionList', datePickerOptions)}\\\\n        onChange={action('Value selected')}\\\\n        value={text('value', '50')}\\\\n        width={text('width', '80px')}\\\\n        showDownArrow={boolean('Show Down Arrow', true)}\\\\n        isMultiRegionStyled={boolean('Is Multi Region Styled', false)}\\\\n      />\\\\n    </CardComponent>\\\\n  </ThemeWrapper>\\\\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\nconst arrayMap = [\\\\n  { variant: 'column-filter', name: 'column-filter0' },\\\\n  { variant: 'column-filter', name: 'column-filter1' },\\\\n  { variant: 'column-filter', name: 'column-filter2' }\\\\n]\\\\n\\\\nexport const columnOptionList = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <div style={{ width: '200px', margin: 'auto' }}>\\\\n          {arrayMap.map((obj: any, index: number) => {\\\\n            return (\\\\n              <IconDropdown\\\\n                variant={text('variant', obj?.variant) as tSelectVariant}\\\\n                optionList={object('optionList', columnOption)}\\\\n                onChange={action('Value selected')}\\\\n                width={text('width', '10px')}\\\\n                isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n                key={index}\\\\n              />\\\\n            )\\\\n          })}\\\\n        </div>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const DropdownUniversal = addSourceDecorator(() => {\\\\n  // reference to style\\\\n  // const theme = useContext(ThemeContext)\\\\n  // const borderBottom = `1px solid ${theme?.colors?.grey['A800']}`\\\\n  // const customStyle = {\\\\n  //   control: (provided: any) => ({\\\\n  //     ...provided,\\\\n  //     borderStyle: 'none',\\\\n  //     borderBottom,\\\\n  //     borderRadius: '0px',\\\\n  //     boxShadow: 'none',\\\\n  //     borderColor: theme?.colors?.grey?.A800,\\\\n  //     '&:focus': {\\\\n  //       borderStyle: 'none',\\\\n  //       borderBottom,\\\\n  //       boxShadow: 'none',\\\\n  //       borderColor: theme?.colors?.grey?.A800\\\\n  //     },\\\\n  //     '&:hover': {\\\\n  //       borderStyle: 'none',\\\\n  //       borderBottom,\\\\n  //       boxShadow: 'none',\\\\n  //       borderColor: theme?.colors?.grey?.A800\\\\n  //     }\\\\n  //   }),\\\\n  //   option: (provided: any, state: any) => ({\\\\n  //     ...provided,\\\\n  //     backgroundColor: state?.isSelected\\\\n  //       ? theme?.colors?.primary?.main\\\\n  //       : theme?.colors?.white,\\\\n  //     '&:hover': {\\\\n  //       backgroundColor: state?.isSelected\\\\n  //         ? theme?.colors?.primary?.main\\\\n  //         : theme?.colors?.grey['50']\\\\n  //     }\\\\n  //   }),\\\\n\\\\n  //   menu: (provided: any, state: any) => ({\\\\n  //     ...provided,\\\\n  //     backgroundColor: state?.isSelected\\\\n  //       ? theme.colors.primary.main\\\\n  //       : theme?.colors?.white,\\\\n  //     borderRadius: '2px',\\\\n  //     '&:hover': {\\\\n  //       backgroundColor: state?.isSelected\\\\n  //         ? theme?.colors?.primary?.main\\\\n  //         : theme?.colors?.white\\\\n  //     },\\\\n  //     marginTop: '5px',\\\\n  //     marginLeft: '16px',\\\\n  //     width: '90%'\\\\n  //   }),\\\\n  //   menuList: (provided: any) => ({\\\\n  //     ...provided,\\\\n  //     marginTop: '0px'\\\\n  //   }),\\\\n  //   valueContainer: (provided: any) => ({\\\\n  //     ...provided,\\\\n  //     padding: '0px'\\\\n  //   })\\\\n  // }\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <IconDropdown\\\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          width={text('width', '120px')}\\\\n          menuIsOpen={boolean('menuIsOpen', false)}\\\\n          primary={boolean('primary', false)}\\\\n          intent={text('intent', 'page') as tIntent}\\\\n          onChange={action('Value Changed')}\\\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n          disabled={boolean('disabled', false)}\\\\n          value='available'\\\\n          optionComponent={({ selectedOption }: any) => {\\\\n            return (\\\\n              <div>\\\\n                <div>{selectedOption?.color}</div>\\\\n                <div>{selectedOption?.label}</div>\\\\n              </div>\\\\n            )\\\\n          }}\\\\n          // customStyle={customStyle}\\\\n        >\\\\n          {({\\\\n            selectedOption,\\\\n            menuIsOpen,\\\\n            setMenuIsOpen\\\\n          }: IUniversalDropdownChildren) => {\\\\n            return (\\\\n              <Button\\\\n                onClick={() => {\\\\n                  setMenuIsOpen(!menuIsOpen)\\\\n                  action('Universal open/closed')(menuIsOpen)\\\\n                }}\\\\n                color={text('color', 'white')}\\\\n                bgColor={text('bgColor', 'black')}\\\\n                fullWidth={boolean('fullWidth', false)}\\\\n              >\\\\n                {selectedOption?.label}\\\\n              </Button>\\\\n            )\\\\n          }}\\\\n        </IconDropdown>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const TextFieldDropdown = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <IconDropdown\\\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          width={text('width', '120px')}\\\\n          menuIsOpen={boolean('menuIsOpen', false)}\\\\n          primary={boolean('primary', false)}\\\\n          intent={text('intent', 'page') as tIntent}\\\\n          onChange={action('Value Changed')}\\\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n          disabled={boolean('disabled', false)}\\\\n          value='available'\\\\n          optionComponent={({ selectedOption }: any) => {\\\\n            return (\\\\n              <div>\\\\n                <div>{selectedOption?.color}</div>\\\\n                <div>{selectedOption?.label}</div>\\\\n              </div>\\\\n            )\\\\n          }}\\\\n          // customStyle={customStyle}\\\\n        >\\\\n          {({\\\\n            selectedOption,\\\\n            menuIsOpen,\\\\n            setMenuIsOpen\\\\n          }: IUniversalDropdownChildren) => {\\\\n            return (\\\\n              <TextInput\\\\n                id='someId'\\\\n                name='someName'\\\\n                className='someClassName'\\\\n                label={text('label', 'Username')}\\\\n                labelColor={text('labelColor', 'text.inputLabel.default')}\\\\n                placeholder={text('placeholder', 'Enter text here...')}\\\\n                maxLength={number('maxLength', 10)}\\\\n                error={boolean('error', false)}\\\\n                errorMessage={text('errorMessage', '')}\\\\n                required={boolean('required', false)}\\\\n                fullWidth={boolean('fullWidth', false)}\\\\n                onChange={action('Triggered: onChange')}\\\\n                onClick={() => {\\\\n                  setMenuIsOpen(!menuIsOpen)\\\\n                  action('universal open/closed')(menuIsOpen)\\\\n                }}\\\\n                value={selectedOption?.value}\\\\n              />\\\\n            )\\\\n          }}\\\\n        </IconDropdown>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\",\\\"locationsMap\\\":{}},\\\"storySource\\\":{\\\"source\\\":\\\"import { action } from '@storybook/addon-actions'\\\\nimport {\\\\n  array,\\\\n  boolean,\\\\n  number,\\\\n  object,\\\\n  text,\\\\n  withKnobs\\\\n} from '@storybook/addon-knobs'\\\\nimport React from 'react'\\\\nimport IconDropdown from '.'\\\\nimport { path } from '..'\\\\nimport { Box } from '../../..'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport Button, { tIntent } from '../../atoms/Button'\\\\nimport CardComponent from '../../atoms/Card'\\\\nimport { tPlacement } from '../../../utilities/types'\\\\nimport {\\\\n  IUniversalDropdownChildren,\\\\n  tSelectVariant\\\\n} from '../DropDown/interface'\\\\nimport TextInput from '../TextInput'\\\\n\\\\nexport default {\\\\n  title: `${path}/IconDropdown`,\\\\n  decorators: [withKnobs],\\\\n  component: IconDropdown\\\\n}\\\\n\\\\nconst ListViewOption = [\\\\n  {\\\\n    value: 'available',\\\\n    label: 'Mark As Available',\\\\n    color: 'blue',\\\\n    tooltipText: 'Mark As Available',\\\\n    isDisabled: true\\\\n  },\\\\n  {\\\\n    value: 'unavailable',\\\\n    label: 'Mark As Unavailable',\\\\n    color: 'red',\\\\n    tooltipText: 'Mark As Unavailable'\\\\n  },\\\\n  {\\\\n    value: 'active',\\\\n    label: 'Mark As Active',\\\\n    color: 'purple',\\\\n    tooltipText: 'Mark As Active'\\\\n  },\\\\n  {\\\\n    value: 'inactive',\\\\n    label: 'Mark As Inactive',\\\\n    color: 'green',\\\\n    tooltipText: 'Mark As Inactive'\\\\n  }\\\\n]\\\\n\\\\nconst MultiLevelListViewOption = [\\\\n  {\\\\n    id: 'available',\\\\n    value: 'available',\\\\n    label: 'Mark As Available',\\\\n    color: 'blue',\\\\n    tooltipText: 'Mark As Available',\\\\n    options: [\\\\n      {\\\\n        id: 'available',\\\\n        value: 'available',\\\\n        label: 'Mark As Child Available',\\\\n        color: 'blue',\\\\n        tooltipText: 'Mark As Child Available'\\\\n      },\\\\n      {\\\\n        id: 'unavailable',\\\\n        value: 'unavailable',\\\\n        label: 'Mark As Child Unavailable',\\\\n        color: 'red',\\\\n        tooltipText: 'Mark As Child Unavailable'\\\\n      },\\\\n      {\\\\n        id: 'active',\\\\n        value: 'active',\\\\n        label: 'Mark As Child Active',\\\\n        color: 'purple',\\\\n        tooltipText: 'Mark As Child Active'\\\\n      },\\\\n      {\\\\n        id: 'inactive',\\\\n        value: 'inactive',\\\\n        label: 'Mark As Child Inactive',\\\\n        color: 'green',\\\\n        tooltipText: 'Mark As Child Inactive',\\\\n        options: [\\\\n          {\\\\n            id: 'available',\\\\n            value: 'available',\\\\n            label: 'Mark As Grand Child Available',\\\\n            color: 'blue',\\\\n            tooltipText: 'Mark As Grand Child Available'\\\\n          },\\\\n          {\\\\n            id: 'unavailable',\\\\n            value: 'unavailable',\\\\n            label: 'Mark As Grand Child Unavailable',\\\\n            color: 'red',\\\\n            tooltipText: 'Mark As Grand Child Unavailable'\\\\n          }\\\\n        ]\\\\n      }\\\\n    ]\\\\n  },\\\\n  {\\\\n    id: 'unavailable',\\\\n    value: 'unavailable',\\\\n    label: 'Mark As Unavailable',\\\\n    color: 'red',\\\\n    tooltipText: 'Mark As Unavailable'\\\\n  },\\\\n  {\\\\n    id: 'active',\\\\n    value: 'active',\\\\n    label: 'Mark As Active',\\\\n    color: 'purple',\\\\n    tooltipText: 'Mark As Active'\\\\n  },\\\\n  {\\\\n    id: 'inactive',\\\\n    value: 'inactive',\\\\n    label: 'Mark As Inactive',\\\\n    color: 'green',\\\\n    tooltipText: 'Mark As Inactive'\\\\n  }\\\\n]\\\\n\\\\nconst paginationOptions = [\\\\n  { value: '25', label: '25 per page', title: '25 per page' },\\\\n  { value: '50', label: '50 per page', title: '50 per page' },\\\\n  { value: '100', label: '100 per page', title: '100 per page' },\\\\n  { value: '200', label: '200 per page', title: '200 per page' }\\\\n]\\\\n\\\\nconst columnOption = [\\\\n  { value: 'ascending', label: 'Sort Ascending', iconVariant: 'hide-menu-box' },\\\\n  {\\\\n    value: 'descending',\\\\n    label: 'Sort Descending',\\\\n    iconVariant: 'hub-location'\\\\n  },\\\\n  { value: 'hideColumn', label: 'Hide Column', iconVariant: 'close' },\\\\n  { value: 'pinLeft', label: 'Pin Left', iconVariant: 'angle-left' },\\\\n  { value: 'pinright', label: 'Pin Right', iconVariant: 'angle-right-thin' }\\\\n]\\\\n\\\\nconst options = [\\\\n  {\\\\n    value: 'emailVerificationPending',\\\\n    label: 'Email Verification Pending Shipper'\\\\n  },\\\\n  { value: 'allShippers', label: 'All Shippers' },\\\\n  { value: 'approvalPendingShippers', label: 'Approval Pending Shippers' }\\\\n]\\\\n\\\\nconst datePickerOptions = [\\\\n  { value: 'January', label: 'January' },\\\\n  { value: 'February', label: 'February' },\\\\n  { value: 'March', label: 'March' },\\\\n  { value: 'April', label: 'April' },\\\\n  { value: 'May', label: 'May' },\\\\n  { value: 'June', label: 'June' },\\\\n  { value: 'July', label: 'July' },\\\\n  { value: 'August', label: 'August' },\\\\n  { value: 'September', label: 'September' },\\\\n  { value: 'October', label: 'October' },\\\\n  { value: 'November', label: 'November' },\\\\n  { value: 'December', label: 'December' }\\\\n]\\\\n\\\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\\\nexport const ButtonDropdown = () => (\\\\n  <ThemeWrapper>\\\\n    <Box p='2em' bgColor='grey.50'>\\\\n      <IconDropdown\\\\n        variant={text('varaint', 'button-dropdown') as tSelectVariant}\\\\n        optionList={object('optionList', ListViewOption)}\\\\n        width={text('width', '120px')}\\\\n        menuIsOpen={boolean('menuIsOpen', false)}\\\\n        iconButtonDetails={array('iconList', [\\\\n          'hide-menu-box',\\\\n          'More',\\\\n          'angle-down'\\\\n        ])}\\\\n        primary={boolean('primary', false)}\\\\n        intent={text('intent', 'page') as tIntent}\\\\n        onChange={action('Value Changed')}\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n        disabled={boolean('disabled', false)}\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\n        tooltipProps={{\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\n        }}\\\\n      />\\\\n    </Box>\\\\n  </ThemeWrapper>\\\\n)\\\\n\\\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\\\nexport const TextDropdown = () => (\\\\n  <ThemeWrapper>\\\\n    <Box p='2em' bgColor='grey.50'>\\\\n      <IconDropdown\\\\n        variant={text('varaint', 'text-dropdown') as tSelectVariant}\\\\n        optionList={object('optionList', ListViewOption)}\\\\n        width={text('width', '120px')}\\\\n        menuIsOpen={boolean('menuIsOpen', false)}\\\\n        iconButtonDetails={array('iconList', [\\\\n          'hide-menu-box',\\\\n          'More',\\\\n          'angle-down'\\\\n        ])}\\\\n        primary={boolean('primary', false)}\\\\n        intent={text('intent', 'page') as tIntent}\\\\n        onChange={action('Value Changed')}\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n        disabled={boolean('disabled', false)}\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\n        tooltipProps={{\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\n        }}\\\\n      />\\\\n    </Box>\\\\n  </ThemeWrapper>\\\\n)\\\\n\\\\nexport const MultiLevelBreadCrumb = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <IconDropdown\\\\n          variant={text('variant', 'multilevel-breadcrumb') as tSelectVariant}\\\\n          optionList={object('optionList', MultiLevelListViewOption)}\\\\n          onChange={action('Value selected')}\\\\n          value={text('value', 'strawberry')}\\\\n          width={text('width', '260px')}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n  }\\\\n\\\\nexport const MultiLevelButtonDropdown = () => (\\\\n  <ThemeWrapper>\\\\n    <Box p='2em' bgColor='grey.50'>\\\\n      <IconDropdown\\\\n        variant={\\\\n          text('varaint', 'multilevel-button-dropdown') as tSelectVariant\\\\n        }\\\\n        optionList={object('optionList', MultiLevelListViewOption)}\\\\n        width={text('width', '120px')}\\\\n        menuIsOpen\\\\n        iconButtonDetails={array('iconList', [\\\\n          'hide-menu-box',\\\\n          'More',\\\\n          'angle-down'\\\\n        ])}\\\\n        defaultOpen='right'\\\\n        primary={boolean('primary', false)}\\\\n        intent={text('intent', 'page') as tIntent}\\\\n        handleClick={(id: any) => console.log('clicked from storybook', id)}\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n        disabled={boolean('disabled', false)}\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\n        tooltipProps={{\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\n        }}\\\\n      />\\\\n    </Box>\\\\n  </ThemeWrapper>\\\\n)\\\\n\\\\nexport const PaginationDropdown = () => (\\\\n  <ThemeWrapper>\\\\n    <CardComponent style={{ height: '300px' }}>\\\\n      <IconDropdown\\\\n        variant={text('variant', 'pagination-size') as tSelectVariant}\\\\n        optionList={object('optionList', paginationOptions)}\\\\n        onChange={action('Value selected')}\\\\n        value={text('value', '50')}\\\\n        width={text('width', '120px')}\\\\n      />\\\\n    </CardComponent>\\\\n  </ThemeWrapper>\\\\n)\\\\n\\\\nexport const columnOptionComponent = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <div style={{ width: '200px', margin: 'auto' }}>\\\\n          <IconDropdown\\\\n            variant={text('variant', 'column-filter') as tSelectVariant}\\\\n            optionList={object('optionList', columnOption)}\\\\n            onChange={action('Value selected')}\\\\n            width={text('width', '10px')}\\\\n            isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n          />\\\\n        </div>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const BreadCrumbComponent = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <IconDropdown\\\\n          variant={text('variant', 'bread-crumb') as tSelectVariant}\\\\n          optionList={object('optionList', options)}\\\\n          onChange={action('Value selected')}\\\\n          value={text('value', 'strawberry')}\\\\n          width={text('width', '260px')}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const DatePickerDropDown = () => (\\\\n  <ThemeWrapper>\\\\n    <CardComponent style={{ height: '200px' }}>\\\\n      <IconDropdown\\\\n        variant={text('variant', 'date-picker') as tSelectVariant}\\\\n        optionList={object('optionList', datePickerOptions)}\\\\n        onChange={action('Value selected')}\\\\n        value={text('value', '50')}\\\\n        width={text('width', '80px')}\\\\n        showDownArrow={boolean('Show Down Arrow', true)}\\\\n        isMultiRegionStyled={boolean('Is Multi Region Styled', false)}\\\\n      />\\\\n    </CardComponent>\\\\n  </ThemeWrapper>\\\\n)\\\\nconst arrayMap = [\\\\n  { variant: 'column-filter', name: 'column-filter0' },\\\\n  { variant: 'column-filter', name: 'column-filter1' },\\\\n  { variant: 'column-filter', name: 'column-filter2' }\\\\n]\\\\n\\\\nexport const columnOptionList = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <div style={{ width: '200px', margin: 'auto' }}>\\\\n          {arrayMap.map((obj: any, index: number) => {\\\\n            return (\\\\n              <IconDropdown\\\\n                variant={text('variant', obj?.variant) as tSelectVariant}\\\\n                optionList={object('optionList', columnOption)}\\\\n                onChange={action('Value selected')}\\\\n                width={text('width', '10px')}\\\\n                isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n                key={index}\\\\n              />\\\\n            )\\\\n          })}\\\\n        </div>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const DropdownUniversal = () => {\\\\n  // reference to style\\\\n  // const theme = useContext(ThemeContext)\\\\n  // const borderBottom = `1px solid ${theme?.colors?.grey['A800']}`\\\\n  // const customStyle = {\\\\n  //   control: (provided: any) => ({\\\\n  //     ...provided,\\\\n  //     borderStyle: 'none',\\\\n  //     borderBottom,\\\\n  //     borderRadius: '0px',\\\\n  //     boxShadow: 'none',\\\\n  //     borderColor: theme?.colors?.grey?.A800,\\\\n  //     '&:focus': {\\\\n  //       borderStyle: 'none',\\\\n  //       borderBottom,\\\\n  //       boxShadow: 'none',\\\\n  //       borderColor: theme?.colors?.grey?.A800\\\\n  //     },\\\\n  //     '&:hover': {\\\\n  //       borderStyle: 'none',\\\\n  //       borderBottom,\\\\n  //       boxShadow: 'none',\\\\n  //       borderColor: theme?.colors?.grey?.A800\\\\n  //     }\\\\n  //   }),\\\\n  //   option: (provided: any, state: any) => ({\\\\n  //     ...provided,\\\\n  //     backgroundColor: state?.isSelected\\\\n  //       ? theme?.colors?.primary?.main\\\\n  //       : theme?.colors?.white,\\\\n  //     '&:hover': {\\\\n  //       backgroundColor: state?.isSelected\\\\n  //         ? theme?.colors?.primary?.main\\\\n  //         : theme?.colors?.grey['50']\\\\n  //     }\\\\n  //   }),\\\\n\\\\n  //   menu: (provided: any, state: any) => ({\\\\n  //     ...provided,\\\\n  //     backgroundColor: state?.isSelected\\\\n  //       ? theme.colors.primary.main\\\\n  //       : theme?.colors?.white,\\\\n  //     borderRadius: '2px',\\\\n  //     '&:hover': {\\\\n  //       backgroundColor: state?.isSelected\\\\n  //         ? theme?.colors?.primary?.main\\\\n  //         : theme?.colors?.white\\\\n  //     },\\\\n  //     marginTop: '5px',\\\\n  //     marginLeft: '16px',\\\\n  //     width: '90%'\\\\n  //   }),\\\\n  //   menuList: (provided: any) => ({\\\\n  //     ...provided,\\\\n  //     marginTop: '0px'\\\\n  //   }),\\\\n  //   valueContainer: (provided: any) => ({\\\\n  //     ...provided,\\\\n  //     padding: '0px'\\\\n  //   })\\\\n  // }\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <IconDropdown\\\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          width={text('width', '120px')}\\\\n          menuIsOpen={boolean('menuIsOpen', false)}\\\\n          primary={boolean('primary', false)}\\\\n          intent={text('intent', 'page') as tIntent}\\\\n          onChange={action('Value Changed')}\\\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n          disabled={boolean('disabled', false)}\\\\n          value='available'\\\\n          optionComponent={({ selectedOption }: any) => {\\\\n            return (\\\\n              <div>\\\\n                <div>{selectedOption?.color}</div>\\\\n                <div>{selectedOption?.label}</div>\\\\n              </div>\\\\n            )\\\\n          }}\\\\n          // customStyle={customStyle}\\\\n        >\\\\n          {({\\\\n            selectedOption,\\\\n            menuIsOpen,\\\\n            setMenuIsOpen\\\\n          }: IUniversalDropdownChildren) => {\\\\n            return (\\\\n              <Button\\\\n                onClick={() => {\\\\n                  setMenuIsOpen(!menuIsOpen)\\\\n                  action('Universal open/closed')(menuIsOpen)\\\\n                }}\\\\n                color={text('color', 'white')}\\\\n                bgColor={text('bgColor', 'black')}\\\\n                fullWidth={boolean('fullWidth', false)}\\\\n              >\\\\n                {selectedOption?.label}\\\\n              </Button>\\\\n            )\\\\n          }}\\\\n        </IconDropdown>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const TextFieldDropdown = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <IconDropdown\\\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          width={text('width', '120px')}\\\\n          menuIsOpen={boolean('menuIsOpen', false)}\\\\n          primary={boolean('primary', false)}\\\\n          intent={text('intent', 'page') as tIntent}\\\\n          onChange={action('Value Changed')}\\\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n          disabled={boolean('disabled', false)}\\\\n          value='available'\\\\n          optionComponent={({ selectedOption }: any) => {\\\\n            return (\\\\n              <div>\\\\n                <div>{selectedOption?.color}</div>\\\\n                <div>{selectedOption?.label}</div>\\\\n              </div>\\\\n            )\\\\n          }}\\\\n          // customStyle={customStyle}\\\\n        >\\\\n          {({\\\\n            selectedOption,\\\\n            menuIsOpen,\\\\n            setMenuIsOpen\\\\n          }: IUniversalDropdownChildren) => {\\\\n            return (\\\\n              <TextInput\\\\n                id='someId'\\\\n                name='someName'\\\\n                className='someClassName'\\\\n                label={text('label', 'Username')}\\\\n                labelColor={text('labelColor', 'text.inputLabel.default')}\\\\n                placeholder={text('placeholder', 'Enter text here...')}\\\\n                maxLength={number('maxLength', 10)}\\\\n                error={boolean('error', false)}\\\\n                errorMessage={text('errorMessage', '')}\\\\n                required={boolean('required', false)}\\\\n                fullWidth={boolean('fullWidth', false)}\\\\n                onChange={action('Triggered: onChange')}\\\\n                onClick={() => {\\\\n                  setMenuIsOpen(!menuIsOpen)\\\\n                  action('universal open/closed')(menuIsOpen)\\\\n                }}\\\\n                value={selectedOption?.value}\\\\n              />\\\\n            )\\\\n          }}\\\\n        </IconDropdown>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\",\\\"locationsMap\\\":{}},},\\n  title: `${path}/IconDropdown`,\\n  decorators: [withKnobs],\\n  component: IconDropdown\\n}\\n\\nconst ListViewOption = [\\n  {\\n    value: 'available',\\n    label: 'Mark As Available',\\n    color: 'blue',\\n    tooltipText: 'Mark As Available',\\n    isDisabled: true\\n  },\\n  {\\n    value: 'unavailable',\\n    label: 'Mark As Unavailable',\\n    color: 'red',\\n    tooltipText: 'Mark As Unavailable'\\n  },\\n  {\\n    value: 'active',\\n    label: 'Mark As Active',\\n    color: 'purple',\\n    tooltipText: 'Mark As Active'\\n  },\\n  {\\n    value: 'inactive',\\n    label: 'Mark As Inactive',\\n    color: 'green',\\n    tooltipText: 'Mark As Inactive'\\n  }\\n]\\n\\nconst MultiLevelListViewOption = [\\n  {\\n    id: 'available',\\n    value: 'available',\\n    label: 'Mark As Available',\\n    color: 'blue',\\n    tooltipText: 'Mark As Available',\\n    options: [\\n      {\\n        id: 'available',\\n        value: 'available',\\n        label: 'Mark As Child Available',\\n        color: 'blue',\\n        tooltipText: 'Mark As Child Available'\\n      },\\n      {\\n        id: 'unavailable',\\n        value: 'unavailable',\\n        label: 'Mark As Child Unavailable',\\n        color: 'red',\\n        tooltipText: 'Mark As Child Unavailable'\\n      },\\n      {\\n        id: 'active',\\n        value: 'active',\\n        label: 'Mark As Child Active',\\n        color: 'purple',\\n        tooltipText: 'Mark As Child Active'\\n      },\\n      {\\n        id: 'inactive',\\n        value: 'inactive',\\n        label: 'Mark As Child Inactive',\\n        color: 'green',\\n        tooltipText: 'Mark As Child Inactive',\\n        options: [\\n          {\\n            id: 'available',\\n            value: 'available',\\n            label: 'Mark As Grand Child Available',\\n            color: 'blue',\\n            tooltipText: 'Mark As Grand Child Available'\\n          },\\n          {\\n            id: 'unavailable',\\n            value: 'unavailable',\\n            label: 'Mark As Grand Child Unavailable',\\n            color: 'red',\\n            tooltipText: 'Mark As Grand Child Unavailable'\\n          }\\n        ]\\n      }\\n    ]\\n  },\\n  {\\n    id: 'unavailable',\\n    value: 'unavailable',\\n    label: 'Mark As Unavailable',\\n    color: 'red',\\n    tooltipText: 'Mark As Unavailable'\\n  },\\n  {\\n    id: 'active',\\n    value: 'active',\\n    label: 'Mark As Active',\\n    color: 'purple',\\n    tooltipText: 'Mark As Active'\\n  },\\n  {\\n    id: 'inactive',\\n    value: 'inactive',\\n    label: 'Mark As Inactive',\\n    color: 'green',\\n    tooltipText: 'Mark As Inactive'\\n  }\\n]\\n\\nconst paginationOptions = [\\n  { value: '25', label: '25 per page', title: '25 per page' },\\n  { value: '50', label: '50 per page', title: '50 per page' },\\n  { value: '100', label: '100 per page', title: '100 per page' },\\n  { value: '200', label: '200 per page', title: '200 per page' }\\n]\\n\\nconst columnOption = [\\n  { value: 'ascending', label: 'Sort Ascending', iconVariant: 'hide-menu-box' },\\n  {\\n    value: 'descending',\\n    label: 'Sort Descending',\\n    iconVariant: 'hub-location'\\n  },\\n  { value: 'hideColumn', label: 'Hide Column', iconVariant: 'close' },\\n  { value: 'pinLeft', label: 'Pin Left', iconVariant: 'angle-left' },\\n  { value: 'pinright', label: 'Pin Right', iconVariant: 'angle-right-thin' }\\n]\\n\\nconst options = [\\n  {\\n    value: 'emailVerificationPending',\\n    label: 'Email Verification Pending Shipper'\\n  },\\n  { value: 'allShippers', label: 'All Shippers' },\\n  { value: 'approvalPendingShippers', label: 'Approval Pending Shippers' }\\n]\\n\\nconst datePickerOptions = [\\n  { value: 'January', label: 'January' },\\n  { value: 'February', label: 'February' },\\n  { value: 'March', label: 'March' },\\n  { value: 'April', label: 'April' },\\n  { value: 'May', label: 'May' },\\n  { value: 'June', label: 'June' },\\n  { value: 'July', label: 'July' },\\n  { value: 'August', label: 'August' },\\n  { value: 'September', label: 'September' },\\n  { value: 'October', label: 'October' },\\n  { value: 'November', label: 'November' },\\n  { value: 'December', label: 'December' }\\n]\\n\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\nexport const ButtonDropdown = addSourceDecorator(addSourceDecorator(() => (\\n  <ThemeWrapper>\\n    <Box p='2em' bgColor='grey.50'>\\n      <IconDropdown\\n        variant={text('varaint', 'button-dropdown') as tSelectVariant}\\n        optionList={object('optionList', ListViewOption)}\\n        width={text('width', '120px')}\\n        menuIsOpen={boolean('menuIsOpen', false)}\\n        iconButtonDetails={array('iconList', [\\n          'hide-menu-box',\\n          'More',\\n          'angle-down'\\n        ])}\\n        primary={boolean('primary', false)}\\n        intent={text('intent', 'page') as tIntent}\\n        onChange={action('Value Changed')}\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\n        disabled={boolean('disabled', false)}\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\n        tooltipProps={{\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\n        }}\\n      />\\n    </Box>\\n  </ThemeWrapper>\\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\nexport const TextDropdown = addSourceDecorator(addSourceDecorator(() => (\\n  <ThemeWrapper>\\n    <Box p='2em' bgColor='grey.50'>\\n      <IconDropdown\\n        variant={text('varaint', 'text-dropdown') as tSelectVariant}\\n        optionList={object('optionList', ListViewOption)}\\n        width={text('width', '120px')}\\n        menuIsOpen={boolean('menuIsOpen', false)}\\n        iconButtonDetails={array('iconList', [\\n          'hide-menu-box',\\n          'More',\\n          'angle-down'\\n        ])}\\n        primary={boolean('primary', false)}\\n        intent={text('intent', 'page') as tIntent}\\n        onChange={action('Value Changed')}\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\n        disabled={boolean('disabled', false)}\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\n        tooltipProps={{\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\n        }}\\n      />\\n    </Box>\\n  </ThemeWrapper>\\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const MultiLevelBreadCrumb = addSourceDecorator(addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='2em' bgColor='grey.50'>\\n        <IconDropdown\\n          variant={text('variant', 'multilevel-breadcrumb') as tSelectVariant}\\n          optionList={object('optionList', MultiLevelListViewOption)}\\n          onChange={action('Value selected')}\\n          value={text('value', 'strawberry')}\\n          width={text('width', '260px')}\\n        />\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n  }, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const MultiLevelButtonDropdown = addSourceDecorator(addSourceDecorator(() => (\\n  <ThemeWrapper>\\n    <Box p='2em' bgColor='grey.50'>\\n      <IconDropdown\\n        variant={\\n          text('varaint', 'multilevel-button-dropdown') as tSelectVariant\\n        }\\n        optionList={object('optionList', MultiLevelListViewOption)}\\n        width={text('width', '120px')}\\n        menuIsOpen\\n        iconButtonDetails={array('iconList', [\\n          'hide-menu-box',\\n          'More',\\n          'angle-down'\\n        ])}\\n        defaultOpen='right'\\n        primary={boolean('primary', false)}\\n        intent={text('intent', 'page') as tIntent}\\n        handleClick={(id: any) => console.log('clicked from storybook', id)}\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\n        disabled={boolean('disabled', false)}\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\n        tooltipProps={{\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\n        }}\\n      />\\n    </Box>\\n  </ThemeWrapper>\\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const PaginationDropdown = addSourceDecorator(addSourceDecorator(() => (\\n  <ThemeWrapper>\\n    <CardComponent style={{ height: '300px' }}>\\n      <IconDropdown\\n        variant={text('variant', 'pagination-size') as tSelectVariant}\\n        optionList={object('optionList', paginationOptions)}\\n        onChange={action('Value selected')}\\n        value={text('value', '50')}\\n        width={text('width', '120px')}\\n      />\\n    </CardComponent>\\n  </ThemeWrapper>\\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const columnOptionComponent = addSourceDecorator(addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='2em' bgColor='grey.50'>\\n        <div style={{ width: '200px', margin: 'auto' }}>\\n          <IconDropdown\\n            variant={text('variant', 'column-filter') as tSelectVariant}\\n            optionList={object('optionList', columnOption)}\\n            onChange={action('Value selected')}\\n            width={text('width', '10px')}\\n            isSingleClickOption={boolean('isSingleClickOption', true)}\\n          />\\n        </div>\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const BreadCrumbComponent = addSourceDecorator(addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='2em' bgColor='grey.50'>\\n        <IconDropdown\\n          variant={text('variant', 'bread-crumb') as tSelectVariant}\\n          optionList={object('optionList', options)}\\n          onChange={action('Value selected')}\\n          value={text('value', 'strawberry')}\\n          width={text('width', '260px')}\\n        />\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const DatePickerDropDown = addSourceDecorator(addSourceDecorator(() => (\\n  <ThemeWrapper>\\n    <CardComponent style={{ height: '200px' }}>\\n      <IconDropdown\\n        variant={text('variant', 'date-picker') as tSelectVariant}\\n        optionList={object('optionList', datePickerOptions)}\\n        onChange={action('Value selected')}\\n        value={text('value', '50')}\\n        width={text('width', '80px')}\\n        showDownArrow={boolean('Show Down Arrow', true)}\\n        isMultiRegionStyled={boolean('Is Multi Region Styled', false)}\\n      />\\n    </CardComponent>\\n  </ThemeWrapper>\\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\nconst arrayMap = [\\n  { variant: 'column-filter', name: 'column-filter0' },\\n  { variant: 'column-filter', name: 'column-filter1' },\\n  { variant: 'column-filter', name: 'column-filter2' }\\n]\\n\\nexport const columnOptionList = addSourceDecorator(addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='2em' bgColor='grey.50'>\\n        <div style={{ width: '200px', margin: 'auto' }}>\\n          {arrayMap.map((obj: any, index: number) => {\\n            return (\\n              <IconDropdown\\n                variant={text('variant', obj?.variant) as tSelectVariant}\\n                optionList={object('optionList', columnOption)}\\n                onChange={action('Value selected')}\\n                width={text('width', '10px')}\\n                isSingleClickOption={boolean('isSingleClickOption', true)}\\n                key={index}\\n              />\\n            )\\n          })}\\n        </div>\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const DropdownUniversal = addSourceDecorator(addSourceDecorator(() => {\\n  // reference to style\\n  // const theme = useContext(ThemeContext)\\n  // const borderBottom = `1px solid ${theme?.colors?.grey['A800']}`\\n  // const customStyle = {\\n  //   control: (provided: any) => ({\\n  //     ...provided,\\n  //     borderStyle: 'none',\\n  //     borderBottom,\\n  //     borderRadius: '0px',\\n  //     boxShadow: 'none',\\n  //     borderColor: theme?.colors?.grey?.A800,\\n  //     '&:focus': {\\n  //       borderStyle: 'none',\\n  //       borderBottom,\\n  //       boxShadow: 'none',\\n  //       borderColor: theme?.colors?.grey?.A800\\n  //     },\\n  //     '&:hover': {\\n  //       borderStyle: 'none',\\n  //       borderBottom,\\n  //       boxShadow: 'none',\\n  //       borderColor: theme?.colors?.grey?.A800\\n  //     }\\n  //   }),\\n  //   option: (provided: any, state: any) => ({\\n  //     ...provided,\\n  //     backgroundColor: state?.isSelected\\n  //       ? theme?.colors?.primary?.main\\n  //       : theme?.colors?.white,\\n  //     '&:hover': {\\n  //       backgroundColor: state?.isSelected\\n  //         ? theme?.colors?.primary?.main\\n  //         : theme?.colors?.grey['50']\\n  //     }\\n  //   }),\\n\\n  //   menu: (provided: any, state: any) => ({\\n  //     ...provided,\\n  //     backgroundColor: state?.isSelected\\n  //       ? theme.colors.primary.main\\n  //       : theme?.colors?.white,\\n  //     borderRadius: '2px',\\n  //     '&:hover': {\\n  //       backgroundColor: state?.isSelected\\n  //         ? theme?.colors?.primary?.main\\n  //         : theme?.colors?.white\\n  //     },\\n  //     marginTop: '5px',\\n  //     marginLeft: '16px',\\n  //     width: '90%'\\n  //   }),\\n  //   menuList: (provided: any) => ({\\n  //     ...provided,\\n  //     marginTop: '0px'\\n  //   }),\\n  //   valueContainer: (provided: any) => ({\\n  //     ...provided,\\n  //     padding: '0px'\\n  //   })\\n  // }\\n  return (\\n    <ThemeWrapper>\\n      <Box p='2em' bgColor='grey.50'>\\n        <IconDropdown\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\n          optionList={object('optionList', ListViewOption)}\\n          width={text('width', '120px')}\\n          menuIsOpen={boolean('menuIsOpen', false)}\\n          primary={boolean('primary', false)}\\n          intent={text('intent', 'page') as tIntent}\\n          onChange={action('Value Changed')}\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\n          disabled={boolean('disabled', false)}\\n          value='available'\\n          optionComponent={({ selectedOption }: any) => {\\n            return (\\n              <div>\\n                <div>{selectedOption?.color}</div>\\n                <div>{selectedOption?.label}</div>\\n              </div>\\n            )\\n          }}\\n          // customStyle={customStyle}\\n        >\\n          {({\\n            selectedOption,\\n            menuIsOpen,\\n            setMenuIsOpen\\n          }: IUniversalDropdownChildren) => {\\n            return (\\n              <Button\\n                onClick={() => {\\n                  setMenuIsOpen(!menuIsOpen)\\n                  action('Universal open/closed')(menuIsOpen)\\n                }}\\n                color={text('color', 'white')}\\n                bgColor={text('bgColor', 'black')}\\n                fullWidth={boolean('fullWidth', false)}\\n              >\\n                {selectedOption?.label}\\n              </Button>\\n            )\\n          }}\\n        </IconDropdown>\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const TextFieldDropdown = addSourceDecorator(addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='2em' bgColor='grey.50'>\\n        <IconDropdown\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\n          optionList={object('optionList', ListViewOption)}\\n          width={text('width', '120px')}\\n          menuIsOpen={boolean('menuIsOpen', false)}\\n          primary={boolean('primary', false)}\\n          intent={text('intent', 'page') as tIntent}\\n          onChange={action('Value Changed')}\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\n          disabled={boolean('disabled', false)}\\n          value='available'\\n          optionComponent={({ selectedOption }: any) => {\\n            return (\\n              <div>\\n                <div>{selectedOption?.color}</div>\\n                <div>{selectedOption?.label}</div>\\n              </div>\\n            )\\n          }}\\n          // customStyle={customStyle}\\n        >\\n          {({\\n            selectedOption,\\n            menuIsOpen,\\n            setMenuIsOpen\\n          }: IUniversalDropdownChildren) => {\\n            return (\\n              <TextInput\\n                id='someId'\\n                name='someName'\\n                className='someClassName'\\n                label={text('label', 'Username')}\\n                labelColor={text('labelColor', 'text.inputLabel.default')}\\n                placeholder={text('placeholder', 'Enter text here...')}\\n                maxLength={number('maxLength', 10)}\\n                error={boolean('error', false)}\\n                errorMessage={text('errorMessage', '')}\\n                required={boolean('required', false)}\\n                fullWidth={boolean('fullWidth', false)}\\n                onChange={action('Triggered: onChange')}\\n                onClick={() => {\\n                  setMenuIsOpen(!menuIsOpen)\\n                  action('universal open/closed')(menuIsOpen)\\n                }}\\n                value={selectedOption?.value}\\n              />\\n            )\\n          }}\\n        </IconDropdown>\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\",\n      \"locationsMap\": {}\n    }\n  }, _defineProperty(_parameters, \"storySource\", {\n    \"source\": \"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/farhanansari/Code/ui-library/src/components/molecules/IconDropdown\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"import { action } from '@storybook/addon-actions'\\\\nimport {\\\\n  array,\\\\n  boolean,\\\\n  number,\\\\n  object,\\\\n  text,\\\\n  withKnobs\\\\n} from '@storybook/addon-knobs'\\\\nimport React from 'react'\\\\nimport IconDropdown from '.'\\\\nimport { path } from '..'\\\\nimport { Box } from '../../..'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport Button, { tIntent } from '../../atoms/Button'\\\\nimport CardComponent from '../../atoms/Card'\\\\nimport { tPlacement } from '../../../utilities/types'\\\\nimport {\\\\n  IUniversalDropdownChildren,\\\\n  tSelectVariant\\\\n} from '../DropDown/interface'\\\\nimport TextInput from '../TextInput'\\\\n\\\\nexport default {\\\\n  title: `${path}/IconDropdown`,\\\\n  decorators: [withKnobs],\\\\n  component: IconDropdown\\\\n}\\\\n\\\\nconst ListViewOption = [\\\\n  {\\\\n    value: 'available',\\\\n    label: 'Mark As Available',\\\\n    color: 'blue',\\\\n    tooltipText: 'Mark As Available',\\\\n    isDisabled: true\\\\n  },\\\\n  {\\\\n    value: 'unavailable',\\\\n    label: 'Mark As Unavailable',\\\\n    color: 'red',\\\\n    tooltipText: 'Mark As Unavailable'\\\\n  },\\\\n  {\\\\n    value: 'active',\\\\n    label: 'Mark As Active',\\\\n    color: 'purple',\\\\n    tooltipText: 'Mark As Active'\\\\n  },\\\\n  {\\\\n    value: 'inactive',\\\\n    label: 'Mark As Inactive',\\\\n    color: 'green',\\\\n    tooltipText: 'Mark As Inactive'\\\\n  }\\\\n]\\\\n\\\\nconst MultiLevelListViewOption = [\\\\n  {\\\\n    id: 'available',\\\\n    value: 'available',\\\\n    label: 'Mark As Available',\\\\n    color: 'blue',\\\\n    tooltipText: 'Mark As Available',\\\\n    options: [\\\\n      {\\\\n        id: 'available',\\\\n        value: 'available',\\\\n        label: 'Mark As Child Available',\\\\n        color: 'blue',\\\\n        tooltipText: 'Mark As Child Available'\\\\n      },\\\\n      {\\\\n        id: 'unavailable',\\\\n        value: 'unavailable',\\\\n        label: 'Mark As Child Unavailable',\\\\n        color: 'red',\\\\n        tooltipText: 'Mark As Child Unavailable'\\\\n      },\\\\n      {\\\\n        id: 'active',\\\\n        value: 'active',\\\\n        label: 'Mark As Child Active',\\\\n        color: 'purple',\\\\n        tooltipText: 'Mark As Child Active'\\\\n      },\\\\n      {\\\\n        id: 'inactive',\\\\n        value: 'inactive',\\\\n        label: 'Mark As Child Inactive',\\\\n        color: 'green',\\\\n        tooltipText: 'Mark As Child Inactive',\\\\n        options: [\\\\n          {\\\\n            id: 'available',\\\\n            value: 'available',\\\\n            label: 'Mark As Grand Child Available',\\\\n            color: 'blue',\\\\n            tooltipText: 'Mark As Grand Child Available'\\\\n          },\\\\n          {\\\\n            id: 'unavailable',\\\\n            value: 'unavailable',\\\\n            label: 'Mark As Grand Child Unavailable',\\\\n            color: 'red',\\\\n            tooltipText: 'Mark As Grand Child Unavailable'\\\\n          }\\\\n        ]\\\\n      }\\\\n    ]\\\\n  },\\\\n  {\\\\n    id: 'unavailable',\\\\n    value: 'unavailable',\\\\n    label: 'Mark As Unavailable',\\\\n    color: 'red',\\\\n    tooltipText: 'Mark As Unavailable'\\\\n  },\\\\n  {\\\\n    id: 'active',\\\\n    value: 'active',\\\\n    label: 'Mark As Active',\\\\n    color: 'purple',\\\\n    tooltipText: 'Mark As Active'\\\\n  },\\\\n  {\\\\n    id: 'inactive',\\\\n    value: 'inactive',\\\\n    label: 'Mark As Inactive',\\\\n    color: 'green',\\\\n    tooltipText: 'Mark As Inactive'\\\\n  }\\\\n]\\\\n\\\\nconst paginationOptions = [\\\\n  { value: '25', label: '25 per page', title: '25 per page' },\\\\n  { value: '50', label: '50 per page', title: '50 per page' },\\\\n  { value: '100', label: '100 per page', title: '100 per page' },\\\\n  { value: '200', label: '200 per page', title: '200 per page' }\\\\n]\\\\n\\\\nconst columnOption = [\\\\n  { value: 'ascending', label: 'Sort Ascending', iconVariant: 'hide-menu-box' },\\\\n  {\\\\n    value: 'descending',\\\\n    label: 'Sort Descending',\\\\n    iconVariant: 'hub-location'\\\\n  },\\\\n  { value: 'hideColumn', label: 'Hide Column', iconVariant: 'close' },\\\\n  { value: 'pinLeft', label: 'Pin Left', iconVariant: 'angle-left' },\\\\n  { value: 'pinright', label: 'Pin Right', iconVariant: 'angle-right-thin' }\\\\n]\\\\n\\\\nconst options = [\\\\n  {\\\\n    value: 'emailVerificationPending',\\\\n    label: 'Email Verification Pending Shipper'\\\\n  },\\\\n  { value: 'allShippers', label: 'All Shippers' },\\\\n  { value: 'approvalPendingShippers', label: 'Approval Pending Shippers' }\\\\n]\\\\n\\\\nconst datePickerOptions = [\\\\n  { value: 'January', label: 'January' },\\\\n  { value: 'February', label: 'February' },\\\\n  { value: 'March', label: 'March' },\\\\n  { value: 'April', label: 'April' },\\\\n  { value: 'May', label: 'May' },\\\\n  { value: 'June', label: 'June' },\\\\n  { value: 'July', label: 'July' },\\\\n  { value: 'August', label: 'August' },\\\\n  { value: 'September', label: 'September' },\\\\n  { value: 'October', label: 'October' },\\\\n  { value: 'November', label: 'November' },\\\\n  { value: 'December', label: 'December' }\\\\n]\\\\n\\\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\\\nexport const ButtonDropdown = () => (\\\\n  <ThemeWrapper>\\\\n    <Box p='2em' bgColor='grey.50'>\\\\n      <IconDropdown\\\\n        variant={text('varaint', 'button-dropdown') as tSelectVariant}\\\\n        optionList={object('optionList', ListViewOption)}\\\\n        width={text('width', '120px')}\\\\n        menuIsOpen={boolean('menuIsOpen', false)}\\\\n        iconButtonDetails={array('iconList', [\\\\n          'hide-menu-box',\\\\n          'More',\\\\n          'angle-down'\\\\n        ])}\\\\n        primary={boolean('primary', false)}\\\\n        intent={text('intent', 'page') as tIntent}\\\\n        onChange={action('Value Changed')}\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n        disabled={boolean('disabled', false)}\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\n        tooltipProps={{\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\n        }}\\\\n      />\\\\n    </Box>\\\\n  </ThemeWrapper>\\\\n)\\\\n\\\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\\\nexport const TextDropdown = () => (\\\\n  <ThemeWrapper>\\\\n    <Box p='2em' bgColor='grey.50'>\\\\n      <IconDropdown\\\\n        variant={text('varaint', 'text-dropdown') as tSelectVariant}\\\\n        optionList={object('optionList', ListViewOption)}\\\\n        width={text('width', '120px')}\\\\n        menuIsOpen={boolean('menuIsOpen', false)}\\\\n        iconButtonDetails={array('iconList', [\\\\n          'hide-menu-box',\\\\n          'More',\\\\n          'angle-down'\\\\n        ])}\\\\n        primary={boolean('primary', false)}\\\\n        intent={text('intent', 'page') as tIntent}\\\\n        onChange={action('Value Changed')}\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n        disabled={boolean('disabled', false)}\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\n        tooltipProps={{\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\n        }}\\\\n      />\\\\n    </Box>\\\\n  </ThemeWrapper>\\\\n)\\\\n\\\\nexport const MultiLevelBreadCrumb = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <IconDropdown\\\\n          variant={text('variant', 'multilevel-breadcrumb') as tSelectVariant}\\\\n          optionList={object('optionList', MultiLevelListViewOption)}\\\\n          onChange={action('Value selected')}\\\\n          value={text('value', 'strawberry')}\\\\n          width={text('width', '260px')}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n  }\\\\n\\\\nexport const MultiLevelButtonDropdown = () => (\\\\n  <ThemeWrapper>\\\\n    <Box p='2em' bgColor='grey.50'>\\\\n      <IconDropdown\\\\n        variant={\\\\n          text('varaint', 'multilevel-button-dropdown') as tSelectVariant\\\\n        }\\\\n        optionList={object('optionList', MultiLevelListViewOption)}\\\\n        width={text('width', '120px')}\\\\n        menuIsOpen\\\\n        iconButtonDetails={array('iconList', [\\\\n          'hide-menu-box',\\\\n          'More',\\\\n          'angle-down'\\\\n        ])}\\\\n        defaultOpen='right'\\\\n        primary={boolean('primary', false)}\\\\n        intent={text('intent', 'page') as tIntent}\\\\n        handleClick={(id: any) => console.log('clicked from storybook', id)}\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n        disabled={boolean('disabled', false)}\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\n        tooltipProps={{\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\n        }}\\\\n      />\\\\n    </Box>\\\\n  </ThemeWrapper>\\\\n)\\\\n\\\\nexport const PaginationDropdown = () => (\\\\n  <ThemeWrapper>\\\\n    <CardComponent style={{ height: '300px' }}>\\\\n      <IconDropdown\\\\n        variant={text('variant', 'pagination-size') as tSelectVariant}\\\\n        optionList={object('optionList', paginationOptions)}\\\\n        onChange={action('Value selected')}\\\\n        value={text('value', '50')}\\\\n        width={text('width', '120px')}\\\\n      />\\\\n    </CardComponent>\\\\n  </ThemeWrapper>\\\\n)\\\\n\\\\nexport const columnOptionComponent = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <div style={{ width: '200px', margin: 'auto' }}>\\\\n          <IconDropdown\\\\n            variant={text('variant', 'column-filter') as tSelectVariant}\\\\n            optionList={object('optionList', columnOption)}\\\\n            onChange={action('Value selected')}\\\\n            width={text('width', '10px')}\\\\n            isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n          />\\\\n        </div>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const BreadCrumbComponent = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <IconDropdown\\\\n          variant={text('variant', 'bread-crumb') as tSelectVariant}\\\\n          optionList={object('optionList', options)}\\\\n          onChange={action('Value selected')}\\\\n          value={text('value', 'strawberry')}\\\\n          width={text('width', '260px')}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const DatePickerDropDown = () => (\\\\n  <ThemeWrapper>\\\\n    <CardComponent style={{ height: '200px' }}>\\\\n      <IconDropdown\\\\n        variant={text('variant', 'date-picker') as tSelectVariant}\\\\n        optionList={object('optionList', datePickerOptions)}\\\\n        onChange={action('Value selected')}\\\\n        value={text('value', '50')}\\\\n        width={text('width', '80px')}\\\\n        showDownArrow={boolean('Show Down Arrow', true)}\\\\n        isMultiRegionStyled={boolean('Is Multi Region Styled', false)}\\\\n      />\\\\n    </CardComponent>\\\\n  </ThemeWrapper>\\\\n)\\\\nconst arrayMap = [\\\\n  { variant: 'column-filter', name: 'column-filter0' },\\\\n  { variant: 'column-filter', name: 'column-filter1' },\\\\n  { variant: 'column-filter', name: 'column-filter2' }\\\\n]\\\\n\\\\nexport const columnOptionList = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <div style={{ width: '200px', margin: 'auto' }}>\\\\n          {arrayMap.map((obj: any, index: number) => {\\\\n            return (\\\\n              <IconDropdown\\\\n                variant={text('variant', obj?.variant) as tSelectVariant}\\\\n                optionList={object('optionList', columnOption)}\\\\n                onChange={action('Value selected')}\\\\n                width={text('width', '10px')}\\\\n                isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n                key={index}\\\\n              />\\\\n            )\\\\n          })}\\\\n        </div>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const DropdownUniversal = () => {\\\\n  // reference to style\\\\n  // const theme = useContext(ThemeContext)\\\\n  // const borderBottom = `1px solid ${theme?.colors?.grey['A800']}`\\\\n  // const customStyle = {\\\\n  //   control: (provided: any) => ({\\\\n  //     ...provided,\\\\n  //     borderStyle: 'none',\\\\n  //     borderBottom,\\\\n  //     borderRadius: '0px',\\\\n  //     boxShadow: 'none',\\\\n  //     borderColor: theme?.colors?.grey?.A800,\\\\n  //     '&:focus': {\\\\n  //       borderStyle: 'none',\\\\n  //       borderBottom,\\\\n  //       boxShadow: 'none',\\\\n  //       borderColor: theme?.colors?.grey?.A800\\\\n  //     },\\\\n  //     '&:hover': {\\\\n  //       borderStyle: 'none',\\\\n  //       borderBottom,\\\\n  //       boxShadow: 'none',\\\\n  //       borderColor: theme?.colors?.grey?.A800\\\\n  //     }\\\\n  //   }),\\\\n  //   option: (provided: any, state: any) => ({\\\\n  //     ...provided,\\\\n  //     backgroundColor: state?.isSelected\\\\n  //       ? theme?.colors?.primary?.main\\\\n  //       : theme?.colors?.white,\\\\n  //     '&:hover': {\\\\n  //       backgroundColor: state?.isSelected\\\\n  //         ? theme?.colors?.primary?.main\\\\n  //         : theme?.colors?.grey['50']\\\\n  //     }\\\\n  //   }),\\\\n\\\\n  //   menu: (provided: any, state: any) => ({\\\\n  //     ...provided,\\\\n  //     backgroundColor: state?.isSelected\\\\n  //       ? theme.colors.primary.main\\\\n  //       : theme?.colors?.white,\\\\n  //     borderRadius: '2px',\\\\n  //     '&:hover': {\\\\n  //       backgroundColor: state?.isSelected\\\\n  //         ? theme?.colors?.primary?.main\\\\n  //         : theme?.colors?.white\\\\n  //     },\\\\n  //     marginTop: '5px',\\\\n  //     marginLeft: '16px',\\\\n  //     width: '90%'\\\\n  //   }),\\\\n  //   menuList: (provided: any) => ({\\\\n  //     ...provided,\\\\n  //     marginTop: '0px'\\\\n  //   }),\\\\n  //   valueContainer: (provided: any) => ({\\\\n  //     ...provided,\\\\n  //     padding: '0px'\\\\n  //   })\\\\n  // }\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <IconDropdown\\\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          width={text('width', '120px')}\\\\n          menuIsOpen={boolean('menuIsOpen', false)}\\\\n          primary={boolean('primary', false)}\\\\n          intent={text('intent', 'page') as tIntent}\\\\n          onChange={action('Value Changed')}\\\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n          disabled={boolean('disabled', false)}\\\\n          value='available'\\\\n          optionComponent={({ selectedOption }: any) => {\\\\n            return (\\\\n              <div>\\\\n                <div>{selectedOption?.color}</div>\\\\n                <div>{selectedOption?.label}</div>\\\\n              </div>\\\\n            )\\\\n          }}\\\\n          // customStyle={customStyle}\\\\n        >\\\\n          {({\\\\n            selectedOption,\\\\n            menuIsOpen,\\\\n            setMenuIsOpen\\\\n          }: IUniversalDropdownChildren) => {\\\\n            return (\\\\n              <Button\\\\n                onClick={() => {\\\\n                  setMenuIsOpen(!menuIsOpen)\\\\n                  action('Universal open/closed')(menuIsOpen)\\\\n                }}\\\\n                color={text('color', 'white')}\\\\n                bgColor={text('bgColor', 'black')}\\\\n                fullWidth={boolean('fullWidth', false)}\\\\n              >\\\\n                {selectedOption?.label}\\\\n              </Button>\\\\n            )\\\\n          }}\\\\n        </IconDropdown>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const TextFieldDropdown = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <IconDropdown\\\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          width={text('width', '120px')}\\\\n          menuIsOpen={boolean('menuIsOpen', false)}\\\\n          primary={boolean('primary', false)}\\\\n          intent={text('intent', 'page') as tIntent}\\\\n          onChange={action('Value Changed')}\\\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n          disabled={boolean('disabled', false)}\\\\n          value='available'\\\\n          optionComponent={({ selectedOption }: any) => {\\\\n            return (\\\\n              <div>\\\\n                <div>{selectedOption?.color}</div>\\\\n                <div>{selectedOption?.label}</div>\\\\n              </div>\\\\n            )\\\\n          }}\\\\n          // customStyle={customStyle}\\\\n        >\\\\n          {({\\\\n            selectedOption,\\\\n            menuIsOpen,\\\\n            setMenuIsOpen\\\\n          }: IUniversalDropdownChildren) => {\\\\n            return (\\\\n              <TextInput\\\\n                id='someId'\\\\n                name='someName'\\\\n                className='someClassName'\\\\n                label={text('label', 'Username')}\\\\n                labelColor={text('labelColor', 'text.inputLabel.default')}\\\\n                placeholder={text('placeholder', 'Enter text here...')}\\\\n                maxLength={number('maxLength', 10)}\\\\n                error={boolean('error', false)}\\\\n                errorMessage={text('errorMessage', '')}\\\\n                required={boolean('required', false)}\\\\n                fullWidth={boolean('fullWidth', false)}\\\\n                onChange={action('Triggered: onChange')}\\\\n                onClick={() => {\\\\n                  setMenuIsOpen(!menuIsOpen)\\\\n                  action('universal open/closed')(menuIsOpen)\\\\n                }}\\\\n                value={selectedOption?.value}\\\\n              />\\\\n            )\\\\n          }}\\\\n        </IconDropdown>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/IconDropdown.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\nimport { action } from '@storybook/addon-actions'\\nimport {\\n  array,\\n  boolean,\\n  number,\\n  object,\\n  text,\\n  withKnobs\\n} from '@storybook/addon-knobs'\\nimport React from 'react'\\nimport IconDropdown from '.'\\nimport { path } from '..'\\nimport { Box } from '../../..'\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\nimport Button, { tIntent } from '../../atoms/Button'\\nimport CardComponent from '../../atoms/Card'\\nimport { tPlacement } from '../../../utilities/types'\\nimport {\\n  IUniversalDropdownChildren,\\n  tSelectVariant\\n} from '../DropDown/interface'\\nimport TextInput from '../TextInput'\\n\\nexport default {parameters: {\\\"storySource\\\":{\\\"source\\\":\\\"import { action } from '@storybook/addon-actions'\\\\nimport {\\\\n  array,\\\\n  boolean,\\\\n  number,\\\\n  object,\\\\n  text,\\\\n  withKnobs\\\\n} from '@storybook/addon-knobs'\\\\nimport React from 'react'\\\\nimport IconDropdown from '.'\\\\nimport { path } from '..'\\\\nimport { Box } from '../../..'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport Button, { tIntent } from '../../atoms/Button'\\\\nimport CardComponent from '../../atoms/Card'\\\\nimport { tPlacement } from '../../../utilities/types'\\\\nimport {\\\\n  IUniversalDropdownChildren,\\\\n  tSelectVariant\\\\n} from '../DropDown/interface'\\\\nimport TextInput from '../TextInput'\\\\n\\\\nexport default {\\\\n  title: `${path}/IconDropdown`,\\\\n  decorators: [withKnobs],\\\\n  component: IconDropdown\\\\n}\\\\n\\\\nconst ListViewOption = [\\\\n  {\\\\n    value: 'available',\\\\n    label: 'Mark As Available',\\\\n    color: 'blue',\\\\n    tooltipText: 'Mark As Available',\\\\n    isDisabled: true\\\\n  },\\\\n  {\\\\n    value: 'unavailable',\\\\n    label: 'Mark As Unavailable',\\\\n    color: 'red',\\\\n    tooltipText: 'Mark As Unavailable'\\\\n  },\\\\n  {\\\\n    value: 'active',\\\\n    label: 'Mark As Active',\\\\n    color: 'purple',\\\\n    tooltipText: 'Mark As Active'\\\\n  },\\\\n  {\\\\n    value: 'inactive',\\\\n    label: 'Mark As Inactive',\\\\n    color: 'green',\\\\n    tooltipText: 'Mark As Inactive'\\\\n  }\\\\n]\\\\n\\\\nconst MultiLevelListViewOption = [\\\\n  {\\\\n    id: 'available',\\\\n    value: 'available',\\\\n    label: 'Mark As Available',\\\\n    color: 'blue',\\\\n    tooltipText: 'Mark As Available',\\\\n    options: [\\\\n      {\\\\n        id: 'available',\\\\n        value: 'available',\\\\n        label: 'Mark As Child Available',\\\\n        color: 'blue',\\\\n        tooltipText: 'Mark As Child Available'\\\\n      },\\\\n      {\\\\n        id: 'unavailable',\\\\n        value: 'unavailable',\\\\n        label: 'Mark As Child Unavailable',\\\\n        color: 'red',\\\\n        tooltipText: 'Mark As Child Unavailable'\\\\n      },\\\\n      {\\\\n        id: 'active',\\\\n        value: 'active',\\\\n        label: 'Mark As Child Active',\\\\n        color: 'purple',\\\\n        tooltipText: 'Mark As Child Active'\\\\n      },\\\\n      {\\\\n        id: 'inactive',\\\\n        value: 'inactive',\\\\n        label: 'Mark As Child Inactive',\\\\n        color: 'green',\\\\n        tooltipText: 'Mark As Child Inactive',\\\\n        options: [\\\\n          {\\\\n            id: 'available',\\\\n            value: 'available',\\\\n            label: 'Mark As Grand Child Available',\\\\n            color: 'blue',\\\\n            tooltipText: 'Mark As Grand Child Available'\\\\n          },\\\\n          {\\\\n            id: 'unavailable',\\\\n            value: 'unavailable',\\\\n            label: 'Mark As Grand Child Unavailable',\\\\n            color: 'red',\\\\n            tooltipText: 'Mark As Grand Child Unavailable'\\\\n          }\\\\n        ]\\\\n      }\\\\n    ]\\\\n  },\\\\n  {\\\\n    id: 'unavailable',\\\\n    value: 'unavailable',\\\\n    label: 'Mark As Unavailable',\\\\n    color: 'red',\\\\n    tooltipText: 'Mark As Unavailable'\\\\n  },\\\\n  {\\\\n    id: 'active',\\\\n    value: 'active',\\\\n    label: 'Mark As Active',\\\\n    color: 'purple',\\\\n    tooltipText: 'Mark As Active'\\\\n  },\\\\n  {\\\\n    id: 'inactive',\\\\n    value: 'inactive',\\\\n    label: 'Mark As Inactive',\\\\n    color: 'green',\\\\n    tooltipText: 'Mark As Inactive'\\\\n  }\\\\n]\\\\n\\\\nconst paginationOptions = [\\\\n  { value: '25', label: '25 per page', title: '25 per page' },\\\\n  { value: '50', label: '50 per page', title: '50 per page' },\\\\n  { value: '100', label: '100 per page', title: '100 per page' },\\\\n  { value: '200', label: '200 per page', title: '200 per page' }\\\\n]\\\\n\\\\nconst columnOption = [\\\\n  { value: 'ascending', label: 'Sort Ascending', iconVariant: 'hide-menu-box' },\\\\n  {\\\\n    value: 'descending',\\\\n    label: 'Sort Descending',\\\\n    iconVariant: 'hub-location'\\\\n  },\\\\n  { value: 'hideColumn', label: 'Hide Column', iconVariant: 'close' },\\\\n  { value: 'pinLeft', label: 'Pin Left', iconVariant: 'angle-left' },\\\\n  { value: 'pinright', label: 'Pin Right', iconVariant: 'angle-right-thin' }\\\\n]\\\\n\\\\nconst options = [\\\\n  {\\\\n    value: 'emailVerificationPending',\\\\n    label: 'Email Verification Pending Shipper'\\\\n  },\\\\n  { value: 'allShippers', label: 'All Shippers' },\\\\n  { value: 'approvalPendingShippers', label: 'Approval Pending Shippers' }\\\\n]\\\\n\\\\nconst datePickerOptions = [\\\\n  { value: 'January', label: 'January' },\\\\n  { value: 'February', label: 'February' },\\\\n  { value: 'March', label: 'March' },\\\\n  { value: 'April', label: 'April' },\\\\n  { value: 'May', label: 'May' },\\\\n  { value: 'June', label: 'June' },\\\\n  { value: 'July', label: 'July' },\\\\n  { value: 'August', label: 'August' },\\\\n  { value: 'September', label: 'September' },\\\\n  { value: 'October', label: 'October' },\\\\n  { value: 'November', label: 'November' },\\\\n  { value: 'December', label: 'December' }\\\\n]\\\\n\\\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\\\nexport const ButtonDropdown = () => (\\\\n  <ThemeWrapper>\\\\n    <Box p='2em' bgColor='grey.50'>\\\\n      <IconDropdown\\\\n        variant={text('varaint', 'button-dropdown') as tSelectVariant}\\\\n        optionList={object('optionList', ListViewOption)}\\\\n        width={text('width', '120px')}\\\\n        menuIsOpen={boolean('menuIsOpen', false)}\\\\n        iconButtonDetails={array('iconList', [\\\\n          'hide-menu-box',\\\\n          'More',\\\\n          'angle-down'\\\\n        ])}\\\\n        primary={boolean('primary', false)}\\\\n        intent={text('intent', 'page') as tIntent}\\\\n        onChange={action('Value Changed')}\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n        disabled={boolean('disabled', false)}\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\n        tooltipProps={{\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\n        }}\\\\n      />\\\\n    </Box>\\\\n  </ThemeWrapper>\\\\n)\\\\n\\\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\\\nexport const TextDropdown = () => (\\\\n  <ThemeWrapper>\\\\n    <Box p='2em' bgColor='grey.50'>\\\\n      <IconDropdown\\\\n        variant={text('varaint', 'text-dropdown') as tSelectVariant}\\\\n        optionList={object('optionList', ListViewOption)}\\\\n        width={text('width', '120px')}\\\\n        menuIsOpen={boolean('menuIsOpen', false)}\\\\n        iconButtonDetails={array('iconList', [\\\\n          'hide-menu-box',\\\\n          'More',\\\\n          'angle-down'\\\\n        ])}\\\\n        primary={boolean('primary', false)}\\\\n        intent={text('intent', 'page') as tIntent}\\\\n        onChange={action('Value Changed')}\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n        disabled={boolean('disabled', false)}\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\n        tooltipProps={{\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\n        }}\\\\n      />\\\\n    </Box>\\\\n  </ThemeWrapper>\\\\n)\\\\n\\\\nexport const MultiLevelBreadCrumb = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <IconDropdown\\\\n          variant={text('variant', 'multilevel-breadcrumb') as tSelectVariant}\\\\n          optionList={object('optionList', MultiLevelListViewOption)}\\\\n          onChange={action('Value selected')}\\\\n          value={text('value', 'strawberry')}\\\\n          width={text('width', '260px')}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n  }\\\\n\\\\nexport const MultiLevelButtonDropdown = () => (\\\\n  <ThemeWrapper>\\\\n    <Box p='2em' bgColor='grey.50'>\\\\n      <IconDropdown\\\\n        variant={\\\\n          text('varaint', 'multilevel-button-dropdown') as tSelectVariant\\\\n        }\\\\n        optionList={object('optionList', MultiLevelListViewOption)}\\\\n        width={text('width', '120px')}\\\\n        menuIsOpen\\\\n        iconButtonDetails={array('iconList', [\\\\n          'hide-menu-box',\\\\n          'More',\\\\n          'angle-down'\\\\n        ])}\\\\n        defaultOpen='right'\\\\n        primary={boolean('primary', false)}\\\\n        intent={text('intent', 'page') as tIntent}\\\\n        handleClick={(id: any) => console.log('clicked from storybook', id)}\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n        disabled={boolean('disabled', false)}\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\n        tooltipProps={{\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\n        }}\\\\n      />\\\\n    </Box>\\\\n  </ThemeWrapper>\\\\n)\\\\n\\\\nexport const PaginationDropdown = () => (\\\\n  <ThemeWrapper>\\\\n    <CardComponent style={{ height: '300px' }}>\\\\n      <IconDropdown\\\\n        variant={text('variant', 'pagination-size') as tSelectVariant}\\\\n        optionList={object('optionList', paginationOptions)}\\\\n        onChange={action('Value selected')}\\\\n        value={text('value', '50')}\\\\n        width={text('width', '120px')}\\\\n      />\\\\n    </CardComponent>\\\\n  </ThemeWrapper>\\\\n)\\\\n\\\\nexport const columnOptionComponent = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <div style={{ width: '200px', margin: 'auto' }}>\\\\n          <IconDropdown\\\\n            variant={text('variant', 'column-filter') as tSelectVariant}\\\\n            optionList={object('optionList', columnOption)}\\\\n            onChange={action('Value selected')}\\\\n            width={text('width', '10px')}\\\\n            isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n          />\\\\n        </div>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const BreadCrumbComponent = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <IconDropdown\\\\n          variant={text('variant', 'bread-crumb') as tSelectVariant}\\\\n          optionList={object('optionList', options)}\\\\n          onChange={action('Value selected')}\\\\n          value={text('value', 'strawberry')}\\\\n          width={text('width', '260px')}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const DatePickerDropDown = () => (\\\\n  <ThemeWrapper>\\\\n    <CardComponent style={{ height: '200px' }}>\\\\n      <IconDropdown\\\\n        variant={text('variant', 'date-picker') as tSelectVariant}\\\\n        optionList={object('optionList', datePickerOptions)}\\\\n        onChange={action('Value selected')}\\\\n        value={text('value', '50')}\\\\n        width={text('width', '80px')}\\\\n        showDownArrow={boolean('Show Down Arrow', true)}\\\\n        isMultiRegionStyled={boolean('Is Multi Region Styled', false)}\\\\n      />\\\\n    </CardComponent>\\\\n  </ThemeWrapper>\\\\n)\\\\nconst arrayMap = [\\\\n  { variant: 'column-filter', name: 'column-filter0' },\\\\n  { variant: 'column-filter', name: 'column-filter1' },\\\\n  { variant: 'column-filter', name: 'column-filter2' }\\\\n]\\\\n\\\\nexport const columnOptionList = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <div style={{ width: '200px', margin: 'auto' }}>\\\\n          {arrayMap.map((obj: any, index: number) => {\\\\n            return (\\\\n              <IconDropdown\\\\n                variant={text('variant', obj?.variant) as tSelectVariant}\\\\n                optionList={object('optionList', columnOption)}\\\\n                onChange={action('Value selected')}\\\\n                width={text('width', '10px')}\\\\n                isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n                key={index}\\\\n              />\\\\n            )\\\\n          })}\\\\n        </div>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const DropdownUniversal = () => {\\\\n  // reference to style\\\\n  // const theme = useContext(ThemeContext)\\\\n  // const borderBottom = `1px solid ${theme?.colors?.grey['A800']}`\\\\n  // const customStyle = {\\\\n  //   control: (provided: any) => ({\\\\n  //     ...provided,\\\\n  //     borderStyle: 'none',\\\\n  //     borderBottom,\\\\n  //     borderRadius: '0px',\\\\n  //     boxShadow: 'none',\\\\n  //     borderColor: theme?.colors?.grey?.A800,\\\\n  //     '&:focus': {\\\\n  //       borderStyle: 'none',\\\\n  //       borderBottom,\\\\n  //       boxShadow: 'none',\\\\n  //       borderColor: theme?.colors?.grey?.A800\\\\n  //     },\\\\n  //     '&:hover': {\\\\n  //       borderStyle: 'none',\\\\n  //       borderBottom,\\\\n  //       boxShadow: 'none',\\\\n  //       borderColor: theme?.colors?.grey?.A800\\\\n  //     }\\\\n  //   }),\\\\n  //   option: (provided: any, state: any) => ({\\\\n  //     ...provided,\\\\n  //     backgroundColor: state?.isSelected\\\\n  //       ? theme?.colors?.primary?.main\\\\n  //       : theme?.colors?.white,\\\\n  //     '&:hover': {\\\\n  //       backgroundColor: state?.isSelected\\\\n  //         ? theme?.colors?.primary?.main\\\\n  //         : theme?.colors?.grey['50']\\\\n  //     }\\\\n  //   }),\\\\n\\\\n  //   menu: (provided: any, state: any) => ({\\\\n  //     ...provided,\\\\n  //     backgroundColor: state?.isSelected\\\\n  //       ? theme.colors.primary.main\\\\n  //       : theme?.colors?.white,\\\\n  //     borderRadius: '2px',\\\\n  //     '&:hover': {\\\\n  //       backgroundColor: state?.isSelected\\\\n  //         ? theme?.colors?.primary?.main\\\\n  //         : theme?.colors?.white\\\\n  //     },\\\\n  //     marginTop: '5px',\\\\n  //     marginLeft: '16px',\\\\n  //     width: '90%'\\\\n  //   }),\\\\n  //   menuList: (provided: any) => ({\\\\n  //     ...provided,\\\\n  //     marginTop: '0px'\\\\n  //   }),\\\\n  //   valueContainer: (provided: any) => ({\\\\n  //     ...provided,\\\\n  //     padding: '0px'\\\\n  //   })\\\\n  // }\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <IconDropdown\\\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          width={text('width', '120px')}\\\\n          menuIsOpen={boolean('menuIsOpen', false)}\\\\n          primary={boolean('primary', false)}\\\\n          intent={text('intent', 'page') as tIntent}\\\\n          onChange={action('Value Changed')}\\\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n          disabled={boolean('disabled', false)}\\\\n          value='available'\\\\n          optionComponent={({ selectedOption }: any) => {\\\\n            return (\\\\n              <div>\\\\n                <div>{selectedOption?.color}</div>\\\\n                <div>{selectedOption?.label}</div>\\\\n              </div>\\\\n            )\\\\n          }}\\\\n          // customStyle={customStyle}\\\\n        >\\\\n          {({\\\\n            selectedOption,\\\\n            menuIsOpen,\\\\n            setMenuIsOpen\\\\n          }: IUniversalDropdownChildren) => {\\\\n            return (\\\\n              <Button\\\\n                onClick={() => {\\\\n                  setMenuIsOpen(!menuIsOpen)\\\\n                  action('Universal open/closed')(menuIsOpen)\\\\n                }}\\\\n                color={text('color', 'white')}\\\\n                bgColor={text('bgColor', 'black')}\\\\n                fullWidth={boolean('fullWidth', false)}\\\\n              >\\\\n                {selectedOption?.label}\\\\n              </Button>\\\\n            )\\\\n          }}\\\\n        </IconDropdown>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const TextFieldDropdown = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <IconDropdown\\\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          width={text('width', '120px')}\\\\n          menuIsOpen={boolean('menuIsOpen', false)}\\\\n          primary={boolean('primary', false)}\\\\n          intent={text('intent', 'page') as tIntent}\\\\n          onChange={action('Value Changed')}\\\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n          disabled={boolean('disabled', false)}\\\\n          value='available'\\\\n          optionComponent={({ selectedOption }: any) => {\\\\n            return (\\\\n              <div>\\\\n                <div>{selectedOption?.color}</div>\\\\n                <div>{selectedOption?.label}</div>\\\\n              </div>\\\\n            )\\\\n          }}\\\\n          // customStyle={customStyle}\\\\n        >\\\\n          {({\\\\n            selectedOption,\\\\n            menuIsOpen,\\\\n            setMenuIsOpen\\\\n          }: IUniversalDropdownChildren) => {\\\\n            return (\\\\n              <TextInput\\\\n                id='someId'\\\\n                name='someName'\\\\n                className='someClassName'\\\\n                label={text('label', 'Username')}\\\\n                labelColor={text('labelColor', 'text.inputLabel.default')}\\\\n                placeholder={text('placeholder', 'Enter text here...')}\\\\n                maxLength={number('maxLength', 10)}\\\\n                error={boolean('error', false)}\\\\n                errorMessage={text('errorMessage', '')}\\\\n                required={boolean('required', false)}\\\\n                fullWidth={boolean('fullWidth', false)}\\\\n                onChange={action('Triggered: onChange')}\\\\n                onClick={() => {\\\\n                  setMenuIsOpen(!menuIsOpen)\\\\n                  action('universal open/closed')(menuIsOpen)\\\\n                }}\\\\n                value={selectedOption?.value}\\\\n              />\\\\n            )\\\\n          }}\\\\n        </IconDropdown>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\",\\\"locationsMap\\\":{}},},\\n  title: `${path}/IconDropdown`,\\n  decorators: [withKnobs],\\n  component: IconDropdown\\n}\\n\\nconst ListViewOption = [\\n  {\\n    value: 'available',\\n    label: 'Mark As Available',\\n    color: 'blue',\\n    tooltipText: 'Mark As Available',\\n    isDisabled: true\\n  },\\n  {\\n    value: 'unavailable',\\n    label: 'Mark As Unavailable',\\n    color: 'red',\\n    tooltipText: 'Mark As Unavailable'\\n  },\\n  {\\n    value: 'active',\\n    label: 'Mark As Active',\\n    color: 'purple',\\n    tooltipText: 'Mark As Active'\\n  },\\n  {\\n    value: 'inactive',\\n    label: 'Mark As Inactive',\\n    color: 'green',\\n    tooltipText: 'Mark As Inactive'\\n  }\\n]\\n\\nconst MultiLevelListViewOption = [\\n  {\\n    id: 'available',\\n    value: 'available',\\n    label: 'Mark As Available',\\n    color: 'blue',\\n    tooltipText: 'Mark As Available',\\n    options: [\\n      {\\n        id: 'available',\\n        value: 'available',\\n        label: 'Mark As Child Available',\\n        color: 'blue',\\n        tooltipText: 'Mark As Child Available'\\n      },\\n      {\\n        id: 'unavailable',\\n        value: 'unavailable',\\n        label: 'Mark As Child Unavailable',\\n        color: 'red',\\n        tooltipText: 'Mark As Child Unavailable'\\n      },\\n      {\\n        id: 'active',\\n        value: 'active',\\n        label: 'Mark As Child Active',\\n        color: 'purple',\\n        tooltipText: 'Mark As Child Active'\\n      },\\n      {\\n        id: 'inactive',\\n        value: 'inactive',\\n        label: 'Mark As Child Inactive',\\n        color: 'green',\\n        tooltipText: 'Mark As Child Inactive',\\n        options: [\\n          {\\n            id: 'available',\\n            value: 'available',\\n            label: 'Mark As Grand Child Available',\\n            color: 'blue',\\n            tooltipText: 'Mark As Grand Child Available'\\n          },\\n          {\\n            id: 'unavailable',\\n            value: 'unavailable',\\n            label: 'Mark As Grand Child Unavailable',\\n            color: 'red',\\n            tooltipText: 'Mark As Grand Child Unavailable'\\n          }\\n        ]\\n      }\\n    ]\\n  },\\n  {\\n    id: 'unavailable',\\n    value: 'unavailable',\\n    label: 'Mark As Unavailable',\\n    color: 'red',\\n    tooltipText: 'Mark As Unavailable'\\n  },\\n  {\\n    id: 'active',\\n    value: 'active',\\n    label: 'Mark As Active',\\n    color: 'purple',\\n    tooltipText: 'Mark As Active'\\n  },\\n  {\\n    id: 'inactive',\\n    value: 'inactive',\\n    label: 'Mark As Inactive',\\n    color: 'green',\\n    tooltipText: 'Mark As Inactive'\\n  }\\n]\\n\\nconst paginationOptions = [\\n  { value: '25', label: '25 per page', title: '25 per page' },\\n  { value: '50', label: '50 per page', title: '50 per page' },\\n  { value: '100', label: '100 per page', title: '100 per page' },\\n  { value: '200', label: '200 per page', title: '200 per page' }\\n]\\n\\nconst columnOption = [\\n  { value: 'ascending', label: 'Sort Ascending', iconVariant: 'hide-menu-box' },\\n  {\\n    value: 'descending',\\n    label: 'Sort Descending',\\n    iconVariant: 'hub-location'\\n  },\\n  { value: 'hideColumn', label: 'Hide Column', iconVariant: 'close' },\\n  { value: 'pinLeft', label: 'Pin Left', iconVariant: 'angle-left' },\\n  { value: 'pinright', label: 'Pin Right', iconVariant: 'angle-right-thin' }\\n]\\n\\nconst options = [\\n  {\\n    value: 'emailVerificationPending',\\n    label: 'Email Verification Pending Shipper'\\n  },\\n  { value: 'allShippers', label: 'All Shippers' },\\n  { value: 'approvalPendingShippers', label: 'Approval Pending Shippers' }\\n]\\n\\nconst datePickerOptions = [\\n  { value: 'January', label: 'January' },\\n  { value: 'February', label: 'February' },\\n  { value: 'March', label: 'March' },\\n  { value: 'April', label: 'April' },\\n  { value: 'May', label: 'May' },\\n  { value: 'June', label: 'June' },\\n  { value: 'July', label: 'July' },\\n  { value: 'August', label: 'August' },\\n  { value: 'September', label: 'September' },\\n  { value: 'October', label: 'October' },\\n  { value: 'November', label: 'November' },\\n  { value: 'December', label: 'December' }\\n]\\n\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\nexport const ButtonDropdown = addSourceDecorator(() => (\\n  <ThemeWrapper>\\n    <Box p='2em' bgColor='grey.50'>\\n      <IconDropdown\\n        variant={text('varaint', 'button-dropdown') as tSelectVariant}\\n        optionList={object('optionList', ListViewOption)}\\n        width={text('width', '120px')}\\n        menuIsOpen={boolean('menuIsOpen', false)}\\n        iconButtonDetails={array('iconList', [\\n          'hide-menu-box',\\n          'More',\\n          'angle-down'\\n        ])}\\n        primary={boolean('primary', false)}\\n        intent={text('intent', 'page') as tIntent}\\n        onChange={action('Value Changed')}\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\n        disabled={boolean('disabled', false)}\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\n        tooltipProps={{\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\n        }}\\n      />\\n    </Box>\\n  </ThemeWrapper>\\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\nexport const TextDropdown = addSourceDecorator(() => (\\n  <ThemeWrapper>\\n    <Box p='2em' bgColor='grey.50'>\\n      <IconDropdown\\n        variant={text('varaint', 'text-dropdown') as tSelectVariant}\\n        optionList={object('optionList', ListViewOption)}\\n        width={text('width', '120px')}\\n        menuIsOpen={boolean('menuIsOpen', false)}\\n        iconButtonDetails={array('iconList', [\\n          'hide-menu-box',\\n          'More',\\n          'angle-down'\\n        ])}\\n        primary={boolean('primary', false)}\\n        intent={text('intent', 'page') as tIntent}\\n        onChange={action('Value Changed')}\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\n        disabled={boolean('disabled', false)}\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\n        tooltipProps={{\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\n        }}\\n      />\\n    </Box>\\n  </ThemeWrapper>\\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nexport const MultiLevelBreadCrumb = addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='2em' bgColor='grey.50'>\\n        <IconDropdown\\n          variant={text('variant', 'multilevel-breadcrumb') as tSelectVariant}\\n          optionList={object('optionList', MultiLevelListViewOption)}\\n          onChange={action('Value selected')}\\n          value={text('value', 'strawberry')}\\n          width={text('width', '260px')}\\n        />\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n  }, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nexport const MultiLevelButtonDropdown = addSourceDecorator(() => (\\n  <ThemeWrapper>\\n    <Box p='2em' bgColor='grey.50'>\\n      <IconDropdown\\n        variant={\\n          text('varaint', 'multilevel-button-dropdown') as tSelectVariant\\n        }\\n        optionList={object('optionList', MultiLevelListViewOption)}\\n        width={text('width', '120px')}\\n        menuIsOpen\\n        iconButtonDetails={array('iconList', [\\n          'hide-menu-box',\\n          'More',\\n          'angle-down'\\n        ])}\\n        defaultOpen='right'\\n        primary={boolean('primary', false)}\\n        intent={text('intent', 'page') as tIntent}\\n        handleClick={(id: any) => console.log('clicked from storybook', id)}\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\n        disabled={boolean('disabled', false)}\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\n        tooltipProps={{\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\n        }}\\n      />\\n    </Box>\\n  </ThemeWrapper>\\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nexport const PaginationDropdown = addSourceDecorator(() => (\\n  <ThemeWrapper>\\n    <CardComponent style={{ height: '300px' }}>\\n      <IconDropdown\\n        variant={text('variant', 'pagination-size') as tSelectVariant}\\n        optionList={object('optionList', paginationOptions)}\\n        onChange={action('Value selected')}\\n        value={text('value', '50')}\\n        width={text('width', '120px')}\\n      />\\n    </CardComponent>\\n  </ThemeWrapper>\\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nexport const columnOptionComponent = addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='2em' bgColor='grey.50'>\\n        <div style={{ width: '200px', margin: 'auto' }}>\\n          <IconDropdown\\n            variant={text('variant', 'column-filter') as tSelectVariant}\\n            optionList={object('optionList', columnOption)}\\n            onChange={action('Value selected')}\\n            width={text('width', '10px')}\\n            isSingleClickOption={boolean('isSingleClickOption', true)}\\n          />\\n        </div>\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nexport const BreadCrumbComponent = addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='2em' bgColor='grey.50'>\\n        <IconDropdown\\n          variant={text('variant', 'bread-crumb') as tSelectVariant}\\n          optionList={object('optionList', options)}\\n          onChange={action('Value selected')}\\n          value={text('value', 'strawberry')}\\n          width={text('width', '260px')}\\n        />\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nexport const DatePickerDropDown = addSourceDecorator(() => (\\n  <ThemeWrapper>\\n    <CardComponent style={{ height: '200px' }}>\\n      <IconDropdown\\n        variant={text('variant', 'date-picker') as tSelectVariant}\\n        optionList={object('optionList', datePickerOptions)}\\n        onChange={action('Value selected')}\\n        value={text('value', '50')}\\n        width={text('width', '80px')}\\n        showDownArrow={boolean('Show Down Arrow', true)}\\n        isMultiRegionStyled={boolean('Is Multi Region Styled', false)}\\n      />\\n    </CardComponent>\\n  </ThemeWrapper>\\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\nconst arrayMap = [\\n  { variant: 'column-filter', name: 'column-filter0' },\\n  { variant: 'column-filter', name: 'column-filter1' },\\n  { variant: 'column-filter', name: 'column-filter2' }\\n]\\n\\nexport const columnOptionList = addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='2em' bgColor='grey.50'>\\n        <div style={{ width: '200px', margin: 'auto' }}>\\n          {arrayMap.map((obj: any, index: number) => {\\n            return (\\n              <IconDropdown\\n                variant={text('variant', obj?.variant) as tSelectVariant}\\n                optionList={object('optionList', columnOption)}\\n                onChange={action('Value selected')}\\n                width={text('width', '10px')}\\n                isSingleClickOption={boolean('isSingleClickOption', true)}\\n                key={index}\\n              />\\n            )\\n          })}\\n        </div>\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nexport const DropdownUniversal = addSourceDecorator(() => {\\n  // reference to style\\n  // const theme = useContext(ThemeContext)\\n  // const borderBottom = `1px solid ${theme?.colors?.grey['A800']}`\\n  // const customStyle = {\\n  //   control: (provided: any) => ({\\n  //     ...provided,\\n  //     borderStyle: 'none',\\n  //     borderBottom,\\n  //     borderRadius: '0px',\\n  //     boxShadow: 'none',\\n  //     borderColor: theme?.colors?.grey?.A800,\\n  //     '&:focus': {\\n  //       borderStyle: 'none',\\n  //       borderBottom,\\n  //       boxShadow: 'none',\\n  //       borderColor: theme?.colors?.grey?.A800\\n  //     },\\n  //     '&:hover': {\\n  //       borderStyle: 'none',\\n  //       borderBottom,\\n  //       boxShadow: 'none',\\n  //       borderColor: theme?.colors?.grey?.A800\\n  //     }\\n  //   }),\\n  //   option: (provided: any, state: any) => ({\\n  //     ...provided,\\n  //     backgroundColor: state?.isSelected\\n  //       ? theme?.colors?.primary?.main\\n  //       : theme?.colors?.white,\\n  //     '&:hover': {\\n  //       backgroundColor: state?.isSelected\\n  //         ? theme?.colors?.primary?.main\\n  //         : theme?.colors?.grey['50']\\n  //     }\\n  //   }),\\n\\n  //   menu: (provided: any, state: any) => ({\\n  //     ...provided,\\n  //     backgroundColor: state?.isSelected\\n  //       ? theme.colors.primary.main\\n  //       : theme?.colors?.white,\\n  //     borderRadius: '2px',\\n  //     '&:hover': {\\n  //       backgroundColor: state?.isSelected\\n  //         ? theme?.colors?.primary?.main\\n  //         : theme?.colors?.white\\n  //     },\\n  //     marginTop: '5px',\\n  //     marginLeft: '16px',\\n  //     width: '90%'\\n  //   }),\\n  //   menuList: (provided: any) => ({\\n  //     ...provided,\\n  //     marginTop: '0px'\\n  //   }),\\n  //   valueContainer: (provided: any) => ({\\n  //     ...provided,\\n  //     padding: '0px'\\n  //   })\\n  // }\\n  return (\\n    <ThemeWrapper>\\n      <Box p='2em' bgColor='grey.50'>\\n        <IconDropdown\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\n          optionList={object('optionList', ListViewOption)}\\n          width={text('width', '120px')}\\n          menuIsOpen={boolean('menuIsOpen', false)}\\n          primary={boolean('primary', false)}\\n          intent={text('intent', 'page') as tIntent}\\n          onChange={action('Value Changed')}\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\n          disabled={boolean('disabled', false)}\\n          value='available'\\n          optionComponent={({ selectedOption }: any) => {\\n            return (\\n              <div>\\n                <div>{selectedOption?.color}</div>\\n                <div>{selectedOption?.label}</div>\\n              </div>\\n            )\\n          }}\\n          // customStyle={customStyle}\\n        >\\n          {({\\n            selectedOption,\\n            menuIsOpen,\\n            setMenuIsOpen\\n          }: IUniversalDropdownChildren) => {\\n            return (\\n              <Button\\n                onClick={() => {\\n                  setMenuIsOpen(!menuIsOpen)\\n                  action('Universal open/closed')(menuIsOpen)\\n                }}\\n                color={text('color', 'white')}\\n                bgColor={text('bgColor', 'black')}\\n                fullWidth={boolean('fullWidth', false)}\\n              >\\n                {selectedOption?.label}\\n              </Button>\\n            )\\n          }}\\n        </IconDropdown>\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nexport const TextFieldDropdown = addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='2em' bgColor='grey.50'>\\n        <IconDropdown\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\n          optionList={object('optionList', ListViewOption)}\\n          width={text('width', '120px')}\\n          menuIsOpen={boolean('menuIsOpen', false)}\\n          primary={boolean('primary', false)}\\n          intent={text('intent', 'page') as tIntent}\\n          onChange={action('Value Changed')}\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\n          disabled={boolean('disabled', false)}\\n          value='available'\\n          optionComponent={({ selectedOption }: any) => {\\n            return (\\n              <div>\\n                <div>{selectedOption?.color}</div>\\n                <div>{selectedOption?.label}</div>\\n              </div>\\n            )\\n          }}\\n          // customStyle={customStyle}\\n        >\\n          {({\\n            selectedOption,\\n            menuIsOpen,\\n            setMenuIsOpen\\n          }: IUniversalDropdownChildren) => {\\n            return (\\n              <TextInput\\n                id='someId'\\n                name='someName'\\n                className='someClassName'\\n                label={text('label', 'Username')}\\n                labelColor={text('labelColor', 'text.inputLabel.default')}\\n                placeholder={text('placeholder', 'Enter text here...')}\\n                maxLength={number('maxLength', 10)}\\n                error={boolean('error', false)}\\n                errorMessage={text('errorMessage', '')}\\n                required={boolean('required', false)}\\n                fullWidth={boolean('fullWidth', false)}\\n                onChange={action('Triggered: onChange')}\\n                onClick={() => {\\n                  setMenuIsOpen(!menuIsOpen)\\n                  action('universal open/closed')(menuIsOpen)\\n                }}\\n                value={selectedOption?.value}\\n              />\\n            )\\n          }}\\n        </IconDropdown>\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\",\n    \"locationsMap\": {}\n  }), _defineProperty(_parameters, \"storySource\", {\n    \"source\": \"import { action } from '@storybook/addon-actions'\\nimport {\\n  array,\\n  boolean,\\n  number,\\n  object,\\n  text,\\n  withKnobs\\n} from '@storybook/addon-knobs'\\nimport React from 'react'\\nimport IconDropdown from '.'\\nimport { path } from '..'\\nimport { Box } from '../../..'\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\nimport Button, { tIntent } from '../../atoms/Button'\\nimport CardComponent from '../../atoms/Card'\\nimport { tPlacement } from '../../../utilities/types'\\nimport {\\n  IUniversalDropdownChildren,\\n  tSelectVariant\\n} from '../DropDown/interface'\\nimport TextInput from '../TextInput'\\n\\nexport default {\\n  title: `${path}/IconDropdown`,\\n  decorators: [withKnobs],\\n  component: IconDropdown\\n}\\n\\nconst ListViewOption = [\\n  {\\n    value: 'available',\\n    label: 'Mark As Available',\\n    color: 'blue',\\n    tooltipText: 'Mark As Available',\\n    isDisabled: true\\n  },\\n  {\\n    value: 'unavailable',\\n    label: 'Mark As Unavailable',\\n    color: 'red',\\n    tooltipText: 'Mark As Unavailable'\\n  },\\n  {\\n    value: 'active',\\n    label: 'Mark As Active',\\n    color: 'purple',\\n    tooltipText: 'Mark As Active'\\n  },\\n  {\\n    value: 'inactive',\\n    label: 'Mark As Inactive',\\n    color: 'green',\\n    tooltipText: 'Mark As Inactive'\\n  }\\n]\\n\\nconst MultiLevelListViewOption = [\\n  {\\n    id: 'available',\\n    value: 'available',\\n    label: 'Mark As Available',\\n    color: 'blue',\\n    tooltipText: 'Mark As Available',\\n    options: [\\n      {\\n        id: 'available',\\n        value: 'available',\\n        label: 'Mark As Child Available',\\n        color: 'blue',\\n        tooltipText: 'Mark As Child Available'\\n      },\\n      {\\n        id: 'unavailable',\\n        value: 'unavailable',\\n        label: 'Mark As Child Unavailable',\\n        color: 'red',\\n        tooltipText: 'Mark As Child Unavailable'\\n      },\\n      {\\n        id: 'active',\\n        value: 'active',\\n        label: 'Mark As Child Active',\\n        color: 'purple',\\n        tooltipText: 'Mark As Child Active'\\n      },\\n      {\\n        id: 'inactive',\\n        value: 'inactive',\\n        label: 'Mark As Child Inactive',\\n        color: 'green',\\n        tooltipText: 'Mark As Child Inactive',\\n        options: [\\n          {\\n            id: 'available',\\n            value: 'available',\\n            label: 'Mark As Grand Child Available',\\n            color: 'blue',\\n            tooltipText: 'Mark As Grand Child Available'\\n          },\\n          {\\n            id: 'unavailable',\\n            value: 'unavailable',\\n            label: 'Mark As Grand Child Unavailable',\\n            color: 'red',\\n            tooltipText: 'Mark As Grand Child Unavailable'\\n          }\\n        ]\\n      }\\n    ]\\n  },\\n  {\\n    id: 'unavailable',\\n    value: 'unavailable',\\n    label: 'Mark As Unavailable',\\n    color: 'red',\\n    tooltipText: 'Mark As Unavailable'\\n  },\\n  {\\n    id: 'active',\\n    value: 'active',\\n    label: 'Mark As Active',\\n    color: 'purple',\\n    tooltipText: 'Mark As Active'\\n  },\\n  {\\n    id: 'inactive',\\n    value: 'inactive',\\n    label: 'Mark As Inactive',\\n    color: 'green',\\n    tooltipText: 'Mark As Inactive'\\n  }\\n]\\n\\nconst paginationOptions = [\\n  { value: '25', label: '25 per page', title: '25 per page' },\\n  { value: '50', label: '50 per page', title: '50 per page' },\\n  { value: '100', label: '100 per page', title: '100 per page' },\\n  { value: '200', label: '200 per page', title: '200 per page' }\\n]\\n\\nconst columnOption = [\\n  { value: 'ascending', label: 'Sort Ascending', iconVariant: 'hide-menu-box' },\\n  {\\n    value: 'descending',\\n    label: 'Sort Descending',\\n    iconVariant: 'hub-location'\\n  },\\n  { value: 'hideColumn', label: 'Hide Column', iconVariant: 'close' },\\n  { value: 'pinLeft', label: 'Pin Left', iconVariant: 'angle-left' },\\n  { value: 'pinright', label: 'Pin Right', iconVariant: 'angle-right-thin' }\\n]\\n\\nconst options = [\\n  {\\n    value: 'emailVerificationPending',\\n    label: 'Email Verification Pending Shipper'\\n  },\\n  { value: 'allShippers', label: 'All Shippers' },\\n  { value: 'approvalPendingShippers', label: 'Approval Pending Shippers' }\\n]\\n\\nconst datePickerOptions = [\\n  { value: 'January', label: 'January' },\\n  { value: 'February', label: 'February' },\\n  { value: 'March', label: 'March' },\\n  { value: 'April', label: 'April' },\\n  { value: 'May', label: 'May' },\\n  { value: 'June', label: 'June' },\\n  { value: 'July', label: 'July' },\\n  { value: 'August', label: 'August' },\\n  { value: 'September', label: 'September' },\\n  { value: 'October', label: 'October' },\\n  { value: 'November', label: 'November' },\\n  { value: 'December', label: 'December' }\\n]\\n\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\nexport const ButtonDropdown = () => (\\n  <ThemeWrapper>\\n    <Box p='2em' bgColor='grey.50'>\\n      <IconDropdown\\n        variant={text('varaint', 'button-dropdown') as tSelectVariant}\\n        optionList={object('optionList', ListViewOption)}\\n        width={text('width', '120px')}\\n        menuIsOpen={boolean('menuIsOpen', false)}\\n        iconButtonDetails={array('iconList', [\\n          'hide-menu-box',\\n          'More',\\n          'angle-down'\\n        ])}\\n        primary={boolean('primary', false)}\\n        intent={text('intent', 'page') as tIntent}\\n        onChange={action('Value Changed')}\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\n        disabled={boolean('disabled', false)}\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\n        tooltipProps={{\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\n        }}\\n      />\\n    </Box>\\n  </ThemeWrapper>\\n)\\n\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\nexport const TextDropdown = () => (\\n  <ThemeWrapper>\\n    <Box p='2em' bgColor='grey.50'>\\n      <IconDropdown\\n        variant={text('varaint', 'text-dropdown') as tSelectVariant}\\n        optionList={object('optionList', ListViewOption)}\\n        width={text('width', '120px')}\\n        menuIsOpen={boolean('menuIsOpen', false)}\\n        iconButtonDetails={array('iconList', [\\n          'hide-menu-box',\\n          'More',\\n          'angle-down'\\n        ])}\\n        primary={boolean('primary', false)}\\n        intent={text('intent', 'page') as tIntent}\\n        onChange={action('Value Changed')}\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\n        disabled={boolean('disabled', false)}\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\n        tooltipProps={{\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\n        }}\\n      />\\n    </Box>\\n  </ThemeWrapper>\\n)\\n\\nexport const MultiLevelBreadCrumb = () => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='2em' bgColor='grey.50'>\\n        <IconDropdown\\n          variant={text('variant', 'multilevel-breadcrumb') as tSelectVariant}\\n          optionList={object('optionList', MultiLevelListViewOption)}\\n          onChange={action('Value selected')}\\n          value={text('value', 'strawberry')}\\n          width={text('width', '260px')}\\n        />\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n  }\\n\\nexport const MultiLevelButtonDropdown = () => (\\n  <ThemeWrapper>\\n    <Box p='2em' bgColor='grey.50'>\\n      <IconDropdown\\n        variant={\\n          text('varaint', 'multilevel-button-dropdown') as tSelectVariant\\n        }\\n        optionList={object('optionList', MultiLevelListViewOption)}\\n        width={text('width', '120px')}\\n        menuIsOpen\\n        iconButtonDetails={array('iconList', [\\n          'hide-menu-box',\\n          'More',\\n          'angle-down'\\n        ])}\\n        defaultOpen='right'\\n        primary={boolean('primary', false)}\\n        intent={text('intent', 'page') as tIntent}\\n        handleClick={(id: any) => console.log('clicked from storybook', id)}\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\n        disabled={boolean('disabled', false)}\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\n        tooltipProps={{\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\n        }}\\n      />\\n    </Box>\\n  </ThemeWrapper>\\n)\\n\\nexport const PaginationDropdown = () => (\\n  <ThemeWrapper>\\n    <CardComponent style={{ height: '300px' }}>\\n      <IconDropdown\\n        variant={text('variant', 'pagination-size') as tSelectVariant}\\n        optionList={object('optionList', paginationOptions)}\\n        onChange={action('Value selected')}\\n        value={text('value', '50')}\\n        width={text('width', '120px')}\\n      />\\n    </CardComponent>\\n  </ThemeWrapper>\\n)\\n\\nexport const columnOptionComponent = () => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='2em' bgColor='grey.50'>\\n        <div style={{ width: '200px', margin: 'auto' }}>\\n          <IconDropdown\\n            variant={text('variant', 'column-filter') as tSelectVariant}\\n            optionList={object('optionList', columnOption)}\\n            onChange={action('Value selected')}\\n            width={text('width', '10px')}\\n            isSingleClickOption={boolean('isSingleClickOption', true)}\\n          />\\n        </div>\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}\\n\\nexport const BreadCrumbComponent = () => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='2em' bgColor='grey.50'>\\n        <IconDropdown\\n          variant={text('variant', 'bread-crumb') as tSelectVariant}\\n          optionList={object('optionList', options)}\\n          onChange={action('Value selected')}\\n          value={text('value', 'strawberry')}\\n          width={text('width', '260px')}\\n        />\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}\\n\\nexport const DatePickerDropDown = () => (\\n  <ThemeWrapper>\\n    <CardComponent style={{ height: '200px' }}>\\n      <IconDropdown\\n        variant={text('variant', 'date-picker') as tSelectVariant}\\n        optionList={object('optionList', datePickerOptions)}\\n        onChange={action('Value selected')}\\n        value={text('value', '50')}\\n        width={text('width', '80px')}\\n        showDownArrow={boolean('Show Down Arrow', true)}\\n        isMultiRegionStyled={boolean('Is Multi Region Styled', false)}\\n      />\\n    </CardComponent>\\n  </ThemeWrapper>\\n)\\nconst arrayMap = [\\n  { variant: 'column-filter', name: 'column-filter0' },\\n  { variant: 'column-filter', name: 'column-filter1' },\\n  { variant: 'column-filter', name: 'column-filter2' }\\n]\\n\\nexport const columnOptionList = () => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='2em' bgColor='grey.50'>\\n        <div style={{ width: '200px', margin: 'auto' }}>\\n          {arrayMap.map((obj: any, index: number) => {\\n            return (\\n              <IconDropdown\\n                variant={text('variant', obj?.variant) as tSelectVariant}\\n                optionList={object('optionList', columnOption)}\\n                onChange={action('Value selected')}\\n                width={text('width', '10px')}\\n                isSingleClickOption={boolean('isSingleClickOption', true)}\\n                key={index}\\n              />\\n            )\\n          })}\\n        </div>\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}\\n\\nexport const DropdownUniversal = () => {\\n  // reference to style\\n  // const theme = useContext(ThemeContext)\\n  // const borderBottom = `1px solid ${theme?.colors?.grey['A800']}`\\n  // const customStyle = {\\n  //   control: (provided: any) => ({\\n  //     ...provided,\\n  //     borderStyle: 'none',\\n  //     borderBottom,\\n  //     borderRadius: '0px',\\n  //     boxShadow: 'none',\\n  //     borderColor: theme?.colors?.grey?.A800,\\n  //     '&:focus': {\\n  //       borderStyle: 'none',\\n  //       borderBottom,\\n  //       boxShadow: 'none',\\n  //       borderColor: theme?.colors?.grey?.A800\\n  //     },\\n  //     '&:hover': {\\n  //       borderStyle: 'none',\\n  //       borderBottom,\\n  //       boxShadow: 'none',\\n  //       borderColor: theme?.colors?.grey?.A800\\n  //     }\\n  //   }),\\n  //   option: (provided: any, state: any) => ({\\n  //     ...provided,\\n  //     backgroundColor: state?.isSelected\\n  //       ? theme?.colors?.primary?.main\\n  //       : theme?.colors?.white,\\n  //     '&:hover': {\\n  //       backgroundColor: state?.isSelected\\n  //         ? theme?.colors?.primary?.main\\n  //         : theme?.colors?.grey['50']\\n  //     }\\n  //   }),\\n\\n  //   menu: (provided: any, state: any) => ({\\n  //     ...provided,\\n  //     backgroundColor: state?.isSelected\\n  //       ? theme.colors.primary.main\\n  //       : theme?.colors?.white,\\n  //     borderRadius: '2px',\\n  //     '&:hover': {\\n  //       backgroundColor: state?.isSelected\\n  //         ? theme?.colors?.primary?.main\\n  //         : theme?.colors?.white\\n  //     },\\n  //     marginTop: '5px',\\n  //     marginLeft: '16px',\\n  //     width: '90%'\\n  //   }),\\n  //   menuList: (provided: any) => ({\\n  //     ...provided,\\n  //     marginTop: '0px'\\n  //   }),\\n  //   valueContainer: (provided: any) => ({\\n  //     ...provided,\\n  //     padding: '0px'\\n  //   })\\n  // }\\n  return (\\n    <ThemeWrapper>\\n      <Box p='2em' bgColor='grey.50'>\\n        <IconDropdown\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\n          optionList={object('optionList', ListViewOption)}\\n          width={text('width', '120px')}\\n          menuIsOpen={boolean('menuIsOpen', false)}\\n          primary={boolean('primary', false)}\\n          intent={text('intent', 'page') as tIntent}\\n          onChange={action('Value Changed')}\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\n          disabled={boolean('disabled', false)}\\n          value='available'\\n          optionComponent={({ selectedOption }: any) => {\\n            return (\\n              <div>\\n                <div>{selectedOption?.color}</div>\\n                <div>{selectedOption?.label}</div>\\n              </div>\\n            )\\n          }}\\n          // customStyle={customStyle}\\n        >\\n          {({\\n            selectedOption,\\n            menuIsOpen,\\n            setMenuIsOpen\\n          }: IUniversalDropdownChildren) => {\\n            return (\\n              <Button\\n                onClick={() => {\\n                  setMenuIsOpen(!menuIsOpen)\\n                  action('Universal open/closed')(menuIsOpen)\\n                }}\\n                color={text('color', 'white')}\\n                bgColor={text('bgColor', 'black')}\\n                fullWidth={boolean('fullWidth', false)}\\n              >\\n                {selectedOption?.label}\\n              </Button>\\n            )\\n          }}\\n        </IconDropdown>\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}\\n\\nexport const TextFieldDropdown = () => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='2em' bgColor='grey.50'>\\n        <IconDropdown\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\n          optionList={object('optionList', ListViewOption)}\\n          width={text('width', '120px')}\\n          menuIsOpen={boolean('menuIsOpen', false)}\\n          primary={boolean('primary', false)}\\n          intent={text('intent', 'page') as tIntent}\\n          onChange={action('Value Changed')}\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\n          disabled={boolean('disabled', false)}\\n          value='available'\\n          optionComponent={({ selectedOption }: any) => {\\n            return (\\n              <div>\\n                <div>{selectedOption?.color}</div>\\n                <div>{selectedOption?.label}</div>\\n              </div>\\n            )\\n          }}\\n          // customStyle={customStyle}\\n        >\\n          {({\\n            selectedOption,\\n            menuIsOpen,\\n            setMenuIsOpen\\n          }: IUniversalDropdownChildren) => {\\n            return (\\n              <TextInput\\n                id='someId'\\n                name='someName'\\n                className='someClassName'\\n                label={text('label', 'Username')}\\n                labelColor={text('labelColor', 'text.inputLabel.default')}\\n                placeholder={text('placeholder', 'Enter text here...')}\\n                maxLength={number('maxLength', 10)}\\n                error={boolean('error', false)}\\n                errorMessage={text('errorMessage', '')}\\n                required={boolean('required', false)}\\n                fullWidth={boolean('fullWidth', false)}\\n                onChange={action('Triggered: onChange')}\\n                onClick={() => {\\n                  setMenuIsOpen(!menuIsOpen)\\n                  action('universal open/closed')(menuIsOpen)\\n                }}\\n                value={selectedOption?.value}\\n              />\\n            )\\n          }}\\n        </IconDropdown>\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}\\n\",\n    \"locationsMap\": {}\n  }), _parameters),\n  title: path + \"/IconDropdown\",\n  decorators: [withKnobs],\n  component: IconDropdown\n};\nvar ListViewOption = [{\n  value: 'available',\n  label: 'Mark As Available',\n  color: 'blue',\n  tooltipText: 'Mark As Available',\n  isDisabled: true\n}, {\n  value: 'unavailable',\n  label: 'Mark As Unavailable',\n  color: 'red',\n  tooltipText: 'Mark As Unavailable'\n}, {\n  value: 'active',\n  label: 'Mark As Active',\n  color: 'purple',\n  tooltipText: 'Mark As Active'\n}, {\n  value: 'inactive',\n  label: 'Mark As Inactive',\n  color: 'green',\n  tooltipText: 'Mark As Inactive'\n}];\nvar MultiLevelListViewOption = [{\n  id: 'available',\n  value: 'available',\n  label: 'Mark As Available',\n  color: 'blue',\n  tooltipText: 'Mark As Available',\n  options: [{\n    id: 'available',\n    value: 'available',\n    label: 'Mark As Child Available',\n    color: 'blue',\n    tooltipText: 'Mark As Child Available'\n  }, {\n    id: 'unavailable',\n    value: 'unavailable',\n    label: 'Mark As Child Unavailable',\n    color: 'red',\n    tooltipText: 'Mark As Child Unavailable'\n  }, {\n    id: 'active',\n    value: 'active',\n    label: 'Mark As Child Active',\n    color: 'purple',\n    tooltipText: 'Mark As Child Active'\n  }, {\n    id: 'inactive',\n    value: 'inactive',\n    label: 'Mark As Child Inactive',\n    color: 'green',\n    tooltipText: 'Mark As Child Inactive',\n    options: [{\n      id: 'available',\n      value: 'available',\n      label: 'Mark As Grand Child Available',\n      color: 'blue',\n      tooltipText: 'Mark As Grand Child Available'\n    }, {\n      id: 'unavailable',\n      value: 'unavailable',\n      label: 'Mark As Grand Child Unavailable',\n      color: 'red',\n      tooltipText: 'Mark As Grand Child Unavailable'\n    }]\n  }]\n}, {\n  id: 'unavailable',\n  value: 'unavailable',\n  label: 'Mark As Unavailable',\n  color: 'red',\n  tooltipText: 'Mark As Unavailable'\n}, {\n  id: 'active',\n  value: 'active',\n  label: 'Mark As Active',\n  color: 'purple',\n  tooltipText: 'Mark As Active'\n}, {\n  id: 'inactive',\n  value: 'inactive',\n  label: 'Mark As Inactive',\n  color: 'green',\n  tooltipText: 'Mark As Inactive'\n}];\nvar paginationOptions = [{\n  value: '25',\n  label: '25 per page',\n  title: '25 per page'\n}, {\n  value: '50',\n  label: '50 per page',\n  title: '50 per page'\n}, {\n  value: '100',\n  label: '100 per page',\n  title: '100 per page'\n}, {\n  value: '200',\n  label: '200 per page',\n  title: '200 per page'\n}];\nvar columnOption = [{\n  value: 'ascending',\n  label: 'Sort Ascending',\n  iconVariant: 'hide-menu-box'\n}, {\n  value: 'descending',\n  label: 'Sort Descending',\n  iconVariant: 'hub-location'\n}, {\n  value: 'hideColumn',\n  label: 'Hide Column',\n  iconVariant: 'close'\n}, {\n  value: 'pinLeft',\n  label: 'Pin Left',\n  iconVariant: 'angle-left'\n}, {\n  value: 'pinright',\n  label: 'Pin Right',\n  iconVariant: 'angle-right-thin'\n}];\nvar options = [{\n  value: 'emailVerificationPending',\n  label: 'Email Verification Pending Shipper'\n}, {\n  value: 'allShippers',\n  label: 'All Shippers'\n}, {\n  value: 'approvalPendingShippers',\n  label: 'Approval Pending Shippers'\n}];\nvar datePickerOptions = [{\n  value: 'January',\n  label: 'January'\n}, {\n  value: 'February',\n  label: 'February'\n}, {\n  value: 'March',\n  label: 'March'\n}, {\n  value: 'April',\n  label: 'April'\n}, {\n  value: 'May',\n  label: 'May'\n}, {\n  value: 'June',\n  label: 'June'\n}, {\n  value: 'July',\n  label: 'July'\n}, {\n  value: 'August',\n  label: 'August'\n}, {\n  value: 'September',\n  label: 'September'\n}, {\n  value: 'October',\n  label: 'October'\n}, {\n  value: 'November',\n  label: 'November'\n}, {\n  value: 'December',\n  label: 'December'\n}]; // wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\n\nexport var ButtonDropdown = addSourceDecorator(addSourceDecorator(addSourceDecorator(function () {\n  return React.createElement(ThemeWrapper, null, React.createElement(Box, {\n    p: '2em',\n    bgColor: 'grey.50'\n  }, React.createElement(IconDropdown, {\n    variant: text('varaint', 'button-dropdown'),\n    optionList: object('optionList', ListViewOption),\n    width: text('width', '120px'),\n    menuIsOpen: _boolean('menuIsOpen', false),\n    iconButtonDetails: array('iconList', ['hide-menu-box', 'More', 'angle-down']),\n    primary: _boolean('primary', false),\n    intent: text('intent', 'page'),\n    onChange: action('Value Changed'),\n    isSingleClickOption: _boolean('isSingleClickOption', true),\n    disabled: _boolean('disabled', false),\n    tooltipMessage: text('tooltipMessage', 'Mark Attendence as Absent.'),\n    tooltipProps: {\n      arrowPlacement: text('arrowPlacement', 'start')\n    }\n  })));\n}, {\n  __STORY__: __STORY__,\n  __ADDS_MAP__: __ADDS_MAP__,\n  __MAIN_FILE_LOCATION__: __MAIN_FILE_LOCATION__,\n  __MODULE_DEPENDENCIES__: __MODULE_DEPENDENCIES__,\n  __LOCAL_DEPENDENCIES__: __LOCAL_DEPENDENCIES__,\n  __SOURCE_PREFIX__: __SOURCE_PREFIX__,\n  __IDS_TO_FRAMEWORKS__: __IDS_TO_FRAMEWORKS__\n}), {\n  __STORY__: __STORY__,\n  __ADDS_MAP__: __ADDS_MAP__,\n  __MAIN_FILE_LOCATION__: __MAIN_FILE_LOCATION__,\n  __MODULE_DEPENDENCIES__: __MODULE_DEPENDENCIES__,\n  __LOCAL_DEPENDENCIES__: __LOCAL_DEPENDENCIES__,\n  __SOURCE_PREFIX__: __SOURCE_PREFIX__,\n  __IDS_TO_FRAMEWORKS__: __IDS_TO_FRAMEWORKS__\n}), {\n  __STORY__: __STORY__,\n  __ADDS_MAP__: __ADDS_MAP__,\n  __MAIN_FILE_LOCATION__: __MAIN_FILE_LOCATION__,\n  __MODULE_DEPENDENCIES__: __MODULE_DEPENDENCIES__,\n  __LOCAL_DEPENDENCIES__: __LOCAL_DEPENDENCIES__,\n  __SOURCE_PREFIX__: __SOURCE_PREFIX__,\n  __IDS_TO_FRAMEWORKS__: __IDS_TO_FRAMEWORKS__\n});\n;\n; // wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\n\nexport var TextDropdown = addSourceDecorator(addSourceDecorator(addSourceDecorator(function () {\n  return React.createElement(ThemeWrapper, null, React.createElement(Box, {\n    p: '2em',\n    bgColor: 'grey.50'\n  }, React.createElement(IconDropdown, {\n    variant: text('varaint', 'text-dropdown'),\n    optionList: object('optionList', ListViewOption),\n    width: text('width', '120px'),\n    menuIsOpen: _boolean('menuIsOpen', false),\n    iconButtonDetails: array('iconList', ['hide-menu-box', 'More', 'angle-down']),\n    primary: _boolean('primary', false),\n    intent: text('intent', 'page'),\n    onChange: action('Value Changed'),\n    isSingleClickOption: _boolean('isSingleClickOption', true),\n    disabled: _boolean('disabled', false),\n    tooltipMessage: text('tooltipMessage', 'Mark Attendence as Absent.'),\n    tooltipProps: {\n      arrowPlacement: text('arrowPlacement', 'start')\n    }\n  })));\n}, {\n  __STORY__: __STORY__,\n  __ADDS_MAP__: __ADDS_MAP__,\n  __MAIN_FILE_LOCATION__: __MAIN_FILE_LOCATION__,\n  __MODULE_DEPENDENCIES__: __MODULE_DEPENDENCIES__,\n  __LOCAL_DEPENDENCIES__: __LOCAL_DEPENDENCIES__,\n  __SOURCE_PREFIX__: __SOURCE_PREFIX__,\n  __IDS_TO_FRAMEWORKS__: __IDS_TO_FRAMEWORKS__\n}), {\n  __STORY__: __STORY__,\n  __ADDS_MAP__: __ADDS_MAP__,\n  __MAIN_FILE_LOCATION__: __MAIN_FILE_LOCATION__,\n  __MODULE_DEPENDENCIES__: __MODULE_DEPENDENCIES__,\n  __LOCAL_DEPENDENCIES__: __LOCAL_DEPENDENCIES__,\n  __SOURCE_PREFIX__: __SOURCE_PREFIX__,\n  __IDS_TO_FRAMEWORKS__: __IDS_TO_FRAMEWORKS__\n}), {\n  __STORY__: __STORY__,\n  __ADDS_MAP__: __ADDS_MAP__,\n  __MAIN_FILE_LOCATION__: __MAIN_FILE_LOCATION__,\n  __MODULE_DEPENDENCIES__: __MODULE_DEPENDENCIES__,\n  __LOCAL_DEPENDENCIES__: __LOCAL_DEPENDENCIES__,\n  __SOURCE_PREFIX__: __SOURCE_PREFIX__,\n  __IDS_TO_FRAMEWORKS__: __IDS_TO_FRAMEWORKS__\n});\n;\n;\nexport var MultiLevelBreadCrumb = addSourceDecorator(addSourceDecorator(addSourceDecorator(function () {\n  return React.createElement(ThemeWrapper, null, React.createElement(Box, {\n    p: '2em',\n    bgColor: 'grey.50'\n  }, React.createElement(IconDropdown, {\n    variant: text('variant', 'multilevel-breadcrumb'),\n    optionList: object('optionList', MultiLevelListViewOption),\n    onChange: action('Value selected'),\n    value: text('value', 'strawberry'),\n    width: text('width', '260px')\n  })));\n}, {\n  __STORY__: __STORY__,\n  __ADDS_MAP__: __ADDS_MAP__,\n  __MAIN_FILE_LOCATION__: __MAIN_FILE_LOCATION__,\n  __MODULE_DEPENDENCIES__: __MODULE_DEPENDENCIES__,\n  __LOCAL_DEPENDENCIES__: __LOCAL_DEPENDENCIES__,\n  __SOURCE_PREFIX__: __SOURCE_PREFIX__,\n  __IDS_TO_FRAMEWORKS__: __IDS_TO_FRAMEWORKS__\n}), {\n  __STORY__: __STORY__,\n  __ADDS_MAP__: __ADDS_MAP__,\n  __MAIN_FILE_LOCATION__: __MAIN_FILE_LOCATION__,\n  __MODULE_DEPENDENCIES__: __MODULE_DEPENDENCIES__,\n  __LOCAL_DEPENDENCIES__: __LOCAL_DEPENDENCIES__,\n  __SOURCE_PREFIX__: __SOURCE_PREFIX__,\n  __IDS_TO_FRAMEWORKS__: __IDS_TO_FRAMEWORKS__\n}), {\n  __STORY__: __STORY__,\n  __ADDS_MAP__: __ADDS_MAP__,\n  __MAIN_FILE_LOCATION__: __MAIN_FILE_LOCATION__,\n  __MODULE_DEPENDENCIES__: __MODULE_DEPENDENCIES__,\n  __LOCAL_DEPENDENCIES__: __LOCAL_DEPENDENCIES__,\n  __SOURCE_PREFIX__: __SOURCE_PREFIX__,\n  __IDS_TO_FRAMEWORKS__: __IDS_TO_FRAMEWORKS__\n});\n;\n;\nexport var MultiLevelButtonDropdown = addSourceDecorator(addSourceDecorator(addSourceDecorator(function () {\n  return React.createElement(ThemeWrapper, null, React.createElement(Box, {\n    p: '2em',\n    bgColor: 'grey.50'\n  }, React.createElement(IconDropdown, {\n    variant: text('varaint', 'multilevel-button-dropdown'),\n    optionList: object('optionList', MultiLevelListViewOption),\n    width: text('width', '120px'),\n    menuIsOpen: true,\n    iconButtonDetails: array('iconList', ['hide-menu-box', 'More', 'angle-down']),\n    defaultOpen: 'right',\n    primary: _boolean('primary', false),\n    intent: text('intent', 'page'),\n    handleClick: function handleClick(id) {\n      return console.log('clicked from storybook', id);\n    },\n    isSingleClickOption: _boolean('isSingleClickOption', true),\n    disabled: _boolean('disabled', false),\n    tooltipMessage: text('tooltipMessage', 'Mark Attendence as Absent.'),\n    tooltipProps: {\n      arrowPlacement: text('arrowPlacement', 'start')\n    }\n  })));\n}, {\n  __STORY__: __STORY__,\n  __ADDS_MAP__: __ADDS_MAP__,\n  __MAIN_FILE_LOCATION__: __MAIN_FILE_LOCATION__,\n  __MODULE_DEPENDENCIES__: __MODULE_DEPENDENCIES__,\n  __LOCAL_DEPENDENCIES__: __LOCAL_DEPENDENCIES__,\n  __SOURCE_PREFIX__: __SOURCE_PREFIX__,\n  __IDS_TO_FRAMEWORKS__: __IDS_TO_FRAMEWORKS__\n}), {\n  __STORY__: __STORY__,\n  __ADDS_MAP__: __ADDS_MAP__,\n  __MAIN_FILE_LOCATION__: __MAIN_FILE_LOCATION__,\n  __MODULE_DEPENDENCIES__: __MODULE_DEPENDENCIES__,\n  __LOCAL_DEPENDENCIES__: __LOCAL_DEPENDENCIES__,\n  __SOURCE_PREFIX__: __SOURCE_PREFIX__,\n  __IDS_TO_FRAMEWORKS__: __IDS_TO_FRAMEWORKS__\n}), {\n  __STORY__: __STORY__,\n  __ADDS_MAP__: __ADDS_MAP__,\n  __MAIN_FILE_LOCATION__: __MAIN_FILE_LOCATION__,\n  __MODULE_DEPENDENCIES__: __MODULE_DEPENDENCIES__,\n  __LOCAL_DEPENDENCIES__: __LOCAL_DEPENDENCIES__,\n  __SOURCE_PREFIX__: __SOURCE_PREFIX__,\n  __IDS_TO_FRAMEWORKS__: __IDS_TO_FRAMEWORKS__\n});\n;\n;\nexport var PaginationDropdown = addSourceDecorator(addSourceDecorator(addSourceDecorator(function () {\n  return React.createElement(ThemeWrapper, null, React.createElement(CardComponent, {\n    style: {\n      height: '300px'\n    }\n  }, React.createElement(IconDropdown, {\n    variant: text('variant', 'pagination-size'),\n    optionList: object('optionList', paginationOptions),\n    onChange: action('Value selected'),\n    value: text('value', '50'),\n    width: text('width', '120px')\n  })));\n}, {\n  __STORY__: __STORY__,\n  __ADDS_MAP__: __ADDS_MAP__,\n  __MAIN_FILE_LOCATION__: __MAIN_FILE_LOCATION__,\n  __MODULE_DEPENDENCIES__: __MODULE_DEPENDENCIES__,\n  __LOCAL_DEPENDENCIES__: __LOCAL_DEPENDENCIES__,\n  __SOURCE_PREFIX__: __SOURCE_PREFIX__,\n  __IDS_TO_FRAMEWORKS__: __IDS_TO_FRAMEWORKS__\n}), {\n  __STORY__: __STORY__,\n  __ADDS_MAP__: __ADDS_MAP__,\n  __MAIN_FILE_LOCATION__: __MAIN_FILE_LOCATION__,\n  __MODULE_DEPENDENCIES__: __MODULE_DEPENDENCIES__,\n  __LOCAL_DEPENDENCIES__: __LOCAL_DEPENDENCIES__,\n  __SOURCE_PREFIX__: __SOURCE_PREFIX__,\n  __IDS_TO_FRAMEWORKS__: __IDS_TO_FRAMEWORKS__\n}), {\n  __STORY__: __STORY__,\n  __ADDS_MAP__: __ADDS_MAP__,\n  __MAIN_FILE_LOCATION__: __MAIN_FILE_LOCATION__,\n  __MODULE_DEPENDENCIES__: __MODULE_DEPENDENCIES__,\n  __LOCAL_DEPENDENCIES__: __LOCAL_DEPENDENCIES__,\n  __SOURCE_PREFIX__: __SOURCE_PREFIX__,\n  __IDS_TO_FRAMEWORKS__: __IDS_TO_FRAMEWORKS__\n});\n;\n;\nexport var columnOptionComponent = addSourceDecorator(addSourceDecorator(addSourceDecorator(function () {\n  return React.createElement(ThemeWrapper, null, React.createElement(Box, {\n    p: '2em',\n    bgColor: 'grey.50'\n  }, React.createElement(\"div\", {\n    style: {\n      width: '200px',\n      margin: 'auto'\n    }\n  }, React.createElement(IconDropdown, {\n    variant: text('variant', 'column-filter'),\n    optionList: object('optionList', columnOption),\n    onChange: action('Value selected'),\n    width: text('width', '10px'),\n    isSingleClickOption: _boolean('isSingleClickOption', true)\n  }))));\n}, {\n  __STORY__: __STORY__,\n  __ADDS_MAP__: __ADDS_MAP__,\n  __MAIN_FILE_LOCATION__: __MAIN_FILE_LOCATION__,\n  __MODULE_DEPENDENCIES__: __MODULE_DEPENDENCIES__,\n  __LOCAL_DEPENDENCIES__: __LOCAL_DEPENDENCIES__,\n  __SOURCE_PREFIX__: __SOURCE_PREFIX__,\n  __IDS_TO_FRAMEWORKS__: __IDS_TO_FRAMEWORKS__\n}), {\n  __STORY__: __STORY__,\n  __ADDS_MAP__: __ADDS_MAP__,\n  __MAIN_FILE_LOCATION__: __MAIN_FILE_LOCATION__,\n  __MODULE_DEPENDENCIES__: __MODULE_DEPENDENCIES__,\n  __LOCAL_DEPENDENCIES__: __LOCAL_DEPENDENCIES__,\n  __SOURCE_PREFIX__: __SOURCE_PREFIX__,\n  __IDS_TO_FRAMEWORKS__: __IDS_TO_FRAMEWORKS__\n}), {\n  __STORY__: __STORY__,\n  __ADDS_MAP__: __ADDS_MAP__,\n  __MAIN_FILE_LOCATION__: __MAIN_FILE_LOCATION__,\n  __MODULE_DEPENDENCIES__: __MODULE_DEPENDENCIES__,\n  __LOCAL_DEPENDENCIES__: __LOCAL_DEPENDENCIES__,\n  __SOURCE_PREFIX__: __SOURCE_PREFIX__,\n  __IDS_TO_FRAMEWORKS__: __IDS_TO_FRAMEWORKS__\n});\n;\n;\nexport var BreadCrumbComponent = addSourceDecorator(addSourceDecorator(addSourceDecorator(function () {\n  return React.createElement(ThemeWrapper, null, React.createElement(Box, {\n    p: '2em',\n    bgColor: 'grey.50'\n  }, React.createElement(IconDropdown, {\n    variant: text('variant', 'bread-crumb'),\n    optionList: object('optionList', options),\n    onChange: action('Value selected'),\n    value: text('value', 'strawberry'),\n    width: text('width', '260px')\n  })));\n}, {\n  __STORY__: __STORY__,\n  __ADDS_MAP__: __ADDS_MAP__,\n  __MAIN_FILE_LOCATION__: __MAIN_FILE_LOCATION__,\n  __MODULE_DEPENDENCIES__: __MODULE_DEPENDENCIES__,\n  __LOCAL_DEPENDENCIES__: __LOCAL_DEPENDENCIES__,\n  __SOURCE_PREFIX__: __SOURCE_PREFIX__,\n  __IDS_TO_FRAMEWORKS__: __IDS_TO_FRAMEWORKS__\n}), {\n  __STORY__: __STORY__,\n  __ADDS_MAP__: __ADDS_MAP__,\n  __MAIN_FILE_LOCATION__: __MAIN_FILE_LOCATION__,\n  __MODULE_DEPENDENCIES__: __MODULE_DEPENDENCIES__,\n  __LOCAL_DEPENDENCIES__: __LOCAL_DEPENDENCIES__,\n  __SOURCE_PREFIX__: __SOURCE_PREFIX__,\n  __IDS_TO_FRAMEWORKS__: __IDS_TO_FRAMEWORKS__\n}), {\n  __STORY__: __STORY__,\n  __ADDS_MAP__: __ADDS_MAP__,\n  __MAIN_FILE_LOCATION__: __MAIN_FILE_LOCATION__,\n  __MODULE_DEPENDENCIES__: __MODULE_DEPENDENCIES__,\n  __LOCAL_DEPENDENCIES__: __LOCAL_DEPENDENCIES__,\n  __SOURCE_PREFIX__: __SOURCE_PREFIX__,\n  __IDS_TO_FRAMEWORKS__: __IDS_TO_FRAMEWORKS__\n});\n;\n;\nexport var DatePickerDropDown = addSourceDecorator(addSourceDecorator(addSourceDecorator(function () {\n  return React.createElement(ThemeWrapper, null, React.createElement(CardComponent, {\n    style: {\n      height: '200px'\n    }\n  }, React.createElement(IconDropdown, {\n    variant: text('variant', 'date-picker'),\n    optionList: object('optionList', datePickerOptions),\n    onChange: action('Value selected'),\n    value: text('value', '50'),\n    width: text('width', '80px'),\n    showDownArrow: _boolean('Show Down Arrow', true),\n    isMultiRegionStyled: _boolean('Is Multi Region Styled', false)\n  })));\n}, {\n  __STORY__: __STORY__,\n  __ADDS_MAP__: __ADDS_MAP__,\n  __MAIN_FILE_LOCATION__: __MAIN_FILE_LOCATION__,\n  __MODULE_DEPENDENCIES__: __MODULE_DEPENDENCIES__,\n  __LOCAL_DEPENDENCIES__: __LOCAL_DEPENDENCIES__,\n  __SOURCE_PREFIX__: __SOURCE_PREFIX__,\n  __IDS_TO_FRAMEWORKS__: __IDS_TO_FRAMEWORKS__\n}), {\n  __STORY__: __STORY__,\n  __ADDS_MAP__: __ADDS_MAP__,\n  __MAIN_FILE_LOCATION__: __MAIN_FILE_LOCATION__,\n  __MODULE_DEPENDENCIES__: __MODULE_DEPENDENCIES__,\n  __LOCAL_DEPENDENCIES__: __LOCAL_DEPENDENCIES__,\n  __SOURCE_PREFIX__: __SOURCE_PREFIX__,\n  __IDS_TO_FRAMEWORKS__: __IDS_TO_FRAMEWORKS__\n}), {\n  __STORY__: __STORY__,\n  __ADDS_MAP__: __ADDS_MAP__,\n  __MAIN_FILE_LOCATION__: __MAIN_FILE_LOCATION__,\n  __MODULE_DEPENDENCIES__: __MODULE_DEPENDENCIES__,\n  __LOCAL_DEPENDENCIES__: __LOCAL_DEPENDENCIES__,\n  __SOURCE_PREFIX__: __SOURCE_PREFIX__,\n  __IDS_TO_FRAMEWORKS__: __IDS_TO_FRAMEWORKS__\n});\n;\n;\nvar arrayMap = [{\n  variant: 'column-filter',\n  name: 'column-filter0'\n}, {\n  variant: 'column-filter',\n  name: 'column-filter1'\n}, {\n  variant: 'column-filter',\n  name: 'column-filter2'\n}];\nexport var columnOptionList = addSourceDecorator(addSourceDecorator(addSourceDecorator(function () {\n  return React.createElement(ThemeWrapper, null, React.createElement(Box, {\n    p: '2em',\n    bgColor: 'grey.50'\n  }, React.createElement(\"div\", {\n    style: {\n      width: '200px',\n      margin: 'auto'\n    }\n  }, arrayMap.map(function (obj, index) {\n    return React.createElement(IconDropdown, {\n      variant: text('variant', obj === null || obj === void 0 ? void 0 : obj.variant),\n      optionList: object('optionList', columnOption),\n      onChange: action('Value selected'),\n      width: text('width', '10px'),\n      isSingleClickOption: _boolean('isSingleClickOption', true),\n      key: index\n    });\n  }))));\n}, {\n  __STORY__: __STORY__,\n  __ADDS_MAP__: __ADDS_MAP__,\n  __MAIN_FILE_LOCATION__: __MAIN_FILE_LOCATION__,\n  __MODULE_DEPENDENCIES__: __MODULE_DEPENDENCIES__,\n  __LOCAL_DEPENDENCIES__: __LOCAL_DEPENDENCIES__,\n  __SOURCE_PREFIX__: __SOURCE_PREFIX__,\n  __IDS_TO_FRAMEWORKS__: __IDS_TO_FRAMEWORKS__\n}), {\n  __STORY__: __STORY__,\n  __ADDS_MAP__: __ADDS_MAP__,\n  __MAIN_FILE_LOCATION__: __MAIN_FILE_LOCATION__,\n  __MODULE_DEPENDENCIES__: __MODULE_DEPENDENCIES__,\n  __LOCAL_DEPENDENCIES__: __LOCAL_DEPENDENCIES__,\n  __SOURCE_PREFIX__: __SOURCE_PREFIX__,\n  __IDS_TO_FRAMEWORKS__: __IDS_TO_FRAMEWORKS__\n}), {\n  __STORY__: __STORY__,\n  __ADDS_MAP__: __ADDS_MAP__,\n  __MAIN_FILE_LOCATION__: __MAIN_FILE_LOCATION__,\n  __MODULE_DEPENDENCIES__: __MODULE_DEPENDENCIES__,\n  __LOCAL_DEPENDENCIES__: __LOCAL_DEPENDENCIES__,\n  __SOURCE_PREFIX__: __SOURCE_PREFIX__,\n  __IDS_TO_FRAMEWORKS__: __IDS_TO_FRAMEWORKS__\n});\n;\n;\nexport var DropdownUniversal = addSourceDecorator(addSourceDecorator(addSourceDecorator(function () {\n  // reference to style\n  // const theme = useContext(ThemeContext)\n  // const borderBottom = `1px solid ${theme?.colors?.grey['A800']}`\n  // const customStyle = {\n  //   control: (provided: any) => ({\n  //     ...provided,\n  //     borderStyle: 'none',\n  //     borderBottom,\n  //     borderRadius: '0px',\n  //     boxShadow: 'none',\n  //     borderColor: theme?.colors?.grey?.A800,\n  //     '&:focus': {\n  //       borderStyle: 'none',\n  //       borderBottom,\n  //       boxShadow: 'none',\n  //       borderColor: theme?.colors?.grey?.A800\n  //     },\n  //     '&:hover': {\n  //       borderStyle: 'none',\n  //       borderBottom,\n  //       boxShadow: 'none',\n  //       borderColor: theme?.colors?.grey?.A800\n  //     }\n  //   }),\n  //   option: (provided: any, state: any) => ({\n  //     ...provided,\n  //     backgroundColor: state?.isSelected\n  //       ? theme?.colors?.primary?.main\n  //       : theme?.colors?.white,\n  //     '&:hover': {\n  //       backgroundColor: state?.isSelected\n  //         ? theme?.colors?.primary?.main\n  //         : theme?.colors?.grey['50']\n  //     }\n  //   }),\n  //   menu: (provided: any, state: any) => ({\n  //     ...provided,\n  //     backgroundColor: state?.isSelected\n  //       ? theme.colors.primary.main\n  //       : theme?.colors?.white,\n  //     borderRadius: '2px',\n  //     '&:hover': {\n  //       backgroundColor: state?.isSelected\n  //         ? theme?.colors?.primary?.main\n  //         : theme?.colors?.white\n  //     },\n  //     marginTop: '5px',\n  //     marginLeft: '16px',\n  //     width: '90%'\n  //   }),\n  //   menuList: (provided: any) => ({\n  //     ...provided,\n  //     marginTop: '0px'\n  //   }),\n  //   valueContainer: (provided: any) => ({\n  //     ...provided,\n  //     padding: '0px'\n  //   })\n  // }\n  return React.createElement(ThemeWrapper, null, React.createElement(Box, {\n    p: '2em',\n    bgColor: 'grey.50'\n  }, React.createElement(IconDropdown, {\n    variant: text('varaint', 'default-dropdown'),\n    optionList: object('optionList', ListViewOption),\n    width: text('width', '120px'),\n    menuIsOpen: _boolean('menuIsOpen', false),\n    primary: _boolean('primary', false),\n    intent: text('intent', 'page'),\n    onChange: action('Value Changed'),\n    isSingleClickOption: _boolean('isSingleClickOption', true),\n    disabled: _boolean('disabled', false),\n    value: 'available',\n    optionComponent: function optionComponent(_a) {\n      var selectedOption = _a.selectedOption;\n      return React.createElement(\"div\", null, React.createElement(\"div\", null, selectedOption === null || selectedOption === void 0 ? void 0 : selectedOption.color), React.createElement(\"div\", null, selectedOption === null || selectedOption === void 0 ? void 0 : selectedOption.label));\n    }\n  }, function (_a) {\n    var selectedOption = _a.selectedOption,\n        menuIsOpen = _a.menuIsOpen,\n        setMenuIsOpen = _a.setMenuIsOpen;\n    return React.createElement(Button, {\n      onClick: function onClick() {\n        setMenuIsOpen(!menuIsOpen);\n        action('Universal open/closed')(menuIsOpen);\n      },\n      color: text('color', 'white'),\n      bgColor: text('bgColor', 'black'),\n      fullWidth: _boolean('fullWidth', false)\n    }, selectedOption === null || selectedOption === void 0 ? void 0 : selectedOption.label);\n  })));\n}, {\n  __STORY__: __STORY__,\n  __ADDS_MAP__: __ADDS_MAP__,\n  __MAIN_FILE_LOCATION__: __MAIN_FILE_LOCATION__,\n  __MODULE_DEPENDENCIES__: __MODULE_DEPENDENCIES__,\n  __LOCAL_DEPENDENCIES__: __LOCAL_DEPENDENCIES__,\n  __SOURCE_PREFIX__: __SOURCE_PREFIX__,\n  __IDS_TO_FRAMEWORKS__: __IDS_TO_FRAMEWORKS__\n}), {\n  __STORY__: __STORY__,\n  __ADDS_MAP__: __ADDS_MAP__,\n  __MAIN_FILE_LOCATION__: __MAIN_FILE_LOCATION__,\n  __MODULE_DEPENDENCIES__: __MODULE_DEPENDENCIES__,\n  __LOCAL_DEPENDENCIES__: __LOCAL_DEPENDENCIES__,\n  __SOURCE_PREFIX__: __SOURCE_PREFIX__,\n  __IDS_TO_FRAMEWORKS__: __IDS_TO_FRAMEWORKS__\n}), {\n  __STORY__: __STORY__,\n  __ADDS_MAP__: __ADDS_MAP__,\n  __MAIN_FILE_LOCATION__: __MAIN_FILE_LOCATION__,\n  __MODULE_DEPENDENCIES__: __MODULE_DEPENDENCIES__,\n  __LOCAL_DEPENDENCIES__: __LOCAL_DEPENDENCIES__,\n  __SOURCE_PREFIX__: __SOURCE_PREFIX__,\n  __IDS_TO_FRAMEWORKS__: __IDS_TO_FRAMEWORKS__\n});\n;\n;\nexport var TextFieldDropdown = addSourceDecorator(addSourceDecorator(addSourceDecorator(function () {\n  return React.createElement(ThemeWrapper, null, React.createElement(Box, {\n    p: '2em',\n    bgColor: 'grey.50'\n  }, React.createElement(IconDropdown, {\n    variant: text('varaint', 'default-dropdown'),\n    optionList: object('optionList', ListViewOption),\n    width: text('width', '120px'),\n    menuIsOpen: _boolean('menuIsOpen', false),\n    primary: _boolean('primary', false),\n    intent: text('intent', 'page'),\n    onChange: action('Value Changed'),\n    isSingleClickOption: _boolean('isSingleClickOption', true),\n    disabled: _boolean('disabled', false),\n    value: 'available',\n    optionComponent: function optionComponent(_a) {\n      var selectedOption = _a.selectedOption;\n      return React.createElement(\"div\", null, React.createElement(\"div\", null, selectedOption === null || selectedOption === void 0 ? void 0 : selectedOption.color), React.createElement(\"div\", null, selectedOption === null || selectedOption === void 0 ? void 0 : selectedOption.label));\n    }\n  }, function (_a) {\n    var selectedOption = _a.selectedOption,\n        menuIsOpen = _a.menuIsOpen,\n        setMenuIsOpen = _a.setMenuIsOpen;\n    return React.createElement(TextInput, {\n      id: 'someId',\n      name: 'someName',\n      className: 'someClassName',\n      label: text('label', 'Username'),\n      labelColor: text('labelColor', 'text.inputLabel.default'),\n      placeholder: text('placeholder', 'Enter text here...'),\n      maxLength: number('maxLength', 10),\n      error: _boolean('error', false),\n      errorMessage: text('errorMessage', ''),\n      required: _boolean('required', false),\n      fullWidth: _boolean('fullWidth', false),\n      onChange: action('Triggered: onChange'),\n      onClick: function onClick() {\n        setMenuIsOpen(!menuIsOpen);\n        action('universal open/closed')(menuIsOpen);\n      },\n      value: selectedOption === null || selectedOption === void 0 ? void 0 : selectedOption.value\n    });\n  })));\n}, {\n  __STORY__: __STORY__,\n  __ADDS_MAP__: __ADDS_MAP__,\n  __MAIN_FILE_LOCATION__: __MAIN_FILE_LOCATION__,\n  __MODULE_DEPENDENCIES__: __MODULE_DEPENDENCIES__,\n  __LOCAL_DEPENDENCIES__: __LOCAL_DEPENDENCIES__,\n  __SOURCE_PREFIX__: __SOURCE_PREFIX__,\n  __IDS_TO_FRAMEWORKS__: __IDS_TO_FRAMEWORKS__\n}), {\n  __STORY__: __STORY__,\n  __ADDS_MAP__: __ADDS_MAP__,\n  __MAIN_FILE_LOCATION__: __MAIN_FILE_LOCATION__,\n  __MODULE_DEPENDENCIES__: __MODULE_DEPENDENCIES__,\n  __LOCAL_DEPENDENCIES__: __LOCAL_DEPENDENCIES__,\n  __SOURCE_PREFIX__: __SOURCE_PREFIX__,\n  __IDS_TO_FRAMEWORKS__: __IDS_TO_FRAMEWORKS__\n}), {\n  __STORY__: __STORY__,\n  __ADDS_MAP__: __ADDS_MAP__,\n  __MAIN_FILE_LOCATION__: __MAIN_FILE_LOCATION__,\n  __MODULE_DEPENDENCIES__: __MODULE_DEPENDENCIES__,\n  __LOCAL_DEPENDENCIES__: __LOCAL_DEPENDENCIES__,\n  __SOURCE_PREFIX__: __SOURCE_PREFIX__,\n  __IDS_TO_FRAMEWORKS__: __IDS_TO_FRAMEWORKS__\n});","map":{"version":3,"sources":["/Users/farhanansari/Code/ui-library/node_modules/react-docgen-typescript-loader/dist/index.js!/Users/farhanansari/Code/ui-library/node_modules/eslint-loader/dist/cjs.js??ref--6-0!/Users/farhanansari/Code/ui-library/node_modules/@storybook/source-loader/dist/server/index.js??ref--11!/Users/farhanansari/Code/ui-library/node_modules/@storybook/source-loader/dist/server/index.js!/Users/farhanansari/Code/ui-library/node_modules/@storybook/source-loader/dist/server/index.js!/Users/farhanansari/Code/ui-library/src/components/molecules/IconDropdown/IconDropdown.stories.tsx"],"names":[],"mappings":";;;;AACA;AACA;AACA;AACA,IAAI,gBAAgB,GAAG,OAAO,CAAC,kCAAD,CAAP,CAA4C,UAAnE,C,CACA;;;AACA,IAAI,kBAAkB,GAAG,OAAO,CAAC,kCAAD,CAAP,CAA4C,SAArE,C,CACA;;;AACA,IAAI,iBAAiB,GAAG,2EAAxB,C,CACA;;AACA,IAAI,SAAS,GAAG,o7tKAAhB,C,CACA;;AACA,IAAI,YAAY,GAAG,EAAnB,C,CACA;;AACA,IAAI,sBAAsB,GAAG,2BAA7B,C,CACA;;AACA,IAAI,uBAAuB,GAAG,EAA9B,C,CACA;;AACA,IAAI,sBAAsB,GAAG,EAA7B,C,CACA;;AACA,IAAI,qBAAqB,GAAG,EAA5B;AAGA;AACA;AACA;;AACA,IAAI,gBAAgB,GAAG,OAAO,CAAC,kCAAD,CAAP,CAA4C,UAAnE,C,CACA;;;AACA,IAAI,kBAAkB,GAAG,OAAO,CAAC,kCAAD,CAAP,CAA4C,SAArE,C,CACA;;;AACA,IAAI,iBAAiB,GAAG,2EAAxB,C,CACA;;AACA,IAAI,SAAS,GAAG,mkqDAAhB,C,CACA;;AACA,IAAI,YAAY,GAAG,EAAnB,C,CACA;;AACA,IAAI,sBAAsB,GAAG,2BAA7B,C,CACA;;AACA,IAAI,uBAAuB,GAAG,EAA9B,C,CACA;;AACA,IAAI,sBAAsB,GAAG,EAA7B,C,CACA;;AACA,IAAI,qBAAqB,GAAG,EAA5B;AAGA;AACA;AACA;;AACA,IAAI,gBAAgB,GAAG,OAAO,CAAC,kCAAD,CAAP,CAA4C,UAAnE,C,CACA;;;AACA,IAAI,kBAAkB,GAAG,OAAO,CAAC,kCAAD,CAAP,CAA4C,SAArE,C,CACA;;;AACA,IAAI,iBAAiB,GAAG,2EAAxB,C,CACA;;AACA,IAAI,SAAS,GAAG,4ihBAAhB,C,CACA;;AACA,IAAI,YAAY,GAAG,EAAnB,C,CACA;;AACA,IAAI,sBAAsB,GAAG,2BAA7B,C,CACA;;AACA,IAAI,uBAAuB,GAAG,EAA9B,C,CACA;;AACA,IAAI,sBAAsB,GAAG,EAA7B,C,CACA;;AACA,IAAI,qBAAqB,GAAG,EAA5B;AAEA,SAAS,MAAT,QAAuB,0BAAvB;AACA,SACE,KADF,EAEE,OAAO,IAAP,QAFF,EAGE,MAHF,EAIE,MAJF,EAKE,IALF,EAME,SANF,QAOO,wBAPP;AAQA,OAAO,KAAP,MAAkB,OAAlB;AACA,OAAO,YAAP,MAAyB,GAAzB;AACA,SAAS,IAAT,QAAqB,IAArB;AACA,SAAS,GAAT,QAAoB,UAApB;AACA,OAAO,YAAP,MAAyB,4CAAzB;AACA,OAAO,MAAP,MAAgC,oBAAhC;AACA,OAAO,aAAP,MAA0B,kBAA1B;AAMA,OAAO,SAAP,MAAsB,cAAtB;AAEA,eAAe;AAAC,EAAA,UAAU;AAAG,mBAAc;AAAC,gBAAS,o7tKAAV;AAA+7tK,sBAAe;AAA98tK;AAAjB,iDAAi/tK;AAAC,cAAS,mkqDAAV;AAA8kqD,oBAAe;AAA7lqD,GAAj/tK,+CAAgm4N;AAAC,cAAS,4ihBAAV;AAAujhB,oBAAe;AAAtkhB,GAAhm4N,eAAX;AACb,EAAA,KAAK,EAAK,IAAI,GAAA,eADD;AAEb,EAAA,UAAU,EAAE,CAAC,SAAD,CAFC;AAGb,EAAA,SAAS,EAAE;AAHE,CAAf;AAMA,IAAM,cAAc,GAAG,CACrB;AACE,EAAA,KAAK,EAAE,WADT;AAEE,EAAA,KAAK,EAAE,mBAFT;AAGE,EAAA,KAAK,EAAE,MAHT;AAIE,EAAA,WAAW,EAAE,mBAJf;AAKE,EAAA,UAAU,EAAE;AALd,CADqB,EAQrB;AACE,EAAA,KAAK,EAAE,aADT;AAEE,EAAA,KAAK,EAAE,qBAFT;AAGE,EAAA,KAAK,EAAE,KAHT;AAIE,EAAA,WAAW,EAAE;AAJf,CARqB,EAcrB;AACE,EAAA,KAAK,EAAE,QADT;AAEE,EAAA,KAAK,EAAE,gBAFT;AAGE,EAAA,KAAK,EAAE,QAHT;AAIE,EAAA,WAAW,EAAE;AAJf,CAdqB,EAoBrB;AACE,EAAA,KAAK,EAAE,UADT;AAEE,EAAA,KAAK,EAAE,kBAFT;AAGE,EAAA,KAAK,EAAE,OAHT;AAIE,EAAA,WAAW,EAAE;AAJf,CApBqB,CAAvB;AA4BA,IAAM,wBAAwB,GAAG,CAC/B;AACE,EAAA,EAAE,EAAE,WADN;AAEE,EAAA,KAAK,EAAE,WAFT;AAGE,EAAA,KAAK,EAAE,mBAHT;AAIE,EAAA,KAAK,EAAE,MAJT;AAKE,EAAA,WAAW,EAAE,mBALf;AAME,EAAA,OAAO,EAAE,CACP;AACE,IAAA,EAAE,EAAE,WADN;AAEE,IAAA,KAAK,EAAE,WAFT;AAGE,IAAA,KAAK,EAAE,yBAHT;AAIE,IAAA,KAAK,EAAE,MAJT;AAKE,IAAA,WAAW,EAAE;AALf,GADO,EAQP;AACE,IAAA,EAAE,EAAE,aADN;AAEE,IAAA,KAAK,EAAE,aAFT;AAGE,IAAA,KAAK,EAAE,2BAHT;AAIE,IAAA,KAAK,EAAE,KAJT;AAKE,IAAA,WAAW,EAAE;AALf,GARO,EAeP;AACE,IAAA,EAAE,EAAE,QADN;AAEE,IAAA,KAAK,EAAE,QAFT;AAGE,IAAA,KAAK,EAAE,sBAHT;AAIE,IAAA,KAAK,EAAE,QAJT;AAKE,IAAA,WAAW,EAAE;AALf,GAfO,EAsBP;AACE,IAAA,EAAE,EAAE,UADN;AAEE,IAAA,KAAK,EAAE,UAFT;AAGE,IAAA,KAAK,EAAE,wBAHT;AAIE,IAAA,KAAK,EAAE,OAJT;AAKE,IAAA,WAAW,EAAE,wBALf;AAME,IAAA,OAAO,EAAE,CACP;AACE,MAAA,EAAE,EAAE,WADN;AAEE,MAAA,KAAK,EAAE,WAFT;AAGE,MAAA,KAAK,EAAE,+BAHT;AAIE,MAAA,KAAK,EAAE,MAJT;AAKE,MAAA,WAAW,EAAE;AALf,KADO,EAQP;AACE,MAAA,EAAE,EAAE,aADN;AAEE,MAAA,KAAK,EAAE,aAFT;AAGE,MAAA,KAAK,EAAE,iCAHT;AAIE,MAAA,KAAK,EAAE,KAJT;AAKE,MAAA,WAAW,EAAE;AALf,KARO;AANX,GAtBO;AANX,CAD+B,EAsD/B;AACE,EAAA,EAAE,EAAE,aADN;AAEE,EAAA,KAAK,EAAE,aAFT;AAGE,EAAA,KAAK,EAAE,qBAHT;AAIE,EAAA,KAAK,EAAE,KAJT;AAKE,EAAA,WAAW,EAAE;AALf,CAtD+B,EA6D/B;AACE,EAAA,EAAE,EAAE,QADN;AAEE,EAAA,KAAK,EAAE,QAFT;AAGE,EAAA,KAAK,EAAE,gBAHT;AAIE,EAAA,KAAK,EAAE,QAJT;AAKE,EAAA,WAAW,EAAE;AALf,CA7D+B,EAoE/B;AACE,EAAA,EAAE,EAAE,UADN;AAEE,EAAA,KAAK,EAAE,UAFT;AAGE,EAAA,KAAK,EAAE,kBAHT;AAIE,EAAA,KAAK,EAAE,OAJT;AAKE,EAAA,WAAW,EAAE;AALf,CApE+B,CAAjC;AA6EA,IAAM,iBAAiB,GAAG,CACxB;AAAE,EAAA,KAAK,EAAE,IAAT;AAAe,EAAA,KAAK,EAAE,aAAtB;AAAqC,EAAA,KAAK,EAAE;AAA5C,CADwB,EAExB;AAAE,EAAA,KAAK,EAAE,IAAT;AAAe,EAAA,KAAK,EAAE,aAAtB;AAAqC,EAAA,KAAK,EAAE;AAA5C,CAFwB,EAGxB;AAAE,EAAA,KAAK,EAAE,KAAT;AAAgB,EAAA,KAAK,EAAE,cAAvB;AAAuC,EAAA,KAAK,EAAE;AAA9C,CAHwB,EAIxB;AAAE,EAAA,KAAK,EAAE,KAAT;AAAgB,EAAA,KAAK,EAAE,cAAvB;AAAuC,EAAA,KAAK,EAAE;AAA9C,CAJwB,CAA1B;AAOA,IAAM,YAAY,GAAG,CACnB;AAAE,EAAA,KAAK,EAAE,WAAT;AAAsB,EAAA,KAAK,EAAE,gBAA7B;AAA+C,EAAA,WAAW,EAAE;AAA5D,CADmB,EAEnB;AACE,EAAA,KAAK,EAAE,YADT;AAEE,EAAA,KAAK,EAAE,iBAFT;AAGE,EAAA,WAAW,EAAE;AAHf,CAFmB,EAOnB;AAAE,EAAA,KAAK,EAAE,YAAT;AAAuB,EAAA,KAAK,EAAE,aAA9B;AAA6C,EAAA,WAAW,EAAE;AAA1D,CAPmB,EAQnB;AAAE,EAAA,KAAK,EAAE,SAAT;AAAoB,EAAA,KAAK,EAAE,UAA3B;AAAuC,EAAA,WAAW,EAAE;AAApD,CARmB,EASnB;AAAE,EAAA,KAAK,EAAE,UAAT;AAAqB,EAAA,KAAK,EAAE,WAA5B;AAAyC,EAAA,WAAW,EAAE;AAAtD,CATmB,CAArB;AAYA,IAAM,OAAO,GAAG,CACd;AACE,EAAA,KAAK,EAAE,0BADT;AAEE,EAAA,KAAK,EAAE;AAFT,CADc,EAKd;AAAE,EAAA,KAAK,EAAE,aAAT;AAAwB,EAAA,KAAK,EAAE;AAA/B,CALc,EAMd;AAAE,EAAA,KAAK,EAAE,yBAAT;AAAoC,EAAA,KAAK,EAAE;AAA3C,CANc,CAAhB;AASA,IAAM,iBAAiB,GAAG,CACxB;AAAE,EAAA,KAAK,EAAE,SAAT;AAAoB,EAAA,KAAK,EAAE;AAA3B,CADwB,EAExB;AAAE,EAAA,KAAK,EAAE,UAAT;AAAqB,EAAA,KAAK,EAAE;AAA5B,CAFwB,EAGxB;AAAE,EAAA,KAAK,EAAE,OAAT;AAAkB,EAAA,KAAK,EAAE;AAAzB,CAHwB,EAIxB;AAAE,EAAA,KAAK,EAAE,OAAT;AAAkB,EAAA,KAAK,EAAE;AAAzB,CAJwB,EAKxB;AAAE,EAAA,KAAK,EAAE,KAAT;AAAgB,EAAA,KAAK,EAAE;AAAvB,CALwB,EAMxB;AAAE,EAAA,KAAK,EAAE,MAAT;AAAiB,EAAA,KAAK,EAAE;AAAxB,CANwB,EAOxB;AAAE,EAAA,KAAK,EAAE,MAAT;AAAiB,EAAA,KAAK,EAAE;AAAxB,CAPwB,EAQxB;AAAE,EAAA,KAAK,EAAE,QAAT;AAAmB,EAAA,KAAK,EAAE;AAA1B,CARwB,EASxB;AAAE,EAAA,KAAK,EAAE,WAAT;AAAsB,EAAA,KAAK,EAAE;AAA7B,CATwB,EAUxB;AAAE,EAAA,KAAK,EAAE,SAAT;AAAoB,EAAA,KAAK,EAAE;AAA3B,CAVwB,EAWxB;AAAE,EAAA,KAAK,EAAE,UAAT;AAAqB,EAAA,KAAK,EAAE;AAA5B,CAXwB,EAYxB;AAAE,EAAA,KAAK,EAAE,UAAT;AAAqB,EAAA,KAAK,EAAE;AAA5B,CAZwB,CAA1B,C,CAeA;;AACA,OAAO,IAAM,cAAc,GAAG,kBAAkB,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,YAAA;AAAM,SAC3F,KAAA,CAAA,aAAA,CAAC,YAAD,EAAa,IAAb,EACE,KAAA,CAAA,aAAA,CAAC,GAAD,EAAI;AAAC,IAAA,CAAC,EAAC,KAAH;AAAS,IAAA,OAAO,EAAC;AAAjB,GAAJ,EACE,KAAA,CAAA,aAAA,CAAC,YAAD,EAAa;AACX,IAAA,OAAO,EAAE,IAAI,CAAC,SAAD,EAAY,iBAAZ,CADF;AAEX,IAAA,UAAU,EAAE,MAAM,CAAC,YAAD,EAAe,cAAf,CAFP;AAGX,IAAA,KAAK,EAAE,IAAI,CAAC,OAAD,EAAU,OAAV,CAHA;AAIX,IAAA,UAAU,EAAE,QAAO,CAAC,YAAD,EAAe,KAAf,CAJR;AAKX,IAAA,iBAAiB,EAAE,KAAK,CAAC,UAAD,EAAa,CACnC,eADmC,EAEnC,MAFmC,EAGnC,YAHmC,CAAb,CALb;AAUX,IAAA,OAAO,EAAE,QAAO,CAAC,SAAD,EAAY,KAAZ,CAVL;AAWX,IAAA,MAAM,EAAE,IAAI,CAAC,QAAD,EAAW,MAAX,CAXD;AAYX,IAAA,QAAQ,EAAE,MAAM,CAAC,eAAD,CAZL;AAaX,IAAA,mBAAmB,EAAE,QAAO,CAAC,qBAAD,EAAwB,IAAxB,CAbjB;AAcX,IAAA,QAAQ,EAAE,QAAO,CAAC,UAAD,EAAa,KAAb,CAdN;AAeX,IAAA,cAAc,EAAE,IAAI,CAAC,gBAAD,EAAmB,4BAAnB,CAfT;AAgBX,IAAA,YAAY,EAAE;AACZ,MAAA,cAAc,EAAE,IAAI,CAAC,gBAAD,EAAmB,OAAnB;AADR;AAhBH,GAAb,CADF,CADF,CAD2F;AAyB5F,CAzBqF,EAyBnF;AAAC,EAAA,SAAS,EAAA,SAAV;AAAY,EAAA,YAAY,EAAA,YAAxB;AAAyB,EAAA,sBAAsB,EAAA,sBAA/C;AAAgD,EAAA,uBAAuB,EAAA,uBAAvE;AAAwE,EAAA,sBAAsB,EAAA,sBAA9F;AAA+F,EAAA,iBAAiB,EAAA,iBAAhH;AAAiH,EAAA,qBAAqB,EAAA;AAAtI,CAzBmF,CAAnB,EAyB0E;AAAC,EAAA,SAAS,EAAA,SAAV;AAAY,EAAA,YAAY,EAAA,YAAxB;AAAyB,EAAA,sBAAsB,EAAA,sBAA/C;AAAgD,EAAA,uBAAuB,EAAA,uBAAvE;AAAwE,EAAA,sBAAsB,EAAA,sBAA9F;AAA+F,EAAA,iBAAiB,EAAA,iBAAhH;AAAiH,EAAA,qBAAqB,EAAA;AAAtI,CAzB1E,CAAnB,EAyBuO;AAAC,EAAA,SAAS,EAAA,SAAV;AAAY,EAAA,YAAY,EAAA,YAAxB;AAAyB,EAAA,sBAAsB,EAAA,sBAA/C;AAAgD,EAAA,uBAAuB,EAAA,uBAAvE;AAAwE,EAAA,sBAAsB,EAAA,sBAA9F;AAA+F,EAAA,iBAAiB,EAAA,iBAAhH;AAAiH,EAAA,qBAAqB,EAAA;AAAtI,CAzBvO,CAAzC;AAyByZ;AAAC,C,CAEja;;AACA,OAAO,IAAM,YAAY,GAAG,kBAAkB,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,YAAA;AAAM,SACzF,KAAA,CAAA,aAAA,CAAC,YAAD,EAAa,IAAb,EACE,KAAA,CAAA,aAAA,CAAC,GAAD,EAAI;AAAC,IAAA,CAAC,EAAC,KAAH;AAAS,IAAA,OAAO,EAAC;AAAjB,GAAJ,EACE,KAAA,CAAA,aAAA,CAAC,YAAD,EAAa;AACX,IAAA,OAAO,EAAE,IAAI,CAAC,SAAD,EAAY,eAAZ,CADF;AAEX,IAAA,UAAU,EAAE,MAAM,CAAC,YAAD,EAAe,cAAf,CAFP;AAGX,IAAA,KAAK,EAAE,IAAI,CAAC,OAAD,EAAU,OAAV,CAHA;AAIX,IAAA,UAAU,EAAE,QAAO,CAAC,YAAD,EAAe,KAAf,CAJR;AAKX,IAAA,iBAAiB,EAAE,KAAK,CAAC,UAAD,EAAa,CACnC,eADmC,EAEnC,MAFmC,EAGnC,YAHmC,CAAb,CALb;AAUX,IAAA,OAAO,EAAE,QAAO,CAAC,SAAD,EAAY,KAAZ,CAVL;AAWX,IAAA,MAAM,EAAE,IAAI,CAAC,QAAD,EAAW,MAAX,CAXD;AAYX,IAAA,QAAQ,EAAE,MAAM,CAAC,eAAD,CAZL;AAaX,IAAA,mBAAmB,EAAE,QAAO,CAAC,qBAAD,EAAwB,IAAxB,CAbjB;AAcX,IAAA,QAAQ,EAAE,QAAO,CAAC,UAAD,EAAa,KAAb,CAdN;AAeX,IAAA,cAAc,EAAE,IAAI,CAAC,gBAAD,EAAmB,4BAAnB,CAfT;AAgBX,IAAA,YAAY,EAAE;AACZ,MAAA,cAAc,EAAE,IAAI,CAAC,gBAAD,EAAmB,OAAnB;AADR;AAhBH,GAAb,CADF,CADF,CADyF;AAyB1F,CAzBmF,EAyBjF;AAAC,EAAA,SAAS,EAAA,SAAV;AAAY,EAAA,YAAY,EAAA,YAAxB;AAAyB,EAAA,sBAAsB,EAAA,sBAA/C;AAAgD,EAAA,uBAAuB,EAAA,uBAAvE;AAAwE,EAAA,sBAAsB,EAAA,sBAA9F;AAA+F,EAAA,iBAAiB,EAAA,iBAAhH;AAAiH,EAAA,qBAAqB,EAAA;AAAtI,CAzBiF,CAAnB,EAyB4E;AAAC,EAAA,SAAS,EAAA,SAAV;AAAY,EAAA,YAAY,EAAA,YAAxB;AAAyB,EAAA,sBAAsB,EAAA,sBAA/C;AAAgD,EAAA,uBAAuB,EAAA,uBAAvE;AAAwE,EAAA,sBAAsB,EAAA,sBAA9F;AAA+F,EAAA,iBAAiB,EAAA,iBAAhH;AAAiH,EAAA,qBAAqB,EAAA;AAAtI,CAzB5E,CAAnB,EAyByO;AAAC,EAAA,SAAS,EAAA,SAAV;AAAY,EAAA,YAAY,EAAA,YAAxB;AAAyB,EAAA,sBAAsB,EAAA,sBAA/C;AAAgD,EAAA,uBAAuB,EAAA,uBAAvE;AAAwE,EAAA,sBAAsB,EAAA,sBAA9F;AAA+F,EAAA,iBAAiB,EAAA,iBAAhH;AAAiH,EAAA,qBAAqB,EAAA;AAAtI,CAzBzO,CAAvC;AAyByZ;AAAC;AAEja,OAAO,IAAM,oBAAoB,GAAG,kBAAkB,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,YAAA;AAC3F,SACE,KAAA,CAAA,aAAA,CAAC,YAAD,EAAa,IAAb,EACE,KAAA,CAAA,aAAA,CAAC,GAAD,EAAI;AAAC,IAAA,CAAC,EAAC,KAAH;AAAS,IAAA,OAAO,EAAC;AAAjB,GAAJ,EACE,KAAA,CAAA,aAAA,CAAC,YAAD,EAAa;AACX,IAAA,OAAO,EAAE,IAAI,CAAC,SAAD,EAAY,uBAAZ,CADF;AAEX,IAAA,UAAU,EAAE,MAAM,CAAC,YAAD,EAAe,wBAAf,CAFP;AAGX,IAAA,QAAQ,EAAE,MAAM,CAAC,gBAAD,CAHL;AAIX,IAAA,KAAK,EAAE,IAAI,CAAC,OAAD,EAAU,YAAV,CAJA;AAKX,IAAA,KAAK,EAAE,IAAI,CAAC,OAAD,EAAU,OAAV;AALA,GAAb,CADF,CADF,CADF;AAaC,CAdyF,EAcvF;AAAC,EAAA,SAAS,EAAA,SAAV;AAAY,EAAA,YAAY,EAAA,YAAxB;AAAyB,EAAA,sBAAsB,EAAA,sBAA/C;AAAgD,EAAA,uBAAuB,EAAA,uBAAvE;AAAwE,EAAA,sBAAsB,EAAA,sBAA9F;AAA+F,EAAA,iBAAiB,EAAA,iBAAhH;AAAiH,EAAA,qBAAqB,EAAA;AAAtI,CAduF,CAAnB,EAcsE;AAAC,EAAA,SAAS,EAAA,SAAV;AAAY,EAAA,YAAY,EAAA,YAAxB;AAAyB,EAAA,sBAAsB,EAAA,sBAA/C;AAAgD,EAAA,uBAAuB,EAAA,uBAAvE;AAAwE,EAAA,sBAAsB,EAAA,sBAA9F;AAA+F,EAAA,iBAAiB,EAAA,iBAAhH;AAAiH,EAAA,qBAAqB,EAAA;AAAtI,CAdtE,CAAnB,EAcmO;AAAC,EAAA,SAAS,EAAA,SAAV;AAAY,EAAA,YAAY,EAAA,YAAxB;AAAyB,EAAA,sBAAsB,EAAA,sBAA/C;AAAgD,EAAA,uBAAuB,EAAA,uBAAvE;AAAwE,EAAA,sBAAsB,EAAA,sBAA9F;AAA+F,EAAA,iBAAiB,EAAA,iBAAhH;AAAiH,EAAA,qBAAqB,EAAA;AAAtI,CAdnO,CAA/C;AAc2Z;AAAC;AAEna,OAAO,IAAM,wBAAwB,GAAG,kBAAkB,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,YAAA;AAAM,SACrG,KAAA,CAAA,aAAA,CAAC,YAAD,EAAa,IAAb,EACE,KAAA,CAAA,aAAA,CAAC,GAAD,EAAI;AAAC,IAAA,CAAC,EAAC,KAAH;AAAS,IAAA,OAAO,EAAC;AAAjB,GAAJ,EACE,KAAA,CAAA,aAAA,CAAC,YAAD,EAAa;AACX,IAAA,OAAO,EACL,IAAI,CAAC,SAAD,EAAY,4BAAZ,CAFK;AAIX,IAAA,UAAU,EAAE,MAAM,CAAC,YAAD,EAAe,wBAAf,CAJP;AAKX,IAAA,KAAK,EAAE,IAAI,CAAC,OAAD,EAAU,OAAV,CALA;AAMX,IAAA,UAAU,EAAA,IANC;AAOX,IAAA,iBAAiB,EAAE,KAAK,CAAC,UAAD,EAAa,CACnC,eADmC,EAEnC,MAFmC,EAGnC,YAHmC,CAAb,CAPb;AAYX,IAAA,WAAW,EAAC,OAZD;AAaX,IAAA,OAAO,EAAE,QAAO,CAAC,SAAD,EAAY,KAAZ,CAbL;AAcX,IAAA,MAAM,EAAE,IAAI,CAAC,QAAD,EAAW,MAAX,CAdD;AAeX,IAAA,WAAW,EAAE,qBAAC,EAAD,EAAQ;AAAK,aAAA,OAAO,CAAC,GAAR,CAAY,wBAAZ,EAAA,EAAA,CAAA;AAAyC,KAfxD;AAgBX,IAAA,mBAAmB,EAAE,QAAO,CAAC,qBAAD,EAAwB,IAAxB,CAhBjB;AAiBX,IAAA,QAAQ,EAAE,QAAO,CAAC,UAAD,EAAa,KAAb,CAjBN;AAkBX,IAAA,cAAc,EAAE,IAAI,CAAC,gBAAD,EAAmB,4BAAnB,CAlBT;AAmBX,IAAA,YAAY,EAAE;AACZ,MAAA,cAAc,EAAE,IAAI,CAAC,gBAAD,EAAmB,OAAnB;AADR;AAnBH,GAAb,CADF,CADF,CADqG;AA4BtG,CA5B+F,EA4B7F;AAAC,EAAA,SAAS,EAAA,SAAV;AAAY,EAAA,YAAY,EAAA,YAAxB;AAAyB,EAAA,sBAAsB,EAAA,sBAA/C;AAAgD,EAAA,uBAAuB,EAAA,uBAAvE;AAAwE,EAAA,sBAAsB,EAAA,sBAA9F;AAA+F,EAAA,iBAAiB,EAAA,iBAAhH;AAAiH,EAAA,qBAAqB,EAAA;AAAtI,CA5B6F,CAAnB,EA4BgE;AAAC,EAAA,SAAS,EAAA,SAAV;AAAY,EAAA,YAAY,EAAA,YAAxB;AAAyB,EAAA,sBAAsB,EAAA,sBAA/C;AAAgD,EAAA,uBAAuB,EAAA,uBAAvE;AAAwE,EAAA,sBAAsB,EAAA,sBAA9F;AAA+F,EAAA,iBAAiB,EAAA,iBAAhH;AAAiH,EAAA,qBAAqB,EAAA;AAAtI,CA5BhE,CAAnB,EA4B6N;AAAC,EAAA,SAAS,EAAA,SAAV;AAAY,EAAA,YAAY,EAAA,YAAxB;AAAyB,EAAA,sBAAsB,EAAA,sBAA/C;AAAgD,EAAA,uBAAuB,EAAA,uBAAvE;AAAwE,EAAA,sBAAsB,EAAA,sBAA9F;AAA+F,EAAA,iBAAiB,EAAA,iBAAhH;AAAiH,EAAA,qBAAqB,EAAA;AAAtI,CA5B7N,CAAnD;AA4ByZ;AAAC;AAEja,OAAO,IAAM,kBAAkB,GAAG,kBAAkB,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,YAAA;AAAM,SAC/F,KAAA,CAAA,aAAA,CAAC,YAAD,EAAa,IAAb,EACE,KAAA,CAAA,aAAA,CAAC,aAAD,EAAc;AAAC,IAAA,KAAK,EAAE;AAAE,MAAA,MAAM,EAAE;AAAV;AAAR,GAAd,EACE,KAAA,CAAA,aAAA,CAAC,YAAD,EAAa;AACX,IAAA,OAAO,EAAE,IAAI,CAAC,SAAD,EAAY,iBAAZ,CADF;AAEX,IAAA,UAAU,EAAE,MAAM,CAAC,YAAD,EAAe,iBAAf,CAFP;AAGX,IAAA,QAAQ,EAAE,MAAM,CAAC,gBAAD,CAHL;AAIX,IAAA,KAAK,EAAE,IAAI,CAAC,OAAD,EAAU,IAAV,CAJA;AAKX,IAAA,KAAK,EAAE,IAAI,CAAC,OAAD,EAR8E,OAQ9E;AALA,GAAb,CADF,CADF,CAD+F;AAYhG,CAZyF,EAYvF;AAAC,EAAA,SAAS,EAAA,SAAV;AAAY,EAAA,YAAY,EAAA,YAAxB;AAAyB,EAAA,sBAAsB,EAAA,sBAA/C;AAAgD,EAAA,uBAAuB,EAAA,uBAAvE;AAAwE,EAAA,sBAAsB,EAAA,sBAA9F;AAA+F,EAAA,iBAAiB,EAAA,iBAAhH;AAAiH,EAAA,qBAAqB,EAAA;AAAtI,CAZuF,CAAnB,EAYsE;AAAC,EAAA,SAAS,EAAA,SAAV;AAAY,EAAA,YAAY,EAAA,YAAxB;AAAyB,EAAA,sBAAsB,EAAA,sBAA/C;AAAgD,EAAA,uBAAuB,EAAA,uBAAvE;AAAwE,EAAA,sBAAsB,EAAA,sBAA9F;AAA+F,EAAA,iBAAiB,EAAA,iBAAhH;AAAiH,EAAA,qBAAqB,EAAA;AAAtI,CAZtE,CAAnB,EAYmO;AAAC,EAAA,SAAS,EAAA,SAAV;AAAY,EAAA,YAAY,EAAA,YAAxB;AAAyB,EAAA,sBAAsB,EAAA,sBAA/C;AAAgD,EAAA,uBAAuB,EAAA,uBAAvE;AAAwE,EAAA,sBAAsB,EAAA,sBAA9F;AAA+F,EAAA,iBAAiB,EAAA,iBAAhH;AAAiH,EAAA,qBAAqB,EAAA;AAAtI,CAZnO,CAA7C;AAYyZ;AAAC;AAEja,OAAO,IAAM,qBAAqB,GAAG,kBAAkB,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,YAAA;AAC5F,SACE,KAAA,CAAA,aAAA,CAAC,YAAD,EAAa,IAAb,EACE,KAAA,CAAA,aAAA,CAAC,GAAD,EAAI;AAAC,IAAA,CAAC,EAAC,KAAH;AAAS,IAAA,OAAO,EAAC;AAAjB,GAAJ,EACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,IAAA,KAAK,EAAE;AAAE,MAAA,KAAK,EAAE,OAAT;AAAkB,MAAA,MAAM,EAAE;AAA1B;AAAZ,GAAA,EACE,KAAA,CAAA,aAAA,CAAC,YAAD,EAAa;AACX,IAAA,OAAO,EAAE,IAAI,CAAC,SAAD,EAAY,eAAZ,CADF;AAEX,IAAA,UAAU,EAAE,MAAM,CAAC,YAAD,EAAe,YAAf,CAFP;AAGX,IAAA,QAAQ,EAAE,MAAM,CAAC,gBAAD,CAHL;AAIX,IAAA,KAAK,EAAE,IAAI,CAAC,OAAD,EAAU,MAAV,CAJA;AAKX,IAAA,mBAAmB,EAAE,QAAO,CAAC,qBAAD,EAAwB,IAAxB;AALjB,GAAb,CADF,CADF,CADF,CADF;AAeD,CAhB4F,EAgB1F;AAAC,EAAA,SAAS,EAAA,SAAV;AAAY,EAAA,YAAY,EAAA,YAAxB;AAAyB,EAAA,sBAAsB,EAAA,sBAA/C;AAAgD,EAAA,uBAAuB,EAAA,uBAAvE;AAAwE,EAAA,sBAAsB,EAAA,sBAA9F;AAA+F,EAAA,iBAAiB,EAAA,iBAAhH;AAAiH,EAAA,qBAAqB,EAAA;AAAtI,CAhB0F,CAAnB,EAgBmE;AAAC,EAAA,SAAS,EAAA,SAAV;AAAY,EAAA,YAAY,EAAA,YAAxB;AAAyB,EAAA,sBAAsB,EAAA,sBAA/C;AAAgD,EAAA,uBAAuB,EAAA,uBAAvE;AAAwE,EAAA,sBAAsB,EAAA,sBAA9F;AAA+F,EAAA,iBAAiB,EAAA,iBAAhH;AAAiH,EAAA,qBAAqB,EAAA;AAAtI,CAhBnE,CAAnB,EAgBgO;AAAC,EAAA,SAAS,EAAA,SAAV;AAAY,EAAA,YAAY,EAAA,YAAxB;AAAyB,EAAA,sBAAsB,EAAA,sBAA/C;AAAgD,EAAA,uBAAuB,EAAA,uBAAvE;AAAwE,EAAA,sBAAsB,EAAA,sBAA9F;AAA+F,EAAA,iBAAiB,EAAA,iBAAhH;AAAiH,EAAA,qBAAqB,EAAA;AAAtI,CAhBhO,CAAhD;AAgByZ;AAAC;AAEja,OAAO,IAAM,mBAAmB,GAAG,kBAAkB,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,YAAA;AAC1F,SACE,KAAA,CAAA,aAAA,CAAC,YAAD,EAAa,IAAb,EACE,KAAA,CAAA,aAAA,CAAC,GAAD,EAAI;AAAC,IAAA,CAAC,EAAC,KAAH;AAAS,IAAA,OAAO,EAAC;AAAjB,GAAJ,EACE,KAAA,CAAA,aAAA,CAAC,YAAD,EAAa;AACX,IAAA,OAAO,EAAE,IAAI,CAAC,SAAD,EAAY,aAAZ,CADF;AAEX,IAAA,UAAU,EAAE,MAAM,CAAC,YAAD,EAAe,OAAf,CAFP;AAGX,IAAA,QAAQ,EAAE,MAAM,CAAC,gBAAD,CAHL;AAIX,IAAA,KAAK,EAAE,IAAI,CAAC,OAAD,EAAU,YAAV,CAJA;AAKX,IAAA,KAAK,EAAE,IAAI,CAAC,OAAD,EAAU,OAAV;AALA,GAAb,CADF,CADF,CADF;AAaD,CAd0F,EAcxF;AAAC,EAAA,SAAS,EAAA,SAAV;AAAY,EAAA,YAAY,EAAA,YAAxB;AAAyB,EAAA,sBAAsB,EAAA,sBAA/C;AAAgD,EAAA,uBAAuB,EAAA,uBAAvE;AAAwE,EAAA,sBAAsB,EAAA,sBAA9F;AAA+F,EAAA,iBAAiB,EAAA,iBAAhH;AAAiH,EAAA,qBAAqB,EAAA;AAAtI,CAdwF,CAAnB,EAcqE;AAAC,EAAA,SAAS,EAAA,SAAV;AAAY,EAAA,YAAY,EAAA,YAAxB;AAAyB,EAAA,sBAAsB,EAAA,sBAA/C;AAAgD,EAAA,uBAAuB,EAAA,uBAAvE;AAAwE,EAAA,sBAAsB,EAAA,sBAA9F;AAA+F,EAAA,iBAAiB,EAAA,iBAAhH;AAAiH,EAAA,qBAAqB,EAAA;AAAtI,CAdrE,CAAnB,EAckO;AAAC,EAAA,SAAS,EAAA,SAAV;AAAY,EAAA,YAAY,EAAA,YAAxB;AAAyB,EAAA,sBAAsB,EAAA,sBAA/C;AAAgD,EAAA,uBAAuB,EAAA,uBAAvE;AAAwE,EAAA,sBAAsB,EAAA,sBAA9F;AAA+F,EAAA,iBAAiB,EAAA,iBAAhH;AAAiH,EAAA,qBAAqB,EAAA;AAAtI,CAdlO,CAA9C;AAcyZ;AAAC;AAEja,OAAO,IAAM,kBAAkB,GAAG,kBAAkB,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,YAAA;AAAM,SAC/F,KAAA,CAAA,aAAA,CAAC,YAAD,EAAa,IAAb,EACE,KAAA,CAAA,aAAA,CAAC,aAAD,EAAc;AAAC,IAAA,KAAK,EAAE;AAAE,MAAA,MAAM,EAAE;AAAV;AAAR,GAAd,EACE,KAAA,CAAA,aAAA,CAAC,YAAD,EAAa;AACX,IAAA,OAAO,EAAE,IAAI,CAAC,SAAD,EAAY,aAAZ,CADF;AAEX,IAAA,UAAU,EAAE,MAAM,CAAC,YAAD,EAAe,iBAAf,CAFP;AAGX,IAAA,QAAQ,EAAE,MAAM,CAAC,gBAAD,CAHL;AAIX,IAAA,KAAK,EAAE,IAAI,CAAC,OAAD,EAAU,IAAV,CAJA;AAKX,IAAA,KAAK,EAAE,IAAI,CAAC,OAAD,EAAU,MAAV,CALA;AAMX,IAAA,aAAa,EAAE,QAAO,CAAC,iBAAD,EAAoB,IAApB,CANX;AAOX,IAAA,mBAAmB,EAAE,QAAO,CAAC,wBAAD,EAV6D,KAU7D;AAPjB,GAAb,CADF,CADF,CAD+F;AAchG,CAdyF,EAcvF;AAAC,EAAA,SAAS,EAAA,SAAV;AAAY,EAAA,YAAY,EAAA,YAAxB;AAAyB,EAAA,sBAAsB,EAAA,sBAA/C;AAAgD,EAAA,uBAAuB,EAAA,uBAAvE;AAAwE,EAAA,sBAAsB,EAAA,sBAA9F;AAA+F,EAAA,iBAAiB,EAAA,iBAAhH;AAAiH,EAAA,qBAAqB,EAAA;AAAtI,CAduF,CAAnB,EAcsE;AAAC,EAAA,SAAS,EAAA,SAAV;AAAY,EAAA,YAAY,EAAA,YAAxB;AAAyB,EAAA,sBAAsB,EAAA,sBAA/C;AAAgD,EAAA,uBAAuB,EAAA,uBAAvE;AAAwE,EAAA,sBAAsB,EAAA,sBAA9F;AAA+F,EAAA,iBAAiB,EAAA,iBAAhH;AAAiH,EAAA,qBAAqB,EAAA;AAAtI,CAdtE,CAAnB,EAcmO;AAAC,EAAA,SAAS,EAAA,SAAV;AAAY,EAAA,YAAY,EAAA,YAAxB;AAAyB,EAAA,sBAAsB,EAAA,sBAA/C;AAAgD,EAAA,uBAAuB,EAAA,uBAAvE;AAAwE,EAAA,sBAAsB,EAAA,sBAA9F;AAA+F,EAAA,iBAAiB,EAAA,iBAAhH;AAAiH,EAAA,qBAAqB,EAAA;AAAtI,CAdnO,CAA7C;AAcyZ;AAAC;AACja,IAAM,QAAQ,GAAG,CACf;AAAE,EAAA,OAAO,EAAE,eAAX;AAA4B,EAAA,IAAI,EAAE;AAAlC,CADe,EAEf;AAAE,EAAA,OAAO,EAAE,eAAX;AAA4B,EAAA,IAAI,EAAE;AAAlC,CAFe,EAGf;AAAE,EAAA,OAAO,EAAE,eAAX;AAA4B,EAAA,IAAI,EAAE;AAAlC,CAHe,CAAjB;AAMA,OAAO,IAAM,gBAAgB,GAAG,kBAAkB,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,YAAA;AACvF,SACE,KAAA,CAAA,aAAA,CAAC,YAAD,EAAa,IAAb,EACE,KAAA,CAAA,aAAA,CAAC,GAAD,EAAI;AAAC,IAAA,CAAC,EAAC,KAAH;AAAS,IAAA,OAAO,EAAC;AAAjB,GAAJ,EACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,IAAA,KAAK,EAAE;AAAE,MAAA,KAAK,EAAE,OAAT;AAAkB,MAAA,MAAM,EAAE;AAA1B;AAAZ,GAAA,EACG,QAAQ,CAAC,GAAT,CAAa,UAAC,GAAD,EAAW,KAAX,EAAwB;AACpC,WACE,KAAA,CAAA,aAAA,CAAC,YAAD,EAAa;AACX,MAAA,OAAO,EAAE,IAAI,CAAC,SAAD,EAAY,GAAG,KAAA,IAAH,IAAA,GAAG,KAAA,KAAA,CAAH,GAAG,KAAA,CAAH,GAAA,GAAG,CAAE,OAAjB,CADF;AAEX,MAAA,UAAU,EAAE,MAAM,CAAC,YAAD,EAAe,YAAf,CAFP;AAGX,MAAA,QAAQ,EAAE,MAAM,CAAC,gBAAD,CAHL;AAIX,MAAA,KAAK,EAAE,IAAI,CAAC,OAAD,EAAU,MAAV,CAJA;AAKX,MAAA,mBAAmB,EAAE,QAAO,CAAC,qBAAD,EAAwB,IAAxB,CALjB;AAMX,MAAA,GAAG,EAAE;AANM,KAAb,CADF;AAUD,GAXA,CADH,CADF,CADF,CADF;AAoBD,CArBuF,EAqBrF;AAAC,EAAA,SAAS,EAAA,SAAV;AAAY,EAAA,YAAY,EAAA,YAAxB;AAAyB,EAAA,sBAAsB,EAAA,sBAA/C;AAAgD,EAAA,uBAAuB,EAAA,uBAAvE;AAAwE,EAAA,sBAAsB,EAAA,sBAA9F;AAA+F,EAAA,iBAAiB,EAAA,iBAAhH;AAAiH,EAAA,qBAAqB,EAAA;AAAtI,CArBqF,CAAnB,EAqBwE;AAAC,EAAA,SAAS,EAAA,SAAV;AAAY,EAAA,YAAY,EAAA,YAAxB;AAAyB,EAAA,sBAAsB,EAAA,sBAA/C;AAAgD,EAAA,uBAAuB,EAAA,uBAAvE;AAAwE,EAAA,sBAAsB,EAAA,sBAA9F;AAA+F,EAAA,iBAAiB,EAAA,iBAAhH;AAAiH,EAAA,qBAAqB,EAAA;AAAtI,CArBxE,CAAnB,EAqBqO;AAAC,EAAA,SAAS,EAAA,SAAV;AAAY,EAAA,YAAY,EAAA,YAAxB;AAAyB,EAAA,sBAAsB,EAAA,sBAA/C;AAAgD,EAAA,uBAAuB,EAAA,uBAAvE;AAAwE,EAAA,sBAAsB,EAAA,sBAA9F;AAA+F,EAAA,iBAAiB,EAAA,iBAAhH;AAAiH,EAAA,qBAAqB,EAAA;AAAtI,CArBrO,CAA3C;AAqByZ;AAAC;AAEja,OAAO,IAAM,iBAAiB,GAAG,kBAAkB,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,YAAA;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SACE,KAAA,CAAA,aAAA,CAAC,YAAD,EAAa,IAAb,EACE,KAAA,CAAA,aAAA,CAAC,GAAD,EAAI;AAAC,IAAA,CAAC,EAAC,KAAH;AAAS,IAAA,OAAO,EAAC;AAAjB,GAAJ,EACE,KAAA,CAAA,aAAA,CAAC,YAAD,EAAa;AACX,IAAA,OAAO,EAAE,IAAI,CAAC,SAAD,EAAY,kBAAZ,CADF;AAEX,IAAA,UAAU,EAAE,MAAM,CAAC,YAAD,EAAe,cAAf,CAFP;AAGX,IAAA,KAAK,EAAE,IAAI,CAAC,OAAD,EAAU,OAAV,CAHA;AAIX,IAAA,UAAU,EAAE,QAAO,CAAC,YAAD,EAAe,KAAf,CAJR;AAKX,IAAA,OAAO,EAAE,QAAO,CAAC,SAAD,EAAY,KAAZ,CALL;AAMX,IAAA,MAAM,EAAE,IAAI,CAAC,QAAD,EAAW,MAAX,CAND;AAOX,IAAA,QAAQ,EAAE,MAAM,CAAC,eAAD,CAPL;AAQX,IAAA,mBAAmB,EAAE,QAAO,CAAC,qBAAD,EAAwB,IAAxB,CARjB;AASX,IAAA,QAAQ,EAAE,QAAO,CAAC,UAAD,EAAa,KAAb,CATN;AAUX,IAAA,KAAK,EAAC,WAVK;AAWX,IAAA,eAAe,EAAE,yBAAC,EAAD,EAAwB;UAArB,cAAc,GAAA,EAAA,CAAA,c;AAChC,aACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,IAAA,EACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,IAAA,EAAM,cAAc,KAAA,IAAd,IAAA,cAAc,KAAA,KAAA,CAAd,GAAc,KAAA,CAAd,GAAA,cAAc,CAAE,KAAtB,CADF,EAEE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,IAAA,EAAM,cAAc,KAAA,IAAd,IAAA,cAAc,KAAA,KAAA,CAAd,GAAc,KAAA,CAAd,GAAA,cAAc,CAAE,KAAtB,CAFF,CADF;AAMD;AAlBU,GAAb,EAqBG,UAAC,EAAD,EAI4B;QAH3B,cAAc,GAAA,EAAA,CAAA,c;QACd,UAAU,GAAA,EAAA,CAAA,U;QACV,aAAa,GAAA,EAAA,CAAA,a;AAEb,WACE,KAAA,CAAA,aAAA,CAAC,MAAD,EAAO;AACL,MAAA,OAAO,EAAE,mBAAA;AACP,QAAA,aAAa,CAAC,CAAC,UAAF,CAAb;AACA,QAAA,MAAM,CAAC,uBAAD,CAAN,CAAgC,UAAhC;AACD,OAJI;AAKL,MAAA,KAAK,EAAE,IAAI,CAAC,OAAD,EAAU,OAAV,CALN;AAML,MAAA,OAAO,EAAE,IAAI,CAAC,SAAD,EAAY,OAAZ,CANR;AAOL,MAAA,SAAS,EAAE,QAAO,CAAC,WAAD,EAAc,KAAd;AAPb,KAAP,EASG,cAAc,KAAA,IAAd,IAAA,cAAc,KAAA,KAAA,CAAd,GAAc,KAAA,CAAd,GAAA,cAAc,CAAE,KATnB,CADF;AAaD,GAvCH,CADF,CADF,CADF;AA+CD,CA5GwF,EA4GtF;AAAC,EAAA,SAAS,EAAA,SAAV;AAAY,EAAA,YAAY,EAAA,YAAxB;AAAyB,EAAA,sBAAsB,EAAA,sBAA/C;AAAgD,EAAA,uBAAuB,EAAA,uBAAvE;AAAwE,EAAA,sBAAsB,EAAA,sBAA9F;AAA+F,EAAA,iBAAiB,EAAA,iBAAhH;AAAiH,EAAA,qBAAqB,EAAA;AAAtI,CA5GsF,CAAnB,EA4GuE;AAAC,EAAA,SAAS,EAAA,SAAV;AAAY,EAAA,YAAY,EAAA,YAAxB;AAAyB,EAAA,sBAAsB,EAAA,sBAA/C;AAAgD,EAAA,uBAAuB,EAAA,uBAAvE;AAAwE,EAAA,sBAAsB,EAAA,sBAA9F;AAA+F,EAAA,iBAAiB,EAAA,iBAAhH;AAAiH,EAAA,qBAAqB,EAAA;AAAtI,CA5GvE,CAAnB,EA4GoO;AAAC,EAAA,SAAS,EAAA,SAAV;AAAY,EAAA,YAAY,EAAA,YAAxB;AAAyB,EAAA,sBAAsB,EAAA,sBAA/C;AAAgD,EAAA,uBAAuB,EAAA,uBAAvE;AAAwE,EAAA,sBAAsB,EAAA,sBAA9F;AAA+F,EAAA,iBAAiB,EAAA,iBAAhH;AAAiH,EAAA,qBAAqB,EAAA;AAAtI,CA5GpO,CAA5C;AA4GyZ;AAAC;AAEja,OAAO,IAAM,iBAAiB,GAAG,kBAAkB,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,YAAA;AACxF,SACE,KAAA,CAAA,aAAA,CAAC,YAAD,EAAa,IAAb,EACE,KAAA,CAAA,aAAA,CAAC,GAAD,EAAI;AAAC,IAAA,CAAC,EAAC,KAAH;AAAS,IAAA,OAAO,EAAC;AAAjB,GAAJ,EACE,KAAA,CAAA,aAAA,CAAC,YAAD,EAAa;AACX,IAAA,OAAO,EAAE,IAAI,CAAC,SAAD,EAAY,kBAAZ,CADF;AAEX,IAAA,UAAU,EAAE,MAAM,CAAC,YAAD,EAAe,cAAf,CAFP;AAGX,IAAA,KAAK,EAAE,IAAI,CAAC,OAAD,EAAU,OAAV,CAHA;AAIX,IAAA,UAAU,EAAE,QAAO,CAAC,YAAD,EAAe,KAAf,CAJR;AAKX,IAAA,OAAO,EAAE,QAAO,CAAC,SAAD,EAAY,KAAZ,CALL;AAMX,IAAA,MAAM,EAAE,IAAI,CAAC,QAAD,EAAW,MAAX,CAND;AAOX,IAAA,QAAQ,EAAE,MAAM,CAAC,eAAD,CAPL;AAQX,IAAA,mBAAmB,EAAE,QAAO,CAAC,qBAAD,EAAwB,IAAxB,CARjB;AASX,IAAA,QAAQ,EAAE,QAAO,CAAC,UAAD,EAAa,KAAb,CATN;AAUX,IAAA,KAAK,EAAC,WAVK;AAWX,IAAA,eAAe,EAAE,yBAAC,EAAD,EAAwB;UAArB,cAAc,GAAA,EAAA,CAAA,c;AAChC,aACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,IAAA,EACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,IAAA,EAAM,cAAc,KAAA,IAAd,IAAA,cAAc,KAAA,KAAA,CAAd,GAAc,KAAA,CAAd,GAAA,cAAc,CAAE,KAAtB,CADF,EAEE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,IAAA,EAAM,cAAc,KAAA,IAAd,IAAA,cAAc,KAAA,KAAA,CAAd,GAAc,KAAA,CAAd,GAAA,cAAc,CAAE,KAAtB,CAFF,CADF;AAMD;AAlBU,GAAb,EAqBG,UAAC,EAAD,EAI4B;QAH3B,cAAc,GAAA,EAAA,CAAA,c;QACd,UAAU,GAAA,EAAA,CAAA,U;QACV,aAAa,GAAA,EAAA,CAAA,a;AAEb,WACE,KAAA,CAAA,aAAA,CAAC,SAAD,EAAU;AACR,MAAA,EAAE,EAAC,QADK;AAER,MAAA,IAAI,EAAC,UAFG;AAGR,MAAA,SAAS,EAAC,eAHF;AAIR,MAAA,KAAK,EAAE,IAAI,CAAC,OAAD,EAAU,UAAV,CAJH;AAKR,MAAA,UAAU,EAAE,IAAI,CAAC,YAAD,EAAe,yBAAf,CALR;AAMR,MAAA,WAAW,EAAE,IAAI,CAAC,aAAD,EAAgB,oBAAhB,CANT;AAOR,MAAA,SAAS,EAAE,MAAM,CAAC,WAAD,EAAc,EAAd,CAPT;AAQR,MAAA,KAAK,EAAE,QAAO,CAAC,OAAD,EAAU,KAAV,CARN;AASR,MAAA,YAAY,EAAE,IAAI,CAAC,cAAD,EAAiB,EAAjB,CATV;AAUR,MAAA,QAAQ,EAAE,QAAO,CAAC,UAAD,EAAa,KAAb,CAVT;AAWR,MAAA,SAAS,EAAE,QAAO,CAAC,WAAD,EAAc,KAAd,CAXV;AAYR,MAAA,QAAQ,EAAE,MAAM,CAAC,qBAAD,CAZR;AAaR,MAAA,OAAO,EAAE,mBAAA;AACP,QAAA,aAAa,CAAC,CAAC,UAAF,CAAb;AACA,QAAA,MAAM,CAAC,uBAAD,CAAN,CAAgC,UAAhC;AACD,OAhBO;AAiBR,MAAA,KAAK,EAAE,cAAc,KAAA,IAAd,IAAA,cAAc,KAAA,KAAA,CAAd,GAAc,KAAA,CAAd,GAAA,cAAc,CAAE;AAjBf,KAAV,CADF;AAqBD,GA/CH,CADF,CADF,CADF;AAuDD,CAxDwF,EAwDtF;AAAC,EAAA,SAAS,EAAA,SAAV;AAAY,EAAA,YAAY,EAAA,YAAxB;AAAyB,EAAA,sBAAsB,EAAA,sBAA/C;AAAgD,EAAA,uBAAuB,EAAA,uBAAvE;AAAwE,EAAA,sBAAsB,EAAA,sBAA9F;AAA+F,EAAA,iBAAiB,EAAA,iBAAhH;AAAiH,EAAA,qBAAqB,EAAA;AAAtI,CAxDsF,CAAnB,EAwDuE;AAAC,EAAA,SAAS,EAAA,SAAV;AAAY,EAAA,YAAY,EAAA,YAAxB;AAAyB,EAAA,sBAAsB,EAAA,sBAA/C;AAAgD,EAAA,uBAAuB,EAAA,uBAAvE;AAAwE,EAAA,sBAAsB,EAAA,sBAA9F;AAA+F,EAAA,iBAAiB,EAAA,iBAAhH;AAAiH,EAAA,qBAAqB,EAAA;AAAtI,CAxDvE,CAAnB,EAwDoO;AAAC,EAAA,SAAS,EAAA,SAAV;AAAY,EAAA,YAAY,EAAA,YAAxB;AAAyB,EAAA,sBAAsB,EAAA,sBAA/C;AAAgD,EAAA,uBAAuB,EAAA,uBAAvE;AAAwE,EAAA,sBAAsB,EAAA,sBAA9F;AAA+F,EAAA,iBAAiB,EAAA,iBAAhH;AAAiH,EAAA,qBAAqB,EAAA;AAAtI,CAxDpO,CAA5C","sourcesContent":["\n/* eslint-disable */\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\n// @ts-ignore\nvar addSourceDecorator = require(\"@storybook/source-loader/preview\").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = \"/Users/farhanansari/Code/ui-library/src/components/molecules/IconDropdown\";\n// @ts-ignore\nvar __STORY__ = \"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/farhanansari/Code/ui-library/src/components/molecules/IconDropdown\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"\\\\n\\\\n// @ts-nocheck\\\\n// @ts-ignore\\\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\\\n// @ts-ignore\\\\nvar addSourceDecorator = require(\\\\\\\"@storybook/source-loader/preview\\\\\\\").addSource;\\\\n// @ts-ignore\\\\nvar __SOURCE_PREFIX__ = \\\\\\\"/Users/farhanansari/Code/ui-library/src/components/molecules/IconDropdown\\\\\\\";\\\\n// @ts-ignore\\\\nvar __STORY__ = \\\\\\\"import { action } from '@storybook/addon-actions'\\\\\\\\nimport {\\\\\\\\n  array,\\\\\\\\n  boolean,\\\\\\\\n  number,\\\\\\\\n  object,\\\\\\\\n  text,\\\\\\\\n  withKnobs\\\\\\\\n} from '@storybook/addon-knobs'\\\\\\\\nimport React from 'react'\\\\\\\\nimport IconDropdown from '.'\\\\\\\\nimport { path } from '..'\\\\\\\\nimport { Box } from '../../..'\\\\\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\\\\\nimport Button, { tIntent } from '../../atoms/Button'\\\\\\\\nimport CardComponent from '../../atoms/Card'\\\\\\\\nimport { tPlacement } from '../../../utilities/types'\\\\\\\\nimport {\\\\\\\\n  IUniversalDropdownChildren,\\\\\\\\n  tSelectVariant\\\\\\\\n} from '../DropDown/interface'\\\\\\\\nimport TextInput from '../TextInput'\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/IconDropdown`,\\\\\\\\n  decorators: [withKnobs],\\\\\\\\n  component: IconDropdown\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst ListViewOption = [\\\\\\\\n  {\\\\\\\\n    value: 'available',\\\\\\\\n    label: 'Mark As Available',\\\\\\\\n    color: 'blue',\\\\\\\\n    tooltipText: 'Mark As Available',\\\\\\\\n    isDisabled: true\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    value: 'unavailable',\\\\\\\\n    label: 'Mark As Unavailable',\\\\\\\\n    color: 'red',\\\\\\\\n    tooltipText: 'Mark As Unavailable'\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    value: 'active',\\\\\\\\n    label: 'Mark As Active',\\\\\\\\n    color: 'purple',\\\\\\\\n    tooltipText: 'Mark As Active'\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    value: 'inactive',\\\\\\\\n    label: 'Mark As Inactive',\\\\\\\\n    color: 'green',\\\\\\\\n    tooltipText: 'Mark As Inactive'\\\\\\\\n  }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst MultiLevelListViewOption = [\\\\\\\\n  {\\\\\\\\n    id: 'available',\\\\\\\\n    value: 'available',\\\\\\\\n    label: 'Mark As Available',\\\\\\\\n    color: 'blue',\\\\\\\\n    tooltipText: 'Mark As Available',\\\\\\\\n    options: [\\\\\\\\n      {\\\\\\\\n        id: 'available',\\\\\\\\n        value: 'available',\\\\\\\\n        label: 'Mark As Child Available',\\\\\\\\n        color: 'blue',\\\\\\\\n        tooltipText: 'Mark As Child Available'\\\\\\\\n      },\\\\\\\\n      {\\\\\\\\n        id: 'unavailable',\\\\\\\\n        value: 'unavailable',\\\\\\\\n        label: 'Mark As Child Unavailable',\\\\\\\\n        color: 'red',\\\\\\\\n        tooltipText: 'Mark As Child Unavailable'\\\\\\\\n      },\\\\\\\\n      {\\\\\\\\n        id: 'active',\\\\\\\\n        value: 'active',\\\\\\\\n        label: 'Mark As Child Active',\\\\\\\\n        color: 'purple',\\\\\\\\n        tooltipText: 'Mark As Child Active'\\\\\\\\n      },\\\\\\\\n      {\\\\\\\\n        id: 'inactive',\\\\\\\\n        value: 'inactive',\\\\\\\\n        label: 'Mark As Child Inactive',\\\\\\\\n        color: 'green',\\\\\\\\n        tooltipText: 'Mark As Child Inactive',\\\\\\\\n        options: [\\\\\\\\n          {\\\\\\\\n            id: 'available',\\\\\\\\n            value: 'available',\\\\\\\\n            label: 'Mark As Grand Child Available',\\\\\\\\n            color: 'blue',\\\\\\\\n            tooltipText: 'Mark As Grand Child Available'\\\\\\\\n          },\\\\\\\\n          {\\\\\\\\n            id: 'unavailable',\\\\\\\\n            value: 'unavailable',\\\\\\\\n            label: 'Mark As Grand Child Unavailable',\\\\\\\\n            color: 'red',\\\\\\\\n            tooltipText: 'Mark As Grand Child Unavailable'\\\\\\\\n          }\\\\\\\\n        ]\\\\\\\\n      }\\\\\\\\n    ]\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    id: 'unavailable',\\\\\\\\n    value: 'unavailable',\\\\\\\\n    label: 'Mark As Unavailable',\\\\\\\\n    color: 'red',\\\\\\\\n    tooltipText: 'Mark As Unavailable'\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    id: 'active',\\\\\\\\n    value: 'active',\\\\\\\\n    label: 'Mark As Active',\\\\\\\\n    color: 'purple',\\\\\\\\n    tooltipText: 'Mark As Active'\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    id: 'inactive',\\\\\\\\n    value: 'inactive',\\\\\\\\n    label: 'Mark As Inactive',\\\\\\\\n    color: 'green',\\\\\\\\n    tooltipText: 'Mark As Inactive'\\\\\\\\n  }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst paginationOptions = [\\\\\\\\n  { value: '25', label: '25 per page', title: '25 per page' },\\\\\\\\n  { value: '50', label: '50 per page', title: '50 per page' },\\\\\\\\n  { value: '100', label: '100 per page', title: '100 per page' },\\\\\\\\n  { value: '200', label: '200 per page', title: '200 per page' }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst columnOption = [\\\\\\\\n  { value: 'ascending', label: 'Sort Ascending', iconVariant: 'hide-menu-box' },\\\\\\\\n  {\\\\\\\\n    value: 'descending',\\\\\\\\n    label: 'Sort Descending',\\\\\\\\n    iconVariant: 'hub-location'\\\\\\\\n  },\\\\\\\\n  { value: 'hideColumn', label: 'Hide Column', iconVariant: 'close' },\\\\\\\\n  { value: 'pinLeft', label: 'Pin Left', iconVariant: 'angle-left' },\\\\\\\\n  { value: 'pinright', label: 'Pin Right', iconVariant: 'angle-right-thin' }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst options = [\\\\\\\\n  {\\\\\\\\n    value: 'emailVerificationPending',\\\\\\\\n    label: 'Email Verification Pending Shipper'\\\\\\\\n  },\\\\\\\\n  { value: 'allShippers', label: 'All Shippers' },\\\\\\\\n  { value: 'approvalPendingShippers', label: 'Approval Pending Shippers' }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst datePickerOptions = [\\\\\\\\n  { value: 'January', label: 'January' },\\\\\\\\n  { value: 'February', label: 'February' },\\\\\\\\n  { value: 'March', label: 'March' },\\\\\\\\n  { value: 'April', label: 'April' },\\\\\\\\n  { value: 'May', label: 'May' },\\\\\\\\n  { value: 'June', label: 'June' },\\\\\\\\n  { value: 'July', label: 'July' },\\\\\\\\n  { value: 'August', label: 'August' },\\\\\\\\n  { value: 'September', label: 'September' },\\\\\\\\n  { value: 'October', label: 'October' },\\\\\\\\n  { value: 'November', label: 'November' },\\\\\\\\n  { value: 'December', label: 'December' }\\\\\\\\n]\\\\\\\\n\\\\\\\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\\\\\\\nexport const ButtonDropdown = () => (\\\\\\\\n  <ThemeWrapper>\\\\\\\\n    <Box p='2em' bgColor='grey.50'>\\\\\\\\n      <IconDropdown\\\\\\\\n        variant={text('varaint', 'button-dropdown') as tSelectVariant}\\\\\\\\n        optionList={object('optionList', ListViewOption)}\\\\\\\\n        width={text('width', '120px')}\\\\\\\\n        menuIsOpen={boolean('menuIsOpen', false)}\\\\\\\\n        iconButtonDetails={array('iconList', [\\\\\\\\n          'hide-menu-box',\\\\\\\\n          'More',\\\\\\\\n          'angle-down'\\\\\\\\n        ])}\\\\\\\\n        primary={boolean('primary', false)}\\\\\\\\n        intent={text('intent', 'page') as tIntent}\\\\\\\\n        onChange={action('Value Changed')}\\\\\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n        disabled={boolean('disabled', false)}\\\\\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\\\\\n        tooltipProps={{\\\\\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </Box>\\\\\\\\n  </ThemeWrapper>\\\\\\\\n)\\\\\\\\n\\\\\\\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\\\\\\\nexport const TextDropdown = () => (\\\\\\\\n  <ThemeWrapper>\\\\\\\\n    <Box p='2em' bgColor='grey.50'>\\\\\\\\n      <IconDropdown\\\\\\\\n        variant={text('varaint', 'text-dropdown') as tSelectVariant}\\\\\\\\n        optionList={object('optionList', ListViewOption)}\\\\\\\\n        width={text('width', '120px')}\\\\\\\\n        menuIsOpen={boolean('menuIsOpen', false)}\\\\\\\\n        iconButtonDetails={array('iconList', [\\\\\\\\n          'hide-menu-box',\\\\\\\\n          'More',\\\\\\\\n          'angle-down'\\\\\\\\n        ])}\\\\\\\\n        primary={boolean('primary', false)}\\\\\\\\n        intent={text('intent', 'page') as tIntent}\\\\\\\\n        onChange={action('Value Changed')}\\\\\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n        disabled={boolean('disabled', false)}\\\\\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\\\\\n        tooltipProps={{\\\\\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </Box>\\\\\\\\n  </ThemeWrapper>\\\\\\\\n)\\\\\\\\n\\\\\\\\nexport const MultiLevelBreadCrumb = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='2em' bgColor='grey.50'>\\\\\\\\n        <IconDropdown\\\\\\\\n          variant={text('variant', 'multilevel-breadcrumb') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', MultiLevelListViewOption)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          value={text('value', 'strawberry')}\\\\\\\\n          width={text('width', '260px')}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n  }\\\\\\\\n\\\\\\\\nexport const MultiLevelButtonDropdown = () => (\\\\\\\\n  <ThemeWrapper>\\\\\\\\n    <Box p='2em' bgColor='grey.50'>\\\\\\\\n      <IconDropdown\\\\\\\\n        variant={\\\\\\\\n          text('varaint', 'multilevel-button-dropdown') as tSelectVariant\\\\\\\\n        }\\\\\\\\n        optionList={object('optionList', MultiLevelListViewOption)}\\\\\\\\n        width={text('width', '120px')}\\\\\\\\n        menuIsOpen\\\\\\\\n        iconButtonDetails={array('iconList', [\\\\\\\\n          'hide-menu-box',\\\\\\\\n          'More',\\\\\\\\n          'angle-down'\\\\\\\\n        ])}\\\\\\\\n        defaultOpen='right'\\\\\\\\n        primary={boolean('primary', false)}\\\\\\\\n        intent={text('intent', 'page') as tIntent}\\\\\\\\n        handleClick={(id: any) => console.log('clicked from storybook', id)}\\\\\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n        disabled={boolean('disabled', false)}\\\\\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\\\\\n        tooltipProps={{\\\\\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </Box>\\\\\\\\n  </ThemeWrapper>\\\\\\\\n)\\\\\\\\n\\\\\\\\nexport const PaginationDropdown = () => (\\\\\\\\n  <ThemeWrapper>\\\\\\\\n    <CardComponent style={{ height: '300px' }}>\\\\\\\\n      <IconDropdown\\\\\\\\n        variant={text('variant', 'pagination-size') as tSelectVariant}\\\\\\\\n        optionList={object('optionList', paginationOptions)}\\\\\\\\n        onChange={action('Value selected')}\\\\\\\\n        value={text('value', '50')}\\\\\\\\n        width={text('width', '120px')}\\\\\\\\n      />\\\\\\\\n    </CardComponent>\\\\\\\\n  </ThemeWrapper>\\\\\\\\n)\\\\\\\\n\\\\\\\\nexport const columnOptionComponent = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='2em' bgColor='grey.50'>\\\\\\\\n        <div style={{ width: '200px', margin: 'auto' }}>\\\\\\\\n          <IconDropdown\\\\\\\\n            variant={text('variant', 'column-filter') as tSelectVariant}\\\\\\\\n            optionList={object('optionList', columnOption)}\\\\\\\\n            onChange={action('Value selected')}\\\\\\\\n            width={text('width', '10px')}\\\\\\\\n            isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n          />\\\\\\\\n        </div>\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const BreadCrumbComponent = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='2em' bgColor='grey.50'>\\\\\\\\n        <IconDropdown\\\\\\\\n          variant={text('variant', 'bread-crumb') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', options)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          value={text('value', 'strawberry')}\\\\\\\\n          width={text('width', '260px')}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const DatePickerDropDown = () => (\\\\\\\\n  <ThemeWrapper>\\\\\\\\n    <CardComponent style={{ height: '200px' }}>\\\\\\\\n      <IconDropdown\\\\\\\\n        variant={text('variant', 'date-picker') as tSelectVariant}\\\\\\\\n        optionList={object('optionList', datePickerOptions)}\\\\\\\\n        onChange={action('Value selected')}\\\\\\\\n        value={text('value', '50')}\\\\\\\\n        width={text('width', '80px')}\\\\\\\\n        showDownArrow={boolean('Show Down Arrow', true)}\\\\\\\\n        isMultiRegionStyled={boolean('Is Multi Region Styled', false)}\\\\\\\\n      />\\\\\\\\n    </CardComponent>\\\\\\\\n  </ThemeWrapper>\\\\\\\\n)\\\\\\\\nconst arrayMap = [\\\\\\\\n  { variant: 'column-filter', name: 'column-filter0' },\\\\\\\\n  { variant: 'column-filter', name: 'column-filter1' },\\\\\\\\n  { variant: 'column-filter', name: 'column-filter2' }\\\\\\\\n]\\\\\\\\n\\\\\\\\nexport const columnOptionList = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='2em' bgColor='grey.50'>\\\\\\\\n        <div style={{ width: '200px', margin: 'auto' }}>\\\\\\\\n          {arrayMap.map((obj: any, index: number) => {\\\\\\\\n            return (\\\\\\\\n              <IconDropdown\\\\\\\\n                variant={text('variant', obj?.variant) as tSelectVariant}\\\\\\\\n                optionList={object('optionList', columnOption)}\\\\\\\\n                onChange={action('Value selected')}\\\\\\\\n                width={text('width', '10px')}\\\\\\\\n                isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n                key={index}\\\\\\\\n              />\\\\\\\\n            )\\\\\\\\n          })}\\\\\\\\n        </div>\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const DropdownUniversal = () => {\\\\\\\\n  // reference to style\\\\\\\\n  // const theme = useContext(ThemeContext)\\\\\\\\n  // const borderBottom = `1px solid ${theme?.colors?.grey['A800']}`\\\\\\\\n  // const customStyle = {\\\\\\\\n  //   control: (provided: any) => ({\\\\\\\\n  //     ...provided,\\\\\\\\n  //     borderStyle: 'none',\\\\\\\\n  //     borderBottom,\\\\\\\\n  //     borderRadius: '0px',\\\\\\\\n  //     boxShadow: 'none',\\\\\\\\n  //     borderColor: theme?.colors?.grey?.A800,\\\\\\\\n  //     '&:focus': {\\\\\\\\n  //       borderStyle: 'none',\\\\\\\\n  //       borderBottom,\\\\\\\\n  //       boxShadow: 'none',\\\\\\\\n  //       borderColor: theme?.colors?.grey?.A800\\\\\\\\n  //     },\\\\\\\\n  //     '&:hover': {\\\\\\\\n  //       borderStyle: 'none',\\\\\\\\n  //       borderBottom,\\\\\\\\n  //       boxShadow: 'none',\\\\\\\\n  //       borderColor: theme?.colors?.grey?.A800\\\\\\\\n  //     }\\\\\\\\n  //   }),\\\\\\\\n  //   option: (provided: any, state: any) => ({\\\\\\\\n  //     ...provided,\\\\\\\\n  //     backgroundColor: state?.isSelected\\\\\\\\n  //       ? theme?.colors?.primary?.main\\\\\\\\n  //       : theme?.colors?.white,\\\\\\\\n  //     '&:hover': {\\\\\\\\n  //       backgroundColor: state?.isSelected\\\\\\\\n  //         ? theme?.colors?.primary?.main\\\\\\\\n  //         : theme?.colors?.grey['50']\\\\\\\\n  //     }\\\\\\\\n  //   }),\\\\\\\\n\\\\\\\\n  //   menu: (provided: any, state: any) => ({\\\\\\\\n  //     ...provided,\\\\\\\\n  //     backgroundColor: state?.isSelected\\\\\\\\n  //       ? theme.colors.primary.main\\\\\\\\n  //       : theme?.colors?.white,\\\\\\\\n  //     borderRadius: '2px',\\\\\\\\n  //     '&:hover': {\\\\\\\\n  //       backgroundColor: state?.isSelected\\\\\\\\n  //         ? theme?.colors?.primary?.main\\\\\\\\n  //         : theme?.colors?.white\\\\\\\\n  //     },\\\\\\\\n  //     marginTop: '5px',\\\\\\\\n  //     marginLeft: '16px',\\\\\\\\n  //     width: '90%'\\\\\\\\n  //   }),\\\\\\\\n  //   menuList: (provided: any) => ({\\\\\\\\n  //     ...provided,\\\\\\\\n  //     marginTop: '0px'\\\\\\\\n  //   }),\\\\\\\\n  //   valueContainer: (provided: any) => ({\\\\\\\\n  //     ...provided,\\\\\\\\n  //     padding: '0px'\\\\\\\\n  //   })\\\\\\\\n  // }\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='2em' bgColor='grey.50'>\\\\\\\\n        <IconDropdown\\\\\\\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', ListViewOption)}\\\\\\\\n          width={text('width', '120px')}\\\\\\\\n          menuIsOpen={boolean('menuIsOpen', false)}\\\\\\\\n          primary={boolean('primary', false)}\\\\\\\\n          intent={text('intent', 'page') as tIntent}\\\\\\\\n          onChange={action('Value Changed')}\\\\\\\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n          value='available'\\\\\\\\n          optionComponent={({ selectedOption }: any) => {\\\\\\\\n            return (\\\\\\\\n              <div>\\\\\\\\n                <div>{selectedOption?.color}</div>\\\\\\\\n                <div>{selectedOption?.label}</div>\\\\\\\\n              </div>\\\\\\\\n            )\\\\\\\\n          }}\\\\\\\\n          // customStyle={customStyle}\\\\\\\\n        >\\\\\\\\n          {({\\\\\\\\n            selectedOption,\\\\\\\\n            menuIsOpen,\\\\\\\\n            setMenuIsOpen\\\\\\\\n          }: IUniversalDropdownChildren) => {\\\\\\\\n            return (\\\\\\\\n              <Button\\\\\\\\n                onClick={() => {\\\\\\\\n                  setMenuIsOpen(!menuIsOpen)\\\\\\\\n                  action('Universal open/closed')(menuIsOpen)\\\\\\\\n                }}\\\\\\\\n                color={text('color', 'white')}\\\\\\\\n                bgColor={text('bgColor', 'black')}\\\\\\\\n                fullWidth={boolean('fullWidth', false)}\\\\\\\\n              >\\\\\\\\n                {selectedOption?.label}\\\\\\\\n              </Button>\\\\\\\\n            )\\\\\\\\n          }}\\\\\\\\n        </IconDropdown>\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const TextFieldDropdown = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='2em' bgColor='grey.50'>\\\\\\\\n        <IconDropdown\\\\\\\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', ListViewOption)}\\\\\\\\n          width={text('width', '120px')}\\\\\\\\n          menuIsOpen={boolean('menuIsOpen', false)}\\\\\\\\n          primary={boolean('primary', false)}\\\\\\\\n          intent={text('intent', 'page') as tIntent}\\\\\\\\n          onChange={action('Value Changed')}\\\\\\\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n          value='available'\\\\\\\\n          optionComponent={({ selectedOption }: any) => {\\\\\\\\n            return (\\\\\\\\n              <div>\\\\\\\\n                <div>{selectedOption?.color}</div>\\\\\\\\n                <div>{selectedOption?.label}</div>\\\\\\\\n              </div>\\\\\\\\n            )\\\\\\\\n          }}\\\\\\\\n          // customStyle={customStyle}\\\\\\\\n        >\\\\\\\\n          {({\\\\\\\\n            selectedOption,\\\\\\\\n            menuIsOpen,\\\\\\\\n            setMenuIsOpen\\\\\\\\n          }: IUniversalDropdownChildren) => {\\\\\\\\n            return (\\\\\\\\n              <TextInput\\\\\\\\n                id='someId'\\\\\\\\n                name='someName'\\\\\\\\n                className='someClassName'\\\\\\\\n                label={text('label', 'Username')}\\\\\\\\n                labelColor={text('labelColor', 'text.inputLabel.default')}\\\\\\\\n                placeholder={text('placeholder', 'Enter text here...')}\\\\\\\\n                maxLength={number('maxLength', 10)}\\\\\\\\n                error={boolean('error', false)}\\\\\\\\n                errorMessage={text('errorMessage', '')}\\\\\\\\n                required={boolean('required', false)}\\\\\\\\n                fullWidth={boolean('fullWidth', false)}\\\\\\\\n                onChange={action('Triggered: onChange')}\\\\\\\\n                onClick={() => {\\\\\\\\n                  setMenuIsOpen(!menuIsOpen)\\\\\\\\n                  action('universal open/closed')(menuIsOpen)\\\\\\\\n                }}\\\\\\\\n                value={selectedOption?.value}\\\\\\\\n              />\\\\\\\\n            )\\\\\\\\n          }}\\\\\\\\n        </IconDropdown>\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\";\\\\n// @ts-ignore\\\\nvar __ADDS_MAP__ = {};\\\\n// @ts-ignore\\\\nvar __MAIN_FILE_LOCATION__ = \\\\\\\"/IconDropdown.stories.tsx\\\\\\\";\\\\n// @ts-ignore\\\\nvar __MODULE_DEPENDENCIES__ = [];\\\\n// @ts-ignore\\\\nvar __LOCAL_DEPENDENCIES__ = {};\\\\n// @ts-ignore\\\\nvar __IDS_TO_FRAMEWORKS__ = {};\\\\n        \\\\nimport { action } from '@storybook/addon-actions'\\\\nimport {\\\\n  array,\\\\n  boolean,\\\\n  number,\\\\n  object,\\\\n  text,\\\\n  withKnobs\\\\n} from '@storybook/addon-knobs'\\\\nimport React from 'react'\\\\nimport IconDropdown from '.'\\\\nimport { path } from '..'\\\\nimport { Box } from '../../..'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport Button, { tIntent } from '../../atoms/Button'\\\\nimport CardComponent from '../../atoms/Card'\\\\nimport { tPlacement } from '../../../utilities/types'\\\\nimport {\\\\n  IUniversalDropdownChildren,\\\\n  tSelectVariant\\\\n} from '../DropDown/interface'\\\\nimport TextInput from '../TextInput'\\\\n\\\\nexport default {parameters: {\\\\\\\"storySource\\\\\\\":{\\\\\\\"source\\\\\\\":\\\\\\\"import { action } from '@storybook/addon-actions'\\\\\\\\nimport {\\\\\\\\n  array,\\\\\\\\n  boolean,\\\\\\\\n  number,\\\\\\\\n  object,\\\\\\\\n  text,\\\\\\\\n  withKnobs\\\\\\\\n} from '@storybook/addon-knobs'\\\\\\\\nimport React from 'react'\\\\\\\\nimport IconDropdown from '.'\\\\\\\\nimport { path } from '..'\\\\\\\\nimport { Box } from '../../..'\\\\\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\\\\\nimport Button, { tIntent } from '../../atoms/Button'\\\\\\\\nimport CardComponent from '../../atoms/Card'\\\\\\\\nimport { tPlacement } from '../../../utilities/types'\\\\\\\\nimport {\\\\\\\\n  IUniversalDropdownChildren,\\\\\\\\n  tSelectVariant\\\\\\\\n} from '../DropDown/interface'\\\\\\\\nimport TextInput from '../TextInput'\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/IconDropdown`,\\\\\\\\n  decorators: [withKnobs],\\\\\\\\n  component: IconDropdown\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst ListViewOption = [\\\\\\\\n  {\\\\\\\\n    value: 'available',\\\\\\\\n    label: 'Mark As Available',\\\\\\\\n    color: 'blue',\\\\\\\\n    tooltipText: 'Mark As Available',\\\\\\\\n    isDisabled: true\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    value: 'unavailable',\\\\\\\\n    label: 'Mark As Unavailable',\\\\\\\\n    color: 'red',\\\\\\\\n    tooltipText: 'Mark As Unavailable'\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    value: 'active',\\\\\\\\n    label: 'Mark As Active',\\\\\\\\n    color: 'purple',\\\\\\\\n    tooltipText: 'Mark As Active'\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    value: 'inactive',\\\\\\\\n    label: 'Mark As Inactive',\\\\\\\\n    color: 'green',\\\\\\\\n    tooltipText: 'Mark As Inactive'\\\\\\\\n  }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst MultiLevelListViewOption = [\\\\\\\\n  {\\\\\\\\n    id: 'available',\\\\\\\\n    value: 'available',\\\\\\\\n    label: 'Mark As Available',\\\\\\\\n    color: 'blue',\\\\\\\\n    tooltipText: 'Mark As Available',\\\\\\\\n    options: [\\\\\\\\n      {\\\\\\\\n        id: 'available',\\\\\\\\n        value: 'available',\\\\\\\\n        label: 'Mark As Child Available',\\\\\\\\n        color: 'blue',\\\\\\\\n        tooltipText: 'Mark As Child Available'\\\\\\\\n      },\\\\\\\\n      {\\\\\\\\n        id: 'unavailable',\\\\\\\\n        value: 'unavailable',\\\\\\\\n        label: 'Mark As Child Unavailable',\\\\\\\\n        color: 'red',\\\\\\\\n        tooltipText: 'Mark As Child Unavailable'\\\\\\\\n      },\\\\\\\\n      {\\\\\\\\n        id: 'active',\\\\\\\\n        value: 'active',\\\\\\\\n        label: 'Mark As Child Active',\\\\\\\\n        color: 'purple',\\\\\\\\n        tooltipText: 'Mark As Child Active'\\\\\\\\n      },\\\\\\\\n      {\\\\\\\\n        id: 'inactive',\\\\\\\\n        value: 'inactive',\\\\\\\\n        label: 'Mark As Child Inactive',\\\\\\\\n        color: 'green',\\\\\\\\n        tooltipText: 'Mark As Child Inactive',\\\\\\\\n        options: [\\\\\\\\n          {\\\\\\\\n            id: 'available',\\\\\\\\n            value: 'available',\\\\\\\\n            label: 'Mark As Grand Child Available',\\\\\\\\n            color: 'blue',\\\\\\\\n            tooltipText: 'Mark As Grand Child Available'\\\\\\\\n          },\\\\\\\\n          {\\\\\\\\n            id: 'unavailable',\\\\\\\\n            value: 'unavailable',\\\\\\\\n            label: 'Mark As Grand Child Unavailable',\\\\\\\\n            color: 'red',\\\\\\\\n            tooltipText: 'Mark As Grand Child Unavailable'\\\\\\\\n          }\\\\\\\\n        ]\\\\\\\\n      }\\\\\\\\n    ]\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    id: 'unavailable',\\\\\\\\n    value: 'unavailable',\\\\\\\\n    label: 'Mark As Unavailable',\\\\\\\\n    color: 'red',\\\\\\\\n    tooltipText: 'Mark As Unavailable'\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    id: 'active',\\\\\\\\n    value: 'active',\\\\\\\\n    label: 'Mark As Active',\\\\\\\\n    color: 'purple',\\\\\\\\n    tooltipText: 'Mark As Active'\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    id: 'inactive',\\\\\\\\n    value: 'inactive',\\\\\\\\n    label: 'Mark As Inactive',\\\\\\\\n    color: 'green',\\\\\\\\n    tooltipText: 'Mark As Inactive'\\\\\\\\n  }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst paginationOptions = [\\\\\\\\n  { value: '25', label: '25 per page', title: '25 per page' },\\\\\\\\n  { value: '50', label: '50 per page', title: '50 per page' },\\\\\\\\n  { value: '100', label: '100 per page', title: '100 per page' },\\\\\\\\n  { value: '200', label: '200 per page', title: '200 per page' }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst columnOption = [\\\\\\\\n  { value: 'ascending', label: 'Sort Ascending', iconVariant: 'hide-menu-box' },\\\\\\\\n  {\\\\\\\\n    value: 'descending',\\\\\\\\n    label: 'Sort Descending',\\\\\\\\n    iconVariant: 'hub-location'\\\\\\\\n  },\\\\\\\\n  { value: 'hideColumn', label: 'Hide Column', iconVariant: 'close' },\\\\\\\\n  { value: 'pinLeft', label: 'Pin Left', iconVariant: 'angle-left' },\\\\\\\\n  { value: 'pinright', label: 'Pin Right', iconVariant: 'angle-right-thin' }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst options = [\\\\\\\\n  {\\\\\\\\n    value: 'emailVerificationPending',\\\\\\\\n    label: 'Email Verification Pending Shipper'\\\\\\\\n  },\\\\\\\\n  { value: 'allShippers', label: 'All Shippers' },\\\\\\\\n  { value: 'approvalPendingShippers', label: 'Approval Pending Shippers' }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst datePickerOptions = [\\\\\\\\n  { value: 'January', label: 'January' },\\\\\\\\n  { value: 'February', label: 'February' },\\\\\\\\n  { value: 'March', label: 'March' },\\\\\\\\n  { value: 'April', label: 'April' },\\\\\\\\n  { value: 'May', label: 'May' },\\\\\\\\n  { value: 'June', label: 'June' },\\\\\\\\n  { value: 'July', label: 'July' },\\\\\\\\n  { value: 'August', label: 'August' },\\\\\\\\n  { value: 'September', label: 'September' },\\\\\\\\n  { value: 'October', label: 'October' },\\\\\\\\n  { value: 'November', label: 'November' },\\\\\\\\n  { value: 'December', label: 'December' }\\\\\\\\n]\\\\\\\\n\\\\\\\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\\\\\\\nexport const ButtonDropdown = () => (\\\\\\\\n  <ThemeWrapper>\\\\\\\\n    <Box p='2em' bgColor='grey.50'>\\\\\\\\n      <IconDropdown\\\\\\\\n        variant={text('varaint', 'button-dropdown') as tSelectVariant}\\\\\\\\n        optionList={object('optionList', ListViewOption)}\\\\\\\\n        width={text('width', '120px')}\\\\\\\\n        menuIsOpen={boolean('menuIsOpen', false)}\\\\\\\\n        iconButtonDetails={array('iconList', [\\\\\\\\n          'hide-menu-box',\\\\\\\\n          'More',\\\\\\\\n          'angle-down'\\\\\\\\n        ])}\\\\\\\\n        primary={boolean('primary', false)}\\\\\\\\n        intent={text('intent', 'page') as tIntent}\\\\\\\\n        onChange={action('Value Changed')}\\\\\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n        disabled={boolean('disabled', false)}\\\\\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\\\\\n        tooltipProps={{\\\\\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </Box>\\\\\\\\n  </ThemeWrapper>\\\\\\\\n)\\\\\\\\n\\\\\\\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\\\\\\\nexport const TextDropdown = () => (\\\\\\\\n  <ThemeWrapper>\\\\\\\\n    <Box p='2em' bgColor='grey.50'>\\\\\\\\n      <IconDropdown\\\\\\\\n        variant={text('varaint', 'text-dropdown') as tSelectVariant}\\\\\\\\n        optionList={object('optionList', ListViewOption)}\\\\\\\\n        width={text('width', '120px')}\\\\\\\\n        menuIsOpen={boolean('menuIsOpen', false)}\\\\\\\\n        iconButtonDetails={array('iconList', [\\\\\\\\n          'hide-menu-box',\\\\\\\\n          'More',\\\\\\\\n          'angle-down'\\\\\\\\n        ])}\\\\\\\\n        primary={boolean('primary', false)}\\\\\\\\n        intent={text('intent', 'page') as tIntent}\\\\\\\\n        onChange={action('Value Changed')}\\\\\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n        disabled={boolean('disabled', false)}\\\\\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\\\\\n        tooltipProps={{\\\\\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </Box>\\\\\\\\n  </ThemeWrapper>\\\\\\\\n)\\\\\\\\n\\\\\\\\nexport const MultiLevelBreadCrumb = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='2em' bgColor='grey.50'>\\\\\\\\n        <IconDropdown\\\\\\\\n          variant={text('variant', 'multilevel-breadcrumb') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', MultiLevelListViewOption)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          value={text('value', 'strawberry')}\\\\\\\\n          width={text('width', '260px')}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n  }\\\\\\\\n\\\\\\\\nexport const MultiLevelButtonDropdown = () => (\\\\\\\\n  <ThemeWrapper>\\\\\\\\n    <Box p='2em' bgColor='grey.50'>\\\\\\\\n      <IconDropdown\\\\\\\\n        variant={\\\\\\\\n          text('varaint', 'multilevel-button-dropdown') as tSelectVariant\\\\\\\\n        }\\\\\\\\n        optionList={object('optionList', MultiLevelListViewOption)}\\\\\\\\n        width={text('width', '120px')}\\\\\\\\n        menuIsOpen\\\\\\\\n        iconButtonDetails={array('iconList', [\\\\\\\\n          'hide-menu-box',\\\\\\\\n          'More',\\\\\\\\n          'angle-down'\\\\\\\\n        ])}\\\\\\\\n        defaultOpen='right'\\\\\\\\n        primary={boolean('primary', false)}\\\\\\\\n        intent={text('intent', 'page') as tIntent}\\\\\\\\n        handleClick={(id: any) => console.log('clicked from storybook', id)}\\\\\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n        disabled={boolean('disabled', false)}\\\\\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\\\\\n        tooltipProps={{\\\\\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </Box>\\\\\\\\n  </ThemeWrapper>\\\\\\\\n)\\\\\\\\n\\\\\\\\nexport const PaginationDropdown = () => (\\\\\\\\n  <ThemeWrapper>\\\\\\\\n    <CardComponent style={{ height: '300px' }}>\\\\\\\\n      <IconDropdown\\\\\\\\n        variant={text('variant', 'pagination-size') as tSelectVariant}\\\\\\\\n        optionList={object('optionList', paginationOptions)}\\\\\\\\n        onChange={action('Value selected')}\\\\\\\\n        value={text('value', '50')}\\\\\\\\n        width={text('width', '120px')}\\\\\\\\n      />\\\\\\\\n    </CardComponent>\\\\\\\\n  </ThemeWrapper>\\\\\\\\n)\\\\\\\\n\\\\\\\\nexport const columnOptionComponent = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='2em' bgColor='grey.50'>\\\\\\\\n        <div style={{ width: '200px', margin: 'auto' }}>\\\\\\\\n          <IconDropdown\\\\\\\\n            variant={text('variant', 'column-filter') as tSelectVariant}\\\\\\\\n            optionList={object('optionList', columnOption)}\\\\\\\\n            onChange={action('Value selected')}\\\\\\\\n            width={text('width', '10px')}\\\\\\\\n            isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n          />\\\\\\\\n        </div>\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const BreadCrumbComponent = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='2em' bgColor='grey.50'>\\\\\\\\n        <IconDropdown\\\\\\\\n          variant={text('variant', 'bread-crumb') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', options)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          value={text('value', 'strawberry')}\\\\\\\\n          width={text('width', '260px')}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const DatePickerDropDown = () => (\\\\\\\\n  <ThemeWrapper>\\\\\\\\n    <CardComponent style={{ height: '200px' }}>\\\\\\\\n      <IconDropdown\\\\\\\\n        variant={text('variant', 'date-picker') as tSelectVariant}\\\\\\\\n        optionList={object('optionList', datePickerOptions)}\\\\\\\\n        onChange={action('Value selected')}\\\\\\\\n        value={text('value', '50')}\\\\\\\\n        width={text('width', '80px')}\\\\\\\\n        showDownArrow={boolean('Show Down Arrow', true)}\\\\\\\\n        isMultiRegionStyled={boolean('Is Multi Region Styled', false)}\\\\\\\\n      />\\\\\\\\n    </CardComponent>\\\\\\\\n  </ThemeWrapper>\\\\\\\\n)\\\\\\\\nconst arrayMap = [\\\\\\\\n  { variant: 'column-filter', name: 'column-filter0' },\\\\\\\\n  { variant: 'column-filter', name: 'column-filter1' },\\\\\\\\n  { variant: 'column-filter', name: 'column-filter2' }\\\\\\\\n]\\\\\\\\n\\\\\\\\nexport const columnOptionList = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='2em' bgColor='grey.50'>\\\\\\\\n        <div style={{ width: '200px', margin: 'auto' }}>\\\\\\\\n          {arrayMap.map((obj: any, index: number) => {\\\\\\\\n            return (\\\\\\\\n              <IconDropdown\\\\\\\\n                variant={text('variant', obj?.variant) as tSelectVariant}\\\\\\\\n                optionList={object('optionList', columnOption)}\\\\\\\\n                onChange={action('Value selected')}\\\\\\\\n                width={text('width', '10px')}\\\\\\\\n                isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n                key={index}\\\\\\\\n              />\\\\\\\\n            )\\\\\\\\n          })}\\\\\\\\n        </div>\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const DropdownUniversal = () => {\\\\\\\\n  // reference to style\\\\\\\\n  // const theme = useContext(ThemeContext)\\\\\\\\n  // const borderBottom = `1px solid ${theme?.colors?.grey['A800']}`\\\\\\\\n  // const customStyle = {\\\\\\\\n  //   control: (provided: any) => ({\\\\\\\\n  //     ...provided,\\\\\\\\n  //     borderStyle: 'none',\\\\\\\\n  //     borderBottom,\\\\\\\\n  //     borderRadius: '0px',\\\\\\\\n  //     boxShadow: 'none',\\\\\\\\n  //     borderColor: theme?.colors?.grey?.A800,\\\\\\\\n  //     '&:focus': {\\\\\\\\n  //       borderStyle: 'none',\\\\\\\\n  //       borderBottom,\\\\\\\\n  //       boxShadow: 'none',\\\\\\\\n  //       borderColor: theme?.colors?.grey?.A800\\\\\\\\n  //     },\\\\\\\\n  //     '&:hover': {\\\\\\\\n  //       borderStyle: 'none',\\\\\\\\n  //       borderBottom,\\\\\\\\n  //       boxShadow: 'none',\\\\\\\\n  //       borderColor: theme?.colors?.grey?.A800\\\\\\\\n  //     }\\\\\\\\n  //   }),\\\\\\\\n  //   option: (provided: any, state: any) => ({\\\\\\\\n  //     ...provided,\\\\\\\\n  //     backgroundColor: state?.isSelected\\\\\\\\n  //       ? theme?.colors?.primary?.main\\\\\\\\n  //       : theme?.colors?.white,\\\\\\\\n  //     '&:hover': {\\\\\\\\n  //       backgroundColor: state?.isSelected\\\\\\\\n  //         ? theme?.colors?.primary?.main\\\\\\\\n  //         : theme?.colors?.grey['50']\\\\\\\\n  //     }\\\\\\\\n  //   }),\\\\\\\\n\\\\\\\\n  //   menu: (provided: any, state: any) => ({\\\\\\\\n  //     ...provided,\\\\\\\\n  //     backgroundColor: state?.isSelected\\\\\\\\n  //       ? theme.colors.primary.main\\\\\\\\n  //       : theme?.colors?.white,\\\\\\\\n  //     borderRadius: '2px',\\\\\\\\n  //     '&:hover': {\\\\\\\\n  //       backgroundColor: state?.isSelected\\\\\\\\n  //         ? theme?.colors?.primary?.main\\\\\\\\n  //         : theme?.colors?.white\\\\\\\\n  //     },\\\\\\\\n  //     marginTop: '5px',\\\\\\\\n  //     marginLeft: '16px',\\\\\\\\n  //     width: '90%'\\\\\\\\n  //   }),\\\\\\\\n  //   menuList: (provided: any) => ({\\\\\\\\n  //     ...provided,\\\\\\\\n  //     marginTop: '0px'\\\\\\\\n  //   }),\\\\\\\\n  //   valueContainer: (provided: any) => ({\\\\\\\\n  //     ...provided,\\\\\\\\n  //     padding: '0px'\\\\\\\\n  //   })\\\\\\\\n  // }\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='2em' bgColor='grey.50'>\\\\\\\\n        <IconDropdown\\\\\\\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', ListViewOption)}\\\\\\\\n          width={text('width', '120px')}\\\\\\\\n          menuIsOpen={boolean('menuIsOpen', false)}\\\\\\\\n          primary={boolean('primary', false)}\\\\\\\\n          intent={text('intent', 'page') as tIntent}\\\\\\\\n          onChange={action('Value Changed')}\\\\\\\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n          value='available'\\\\\\\\n          optionComponent={({ selectedOption }: any) => {\\\\\\\\n            return (\\\\\\\\n              <div>\\\\\\\\n                <div>{selectedOption?.color}</div>\\\\\\\\n                <div>{selectedOption?.label}</div>\\\\\\\\n              </div>\\\\\\\\n            )\\\\\\\\n          }}\\\\\\\\n          // customStyle={customStyle}\\\\\\\\n        >\\\\\\\\n          {({\\\\\\\\n            selectedOption,\\\\\\\\n            menuIsOpen,\\\\\\\\n            setMenuIsOpen\\\\\\\\n          }: IUniversalDropdownChildren) => {\\\\\\\\n            return (\\\\\\\\n              <Button\\\\\\\\n                onClick={() => {\\\\\\\\n                  setMenuIsOpen(!menuIsOpen)\\\\\\\\n                  action('Universal open/closed')(menuIsOpen)\\\\\\\\n                }}\\\\\\\\n                color={text('color', 'white')}\\\\\\\\n                bgColor={text('bgColor', 'black')}\\\\\\\\n                fullWidth={boolean('fullWidth', false)}\\\\\\\\n              >\\\\\\\\n                {selectedOption?.label}\\\\\\\\n              </Button>\\\\\\\\n            )\\\\\\\\n          }}\\\\\\\\n        </IconDropdown>\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const TextFieldDropdown = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='2em' bgColor='grey.50'>\\\\\\\\n        <IconDropdown\\\\\\\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', ListViewOption)}\\\\\\\\n          width={text('width', '120px')}\\\\\\\\n          menuIsOpen={boolean('menuIsOpen', false)}\\\\\\\\n          primary={boolean('primary', false)}\\\\\\\\n          intent={text('intent', 'page') as tIntent}\\\\\\\\n          onChange={action('Value Changed')}\\\\\\\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n          value='available'\\\\\\\\n          optionComponent={({ selectedOption }: any) => {\\\\\\\\n            return (\\\\\\\\n              <div>\\\\\\\\n                <div>{selectedOption?.color}</div>\\\\\\\\n                <div>{selectedOption?.label}</div>\\\\\\\\n              </div>\\\\\\\\n            )\\\\\\\\n          }}\\\\\\\\n          // customStyle={customStyle}\\\\\\\\n        >\\\\\\\\n          {({\\\\\\\\n            selectedOption,\\\\\\\\n            menuIsOpen,\\\\\\\\n            setMenuIsOpen\\\\\\\\n          }: IUniversalDropdownChildren) => {\\\\\\\\n            return (\\\\\\\\n              <TextInput\\\\\\\\n                id='someId'\\\\\\\\n                name='someName'\\\\\\\\n                className='someClassName'\\\\\\\\n                label={text('label', 'Username')}\\\\\\\\n                labelColor={text('labelColor', 'text.inputLabel.default')}\\\\\\\\n                placeholder={text('placeholder', 'Enter text here...')}\\\\\\\\n                maxLength={number('maxLength', 10)}\\\\\\\\n                error={boolean('error', false)}\\\\\\\\n                errorMessage={text('errorMessage', '')}\\\\\\\\n                required={boolean('required', false)}\\\\\\\\n                fullWidth={boolean('fullWidth', false)}\\\\\\\\n                onChange={action('Triggered: onChange')}\\\\\\\\n                onClick={() => {\\\\\\\\n                  setMenuIsOpen(!menuIsOpen)\\\\\\\\n                  action('universal open/closed')(menuIsOpen)\\\\\\\\n                }}\\\\\\\\n                value={selectedOption?.value}\\\\\\\\n              />\\\\\\\\n            )\\\\\\\\n          }}\\\\\\\\n        </IconDropdown>\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\",\\\\\\\"locationsMap\\\\\\\":{}},},\\\\n  title: `${path}/IconDropdown`,\\\\n  decorators: [withKnobs],\\\\n  component: IconDropdown\\\\n}\\\\n\\\\nconst ListViewOption = [\\\\n  {\\\\n    value: 'available',\\\\n    label: 'Mark As Available',\\\\n    color: 'blue',\\\\n    tooltipText: 'Mark As Available',\\\\n    isDisabled: true\\\\n  },\\\\n  {\\\\n    value: 'unavailable',\\\\n    label: 'Mark As Unavailable',\\\\n    color: 'red',\\\\n    tooltipText: 'Mark As Unavailable'\\\\n  },\\\\n  {\\\\n    value: 'active',\\\\n    label: 'Mark As Active',\\\\n    color: 'purple',\\\\n    tooltipText: 'Mark As Active'\\\\n  },\\\\n  {\\\\n    value: 'inactive',\\\\n    label: 'Mark As Inactive',\\\\n    color: 'green',\\\\n    tooltipText: 'Mark As Inactive'\\\\n  }\\\\n]\\\\n\\\\nconst MultiLevelListViewOption = [\\\\n  {\\\\n    id: 'available',\\\\n    value: 'available',\\\\n    label: 'Mark As Available',\\\\n    color: 'blue',\\\\n    tooltipText: 'Mark As Available',\\\\n    options: [\\\\n      {\\\\n        id: 'available',\\\\n        value: 'available',\\\\n        label: 'Mark As Child Available',\\\\n        color: 'blue',\\\\n        tooltipText: 'Mark As Child Available'\\\\n      },\\\\n      {\\\\n        id: 'unavailable',\\\\n        value: 'unavailable',\\\\n        label: 'Mark As Child Unavailable',\\\\n        color: 'red',\\\\n        tooltipText: 'Mark As Child Unavailable'\\\\n      },\\\\n      {\\\\n        id: 'active',\\\\n        value: 'active',\\\\n        label: 'Mark As Child Active',\\\\n        color: 'purple',\\\\n        tooltipText: 'Mark As Child Active'\\\\n      },\\\\n      {\\\\n        id: 'inactive',\\\\n        value: 'inactive',\\\\n        label: 'Mark As Child Inactive',\\\\n        color: 'green',\\\\n        tooltipText: 'Mark As Child Inactive',\\\\n        options: [\\\\n          {\\\\n            id: 'available',\\\\n            value: 'available',\\\\n            label: 'Mark As Grand Child Available',\\\\n            color: 'blue',\\\\n            tooltipText: 'Mark As Grand Child Available'\\\\n          },\\\\n          {\\\\n            id: 'unavailable',\\\\n            value: 'unavailable',\\\\n            label: 'Mark As Grand Child Unavailable',\\\\n            color: 'red',\\\\n            tooltipText: 'Mark As Grand Child Unavailable'\\\\n          }\\\\n        ]\\\\n      }\\\\n    ]\\\\n  },\\\\n  {\\\\n    id: 'unavailable',\\\\n    value: 'unavailable',\\\\n    label: 'Mark As Unavailable',\\\\n    color: 'red',\\\\n    tooltipText: 'Mark As Unavailable'\\\\n  },\\\\n  {\\\\n    id: 'active',\\\\n    value: 'active',\\\\n    label: 'Mark As Active',\\\\n    color: 'purple',\\\\n    tooltipText: 'Mark As Active'\\\\n  },\\\\n  {\\\\n    id: 'inactive',\\\\n    value: 'inactive',\\\\n    label: 'Mark As Inactive',\\\\n    color: 'green',\\\\n    tooltipText: 'Mark As Inactive'\\\\n  }\\\\n]\\\\n\\\\nconst paginationOptions = [\\\\n  { value: '25', label: '25 per page', title: '25 per page' },\\\\n  { value: '50', label: '50 per page', title: '50 per page' },\\\\n  { value: '100', label: '100 per page', title: '100 per page' },\\\\n  { value: '200', label: '200 per page', title: '200 per page' }\\\\n]\\\\n\\\\nconst columnOption = [\\\\n  { value: 'ascending', label: 'Sort Ascending', iconVariant: 'hide-menu-box' },\\\\n  {\\\\n    value: 'descending',\\\\n    label: 'Sort Descending',\\\\n    iconVariant: 'hub-location'\\\\n  },\\\\n  { value: 'hideColumn', label: 'Hide Column', iconVariant: 'close' },\\\\n  { value: 'pinLeft', label: 'Pin Left', iconVariant: 'angle-left' },\\\\n  { value: 'pinright', label: 'Pin Right', iconVariant: 'angle-right-thin' }\\\\n]\\\\n\\\\nconst options = [\\\\n  {\\\\n    value: 'emailVerificationPending',\\\\n    label: 'Email Verification Pending Shipper'\\\\n  },\\\\n  { value: 'allShippers', label: 'All Shippers' },\\\\n  { value: 'approvalPendingShippers', label: 'Approval Pending Shippers' }\\\\n]\\\\n\\\\nconst datePickerOptions = [\\\\n  { value: 'January', label: 'January' },\\\\n  { value: 'February', label: 'February' },\\\\n  { value: 'March', label: 'March' },\\\\n  { value: 'April', label: 'April' },\\\\n  { value: 'May', label: 'May' },\\\\n  { value: 'June', label: 'June' },\\\\n  { value: 'July', label: 'July' },\\\\n  { value: 'August', label: 'August' },\\\\n  { value: 'September', label: 'September' },\\\\n  { value: 'October', label: 'October' },\\\\n  { value: 'November', label: 'November' },\\\\n  { value: 'December', label: 'December' }\\\\n]\\\\n\\\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\\\nexport const ButtonDropdown = addSourceDecorator(() => (\\\\n  <ThemeWrapper>\\\\n    <Box p='2em' bgColor='grey.50'>\\\\n      <IconDropdown\\\\n        variant={text('varaint', 'button-dropdown') as tSelectVariant}\\\\n        optionList={object('optionList', ListViewOption)}\\\\n        width={text('width', '120px')}\\\\n        menuIsOpen={boolean('menuIsOpen', false)}\\\\n        iconButtonDetails={array('iconList', [\\\\n          'hide-menu-box',\\\\n          'More',\\\\n          'angle-down'\\\\n        ])}\\\\n        primary={boolean('primary', false)}\\\\n        intent={text('intent', 'page') as tIntent}\\\\n        onChange={action('Value Changed')}\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n        disabled={boolean('disabled', false)}\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\n        tooltipProps={{\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\n        }}\\\\n      />\\\\n    </Box>\\\\n  </ThemeWrapper>\\\\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\\\nexport const TextDropdown = addSourceDecorator(() => (\\\\n  <ThemeWrapper>\\\\n    <Box p='2em' bgColor='grey.50'>\\\\n      <IconDropdown\\\\n        variant={text('varaint', 'text-dropdown') as tSelectVariant}\\\\n        optionList={object('optionList', ListViewOption)}\\\\n        width={text('width', '120px')}\\\\n        menuIsOpen={boolean('menuIsOpen', false)}\\\\n        iconButtonDetails={array('iconList', [\\\\n          'hide-menu-box',\\\\n          'More',\\\\n          'angle-down'\\\\n        ])}\\\\n        primary={boolean('primary', false)}\\\\n        intent={text('intent', 'page') as tIntent}\\\\n        onChange={action('Value Changed')}\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n        disabled={boolean('disabled', false)}\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\n        tooltipProps={{\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\n        }}\\\\n      />\\\\n    </Box>\\\\n  </ThemeWrapper>\\\\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const MultiLevelBreadCrumb = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <IconDropdown\\\\n          variant={text('variant', 'multilevel-breadcrumb') as tSelectVariant}\\\\n          optionList={object('optionList', MultiLevelListViewOption)}\\\\n          onChange={action('Value selected')}\\\\n          value={text('value', 'strawberry')}\\\\n          width={text('width', '260px')}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n  }, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const MultiLevelButtonDropdown = addSourceDecorator(() => (\\\\n  <ThemeWrapper>\\\\n    <Box p='2em' bgColor='grey.50'>\\\\n      <IconDropdown\\\\n        variant={\\\\n          text('varaint', 'multilevel-button-dropdown') as tSelectVariant\\\\n        }\\\\n        optionList={object('optionList', MultiLevelListViewOption)}\\\\n        width={text('width', '120px')}\\\\n        menuIsOpen\\\\n        iconButtonDetails={array('iconList', [\\\\n          'hide-menu-box',\\\\n          'More',\\\\n          'angle-down'\\\\n        ])}\\\\n        defaultOpen='right'\\\\n        primary={boolean('primary', false)}\\\\n        intent={text('intent', 'page') as tIntent}\\\\n        handleClick={(id: any) => console.log('clicked from storybook', id)}\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n        disabled={boolean('disabled', false)}\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\n        tooltipProps={{\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\n        }}\\\\n      />\\\\n    </Box>\\\\n  </ThemeWrapper>\\\\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const PaginationDropdown = addSourceDecorator(() => (\\\\n  <ThemeWrapper>\\\\n    <CardComponent style={{ height: '300px' }}>\\\\n      <IconDropdown\\\\n        variant={text('variant', 'pagination-size') as tSelectVariant}\\\\n        optionList={object('optionList', paginationOptions)}\\\\n        onChange={action('Value selected')}\\\\n        value={text('value', '50')}\\\\n        width={text('width', '120px')}\\\\n      />\\\\n    </CardComponent>\\\\n  </ThemeWrapper>\\\\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const columnOptionComponent = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <div style={{ width: '200px', margin: 'auto' }}>\\\\n          <IconDropdown\\\\n            variant={text('variant', 'column-filter') as tSelectVariant}\\\\n            optionList={object('optionList', columnOption)}\\\\n            onChange={action('Value selected')}\\\\n            width={text('width', '10px')}\\\\n            isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n          />\\\\n        </div>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const BreadCrumbComponent = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <IconDropdown\\\\n          variant={text('variant', 'bread-crumb') as tSelectVariant}\\\\n          optionList={object('optionList', options)}\\\\n          onChange={action('Value selected')}\\\\n          value={text('value', 'strawberry')}\\\\n          width={text('width', '260px')}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const DatePickerDropDown = addSourceDecorator(() => (\\\\n  <ThemeWrapper>\\\\n    <CardComponent style={{ height: '200px' }}>\\\\n      <IconDropdown\\\\n        variant={text('variant', 'date-picker') as tSelectVariant}\\\\n        optionList={object('optionList', datePickerOptions)}\\\\n        onChange={action('Value selected')}\\\\n        value={text('value', '50')}\\\\n        width={text('width', '80px')}\\\\n        showDownArrow={boolean('Show Down Arrow', true)}\\\\n        isMultiRegionStyled={boolean('Is Multi Region Styled', false)}\\\\n      />\\\\n    </CardComponent>\\\\n  </ThemeWrapper>\\\\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\nconst arrayMap = [\\\\n  { variant: 'column-filter', name: 'column-filter0' },\\\\n  { variant: 'column-filter', name: 'column-filter1' },\\\\n  { variant: 'column-filter', name: 'column-filter2' }\\\\n]\\\\n\\\\nexport const columnOptionList = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <div style={{ width: '200px', margin: 'auto' }}>\\\\n          {arrayMap.map((obj: any, index: number) => {\\\\n            return (\\\\n              <IconDropdown\\\\n                variant={text('variant', obj?.variant) as tSelectVariant}\\\\n                optionList={object('optionList', columnOption)}\\\\n                onChange={action('Value selected')}\\\\n                width={text('width', '10px')}\\\\n                isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n                key={index}\\\\n              />\\\\n            )\\\\n          })}\\\\n        </div>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const DropdownUniversal = addSourceDecorator(() => {\\\\n  // reference to style\\\\n  // const theme = useContext(ThemeContext)\\\\n  // const borderBottom = `1px solid ${theme?.colors?.grey['A800']}`\\\\n  // const customStyle = {\\\\n  //   control: (provided: any) => ({\\\\n  //     ...provided,\\\\n  //     borderStyle: 'none',\\\\n  //     borderBottom,\\\\n  //     borderRadius: '0px',\\\\n  //     boxShadow: 'none',\\\\n  //     borderColor: theme?.colors?.grey?.A800,\\\\n  //     '&:focus': {\\\\n  //       borderStyle: 'none',\\\\n  //       borderBottom,\\\\n  //       boxShadow: 'none',\\\\n  //       borderColor: theme?.colors?.grey?.A800\\\\n  //     },\\\\n  //     '&:hover': {\\\\n  //       borderStyle: 'none',\\\\n  //       borderBottom,\\\\n  //       boxShadow: 'none',\\\\n  //       borderColor: theme?.colors?.grey?.A800\\\\n  //     }\\\\n  //   }),\\\\n  //   option: (provided: any, state: any) => ({\\\\n  //     ...provided,\\\\n  //     backgroundColor: state?.isSelected\\\\n  //       ? theme?.colors?.primary?.main\\\\n  //       : theme?.colors?.white,\\\\n  //     '&:hover': {\\\\n  //       backgroundColor: state?.isSelected\\\\n  //         ? theme?.colors?.primary?.main\\\\n  //         : theme?.colors?.grey['50']\\\\n  //     }\\\\n  //   }),\\\\n\\\\n  //   menu: (provided: any, state: any) => ({\\\\n  //     ...provided,\\\\n  //     backgroundColor: state?.isSelected\\\\n  //       ? theme.colors.primary.main\\\\n  //       : theme?.colors?.white,\\\\n  //     borderRadius: '2px',\\\\n  //     '&:hover': {\\\\n  //       backgroundColor: state?.isSelected\\\\n  //         ? theme?.colors?.primary?.main\\\\n  //         : theme?.colors?.white\\\\n  //     },\\\\n  //     marginTop: '5px',\\\\n  //     marginLeft: '16px',\\\\n  //     width: '90%'\\\\n  //   }),\\\\n  //   menuList: (provided: any) => ({\\\\n  //     ...provided,\\\\n  //     marginTop: '0px'\\\\n  //   }),\\\\n  //   valueContainer: (provided: any) => ({\\\\n  //     ...provided,\\\\n  //     padding: '0px'\\\\n  //   })\\\\n  // }\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <IconDropdown\\\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          width={text('width', '120px')}\\\\n          menuIsOpen={boolean('menuIsOpen', false)}\\\\n          primary={boolean('primary', false)}\\\\n          intent={text('intent', 'page') as tIntent}\\\\n          onChange={action('Value Changed')}\\\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n          disabled={boolean('disabled', false)}\\\\n          value='available'\\\\n          optionComponent={({ selectedOption }: any) => {\\\\n            return (\\\\n              <div>\\\\n                <div>{selectedOption?.color}</div>\\\\n                <div>{selectedOption?.label}</div>\\\\n              </div>\\\\n            )\\\\n          }}\\\\n          // customStyle={customStyle}\\\\n        >\\\\n          {({\\\\n            selectedOption,\\\\n            menuIsOpen,\\\\n            setMenuIsOpen\\\\n          }: IUniversalDropdownChildren) => {\\\\n            return (\\\\n              <Button\\\\n                onClick={() => {\\\\n                  setMenuIsOpen(!menuIsOpen)\\\\n                  action('Universal open/closed')(menuIsOpen)\\\\n                }}\\\\n                color={text('color', 'white')}\\\\n                bgColor={text('bgColor', 'black')}\\\\n                fullWidth={boolean('fullWidth', false)}\\\\n              >\\\\n                {selectedOption?.label}\\\\n              </Button>\\\\n            )\\\\n          }}\\\\n        </IconDropdown>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const TextFieldDropdown = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <IconDropdown\\\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          width={text('width', '120px')}\\\\n          menuIsOpen={boolean('menuIsOpen', false)}\\\\n          primary={boolean('primary', false)}\\\\n          intent={text('intent', 'page') as tIntent}\\\\n          onChange={action('Value Changed')}\\\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n          disabled={boolean('disabled', false)}\\\\n          value='available'\\\\n          optionComponent={({ selectedOption }: any) => {\\\\n            return (\\\\n              <div>\\\\n                <div>{selectedOption?.color}</div>\\\\n                <div>{selectedOption?.label}</div>\\\\n              </div>\\\\n            )\\\\n          }}\\\\n          // customStyle={customStyle}\\\\n        >\\\\n          {({\\\\n            selectedOption,\\\\n            menuIsOpen,\\\\n            setMenuIsOpen\\\\n          }: IUniversalDropdownChildren) => {\\\\n            return (\\\\n              <TextInput\\\\n                id='someId'\\\\n                name='someName'\\\\n                className='someClassName'\\\\n                label={text('label', 'Username')}\\\\n                labelColor={text('labelColor', 'text.inputLabel.default')}\\\\n                placeholder={text('placeholder', 'Enter text here...')}\\\\n                maxLength={number('maxLength', 10)}\\\\n                error={boolean('error', false)}\\\\n                errorMessage={text('errorMessage', '')}\\\\n                required={boolean('required', false)}\\\\n                fullWidth={boolean('fullWidth', false)}\\\\n                onChange={action('Triggered: onChange')}\\\\n                onClick={() => {\\\\n                  setMenuIsOpen(!menuIsOpen)\\\\n                  action('universal open/closed')(menuIsOpen)\\\\n                }}\\\\n                value={selectedOption?.value}\\\\n              />\\\\n            )\\\\n          }}\\\\n        </IconDropdown>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/IconDropdown.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\n\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/farhanansari/Code/ui-library/src/components/molecules/IconDropdown\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"import { action } from '@storybook/addon-actions'\\\\nimport {\\\\n  array,\\\\n  boolean,\\\\n  number,\\\\n  object,\\\\n  text,\\\\n  withKnobs\\\\n} from '@storybook/addon-knobs'\\\\nimport React from 'react'\\\\nimport IconDropdown from '.'\\\\nimport { path } from '..'\\\\nimport { Box } from '../../..'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport Button, { tIntent } from '../../atoms/Button'\\\\nimport CardComponent from '../../atoms/Card'\\\\nimport { tPlacement } from '../../../utilities/types'\\\\nimport {\\\\n  IUniversalDropdownChildren,\\\\n  tSelectVariant\\\\n} from '../DropDown/interface'\\\\nimport TextInput from '../TextInput'\\\\n\\\\nexport default {\\\\n  title: `${path}/IconDropdown`,\\\\n  decorators: [withKnobs],\\\\n  component: IconDropdown\\\\n}\\\\n\\\\nconst ListViewOption = [\\\\n  {\\\\n    value: 'available',\\\\n    label: 'Mark As Available',\\\\n    color: 'blue',\\\\n    tooltipText: 'Mark As Available',\\\\n    isDisabled: true\\\\n  },\\\\n  {\\\\n    value: 'unavailable',\\\\n    label: 'Mark As Unavailable',\\\\n    color: 'red',\\\\n    tooltipText: 'Mark As Unavailable'\\\\n  },\\\\n  {\\\\n    value: 'active',\\\\n    label: 'Mark As Active',\\\\n    color: 'purple',\\\\n    tooltipText: 'Mark As Active'\\\\n  },\\\\n  {\\\\n    value: 'inactive',\\\\n    label: 'Mark As Inactive',\\\\n    color: 'green',\\\\n    tooltipText: 'Mark As Inactive'\\\\n  }\\\\n]\\\\n\\\\nconst MultiLevelListViewOption = [\\\\n  {\\\\n    id: 'available',\\\\n    value: 'available',\\\\n    label: 'Mark As Available',\\\\n    color: 'blue',\\\\n    tooltipText: 'Mark As Available',\\\\n    options: [\\\\n      {\\\\n        id: 'available',\\\\n        value: 'available',\\\\n        label: 'Mark As Child Available',\\\\n        color: 'blue',\\\\n        tooltipText: 'Mark As Child Available'\\\\n      },\\\\n      {\\\\n        id: 'unavailable',\\\\n        value: 'unavailable',\\\\n        label: 'Mark As Child Unavailable',\\\\n        color: 'red',\\\\n        tooltipText: 'Mark As Child Unavailable'\\\\n      },\\\\n      {\\\\n        id: 'active',\\\\n        value: 'active',\\\\n        label: 'Mark As Child Active',\\\\n        color: 'purple',\\\\n        tooltipText: 'Mark As Child Active'\\\\n      },\\\\n      {\\\\n        id: 'inactive',\\\\n        value: 'inactive',\\\\n        label: 'Mark As Child Inactive',\\\\n        color: 'green',\\\\n        tooltipText: 'Mark As Child Inactive',\\\\n        options: [\\\\n          {\\\\n            id: 'available',\\\\n            value: 'available',\\\\n            label: 'Mark As Grand Child Available',\\\\n            color: 'blue',\\\\n            tooltipText: 'Mark As Grand Child Available'\\\\n          },\\\\n          {\\\\n            id: 'unavailable',\\\\n            value: 'unavailable',\\\\n            label: 'Mark As Grand Child Unavailable',\\\\n            color: 'red',\\\\n            tooltipText: 'Mark As Grand Child Unavailable'\\\\n          }\\\\n        ]\\\\n      }\\\\n    ]\\\\n  },\\\\n  {\\\\n    id: 'unavailable',\\\\n    value: 'unavailable',\\\\n    label: 'Mark As Unavailable',\\\\n    color: 'red',\\\\n    tooltipText: 'Mark As Unavailable'\\\\n  },\\\\n  {\\\\n    id: 'active',\\\\n    value: 'active',\\\\n    label: 'Mark As Active',\\\\n    color: 'purple',\\\\n    tooltipText: 'Mark As Active'\\\\n  },\\\\n  {\\\\n    id: 'inactive',\\\\n    value: 'inactive',\\\\n    label: 'Mark As Inactive',\\\\n    color: 'green',\\\\n    tooltipText: 'Mark As Inactive'\\\\n  }\\\\n]\\\\n\\\\nconst paginationOptions = [\\\\n  { value: '25', label: '25 per page', title: '25 per page' },\\\\n  { value: '50', label: '50 per page', title: '50 per page' },\\\\n  { value: '100', label: '100 per page', title: '100 per page' },\\\\n  { value: '200', label: '200 per page', title: '200 per page' }\\\\n]\\\\n\\\\nconst columnOption = [\\\\n  { value: 'ascending', label: 'Sort Ascending', iconVariant: 'hide-menu-box' },\\\\n  {\\\\n    value: 'descending',\\\\n    label: 'Sort Descending',\\\\n    iconVariant: 'hub-location'\\\\n  },\\\\n  { value: 'hideColumn', label: 'Hide Column', iconVariant: 'close' },\\\\n  { value: 'pinLeft', label: 'Pin Left', iconVariant: 'angle-left' },\\\\n  { value: 'pinright', label: 'Pin Right', iconVariant: 'angle-right-thin' }\\\\n]\\\\n\\\\nconst options = [\\\\n  {\\\\n    value: 'emailVerificationPending',\\\\n    label: 'Email Verification Pending Shipper'\\\\n  },\\\\n  { value: 'allShippers', label: 'All Shippers' },\\\\n  { value: 'approvalPendingShippers', label: 'Approval Pending Shippers' }\\\\n]\\\\n\\\\nconst datePickerOptions = [\\\\n  { value: 'January', label: 'January' },\\\\n  { value: 'February', label: 'February' },\\\\n  { value: 'March', label: 'March' },\\\\n  { value: 'April', label: 'April' },\\\\n  { value: 'May', label: 'May' },\\\\n  { value: 'June', label: 'June' },\\\\n  { value: 'July', label: 'July' },\\\\n  { value: 'August', label: 'August' },\\\\n  { value: 'September', label: 'September' },\\\\n  { value: 'October', label: 'October' },\\\\n  { value: 'November', label: 'November' },\\\\n  { value: 'December', label: 'December' }\\\\n]\\\\n\\\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\\\nexport const ButtonDropdown = () => (\\\\n  <ThemeWrapper>\\\\n    <Box p='2em' bgColor='grey.50'>\\\\n      <IconDropdown\\\\n        variant={text('varaint', 'button-dropdown') as tSelectVariant}\\\\n        optionList={object('optionList', ListViewOption)}\\\\n        width={text('width', '120px')}\\\\n        menuIsOpen={boolean('menuIsOpen', false)}\\\\n        iconButtonDetails={array('iconList', [\\\\n          'hide-menu-box',\\\\n          'More',\\\\n          'angle-down'\\\\n        ])}\\\\n        primary={boolean('primary', false)}\\\\n        intent={text('intent', 'page') as tIntent}\\\\n        onChange={action('Value Changed')}\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n        disabled={boolean('disabled', false)}\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\n        tooltipProps={{\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\n        }}\\\\n      />\\\\n    </Box>\\\\n  </ThemeWrapper>\\\\n)\\\\n\\\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\\\nexport const TextDropdown = () => (\\\\n  <ThemeWrapper>\\\\n    <Box p='2em' bgColor='grey.50'>\\\\n      <IconDropdown\\\\n        variant={text('varaint', 'text-dropdown') as tSelectVariant}\\\\n        optionList={object('optionList', ListViewOption)}\\\\n        width={text('width', '120px')}\\\\n        menuIsOpen={boolean('menuIsOpen', false)}\\\\n        iconButtonDetails={array('iconList', [\\\\n          'hide-menu-box',\\\\n          'More',\\\\n          'angle-down'\\\\n        ])}\\\\n        primary={boolean('primary', false)}\\\\n        intent={text('intent', 'page') as tIntent}\\\\n        onChange={action('Value Changed')}\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n        disabled={boolean('disabled', false)}\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\n        tooltipProps={{\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\n        }}\\\\n      />\\\\n    </Box>\\\\n  </ThemeWrapper>\\\\n)\\\\n\\\\nexport const MultiLevelBreadCrumb = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <IconDropdown\\\\n          variant={text('variant', 'multilevel-breadcrumb') as tSelectVariant}\\\\n          optionList={object('optionList', MultiLevelListViewOption)}\\\\n          onChange={action('Value selected')}\\\\n          value={text('value', 'strawberry')}\\\\n          width={text('width', '260px')}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n  }\\\\n\\\\nexport const MultiLevelButtonDropdown = () => (\\\\n  <ThemeWrapper>\\\\n    <Box p='2em' bgColor='grey.50'>\\\\n      <IconDropdown\\\\n        variant={\\\\n          text('varaint', 'multilevel-button-dropdown') as tSelectVariant\\\\n        }\\\\n        optionList={object('optionList', MultiLevelListViewOption)}\\\\n        width={text('width', '120px')}\\\\n        menuIsOpen\\\\n        iconButtonDetails={array('iconList', [\\\\n          'hide-menu-box',\\\\n          'More',\\\\n          'angle-down'\\\\n        ])}\\\\n        defaultOpen='right'\\\\n        primary={boolean('primary', false)}\\\\n        intent={text('intent', 'page') as tIntent}\\\\n        handleClick={(id: any) => console.log('clicked from storybook', id)}\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n        disabled={boolean('disabled', false)}\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\n        tooltipProps={{\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\n        }}\\\\n      />\\\\n    </Box>\\\\n  </ThemeWrapper>\\\\n)\\\\n\\\\nexport const PaginationDropdown = () => (\\\\n  <ThemeWrapper>\\\\n    <CardComponent style={{ height: '300px' }}>\\\\n      <IconDropdown\\\\n        variant={text('variant', 'pagination-size') as tSelectVariant}\\\\n        optionList={object('optionList', paginationOptions)}\\\\n        onChange={action('Value selected')}\\\\n        value={text('value', '50')}\\\\n        width={text('width', '120px')}\\\\n      />\\\\n    </CardComponent>\\\\n  </ThemeWrapper>\\\\n)\\\\n\\\\nexport const columnOptionComponent = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <div style={{ width: '200px', margin: 'auto' }}>\\\\n          <IconDropdown\\\\n            variant={text('variant', 'column-filter') as tSelectVariant}\\\\n            optionList={object('optionList', columnOption)}\\\\n            onChange={action('Value selected')}\\\\n            width={text('width', '10px')}\\\\n            isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n          />\\\\n        </div>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const BreadCrumbComponent = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <IconDropdown\\\\n          variant={text('variant', 'bread-crumb') as tSelectVariant}\\\\n          optionList={object('optionList', options)}\\\\n          onChange={action('Value selected')}\\\\n          value={text('value', 'strawberry')}\\\\n          width={text('width', '260px')}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const DatePickerDropDown = () => (\\\\n  <ThemeWrapper>\\\\n    <CardComponent style={{ height: '200px' }}>\\\\n      <IconDropdown\\\\n        variant={text('variant', 'date-picker') as tSelectVariant}\\\\n        optionList={object('optionList', datePickerOptions)}\\\\n        onChange={action('Value selected')}\\\\n        value={text('value', '50')}\\\\n        width={text('width', '80px')}\\\\n        showDownArrow={boolean('Show Down Arrow', true)}\\\\n        isMultiRegionStyled={boolean('Is Multi Region Styled', false)}\\\\n      />\\\\n    </CardComponent>\\\\n  </ThemeWrapper>\\\\n)\\\\nconst arrayMap = [\\\\n  { variant: 'column-filter', name: 'column-filter0' },\\\\n  { variant: 'column-filter', name: 'column-filter1' },\\\\n  { variant: 'column-filter', name: 'column-filter2' }\\\\n]\\\\n\\\\nexport const columnOptionList = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <div style={{ width: '200px', margin: 'auto' }}>\\\\n          {arrayMap.map((obj: any, index: number) => {\\\\n            return (\\\\n              <IconDropdown\\\\n                variant={text('variant', obj?.variant) as tSelectVariant}\\\\n                optionList={object('optionList', columnOption)}\\\\n                onChange={action('Value selected')}\\\\n                width={text('width', '10px')}\\\\n                isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n                key={index}\\\\n              />\\\\n            )\\\\n          })}\\\\n        </div>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const DropdownUniversal = () => {\\\\n  // reference to style\\\\n  // const theme = useContext(ThemeContext)\\\\n  // const borderBottom = `1px solid ${theme?.colors?.grey['A800']}`\\\\n  // const customStyle = {\\\\n  //   control: (provided: any) => ({\\\\n  //     ...provided,\\\\n  //     borderStyle: 'none',\\\\n  //     borderBottom,\\\\n  //     borderRadius: '0px',\\\\n  //     boxShadow: 'none',\\\\n  //     borderColor: theme?.colors?.grey?.A800,\\\\n  //     '&:focus': {\\\\n  //       borderStyle: 'none',\\\\n  //       borderBottom,\\\\n  //       boxShadow: 'none',\\\\n  //       borderColor: theme?.colors?.grey?.A800\\\\n  //     },\\\\n  //     '&:hover': {\\\\n  //       borderStyle: 'none',\\\\n  //       borderBottom,\\\\n  //       boxShadow: 'none',\\\\n  //       borderColor: theme?.colors?.grey?.A800\\\\n  //     }\\\\n  //   }),\\\\n  //   option: (provided: any, state: any) => ({\\\\n  //     ...provided,\\\\n  //     backgroundColor: state?.isSelected\\\\n  //       ? theme?.colors?.primary?.main\\\\n  //       : theme?.colors?.white,\\\\n  //     '&:hover': {\\\\n  //       backgroundColor: state?.isSelected\\\\n  //         ? theme?.colors?.primary?.main\\\\n  //         : theme?.colors?.grey['50']\\\\n  //     }\\\\n  //   }),\\\\n\\\\n  //   menu: (provided: any, state: any) => ({\\\\n  //     ...provided,\\\\n  //     backgroundColor: state?.isSelected\\\\n  //       ? theme.colors.primary.main\\\\n  //       : theme?.colors?.white,\\\\n  //     borderRadius: '2px',\\\\n  //     '&:hover': {\\\\n  //       backgroundColor: state?.isSelected\\\\n  //         ? theme?.colors?.primary?.main\\\\n  //         : theme?.colors?.white\\\\n  //     },\\\\n  //     marginTop: '5px',\\\\n  //     marginLeft: '16px',\\\\n  //     width: '90%'\\\\n  //   }),\\\\n  //   menuList: (provided: any) => ({\\\\n  //     ...provided,\\\\n  //     marginTop: '0px'\\\\n  //   }),\\\\n  //   valueContainer: (provided: any) => ({\\\\n  //     ...provided,\\\\n  //     padding: '0px'\\\\n  //   })\\\\n  // }\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <IconDropdown\\\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          width={text('width', '120px')}\\\\n          menuIsOpen={boolean('menuIsOpen', false)}\\\\n          primary={boolean('primary', false)}\\\\n          intent={text('intent', 'page') as tIntent}\\\\n          onChange={action('Value Changed')}\\\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n          disabled={boolean('disabled', false)}\\\\n          value='available'\\\\n          optionComponent={({ selectedOption }: any) => {\\\\n            return (\\\\n              <div>\\\\n                <div>{selectedOption?.color}</div>\\\\n                <div>{selectedOption?.label}</div>\\\\n              </div>\\\\n            )\\\\n          }}\\\\n          // customStyle={customStyle}\\\\n        >\\\\n          {({\\\\n            selectedOption,\\\\n            menuIsOpen,\\\\n            setMenuIsOpen\\\\n          }: IUniversalDropdownChildren) => {\\\\n            return (\\\\n              <Button\\\\n                onClick={() => {\\\\n                  setMenuIsOpen(!menuIsOpen)\\\\n                  action('Universal open/closed')(menuIsOpen)\\\\n                }}\\\\n                color={text('color', 'white')}\\\\n                bgColor={text('bgColor', 'black')}\\\\n                fullWidth={boolean('fullWidth', false)}\\\\n              >\\\\n                {selectedOption?.label}\\\\n              </Button>\\\\n            )\\\\n          }}\\\\n        </IconDropdown>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const TextFieldDropdown = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <IconDropdown\\\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          width={text('width', '120px')}\\\\n          menuIsOpen={boolean('menuIsOpen', false)}\\\\n          primary={boolean('primary', false)}\\\\n          intent={text('intent', 'page') as tIntent}\\\\n          onChange={action('Value Changed')}\\\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n          disabled={boolean('disabled', false)}\\\\n          value='available'\\\\n          optionComponent={({ selectedOption }: any) => {\\\\n            return (\\\\n              <div>\\\\n                <div>{selectedOption?.color}</div>\\\\n                <div>{selectedOption?.label}</div>\\\\n              </div>\\\\n            )\\\\n          }}\\\\n          // customStyle={customStyle}\\\\n        >\\\\n          {({\\\\n            selectedOption,\\\\n            menuIsOpen,\\\\n            setMenuIsOpen\\\\n          }: IUniversalDropdownChildren) => {\\\\n            return (\\\\n              <TextInput\\\\n                id='someId'\\\\n                name='someName'\\\\n                className='someClassName'\\\\n                label={text('label', 'Username')}\\\\n                labelColor={text('labelColor', 'text.inputLabel.default')}\\\\n                placeholder={text('placeholder', 'Enter text here...')}\\\\n                maxLength={number('maxLength', 10)}\\\\n                error={boolean('error', false)}\\\\n                errorMessage={text('errorMessage', '')}\\\\n                required={boolean('required', false)}\\\\n                fullWidth={boolean('fullWidth', false)}\\\\n                onChange={action('Triggered: onChange')}\\\\n                onClick={() => {\\\\n                  setMenuIsOpen(!menuIsOpen)\\\\n                  action('universal open/closed')(menuIsOpen)\\\\n                }}\\\\n                value={selectedOption?.value}\\\\n              />\\\\n            )\\\\n          }}\\\\n        </IconDropdown>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/IconDropdown.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\nimport { action } from '@storybook/addon-actions'\\nimport {\\n  array,\\n  boolean,\\n  number,\\n  object,\\n  text,\\n  withKnobs\\n} from '@storybook/addon-knobs'\\nimport React from 'react'\\nimport IconDropdown from '.'\\nimport { path } from '..'\\nimport { Box } from '../../..'\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\nimport Button, { tIntent } from '../../atoms/Button'\\nimport CardComponent from '../../atoms/Card'\\nimport { tPlacement } from '../../../utilities/types'\\nimport {\\n  IUniversalDropdownChildren,\\n  tSelectVariant\\n} from '../DropDown/interface'\\nimport TextInput from '../TextInput'\\n\\nexport default {parameters: {\\\"storySource\\\":{\\\"source\\\":\\\"\\\\n\\\\n// @ts-nocheck\\\\n// @ts-ignore\\\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\\\n// @ts-ignore\\\\nvar addSourceDecorator = require(\\\\\\\"@storybook/source-loader/preview\\\\\\\").addSource;\\\\n// @ts-ignore\\\\nvar __SOURCE_PREFIX__ = \\\\\\\"/Users/farhanansari/Code/ui-library/src/components/molecules/IconDropdown\\\\\\\";\\\\n// @ts-ignore\\\\nvar __STORY__ = \\\\\\\"import { action } from '@storybook/addon-actions'\\\\\\\\nimport {\\\\\\\\n  array,\\\\\\\\n  boolean,\\\\\\\\n  number,\\\\\\\\n  object,\\\\\\\\n  text,\\\\\\\\n  withKnobs\\\\\\\\n} from '@storybook/addon-knobs'\\\\\\\\nimport React from 'react'\\\\\\\\nimport IconDropdown from '.'\\\\\\\\nimport { path } from '..'\\\\\\\\nimport { Box } from '../../..'\\\\\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\\\\\nimport Button, { tIntent } from '../../atoms/Button'\\\\\\\\nimport CardComponent from '../../atoms/Card'\\\\\\\\nimport { tPlacement } from '../../../utilities/types'\\\\\\\\nimport {\\\\\\\\n  IUniversalDropdownChildren,\\\\\\\\n  tSelectVariant\\\\\\\\n} from '../DropDown/interface'\\\\\\\\nimport TextInput from '../TextInput'\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/IconDropdown`,\\\\\\\\n  decorators: [withKnobs],\\\\\\\\n  component: IconDropdown\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst ListViewOption = [\\\\\\\\n  {\\\\\\\\n    value: 'available',\\\\\\\\n    label: 'Mark As Available',\\\\\\\\n    color: 'blue',\\\\\\\\n    tooltipText: 'Mark As Available',\\\\\\\\n    isDisabled: true\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    value: 'unavailable',\\\\\\\\n    label: 'Mark As Unavailable',\\\\\\\\n    color: 'red',\\\\\\\\n    tooltipText: 'Mark As Unavailable'\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    value: 'active',\\\\\\\\n    label: 'Mark As Active',\\\\\\\\n    color: 'purple',\\\\\\\\n    tooltipText: 'Mark As Active'\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    value: 'inactive',\\\\\\\\n    label: 'Mark As Inactive',\\\\\\\\n    color: 'green',\\\\\\\\n    tooltipText: 'Mark As Inactive'\\\\\\\\n  }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst MultiLevelListViewOption = [\\\\\\\\n  {\\\\\\\\n    id: 'available',\\\\\\\\n    value: 'available',\\\\\\\\n    label: 'Mark As Available',\\\\\\\\n    color: 'blue',\\\\\\\\n    tooltipText: 'Mark As Available',\\\\\\\\n    options: [\\\\\\\\n      {\\\\\\\\n        id: 'available',\\\\\\\\n        value: 'available',\\\\\\\\n        label: 'Mark As Child Available',\\\\\\\\n        color: 'blue',\\\\\\\\n        tooltipText: 'Mark As Child Available'\\\\\\\\n      },\\\\\\\\n      {\\\\\\\\n        id: 'unavailable',\\\\\\\\n        value: 'unavailable',\\\\\\\\n        label: 'Mark As Child Unavailable',\\\\\\\\n        color: 'red',\\\\\\\\n        tooltipText: 'Mark As Child Unavailable'\\\\\\\\n      },\\\\\\\\n      {\\\\\\\\n        id: 'active',\\\\\\\\n        value: 'active',\\\\\\\\n        label: 'Mark As Child Active',\\\\\\\\n        color: 'purple',\\\\\\\\n        tooltipText: 'Mark As Child Active'\\\\\\\\n      },\\\\\\\\n      {\\\\\\\\n        id: 'inactive',\\\\\\\\n        value: 'inactive',\\\\\\\\n        label: 'Mark As Child Inactive',\\\\\\\\n        color: 'green',\\\\\\\\n        tooltipText: 'Mark As Child Inactive',\\\\\\\\n        options: [\\\\\\\\n          {\\\\\\\\n            id: 'available',\\\\\\\\n            value: 'available',\\\\\\\\n            label: 'Mark As Grand Child Available',\\\\\\\\n            color: 'blue',\\\\\\\\n            tooltipText: 'Mark As Grand Child Available'\\\\\\\\n          },\\\\\\\\n          {\\\\\\\\n            id: 'unavailable',\\\\\\\\n            value: 'unavailable',\\\\\\\\n            label: 'Mark As Grand Child Unavailable',\\\\\\\\n            color: 'red',\\\\\\\\n            tooltipText: 'Mark As Grand Child Unavailable'\\\\\\\\n          }\\\\\\\\n        ]\\\\\\\\n      }\\\\\\\\n    ]\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    id: 'unavailable',\\\\\\\\n    value: 'unavailable',\\\\\\\\n    label: 'Mark As Unavailable',\\\\\\\\n    color: 'red',\\\\\\\\n    tooltipText: 'Mark As Unavailable'\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    id: 'active',\\\\\\\\n    value: 'active',\\\\\\\\n    label: 'Mark As Active',\\\\\\\\n    color: 'purple',\\\\\\\\n    tooltipText: 'Mark As Active'\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    id: 'inactive',\\\\\\\\n    value: 'inactive',\\\\\\\\n    label: 'Mark As Inactive',\\\\\\\\n    color: 'green',\\\\\\\\n    tooltipText: 'Mark As Inactive'\\\\\\\\n  }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst paginationOptions = [\\\\\\\\n  { value: '25', label: '25 per page', title: '25 per page' },\\\\\\\\n  { value: '50', label: '50 per page', title: '50 per page' },\\\\\\\\n  { value: '100', label: '100 per page', title: '100 per page' },\\\\\\\\n  { value: '200', label: '200 per page', title: '200 per page' }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst columnOption = [\\\\\\\\n  { value: 'ascending', label: 'Sort Ascending', iconVariant: 'hide-menu-box' },\\\\\\\\n  {\\\\\\\\n    value: 'descending',\\\\\\\\n    label: 'Sort Descending',\\\\\\\\n    iconVariant: 'hub-location'\\\\\\\\n  },\\\\\\\\n  { value: 'hideColumn', label: 'Hide Column', iconVariant: 'close' },\\\\\\\\n  { value: 'pinLeft', label: 'Pin Left', iconVariant: 'angle-left' },\\\\\\\\n  { value: 'pinright', label: 'Pin Right', iconVariant: 'angle-right-thin' }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst options = [\\\\\\\\n  {\\\\\\\\n    value: 'emailVerificationPending',\\\\\\\\n    label: 'Email Verification Pending Shipper'\\\\\\\\n  },\\\\\\\\n  { value: 'allShippers', label: 'All Shippers' },\\\\\\\\n  { value: 'approvalPendingShippers', label: 'Approval Pending Shippers' }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst datePickerOptions = [\\\\\\\\n  { value: 'January', label: 'January' },\\\\\\\\n  { value: 'February', label: 'February' },\\\\\\\\n  { value: 'March', label: 'March' },\\\\\\\\n  { value: 'April', label: 'April' },\\\\\\\\n  { value: 'May', label: 'May' },\\\\\\\\n  { value: 'June', label: 'June' },\\\\\\\\n  { value: 'July', label: 'July' },\\\\\\\\n  { value: 'August', label: 'August' },\\\\\\\\n  { value: 'September', label: 'September' },\\\\\\\\n  { value: 'October', label: 'October' },\\\\\\\\n  { value: 'November', label: 'November' },\\\\\\\\n  { value: 'December', label: 'December' }\\\\\\\\n]\\\\\\\\n\\\\\\\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\\\\\\\nexport const ButtonDropdown = () => (\\\\\\\\n  <ThemeWrapper>\\\\\\\\n    <Box p='2em' bgColor='grey.50'>\\\\\\\\n      <IconDropdown\\\\\\\\n        variant={text('varaint', 'button-dropdown') as tSelectVariant}\\\\\\\\n        optionList={object('optionList', ListViewOption)}\\\\\\\\n        width={text('width', '120px')}\\\\\\\\n        menuIsOpen={boolean('menuIsOpen', false)}\\\\\\\\n        iconButtonDetails={array('iconList', [\\\\\\\\n          'hide-menu-box',\\\\\\\\n          'More',\\\\\\\\n          'angle-down'\\\\\\\\n        ])}\\\\\\\\n        primary={boolean('primary', false)}\\\\\\\\n        intent={text('intent', 'page') as tIntent}\\\\\\\\n        onChange={action('Value Changed')}\\\\\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n        disabled={boolean('disabled', false)}\\\\\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\\\\\n        tooltipProps={{\\\\\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </Box>\\\\\\\\n  </ThemeWrapper>\\\\\\\\n)\\\\\\\\n\\\\\\\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\\\\\\\nexport const TextDropdown = () => (\\\\\\\\n  <ThemeWrapper>\\\\\\\\n    <Box p='2em' bgColor='grey.50'>\\\\\\\\n      <IconDropdown\\\\\\\\n        variant={text('varaint', 'text-dropdown') as tSelectVariant}\\\\\\\\n        optionList={object('optionList', ListViewOption)}\\\\\\\\n        width={text('width', '120px')}\\\\\\\\n        menuIsOpen={boolean('menuIsOpen', false)}\\\\\\\\n        iconButtonDetails={array('iconList', [\\\\\\\\n          'hide-menu-box',\\\\\\\\n          'More',\\\\\\\\n          'angle-down'\\\\\\\\n        ])}\\\\\\\\n        primary={boolean('primary', false)}\\\\\\\\n        intent={text('intent', 'page') as tIntent}\\\\\\\\n        onChange={action('Value Changed')}\\\\\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n        disabled={boolean('disabled', false)}\\\\\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\\\\\n        tooltipProps={{\\\\\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </Box>\\\\\\\\n  </ThemeWrapper>\\\\\\\\n)\\\\\\\\n\\\\\\\\nexport const MultiLevelBreadCrumb = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='2em' bgColor='grey.50'>\\\\\\\\n        <IconDropdown\\\\\\\\n          variant={text('variant', 'multilevel-breadcrumb') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', MultiLevelListViewOption)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          value={text('value', 'strawberry')}\\\\\\\\n          width={text('width', '260px')}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n  }\\\\\\\\n\\\\\\\\nexport const MultiLevelButtonDropdown = () => (\\\\\\\\n  <ThemeWrapper>\\\\\\\\n    <Box p='2em' bgColor='grey.50'>\\\\\\\\n      <IconDropdown\\\\\\\\n        variant={\\\\\\\\n          text('varaint', 'multilevel-button-dropdown') as tSelectVariant\\\\\\\\n        }\\\\\\\\n        optionList={object('optionList', MultiLevelListViewOption)}\\\\\\\\n        width={text('width', '120px')}\\\\\\\\n        menuIsOpen\\\\\\\\n        iconButtonDetails={array('iconList', [\\\\\\\\n          'hide-menu-box',\\\\\\\\n          'More',\\\\\\\\n          'angle-down'\\\\\\\\n        ])}\\\\\\\\n        defaultOpen='right'\\\\\\\\n        primary={boolean('primary', false)}\\\\\\\\n        intent={text('intent', 'page') as tIntent}\\\\\\\\n        handleClick={(id: any) => console.log('clicked from storybook', id)}\\\\\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n        disabled={boolean('disabled', false)}\\\\\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\\\\\n        tooltipProps={{\\\\\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </Box>\\\\\\\\n  </ThemeWrapper>\\\\\\\\n)\\\\\\\\n\\\\\\\\nexport const PaginationDropdown = () => (\\\\\\\\n  <ThemeWrapper>\\\\\\\\n    <CardComponent style={{ height: '300px' }}>\\\\\\\\n      <IconDropdown\\\\\\\\n        variant={text('variant', 'pagination-size') as tSelectVariant}\\\\\\\\n        optionList={object('optionList', paginationOptions)}\\\\\\\\n        onChange={action('Value selected')}\\\\\\\\n        value={text('value', '50')}\\\\\\\\n        width={text('width', '120px')}\\\\\\\\n      />\\\\\\\\n    </CardComponent>\\\\\\\\n  </ThemeWrapper>\\\\\\\\n)\\\\\\\\n\\\\\\\\nexport const columnOptionComponent = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='2em' bgColor='grey.50'>\\\\\\\\n        <div style={{ width: '200px', margin: 'auto' }}>\\\\\\\\n          <IconDropdown\\\\\\\\n            variant={text('variant', 'column-filter') as tSelectVariant}\\\\\\\\n            optionList={object('optionList', columnOption)}\\\\\\\\n            onChange={action('Value selected')}\\\\\\\\n            width={text('width', '10px')}\\\\\\\\n            isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n          />\\\\\\\\n        </div>\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const BreadCrumbComponent = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='2em' bgColor='grey.50'>\\\\\\\\n        <IconDropdown\\\\\\\\n          variant={text('variant', 'bread-crumb') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', options)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          value={text('value', 'strawberry')}\\\\\\\\n          width={text('width', '260px')}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const DatePickerDropDown = () => (\\\\\\\\n  <ThemeWrapper>\\\\\\\\n    <CardComponent style={{ height: '200px' }}>\\\\\\\\n      <IconDropdown\\\\\\\\n        variant={text('variant', 'date-picker') as tSelectVariant}\\\\\\\\n        optionList={object('optionList', datePickerOptions)}\\\\\\\\n        onChange={action('Value selected')}\\\\\\\\n        value={text('value', '50')}\\\\\\\\n        width={text('width', '80px')}\\\\\\\\n        showDownArrow={boolean('Show Down Arrow', true)}\\\\\\\\n        isMultiRegionStyled={boolean('Is Multi Region Styled', false)}\\\\\\\\n      />\\\\\\\\n    </CardComponent>\\\\\\\\n  </ThemeWrapper>\\\\\\\\n)\\\\\\\\nconst arrayMap = [\\\\\\\\n  { variant: 'column-filter', name: 'column-filter0' },\\\\\\\\n  { variant: 'column-filter', name: 'column-filter1' },\\\\\\\\n  { variant: 'column-filter', name: 'column-filter2' }\\\\\\\\n]\\\\\\\\n\\\\\\\\nexport const columnOptionList = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='2em' bgColor='grey.50'>\\\\\\\\n        <div style={{ width: '200px', margin: 'auto' }}>\\\\\\\\n          {arrayMap.map((obj: any, index: number) => {\\\\\\\\n            return (\\\\\\\\n              <IconDropdown\\\\\\\\n                variant={text('variant', obj?.variant) as tSelectVariant}\\\\\\\\n                optionList={object('optionList', columnOption)}\\\\\\\\n                onChange={action('Value selected')}\\\\\\\\n                width={text('width', '10px')}\\\\\\\\n                isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n                key={index}\\\\\\\\n              />\\\\\\\\n            )\\\\\\\\n          })}\\\\\\\\n        </div>\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const DropdownUniversal = () => {\\\\\\\\n  // reference to style\\\\\\\\n  // const theme = useContext(ThemeContext)\\\\\\\\n  // const borderBottom = `1px solid ${theme?.colors?.grey['A800']}`\\\\\\\\n  // const customStyle = {\\\\\\\\n  //   control: (provided: any) => ({\\\\\\\\n  //     ...provided,\\\\\\\\n  //     borderStyle: 'none',\\\\\\\\n  //     borderBottom,\\\\\\\\n  //     borderRadius: '0px',\\\\\\\\n  //     boxShadow: 'none',\\\\\\\\n  //     borderColor: theme?.colors?.grey?.A800,\\\\\\\\n  //     '&:focus': {\\\\\\\\n  //       borderStyle: 'none',\\\\\\\\n  //       borderBottom,\\\\\\\\n  //       boxShadow: 'none',\\\\\\\\n  //       borderColor: theme?.colors?.grey?.A800\\\\\\\\n  //     },\\\\\\\\n  //     '&:hover': {\\\\\\\\n  //       borderStyle: 'none',\\\\\\\\n  //       borderBottom,\\\\\\\\n  //       boxShadow: 'none',\\\\\\\\n  //       borderColor: theme?.colors?.grey?.A800\\\\\\\\n  //     }\\\\\\\\n  //   }),\\\\\\\\n  //   option: (provided: any, state: any) => ({\\\\\\\\n  //     ...provided,\\\\\\\\n  //     backgroundColor: state?.isSelected\\\\\\\\n  //       ? theme?.colors?.primary?.main\\\\\\\\n  //       : theme?.colors?.white,\\\\\\\\n  //     '&:hover': {\\\\\\\\n  //       backgroundColor: state?.isSelected\\\\\\\\n  //         ? theme?.colors?.primary?.main\\\\\\\\n  //         : theme?.colors?.grey['50']\\\\\\\\n  //     }\\\\\\\\n  //   }),\\\\\\\\n\\\\\\\\n  //   menu: (provided: any, state: any) => ({\\\\\\\\n  //     ...provided,\\\\\\\\n  //     backgroundColor: state?.isSelected\\\\\\\\n  //       ? theme.colors.primary.main\\\\\\\\n  //       : theme?.colors?.white,\\\\\\\\n  //     borderRadius: '2px',\\\\\\\\n  //     '&:hover': {\\\\\\\\n  //       backgroundColor: state?.isSelected\\\\\\\\n  //         ? theme?.colors?.primary?.main\\\\\\\\n  //         : theme?.colors?.white\\\\\\\\n  //     },\\\\\\\\n  //     marginTop: '5px',\\\\\\\\n  //     marginLeft: '16px',\\\\\\\\n  //     width: '90%'\\\\\\\\n  //   }),\\\\\\\\n  //   menuList: (provided: any) => ({\\\\\\\\n  //     ...provided,\\\\\\\\n  //     marginTop: '0px'\\\\\\\\n  //   }),\\\\\\\\n  //   valueContainer: (provided: any) => ({\\\\\\\\n  //     ...provided,\\\\\\\\n  //     padding: '0px'\\\\\\\\n  //   })\\\\\\\\n  // }\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='2em' bgColor='grey.50'>\\\\\\\\n        <IconDropdown\\\\\\\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', ListViewOption)}\\\\\\\\n          width={text('width', '120px')}\\\\\\\\n          menuIsOpen={boolean('menuIsOpen', false)}\\\\\\\\n          primary={boolean('primary', false)}\\\\\\\\n          intent={text('intent', 'page') as tIntent}\\\\\\\\n          onChange={action('Value Changed')}\\\\\\\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n          value='available'\\\\\\\\n          optionComponent={({ selectedOption }: any) => {\\\\\\\\n            return (\\\\\\\\n              <div>\\\\\\\\n                <div>{selectedOption?.color}</div>\\\\\\\\n                <div>{selectedOption?.label}</div>\\\\\\\\n              </div>\\\\\\\\n            )\\\\\\\\n          }}\\\\\\\\n          // customStyle={customStyle}\\\\\\\\n        >\\\\\\\\n          {({\\\\\\\\n            selectedOption,\\\\\\\\n            menuIsOpen,\\\\\\\\n            setMenuIsOpen\\\\\\\\n          }: IUniversalDropdownChildren) => {\\\\\\\\n            return (\\\\\\\\n              <Button\\\\\\\\n                onClick={() => {\\\\\\\\n                  setMenuIsOpen(!menuIsOpen)\\\\\\\\n                  action('Universal open/closed')(menuIsOpen)\\\\\\\\n                }}\\\\\\\\n                color={text('color', 'white')}\\\\\\\\n                bgColor={text('bgColor', 'black')}\\\\\\\\n                fullWidth={boolean('fullWidth', false)}\\\\\\\\n              >\\\\\\\\n                {selectedOption?.label}\\\\\\\\n              </Button>\\\\\\\\n            )\\\\\\\\n          }}\\\\\\\\n        </IconDropdown>\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const TextFieldDropdown = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='2em' bgColor='grey.50'>\\\\\\\\n        <IconDropdown\\\\\\\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', ListViewOption)}\\\\\\\\n          width={text('width', '120px')}\\\\\\\\n          menuIsOpen={boolean('menuIsOpen', false)}\\\\\\\\n          primary={boolean('primary', false)}\\\\\\\\n          intent={text('intent', 'page') as tIntent}\\\\\\\\n          onChange={action('Value Changed')}\\\\\\\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n          value='available'\\\\\\\\n          optionComponent={({ selectedOption }: any) => {\\\\\\\\n            return (\\\\\\\\n              <div>\\\\\\\\n                <div>{selectedOption?.color}</div>\\\\\\\\n                <div>{selectedOption?.label}</div>\\\\\\\\n              </div>\\\\\\\\n            )\\\\\\\\n          }}\\\\\\\\n          // customStyle={customStyle}\\\\\\\\n        >\\\\\\\\n          {({\\\\\\\\n            selectedOption,\\\\\\\\n            menuIsOpen,\\\\\\\\n            setMenuIsOpen\\\\\\\\n          }: IUniversalDropdownChildren) => {\\\\\\\\n            return (\\\\\\\\n              <TextInput\\\\\\\\n                id='someId'\\\\\\\\n                name='someName'\\\\\\\\n                className='someClassName'\\\\\\\\n                label={text('label', 'Username')}\\\\\\\\n                labelColor={text('labelColor', 'text.inputLabel.default')}\\\\\\\\n                placeholder={text('placeholder', 'Enter text here...')}\\\\\\\\n                maxLength={number('maxLength', 10)}\\\\\\\\n                error={boolean('error', false)}\\\\\\\\n                errorMessage={text('errorMessage', '')}\\\\\\\\n                required={boolean('required', false)}\\\\\\\\n                fullWidth={boolean('fullWidth', false)}\\\\\\\\n                onChange={action('Triggered: onChange')}\\\\\\\\n                onClick={() => {\\\\\\\\n                  setMenuIsOpen(!menuIsOpen)\\\\\\\\n                  action('universal open/closed')(menuIsOpen)\\\\\\\\n                }}\\\\\\\\n                value={selectedOption?.value}\\\\\\\\n              />\\\\\\\\n            )\\\\\\\\n          }}\\\\\\\\n        </IconDropdown>\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\";\\\\n// @ts-ignore\\\\nvar __ADDS_MAP__ = {};\\\\n// @ts-ignore\\\\nvar __MAIN_FILE_LOCATION__ = \\\\\\\"/IconDropdown.stories.tsx\\\\\\\";\\\\n// @ts-ignore\\\\nvar __MODULE_DEPENDENCIES__ = [];\\\\n// @ts-ignore\\\\nvar __LOCAL_DEPENDENCIES__ = {};\\\\n// @ts-ignore\\\\nvar __IDS_TO_FRAMEWORKS__ = {};\\\\n        \\\\nimport { action } from '@storybook/addon-actions'\\\\nimport {\\\\n  array,\\\\n  boolean,\\\\n  number,\\\\n  object,\\\\n  text,\\\\n  withKnobs\\\\n} from '@storybook/addon-knobs'\\\\nimport React from 'react'\\\\nimport IconDropdown from '.'\\\\nimport { path } from '..'\\\\nimport { Box } from '../../..'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport Button, { tIntent } from '../../atoms/Button'\\\\nimport CardComponent from '../../atoms/Card'\\\\nimport { tPlacement } from '../../../utilities/types'\\\\nimport {\\\\n  IUniversalDropdownChildren,\\\\n  tSelectVariant\\\\n} from '../DropDown/interface'\\\\nimport TextInput from '../TextInput'\\\\n\\\\nexport default {parameters: {\\\\\\\"storySource\\\\\\\":{\\\\\\\"source\\\\\\\":\\\\\\\"import { action } from '@storybook/addon-actions'\\\\\\\\nimport {\\\\\\\\n  array,\\\\\\\\n  boolean,\\\\\\\\n  number,\\\\\\\\n  object,\\\\\\\\n  text,\\\\\\\\n  withKnobs\\\\\\\\n} from '@storybook/addon-knobs'\\\\\\\\nimport React from 'react'\\\\\\\\nimport IconDropdown from '.'\\\\\\\\nimport { path } from '..'\\\\\\\\nimport { Box } from '../../..'\\\\\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\\\\\nimport Button, { tIntent } from '../../atoms/Button'\\\\\\\\nimport CardComponent from '../../atoms/Card'\\\\\\\\nimport { tPlacement } from '../../../utilities/types'\\\\\\\\nimport {\\\\\\\\n  IUniversalDropdownChildren,\\\\\\\\n  tSelectVariant\\\\\\\\n} from '../DropDown/interface'\\\\\\\\nimport TextInput from '../TextInput'\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/IconDropdown`,\\\\\\\\n  decorators: [withKnobs],\\\\\\\\n  component: IconDropdown\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst ListViewOption = [\\\\\\\\n  {\\\\\\\\n    value: 'available',\\\\\\\\n    label: 'Mark As Available',\\\\\\\\n    color: 'blue',\\\\\\\\n    tooltipText: 'Mark As Available',\\\\\\\\n    isDisabled: true\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    value: 'unavailable',\\\\\\\\n    label: 'Mark As Unavailable',\\\\\\\\n    color: 'red',\\\\\\\\n    tooltipText: 'Mark As Unavailable'\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    value: 'active',\\\\\\\\n    label: 'Mark As Active',\\\\\\\\n    color: 'purple',\\\\\\\\n    tooltipText: 'Mark As Active'\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    value: 'inactive',\\\\\\\\n    label: 'Mark As Inactive',\\\\\\\\n    color: 'green',\\\\\\\\n    tooltipText: 'Mark As Inactive'\\\\\\\\n  }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst MultiLevelListViewOption = [\\\\\\\\n  {\\\\\\\\n    id: 'available',\\\\\\\\n    value: 'available',\\\\\\\\n    label: 'Mark As Available',\\\\\\\\n    color: 'blue',\\\\\\\\n    tooltipText: 'Mark As Available',\\\\\\\\n    options: [\\\\\\\\n      {\\\\\\\\n        id: 'available',\\\\\\\\n        value: 'available',\\\\\\\\n        label: 'Mark As Child Available',\\\\\\\\n        color: 'blue',\\\\\\\\n        tooltipText: 'Mark As Child Available'\\\\\\\\n      },\\\\\\\\n      {\\\\\\\\n        id: 'unavailable',\\\\\\\\n        value: 'unavailable',\\\\\\\\n        label: 'Mark As Child Unavailable',\\\\\\\\n        color: 'red',\\\\\\\\n        tooltipText: 'Mark As Child Unavailable'\\\\\\\\n      },\\\\\\\\n      {\\\\\\\\n        id: 'active',\\\\\\\\n        value: 'active',\\\\\\\\n        label: 'Mark As Child Active',\\\\\\\\n        color: 'purple',\\\\\\\\n        tooltipText: 'Mark As Child Active'\\\\\\\\n      },\\\\\\\\n      {\\\\\\\\n        id: 'inactive',\\\\\\\\n        value: 'inactive',\\\\\\\\n        label: 'Mark As Child Inactive',\\\\\\\\n        color: 'green',\\\\\\\\n        tooltipText: 'Mark As Child Inactive',\\\\\\\\n        options: [\\\\\\\\n          {\\\\\\\\n            id: 'available',\\\\\\\\n            value: 'available',\\\\\\\\n            label: 'Mark As Grand Child Available',\\\\\\\\n            color: 'blue',\\\\\\\\n            tooltipText: 'Mark As Grand Child Available'\\\\\\\\n          },\\\\\\\\n          {\\\\\\\\n            id: 'unavailable',\\\\\\\\n            value: 'unavailable',\\\\\\\\n            label: 'Mark As Grand Child Unavailable',\\\\\\\\n            color: 'red',\\\\\\\\n            tooltipText: 'Mark As Grand Child Unavailable'\\\\\\\\n          }\\\\\\\\n        ]\\\\\\\\n      }\\\\\\\\n    ]\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    id: 'unavailable',\\\\\\\\n    value: 'unavailable',\\\\\\\\n    label: 'Mark As Unavailable',\\\\\\\\n    color: 'red',\\\\\\\\n    tooltipText: 'Mark As Unavailable'\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    id: 'active',\\\\\\\\n    value: 'active',\\\\\\\\n    label: 'Mark As Active',\\\\\\\\n    color: 'purple',\\\\\\\\n    tooltipText: 'Mark As Active'\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    id: 'inactive',\\\\\\\\n    value: 'inactive',\\\\\\\\n    label: 'Mark As Inactive',\\\\\\\\n    color: 'green',\\\\\\\\n    tooltipText: 'Mark As Inactive'\\\\\\\\n  }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst paginationOptions = [\\\\\\\\n  { value: '25', label: '25 per page', title: '25 per page' },\\\\\\\\n  { value: '50', label: '50 per page', title: '50 per page' },\\\\\\\\n  { value: '100', label: '100 per page', title: '100 per page' },\\\\\\\\n  { value: '200', label: '200 per page', title: '200 per page' }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst columnOption = [\\\\\\\\n  { value: 'ascending', label: 'Sort Ascending', iconVariant: 'hide-menu-box' },\\\\\\\\n  {\\\\\\\\n    value: 'descending',\\\\\\\\n    label: 'Sort Descending',\\\\\\\\n    iconVariant: 'hub-location'\\\\\\\\n  },\\\\\\\\n  { value: 'hideColumn', label: 'Hide Column', iconVariant: 'close' },\\\\\\\\n  { value: 'pinLeft', label: 'Pin Left', iconVariant: 'angle-left' },\\\\\\\\n  { value: 'pinright', label: 'Pin Right', iconVariant: 'angle-right-thin' }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst options = [\\\\\\\\n  {\\\\\\\\n    value: 'emailVerificationPending',\\\\\\\\n    label: 'Email Verification Pending Shipper'\\\\\\\\n  },\\\\\\\\n  { value: 'allShippers', label: 'All Shippers' },\\\\\\\\n  { value: 'approvalPendingShippers', label: 'Approval Pending Shippers' }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst datePickerOptions = [\\\\\\\\n  { value: 'January', label: 'January' },\\\\\\\\n  { value: 'February', label: 'February' },\\\\\\\\n  { value: 'March', label: 'March' },\\\\\\\\n  { value: 'April', label: 'April' },\\\\\\\\n  { value: 'May', label: 'May' },\\\\\\\\n  { value: 'June', label: 'June' },\\\\\\\\n  { value: 'July', label: 'July' },\\\\\\\\n  { value: 'August', label: 'August' },\\\\\\\\n  { value: 'September', label: 'September' },\\\\\\\\n  { value: 'October', label: 'October' },\\\\\\\\n  { value: 'November', label: 'November' },\\\\\\\\n  { value: 'December', label: 'December' }\\\\\\\\n]\\\\\\\\n\\\\\\\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\\\\\\\nexport const ButtonDropdown = () => (\\\\\\\\n  <ThemeWrapper>\\\\\\\\n    <Box p='2em' bgColor='grey.50'>\\\\\\\\n      <IconDropdown\\\\\\\\n        variant={text('varaint', 'button-dropdown') as tSelectVariant}\\\\\\\\n        optionList={object('optionList', ListViewOption)}\\\\\\\\n        width={text('width', '120px')}\\\\\\\\n        menuIsOpen={boolean('menuIsOpen', false)}\\\\\\\\n        iconButtonDetails={array('iconList', [\\\\\\\\n          'hide-menu-box',\\\\\\\\n          'More',\\\\\\\\n          'angle-down'\\\\\\\\n        ])}\\\\\\\\n        primary={boolean('primary', false)}\\\\\\\\n        intent={text('intent', 'page') as tIntent}\\\\\\\\n        onChange={action('Value Changed')}\\\\\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n        disabled={boolean('disabled', false)}\\\\\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\\\\\n        tooltipProps={{\\\\\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </Box>\\\\\\\\n  </ThemeWrapper>\\\\\\\\n)\\\\\\\\n\\\\\\\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\\\\\\\nexport const TextDropdown = () => (\\\\\\\\n  <ThemeWrapper>\\\\\\\\n    <Box p='2em' bgColor='grey.50'>\\\\\\\\n      <IconDropdown\\\\\\\\n        variant={text('varaint', 'text-dropdown') as tSelectVariant}\\\\\\\\n        optionList={object('optionList', ListViewOption)}\\\\\\\\n        width={text('width', '120px')}\\\\\\\\n        menuIsOpen={boolean('menuIsOpen', false)}\\\\\\\\n        iconButtonDetails={array('iconList', [\\\\\\\\n          'hide-menu-box',\\\\\\\\n          'More',\\\\\\\\n          'angle-down'\\\\\\\\n        ])}\\\\\\\\n        primary={boolean('primary', false)}\\\\\\\\n        intent={text('intent', 'page') as tIntent}\\\\\\\\n        onChange={action('Value Changed')}\\\\\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n        disabled={boolean('disabled', false)}\\\\\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\\\\\n        tooltipProps={{\\\\\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </Box>\\\\\\\\n  </ThemeWrapper>\\\\\\\\n)\\\\\\\\n\\\\\\\\nexport const MultiLevelBreadCrumb = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='2em' bgColor='grey.50'>\\\\\\\\n        <IconDropdown\\\\\\\\n          variant={text('variant', 'multilevel-breadcrumb') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', MultiLevelListViewOption)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          value={text('value', 'strawberry')}\\\\\\\\n          width={text('width', '260px')}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n  }\\\\\\\\n\\\\\\\\nexport const MultiLevelButtonDropdown = () => (\\\\\\\\n  <ThemeWrapper>\\\\\\\\n    <Box p='2em' bgColor='grey.50'>\\\\\\\\n      <IconDropdown\\\\\\\\n        variant={\\\\\\\\n          text('varaint', 'multilevel-button-dropdown') as tSelectVariant\\\\\\\\n        }\\\\\\\\n        optionList={object('optionList', MultiLevelListViewOption)}\\\\\\\\n        width={text('width', '120px')}\\\\\\\\n        menuIsOpen\\\\\\\\n        iconButtonDetails={array('iconList', [\\\\\\\\n          'hide-menu-box',\\\\\\\\n          'More',\\\\\\\\n          'angle-down'\\\\\\\\n        ])}\\\\\\\\n        defaultOpen='right'\\\\\\\\n        primary={boolean('primary', false)}\\\\\\\\n        intent={text('intent', 'page') as tIntent}\\\\\\\\n        handleClick={(id: any) => console.log('clicked from storybook', id)}\\\\\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n        disabled={boolean('disabled', false)}\\\\\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\\\\\n        tooltipProps={{\\\\\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </Box>\\\\\\\\n  </ThemeWrapper>\\\\\\\\n)\\\\\\\\n\\\\\\\\nexport const PaginationDropdown = () => (\\\\\\\\n  <ThemeWrapper>\\\\\\\\n    <CardComponent style={{ height: '300px' }}>\\\\\\\\n      <IconDropdown\\\\\\\\n        variant={text('variant', 'pagination-size') as tSelectVariant}\\\\\\\\n        optionList={object('optionList', paginationOptions)}\\\\\\\\n        onChange={action('Value selected')}\\\\\\\\n        value={text('value', '50')}\\\\\\\\n        width={text('width', '120px')}\\\\\\\\n      />\\\\\\\\n    </CardComponent>\\\\\\\\n  </ThemeWrapper>\\\\\\\\n)\\\\\\\\n\\\\\\\\nexport const columnOptionComponent = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='2em' bgColor='grey.50'>\\\\\\\\n        <div style={{ width: '200px', margin: 'auto' }}>\\\\\\\\n          <IconDropdown\\\\\\\\n            variant={text('variant', 'column-filter') as tSelectVariant}\\\\\\\\n            optionList={object('optionList', columnOption)}\\\\\\\\n            onChange={action('Value selected')}\\\\\\\\n            width={text('width', '10px')}\\\\\\\\n            isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n          />\\\\\\\\n        </div>\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const BreadCrumbComponent = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='2em' bgColor='grey.50'>\\\\\\\\n        <IconDropdown\\\\\\\\n          variant={text('variant', 'bread-crumb') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', options)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          value={text('value', 'strawberry')}\\\\\\\\n          width={text('width', '260px')}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const DatePickerDropDown = () => (\\\\\\\\n  <ThemeWrapper>\\\\\\\\n    <CardComponent style={{ height: '200px' }}>\\\\\\\\n      <IconDropdown\\\\\\\\n        variant={text('variant', 'date-picker') as tSelectVariant}\\\\\\\\n        optionList={object('optionList', datePickerOptions)}\\\\\\\\n        onChange={action('Value selected')}\\\\\\\\n        value={text('value', '50')}\\\\\\\\n        width={text('width', '80px')}\\\\\\\\n        showDownArrow={boolean('Show Down Arrow', true)}\\\\\\\\n        isMultiRegionStyled={boolean('Is Multi Region Styled', false)}\\\\\\\\n      />\\\\\\\\n    </CardComponent>\\\\\\\\n  </ThemeWrapper>\\\\\\\\n)\\\\\\\\nconst arrayMap = [\\\\\\\\n  { variant: 'column-filter', name: 'column-filter0' },\\\\\\\\n  { variant: 'column-filter', name: 'column-filter1' },\\\\\\\\n  { variant: 'column-filter', name: 'column-filter2' }\\\\\\\\n]\\\\\\\\n\\\\\\\\nexport const columnOptionList = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='2em' bgColor='grey.50'>\\\\\\\\n        <div style={{ width: '200px', margin: 'auto' }}>\\\\\\\\n          {arrayMap.map((obj: any, index: number) => {\\\\\\\\n            return (\\\\\\\\n              <IconDropdown\\\\\\\\n                variant={text('variant', obj?.variant) as tSelectVariant}\\\\\\\\n                optionList={object('optionList', columnOption)}\\\\\\\\n                onChange={action('Value selected')}\\\\\\\\n                width={text('width', '10px')}\\\\\\\\n                isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n                key={index}\\\\\\\\n              />\\\\\\\\n            )\\\\\\\\n          })}\\\\\\\\n        </div>\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const DropdownUniversal = () => {\\\\\\\\n  // reference to style\\\\\\\\n  // const theme = useContext(ThemeContext)\\\\\\\\n  // const borderBottom = `1px solid ${theme?.colors?.grey['A800']}`\\\\\\\\n  // const customStyle = {\\\\\\\\n  //   control: (provided: any) => ({\\\\\\\\n  //     ...provided,\\\\\\\\n  //     borderStyle: 'none',\\\\\\\\n  //     borderBottom,\\\\\\\\n  //     borderRadius: '0px',\\\\\\\\n  //     boxShadow: 'none',\\\\\\\\n  //     borderColor: theme?.colors?.grey?.A800,\\\\\\\\n  //     '&:focus': {\\\\\\\\n  //       borderStyle: 'none',\\\\\\\\n  //       borderBottom,\\\\\\\\n  //       boxShadow: 'none',\\\\\\\\n  //       borderColor: theme?.colors?.grey?.A800\\\\\\\\n  //     },\\\\\\\\n  //     '&:hover': {\\\\\\\\n  //       borderStyle: 'none',\\\\\\\\n  //       borderBottom,\\\\\\\\n  //       boxShadow: 'none',\\\\\\\\n  //       borderColor: theme?.colors?.grey?.A800\\\\\\\\n  //     }\\\\\\\\n  //   }),\\\\\\\\n  //   option: (provided: any, state: any) => ({\\\\\\\\n  //     ...provided,\\\\\\\\n  //     backgroundColor: state?.isSelected\\\\\\\\n  //       ? theme?.colors?.primary?.main\\\\\\\\n  //       : theme?.colors?.white,\\\\\\\\n  //     '&:hover': {\\\\\\\\n  //       backgroundColor: state?.isSelected\\\\\\\\n  //         ? theme?.colors?.primary?.main\\\\\\\\n  //         : theme?.colors?.grey['50']\\\\\\\\n  //     }\\\\\\\\n  //   }),\\\\\\\\n\\\\\\\\n  //   menu: (provided: any, state: any) => ({\\\\\\\\n  //     ...provided,\\\\\\\\n  //     backgroundColor: state?.isSelected\\\\\\\\n  //       ? theme.colors.primary.main\\\\\\\\n  //       : theme?.colors?.white,\\\\\\\\n  //     borderRadius: '2px',\\\\\\\\n  //     '&:hover': {\\\\\\\\n  //       backgroundColor: state?.isSelected\\\\\\\\n  //         ? theme?.colors?.primary?.main\\\\\\\\n  //         : theme?.colors?.white\\\\\\\\n  //     },\\\\\\\\n  //     marginTop: '5px',\\\\\\\\n  //     marginLeft: '16px',\\\\\\\\n  //     width: '90%'\\\\\\\\n  //   }),\\\\\\\\n  //   menuList: (provided: any) => ({\\\\\\\\n  //     ...provided,\\\\\\\\n  //     marginTop: '0px'\\\\\\\\n  //   }),\\\\\\\\n  //   valueContainer: (provided: any) => ({\\\\\\\\n  //     ...provided,\\\\\\\\n  //     padding: '0px'\\\\\\\\n  //   })\\\\\\\\n  // }\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='2em' bgColor='grey.50'>\\\\\\\\n        <IconDropdown\\\\\\\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', ListViewOption)}\\\\\\\\n          width={text('width', '120px')}\\\\\\\\n          menuIsOpen={boolean('menuIsOpen', false)}\\\\\\\\n          primary={boolean('primary', false)}\\\\\\\\n          intent={text('intent', 'page') as tIntent}\\\\\\\\n          onChange={action('Value Changed')}\\\\\\\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n          value='available'\\\\\\\\n          optionComponent={({ selectedOption }: any) => {\\\\\\\\n            return (\\\\\\\\n              <div>\\\\\\\\n                <div>{selectedOption?.color}</div>\\\\\\\\n                <div>{selectedOption?.label}</div>\\\\\\\\n              </div>\\\\\\\\n            )\\\\\\\\n          }}\\\\\\\\n          // customStyle={customStyle}\\\\\\\\n        >\\\\\\\\n          {({\\\\\\\\n            selectedOption,\\\\\\\\n            menuIsOpen,\\\\\\\\n            setMenuIsOpen\\\\\\\\n          }: IUniversalDropdownChildren) => {\\\\\\\\n            return (\\\\\\\\n              <Button\\\\\\\\n                onClick={() => {\\\\\\\\n                  setMenuIsOpen(!menuIsOpen)\\\\\\\\n                  action('Universal open/closed')(menuIsOpen)\\\\\\\\n                }}\\\\\\\\n                color={text('color', 'white')}\\\\\\\\n                bgColor={text('bgColor', 'black')}\\\\\\\\n                fullWidth={boolean('fullWidth', false)}\\\\\\\\n              >\\\\\\\\n                {selectedOption?.label}\\\\\\\\n              </Button>\\\\\\\\n            )\\\\\\\\n          }}\\\\\\\\n        </IconDropdown>\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const TextFieldDropdown = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='2em' bgColor='grey.50'>\\\\\\\\n        <IconDropdown\\\\\\\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', ListViewOption)}\\\\\\\\n          width={text('width', '120px')}\\\\\\\\n          menuIsOpen={boolean('menuIsOpen', false)}\\\\\\\\n          primary={boolean('primary', false)}\\\\\\\\n          intent={text('intent', 'page') as tIntent}\\\\\\\\n          onChange={action('Value Changed')}\\\\\\\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n          value='available'\\\\\\\\n          optionComponent={({ selectedOption }: any) => {\\\\\\\\n            return (\\\\\\\\n              <div>\\\\\\\\n                <div>{selectedOption?.color}</div>\\\\\\\\n                <div>{selectedOption?.label}</div>\\\\\\\\n              </div>\\\\\\\\n            )\\\\\\\\n          }}\\\\\\\\n          // customStyle={customStyle}\\\\\\\\n        >\\\\\\\\n          {({\\\\\\\\n            selectedOption,\\\\\\\\n            menuIsOpen,\\\\\\\\n            setMenuIsOpen\\\\\\\\n          }: IUniversalDropdownChildren) => {\\\\\\\\n            return (\\\\\\\\n              <TextInput\\\\\\\\n                id='someId'\\\\\\\\n                name='someName'\\\\\\\\n                className='someClassName'\\\\\\\\n                label={text('label', 'Username')}\\\\\\\\n                labelColor={text('labelColor', 'text.inputLabel.default')}\\\\\\\\n                placeholder={text('placeholder', 'Enter text here...')}\\\\\\\\n                maxLength={number('maxLength', 10)}\\\\\\\\n                error={boolean('error', false)}\\\\\\\\n                errorMessage={text('errorMessage', '')}\\\\\\\\n                required={boolean('required', false)}\\\\\\\\n                fullWidth={boolean('fullWidth', false)}\\\\\\\\n                onChange={action('Triggered: onChange')}\\\\\\\\n                onClick={() => {\\\\\\\\n                  setMenuIsOpen(!menuIsOpen)\\\\\\\\n                  action('universal open/closed')(menuIsOpen)\\\\\\\\n                }}\\\\\\\\n                value={selectedOption?.value}\\\\\\\\n              />\\\\\\\\n            )\\\\\\\\n          }}\\\\\\\\n        </IconDropdown>\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\",\\\\\\\"locationsMap\\\\\\\":{}},},\\\\n  title: `${path}/IconDropdown`,\\\\n  decorators: [withKnobs],\\\\n  component: IconDropdown\\\\n}\\\\n\\\\nconst ListViewOption = [\\\\n  {\\\\n    value: 'available',\\\\n    label: 'Mark As Available',\\\\n    color: 'blue',\\\\n    tooltipText: 'Mark As Available',\\\\n    isDisabled: true\\\\n  },\\\\n  {\\\\n    value: 'unavailable',\\\\n    label: 'Mark As Unavailable',\\\\n    color: 'red',\\\\n    tooltipText: 'Mark As Unavailable'\\\\n  },\\\\n  {\\\\n    value: 'active',\\\\n    label: 'Mark As Active',\\\\n    color: 'purple',\\\\n    tooltipText: 'Mark As Active'\\\\n  },\\\\n  {\\\\n    value: 'inactive',\\\\n    label: 'Mark As Inactive',\\\\n    color: 'green',\\\\n    tooltipText: 'Mark As Inactive'\\\\n  }\\\\n]\\\\n\\\\nconst MultiLevelListViewOption = [\\\\n  {\\\\n    id: 'available',\\\\n    value: 'available',\\\\n    label: 'Mark As Available',\\\\n    color: 'blue',\\\\n    tooltipText: 'Mark As Available',\\\\n    options: [\\\\n      {\\\\n        id: 'available',\\\\n        value: 'available',\\\\n        label: 'Mark As Child Available',\\\\n        color: 'blue',\\\\n        tooltipText: 'Mark As Child Available'\\\\n      },\\\\n      {\\\\n        id: 'unavailable',\\\\n        value: 'unavailable',\\\\n        label: 'Mark As Child Unavailable',\\\\n        color: 'red',\\\\n        tooltipText: 'Mark As Child Unavailable'\\\\n      },\\\\n      {\\\\n        id: 'active',\\\\n        value: 'active',\\\\n        label: 'Mark As Child Active',\\\\n        color: 'purple',\\\\n        tooltipText: 'Mark As Child Active'\\\\n      },\\\\n      {\\\\n        id: 'inactive',\\\\n        value: 'inactive',\\\\n        label: 'Mark As Child Inactive',\\\\n        color: 'green',\\\\n        tooltipText: 'Mark As Child Inactive',\\\\n        options: [\\\\n          {\\\\n            id: 'available',\\\\n            value: 'available',\\\\n            label: 'Mark As Grand Child Available',\\\\n            color: 'blue',\\\\n            tooltipText: 'Mark As Grand Child Available'\\\\n          },\\\\n          {\\\\n            id: 'unavailable',\\\\n            value: 'unavailable',\\\\n            label: 'Mark As Grand Child Unavailable',\\\\n            color: 'red',\\\\n            tooltipText: 'Mark As Grand Child Unavailable'\\\\n          }\\\\n        ]\\\\n      }\\\\n    ]\\\\n  },\\\\n  {\\\\n    id: 'unavailable',\\\\n    value: 'unavailable',\\\\n    label: 'Mark As Unavailable',\\\\n    color: 'red',\\\\n    tooltipText: 'Mark As Unavailable'\\\\n  },\\\\n  {\\\\n    id: 'active',\\\\n    value: 'active',\\\\n    label: 'Mark As Active',\\\\n    color: 'purple',\\\\n    tooltipText: 'Mark As Active'\\\\n  },\\\\n  {\\\\n    id: 'inactive',\\\\n    value: 'inactive',\\\\n    label: 'Mark As Inactive',\\\\n    color: 'green',\\\\n    tooltipText: 'Mark As Inactive'\\\\n  }\\\\n]\\\\n\\\\nconst paginationOptions = [\\\\n  { value: '25', label: '25 per page', title: '25 per page' },\\\\n  { value: '50', label: '50 per page', title: '50 per page' },\\\\n  { value: '100', label: '100 per page', title: '100 per page' },\\\\n  { value: '200', label: '200 per page', title: '200 per page' }\\\\n]\\\\n\\\\nconst columnOption = [\\\\n  { value: 'ascending', label: 'Sort Ascending', iconVariant: 'hide-menu-box' },\\\\n  {\\\\n    value: 'descending',\\\\n    label: 'Sort Descending',\\\\n    iconVariant: 'hub-location'\\\\n  },\\\\n  { value: 'hideColumn', label: 'Hide Column', iconVariant: 'close' },\\\\n  { value: 'pinLeft', label: 'Pin Left', iconVariant: 'angle-left' },\\\\n  { value: 'pinright', label: 'Pin Right', iconVariant: 'angle-right-thin' }\\\\n]\\\\n\\\\nconst options = [\\\\n  {\\\\n    value: 'emailVerificationPending',\\\\n    label: 'Email Verification Pending Shipper'\\\\n  },\\\\n  { value: 'allShippers', label: 'All Shippers' },\\\\n  { value: 'approvalPendingShippers', label: 'Approval Pending Shippers' }\\\\n]\\\\n\\\\nconst datePickerOptions = [\\\\n  { value: 'January', label: 'January' },\\\\n  { value: 'February', label: 'February' },\\\\n  { value: 'March', label: 'March' },\\\\n  { value: 'April', label: 'April' },\\\\n  { value: 'May', label: 'May' },\\\\n  { value: 'June', label: 'June' },\\\\n  { value: 'July', label: 'July' },\\\\n  { value: 'August', label: 'August' },\\\\n  { value: 'September', label: 'September' },\\\\n  { value: 'October', label: 'October' },\\\\n  { value: 'November', label: 'November' },\\\\n  { value: 'December', label: 'December' }\\\\n]\\\\n\\\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\\\nexport const ButtonDropdown = addSourceDecorator(() => (\\\\n  <ThemeWrapper>\\\\n    <Box p='2em' bgColor='grey.50'>\\\\n      <IconDropdown\\\\n        variant={text('varaint', 'button-dropdown') as tSelectVariant}\\\\n        optionList={object('optionList', ListViewOption)}\\\\n        width={text('width', '120px')}\\\\n        menuIsOpen={boolean('menuIsOpen', false)}\\\\n        iconButtonDetails={array('iconList', [\\\\n          'hide-menu-box',\\\\n          'More',\\\\n          'angle-down'\\\\n        ])}\\\\n        primary={boolean('primary', false)}\\\\n        intent={text('intent', 'page') as tIntent}\\\\n        onChange={action('Value Changed')}\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n        disabled={boolean('disabled', false)}\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\n        tooltipProps={{\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\n        }}\\\\n      />\\\\n    </Box>\\\\n  </ThemeWrapper>\\\\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\\\nexport const TextDropdown = addSourceDecorator(() => (\\\\n  <ThemeWrapper>\\\\n    <Box p='2em' bgColor='grey.50'>\\\\n      <IconDropdown\\\\n        variant={text('varaint', 'text-dropdown') as tSelectVariant}\\\\n        optionList={object('optionList', ListViewOption)}\\\\n        width={text('width', '120px')}\\\\n        menuIsOpen={boolean('menuIsOpen', false)}\\\\n        iconButtonDetails={array('iconList', [\\\\n          'hide-menu-box',\\\\n          'More',\\\\n          'angle-down'\\\\n        ])}\\\\n        primary={boolean('primary', false)}\\\\n        intent={text('intent', 'page') as tIntent}\\\\n        onChange={action('Value Changed')}\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n        disabled={boolean('disabled', false)}\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\n        tooltipProps={{\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\n        }}\\\\n      />\\\\n    </Box>\\\\n  </ThemeWrapper>\\\\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const MultiLevelBreadCrumb = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <IconDropdown\\\\n          variant={text('variant', 'multilevel-breadcrumb') as tSelectVariant}\\\\n          optionList={object('optionList', MultiLevelListViewOption)}\\\\n          onChange={action('Value selected')}\\\\n          value={text('value', 'strawberry')}\\\\n          width={text('width', '260px')}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n  }, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const MultiLevelButtonDropdown = addSourceDecorator(() => (\\\\n  <ThemeWrapper>\\\\n    <Box p='2em' bgColor='grey.50'>\\\\n      <IconDropdown\\\\n        variant={\\\\n          text('varaint', 'multilevel-button-dropdown') as tSelectVariant\\\\n        }\\\\n        optionList={object('optionList', MultiLevelListViewOption)}\\\\n        width={text('width', '120px')}\\\\n        menuIsOpen\\\\n        iconButtonDetails={array('iconList', [\\\\n          'hide-menu-box',\\\\n          'More',\\\\n          'angle-down'\\\\n        ])}\\\\n        defaultOpen='right'\\\\n        primary={boolean('primary', false)}\\\\n        intent={text('intent', 'page') as tIntent}\\\\n        handleClick={(id: any) => console.log('clicked from storybook', id)}\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n        disabled={boolean('disabled', false)}\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\n        tooltipProps={{\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\n        }}\\\\n      />\\\\n    </Box>\\\\n  </ThemeWrapper>\\\\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const PaginationDropdown = addSourceDecorator(() => (\\\\n  <ThemeWrapper>\\\\n    <CardComponent style={{ height: '300px' }}>\\\\n      <IconDropdown\\\\n        variant={text('variant', 'pagination-size') as tSelectVariant}\\\\n        optionList={object('optionList', paginationOptions)}\\\\n        onChange={action('Value selected')}\\\\n        value={text('value', '50')}\\\\n        width={text('width', '120px')}\\\\n      />\\\\n    </CardComponent>\\\\n  </ThemeWrapper>\\\\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const columnOptionComponent = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <div style={{ width: '200px', margin: 'auto' }}>\\\\n          <IconDropdown\\\\n            variant={text('variant', 'column-filter') as tSelectVariant}\\\\n            optionList={object('optionList', columnOption)}\\\\n            onChange={action('Value selected')}\\\\n            width={text('width', '10px')}\\\\n            isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n          />\\\\n        </div>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const BreadCrumbComponent = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <IconDropdown\\\\n          variant={text('variant', 'bread-crumb') as tSelectVariant}\\\\n          optionList={object('optionList', options)}\\\\n          onChange={action('Value selected')}\\\\n          value={text('value', 'strawberry')}\\\\n          width={text('width', '260px')}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const DatePickerDropDown = addSourceDecorator(() => (\\\\n  <ThemeWrapper>\\\\n    <CardComponent style={{ height: '200px' }}>\\\\n      <IconDropdown\\\\n        variant={text('variant', 'date-picker') as tSelectVariant}\\\\n        optionList={object('optionList', datePickerOptions)}\\\\n        onChange={action('Value selected')}\\\\n        value={text('value', '50')}\\\\n        width={text('width', '80px')}\\\\n        showDownArrow={boolean('Show Down Arrow', true)}\\\\n        isMultiRegionStyled={boolean('Is Multi Region Styled', false)}\\\\n      />\\\\n    </CardComponent>\\\\n  </ThemeWrapper>\\\\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\nconst arrayMap = [\\\\n  { variant: 'column-filter', name: 'column-filter0' },\\\\n  { variant: 'column-filter', name: 'column-filter1' },\\\\n  { variant: 'column-filter', name: 'column-filter2' }\\\\n]\\\\n\\\\nexport const columnOptionList = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <div style={{ width: '200px', margin: 'auto' }}>\\\\n          {arrayMap.map((obj: any, index: number) => {\\\\n            return (\\\\n              <IconDropdown\\\\n                variant={text('variant', obj?.variant) as tSelectVariant}\\\\n                optionList={object('optionList', columnOption)}\\\\n                onChange={action('Value selected')}\\\\n                width={text('width', '10px')}\\\\n                isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n                key={index}\\\\n              />\\\\n            )\\\\n          })}\\\\n        </div>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const DropdownUniversal = addSourceDecorator(() => {\\\\n  // reference to style\\\\n  // const theme = useContext(ThemeContext)\\\\n  // const borderBottom = `1px solid ${theme?.colors?.grey['A800']}`\\\\n  // const customStyle = {\\\\n  //   control: (provided: any) => ({\\\\n  //     ...provided,\\\\n  //     borderStyle: 'none',\\\\n  //     borderBottom,\\\\n  //     borderRadius: '0px',\\\\n  //     boxShadow: 'none',\\\\n  //     borderColor: theme?.colors?.grey?.A800,\\\\n  //     '&:focus': {\\\\n  //       borderStyle: 'none',\\\\n  //       borderBottom,\\\\n  //       boxShadow: 'none',\\\\n  //       borderColor: theme?.colors?.grey?.A800\\\\n  //     },\\\\n  //     '&:hover': {\\\\n  //       borderStyle: 'none',\\\\n  //       borderBottom,\\\\n  //       boxShadow: 'none',\\\\n  //       borderColor: theme?.colors?.grey?.A800\\\\n  //     }\\\\n  //   }),\\\\n  //   option: (provided: any, state: any) => ({\\\\n  //     ...provided,\\\\n  //     backgroundColor: state?.isSelected\\\\n  //       ? theme?.colors?.primary?.main\\\\n  //       : theme?.colors?.white,\\\\n  //     '&:hover': {\\\\n  //       backgroundColor: state?.isSelected\\\\n  //         ? theme?.colors?.primary?.main\\\\n  //         : theme?.colors?.grey['50']\\\\n  //     }\\\\n  //   }),\\\\n\\\\n  //   menu: (provided: any, state: any) => ({\\\\n  //     ...provided,\\\\n  //     backgroundColor: state?.isSelected\\\\n  //       ? theme.colors.primary.main\\\\n  //       : theme?.colors?.white,\\\\n  //     borderRadius: '2px',\\\\n  //     '&:hover': {\\\\n  //       backgroundColor: state?.isSelected\\\\n  //         ? theme?.colors?.primary?.main\\\\n  //         : theme?.colors?.white\\\\n  //     },\\\\n  //     marginTop: '5px',\\\\n  //     marginLeft: '16px',\\\\n  //     width: '90%'\\\\n  //   }),\\\\n  //   menuList: (provided: any) => ({\\\\n  //     ...provided,\\\\n  //     marginTop: '0px'\\\\n  //   }),\\\\n  //   valueContainer: (provided: any) => ({\\\\n  //     ...provided,\\\\n  //     padding: '0px'\\\\n  //   })\\\\n  // }\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <IconDropdown\\\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          width={text('width', '120px')}\\\\n          menuIsOpen={boolean('menuIsOpen', false)}\\\\n          primary={boolean('primary', false)}\\\\n          intent={text('intent', 'page') as tIntent}\\\\n          onChange={action('Value Changed')}\\\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n          disabled={boolean('disabled', false)}\\\\n          value='available'\\\\n          optionComponent={({ selectedOption }: any) => {\\\\n            return (\\\\n              <div>\\\\n                <div>{selectedOption?.color}</div>\\\\n                <div>{selectedOption?.label}</div>\\\\n              </div>\\\\n            )\\\\n          }}\\\\n          // customStyle={customStyle}\\\\n        >\\\\n          {({\\\\n            selectedOption,\\\\n            menuIsOpen,\\\\n            setMenuIsOpen\\\\n          }: IUniversalDropdownChildren) => {\\\\n            return (\\\\n              <Button\\\\n                onClick={() => {\\\\n                  setMenuIsOpen(!menuIsOpen)\\\\n                  action('Universal open/closed')(menuIsOpen)\\\\n                }}\\\\n                color={text('color', 'white')}\\\\n                bgColor={text('bgColor', 'black')}\\\\n                fullWidth={boolean('fullWidth', false)}\\\\n              >\\\\n                {selectedOption?.label}\\\\n              </Button>\\\\n            )\\\\n          }}\\\\n        </IconDropdown>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const TextFieldDropdown = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <IconDropdown\\\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          width={text('width', '120px')}\\\\n          menuIsOpen={boolean('menuIsOpen', false)}\\\\n          primary={boolean('primary', false)}\\\\n          intent={text('intent', 'page') as tIntent}\\\\n          onChange={action('Value Changed')}\\\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n          disabled={boolean('disabled', false)}\\\\n          value='available'\\\\n          optionComponent={({ selectedOption }: any) => {\\\\n            return (\\\\n              <div>\\\\n                <div>{selectedOption?.color}</div>\\\\n                <div>{selectedOption?.label}</div>\\\\n              </div>\\\\n            )\\\\n          }}\\\\n          // customStyle={customStyle}\\\\n        >\\\\n          {({\\\\n            selectedOption,\\\\n            menuIsOpen,\\\\n            setMenuIsOpen\\\\n          }: IUniversalDropdownChildren) => {\\\\n            return (\\\\n              <TextInput\\\\n                id='someId'\\\\n                name='someName'\\\\n                className='someClassName'\\\\n                label={text('label', 'Username')}\\\\n                labelColor={text('labelColor', 'text.inputLabel.default')}\\\\n                placeholder={text('placeholder', 'Enter text here...')}\\\\n                maxLength={number('maxLength', 10)}\\\\n                error={boolean('error', false)}\\\\n                errorMessage={text('errorMessage', '')}\\\\n                required={boolean('required', false)}\\\\n                fullWidth={boolean('fullWidth', false)}\\\\n                onChange={action('Triggered: onChange')}\\\\n                onClick={() => {\\\\n                  setMenuIsOpen(!menuIsOpen)\\\\n                  action('universal open/closed')(menuIsOpen)\\\\n                }}\\\\n                value={selectedOption?.value}\\\\n              />\\\\n            )\\\\n          }}\\\\n        </IconDropdown>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\",\\\"locationsMap\\\":{}},\\\"storySource\\\":{\\\"source\\\":\\\"import { action } from '@storybook/addon-actions'\\\\nimport {\\\\n  array,\\\\n  boolean,\\\\n  number,\\\\n  object,\\\\n  text,\\\\n  withKnobs\\\\n} from '@storybook/addon-knobs'\\\\nimport React from 'react'\\\\nimport IconDropdown from '.'\\\\nimport { path } from '..'\\\\nimport { Box } from '../../..'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport Button, { tIntent } from '../../atoms/Button'\\\\nimport CardComponent from '../../atoms/Card'\\\\nimport { tPlacement } from '../../../utilities/types'\\\\nimport {\\\\n  IUniversalDropdownChildren,\\\\n  tSelectVariant\\\\n} from '../DropDown/interface'\\\\nimport TextInput from '../TextInput'\\\\n\\\\nexport default {\\\\n  title: `${path}/IconDropdown`,\\\\n  decorators: [withKnobs],\\\\n  component: IconDropdown\\\\n}\\\\n\\\\nconst ListViewOption = [\\\\n  {\\\\n    value: 'available',\\\\n    label: 'Mark As Available',\\\\n    color: 'blue',\\\\n    tooltipText: 'Mark As Available',\\\\n    isDisabled: true\\\\n  },\\\\n  {\\\\n    value: 'unavailable',\\\\n    label: 'Mark As Unavailable',\\\\n    color: 'red',\\\\n    tooltipText: 'Mark As Unavailable'\\\\n  },\\\\n  {\\\\n    value: 'active',\\\\n    label: 'Mark As Active',\\\\n    color: 'purple',\\\\n    tooltipText: 'Mark As Active'\\\\n  },\\\\n  {\\\\n    value: 'inactive',\\\\n    label: 'Mark As Inactive',\\\\n    color: 'green',\\\\n    tooltipText: 'Mark As Inactive'\\\\n  }\\\\n]\\\\n\\\\nconst MultiLevelListViewOption = [\\\\n  {\\\\n    id: 'available',\\\\n    value: 'available',\\\\n    label: 'Mark As Available',\\\\n    color: 'blue',\\\\n    tooltipText: 'Mark As Available',\\\\n    options: [\\\\n      {\\\\n        id: 'available',\\\\n        value: 'available',\\\\n        label: 'Mark As Child Available',\\\\n        color: 'blue',\\\\n        tooltipText: 'Mark As Child Available'\\\\n      },\\\\n      {\\\\n        id: 'unavailable',\\\\n        value: 'unavailable',\\\\n        label: 'Mark As Child Unavailable',\\\\n        color: 'red',\\\\n        tooltipText: 'Mark As Child Unavailable'\\\\n      },\\\\n      {\\\\n        id: 'active',\\\\n        value: 'active',\\\\n        label: 'Mark As Child Active',\\\\n        color: 'purple',\\\\n        tooltipText: 'Mark As Child Active'\\\\n      },\\\\n      {\\\\n        id: 'inactive',\\\\n        value: 'inactive',\\\\n        label: 'Mark As Child Inactive',\\\\n        color: 'green',\\\\n        tooltipText: 'Mark As Child Inactive',\\\\n        options: [\\\\n          {\\\\n            id: 'available',\\\\n            value: 'available',\\\\n            label: 'Mark As Grand Child Available',\\\\n            color: 'blue',\\\\n            tooltipText: 'Mark As Grand Child Available'\\\\n          },\\\\n          {\\\\n            id: 'unavailable',\\\\n            value: 'unavailable',\\\\n            label: 'Mark As Grand Child Unavailable',\\\\n            color: 'red',\\\\n            tooltipText: 'Mark As Grand Child Unavailable'\\\\n          }\\\\n        ]\\\\n      }\\\\n    ]\\\\n  },\\\\n  {\\\\n    id: 'unavailable',\\\\n    value: 'unavailable',\\\\n    label: 'Mark As Unavailable',\\\\n    color: 'red',\\\\n    tooltipText: 'Mark As Unavailable'\\\\n  },\\\\n  {\\\\n    id: 'active',\\\\n    value: 'active',\\\\n    label: 'Mark As Active',\\\\n    color: 'purple',\\\\n    tooltipText: 'Mark As Active'\\\\n  },\\\\n  {\\\\n    id: 'inactive',\\\\n    value: 'inactive',\\\\n    label: 'Mark As Inactive',\\\\n    color: 'green',\\\\n    tooltipText: 'Mark As Inactive'\\\\n  }\\\\n]\\\\n\\\\nconst paginationOptions = [\\\\n  { value: '25', label: '25 per page', title: '25 per page' },\\\\n  { value: '50', label: '50 per page', title: '50 per page' },\\\\n  { value: '100', label: '100 per page', title: '100 per page' },\\\\n  { value: '200', label: '200 per page', title: '200 per page' }\\\\n]\\\\n\\\\nconst columnOption = [\\\\n  { value: 'ascending', label: 'Sort Ascending', iconVariant: 'hide-menu-box' },\\\\n  {\\\\n    value: 'descending',\\\\n    label: 'Sort Descending',\\\\n    iconVariant: 'hub-location'\\\\n  },\\\\n  { value: 'hideColumn', label: 'Hide Column', iconVariant: 'close' },\\\\n  { value: 'pinLeft', label: 'Pin Left', iconVariant: 'angle-left' },\\\\n  { value: 'pinright', label: 'Pin Right', iconVariant: 'angle-right-thin' }\\\\n]\\\\n\\\\nconst options = [\\\\n  {\\\\n    value: 'emailVerificationPending',\\\\n    label: 'Email Verification Pending Shipper'\\\\n  },\\\\n  { value: 'allShippers', label: 'All Shippers' },\\\\n  { value: 'approvalPendingShippers', label: 'Approval Pending Shippers' }\\\\n]\\\\n\\\\nconst datePickerOptions = [\\\\n  { value: 'January', label: 'January' },\\\\n  { value: 'February', label: 'February' },\\\\n  { value: 'March', label: 'March' },\\\\n  { value: 'April', label: 'April' },\\\\n  { value: 'May', label: 'May' },\\\\n  { value: 'June', label: 'June' },\\\\n  { value: 'July', label: 'July' },\\\\n  { value: 'August', label: 'August' },\\\\n  { value: 'September', label: 'September' },\\\\n  { value: 'October', label: 'October' },\\\\n  { value: 'November', label: 'November' },\\\\n  { value: 'December', label: 'December' }\\\\n]\\\\n\\\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\\\nexport const ButtonDropdown = () => (\\\\n  <ThemeWrapper>\\\\n    <Box p='2em' bgColor='grey.50'>\\\\n      <IconDropdown\\\\n        variant={text('varaint', 'button-dropdown') as tSelectVariant}\\\\n        optionList={object('optionList', ListViewOption)}\\\\n        width={text('width', '120px')}\\\\n        menuIsOpen={boolean('menuIsOpen', false)}\\\\n        iconButtonDetails={array('iconList', [\\\\n          'hide-menu-box',\\\\n          'More',\\\\n          'angle-down'\\\\n        ])}\\\\n        primary={boolean('primary', false)}\\\\n        intent={text('intent', 'page') as tIntent}\\\\n        onChange={action('Value Changed')}\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n        disabled={boolean('disabled', false)}\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\n        tooltipProps={{\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\n        }}\\\\n      />\\\\n    </Box>\\\\n  </ThemeWrapper>\\\\n)\\\\n\\\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\\\nexport const TextDropdown = () => (\\\\n  <ThemeWrapper>\\\\n    <Box p='2em' bgColor='grey.50'>\\\\n      <IconDropdown\\\\n        variant={text('varaint', 'text-dropdown') as tSelectVariant}\\\\n        optionList={object('optionList', ListViewOption)}\\\\n        width={text('width', '120px')}\\\\n        menuIsOpen={boolean('menuIsOpen', false)}\\\\n        iconButtonDetails={array('iconList', [\\\\n          'hide-menu-box',\\\\n          'More',\\\\n          'angle-down'\\\\n        ])}\\\\n        primary={boolean('primary', false)}\\\\n        intent={text('intent', 'page') as tIntent}\\\\n        onChange={action('Value Changed')}\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n        disabled={boolean('disabled', false)}\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\n        tooltipProps={{\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\n        }}\\\\n      />\\\\n    </Box>\\\\n  </ThemeWrapper>\\\\n)\\\\n\\\\nexport const MultiLevelBreadCrumb = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <IconDropdown\\\\n          variant={text('variant', 'multilevel-breadcrumb') as tSelectVariant}\\\\n          optionList={object('optionList', MultiLevelListViewOption)}\\\\n          onChange={action('Value selected')}\\\\n          value={text('value', 'strawberry')}\\\\n          width={text('width', '260px')}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n  }\\\\n\\\\nexport const MultiLevelButtonDropdown = () => (\\\\n  <ThemeWrapper>\\\\n    <Box p='2em' bgColor='grey.50'>\\\\n      <IconDropdown\\\\n        variant={\\\\n          text('varaint', 'multilevel-button-dropdown') as tSelectVariant\\\\n        }\\\\n        optionList={object('optionList', MultiLevelListViewOption)}\\\\n        width={text('width', '120px')}\\\\n        menuIsOpen\\\\n        iconButtonDetails={array('iconList', [\\\\n          'hide-menu-box',\\\\n          'More',\\\\n          'angle-down'\\\\n        ])}\\\\n        defaultOpen='right'\\\\n        primary={boolean('primary', false)}\\\\n        intent={text('intent', 'page') as tIntent}\\\\n        handleClick={(id: any) => console.log('clicked from storybook', id)}\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n        disabled={boolean('disabled', false)}\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\n        tooltipProps={{\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\n        }}\\\\n      />\\\\n    </Box>\\\\n  </ThemeWrapper>\\\\n)\\\\n\\\\nexport const PaginationDropdown = () => (\\\\n  <ThemeWrapper>\\\\n    <CardComponent style={{ height: '300px' }}>\\\\n      <IconDropdown\\\\n        variant={text('variant', 'pagination-size') as tSelectVariant}\\\\n        optionList={object('optionList', paginationOptions)}\\\\n        onChange={action('Value selected')}\\\\n        value={text('value', '50')}\\\\n        width={text('width', '120px')}\\\\n      />\\\\n    </CardComponent>\\\\n  </ThemeWrapper>\\\\n)\\\\n\\\\nexport const columnOptionComponent = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <div style={{ width: '200px', margin: 'auto' }}>\\\\n          <IconDropdown\\\\n            variant={text('variant', 'column-filter') as tSelectVariant}\\\\n            optionList={object('optionList', columnOption)}\\\\n            onChange={action('Value selected')}\\\\n            width={text('width', '10px')}\\\\n            isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n          />\\\\n        </div>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const BreadCrumbComponent = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <IconDropdown\\\\n          variant={text('variant', 'bread-crumb') as tSelectVariant}\\\\n          optionList={object('optionList', options)}\\\\n          onChange={action('Value selected')}\\\\n          value={text('value', 'strawberry')}\\\\n          width={text('width', '260px')}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const DatePickerDropDown = () => (\\\\n  <ThemeWrapper>\\\\n    <CardComponent style={{ height: '200px' }}>\\\\n      <IconDropdown\\\\n        variant={text('variant', 'date-picker') as tSelectVariant}\\\\n        optionList={object('optionList', datePickerOptions)}\\\\n        onChange={action('Value selected')}\\\\n        value={text('value', '50')}\\\\n        width={text('width', '80px')}\\\\n        showDownArrow={boolean('Show Down Arrow', true)}\\\\n        isMultiRegionStyled={boolean('Is Multi Region Styled', false)}\\\\n      />\\\\n    </CardComponent>\\\\n  </ThemeWrapper>\\\\n)\\\\nconst arrayMap = [\\\\n  { variant: 'column-filter', name: 'column-filter0' },\\\\n  { variant: 'column-filter', name: 'column-filter1' },\\\\n  { variant: 'column-filter', name: 'column-filter2' }\\\\n]\\\\n\\\\nexport const columnOptionList = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <div style={{ width: '200px', margin: 'auto' }}>\\\\n          {arrayMap.map((obj: any, index: number) => {\\\\n            return (\\\\n              <IconDropdown\\\\n                variant={text('variant', obj?.variant) as tSelectVariant}\\\\n                optionList={object('optionList', columnOption)}\\\\n                onChange={action('Value selected')}\\\\n                width={text('width', '10px')}\\\\n                isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n                key={index}\\\\n              />\\\\n            )\\\\n          })}\\\\n        </div>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const DropdownUniversal = () => {\\\\n  // reference to style\\\\n  // const theme = useContext(ThemeContext)\\\\n  // const borderBottom = `1px solid ${theme?.colors?.grey['A800']}`\\\\n  // const customStyle = {\\\\n  //   control: (provided: any) => ({\\\\n  //     ...provided,\\\\n  //     borderStyle: 'none',\\\\n  //     borderBottom,\\\\n  //     borderRadius: '0px',\\\\n  //     boxShadow: 'none',\\\\n  //     borderColor: theme?.colors?.grey?.A800,\\\\n  //     '&:focus': {\\\\n  //       borderStyle: 'none',\\\\n  //       borderBottom,\\\\n  //       boxShadow: 'none',\\\\n  //       borderColor: theme?.colors?.grey?.A800\\\\n  //     },\\\\n  //     '&:hover': {\\\\n  //       borderStyle: 'none',\\\\n  //       borderBottom,\\\\n  //       boxShadow: 'none',\\\\n  //       borderColor: theme?.colors?.grey?.A800\\\\n  //     }\\\\n  //   }),\\\\n  //   option: (provided: any, state: any) => ({\\\\n  //     ...provided,\\\\n  //     backgroundColor: state?.isSelected\\\\n  //       ? theme?.colors?.primary?.main\\\\n  //       : theme?.colors?.white,\\\\n  //     '&:hover': {\\\\n  //       backgroundColor: state?.isSelected\\\\n  //         ? theme?.colors?.primary?.main\\\\n  //         : theme?.colors?.grey['50']\\\\n  //     }\\\\n  //   }),\\\\n\\\\n  //   menu: (provided: any, state: any) => ({\\\\n  //     ...provided,\\\\n  //     backgroundColor: state?.isSelected\\\\n  //       ? theme.colors.primary.main\\\\n  //       : theme?.colors?.white,\\\\n  //     borderRadius: '2px',\\\\n  //     '&:hover': {\\\\n  //       backgroundColor: state?.isSelected\\\\n  //         ? theme?.colors?.primary?.main\\\\n  //         : theme?.colors?.white\\\\n  //     },\\\\n  //     marginTop: '5px',\\\\n  //     marginLeft: '16px',\\\\n  //     width: '90%'\\\\n  //   }),\\\\n  //   menuList: (provided: any) => ({\\\\n  //     ...provided,\\\\n  //     marginTop: '0px'\\\\n  //   }),\\\\n  //   valueContainer: (provided: any) => ({\\\\n  //     ...provided,\\\\n  //     padding: '0px'\\\\n  //   })\\\\n  // }\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <IconDropdown\\\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          width={text('width', '120px')}\\\\n          menuIsOpen={boolean('menuIsOpen', false)}\\\\n          primary={boolean('primary', false)}\\\\n          intent={text('intent', 'page') as tIntent}\\\\n          onChange={action('Value Changed')}\\\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n          disabled={boolean('disabled', false)}\\\\n          value='available'\\\\n          optionComponent={({ selectedOption }: any) => {\\\\n            return (\\\\n              <div>\\\\n                <div>{selectedOption?.color}</div>\\\\n                <div>{selectedOption?.label}</div>\\\\n              </div>\\\\n            )\\\\n          }}\\\\n          // customStyle={customStyle}\\\\n        >\\\\n          {({\\\\n            selectedOption,\\\\n            menuIsOpen,\\\\n            setMenuIsOpen\\\\n          }: IUniversalDropdownChildren) => {\\\\n            return (\\\\n              <Button\\\\n                onClick={() => {\\\\n                  setMenuIsOpen(!menuIsOpen)\\\\n                  action('Universal open/closed')(menuIsOpen)\\\\n                }}\\\\n                color={text('color', 'white')}\\\\n                bgColor={text('bgColor', 'black')}\\\\n                fullWidth={boolean('fullWidth', false)}\\\\n              >\\\\n                {selectedOption?.label}\\\\n              </Button>\\\\n            )\\\\n          }}\\\\n        </IconDropdown>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const TextFieldDropdown = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <IconDropdown\\\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          width={text('width', '120px')}\\\\n          menuIsOpen={boolean('menuIsOpen', false)}\\\\n          primary={boolean('primary', false)}\\\\n          intent={text('intent', 'page') as tIntent}\\\\n          onChange={action('Value Changed')}\\\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n          disabled={boolean('disabled', false)}\\\\n          value='available'\\\\n          optionComponent={({ selectedOption }: any) => {\\\\n            return (\\\\n              <div>\\\\n                <div>{selectedOption?.color}</div>\\\\n                <div>{selectedOption?.label}</div>\\\\n              </div>\\\\n            )\\\\n          }}\\\\n          // customStyle={customStyle}\\\\n        >\\\\n          {({\\\\n            selectedOption,\\\\n            menuIsOpen,\\\\n            setMenuIsOpen\\\\n          }: IUniversalDropdownChildren) => {\\\\n            return (\\\\n              <TextInput\\\\n                id='someId'\\\\n                name='someName'\\\\n                className='someClassName'\\\\n                label={text('label', 'Username')}\\\\n                labelColor={text('labelColor', 'text.inputLabel.default')}\\\\n                placeholder={text('placeholder', 'Enter text here...')}\\\\n                maxLength={number('maxLength', 10)}\\\\n                error={boolean('error', false)}\\\\n                errorMessage={text('errorMessage', '')}\\\\n                required={boolean('required', false)}\\\\n                fullWidth={boolean('fullWidth', false)}\\\\n                onChange={action('Triggered: onChange')}\\\\n                onClick={() => {\\\\n                  setMenuIsOpen(!menuIsOpen)\\\\n                  action('universal open/closed')(menuIsOpen)\\\\n                }}\\\\n                value={selectedOption?.value}\\\\n              />\\\\n            )\\\\n          }}\\\\n        </IconDropdown>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\",\\\"locationsMap\\\":{}},},\\n  title: `${path}/IconDropdown`,\\n  decorators: [withKnobs],\\n  component: IconDropdown\\n}\\n\\nconst ListViewOption = [\\n  {\\n    value: 'available',\\n    label: 'Mark As Available',\\n    color: 'blue',\\n    tooltipText: 'Mark As Available',\\n    isDisabled: true\\n  },\\n  {\\n    value: 'unavailable',\\n    label: 'Mark As Unavailable',\\n    color: 'red',\\n    tooltipText: 'Mark As Unavailable'\\n  },\\n  {\\n    value: 'active',\\n    label: 'Mark As Active',\\n    color: 'purple',\\n    tooltipText: 'Mark As Active'\\n  },\\n  {\\n    value: 'inactive',\\n    label: 'Mark As Inactive',\\n    color: 'green',\\n    tooltipText: 'Mark As Inactive'\\n  }\\n]\\n\\nconst MultiLevelListViewOption = [\\n  {\\n    id: 'available',\\n    value: 'available',\\n    label: 'Mark As Available',\\n    color: 'blue',\\n    tooltipText: 'Mark As Available',\\n    options: [\\n      {\\n        id: 'available',\\n        value: 'available',\\n        label: 'Mark As Child Available',\\n        color: 'blue',\\n        tooltipText: 'Mark As Child Available'\\n      },\\n      {\\n        id: 'unavailable',\\n        value: 'unavailable',\\n        label: 'Mark As Child Unavailable',\\n        color: 'red',\\n        tooltipText: 'Mark As Child Unavailable'\\n      },\\n      {\\n        id: 'active',\\n        value: 'active',\\n        label: 'Mark As Child Active',\\n        color: 'purple',\\n        tooltipText: 'Mark As Child Active'\\n      },\\n      {\\n        id: 'inactive',\\n        value: 'inactive',\\n        label: 'Mark As Child Inactive',\\n        color: 'green',\\n        tooltipText: 'Mark As Child Inactive',\\n        options: [\\n          {\\n            id: 'available',\\n            value: 'available',\\n            label: 'Mark As Grand Child Available',\\n            color: 'blue',\\n            tooltipText: 'Mark As Grand Child Available'\\n          },\\n          {\\n            id: 'unavailable',\\n            value: 'unavailable',\\n            label: 'Mark As Grand Child Unavailable',\\n            color: 'red',\\n            tooltipText: 'Mark As Grand Child Unavailable'\\n          }\\n        ]\\n      }\\n    ]\\n  },\\n  {\\n    id: 'unavailable',\\n    value: 'unavailable',\\n    label: 'Mark As Unavailable',\\n    color: 'red',\\n    tooltipText: 'Mark As Unavailable'\\n  },\\n  {\\n    id: 'active',\\n    value: 'active',\\n    label: 'Mark As Active',\\n    color: 'purple',\\n    tooltipText: 'Mark As Active'\\n  },\\n  {\\n    id: 'inactive',\\n    value: 'inactive',\\n    label: 'Mark As Inactive',\\n    color: 'green',\\n    tooltipText: 'Mark As Inactive'\\n  }\\n]\\n\\nconst paginationOptions = [\\n  { value: '25', label: '25 per page', title: '25 per page' },\\n  { value: '50', label: '50 per page', title: '50 per page' },\\n  { value: '100', label: '100 per page', title: '100 per page' },\\n  { value: '200', label: '200 per page', title: '200 per page' }\\n]\\n\\nconst columnOption = [\\n  { value: 'ascending', label: 'Sort Ascending', iconVariant: 'hide-menu-box' },\\n  {\\n    value: 'descending',\\n    label: 'Sort Descending',\\n    iconVariant: 'hub-location'\\n  },\\n  { value: 'hideColumn', label: 'Hide Column', iconVariant: 'close' },\\n  { value: 'pinLeft', label: 'Pin Left', iconVariant: 'angle-left' },\\n  { value: 'pinright', label: 'Pin Right', iconVariant: 'angle-right-thin' }\\n]\\n\\nconst options = [\\n  {\\n    value: 'emailVerificationPending',\\n    label: 'Email Verification Pending Shipper'\\n  },\\n  { value: 'allShippers', label: 'All Shippers' },\\n  { value: 'approvalPendingShippers', label: 'Approval Pending Shippers' }\\n]\\n\\nconst datePickerOptions = [\\n  { value: 'January', label: 'January' },\\n  { value: 'February', label: 'February' },\\n  { value: 'March', label: 'March' },\\n  { value: 'April', label: 'April' },\\n  { value: 'May', label: 'May' },\\n  { value: 'June', label: 'June' },\\n  { value: 'July', label: 'July' },\\n  { value: 'August', label: 'August' },\\n  { value: 'September', label: 'September' },\\n  { value: 'October', label: 'October' },\\n  { value: 'November', label: 'November' },\\n  { value: 'December', label: 'December' }\\n]\\n\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\nexport const ButtonDropdown = addSourceDecorator(addSourceDecorator(() => (\\n  <ThemeWrapper>\\n    <Box p='2em' bgColor='grey.50'>\\n      <IconDropdown\\n        variant={text('varaint', 'button-dropdown') as tSelectVariant}\\n        optionList={object('optionList', ListViewOption)}\\n        width={text('width', '120px')}\\n        menuIsOpen={boolean('menuIsOpen', false)}\\n        iconButtonDetails={array('iconList', [\\n          'hide-menu-box',\\n          'More',\\n          'angle-down'\\n        ])}\\n        primary={boolean('primary', false)}\\n        intent={text('intent', 'page') as tIntent}\\n        onChange={action('Value Changed')}\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\n        disabled={boolean('disabled', false)}\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\n        tooltipProps={{\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\n        }}\\n      />\\n    </Box>\\n  </ThemeWrapper>\\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\nexport const TextDropdown = addSourceDecorator(addSourceDecorator(() => (\\n  <ThemeWrapper>\\n    <Box p='2em' bgColor='grey.50'>\\n      <IconDropdown\\n        variant={text('varaint', 'text-dropdown') as tSelectVariant}\\n        optionList={object('optionList', ListViewOption)}\\n        width={text('width', '120px')}\\n        menuIsOpen={boolean('menuIsOpen', false)}\\n        iconButtonDetails={array('iconList', [\\n          'hide-menu-box',\\n          'More',\\n          'angle-down'\\n        ])}\\n        primary={boolean('primary', false)}\\n        intent={text('intent', 'page') as tIntent}\\n        onChange={action('Value Changed')}\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\n        disabled={boolean('disabled', false)}\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\n        tooltipProps={{\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\n        }}\\n      />\\n    </Box>\\n  </ThemeWrapper>\\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const MultiLevelBreadCrumb = addSourceDecorator(addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='2em' bgColor='grey.50'>\\n        <IconDropdown\\n          variant={text('variant', 'multilevel-breadcrumb') as tSelectVariant}\\n          optionList={object('optionList', MultiLevelListViewOption)}\\n          onChange={action('Value selected')}\\n          value={text('value', 'strawberry')}\\n          width={text('width', '260px')}\\n        />\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n  }, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const MultiLevelButtonDropdown = addSourceDecorator(addSourceDecorator(() => (\\n  <ThemeWrapper>\\n    <Box p='2em' bgColor='grey.50'>\\n      <IconDropdown\\n        variant={\\n          text('varaint', 'multilevel-button-dropdown') as tSelectVariant\\n        }\\n        optionList={object('optionList', MultiLevelListViewOption)}\\n        width={text('width', '120px')}\\n        menuIsOpen\\n        iconButtonDetails={array('iconList', [\\n          'hide-menu-box',\\n          'More',\\n          'angle-down'\\n        ])}\\n        defaultOpen='right'\\n        primary={boolean('primary', false)}\\n        intent={text('intent', 'page') as tIntent}\\n        handleClick={(id: any) => console.log('clicked from storybook', id)}\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\n        disabled={boolean('disabled', false)}\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\n        tooltipProps={{\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\n        }}\\n      />\\n    </Box>\\n  </ThemeWrapper>\\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const PaginationDropdown = addSourceDecorator(addSourceDecorator(() => (\\n  <ThemeWrapper>\\n    <CardComponent style={{ height: '300px' }}>\\n      <IconDropdown\\n        variant={text('variant', 'pagination-size') as tSelectVariant}\\n        optionList={object('optionList', paginationOptions)}\\n        onChange={action('Value selected')}\\n        value={text('value', '50')}\\n        width={text('width', '120px')}\\n      />\\n    </CardComponent>\\n  </ThemeWrapper>\\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const columnOptionComponent = addSourceDecorator(addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='2em' bgColor='grey.50'>\\n        <div style={{ width: '200px', margin: 'auto' }}>\\n          <IconDropdown\\n            variant={text('variant', 'column-filter') as tSelectVariant}\\n            optionList={object('optionList', columnOption)}\\n            onChange={action('Value selected')}\\n            width={text('width', '10px')}\\n            isSingleClickOption={boolean('isSingleClickOption', true)}\\n          />\\n        </div>\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const BreadCrumbComponent = addSourceDecorator(addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='2em' bgColor='grey.50'>\\n        <IconDropdown\\n          variant={text('variant', 'bread-crumb') as tSelectVariant}\\n          optionList={object('optionList', options)}\\n          onChange={action('Value selected')}\\n          value={text('value', 'strawberry')}\\n          width={text('width', '260px')}\\n        />\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const DatePickerDropDown = addSourceDecorator(addSourceDecorator(() => (\\n  <ThemeWrapper>\\n    <CardComponent style={{ height: '200px' }}>\\n      <IconDropdown\\n        variant={text('variant', 'date-picker') as tSelectVariant}\\n        optionList={object('optionList', datePickerOptions)}\\n        onChange={action('Value selected')}\\n        value={text('value', '50')}\\n        width={text('width', '80px')}\\n        showDownArrow={boolean('Show Down Arrow', true)}\\n        isMultiRegionStyled={boolean('Is Multi Region Styled', false)}\\n      />\\n    </CardComponent>\\n  </ThemeWrapper>\\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\nconst arrayMap = [\\n  { variant: 'column-filter', name: 'column-filter0' },\\n  { variant: 'column-filter', name: 'column-filter1' },\\n  { variant: 'column-filter', name: 'column-filter2' }\\n]\\n\\nexport const columnOptionList = addSourceDecorator(addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='2em' bgColor='grey.50'>\\n        <div style={{ width: '200px', margin: 'auto' }}>\\n          {arrayMap.map((obj: any, index: number) => {\\n            return (\\n              <IconDropdown\\n                variant={text('variant', obj?.variant) as tSelectVariant}\\n                optionList={object('optionList', columnOption)}\\n                onChange={action('Value selected')}\\n                width={text('width', '10px')}\\n                isSingleClickOption={boolean('isSingleClickOption', true)}\\n                key={index}\\n              />\\n            )\\n          })}\\n        </div>\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const DropdownUniversal = addSourceDecorator(addSourceDecorator(() => {\\n  // reference to style\\n  // const theme = useContext(ThemeContext)\\n  // const borderBottom = `1px solid ${theme?.colors?.grey['A800']}`\\n  // const customStyle = {\\n  //   control: (provided: any) => ({\\n  //     ...provided,\\n  //     borderStyle: 'none',\\n  //     borderBottom,\\n  //     borderRadius: '0px',\\n  //     boxShadow: 'none',\\n  //     borderColor: theme?.colors?.grey?.A800,\\n  //     '&:focus': {\\n  //       borderStyle: 'none',\\n  //       borderBottom,\\n  //       boxShadow: 'none',\\n  //       borderColor: theme?.colors?.grey?.A800\\n  //     },\\n  //     '&:hover': {\\n  //       borderStyle: 'none',\\n  //       borderBottom,\\n  //       boxShadow: 'none',\\n  //       borderColor: theme?.colors?.grey?.A800\\n  //     }\\n  //   }),\\n  //   option: (provided: any, state: any) => ({\\n  //     ...provided,\\n  //     backgroundColor: state?.isSelected\\n  //       ? theme?.colors?.primary?.main\\n  //       : theme?.colors?.white,\\n  //     '&:hover': {\\n  //       backgroundColor: state?.isSelected\\n  //         ? theme?.colors?.primary?.main\\n  //         : theme?.colors?.grey['50']\\n  //     }\\n  //   }),\\n\\n  //   menu: (provided: any, state: any) => ({\\n  //     ...provided,\\n  //     backgroundColor: state?.isSelected\\n  //       ? theme.colors.primary.main\\n  //       : theme?.colors?.white,\\n  //     borderRadius: '2px',\\n  //     '&:hover': {\\n  //       backgroundColor: state?.isSelected\\n  //         ? theme?.colors?.primary?.main\\n  //         : theme?.colors?.white\\n  //     },\\n  //     marginTop: '5px',\\n  //     marginLeft: '16px',\\n  //     width: '90%'\\n  //   }),\\n  //   menuList: (provided: any) => ({\\n  //     ...provided,\\n  //     marginTop: '0px'\\n  //   }),\\n  //   valueContainer: (provided: any) => ({\\n  //     ...provided,\\n  //     padding: '0px'\\n  //   })\\n  // }\\n  return (\\n    <ThemeWrapper>\\n      <Box p='2em' bgColor='grey.50'>\\n        <IconDropdown\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\n          optionList={object('optionList', ListViewOption)}\\n          width={text('width', '120px')}\\n          menuIsOpen={boolean('menuIsOpen', false)}\\n          primary={boolean('primary', false)}\\n          intent={text('intent', 'page') as tIntent}\\n          onChange={action('Value Changed')}\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\n          disabled={boolean('disabled', false)}\\n          value='available'\\n          optionComponent={({ selectedOption }: any) => {\\n            return (\\n              <div>\\n                <div>{selectedOption?.color}</div>\\n                <div>{selectedOption?.label}</div>\\n              </div>\\n            )\\n          }}\\n          // customStyle={customStyle}\\n        >\\n          {({\\n            selectedOption,\\n            menuIsOpen,\\n            setMenuIsOpen\\n          }: IUniversalDropdownChildren) => {\\n            return (\\n              <Button\\n                onClick={() => {\\n                  setMenuIsOpen(!menuIsOpen)\\n                  action('Universal open/closed')(menuIsOpen)\\n                }}\\n                color={text('color', 'white')}\\n                bgColor={text('bgColor', 'black')}\\n                fullWidth={boolean('fullWidth', false)}\\n              >\\n                {selectedOption?.label}\\n              </Button>\\n            )\\n          }}\\n        </IconDropdown>\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const TextFieldDropdown = addSourceDecorator(addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='2em' bgColor='grey.50'>\\n        <IconDropdown\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\n          optionList={object('optionList', ListViewOption)}\\n          width={text('width', '120px')}\\n          menuIsOpen={boolean('menuIsOpen', false)}\\n          primary={boolean('primary', false)}\\n          intent={text('intent', 'page') as tIntent}\\n          onChange={action('Value Changed')}\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\n          disabled={boolean('disabled', false)}\\n          value='available'\\n          optionComponent={({ selectedOption }: any) => {\\n            return (\\n              <div>\\n                <div>{selectedOption?.color}</div>\\n                <div>{selectedOption?.label}</div>\\n              </div>\\n            )\\n          }}\\n          // customStyle={customStyle}\\n        >\\n          {({\\n            selectedOption,\\n            menuIsOpen,\\n            setMenuIsOpen\\n          }: IUniversalDropdownChildren) => {\\n            return (\\n              <TextInput\\n                id='someId'\\n                name='someName'\\n                className='someClassName'\\n                label={text('label', 'Username')}\\n                labelColor={text('labelColor', 'text.inputLabel.default')}\\n                placeholder={text('placeholder', 'Enter text here...')}\\n                maxLength={number('maxLength', 10)}\\n                error={boolean('error', false)}\\n                errorMessage={text('errorMessage', '')}\\n                required={boolean('required', false)}\\n                fullWidth={boolean('fullWidth', false)}\\n                onChange={action('Triggered: onChange')}\\n                onClick={() => {\\n                  setMenuIsOpen(!menuIsOpen)\\n                  action('universal open/closed')(menuIsOpen)\\n                }}\\n                value={selectedOption?.value}\\n              />\\n            )\\n          }}\\n        </IconDropdown>\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\";\n// @ts-ignore\nvar __ADDS_MAP__ = {};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = \"/IconDropdown.stories.tsx\";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \n\n/* eslint-disable */\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\n// @ts-ignore\nvar addSourceDecorator = require(\"@storybook/source-loader/preview\").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = \"/Users/farhanansari/Code/ui-library/src/components/molecules/IconDropdown\";\n// @ts-ignore\nvar __STORY__ = \"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/farhanansari/Code/ui-library/src/components/molecules/IconDropdown\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"import { action } from '@storybook/addon-actions'\\\\nimport {\\\\n  array,\\\\n  boolean,\\\\n  number,\\\\n  object,\\\\n  text,\\\\n  withKnobs\\\\n} from '@storybook/addon-knobs'\\\\nimport React from 'react'\\\\nimport IconDropdown from '.'\\\\nimport { path } from '..'\\\\nimport { Box } from '../../..'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport Button, { tIntent } from '../../atoms/Button'\\\\nimport CardComponent from '../../atoms/Card'\\\\nimport { tPlacement } from '../../../utilities/types'\\\\nimport {\\\\n  IUniversalDropdownChildren,\\\\n  tSelectVariant\\\\n} from '../DropDown/interface'\\\\nimport TextInput from '../TextInput'\\\\n\\\\nexport default {\\\\n  title: `${path}/IconDropdown`,\\\\n  decorators: [withKnobs],\\\\n  component: IconDropdown\\\\n}\\\\n\\\\nconst ListViewOption = [\\\\n  {\\\\n    value: 'available',\\\\n    label: 'Mark As Available',\\\\n    color: 'blue',\\\\n    tooltipText: 'Mark As Available',\\\\n    isDisabled: true\\\\n  },\\\\n  {\\\\n    value: 'unavailable',\\\\n    label: 'Mark As Unavailable',\\\\n    color: 'red',\\\\n    tooltipText: 'Mark As Unavailable'\\\\n  },\\\\n  {\\\\n    value: 'active',\\\\n    label: 'Mark As Active',\\\\n    color: 'purple',\\\\n    tooltipText: 'Mark As Active'\\\\n  },\\\\n  {\\\\n    value: 'inactive',\\\\n    label: 'Mark As Inactive',\\\\n    color: 'green',\\\\n    tooltipText: 'Mark As Inactive'\\\\n  }\\\\n]\\\\n\\\\nconst MultiLevelListViewOption = [\\\\n  {\\\\n    id: 'available',\\\\n    value: 'available',\\\\n    label: 'Mark As Available',\\\\n    color: 'blue',\\\\n    tooltipText: 'Mark As Available',\\\\n    options: [\\\\n      {\\\\n        id: 'available',\\\\n        value: 'available',\\\\n        label: 'Mark As Child Available',\\\\n        color: 'blue',\\\\n        tooltipText: 'Mark As Child Available'\\\\n      },\\\\n      {\\\\n        id: 'unavailable',\\\\n        value: 'unavailable',\\\\n        label: 'Mark As Child Unavailable',\\\\n        color: 'red',\\\\n        tooltipText: 'Mark As Child Unavailable'\\\\n      },\\\\n      {\\\\n        id: 'active',\\\\n        value: 'active',\\\\n        label: 'Mark As Child Active',\\\\n        color: 'purple',\\\\n        tooltipText: 'Mark As Child Active'\\\\n      },\\\\n      {\\\\n        id: 'inactive',\\\\n        value: 'inactive',\\\\n        label: 'Mark As Child Inactive',\\\\n        color: 'green',\\\\n        tooltipText: 'Mark As Child Inactive',\\\\n        options: [\\\\n          {\\\\n            id: 'available',\\\\n            value: 'available',\\\\n            label: 'Mark As Grand Child Available',\\\\n            color: 'blue',\\\\n            tooltipText: 'Mark As Grand Child Available'\\\\n          },\\\\n          {\\\\n            id: 'unavailable',\\\\n            value: 'unavailable',\\\\n            label: 'Mark As Grand Child Unavailable',\\\\n            color: 'red',\\\\n            tooltipText: 'Mark As Grand Child Unavailable'\\\\n          }\\\\n        ]\\\\n      }\\\\n    ]\\\\n  },\\\\n  {\\\\n    id: 'unavailable',\\\\n    value: 'unavailable',\\\\n    label: 'Mark As Unavailable',\\\\n    color: 'red',\\\\n    tooltipText: 'Mark As Unavailable'\\\\n  },\\\\n  {\\\\n    id: 'active',\\\\n    value: 'active',\\\\n    label: 'Mark As Active',\\\\n    color: 'purple',\\\\n    tooltipText: 'Mark As Active'\\\\n  },\\\\n  {\\\\n    id: 'inactive',\\\\n    value: 'inactive',\\\\n    label: 'Mark As Inactive',\\\\n    color: 'green',\\\\n    tooltipText: 'Mark As Inactive'\\\\n  }\\\\n]\\\\n\\\\nconst paginationOptions = [\\\\n  { value: '25', label: '25 per page', title: '25 per page' },\\\\n  { value: '50', label: '50 per page', title: '50 per page' },\\\\n  { value: '100', label: '100 per page', title: '100 per page' },\\\\n  { value: '200', label: '200 per page', title: '200 per page' }\\\\n]\\\\n\\\\nconst columnOption = [\\\\n  { value: 'ascending', label: 'Sort Ascending', iconVariant: 'hide-menu-box' },\\\\n  {\\\\n    value: 'descending',\\\\n    label: 'Sort Descending',\\\\n    iconVariant: 'hub-location'\\\\n  },\\\\n  { value: 'hideColumn', label: 'Hide Column', iconVariant: 'close' },\\\\n  { value: 'pinLeft', label: 'Pin Left', iconVariant: 'angle-left' },\\\\n  { value: 'pinright', label: 'Pin Right', iconVariant: 'angle-right-thin' }\\\\n]\\\\n\\\\nconst options = [\\\\n  {\\\\n    value: 'emailVerificationPending',\\\\n    label: 'Email Verification Pending Shipper'\\\\n  },\\\\n  { value: 'allShippers', label: 'All Shippers' },\\\\n  { value: 'approvalPendingShippers', label: 'Approval Pending Shippers' }\\\\n]\\\\n\\\\nconst datePickerOptions = [\\\\n  { value: 'January', label: 'January' },\\\\n  { value: 'February', label: 'February' },\\\\n  { value: 'March', label: 'March' },\\\\n  { value: 'April', label: 'April' },\\\\n  { value: 'May', label: 'May' },\\\\n  { value: 'June', label: 'June' },\\\\n  { value: 'July', label: 'July' },\\\\n  { value: 'August', label: 'August' },\\\\n  { value: 'September', label: 'September' },\\\\n  { value: 'October', label: 'October' },\\\\n  { value: 'November', label: 'November' },\\\\n  { value: 'December', label: 'December' }\\\\n]\\\\n\\\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\\\nexport const ButtonDropdown = () => (\\\\n  <ThemeWrapper>\\\\n    <Box p='2em' bgColor='grey.50'>\\\\n      <IconDropdown\\\\n        variant={text('varaint', 'button-dropdown') as tSelectVariant}\\\\n        optionList={object('optionList', ListViewOption)}\\\\n        width={text('width', '120px')}\\\\n        menuIsOpen={boolean('menuIsOpen', false)}\\\\n        iconButtonDetails={array('iconList', [\\\\n          'hide-menu-box',\\\\n          'More',\\\\n          'angle-down'\\\\n        ])}\\\\n        primary={boolean('primary', false)}\\\\n        intent={text('intent', 'page') as tIntent}\\\\n        onChange={action('Value Changed')}\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n        disabled={boolean('disabled', false)}\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\n        tooltipProps={{\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\n        }}\\\\n      />\\\\n    </Box>\\\\n  </ThemeWrapper>\\\\n)\\\\n\\\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\\\nexport const TextDropdown = () => (\\\\n  <ThemeWrapper>\\\\n    <Box p='2em' bgColor='grey.50'>\\\\n      <IconDropdown\\\\n        variant={text('varaint', 'text-dropdown') as tSelectVariant}\\\\n        optionList={object('optionList', ListViewOption)}\\\\n        width={text('width', '120px')}\\\\n        menuIsOpen={boolean('menuIsOpen', false)}\\\\n        iconButtonDetails={array('iconList', [\\\\n          'hide-menu-box',\\\\n          'More',\\\\n          'angle-down'\\\\n        ])}\\\\n        primary={boolean('primary', false)}\\\\n        intent={text('intent', 'page') as tIntent}\\\\n        onChange={action('Value Changed')}\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n        disabled={boolean('disabled', false)}\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\n        tooltipProps={{\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\n        }}\\\\n      />\\\\n    </Box>\\\\n  </ThemeWrapper>\\\\n)\\\\n\\\\nexport const MultiLevelBreadCrumb = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <IconDropdown\\\\n          variant={text('variant', 'multilevel-breadcrumb') as tSelectVariant}\\\\n          optionList={object('optionList', MultiLevelListViewOption)}\\\\n          onChange={action('Value selected')}\\\\n          value={text('value', 'strawberry')}\\\\n          width={text('width', '260px')}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n  }\\\\n\\\\nexport const MultiLevelButtonDropdown = () => (\\\\n  <ThemeWrapper>\\\\n    <Box p='2em' bgColor='grey.50'>\\\\n      <IconDropdown\\\\n        variant={\\\\n          text('varaint', 'multilevel-button-dropdown') as tSelectVariant\\\\n        }\\\\n        optionList={object('optionList', MultiLevelListViewOption)}\\\\n        width={text('width', '120px')}\\\\n        menuIsOpen\\\\n        iconButtonDetails={array('iconList', [\\\\n          'hide-menu-box',\\\\n          'More',\\\\n          'angle-down'\\\\n        ])}\\\\n        defaultOpen='right'\\\\n        primary={boolean('primary', false)}\\\\n        intent={text('intent', 'page') as tIntent}\\\\n        handleClick={(id: any) => console.log('clicked from storybook', id)}\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n        disabled={boolean('disabled', false)}\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\n        tooltipProps={{\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\n        }}\\\\n      />\\\\n    </Box>\\\\n  </ThemeWrapper>\\\\n)\\\\n\\\\nexport const PaginationDropdown = () => (\\\\n  <ThemeWrapper>\\\\n    <CardComponent style={{ height: '300px' }}>\\\\n      <IconDropdown\\\\n        variant={text('variant', 'pagination-size') as tSelectVariant}\\\\n        optionList={object('optionList', paginationOptions)}\\\\n        onChange={action('Value selected')}\\\\n        value={text('value', '50')}\\\\n        width={text('width', '120px')}\\\\n      />\\\\n    </CardComponent>\\\\n  </ThemeWrapper>\\\\n)\\\\n\\\\nexport const columnOptionComponent = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <div style={{ width: '200px', margin: 'auto' }}>\\\\n          <IconDropdown\\\\n            variant={text('variant', 'column-filter') as tSelectVariant}\\\\n            optionList={object('optionList', columnOption)}\\\\n            onChange={action('Value selected')}\\\\n            width={text('width', '10px')}\\\\n            isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n          />\\\\n        </div>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const BreadCrumbComponent = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <IconDropdown\\\\n          variant={text('variant', 'bread-crumb') as tSelectVariant}\\\\n          optionList={object('optionList', options)}\\\\n          onChange={action('Value selected')}\\\\n          value={text('value', 'strawberry')}\\\\n          width={text('width', '260px')}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const DatePickerDropDown = () => (\\\\n  <ThemeWrapper>\\\\n    <CardComponent style={{ height: '200px' }}>\\\\n      <IconDropdown\\\\n        variant={text('variant', 'date-picker') as tSelectVariant}\\\\n        optionList={object('optionList', datePickerOptions)}\\\\n        onChange={action('Value selected')}\\\\n        value={text('value', '50')}\\\\n        width={text('width', '80px')}\\\\n        showDownArrow={boolean('Show Down Arrow', true)}\\\\n        isMultiRegionStyled={boolean('Is Multi Region Styled', false)}\\\\n      />\\\\n    </CardComponent>\\\\n  </ThemeWrapper>\\\\n)\\\\nconst arrayMap = [\\\\n  { variant: 'column-filter', name: 'column-filter0' },\\\\n  { variant: 'column-filter', name: 'column-filter1' },\\\\n  { variant: 'column-filter', name: 'column-filter2' }\\\\n]\\\\n\\\\nexport const columnOptionList = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <div style={{ width: '200px', margin: 'auto' }}>\\\\n          {arrayMap.map((obj: any, index: number) => {\\\\n            return (\\\\n              <IconDropdown\\\\n                variant={text('variant', obj?.variant) as tSelectVariant}\\\\n                optionList={object('optionList', columnOption)}\\\\n                onChange={action('Value selected')}\\\\n                width={text('width', '10px')}\\\\n                isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n                key={index}\\\\n              />\\\\n            )\\\\n          })}\\\\n        </div>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const DropdownUniversal = () => {\\\\n  // reference to style\\\\n  // const theme = useContext(ThemeContext)\\\\n  // const borderBottom = `1px solid ${theme?.colors?.grey['A800']}`\\\\n  // const customStyle = {\\\\n  //   control: (provided: any) => ({\\\\n  //     ...provided,\\\\n  //     borderStyle: 'none',\\\\n  //     borderBottom,\\\\n  //     borderRadius: '0px',\\\\n  //     boxShadow: 'none',\\\\n  //     borderColor: theme?.colors?.grey?.A800,\\\\n  //     '&:focus': {\\\\n  //       borderStyle: 'none',\\\\n  //       borderBottom,\\\\n  //       boxShadow: 'none',\\\\n  //       borderColor: theme?.colors?.grey?.A800\\\\n  //     },\\\\n  //     '&:hover': {\\\\n  //       borderStyle: 'none',\\\\n  //       borderBottom,\\\\n  //       boxShadow: 'none',\\\\n  //       borderColor: theme?.colors?.grey?.A800\\\\n  //     }\\\\n  //   }),\\\\n  //   option: (provided: any, state: any) => ({\\\\n  //     ...provided,\\\\n  //     backgroundColor: state?.isSelected\\\\n  //       ? theme?.colors?.primary?.main\\\\n  //       : theme?.colors?.white,\\\\n  //     '&:hover': {\\\\n  //       backgroundColor: state?.isSelected\\\\n  //         ? theme?.colors?.primary?.main\\\\n  //         : theme?.colors?.grey['50']\\\\n  //     }\\\\n  //   }),\\\\n\\\\n  //   menu: (provided: any, state: any) => ({\\\\n  //     ...provided,\\\\n  //     backgroundColor: state?.isSelected\\\\n  //       ? theme.colors.primary.main\\\\n  //       : theme?.colors?.white,\\\\n  //     borderRadius: '2px',\\\\n  //     '&:hover': {\\\\n  //       backgroundColor: state?.isSelected\\\\n  //         ? theme?.colors?.primary?.main\\\\n  //         : theme?.colors?.white\\\\n  //     },\\\\n  //     marginTop: '5px',\\\\n  //     marginLeft: '16px',\\\\n  //     width: '90%'\\\\n  //   }),\\\\n  //   menuList: (provided: any) => ({\\\\n  //     ...provided,\\\\n  //     marginTop: '0px'\\\\n  //   }),\\\\n  //   valueContainer: (provided: any) => ({\\\\n  //     ...provided,\\\\n  //     padding: '0px'\\\\n  //   })\\\\n  // }\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <IconDropdown\\\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          width={text('width', '120px')}\\\\n          menuIsOpen={boolean('menuIsOpen', false)}\\\\n          primary={boolean('primary', false)}\\\\n          intent={text('intent', 'page') as tIntent}\\\\n          onChange={action('Value Changed')}\\\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n          disabled={boolean('disabled', false)}\\\\n          value='available'\\\\n          optionComponent={({ selectedOption }: any) => {\\\\n            return (\\\\n              <div>\\\\n                <div>{selectedOption?.color}</div>\\\\n                <div>{selectedOption?.label}</div>\\\\n              </div>\\\\n            )\\\\n          }}\\\\n          // customStyle={customStyle}\\\\n        >\\\\n          {({\\\\n            selectedOption,\\\\n            menuIsOpen,\\\\n            setMenuIsOpen\\\\n          }: IUniversalDropdownChildren) => {\\\\n            return (\\\\n              <Button\\\\n                onClick={() => {\\\\n                  setMenuIsOpen(!menuIsOpen)\\\\n                  action('Universal open/closed')(menuIsOpen)\\\\n                }}\\\\n                color={text('color', 'white')}\\\\n                bgColor={text('bgColor', 'black')}\\\\n                fullWidth={boolean('fullWidth', false)}\\\\n              >\\\\n                {selectedOption?.label}\\\\n              </Button>\\\\n            )\\\\n          }}\\\\n        </IconDropdown>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const TextFieldDropdown = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <IconDropdown\\\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          width={text('width', '120px')}\\\\n          menuIsOpen={boolean('menuIsOpen', false)}\\\\n          primary={boolean('primary', false)}\\\\n          intent={text('intent', 'page') as tIntent}\\\\n          onChange={action('Value Changed')}\\\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n          disabled={boolean('disabled', false)}\\\\n          value='available'\\\\n          optionComponent={({ selectedOption }: any) => {\\\\n            return (\\\\n              <div>\\\\n                <div>{selectedOption?.color}</div>\\\\n                <div>{selectedOption?.label}</div>\\\\n              </div>\\\\n            )\\\\n          }}\\\\n          // customStyle={customStyle}\\\\n        >\\\\n          {({\\\\n            selectedOption,\\\\n            menuIsOpen,\\\\n            setMenuIsOpen\\\\n          }: IUniversalDropdownChildren) => {\\\\n            return (\\\\n              <TextInput\\\\n                id='someId'\\\\n                name='someName'\\\\n                className='someClassName'\\\\n                label={text('label', 'Username')}\\\\n                labelColor={text('labelColor', 'text.inputLabel.default')}\\\\n                placeholder={text('placeholder', 'Enter text here...')}\\\\n                maxLength={number('maxLength', 10)}\\\\n                error={boolean('error', false)}\\\\n                errorMessage={text('errorMessage', '')}\\\\n                required={boolean('required', false)}\\\\n                fullWidth={boolean('fullWidth', false)}\\\\n                onChange={action('Triggered: onChange')}\\\\n                onClick={() => {\\\\n                  setMenuIsOpen(!menuIsOpen)\\\\n                  action('universal open/closed')(menuIsOpen)\\\\n                }}\\\\n                value={selectedOption?.value}\\\\n              />\\\\n            )\\\\n          }}\\\\n        </IconDropdown>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/IconDropdown.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\nimport { action } from '@storybook/addon-actions'\\nimport {\\n  array,\\n  boolean,\\n  number,\\n  object,\\n  text,\\n  withKnobs\\n} from '@storybook/addon-knobs'\\nimport React from 'react'\\nimport IconDropdown from '.'\\nimport { path } from '..'\\nimport { Box } from '../../..'\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\nimport Button, { tIntent } from '../../atoms/Button'\\nimport CardComponent from '../../atoms/Card'\\nimport { tPlacement } from '../../../utilities/types'\\nimport {\\n  IUniversalDropdownChildren,\\n  tSelectVariant\\n} from '../DropDown/interface'\\nimport TextInput from '../TextInput'\\n\\nexport default {parameters: {\\\"storySource\\\":{\\\"source\\\":\\\"import { action } from '@storybook/addon-actions'\\\\nimport {\\\\n  array,\\\\n  boolean,\\\\n  number,\\\\n  object,\\\\n  text,\\\\n  withKnobs\\\\n} from '@storybook/addon-knobs'\\\\nimport React from 'react'\\\\nimport IconDropdown from '.'\\\\nimport { path } from '..'\\\\nimport { Box } from '../../..'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport Button, { tIntent } from '../../atoms/Button'\\\\nimport CardComponent from '../../atoms/Card'\\\\nimport { tPlacement } from '../../../utilities/types'\\\\nimport {\\\\n  IUniversalDropdownChildren,\\\\n  tSelectVariant\\\\n} from '../DropDown/interface'\\\\nimport TextInput from '../TextInput'\\\\n\\\\nexport default {\\\\n  title: `${path}/IconDropdown`,\\\\n  decorators: [withKnobs],\\\\n  component: IconDropdown\\\\n}\\\\n\\\\nconst ListViewOption = [\\\\n  {\\\\n    value: 'available',\\\\n    label: 'Mark As Available',\\\\n    color: 'blue',\\\\n    tooltipText: 'Mark As Available',\\\\n    isDisabled: true\\\\n  },\\\\n  {\\\\n    value: 'unavailable',\\\\n    label: 'Mark As Unavailable',\\\\n    color: 'red',\\\\n    tooltipText: 'Mark As Unavailable'\\\\n  },\\\\n  {\\\\n    value: 'active',\\\\n    label: 'Mark As Active',\\\\n    color: 'purple',\\\\n    tooltipText: 'Mark As Active'\\\\n  },\\\\n  {\\\\n    value: 'inactive',\\\\n    label: 'Mark As Inactive',\\\\n    color: 'green',\\\\n    tooltipText: 'Mark As Inactive'\\\\n  }\\\\n]\\\\n\\\\nconst MultiLevelListViewOption = [\\\\n  {\\\\n    id: 'available',\\\\n    value: 'available',\\\\n    label: 'Mark As Available',\\\\n    color: 'blue',\\\\n    tooltipText: 'Mark As Available',\\\\n    options: [\\\\n      {\\\\n        id: 'available',\\\\n        value: 'available',\\\\n        label: 'Mark As Child Available',\\\\n        color: 'blue',\\\\n        tooltipText: 'Mark As Child Available'\\\\n      },\\\\n      {\\\\n        id: 'unavailable',\\\\n        value: 'unavailable',\\\\n        label: 'Mark As Child Unavailable',\\\\n        color: 'red',\\\\n        tooltipText: 'Mark As Child Unavailable'\\\\n      },\\\\n      {\\\\n        id: 'active',\\\\n        value: 'active',\\\\n        label: 'Mark As Child Active',\\\\n        color: 'purple',\\\\n        tooltipText: 'Mark As Child Active'\\\\n      },\\\\n      {\\\\n        id: 'inactive',\\\\n        value: 'inactive',\\\\n        label: 'Mark As Child Inactive',\\\\n        color: 'green',\\\\n        tooltipText: 'Mark As Child Inactive',\\\\n        options: [\\\\n          {\\\\n            id: 'available',\\\\n            value: 'available',\\\\n            label: 'Mark As Grand Child Available',\\\\n            color: 'blue',\\\\n            tooltipText: 'Mark As Grand Child Available'\\\\n          },\\\\n          {\\\\n            id: 'unavailable',\\\\n            value: 'unavailable',\\\\n            label: 'Mark As Grand Child Unavailable',\\\\n            color: 'red',\\\\n            tooltipText: 'Mark As Grand Child Unavailable'\\\\n          }\\\\n        ]\\\\n      }\\\\n    ]\\\\n  },\\\\n  {\\\\n    id: 'unavailable',\\\\n    value: 'unavailable',\\\\n    label: 'Mark As Unavailable',\\\\n    color: 'red',\\\\n    tooltipText: 'Mark As Unavailable'\\\\n  },\\\\n  {\\\\n    id: 'active',\\\\n    value: 'active',\\\\n    label: 'Mark As Active',\\\\n    color: 'purple',\\\\n    tooltipText: 'Mark As Active'\\\\n  },\\\\n  {\\\\n    id: 'inactive',\\\\n    value: 'inactive',\\\\n    label: 'Mark As Inactive',\\\\n    color: 'green',\\\\n    tooltipText: 'Mark As Inactive'\\\\n  }\\\\n]\\\\n\\\\nconst paginationOptions = [\\\\n  { value: '25', label: '25 per page', title: '25 per page' },\\\\n  { value: '50', label: '50 per page', title: '50 per page' },\\\\n  { value: '100', label: '100 per page', title: '100 per page' },\\\\n  { value: '200', label: '200 per page', title: '200 per page' }\\\\n]\\\\n\\\\nconst columnOption = [\\\\n  { value: 'ascending', label: 'Sort Ascending', iconVariant: 'hide-menu-box' },\\\\n  {\\\\n    value: 'descending',\\\\n    label: 'Sort Descending',\\\\n    iconVariant: 'hub-location'\\\\n  },\\\\n  { value: 'hideColumn', label: 'Hide Column', iconVariant: 'close' },\\\\n  { value: 'pinLeft', label: 'Pin Left', iconVariant: 'angle-left' },\\\\n  { value: 'pinright', label: 'Pin Right', iconVariant: 'angle-right-thin' }\\\\n]\\\\n\\\\nconst options = [\\\\n  {\\\\n    value: 'emailVerificationPending',\\\\n    label: 'Email Verification Pending Shipper'\\\\n  },\\\\n  { value: 'allShippers', label: 'All Shippers' },\\\\n  { value: 'approvalPendingShippers', label: 'Approval Pending Shippers' }\\\\n]\\\\n\\\\nconst datePickerOptions = [\\\\n  { value: 'January', label: 'January' },\\\\n  { value: 'February', label: 'February' },\\\\n  { value: 'March', label: 'March' },\\\\n  { value: 'April', label: 'April' },\\\\n  { value: 'May', label: 'May' },\\\\n  { value: 'June', label: 'June' },\\\\n  { value: 'July', label: 'July' },\\\\n  { value: 'August', label: 'August' },\\\\n  { value: 'September', label: 'September' },\\\\n  { value: 'October', label: 'October' },\\\\n  { value: 'November', label: 'November' },\\\\n  { value: 'December', label: 'December' }\\\\n]\\\\n\\\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\\\nexport const ButtonDropdown = () => (\\\\n  <ThemeWrapper>\\\\n    <Box p='2em' bgColor='grey.50'>\\\\n      <IconDropdown\\\\n        variant={text('varaint', 'button-dropdown') as tSelectVariant}\\\\n        optionList={object('optionList', ListViewOption)}\\\\n        width={text('width', '120px')}\\\\n        menuIsOpen={boolean('menuIsOpen', false)}\\\\n        iconButtonDetails={array('iconList', [\\\\n          'hide-menu-box',\\\\n          'More',\\\\n          'angle-down'\\\\n        ])}\\\\n        primary={boolean('primary', false)}\\\\n        intent={text('intent', 'page') as tIntent}\\\\n        onChange={action('Value Changed')}\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n        disabled={boolean('disabled', false)}\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\n        tooltipProps={{\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\n        }}\\\\n      />\\\\n    </Box>\\\\n  </ThemeWrapper>\\\\n)\\\\n\\\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\\\nexport const TextDropdown = () => (\\\\n  <ThemeWrapper>\\\\n    <Box p='2em' bgColor='grey.50'>\\\\n      <IconDropdown\\\\n        variant={text('varaint', 'text-dropdown') as tSelectVariant}\\\\n        optionList={object('optionList', ListViewOption)}\\\\n        width={text('width', '120px')}\\\\n        menuIsOpen={boolean('menuIsOpen', false)}\\\\n        iconButtonDetails={array('iconList', [\\\\n          'hide-menu-box',\\\\n          'More',\\\\n          'angle-down'\\\\n        ])}\\\\n        primary={boolean('primary', false)}\\\\n        intent={text('intent', 'page') as tIntent}\\\\n        onChange={action('Value Changed')}\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n        disabled={boolean('disabled', false)}\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\n        tooltipProps={{\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\n        }}\\\\n      />\\\\n    </Box>\\\\n  </ThemeWrapper>\\\\n)\\\\n\\\\nexport const MultiLevelBreadCrumb = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <IconDropdown\\\\n          variant={text('variant', 'multilevel-breadcrumb') as tSelectVariant}\\\\n          optionList={object('optionList', MultiLevelListViewOption)}\\\\n          onChange={action('Value selected')}\\\\n          value={text('value', 'strawberry')}\\\\n          width={text('width', '260px')}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n  }\\\\n\\\\nexport const MultiLevelButtonDropdown = () => (\\\\n  <ThemeWrapper>\\\\n    <Box p='2em' bgColor='grey.50'>\\\\n      <IconDropdown\\\\n        variant={\\\\n          text('varaint', 'multilevel-button-dropdown') as tSelectVariant\\\\n        }\\\\n        optionList={object('optionList', MultiLevelListViewOption)}\\\\n        width={text('width', '120px')}\\\\n        menuIsOpen\\\\n        iconButtonDetails={array('iconList', [\\\\n          'hide-menu-box',\\\\n          'More',\\\\n          'angle-down'\\\\n        ])}\\\\n        defaultOpen='right'\\\\n        primary={boolean('primary', false)}\\\\n        intent={text('intent', 'page') as tIntent}\\\\n        handleClick={(id: any) => console.log('clicked from storybook', id)}\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n        disabled={boolean('disabled', false)}\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\n        tooltipProps={{\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\n        }}\\\\n      />\\\\n    </Box>\\\\n  </ThemeWrapper>\\\\n)\\\\n\\\\nexport const PaginationDropdown = () => (\\\\n  <ThemeWrapper>\\\\n    <CardComponent style={{ height: '300px' }}>\\\\n      <IconDropdown\\\\n        variant={text('variant', 'pagination-size') as tSelectVariant}\\\\n        optionList={object('optionList', paginationOptions)}\\\\n        onChange={action('Value selected')}\\\\n        value={text('value', '50')}\\\\n        width={text('width', '120px')}\\\\n      />\\\\n    </CardComponent>\\\\n  </ThemeWrapper>\\\\n)\\\\n\\\\nexport const columnOptionComponent = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <div style={{ width: '200px', margin: 'auto' }}>\\\\n          <IconDropdown\\\\n            variant={text('variant', 'column-filter') as tSelectVariant}\\\\n            optionList={object('optionList', columnOption)}\\\\n            onChange={action('Value selected')}\\\\n            width={text('width', '10px')}\\\\n            isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n          />\\\\n        </div>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const BreadCrumbComponent = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <IconDropdown\\\\n          variant={text('variant', 'bread-crumb') as tSelectVariant}\\\\n          optionList={object('optionList', options)}\\\\n          onChange={action('Value selected')}\\\\n          value={text('value', 'strawberry')}\\\\n          width={text('width', '260px')}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const DatePickerDropDown = () => (\\\\n  <ThemeWrapper>\\\\n    <CardComponent style={{ height: '200px' }}>\\\\n      <IconDropdown\\\\n        variant={text('variant', 'date-picker') as tSelectVariant}\\\\n        optionList={object('optionList', datePickerOptions)}\\\\n        onChange={action('Value selected')}\\\\n        value={text('value', '50')}\\\\n        width={text('width', '80px')}\\\\n        showDownArrow={boolean('Show Down Arrow', true)}\\\\n        isMultiRegionStyled={boolean('Is Multi Region Styled', false)}\\\\n      />\\\\n    </CardComponent>\\\\n  </ThemeWrapper>\\\\n)\\\\nconst arrayMap = [\\\\n  { variant: 'column-filter', name: 'column-filter0' },\\\\n  { variant: 'column-filter', name: 'column-filter1' },\\\\n  { variant: 'column-filter', name: 'column-filter2' }\\\\n]\\\\n\\\\nexport const columnOptionList = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <div style={{ width: '200px', margin: 'auto' }}>\\\\n          {arrayMap.map((obj: any, index: number) => {\\\\n            return (\\\\n              <IconDropdown\\\\n                variant={text('variant', obj?.variant) as tSelectVariant}\\\\n                optionList={object('optionList', columnOption)}\\\\n                onChange={action('Value selected')}\\\\n                width={text('width', '10px')}\\\\n                isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n                key={index}\\\\n              />\\\\n            )\\\\n          })}\\\\n        </div>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const DropdownUniversal = () => {\\\\n  // reference to style\\\\n  // const theme = useContext(ThemeContext)\\\\n  // const borderBottom = `1px solid ${theme?.colors?.grey['A800']}`\\\\n  // const customStyle = {\\\\n  //   control: (provided: any) => ({\\\\n  //     ...provided,\\\\n  //     borderStyle: 'none',\\\\n  //     borderBottom,\\\\n  //     borderRadius: '0px',\\\\n  //     boxShadow: 'none',\\\\n  //     borderColor: theme?.colors?.grey?.A800,\\\\n  //     '&:focus': {\\\\n  //       borderStyle: 'none',\\\\n  //       borderBottom,\\\\n  //       boxShadow: 'none',\\\\n  //       borderColor: theme?.colors?.grey?.A800\\\\n  //     },\\\\n  //     '&:hover': {\\\\n  //       borderStyle: 'none',\\\\n  //       borderBottom,\\\\n  //       boxShadow: 'none',\\\\n  //       borderColor: theme?.colors?.grey?.A800\\\\n  //     }\\\\n  //   }),\\\\n  //   option: (provided: any, state: any) => ({\\\\n  //     ...provided,\\\\n  //     backgroundColor: state?.isSelected\\\\n  //       ? theme?.colors?.primary?.main\\\\n  //       : theme?.colors?.white,\\\\n  //     '&:hover': {\\\\n  //       backgroundColor: state?.isSelected\\\\n  //         ? theme?.colors?.primary?.main\\\\n  //         : theme?.colors?.grey['50']\\\\n  //     }\\\\n  //   }),\\\\n\\\\n  //   menu: (provided: any, state: any) => ({\\\\n  //     ...provided,\\\\n  //     backgroundColor: state?.isSelected\\\\n  //       ? theme.colors.primary.main\\\\n  //       : theme?.colors?.white,\\\\n  //     borderRadius: '2px',\\\\n  //     '&:hover': {\\\\n  //       backgroundColor: state?.isSelected\\\\n  //         ? theme?.colors?.primary?.main\\\\n  //         : theme?.colors?.white\\\\n  //     },\\\\n  //     marginTop: '5px',\\\\n  //     marginLeft: '16px',\\\\n  //     width: '90%'\\\\n  //   }),\\\\n  //   menuList: (provided: any) => ({\\\\n  //     ...provided,\\\\n  //     marginTop: '0px'\\\\n  //   }),\\\\n  //   valueContainer: (provided: any) => ({\\\\n  //     ...provided,\\\\n  //     padding: '0px'\\\\n  //   })\\\\n  // }\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <IconDropdown\\\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          width={text('width', '120px')}\\\\n          menuIsOpen={boolean('menuIsOpen', false)}\\\\n          primary={boolean('primary', false)}\\\\n          intent={text('intent', 'page') as tIntent}\\\\n          onChange={action('Value Changed')}\\\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n          disabled={boolean('disabled', false)}\\\\n          value='available'\\\\n          optionComponent={({ selectedOption }: any) => {\\\\n            return (\\\\n              <div>\\\\n                <div>{selectedOption?.color}</div>\\\\n                <div>{selectedOption?.label}</div>\\\\n              </div>\\\\n            )\\\\n          }}\\\\n          // customStyle={customStyle}\\\\n        >\\\\n          {({\\\\n            selectedOption,\\\\n            menuIsOpen,\\\\n            setMenuIsOpen\\\\n          }: IUniversalDropdownChildren) => {\\\\n            return (\\\\n              <Button\\\\n                onClick={() => {\\\\n                  setMenuIsOpen(!menuIsOpen)\\\\n                  action('Universal open/closed')(menuIsOpen)\\\\n                }}\\\\n                color={text('color', 'white')}\\\\n                bgColor={text('bgColor', 'black')}\\\\n                fullWidth={boolean('fullWidth', false)}\\\\n              >\\\\n                {selectedOption?.label}\\\\n              </Button>\\\\n            )\\\\n          }}\\\\n        </IconDropdown>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const TextFieldDropdown = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <IconDropdown\\\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          width={text('width', '120px')}\\\\n          menuIsOpen={boolean('menuIsOpen', false)}\\\\n          primary={boolean('primary', false)}\\\\n          intent={text('intent', 'page') as tIntent}\\\\n          onChange={action('Value Changed')}\\\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n          disabled={boolean('disabled', false)}\\\\n          value='available'\\\\n          optionComponent={({ selectedOption }: any) => {\\\\n            return (\\\\n              <div>\\\\n                <div>{selectedOption?.color}</div>\\\\n                <div>{selectedOption?.label}</div>\\\\n              </div>\\\\n            )\\\\n          }}\\\\n          // customStyle={customStyle}\\\\n        >\\\\n          {({\\\\n            selectedOption,\\\\n            menuIsOpen,\\\\n            setMenuIsOpen\\\\n          }: IUniversalDropdownChildren) => {\\\\n            return (\\\\n              <TextInput\\\\n                id='someId'\\\\n                name='someName'\\\\n                className='someClassName'\\\\n                label={text('label', 'Username')}\\\\n                labelColor={text('labelColor', 'text.inputLabel.default')}\\\\n                placeholder={text('placeholder', 'Enter text here...')}\\\\n                maxLength={number('maxLength', 10)}\\\\n                error={boolean('error', false)}\\\\n                errorMessage={text('errorMessage', '')}\\\\n                required={boolean('required', false)}\\\\n                fullWidth={boolean('fullWidth', false)}\\\\n                onChange={action('Triggered: onChange')}\\\\n                onClick={() => {\\\\n                  setMenuIsOpen(!menuIsOpen)\\\\n                  action('universal open/closed')(menuIsOpen)\\\\n                }}\\\\n                value={selectedOption?.value}\\\\n              />\\\\n            )\\\\n          }}\\\\n        </IconDropdown>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\",\\\"locationsMap\\\":{}},},\\n  title: `${path}/IconDropdown`,\\n  decorators: [withKnobs],\\n  component: IconDropdown\\n}\\n\\nconst ListViewOption = [\\n  {\\n    value: 'available',\\n    label: 'Mark As Available',\\n    color: 'blue',\\n    tooltipText: 'Mark As Available',\\n    isDisabled: true\\n  },\\n  {\\n    value: 'unavailable',\\n    label: 'Mark As Unavailable',\\n    color: 'red',\\n    tooltipText: 'Mark As Unavailable'\\n  },\\n  {\\n    value: 'active',\\n    label: 'Mark As Active',\\n    color: 'purple',\\n    tooltipText: 'Mark As Active'\\n  },\\n  {\\n    value: 'inactive',\\n    label: 'Mark As Inactive',\\n    color: 'green',\\n    tooltipText: 'Mark As Inactive'\\n  }\\n]\\n\\nconst MultiLevelListViewOption = [\\n  {\\n    id: 'available',\\n    value: 'available',\\n    label: 'Mark As Available',\\n    color: 'blue',\\n    tooltipText: 'Mark As Available',\\n    options: [\\n      {\\n        id: 'available',\\n        value: 'available',\\n        label: 'Mark As Child Available',\\n        color: 'blue',\\n        tooltipText: 'Mark As Child Available'\\n      },\\n      {\\n        id: 'unavailable',\\n        value: 'unavailable',\\n        label: 'Mark As Child Unavailable',\\n        color: 'red',\\n        tooltipText: 'Mark As Child Unavailable'\\n      },\\n      {\\n        id: 'active',\\n        value: 'active',\\n        label: 'Mark As Child Active',\\n        color: 'purple',\\n        tooltipText: 'Mark As Child Active'\\n      },\\n      {\\n        id: 'inactive',\\n        value: 'inactive',\\n        label: 'Mark As Child Inactive',\\n        color: 'green',\\n        tooltipText: 'Mark As Child Inactive',\\n        options: [\\n          {\\n            id: 'available',\\n            value: 'available',\\n            label: 'Mark As Grand Child Available',\\n            color: 'blue',\\n            tooltipText: 'Mark As Grand Child Available'\\n          },\\n          {\\n            id: 'unavailable',\\n            value: 'unavailable',\\n            label: 'Mark As Grand Child Unavailable',\\n            color: 'red',\\n            tooltipText: 'Mark As Grand Child Unavailable'\\n          }\\n        ]\\n      }\\n    ]\\n  },\\n  {\\n    id: 'unavailable',\\n    value: 'unavailable',\\n    label: 'Mark As Unavailable',\\n    color: 'red',\\n    tooltipText: 'Mark As Unavailable'\\n  },\\n  {\\n    id: 'active',\\n    value: 'active',\\n    label: 'Mark As Active',\\n    color: 'purple',\\n    tooltipText: 'Mark As Active'\\n  },\\n  {\\n    id: 'inactive',\\n    value: 'inactive',\\n    label: 'Mark As Inactive',\\n    color: 'green',\\n    tooltipText: 'Mark As Inactive'\\n  }\\n]\\n\\nconst paginationOptions = [\\n  { value: '25', label: '25 per page', title: '25 per page' },\\n  { value: '50', label: '50 per page', title: '50 per page' },\\n  { value: '100', label: '100 per page', title: '100 per page' },\\n  { value: '200', label: '200 per page', title: '200 per page' }\\n]\\n\\nconst columnOption = [\\n  { value: 'ascending', label: 'Sort Ascending', iconVariant: 'hide-menu-box' },\\n  {\\n    value: 'descending',\\n    label: 'Sort Descending',\\n    iconVariant: 'hub-location'\\n  },\\n  { value: 'hideColumn', label: 'Hide Column', iconVariant: 'close' },\\n  { value: 'pinLeft', label: 'Pin Left', iconVariant: 'angle-left' },\\n  { value: 'pinright', label: 'Pin Right', iconVariant: 'angle-right-thin' }\\n]\\n\\nconst options = [\\n  {\\n    value: 'emailVerificationPending',\\n    label: 'Email Verification Pending Shipper'\\n  },\\n  { value: 'allShippers', label: 'All Shippers' },\\n  { value: 'approvalPendingShippers', label: 'Approval Pending Shippers' }\\n]\\n\\nconst datePickerOptions = [\\n  { value: 'January', label: 'January' },\\n  { value: 'February', label: 'February' },\\n  { value: 'March', label: 'March' },\\n  { value: 'April', label: 'April' },\\n  { value: 'May', label: 'May' },\\n  { value: 'June', label: 'June' },\\n  { value: 'July', label: 'July' },\\n  { value: 'August', label: 'August' },\\n  { value: 'September', label: 'September' },\\n  { value: 'October', label: 'October' },\\n  { value: 'November', label: 'November' },\\n  { value: 'December', label: 'December' }\\n]\\n\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\nexport const ButtonDropdown = addSourceDecorator(() => (\\n  <ThemeWrapper>\\n    <Box p='2em' bgColor='grey.50'>\\n      <IconDropdown\\n        variant={text('varaint', 'button-dropdown') as tSelectVariant}\\n        optionList={object('optionList', ListViewOption)}\\n        width={text('width', '120px')}\\n        menuIsOpen={boolean('menuIsOpen', false)}\\n        iconButtonDetails={array('iconList', [\\n          'hide-menu-box',\\n          'More',\\n          'angle-down'\\n        ])}\\n        primary={boolean('primary', false)}\\n        intent={text('intent', 'page') as tIntent}\\n        onChange={action('Value Changed')}\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\n        disabled={boolean('disabled', false)}\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\n        tooltipProps={{\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\n        }}\\n      />\\n    </Box>\\n  </ThemeWrapper>\\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\nexport const TextDropdown = addSourceDecorator(() => (\\n  <ThemeWrapper>\\n    <Box p='2em' bgColor='grey.50'>\\n      <IconDropdown\\n        variant={text('varaint', 'text-dropdown') as tSelectVariant}\\n        optionList={object('optionList', ListViewOption)}\\n        width={text('width', '120px')}\\n        menuIsOpen={boolean('menuIsOpen', false)}\\n        iconButtonDetails={array('iconList', [\\n          'hide-menu-box',\\n          'More',\\n          'angle-down'\\n        ])}\\n        primary={boolean('primary', false)}\\n        intent={text('intent', 'page') as tIntent}\\n        onChange={action('Value Changed')}\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\n        disabled={boolean('disabled', false)}\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\n        tooltipProps={{\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\n        }}\\n      />\\n    </Box>\\n  </ThemeWrapper>\\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nexport const MultiLevelBreadCrumb = addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='2em' bgColor='grey.50'>\\n        <IconDropdown\\n          variant={text('variant', 'multilevel-breadcrumb') as tSelectVariant}\\n          optionList={object('optionList', MultiLevelListViewOption)}\\n          onChange={action('Value selected')}\\n          value={text('value', 'strawberry')}\\n          width={text('width', '260px')}\\n        />\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n  }, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nexport const MultiLevelButtonDropdown = addSourceDecorator(() => (\\n  <ThemeWrapper>\\n    <Box p='2em' bgColor='grey.50'>\\n      <IconDropdown\\n        variant={\\n          text('varaint', 'multilevel-button-dropdown') as tSelectVariant\\n        }\\n        optionList={object('optionList', MultiLevelListViewOption)}\\n        width={text('width', '120px')}\\n        menuIsOpen\\n        iconButtonDetails={array('iconList', [\\n          'hide-menu-box',\\n          'More',\\n          'angle-down'\\n        ])}\\n        defaultOpen='right'\\n        primary={boolean('primary', false)}\\n        intent={text('intent', 'page') as tIntent}\\n        handleClick={(id: any) => console.log('clicked from storybook', id)}\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\n        disabled={boolean('disabled', false)}\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\n        tooltipProps={{\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\n        }}\\n      />\\n    </Box>\\n  </ThemeWrapper>\\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nexport const PaginationDropdown = addSourceDecorator(() => (\\n  <ThemeWrapper>\\n    <CardComponent style={{ height: '300px' }}>\\n      <IconDropdown\\n        variant={text('variant', 'pagination-size') as tSelectVariant}\\n        optionList={object('optionList', paginationOptions)}\\n        onChange={action('Value selected')}\\n        value={text('value', '50')}\\n        width={text('width', '120px')}\\n      />\\n    </CardComponent>\\n  </ThemeWrapper>\\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nexport const columnOptionComponent = addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='2em' bgColor='grey.50'>\\n        <div style={{ width: '200px', margin: 'auto' }}>\\n          <IconDropdown\\n            variant={text('variant', 'column-filter') as tSelectVariant}\\n            optionList={object('optionList', columnOption)}\\n            onChange={action('Value selected')}\\n            width={text('width', '10px')}\\n            isSingleClickOption={boolean('isSingleClickOption', true)}\\n          />\\n        </div>\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nexport const BreadCrumbComponent = addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='2em' bgColor='grey.50'>\\n        <IconDropdown\\n          variant={text('variant', 'bread-crumb') as tSelectVariant}\\n          optionList={object('optionList', options)}\\n          onChange={action('Value selected')}\\n          value={text('value', 'strawberry')}\\n          width={text('width', '260px')}\\n        />\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nexport const DatePickerDropDown = addSourceDecorator(() => (\\n  <ThemeWrapper>\\n    <CardComponent style={{ height: '200px' }}>\\n      <IconDropdown\\n        variant={text('variant', 'date-picker') as tSelectVariant}\\n        optionList={object('optionList', datePickerOptions)}\\n        onChange={action('Value selected')}\\n        value={text('value', '50')}\\n        width={text('width', '80px')}\\n        showDownArrow={boolean('Show Down Arrow', true)}\\n        isMultiRegionStyled={boolean('Is Multi Region Styled', false)}\\n      />\\n    </CardComponent>\\n  </ThemeWrapper>\\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\nconst arrayMap = [\\n  { variant: 'column-filter', name: 'column-filter0' },\\n  { variant: 'column-filter', name: 'column-filter1' },\\n  { variant: 'column-filter', name: 'column-filter2' }\\n]\\n\\nexport const columnOptionList = addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='2em' bgColor='grey.50'>\\n        <div style={{ width: '200px', margin: 'auto' }}>\\n          {arrayMap.map((obj: any, index: number) => {\\n            return (\\n              <IconDropdown\\n                variant={text('variant', obj?.variant) as tSelectVariant}\\n                optionList={object('optionList', columnOption)}\\n                onChange={action('Value selected')}\\n                width={text('width', '10px')}\\n                isSingleClickOption={boolean('isSingleClickOption', true)}\\n                key={index}\\n              />\\n            )\\n          })}\\n        </div>\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nexport const DropdownUniversal = addSourceDecorator(() => {\\n  // reference to style\\n  // const theme = useContext(ThemeContext)\\n  // const borderBottom = `1px solid ${theme?.colors?.grey['A800']}`\\n  // const customStyle = {\\n  //   control: (provided: any) => ({\\n  //     ...provided,\\n  //     borderStyle: 'none',\\n  //     borderBottom,\\n  //     borderRadius: '0px',\\n  //     boxShadow: 'none',\\n  //     borderColor: theme?.colors?.grey?.A800,\\n  //     '&:focus': {\\n  //       borderStyle: 'none',\\n  //       borderBottom,\\n  //       boxShadow: 'none',\\n  //       borderColor: theme?.colors?.grey?.A800\\n  //     },\\n  //     '&:hover': {\\n  //       borderStyle: 'none',\\n  //       borderBottom,\\n  //       boxShadow: 'none',\\n  //       borderColor: theme?.colors?.grey?.A800\\n  //     }\\n  //   }),\\n  //   option: (provided: any, state: any) => ({\\n  //     ...provided,\\n  //     backgroundColor: state?.isSelected\\n  //       ? theme?.colors?.primary?.main\\n  //       : theme?.colors?.white,\\n  //     '&:hover': {\\n  //       backgroundColor: state?.isSelected\\n  //         ? theme?.colors?.primary?.main\\n  //         : theme?.colors?.grey['50']\\n  //     }\\n  //   }),\\n\\n  //   menu: (provided: any, state: any) => ({\\n  //     ...provided,\\n  //     backgroundColor: state?.isSelected\\n  //       ? theme.colors.primary.main\\n  //       : theme?.colors?.white,\\n  //     borderRadius: '2px',\\n  //     '&:hover': {\\n  //       backgroundColor: state?.isSelected\\n  //         ? theme?.colors?.primary?.main\\n  //         : theme?.colors?.white\\n  //     },\\n  //     marginTop: '5px',\\n  //     marginLeft: '16px',\\n  //     width: '90%'\\n  //   }),\\n  //   menuList: (provided: any) => ({\\n  //     ...provided,\\n  //     marginTop: '0px'\\n  //   }),\\n  //   valueContainer: (provided: any) => ({\\n  //     ...provided,\\n  //     padding: '0px'\\n  //   })\\n  // }\\n  return (\\n    <ThemeWrapper>\\n      <Box p='2em' bgColor='grey.50'>\\n        <IconDropdown\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\n          optionList={object('optionList', ListViewOption)}\\n          width={text('width', '120px')}\\n          menuIsOpen={boolean('menuIsOpen', false)}\\n          primary={boolean('primary', false)}\\n          intent={text('intent', 'page') as tIntent}\\n          onChange={action('Value Changed')}\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\n          disabled={boolean('disabled', false)}\\n          value='available'\\n          optionComponent={({ selectedOption }: any) => {\\n            return (\\n              <div>\\n                <div>{selectedOption?.color}</div>\\n                <div>{selectedOption?.label}</div>\\n              </div>\\n            )\\n          }}\\n          // customStyle={customStyle}\\n        >\\n          {({\\n            selectedOption,\\n            menuIsOpen,\\n            setMenuIsOpen\\n          }: IUniversalDropdownChildren) => {\\n            return (\\n              <Button\\n                onClick={() => {\\n                  setMenuIsOpen(!menuIsOpen)\\n                  action('Universal open/closed')(menuIsOpen)\\n                }}\\n                color={text('color', 'white')}\\n                bgColor={text('bgColor', 'black')}\\n                fullWidth={boolean('fullWidth', false)}\\n              >\\n                {selectedOption?.label}\\n              </Button>\\n            )\\n          }}\\n        </IconDropdown>\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nexport const TextFieldDropdown = addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='2em' bgColor='grey.50'>\\n        <IconDropdown\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\n          optionList={object('optionList', ListViewOption)}\\n          width={text('width', '120px')}\\n          menuIsOpen={boolean('menuIsOpen', false)}\\n          primary={boolean('primary', false)}\\n          intent={text('intent', 'page') as tIntent}\\n          onChange={action('Value Changed')}\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\n          disabled={boolean('disabled', false)}\\n          value='available'\\n          optionComponent={({ selectedOption }: any) => {\\n            return (\\n              <div>\\n                <div>{selectedOption?.color}</div>\\n                <div>{selectedOption?.label}</div>\\n              </div>\\n            )\\n          }}\\n          // customStyle={customStyle}\\n        >\\n          {({\\n            selectedOption,\\n            menuIsOpen,\\n            setMenuIsOpen\\n          }: IUniversalDropdownChildren) => {\\n            return (\\n              <TextInput\\n                id='someId'\\n                name='someName'\\n                className='someClassName'\\n                label={text('label', 'Username')}\\n                labelColor={text('labelColor', 'text.inputLabel.default')}\\n                placeholder={text('placeholder', 'Enter text here...')}\\n                maxLength={number('maxLength', 10)}\\n                error={boolean('error', false)}\\n                errorMessage={text('errorMessage', '')}\\n                required={boolean('required', false)}\\n                fullWidth={boolean('fullWidth', false)}\\n                onChange={action('Triggered: onChange')}\\n                onClick={() => {\\n                  setMenuIsOpen(!menuIsOpen)\\n                  action('universal open/closed')(menuIsOpen)\\n                }}\\n                value={selectedOption?.value}\\n              />\\n            )\\n          }}\\n        </IconDropdown>\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\";\n// @ts-ignore\nvar __ADDS_MAP__ = {};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = \"/IconDropdown.stories.tsx\";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \n\n/* eslint-disable */\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\n// @ts-ignore\nvar addSourceDecorator = require(\"@storybook/source-loader/preview\").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = \"/Users/farhanansari/Code/ui-library/src/components/molecules/IconDropdown\";\n// @ts-ignore\nvar __STORY__ = \"import { action } from '@storybook/addon-actions'\\nimport {\\n  array,\\n  boolean,\\n  number,\\n  object,\\n  text,\\n  withKnobs\\n} from '@storybook/addon-knobs'\\nimport React from 'react'\\nimport IconDropdown from '.'\\nimport { path } from '..'\\nimport { Box } from '../../..'\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\nimport Button, { tIntent } from '../../atoms/Button'\\nimport CardComponent from '../../atoms/Card'\\nimport { tPlacement } from '../../../utilities/types'\\nimport {\\n  IUniversalDropdownChildren,\\n  tSelectVariant\\n} from '../DropDown/interface'\\nimport TextInput from '../TextInput'\\n\\nexport default {\\n  title: `${path}/IconDropdown`,\\n  decorators: [withKnobs],\\n  component: IconDropdown\\n}\\n\\nconst ListViewOption = [\\n  {\\n    value: 'available',\\n    label: 'Mark As Available',\\n    color: 'blue',\\n    tooltipText: 'Mark As Available',\\n    isDisabled: true\\n  },\\n  {\\n    value: 'unavailable',\\n    label: 'Mark As Unavailable',\\n    color: 'red',\\n    tooltipText: 'Mark As Unavailable'\\n  },\\n  {\\n    value: 'active',\\n    label: 'Mark As Active',\\n    color: 'purple',\\n    tooltipText: 'Mark As Active'\\n  },\\n  {\\n    value: 'inactive',\\n    label: 'Mark As Inactive',\\n    color: 'green',\\n    tooltipText: 'Mark As Inactive'\\n  }\\n]\\n\\nconst MultiLevelListViewOption = [\\n  {\\n    id: 'available',\\n    value: 'available',\\n    label: 'Mark As Available',\\n    color: 'blue',\\n    tooltipText: 'Mark As Available',\\n    options: [\\n      {\\n        id: 'available',\\n        value: 'available',\\n        label: 'Mark As Child Available',\\n        color: 'blue',\\n        tooltipText: 'Mark As Child Available'\\n      },\\n      {\\n        id: 'unavailable',\\n        value: 'unavailable',\\n        label: 'Mark As Child Unavailable',\\n        color: 'red',\\n        tooltipText: 'Mark As Child Unavailable'\\n      },\\n      {\\n        id: 'active',\\n        value: 'active',\\n        label: 'Mark As Child Active',\\n        color: 'purple',\\n        tooltipText: 'Mark As Child Active'\\n      },\\n      {\\n        id: 'inactive',\\n        value: 'inactive',\\n        label: 'Mark As Child Inactive',\\n        color: 'green',\\n        tooltipText: 'Mark As Child Inactive',\\n        options: [\\n          {\\n            id: 'available',\\n            value: 'available',\\n            label: 'Mark As Grand Child Available',\\n            color: 'blue',\\n            tooltipText: 'Mark As Grand Child Available'\\n          },\\n          {\\n            id: 'unavailable',\\n            value: 'unavailable',\\n            label: 'Mark As Grand Child Unavailable',\\n            color: 'red',\\n            tooltipText: 'Mark As Grand Child Unavailable'\\n          }\\n        ]\\n      }\\n    ]\\n  },\\n  {\\n    id: 'unavailable',\\n    value: 'unavailable',\\n    label: 'Mark As Unavailable',\\n    color: 'red',\\n    tooltipText: 'Mark As Unavailable'\\n  },\\n  {\\n    id: 'active',\\n    value: 'active',\\n    label: 'Mark As Active',\\n    color: 'purple',\\n    tooltipText: 'Mark As Active'\\n  },\\n  {\\n    id: 'inactive',\\n    value: 'inactive',\\n    label: 'Mark As Inactive',\\n    color: 'green',\\n    tooltipText: 'Mark As Inactive'\\n  }\\n]\\n\\nconst paginationOptions = [\\n  { value: '25', label: '25 per page', title: '25 per page' },\\n  { value: '50', label: '50 per page', title: '50 per page' },\\n  { value: '100', label: '100 per page', title: '100 per page' },\\n  { value: '200', label: '200 per page', title: '200 per page' }\\n]\\n\\nconst columnOption = [\\n  { value: 'ascending', label: 'Sort Ascending', iconVariant: 'hide-menu-box' },\\n  {\\n    value: 'descending',\\n    label: 'Sort Descending',\\n    iconVariant: 'hub-location'\\n  },\\n  { value: 'hideColumn', label: 'Hide Column', iconVariant: 'close' },\\n  { value: 'pinLeft', label: 'Pin Left', iconVariant: 'angle-left' },\\n  { value: 'pinright', label: 'Pin Right', iconVariant: 'angle-right-thin' }\\n]\\n\\nconst options = [\\n  {\\n    value: 'emailVerificationPending',\\n    label: 'Email Verification Pending Shipper'\\n  },\\n  { value: 'allShippers', label: 'All Shippers' },\\n  { value: 'approvalPendingShippers', label: 'Approval Pending Shippers' }\\n]\\n\\nconst datePickerOptions = [\\n  { value: 'January', label: 'January' },\\n  { value: 'February', label: 'February' },\\n  { value: 'March', label: 'March' },\\n  { value: 'April', label: 'April' },\\n  { value: 'May', label: 'May' },\\n  { value: 'June', label: 'June' },\\n  { value: 'July', label: 'July' },\\n  { value: 'August', label: 'August' },\\n  { value: 'September', label: 'September' },\\n  { value: 'October', label: 'October' },\\n  { value: 'November', label: 'November' },\\n  { value: 'December', label: 'December' }\\n]\\n\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\nexport const ButtonDropdown = () => (\\n  <ThemeWrapper>\\n    <Box p='2em' bgColor='grey.50'>\\n      <IconDropdown\\n        variant={text('varaint', 'button-dropdown') as tSelectVariant}\\n        optionList={object('optionList', ListViewOption)}\\n        width={text('width', '120px')}\\n        menuIsOpen={boolean('menuIsOpen', false)}\\n        iconButtonDetails={array('iconList', [\\n          'hide-menu-box',\\n          'More',\\n          'angle-down'\\n        ])}\\n        primary={boolean('primary', false)}\\n        intent={text('intent', 'page') as tIntent}\\n        onChange={action('Value Changed')}\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\n        disabled={boolean('disabled', false)}\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\n        tooltipProps={{\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\n        }}\\n      />\\n    </Box>\\n  </ThemeWrapper>\\n)\\n\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\nexport const TextDropdown = () => (\\n  <ThemeWrapper>\\n    <Box p='2em' bgColor='grey.50'>\\n      <IconDropdown\\n        variant={text('varaint', 'text-dropdown') as tSelectVariant}\\n        optionList={object('optionList', ListViewOption)}\\n        width={text('width', '120px')}\\n        menuIsOpen={boolean('menuIsOpen', false)}\\n        iconButtonDetails={array('iconList', [\\n          'hide-menu-box',\\n          'More',\\n          'angle-down'\\n        ])}\\n        primary={boolean('primary', false)}\\n        intent={text('intent', 'page') as tIntent}\\n        onChange={action('Value Changed')}\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\n        disabled={boolean('disabled', false)}\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\n        tooltipProps={{\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\n        }}\\n      />\\n    </Box>\\n  </ThemeWrapper>\\n)\\n\\nexport const MultiLevelBreadCrumb = () => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='2em' bgColor='grey.50'>\\n        <IconDropdown\\n          variant={text('variant', 'multilevel-breadcrumb') as tSelectVariant}\\n          optionList={object('optionList', MultiLevelListViewOption)}\\n          onChange={action('Value selected')}\\n          value={text('value', 'strawberry')}\\n          width={text('width', '260px')}\\n        />\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n  }\\n\\nexport const MultiLevelButtonDropdown = () => (\\n  <ThemeWrapper>\\n    <Box p='2em' bgColor='grey.50'>\\n      <IconDropdown\\n        variant={\\n          text('varaint', 'multilevel-button-dropdown') as tSelectVariant\\n        }\\n        optionList={object('optionList', MultiLevelListViewOption)}\\n        width={text('width', '120px')}\\n        menuIsOpen\\n        iconButtonDetails={array('iconList', [\\n          'hide-menu-box',\\n          'More',\\n          'angle-down'\\n        ])}\\n        defaultOpen='right'\\n        primary={boolean('primary', false)}\\n        intent={text('intent', 'page') as tIntent}\\n        handleClick={(id: any) => console.log('clicked from storybook', id)}\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\n        disabled={boolean('disabled', false)}\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\n        tooltipProps={{\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\n        }}\\n      />\\n    </Box>\\n  </ThemeWrapper>\\n)\\n\\nexport const PaginationDropdown = () => (\\n  <ThemeWrapper>\\n    <CardComponent style={{ height: '300px' }}>\\n      <IconDropdown\\n        variant={text('variant', 'pagination-size') as tSelectVariant}\\n        optionList={object('optionList', paginationOptions)}\\n        onChange={action('Value selected')}\\n        value={text('value', '50')}\\n        width={text('width', '120px')}\\n      />\\n    </CardComponent>\\n  </ThemeWrapper>\\n)\\n\\nexport const columnOptionComponent = () => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='2em' bgColor='grey.50'>\\n        <div style={{ width: '200px', margin: 'auto' }}>\\n          <IconDropdown\\n            variant={text('variant', 'column-filter') as tSelectVariant}\\n            optionList={object('optionList', columnOption)}\\n            onChange={action('Value selected')}\\n            width={text('width', '10px')}\\n            isSingleClickOption={boolean('isSingleClickOption', true)}\\n          />\\n        </div>\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}\\n\\nexport const BreadCrumbComponent = () => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='2em' bgColor='grey.50'>\\n        <IconDropdown\\n          variant={text('variant', 'bread-crumb') as tSelectVariant}\\n          optionList={object('optionList', options)}\\n          onChange={action('Value selected')}\\n          value={text('value', 'strawberry')}\\n          width={text('width', '260px')}\\n        />\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}\\n\\nexport const DatePickerDropDown = () => (\\n  <ThemeWrapper>\\n    <CardComponent style={{ height: '200px' }}>\\n      <IconDropdown\\n        variant={text('variant', 'date-picker') as tSelectVariant}\\n        optionList={object('optionList', datePickerOptions)}\\n        onChange={action('Value selected')}\\n        value={text('value', '50')}\\n        width={text('width', '80px')}\\n        showDownArrow={boolean('Show Down Arrow', true)}\\n        isMultiRegionStyled={boolean('Is Multi Region Styled', false)}\\n      />\\n    </CardComponent>\\n  </ThemeWrapper>\\n)\\nconst arrayMap = [\\n  { variant: 'column-filter', name: 'column-filter0' },\\n  { variant: 'column-filter', name: 'column-filter1' },\\n  { variant: 'column-filter', name: 'column-filter2' }\\n]\\n\\nexport const columnOptionList = () => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='2em' bgColor='grey.50'>\\n        <div style={{ width: '200px', margin: 'auto' }}>\\n          {arrayMap.map((obj: any, index: number) => {\\n            return (\\n              <IconDropdown\\n                variant={text('variant', obj?.variant) as tSelectVariant}\\n                optionList={object('optionList', columnOption)}\\n                onChange={action('Value selected')}\\n                width={text('width', '10px')}\\n                isSingleClickOption={boolean('isSingleClickOption', true)}\\n                key={index}\\n              />\\n            )\\n          })}\\n        </div>\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}\\n\\nexport const DropdownUniversal = () => {\\n  // reference to style\\n  // const theme = useContext(ThemeContext)\\n  // const borderBottom = `1px solid ${theme?.colors?.grey['A800']}`\\n  // const customStyle = {\\n  //   control: (provided: any) => ({\\n  //     ...provided,\\n  //     borderStyle: 'none',\\n  //     borderBottom,\\n  //     borderRadius: '0px',\\n  //     boxShadow: 'none',\\n  //     borderColor: theme?.colors?.grey?.A800,\\n  //     '&:focus': {\\n  //       borderStyle: 'none',\\n  //       borderBottom,\\n  //       boxShadow: 'none',\\n  //       borderColor: theme?.colors?.grey?.A800\\n  //     },\\n  //     '&:hover': {\\n  //       borderStyle: 'none',\\n  //       borderBottom,\\n  //       boxShadow: 'none',\\n  //       borderColor: theme?.colors?.grey?.A800\\n  //     }\\n  //   }),\\n  //   option: (provided: any, state: any) => ({\\n  //     ...provided,\\n  //     backgroundColor: state?.isSelected\\n  //       ? theme?.colors?.primary?.main\\n  //       : theme?.colors?.white,\\n  //     '&:hover': {\\n  //       backgroundColor: state?.isSelected\\n  //         ? theme?.colors?.primary?.main\\n  //         : theme?.colors?.grey['50']\\n  //     }\\n  //   }),\\n\\n  //   menu: (provided: any, state: any) => ({\\n  //     ...provided,\\n  //     backgroundColor: state?.isSelected\\n  //       ? theme.colors.primary.main\\n  //       : theme?.colors?.white,\\n  //     borderRadius: '2px',\\n  //     '&:hover': {\\n  //       backgroundColor: state?.isSelected\\n  //         ? theme?.colors?.primary?.main\\n  //         : theme?.colors?.white\\n  //     },\\n  //     marginTop: '5px',\\n  //     marginLeft: '16px',\\n  //     width: '90%'\\n  //   }),\\n  //   menuList: (provided: any) => ({\\n  //     ...provided,\\n  //     marginTop: '0px'\\n  //   }),\\n  //   valueContainer: (provided: any) => ({\\n  //     ...provided,\\n  //     padding: '0px'\\n  //   })\\n  // }\\n  return (\\n    <ThemeWrapper>\\n      <Box p='2em' bgColor='grey.50'>\\n        <IconDropdown\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\n          optionList={object('optionList', ListViewOption)}\\n          width={text('width', '120px')}\\n          menuIsOpen={boolean('menuIsOpen', false)}\\n          primary={boolean('primary', false)}\\n          intent={text('intent', 'page') as tIntent}\\n          onChange={action('Value Changed')}\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\n          disabled={boolean('disabled', false)}\\n          value='available'\\n          optionComponent={({ selectedOption }: any) => {\\n            return (\\n              <div>\\n                <div>{selectedOption?.color}</div>\\n                <div>{selectedOption?.label}</div>\\n              </div>\\n            )\\n          }}\\n          // customStyle={customStyle}\\n        >\\n          {({\\n            selectedOption,\\n            menuIsOpen,\\n            setMenuIsOpen\\n          }: IUniversalDropdownChildren) => {\\n            return (\\n              <Button\\n                onClick={() => {\\n                  setMenuIsOpen(!menuIsOpen)\\n                  action('Universal open/closed')(menuIsOpen)\\n                }}\\n                color={text('color', 'white')}\\n                bgColor={text('bgColor', 'black')}\\n                fullWidth={boolean('fullWidth', false)}\\n              >\\n                {selectedOption?.label}\\n              </Button>\\n            )\\n          }}\\n        </IconDropdown>\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}\\n\\nexport const TextFieldDropdown = () => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='2em' bgColor='grey.50'>\\n        <IconDropdown\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\n          optionList={object('optionList', ListViewOption)}\\n          width={text('width', '120px')}\\n          menuIsOpen={boolean('menuIsOpen', false)}\\n          primary={boolean('primary', false)}\\n          intent={text('intent', 'page') as tIntent}\\n          onChange={action('Value Changed')}\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\n          disabled={boolean('disabled', false)}\\n          value='available'\\n          optionComponent={({ selectedOption }: any) => {\\n            return (\\n              <div>\\n                <div>{selectedOption?.color}</div>\\n                <div>{selectedOption?.label}</div>\\n              </div>\\n            )\\n          }}\\n          // customStyle={customStyle}\\n        >\\n          {({\\n            selectedOption,\\n            menuIsOpen,\\n            setMenuIsOpen\\n          }: IUniversalDropdownChildren) => {\\n            return (\\n              <TextInput\\n                id='someId'\\n                name='someName'\\n                className='someClassName'\\n                label={text('label', 'Username')}\\n                labelColor={text('labelColor', 'text.inputLabel.default')}\\n                placeholder={text('placeholder', 'Enter text here...')}\\n                maxLength={number('maxLength', 10)}\\n                error={boolean('error', false)}\\n                errorMessage={text('errorMessage', '')}\\n                required={boolean('required', false)}\\n                fullWidth={boolean('fullWidth', false)}\\n                onChange={action('Triggered: onChange')}\\n                onClick={() => {\\n                  setMenuIsOpen(!menuIsOpen)\\n                  action('universal open/closed')(menuIsOpen)\\n                }}\\n                value={selectedOption?.value}\\n              />\\n            )\\n          }}\\n        </IconDropdown>\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}\\n\";\n// @ts-ignore\nvar __ADDS_MAP__ = {};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = \"/IconDropdown.stories.tsx\";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \nimport { action } from '@storybook/addon-actions'\nimport {\n  array,\n  boolean,\n  number,\n  object,\n  text,\n  withKnobs\n} from '@storybook/addon-knobs'\nimport React from 'react'\nimport IconDropdown from '.'\nimport { path } from '..'\nimport { Box } from '../../..'\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\nimport Button, { tIntent } from '../../atoms/Button'\nimport CardComponent from '../../atoms/Card'\nimport { tPlacement } from '../../../utilities/types'\nimport {\n  IUniversalDropdownChildren,\n  tSelectVariant\n} from '../DropDown/interface'\nimport TextInput from '../TextInput'\n\nexport default {parameters: {\"storySource\":{\"source\":\"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/farhanansari/Code/ui-library/src/components/molecules/IconDropdown\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"\\\\n\\\\n// @ts-nocheck\\\\n// @ts-ignore\\\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\\\n// @ts-ignore\\\\nvar addSourceDecorator = require(\\\\\\\"@storybook/source-loader/preview\\\\\\\").addSource;\\\\n// @ts-ignore\\\\nvar __SOURCE_PREFIX__ = \\\\\\\"/Users/farhanansari/Code/ui-library/src/components/molecules/IconDropdown\\\\\\\";\\\\n// @ts-ignore\\\\nvar __STORY__ = \\\\\\\"import { action } from '@storybook/addon-actions'\\\\\\\\nimport {\\\\\\\\n  array,\\\\\\\\n  boolean,\\\\\\\\n  number,\\\\\\\\n  object,\\\\\\\\n  text,\\\\\\\\n  withKnobs\\\\\\\\n} from '@storybook/addon-knobs'\\\\\\\\nimport React from 'react'\\\\\\\\nimport IconDropdown from '.'\\\\\\\\nimport { path } from '..'\\\\\\\\nimport { Box } from '../../..'\\\\\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\\\\\nimport Button, { tIntent } from '../../atoms/Button'\\\\\\\\nimport CardComponent from '../../atoms/Card'\\\\\\\\nimport { tPlacement } from '../../../utilities/types'\\\\\\\\nimport {\\\\\\\\n  IUniversalDropdownChildren,\\\\\\\\n  tSelectVariant\\\\\\\\n} from '../DropDown/interface'\\\\\\\\nimport TextInput from '../TextInput'\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/IconDropdown`,\\\\\\\\n  decorators: [withKnobs],\\\\\\\\n  component: IconDropdown\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst ListViewOption = [\\\\\\\\n  {\\\\\\\\n    value: 'available',\\\\\\\\n    label: 'Mark As Available',\\\\\\\\n    color: 'blue',\\\\\\\\n    tooltipText: 'Mark As Available',\\\\\\\\n    isDisabled: true\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    value: 'unavailable',\\\\\\\\n    label: 'Mark As Unavailable',\\\\\\\\n    color: 'red',\\\\\\\\n    tooltipText: 'Mark As Unavailable'\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    value: 'active',\\\\\\\\n    label: 'Mark As Active',\\\\\\\\n    color: 'purple',\\\\\\\\n    tooltipText: 'Mark As Active'\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    value: 'inactive',\\\\\\\\n    label: 'Mark As Inactive',\\\\\\\\n    color: 'green',\\\\\\\\n    tooltipText: 'Mark As Inactive'\\\\\\\\n  }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst MultiLevelListViewOption = [\\\\\\\\n  {\\\\\\\\n    id: 'available',\\\\\\\\n    value: 'available',\\\\\\\\n    label: 'Mark As Available',\\\\\\\\n    color: 'blue',\\\\\\\\n    tooltipText: 'Mark As Available',\\\\\\\\n    options: [\\\\\\\\n      {\\\\\\\\n        id: 'available',\\\\\\\\n        value: 'available',\\\\\\\\n        label: 'Mark As Child Available',\\\\\\\\n        color: 'blue',\\\\\\\\n        tooltipText: 'Mark As Child Available'\\\\\\\\n      },\\\\\\\\n      {\\\\\\\\n        id: 'unavailable',\\\\\\\\n        value: 'unavailable',\\\\\\\\n        label: 'Mark As Child Unavailable',\\\\\\\\n        color: 'red',\\\\\\\\n        tooltipText: 'Mark As Child Unavailable'\\\\\\\\n      },\\\\\\\\n      {\\\\\\\\n        id: 'active',\\\\\\\\n        value: 'active',\\\\\\\\n        label: 'Mark As Child Active',\\\\\\\\n        color: 'purple',\\\\\\\\n        tooltipText: 'Mark As Child Active'\\\\\\\\n      },\\\\\\\\n      {\\\\\\\\n        id: 'inactive',\\\\\\\\n        value: 'inactive',\\\\\\\\n        label: 'Mark As Child Inactive',\\\\\\\\n        color: 'green',\\\\\\\\n        tooltipText: 'Mark As Child Inactive',\\\\\\\\n        options: [\\\\\\\\n          {\\\\\\\\n            id: 'available',\\\\\\\\n            value: 'available',\\\\\\\\n            label: 'Mark As Grand Child Available',\\\\\\\\n            color: 'blue',\\\\\\\\n            tooltipText: 'Mark As Grand Child Available'\\\\\\\\n          },\\\\\\\\n          {\\\\\\\\n            id: 'unavailable',\\\\\\\\n            value: 'unavailable',\\\\\\\\n            label: 'Mark As Grand Child Unavailable',\\\\\\\\n            color: 'red',\\\\\\\\n            tooltipText: 'Mark As Grand Child Unavailable'\\\\\\\\n          }\\\\\\\\n        ]\\\\\\\\n      }\\\\\\\\n    ]\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    id: 'unavailable',\\\\\\\\n    value: 'unavailable',\\\\\\\\n    label: 'Mark As Unavailable',\\\\\\\\n    color: 'red',\\\\\\\\n    tooltipText: 'Mark As Unavailable'\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    id: 'active',\\\\\\\\n    value: 'active',\\\\\\\\n    label: 'Mark As Active',\\\\\\\\n    color: 'purple',\\\\\\\\n    tooltipText: 'Mark As Active'\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    id: 'inactive',\\\\\\\\n    value: 'inactive',\\\\\\\\n    label: 'Mark As Inactive',\\\\\\\\n    color: 'green',\\\\\\\\n    tooltipText: 'Mark As Inactive'\\\\\\\\n  }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst paginationOptions = [\\\\\\\\n  { value: '25', label: '25 per page', title: '25 per page' },\\\\\\\\n  { value: '50', label: '50 per page', title: '50 per page' },\\\\\\\\n  { value: '100', label: '100 per page', title: '100 per page' },\\\\\\\\n  { value: '200', label: '200 per page', title: '200 per page' }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst columnOption = [\\\\\\\\n  { value: 'ascending', label: 'Sort Ascending', iconVariant: 'hide-menu-box' },\\\\\\\\n  {\\\\\\\\n    value: 'descending',\\\\\\\\n    label: 'Sort Descending',\\\\\\\\n    iconVariant: 'hub-location'\\\\\\\\n  },\\\\\\\\n  { value: 'hideColumn', label: 'Hide Column', iconVariant: 'close' },\\\\\\\\n  { value: 'pinLeft', label: 'Pin Left', iconVariant: 'angle-left' },\\\\\\\\n  { value: 'pinright', label: 'Pin Right', iconVariant: 'angle-right-thin' }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst options = [\\\\\\\\n  {\\\\\\\\n    value: 'emailVerificationPending',\\\\\\\\n    label: 'Email Verification Pending Shipper'\\\\\\\\n  },\\\\\\\\n  { value: 'allShippers', label: 'All Shippers' },\\\\\\\\n  { value: 'approvalPendingShippers', label: 'Approval Pending Shippers' }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst datePickerOptions = [\\\\\\\\n  { value: 'January', label: 'January' },\\\\\\\\n  { value: 'February', label: 'February' },\\\\\\\\n  { value: 'March', label: 'March' },\\\\\\\\n  { value: 'April', label: 'April' },\\\\\\\\n  { value: 'May', label: 'May' },\\\\\\\\n  { value: 'June', label: 'June' },\\\\\\\\n  { value: 'July', label: 'July' },\\\\\\\\n  { value: 'August', label: 'August' },\\\\\\\\n  { value: 'September', label: 'September' },\\\\\\\\n  { value: 'October', label: 'October' },\\\\\\\\n  { value: 'November', label: 'November' },\\\\\\\\n  { value: 'December', label: 'December' }\\\\\\\\n]\\\\\\\\n\\\\\\\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\\\\\\\nexport const ButtonDropdown = () => (\\\\\\\\n  <ThemeWrapper>\\\\\\\\n    <Box p='2em' bgColor='grey.50'>\\\\\\\\n      <IconDropdown\\\\\\\\n        variant={text('varaint', 'button-dropdown') as tSelectVariant}\\\\\\\\n        optionList={object('optionList', ListViewOption)}\\\\\\\\n        width={text('width', '120px')}\\\\\\\\n        menuIsOpen={boolean('menuIsOpen', false)}\\\\\\\\n        iconButtonDetails={array('iconList', [\\\\\\\\n          'hide-menu-box',\\\\\\\\n          'More',\\\\\\\\n          'angle-down'\\\\\\\\n        ])}\\\\\\\\n        primary={boolean('primary', false)}\\\\\\\\n        intent={text('intent', 'page') as tIntent}\\\\\\\\n        onChange={action('Value Changed')}\\\\\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n        disabled={boolean('disabled', false)}\\\\\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\\\\\n        tooltipProps={{\\\\\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </Box>\\\\\\\\n  </ThemeWrapper>\\\\\\\\n)\\\\\\\\n\\\\\\\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\\\\\\\nexport const TextDropdown = () => (\\\\\\\\n  <ThemeWrapper>\\\\\\\\n    <Box p='2em' bgColor='grey.50'>\\\\\\\\n      <IconDropdown\\\\\\\\n        variant={text('varaint', 'text-dropdown') as tSelectVariant}\\\\\\\\n        optionList={object('optionList', ListViewOption)}\\\\\\\\n        width={text('width', '120px')}\\\\\\\\n        menuIsOpen={boolean('menuIsOpen', false)}\\\\\\\\n        iconButtonDetails={array('iconList', [\\\\\\\\n          'hide-menu-box',\\\\\\\\n          'More',\\\\\\\\n          'angle-down'\\\\\\\\n        ])}\\\\\\\\n        primary={boolean('primary', false)}\\\\\\\\n        intent={text('intent', 'page') as tIntent}\\\\\\\\n        onChange={action('Value Changed')}\\\\\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n        disabled={boolean('disabled', false)}\\\\\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\\\\\n        tooltipProps={{\\\\\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </Box>\\\\\\\\n  </ThemeWrapper>\\\\\\\\n)\\\\\\\\n\\\\\\\\nexport const MultiLevelBreadCrumb = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='2em' bgColor='grey.50'>\\\\\\\\n        <IconDropdown\\\\\\\\n          variant={text('variant', 'multilevel-breadcrumb') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', MultiLevelListViewOption)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          value={text('value', 'strawberry')}\\\\\\\\n          width={text('width', '260px')}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n  }\\\\\\\\n\\\\\\\\nexport const MultiLevelButtonDropdown = () => (\\\\\\\\n  <ThemeWrapper>\\\\\\\\n    <Box p='2em' bgColor='grey.50'>\\\\\\\\n      <IconDropdown\\\\\\\\n        variant={\\\\\\\\n          text('varaint', 'multilevel-button-dropdown') as tSelectVariant\\\\\\\\n        }\\\\\\\\n        optionList={object('optionList', MultiLevelListViewOption)}\\\\\\\\n        width={text('width', '120px')}\\\\\\\\n        menuIsOpen\\\\\\\\n        iconButtonDetails={array('iconList', [\\\\\\\\n          'hide-menu-box',\\\\\\\\n          'More',\\\\\\\\n          'angle-down'\\\\\\\\n        ])}\\\\\\\\n        defaultOpen='right'\\\\\\\\n        primary={boolean('primary', false)}\\\\\\\\n        intent={text('intent', 'page') as tIntent}\\\\\\\\n        handleClick={(id: any) => console.log('clicked from storybook', id)}\\\\\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n        disabled={boolean('disabled', false)}\\\\\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\\\\\n        tooltipProps={{\\\\\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </Box>\\\\\\\\n  </ThemeWrapper>\\\\\\\\n)\\\\\\\\n\\\\\\\\nexport const PaginationDropdown = () => (\\\\\\\\n  <ThemeWrapper>\\\\\\\\n    <CardComponent style={{ height: '300px' }}>\\\\\\\\n      <IconDropdown\\\\\\\\n        variant={text('variant', 'pagination-size') as tSelectVariant}\\\\\\\\n        optionList={object('optionList', paginationOptions)}\\\\\\\\n        onChange={action('Value selected')}\\\\\\\\n        value={text('value', '50')}\\\\\\\\n        width={text('width', '120px')}\\\\\\\\n      />\\\\\\\\n    </CardComponent>\\\\\\\\n  </ThemeWrapper>\\\\\\\\n)\\\\\\\\n\\\\\\\\nexport const columnOptionComponent = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='2em' bgColor='grey.50'>\\\\\\\\n        <div style={{ width: '200px', margin: 'auto' }}>\\\\\\\\n          <IconDropdown\\\\\\\\n            variant={text('variant', 'column-filter') as tSelectVariant}\\\\\\\\n            optionList={object('optionList', columnOption)}\\\\\\\\n            onChange={action('Value selected')}\\\\\\\\n            width={text('width', '10px')}\\\\\\\\n            isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n          />\\\\\\\\n        </div>\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const BreadCrumbComponent = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='2em' bgColor='grey.50'>\\\\\\\\n        <IconDropdown\\\\\\\\n          variant={text('variant', 'bread-crumb') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', options)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          value={text('value', 'strawberry')}\\\\\\\\n          width={text('width', '260px')}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const DatePickerDropDown = () => (\\\\\\\\n  <ThemeWrapper>\\\\\\\\n    <CardComponent style={{ height: '200px' }}>\\\\\\\\n      <IconDropdown\\\\\\\\n        variant={text('variant', 'date-picker') as tSelectVariant}\\\\\\\\n        optionList={object('optionList', datePickerOptions)}\\\\\\\\n        onChange={action('Value selected')}\\\\\\\\n        value={text('value', '50')}\\\\\\\\n        width={text('width', '80px')}\\\\\\\\n        showDownArrow={boolean('Show Down Arrow', true)}\\\\\\\\n        isMultiRegionStyled={boolean('Is Multi Region Styled', false)}\\\\\\\\n      />\\\\\\\\n    </CardComponent>\\\\\\\\n  </ThemeWrapper>\\\\\\\\n)\\\\\\\\nconst arrayMap = [\\\\\\\\n  { variant: 'column-filter', name: 'column-filter0' },\\\\\\\\n  { variant: 'column-filter', name: 'column-filter1' },\\\\\\\\n  { variant: 'column-filter', name: 'column-filter2' }\\\\\\\\n]\\\\\\\\n\\\\\\\\nexport const columnOptionList = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='2em' bgColor='grey.50'>\\\\\\\\n        <div style={{ width: '200px', margin: 'auto' }}>\\\\\\\\n          {arrayMap.map((obj: any, index: number) => {\\\\\\\\n            return (\\\\\\\\n              <IconDropdown\\\\\\\\n                variant={text('variant', obj?.variant) as tSelectVariant}\\\\\\\\n                optionList={object('optionList', columnOption)}\\\\\\\\n                onChange={action('Value selected')}\\\\\\\\n                width={text('width', '10px')}\\\\\\\\n                isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n                key={index}\\\\\\\\n              />\\\\\\\\n            )\\\\\\\\n          })}\\\\\\\\n        </div>\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const DropdownUniversal = () => {\\\\\\\\n  // reference to style\\\\\\\\n  // const theme = useContext(ThemeContext)\\\\\\\\n  // const borderBottom = `1px solid ${theme?.colors?.grey['A800']}`\\\\\\\\n  // const customStyle = {\\\\\\\\n  //   control: (provided: any) => ({\\\\\\\\n  //     ...provided,\\\\\\\\n  //     borderStyle: 'none',\\\\\\\\n  //     borderBottom,\\\\\\\\n  //     borderRadius: '0px',\\\\\\\\n  //     boxShadow: 'none',\\\\\\\\n  //     borderColor: theme?.colors?.grey?.A800,\\\\\\\\n  //     '&:focus': {\\\\\\\\n  //       borderStyle: 'none',\\\\\\\\n  //       borderBottom,\\\\\\\\n  //       boxShadow: 'none',\\\\\\\\n  //       borderColor: theme?.colors?.grey?.A800\\\\\\\\n  //     },\\\\\\\\n  //     '&:hover': {\\\\\\\\n  //       borderStyle: 'none',\\\\\\\\n  //       borderBottom,\\\\\\\\n  //       boxShadow: 'none',\\\\\\\\n  //       borderColor: theme?.colors?.grey?.A800\\\\\\\\n  //     }\\\\\\\\n  //   }),\\\\\\\\n  //   option: (provided: any, state: any) => ({\\\\\\\\n  //     ...provided,\\\\\\\\n  //     backgroundColor: state?.isSelected\\\\\\\\n  //       ? theme?.colors?.primary?.main\\\\\\\\n  //       : theme?.colors?.white,\\\\\\\\n  //     '&:hover': {\\\\\\\\n  //       backgroundColor: state?.isSelected\\\\\\\\n  //         ? theme?.colors?.primary?.main\\\\\\\\n  //         : theme?.colors?.grey['50']\\\\\\\\n  //     }\\\\\\\\n  //   }),\\\\\\\\n\\\\\\\\n  //   menu: (provided: any, state: any) => ({\\\\\\\\n  //     ...provided,\\\\\\\\n  //     backgroundColor: state?.isSelected\\\\\\\\n  //       ? theme.colors.primary.main\\\\\\\\n  //       : theme?.colors?.white,\\\\\\\\n  //     borderRadius: '2px',\\\\\\\\n  //     '&:hover': {\\\\\\\\n  //       backgroundColor: state?.isSelected\\\\\\\\n  //         ? theme?.colors?.primary?.main\\\\\\\\n  //         : theme?.colors?.white\\\\\\\\n  //     },\\\\\\\\n  //     marginTop: '5px',\\\\\\\\n  //     marginLeft: '16px',\\\\\\\\n  //     width: '90%'\\\\\\\\n  //   }),\\\\\\\\n  //   menuList: (provided: any) => ({\\\\\\\\n  //     ...provided,\\\\\\\\n  //     marginTop: '0px'\\\\\\\\n  //   }),\\\\\\\\n  //   valueContainer: (provided: any) => ({\\\\\\\\n  //     ...provided,\\\\\\\\n  //     padding: '0px'\\\\\\\\n  //   })\\\\\\\\n  // }\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='2em' bgColor='grey.50'>\\\\\\\\n        <IconDropdown\\\\\\\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', ListViewOption)}\\\\\\\\n          width={text('width', '120px')}\\\\\\\\n          menuIsOpen={boolean('menuIsOpen', false)}\\\\\\\\n          primary={boolean('primary', false)}\\\\\\\\n          intent={text('intent', 'page') as tIntent}\\\\\\\\n          onChange={action('Value Changed')}\\\\\\\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n          value='available'\\\\\\\\n          optionComponent={({ selectedOption }: any) => {\\\\\\\\n            return (\\\\\\\\n              <div>\\\\\\\\n                <div>{selectedOption?.color}</div>\\\\\\\\n                <div>{selectedOption?.label}</div>\\\\\\\\n              </div>\\\\\\\\n            )\\\\\\\\n          }}\\\\\\\\n          // customStyle={customStyle}\\\\\\\\n        >\\\\\\\\n          {({\\\\\\\\n            selectedOption,\\\\\\\\n            menuIsOpen,\\\\\\\\n            setMenuIsOpen\\\\\\\\n          }: IUniversalDropdownChildren) => {\\\\\\\\n            return (\\\\\\\\n              <Button\\\\\\\\n                onClick={() => {\\\\\\\\n                  setMenuIsOpen(!menuIsOpen)\\\\\\\\n                  action('Universal open/closed')(menuIsOpen)\\\\\\\\n                }}\\\\\\\\n                color={text('color', 'white')}\\\\\\\\n                bgColor={text('bgColor', 'black')}\\\\\\\\n                fullWidth={boolean('fullWidth', false)}\\\\\\\\n              >\\\\\\\\n                {selectedOption?.label}\\\\\\\\n              </Button>\\\\\\\\n            )\\\\\\\\n          }}\\\\\\\\n        </IconDropdown>\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const TextFieldDropdown = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='2em' bgColor='grey.50'>\\\\\\\\n        <IconDropdown\\\\\\\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', ListViewOption)}\\\\\\\\n          width={text('width', '120px')}\\\\\\\\n          menuIsOpen={boolean('menuIsOpen', false)}\\\\\\\\n          primary={boolean('primary', false)}\\\\\\\\n          intent={text('intent', 'page') as tIntent}\\\\\\\\n          onChange={action('Value Changed')}\\\\\\\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n          value='available'\\\\\\\\n          optionComponent={({ selectedOption }: any) => {\\\\\\\\n            return (\\\\\\\\n              <div>\\\\\\\\n                <div>{selectedOption?.color}</div>\\\\\\\\n                <div>{selectedOption?.label}</div>\\\\\\\\n              </div>\\\\\\\\n            )\\\\\\\\n          }}\\\\\\\\n          // customStyle={customStyle}\\\\\\\\n        >\\\\\\\\n          {({\\\\\\\\n            selectedOption,\\\\\\\\n            menuIsOpen,\\\\\\\\n            setMenuIsOpen\\\\\\\\n          }: IUniversalDropdownChildren) => {\\\\\\\\n            return (\\\\\\\\n              <TextInput\\\\\\\\n                id='someId'\\\\\\\\n                name='someName'\\\\\\\\n                className='someClassName'\\\\\\\\n                label={text('label', 'Username')}\\\\\\\\n                labelColor={text('labelColor', 'text.inputLabel.default')}\\\\\\\\n                placeholder={text('placeholder', 'Enter text here...')}\\\\\\\\n                maxLength={number('maxLength', 10)}\\\\\\\\n                error={boolean('error', false)}\\\\\\\\n                errorMessage={text('errorMessage', '')}\\\\\\\\n                required={boolean('required', false)}\\\\\\\\n                fullWidth={boolean('fullWidth', false)}\\\\\\\\n                onChange={action('Triggered: onChange')}\\\\\\\\n                onClick={() => {\\\\\\\\n                  setMenuIsOpen(!menuIsOpen)\\\\\\\\n                  action('universal open/closed')(menuIsOpen)\\\\\\\\n                }}\\\\\\\\n                value={selectedOption?.value}\\\\\\\\n              />\\\\\\\\n            )\\\\\\\\n          }}\\\\\\\\n        </IconDropdown>\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\";\\\\n// @ts-ignore\\\\nvar __ADDS_MAP__ = {};\\\\n// @ts-ignore\\\\nvar __MAIN_FILE_LOCATION__ = \\\\\\\"/IconDropdown.stories.tsx\\\\\\\";\\\\n// @ts-ignore\\\\nvar __MODULE_DEPENDENCIES__ = [];\\\\n// @ts-ignore\\\\nvar __LOCAL_DEPENDENCIES__ = {};\\\\n// @ts-ignore\\\\nvar __IDS_TO_FRAMEWORKS__ = {};\\\\n        \\\\nimport { action } from '@storybook/addon-actions'\\\\nimport {\\\\n  array,\\\\n  boolean,\\\\n  number,\\\\n  object,\\\\n  text,\\\\n  withKnobs\\\\n} from '@storybook/addon-knobs'\\\\nimport React from 'react'\\\\nimport IconDropdown from '.'\\\\nimport { path } from '..'\\\\nimport { Box } from '../../..'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport Button, { tIntent } from '../../atoms/Button'\\\\nimport CardComponent from '../../atoms/Card'\\\\nimport { tPlacement } from '../../../utilities/types'\\\\nimport {\\\\n  IUniversalDropdownChildren,\\\\n  tSelectVariant\\\\n} from '../DropDown/interface'\\\\nimport TextInput from '../TextInput'\\\\n\\\\nexport default {parameters: {\\\\\\\"storySource\\\\\\\":{\\\\\\\"source\\\\\\\":\\\\\\\"import { action } from '@storybook/addon-actions'\\\\\\\\nimport {\\\\\\\\n  array,\\\\\\\\n  boolean,\\\\\\\\n  number,\\\\\\\\n  object,\\\\\\\\n  text,\\\\\\\\n  withKnobs\\\\\\\\n} from '@storybook/addon-knobs'\\\\\\\\nimport React from 'react'\\\\\\\\nimport IconDropdown from '.'\\\\\\\\nimport { path } from '..'\\\\\\\\nimport { Box } from '../../..'\\\\\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\\\\\nimport Button, { tIntent } from '../../atoms/Button'\\\\\\\\nimport CardComponent from '../../atoms/Card'\\\\\\\\nimport { tPlacement } from '../../../utilities/types'\\\\\\\\nimport {\\\\\\\\n  IUniversalDropdownChildren,\\\\\\\\n  tSelectVariant\\\\\\\\n} from '../DropDown/interface'\\\\\\\\nimport TextInput from '../TextInput'\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/IconDropdown`,\\\\\\\\n  decorators: [withKnobs],\\\\\\\\n  component: IconDropdown\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst ListViewOption = [\\\\\\\\n  {\\\\\\\\n    value: 'available',\\\\\\\\n    label: 'Mark As Available',\\\\\\\\n    color: 'blue',\\\\\\\\n    tooltipText: 'Mark As Available',\\\\\\\\n    isDisabled: true\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    value: 'unavailable',\\\\\\\\n    label: 'Mark As Unavailable',\\\\\\\\n    color: 'red',\\\\\\\\n    tooltipText: 'Mark As Unavailable'\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    value: 'active',\\\\\\\\n    label: 'Mark As Active',\\\\\\\\n    color: 'purple',\\\\\\\\n    tooltipText: 'Mark As Active'\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    value: 'inactive',\\\\\\\\n    label: 'Mark As Inactive',\\\\\\\\n    color: 'green',\\\\\\\\n    tooltipText: 'Mark As Inactive'\\\\\\\\n  }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst MultiLevelListViewOption = [\\\\\\\\n  {\\\\\\\\n    id: 'available',\\\\\\\\n    value: 'available',\\\\\\\\n    label: 'Mark As Available',\\\\\\\\n    color: 'blue',\\\\\\\\n    tooltipText: 'Mark As Available',\\\\\\\\n    options: [\\\\\\\\n      {\\\\\\\\n        id: 'available',\\\\\\\\n        value: 'available',\\\\\\\\n        label: 'Mark As Child Available',\\\\\\\\n        color: 'blue',\\\\\\\\n        tooltipText: 'Mark As Child Available'\\\\\\\\n      },\\\\\\\\n      {\\\\\\\\n        id: 'unavailable',\\\\\\\\n        value: 'unavailable',\\\\\\\\n        label: 'Mark As Child Unavailable',\\\\\\\\n        color: 'red',\\\\\\\\n        tooltipText: 'Mark As Child Unavailable'\\\\\\\\n      },\\\\\\\\n      {\\\\\\\\n        id: 'active',\\\\\\\\n        value: 'active',\\\\\\\\n        label: 'Mark As Child Active',\\\\\\\\n        color: 'purple',\\\\\\\\n        tooltipText: 'Mark As Child Active'\\\\\\\\n      },\\\\\\\\n      {\\\\\\\\n        id: 'inactive',\\\\\\\\n        value: 'inactive',\\\\\\\\n        label: 'Mark As Child Inactive',\\\\\\\\n        color: 'green',\\\\\\\\n        tooltipText: 'Mark As Child Inactive',\\\\\\\\n        options: [\\\\\\\\n          {\\\\\\\\n            id: 'available',\\\\\\\\n            value: 'available',\\\\\\\\n            label: 'Mark As Grand Child Available',\\\\\\\\n            color: 'blue',\\\\\\\\n            tooltipText: 'Mark As Grand Child Available'\\\\\\\\n          },\\\\\\\\n          {\\\\\\\\n            id: 'unavailable',\\\\\\\\n            value: 'unavailable',\\\\\\\\n            label: 'Mark As Grand Child Unavailable',\\\\\\\\n            color: 'red',\\\\\\\\n            tooltipText: 'Mark As Grand Child Unavailable'\\\\\\\\n          }\\\\\\\\n        ]\\\\\\\\n      }\\\\\\\\n    ]\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    id: 'unavailable',\\\\\\\\n    value: 'unavailable',\\\\\\\\n    label: 'Mark As Unavailable',\\\\\\\\n    color: 'red',\\\\\\\\n    tooltipText: 'Mark As Unavailable'\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    id: 'active',\\\\\\\\n    value: 'active',\\\\\\\\n    label: 'Mark As Active',\\\\\\\\n    color: 'purple',\\\\\\\\n    tooltipText: 'Mark As Active'\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    id: 'inactive',\\\\\\\\n    value: 'inactive',\\\\\\\\n    label: 'Mark As Inactive',\\\\\\\\n    color: 'green',\\\\\\\\n    tooltipText: 'Mark As Inactive'\\\\\\\\n  }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst paginationOptions = [\\\\\\\\n  { value: '25', label: '25 per page', title: '25 per page' },\\\\\\\\n  { value: '50', label: '50 per page', title: '50 per page' },\\\\\\\\n  { value: '100', label: '100 per page', title: '100 per page' },\\\\\\\\n  { value: '200', label: '200 per page', title: '200 per page' }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst columnOption = [\\\\\\\\n  { value: 'ascending', label: 'Sort Ascending', iconVariant: 'hide-menu-box' },\\\\\\\\n  {\\\\\\\\n    value: 'descending',\\\\\\\\n    label: 'Sort Descending',\\\\\\\\n    iconVariant: 'hub-location'\\\\\\\\n  },\\\\\\\\n  { value: 'hideColumn', label: 'Hide Column', iconVariant: 'close' },\\\\\\\\n  { value: 'pinLeft', label: 'Pin Left', iconVariant: 'angle-left' },\\\\\\\\n  { value: 'pinright', label: 'Pin Right', iconVariant: 'angle-right-thin' }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst options = [\\\\\\\\n  {\\\\\\\\n    value: 'emailVerificationPending',\\\\\\\\n    label: 'Email Verification Pending Shipper'\\\\\\\\n  },\\\\\\\\n  { value: 'allShippers', label: 'All Shippers' },\\\\\\\\n  { value: 'approvalPendingShippers', label: 'Approval Pending Shippers' }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst datePickerOptions = [\\\\\\\\n  { value: 'January', label: 'January' },\\\\\\\\n  { value: 'February', label: 'February' },\\\\\\\\n  { value: 'March', label: 'March' },\\\\\\\\n  { value: 'April', label: 'April' },\\\\\\\\n  { value: 'May', label: 'May' },\\\\\\\\n  { value: 'June', label: 'June' },\\\\\\\\n  { value: 'July', label: 'July' },\\\\\\\\n  { value: 'August', label: 'August' },\\\\\\\\n  { value: 'September', label: 'September' },\\\\\\\\n  { value: 'October', label: 'October' },\\\\\\\\n  { value: 'November', label: 'November' },\\\\\\\\n  { value: 'December', label: 'December' }\\\\\\\\n]\\\\\\\\n\\\\\\\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\\\\\\\nexport const ButtonDropdown = () => (\\\\\\\\n  <ThemeWrapper>\\\\\\\\n    <Box p='2em' bgColor='grey.50'>\\\\\\\\n      <IconDropdown\\\\\\\\n        variant={text('varaint', 'button-dropdown') as tSelectVariant}\\\\\\\\n        optionList={object('optionList', ListViewOption)}\\\\\\\\n        width={text('width', '120px')}\\\\\\\\n        menuIsOpen={boolean('menuIsOpen', false)}\\\\\\\\n        iconButtonDetails={array('iconList', [\\\\\\\\n          'hide-menu-box',\\\\\\\\n          'More',\\\\\\\\n          'angle-down'\\\\\\\\n        ])}\\\\\\\\n        primary={boolean('primary', false)}\\\\\\\\n        intent={text('intent', 'page') as tIntent}\\\\\\\\n        onChange={action('Value Changed')}\\\\\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n        disabled={boolean('disabled', false)}\\\\\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\\\\\n        tooltipProps={{\\\\\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </Box>\\\\\\\\n  </ThemeWrapper>\\\\\\\\n)\\\\\\\\n\\\\\\\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\\\\\\\nexport const TextDropdown = () => (\\\\\\\\n  <ThemeWrapper>\\\\\\\\n    <Box p='2em' bgColor='grey.50'>\\\\\\\\n      <IconDropdown\\\\\\\\n        variant={text('varaint', 'text-dropdown') as tSelectVariant}\\\\\\\\n        optionList={object('optionList', ListViewOption)}\\\\\\\\n        width={text('width', '120px')}\\\\\\\\n        menuIsOpen={boolean('menuIsOpen', false)}\\\\\\\\n        iconButtonDetails={array('iconList', [\\\\\\\\n          'hide-menu-box',\\\\\\\\n          'More',\\\\\\\\n          'angle-down'\\\\\\\\n        ])}\\\\\\\\n        primary={boolean('primary', false)}\\\\\\\\n        intent={text('intent', 'page') as tIntent}\\\\\\\\n        onChange={action('Value Changed')}\\\\\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n        disabled={boolean('disabled', false)}\\\\\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\\\\\n        tooltipProps={{\\\\\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </Box>\\\\\\\\n  </ThemeWrapper>\\\\\\\\n)\\\\\\\\n\\\\\\\\nexport const MultiLevelBreadCrumb = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='2em' bgColor='grey.50'>\\\\\\\\n        <IconDropdown\\\\\\\\n          variant={text('variant', 'multilevel-breadcrumb') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', MultiLevelListViewOption)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          value={text('value', 'strawberry')}\\\\\\\\n          width={text('width', '260px')}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n  }\\\\\\\\n\\\\\\\\nexport const MultiLevelButtonDropdown = () => (\\\\\\\\n  <ThemeWrapper>\\\\\\\\n    <Box p='2em' bgColor='grey.50'>\\\\\\\\n      <IconDropdown\\\\\\\\n        variant={\\\\\\\\n          text('varaint', 'multilevel-button-dropdown') as tSelectVariant\\\\\\\\n        }\\\\\\\\n        optionList={object('optionList', MultiLevelListViewOption)}\\\\\\\\n        width={text('width', '120px')}\\\\\\\\n        menuIsOpen\\\\\\\\n        iconButtonDetails={array('iconList', [\\\\\\\\n          'hide-menu-box',\\\\\\\\n          'More',\\\\\\\\n          'angle-down'\\\\\\\\n        ])}\\\\\\\\n        defaultOpen='right'\\\\\\\\n        primary={boolean('primary', false)}\\\\\\\\n        intent={text('intent', 'page') as tIntent}\\\\\\\\n        handleClick={(id: any) => console.log('clicked from storybook', id)}\\\\\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n        disabled={boolean('disabled', false)}\\\\\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\\\\\n        tooltipProps={{\\\\\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </Box>\\\\\\\\n  </ThemeWrapper>\\\\\\\\n)\\\\\\\\n\\\\\\\\nexport const PaginationDropdown = () => (\\\\\\\\n  <ThemeWrapper>\\\\\\\\n    <CardComponent style={{ height: '300px' }}>\\\\\\\\n      <IconDropdown\\\\\\\\n        variant={text('variant', 'pagination-size') as tSelectVariant}\\\\\\\\n        optionList={object('optionList', paginationOptions)}\\\\\\\\n        onChange={action('Value selected')}\\\\\\\\n        value={text('value', '50')}\\\\\\\\n        width={text('width', '120px')}\\\\\\\\n      />\\\\\\\\n    </CardComponent>\\\\\\\\n  </ThemeWrapper>\\\\\\\\n)\\\\\\\\n\\\\\\\\nexport const columnOptionComponent = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='2em' bgColor='grey.50'>\\\\\\\\n        <div style={{ width: '200px', margin: 'auto' }}>\\\\\\\\n          <IconDropdown\\\\\\\\n            variant={text('variant', 'column-filter') as tSelectVariant}\\\\\\\\n            optionList={object('optionList', columnOption)}\\\\\\\\n            onChange={action('Value selected')}\\\\\\\\n            width={text('width', '10px')}\\\\\\\\n            isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n          />\\\\\\\\n        </div>\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const BreadCrumbComponent = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='2em' bgColor='grey.50'>\\\\\\\\n        <IconDropdown\\\\\\\\n          variant={text('variant', 'bread-crumb') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', options)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          value={text('value', 'strawberry')}\\\\\\\\n          width={text('width', '260px')}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const DatePickerDropDown = () => (\\\\\\\\n  <ThemeWrapper>\\\\\\\\n    <CardComponent style={{ height: '200px' }}>\\\\\\\\n      <IconDropdown\\\\\\\\n        variant={text('variant', 'date-picker') as tSelectVariant}\\\\\\\\n        optionList={object('optionList', datePickerOptions)}\\\\\\\\n        onChange={action('Value selected')}\\\\\\\\n        value={text('value', '50')}\\\\\\\\n        width={text('width', '80px')}\\\\\\\\n        showDownArrow={boolean('Show Down Arrow', true)}\\\\\\\\n        isMultiRegionStyled={boolean('Is Multi Region Styled', false)}\\\\\\\\n      />\\\\\\\\n    </CardComponent>\\\\\\\\n  </ThemeWrapper>\\\\\\\\n)\\\\\\\\nconst arrayMap = [\\\\\\\\n  { variant: 'column-filter', name: 'column-filter0' },\\\\\\\\n  { variant: 'column-filter', name: 'column-filter1' },\\\\\\\\n  { variant: 'column-filter', name: 'column-filter2' }\\\\\\\\n]\\\\\\\\n\\\\\\\\nexport const columnOptionList = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='2em' bgColor='grey.50'>\\\\\\\\n        <div style={{ width: '200px', margin: 'auto' }}>\\\\\\\\n          {arrayMap.map((obj: any, index: number) => {\\\\\\\\n            return (\\\\\\\\n              <IconDropdown\\\\\\\\n                variant={text('variant', obj?.variant) as tSelectVariant}\\\\\\\\n                optionList={object('optionList', columnOption)}\\\\\\\\n                onChange={action('Value selected')}\\\\\\\\n                width={text('width', '10px')}\\\\\\\\n                isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n                key={index}\\\\\\\\n              />\\\\\\\\n            )\\\\\\\\n          })}\\\\\\\\n        </div>\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const DropdownUniversal = () => {\\\\\\\\n  // reference to style\\\\\\\\n  // const theme = useContext(ThemeContext)\\\\\\\\n  // const borderBottom = `1px solid ${theme?.colors?.grey['A800']}`\\\\\\\\n  // const customStyle = {\\\\\\\\n  //   control: (provided: any) => ({\\\\\\\\n  //     ...provided,\\\\\\\\n  //     borderStyle: 'none',\\\\\\\\n  //     borderBottom,\\\\\\\\n  //     borderRadius: '0px',\\\\\\\\n  //     boxShadow: 'none',\\\\\\\\n  //     borderColor: theme?.colors?.grey?.A800,\\\\\\\\n  //     '&:focus': {\\\\\\\\n  //       borderStyle: 'none',\\\\\\\\n  //       borderBottom,\\\\\\\\n  //       boxShadow: 'none',\\\\\\\\n  //       borderColor: theme?.colors?.grey?.A800\\\\\\\\n  //     },\\\\\\\\n  //     '&:hover': {\\\\\\\\n  //       borderStyle: 'none',\\\\\\\\n  //       borderBottom,\\\\\\\\n  //       boxShadow: 'none',\\\\\\\\n  //       borderColor: theme?.colors?.grey?.A800\\\\\\\\n  //     }\\\\\\\\n  //   }),\\\\\\\\n  //   option: (provided: any, state: any) => ({\\\\\\\\n  //     ...provided,\\\\\\\\n  //     backgroundColor: state?.isSelected\\\\\\\\n  //       ? theme?.colors?.primary?.main\\\\\\\\n  //       : theme?.colors?.white,\\\\\\\\n  //     '&:hover': {\\\\\\\\n  //       backgroundColor: state?.isSelected\\\\\\\\n  //         ? theme?.colors?.primary?.main\\\\\\\\n  //         : theme?.colors?.grey['50']\\\\\\\\n  //     }\\\\\\\\n  //   }),\\\\\\\\n\\\\\\\\n  //   menu: (provided: any, state: any) => ({\\\\\\\\n  //     ...provided,\\\\\\\\n  //     backgroundColor: state?.isSelected\\\\\\\\n  //       ? theme.colors.primary.main\\\\\\\\n  //       : theme?.colors?.white,\\\\\\\\n  //     borderRadius: '2px',\\\\\\\\n  //     '&:hover': {\\\\\\\\n  //       backgroundColor: state?.isSelected\\\\\\\\n  //         ? theme?.colors?.primary?.main\\\\\\\\n  //         : theme?.colors?.white\\\\\\\\n  //     },\\\\\\\\n  //     marginTop: '5px',\\\\\\\\n  //     marginLeft: '16px',\\\\\\\\n  //     width: '90%'\\\\\\\\n  //   }),\\\\\\\\n  //   menuList: (provided: any) => ({\\\\\\\\n  //     ...provided,\\\\\\\\n  //     marginTop: '0px'\\\\\\\\n  //   }),\\\\\\\\n  //   valueContainer: (provided: any) => ({\\\\\\\\n  //     ...provided,\\\\\\\\n  //     padding: '0px'\\\\\\\\n  //   })\\\\\\\\n  // }\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='2em' bgColor='grey.50'>\\\\\\\\n        <IconDropdown\\\\\\\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', ListViewOption)}\\\\\\\\n          width={text('width', '120px')}\\\\\\\\n          menuIsOpen={boolean('menuIsOpen', false)}\\\\\\\\n          primary={boolean('primary', false)}\\\\\\\\n          intent={text('intent', 'page') as tIntent}\\\\\\\\n          onChange={action('Value Changed')}\\\\\\\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n          value='available'\\\\\\\\n          optionComponent={({ selectedOption }: any) => {\\\\\\\\n            return (\\\\\\\\n              <div>\\\\\\\\n                <div>{selectedOption?.color}</div>\\\\\\\\n                <div>{selectedOption?.label}</div>\\\\\\\\n              </div>\\\\\\\\n            )\\\\\\\\n          }}\\\\\\\\n          // customStyle={customStyle}\\\\\\\\n        >\\\\\\\\n          {({\\\\\\\\n            selectedOption,\\\\\\\\n            menuIsOpen,\\\\\\\\n            setMenuIsOpen\\\\\\\\n          }: IUniversalDropdownChildren) => {\\\\\\\\n            return (\\\\\\\\n              <Button\\\\\\\\n                onClick={() => {\\\\\\\\n                  setMenuIsOpen(!menuIsOpen)\\\\\\\\n                  action('Universal open/closed')(menuIsOpen)\\\\\\\\n                }}\\\\\\\\n                color={text('color', 'white')}\\\\\\\\n                bgColor={text('bgColor', 'black')}\\\\\\\\n                fullWidth={boolean('fullWidth', false)}\\\\\\\\n              >\\\\\\\\n                {selectedOption?.label}\\\\\\\\n              </Button>\\\\\\\\n            )\\\\\\\\n          }}\\\\\\\\n        </IconDropdown>\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const TextFieldDropdown = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='2em' bgColor='grey.50'>\\\\\\\\n        <IconDropdown\\\\\\\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', ListViewOption)}\\\\\\\\n          width={text('width', '120px')}\\\\\\\\n          menuIsOpen={boolean('menuIsOpen', false)}\\\\\\\\n          primary={boolean('primary', false)}\\\\\\\\n          intent={text('intent', 'page') as tIntent}\\\\\\\\n          onChange={action('Value Changed')}\\\\\\\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n          value='available'\\\\\\\\n          optionComponent={({ selectedOption }: any) => {\\\\\\\\n            return (\\\\\\\\n              <div>\\\\\\\\n                <div>{selectedOption?.color}</div>\\\\\\\\n                <div>{selectedOption?.label}</div>\\\\\\\\n              </div>\\\\\\\\n            )\\\\\\\\n          }}\\\\\\\\n          // customStyle={customStyle}\\\\\\\\n        >\\\\\\\\n          {({\\\\\\\\n            selectedOption,\\\\\\\\n            menuIsOpen,\\\\\\\\n            setMenuIsOpen\\\\\\\\n          }: IUniversalDropdownChildren) => {\\\\\\\\n            return (\\\\\\\\n              <TextInput\\\\\\\\n                id='someId'\\\\\\\\n                name='someName'\\\\\\\\n                className='someClassName'\\\\\\\\n                label={text('label', 'Username')}\\\\\\\\n                labelColor={text('labelColor', 'text.inputLabel.default')}\\\\\\\\n                placeholder={text('placeholder', 'Enter text here...')}\\\\\\\\n                maxLength={number('maxLength', 10)}\\\\\\\\n                error={boolean('error', false)}\\\\\\\\n                errorMessage={text('errorMessage', '')}\\\\\\\\n                required={boolean('required', false)}\\\\\\\\n                fullWidth={boolean('fullWidth', false)}\\\\\\\\n                onChange={action('Triggered: onChange')}\\\\\\\\n                onClick={() => {\\\\\\\\n                  setMenuIsOpen(!menuIsOpen)\\\\\\\\n                  action('universal open/closed')(menuIsOpen)\\\\\\\\n                }}\\\\\\\\n                value={selectedOption?.value}\\\\\\\\n              />\\\\\\\\n            )\\\\\\\\n          }}\\\\\\\\n        </IconDropdown>\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\",\\\\\\\"locationsMap\\\\\\\":{}},},\\\\n  title: `${path}/IconDropdown`,\\\\n  decorators: [withKnobs],\\\\n  component: IconDropdown\\\\n}\\\\n\\\\nconst ListViewOption = [\\\\n  {\\\\n    value: 'available',\\\\n    label: 'Mark As Available',\\\\n    color: 'blue',\\\\n    tooltipText: 'Mark As Available',\\\\n    isDisabled: true\\\\n  },\\\\n  {\\\\n    value: 'unavailable',\\\\n    label: 'Mark As Unavailable',\\\\n    color: 'red',\\\\n    tooltipText: 'Mark As Unavailable'\\\\n  },\\\\n  {\\\\n    value: 'active',\\\\n    label: 'Mark As Active',\\\\n    color: 'purple',\\\\n    tooltipText: 'Mark As Active'\\\\n  },\\\\n  {\\\\n    value: 'inactive',\\\\n    label: 'Mark As Inactive',\\\\n    color: 'green',\\\\n    tooltipText: 'Mark As Inactive'\\\\n  }\\\\n]\\\\n\\\\nconst MultiLevelListViewOption = [\\\\n  {\\\\n    id: 'available',\\\\n    value: 'available',\\\\n    label: 'Mark As Available',\\\\n    color: 'blue',\\\\n    tooltipText: 'Mark As Available',\\\\n    options: [\\\\n      {\\\\n        id: 'available',\\\\n        value: 'available',\\\\n        label: 'Mark As Child Available',\\\\n        color: 'blue',\\\\n        tooltipText: 'Mark As Child Available'\\\\n      },\\\\n      {\\\\n        id: 'unavailable',\\\\n        value: 'unavailable',\\\\n        label: 'Mark As Child Unavailable',\\\\n        color: 'red',\\\\n        tooltipText: 'Mark As Child Unavailable'\\\\n      },\\\\n      {\\\\n        id: 'active',\\\\n        value: 'active',\\\\n        label: 'Mark As Child Active',\\\\n        color: 'purple',\\\\n        tooltipText: 'Mark As Child Active'\\\\n      },\\\\n      {\\\\n        id: 'inactive',\\\\n        value: 'inactive',\\\\n        label: 'Mark As Child Inactive',\\\\n        color: 'green',\\\\n        tooltipText: 'Mark As Child Inactive',\\\\n        options: [\\\\n          {\\\\n            id: 'available',\\\\n            value: 'available',\\\\n            label: 'Mark As Grand Child Available',\\\\n            color: 'blue',\\\\n            tooltipText: 'Mark As Grand Child Available'\\\\n          },\\\\n          {\\\\n            id: 'unavailable',\\\\n            value: 'unavailable',\\\\n            label: 'Mark As Grand Child Unavailable',\\\\n            color: 'red',\\\\n            tooltipText: 'Mark As Grand Child Unavailable'\\\\n          }\\\\n        ]\\\\n      }\\\\n    ]\\\\n  },\\\\n  {\\\\n    id: 'unavailable',\\\\n    value: 'unavailable',\\\\n    label: 'Mark As Unavailable',\\\\n    color: 'red',\\\\n    tooltipText: 'Mark As Unavailable'\\\\n  },\\\\n  {\\\\n    id: 'active',\\\\n    value: 'active',\\\\n    label: 'Mark As Active',\\\\n    color: 'purple',\\\\n    tooltipText: 'Mark As Active'\\\\n  },\\\\n  {\\\\n    id: 'inactive',\\\\n    value: 'inactive',\\\\n    label: 'Mark As Inactive',\\\\n    color: 'green',\\\\n    tooltipText: 'Mark As Inactive'\\\\n  }\\\\n]\\\\n\\\\nconst paginationOptions = [\\\\n  { value: '25', label: '25 per page', title: '25 per page' },\\\\n  { value: '50', label: '50 per page', title: '50 per page' },\\\\n  { value: '100', label: '100 per page', title: '100 per page' },\\\\n  { value: '200', label: '200 per page', title: '200 per page' }\\\\n]\\\\n\\\\nconst columnOption = [\\\\n  { value: 'ascending', label: 'Sort Ascending', iconVariant: 'hide-menu-box' },\\\\n  {\\\\n    value: 'descending',\\\\n    label: 'Sort Descending',\\\\n    iconVariant: 'hub-location'\\\\n  },\\\\n  { value: 'hideColumn', label: 'Hide Column', iconVariant: 'close' },\\\\n  { value: 'pinLeft', label: 'Pin Left', iconVariant: 'angle-left' },\\\\n  { value: 'pinright', label: 'Pin Right', iconVariant: 'angle-right-thin' }\\\\n]\\\\n\\\\nconst options = [\\\\n  {\\\\n    value: 'emailVerificationPending',\\\\n    label: 'Email Verification Pending Shipper'\\\\n  },\\\\n  { value: 'allShippers', label: 'All Shippers' },\\\\n  { value: 'approvalPendingShippers', label: 'Approval Pending Shippers' }\\\\n]\\\\n\\\\nconst datePickerOptions = [\\\\n  { value: 'January', label: 'January' },\\\\n  { value: 'February', label: 'February' },\\\\n  { value: 'March', label: 'March' },\\\\n  { value: 'April', label: 'April' },\\\\n  { value: 'May', label: 'May' },\\\\n  { value: 'June', label: 'June' },\\\\n  { value: 'July', label: 'July' },\\\\n  { value: 'August', label: 'August' },\\\\n  { value: 'September', label: 'September' },\\\\n  { value: 'October', label: 'October' },\\\\n  { value: 'November', label: 'November' },\\\\n  { value: 'December', label: 'December' }\\\\n]\\\\n\\\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\\\nexport const ButtonDropdown = addSourceDecorator(() => (\\\\n  <ThemeWrapper>\\\\n    <Box p='2em' bgColor='grey.50'>\\\\n      <IconDropdown\\\\n        variant={text('varaint', 'button-dropdown') as tSelectVariant}\\\\n        optionList={object('optionList', ListViewOption)}\\\\n        width={text('width', '120px')}\\\\n        menuIsOpen={boolean('menuIsOpen', false)}\\\\n        iconButtonDetails={array('iconList', [\\\\n          'hide-menu-box',\\\\n          'More',\\\\n          'angle-down'\\\\n        ])}\\\\n        primary={boolean('primary', false)}\\\\n        intent={text('intent', 'page') as tIntent}\\\\n        onChange={action('Value Changed')}\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n        disabled={boolean('disabled', false)}\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\n        tooltipProps={{\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\n        }}\\\\n      />\\\\n    </Box>\\\\n  </ThemeWrapper>\\\\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\\\nexport const TextDropdown = addSourceDecorator(() => (\\\\n  <ThemeWrapper>\\\\n    <Box p='2em' bgColor='grey.50'>\\\\n      <IconDropdown\\\\n        variant={text('varaint', 'text-dropdown') as tSelectVariant}\\\\n        optionList={object('optionList', ListViewOption)}\\\\n        width={text('width', '120px')}\\\\n        menuIsOpen={boolean('menuIsOpen', false)}\\\\n        iconButtonDetails={array('iconList', [\\\\n          'hide-menu-box',\\\\n          'More',\\\\n          'angle-down'\\\\n        ])}\\\\n        primary={boolean('primary', false)}\\\\n        intent={text('intent', 'page') as tIntent}\\\\n        onChange={action('Value Changed')}\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n        disabled={boolean('disabled', false)}\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\n        tooltipProps={{\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\n        }}\\\\n      />\\\\n    </Box>\\\\n  </ThemeWrapper>\\\\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const MultiLevelBreadCrumb = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <IconDropdown\\\\n          variant={text('variant', 'multilevel-breadcrumb') as tSelectVariant}\\\\n          optionList={object('optionList', MultiLevelListViewOption)}\\\\n          onChange={action('Value selected')}\\\\n          value={text('value', 'strawberry')}\\\\n          width={text('width', '260px')}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n  }, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const MultiLevelButtonDropdown = addSourceDecorator(() => (\\\\n  <ThemeWrapper>\\\\n    <Box p='2em' bgColor='grey.50'>\\\\n      <IconDropdown\\\\n        variant={\\\\n          text('varaint', 'multilevel-button-dropdown') as tSelectVariant\\\\n        }\\\\n        optionList={object('optionList', MultiLevelListViewOption)}\\\\n        width={text('width', '120px')}\\\\n        menuIsOpen\\\\n        iconButtonDetails={array('iconList', [\\\\n          'hide-menu-box',\\\\n          'More',\\\\n          'angle-down'\\\\n        ])}\\\\n        defaultOpen='right'\\\\n        primary={boolean('primary', false)}\\\\n        intent={text('intent', 'page') as tIntent}\\\\n        handleClick={(id: any) => console.log('clicked from storybook', id)}\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n        disabled={boolean('disabled', false)}\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\n        tooltipProps={{\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\n        }}\\\\n      />\\\\n    </Box>\\\\n  </ThemeWrapper>\\\\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const PaginationDropdown = addSourceDecorator(() => (\\\\n  <ThemeWrapper>\\\\n    <CardComponent style={{ height: '300px' }}>\\\\n      <IconDropdown\\\\n        variant={text('variant', 'pagination-size') as tSelectVariant}\\\\n        optionList={object('optionList', paginationOptions)}\\\\n        onChange={action('Value selected')}\\\\n        value={text('value', '50')}\\\\n        width={text('width', '120px')}\\\\n      />\\\\n    </CardComponent>\\\\n  </ThemeWrapper>\\\\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const columnOptionComponent = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <div style={{ width: '200px', margin: 'auto' }}>\\\\n          <IconDropdown\\\\n            variant={text('variant', 'column-filter') as tSelectVariant}\\\\n            optionList={object('optionList', columnOption)}\\\\n            onChange={action('Value selected')}\\\\n            width={text('width', '10px')}\\\\n            isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n          />\\\\n        </div>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const BreadCrumbComponent = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <IconDropdown\\\\n          variant={text('variant', 'bread-crumb') as tSelectVariant}\\\\n          optionList={object('optionList', options)}\\\\n          onChange={action('Value selected')}\\\\n          value={text('value', 'strawberry')}\\\\n          width={text('width', '260px')}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const DatePickerDropDown = addSourceDecorator(() => (\\\\n  <ThemeWrapper>\\\\n    <CardComponent style={{ height: '200px' }}>\\\\n      <IconDropdown\\\\n        variant={text('variant', 'date-picker') as tSelectVariant}\\\\n        optionList={object('optionList', datePickerOptions)}\\\\n        onChange={action('Value selected')}\\\\n        value={text('value', '50')}\\\\n        width={text('width', '80px')}\\\\n        showDownArrow={boolean('Show Down Arrow', true)}\\\\n        isMultiRegionStyled={boolean('Is Multi Region Styled', false)}\\\\n      />\\\\n    </CardComponent>\\\\n  </ThemeWrapper>\\\\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\nconst arrayMap = [\\\\n  { variant: 'column-filter', name: 'column-filter0' },\\\\n  { variant: 'column-filter', name: 'column-filter1' },\\\\n  { variant: 'column-filter', name: 'column-filter2' }\\\\n]\\\\n\\\\nexport const columnOptionList = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <div style={{ width: '200px', margin: 'auto' }}>\\\\n          {arrayMap.map((obj: any, index: number) => {\\\\n            return (\\\\n              <IconDropdown\\\\n                variant={text('variant', obj?.variant) as tSelectVariant}\\\\n                optionList={object('optionList', columnOption)}\\\\n                onChange={action('Value selected')}\\\\n                width={text('width', '10px')}\\\\n                isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n                key={index}\\\\n              />\\\\n            )\\\\n          })}\\\\n        </div>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const DropdownUniversal = addSourceDecorator(() => {\\\\n  // reference to style\\\\n  // const theme = useContext(ThemeContext)\\\\n  // const borderBottom = `1px solid ${theme?.colors?.grey['A800']}`\\\\n  // const customStyle = {\\\\n  //   control: (provided: any) => ({\\\\n  //     ...provided,\\\\n  //     borderStyle: 'none',\\\\n  //     borderBottom,\\\\n  //     borderRadius: '0px',\\\\n  //     boxShadow: 'none',\\\\n  //     borderColor: theme?.colors?.grey?.A800,\\\\n  //     '&:focus': {\\\\n  //       borderStyle: 'none',\\\\n  //       borderBottom,\\\\n  //       boxShadow: 'none',\\\\n  //       borderColor: theme?.colors?.grey?.A800\\\\n  //     },\\\\n  //     '&:hover': {\\\\n  //       borderStyle: 'none',\\\\n  //       borderBottom,\\\\n  //       boxShadow: 'none',\\\\n  //       borderColor: theme?.colors?.grey?.A800\\\\n  //     }\\\\n  //   }),\\\\n  //   option: (provided: any, state: any) => ({\\\\n  //     ...provided,\\\\n  //     backgroundColor: state?.isSelected\\\\n  //       ? theme?.colors?.primary?.main\\\\n  //       : theme?.colors?.white,\\\\n  //     '&:hover': {\\\\n  //       backgroundColor: state?.isSelected\\\\n  //         ? theme?.colors?.primary?.main\\\\n  //         : theme?.colors?.grey['50']\\\\n  //     }\\\\n  //   }),\\\\n\\\\n  //   menu: (provided: any, state: any) => ({\\\\n  //     ...provided,\\\\n  //     backgroundColor: state?.isSelected\\\\n  //       ? theme.colors.primary.main\\\\n  //       : theme?.colors?.white,\\\\n  //     borderRadius: '2px',\\\\n  //     '&:hover': {\\\\n  //       backgroundColor: state?.isSelected\\\\n  //         ? theme?.colors?.primary?.main\\\\n  //         : theme?.colors?.white\\\\n  //     },\\\\n  //     marginTop: '5px',\\\\n  //     marginLeft: '16px',\\\\n  //     width: '90%'\\\\n  //   }),\\\\n  //   menuList: (provided: any) => ({\\\\n  //     ...provided,\\\\n  //     marginTop: '0px'\\\\n  //   }),\\\\n  //   valueContainer: (provided: any) => ({\\\\n  //     ...provided,\\\\n  //     padding: '0px'\\\\n  //   })\\\\n  // }\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <IconDropdown\\\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          width={text('width', '120px')}\\\\n          menuIsOpen={boolean('menuIsOpen', false)}\\\\n          primary={boolean('primary', false)}\\\\n          intent={text('intent', 'page') as tIntent}\\\\n          onChange={action('Value Changed')}\\\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n          disabled={boolean('disabled', false)}\\\\n          value='available'\\\\n          optionComponent={({ selectedOption }: any) => {\\\\n            return (\\\\n              <div>\\\\n                <div>{selectedOption?.color}</div>\\\\n                <div>{selectedOption?.label}</div>\\\\n              </div>\\\\n            )\\\\n          }}\\\\n          // customStyle={customStyle}\\\\n        >\\\\n          {({\\\\n            selectedOption,\\\\n            menuIsOpen,\\\\n            setMenuIsOpen\\\\n          }: IUniversalDropdownChildren) => {\\\\n            return (\\\\n              <Button\\\\n                onClick={() => {\\\\n                  setMenuIsOpen(!menuIsOpen)\\\\n                  action('Universal open/closed')(menuIsOpen)\\\\n                }}\\\\n                color={text('color', 'white')}\\\\n                bgColor={text('bgColor', 'black')}\\\\n                fullWidth={boolean('fullWidth', false)}\\\\n              >\\\\n                {selectedOption?.label}\\\\n              </Button>\\\\n            )\\\\n          }}\\\\n        </IconDropdown>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const TextFieldDropdown = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <IconDropdown\\\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          width={text('width', '120px')}\\\\n          menuIsOpen={boolean('menuIsOpen', false)}\\\\n          primary={boolean('primary', false)}\\\\n          intent={text('intent', 'page') as tIntent}\\\\n          onChange={action('Value Changed')}\\\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n          disabled={boolean('disabled', false)}\\\\n          value='available'\\\\n          optionComponent={({ selectedOption }: any) => {\\\\n            return (\\\\n              <div>\\\\n                <div>{selectedOption?.color}</div>\\\\n                <div>{selectedOption?.label}</div>\\\\n              </div>\\\\n            )\\\\n          }}\\\\n          // customStyle={customStyle}\\\\n        >\\\\n          {({\\\\n            selectedOption,\\\\n            menuIsOpen,\\\\n            setMenuIsOpen\\\\n          }: IUniversalDropdownChildren) => {\\\\n            return (\\\\n              <TextInput\\\\n                id='someId'\\\\n                name='someName'\\\\n                className='someClassName'\\\\n                label={text('label', 'Username')}\\\\n                labelColor={text('labelColor', 'text.inputLabel.default')}\\\\n                placeholder={text('placeholder', 'Enter text here...')}\\\\n                maxLength={number('maxLength', 10)}\\\\n                error={boolean('error', false)}\\\\n                errorMessage={text('errorMessage', '')}\\\\n                required={boolean('required', false)}\\\\n                fullWidth={boolean('fullWidth', false)}\\\\n                onChange={action('Triggered: onChange')}\\\\n                onClick={() => {\\\\n                  setMenuIsOpen(!menuIsOpen)\\\\n                  action('universal open/closed')(menuIsOpen)\\\\n                }}\\\\n                value={selectedOption?.value}\\\\n              />\\\\n            )\\\\n          }}\\\\n        </IconDropdown>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/IconDropdown.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\n\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/farhanansari/Code/ui-library/src/components/molecules/IconDropdown\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"import { action } from '@storybook/addon-actions'\\\\nimport {\\\\n  array,\\\\n  boolean,\\\\n  number,\\\\n  object,\\\\n  text,\\\\n  withKnobs\\\\n} from '@storybook/addon-knobs'\\\\nimport React from 'react'\\\\nimport IconDropdown from '.'\\\\nimport { path } from '..'\\\\nimport { Box } from '../../..'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport Button, { tIntent } from '../../atoms/Button'\\\\nimport CardComponent from '../../atoms/Card'\\\\nimport { tPlacement } from '../../../utilities/types'\\\\nimport {\\\\n  IUniversalDropdownChildren,\\\\n  tSelectVariant\\\\n} from '../DropDown/interface'\\\\nimport TextInput from '../TextInput'\\\\n\\\\nexport default {\\\\n  title: `${path}/IconDropdown`,\\\\n  decorators: [withKnobs],\\\\n  component: IconDropdown\\\\n}\\\\n\\\\nconst ListViewOption = [\\\\n  {\\\\n    value: 'available',\\\\n    label: 'Mark As Available',\\\\n    color: 'blue',\\\\n    tooltipText: 'Mark As Available',\\\\n    isDisabled: true\\\\n  },\\\\n  {\\\\n    value: 'unavailable',\\\\n    label: 'Mark As Unavailable',\\\\n    color: 'red',\\\\n    tooltipText: 'Mark As Unavailable'\\\\n  },\\\\n  {\\\\n    value: 'active',\\\\n    label: 'Mark As Active',\\\\n    color: 'purple',\\\\n    tooltipText: 'Mark As Active'\\\\n  },\\\\n  {\\\\n    value: 'inactive',\\\\n    label: 'Mark As Inactive',\\\\n    color: 'green',\\\\n    tooltipText: 'Mark As Inactive'\\\\n  }\\\\n]\\\\n\\\\nconst MultiLevelListViewOption = [\\\\n  {\\\\n    id: 'available',\\\\n    value: 'available',\\\\n    label: 'Mark As Available',\\\\n    color: 'blue',\\\\n    tooltipText: 'Mark As Available',\\\\n    options: [\\\\n      {\\\\n        id: 'available',\\\\n        value: 'available',\\\\n        label: 'Mark As Child Available',\\\\n        color: 'blue',\\\\n        tooltipText: 'Mark As Child Available'\\\\n      },\\\\n      {\\\\n        id: 'unavailable',\\\\n        value: 'unavailable',\\\\n        label: 'Mark As Child Unavailable',\\\\n        color: 'red',\\\\n        tooltipText: 'Mark As Child Unavailable'\\\\n      },\\\\n      {\\\\n        id: 'active',\\\\n        value: 'active',\\\\n        label: 'Mark As Child Active',\\\\n        color: 'purple',\\\\n        tooltipText: 'Mark As Child Active'\\\\n      },\\\\n      {\\\\n        id: 'inactive',\\\\n        value: 'inactive',\\\\n        label: 'Mark As Child Inactive',\\\\n        color: 'green',\\\\n        tooltipText: 'Mark As Child Inactive',\\\\n        options: [\\\\n          {\\\\n            id: 'available',\\\\n            value: 'available',\\\\n            label: 'Mark As Grand Child Available',\\\\n            color: 'blue',\\\\n            tooltipText: 'Mark As Grand Child Available'\\\\n          },\\\\n          {\\\\n            id: 'unavailable',\\\\n            value: 'unavailable',\\\\n            label: 'Mark As Grand Child Unavailable',\\\\n            color: 'red',\\\\n            tooltipText: 'Mark As Grand Child Unavailable'\\\\n          }\\\\n        ]\\\\n      }\\\\n    ]\\\\n  },\\\\n  {\\\\n    id: 'unavailable',\\\\n    value: 'unavailable',\\\\n    label: 'Mark As Unavailable',\\\\n    color: 'red',\\\\n    tooltipText: 'Mark As Unavailable'\\\\n  },\\\\n  {\\\\n    id: 'active',\\\\n    value: 'active',\\\\n    label: 'Mark As Active',\\\\n    color: 'purple',\\\\n    tooltipText: 'Mark As Active'\\\\n  },\\\\n  {\\\\n    id: 'inactive',\\\\n    value: 'inactive',\\\\n    label: 'Mark As Inactive',\\\\n    color: 'green',\\\\n    tooltipText: 'Mark As Inactive'\\\\n  }\\\\n]\\\\n\\\\nconst paginationOptions = [\\\\n  { value: '25', label: '25 per page', title: '25 per page' },\\\\n  { value: '50', label: '50 per page', title: '50 per page' },\\\\n  { value: '100', label: '100 per page', title: '100 per page' },\\\\n  { value: '200', label: '200 per page', title: '200 per page' }\\\\n]\\\\n\\\\nconst columnOption = [\\\\n  { value: 'ascending', label: 'Sort Ascending', iconVariant: 'hide-menu-box' },\\\\n  {\\\\n    value: 'descending',\\\\n    label: 'Sort Descending',\\\\n    iconVariant: 'hub-location'\\\\n  },\\\\n  { value: 'hideColumn', label: 'Hide Column', iconVariant: 'close' },\\\\n  { value: 'pinLeft', label: 'Pin Left', iconVariant: 'angle-left' },\\\\n  { value: 'pinright', label: 'Pin Right', iconVariant: 'angle-right-thin' }\\\\n]\\\\n\\\\nconst options = [\\\\n  {\\\\n    value: 'emailVerificationPending',\\\\n    label: 'Email Verification Pending Shipper'\\\\n  },\\\\n  { value: 'allShippers', label: 'All Shippers' },\\\\n  { value: 'approvalPendingShippers', label: 'Approval Pending Shippers' }\\\\n]\\\\n\\\\nconst datePickerOptions = [\\\\n  { value: 'January', label: 'January' },\\\\n  { value: 'February', label: 'February' },\\\\n  { value: 'March', label: 'March' },\\\\n  { value: 'April', label: 'April' },\\\\n  { value: 'May', label: 'May' },\\\\n  { value: 'June', label: 'June' },\\\\n  { value: 'July', label: 'July' },\\\\n  { value: 'August', label: 'August' },\\\\n  { value: 'September', label: 'September' },\\\\n  { value: 'October', label: 'October' },\\\\n  { value: 'November', label: 'November' },\\\\n  { value: 'December', label: 'December' }\\\\n]\\\\n\\\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\\\nexport const ButtonDropdown = () => (\\\\n  <ThemeWrapper>\\\\n    <Box p='2em' bgColor='grey.50'>\\\\n      <IconDropdown\\\\n        variant={text('varaint', 'button-dropdown') as tSelectVariant}\\\\n        optionList={object('optionList', ListViewOption)}\\\\n        width={text('width', '120px')}\\\\n        menuIsOpen={boolean('menuIsOpen', false)}\\\\n        iconButtonDetails={array('iconList', [\\\\n          'hide-menu-box',\\\\n          'More',\\\\n          'angle-down'\\\\n        ])}\\\\n        primary={boolean('primary', false)}\\\\n        intent={text('intent', 'page') as tIntent}\\\\n        onChange={action('Value Changed')}\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n        disabled={boolean('disabled', false)}\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\n        tooltipProps={{\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\n        }}\\\\n      />\\\\n    </Box>\\\\n  </ThemeWrapper>\\\\n)\\\\n\\\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\\\nexport const TextDropdown = () => (\\\\n  <ThemeWrapper>\\\\n    <Box p='2em' bgColor='grey.50'>\\\\n      <IconDropdown\\\\n        variant={text('varaint', 'text-dropdown') as tSelectVariant}\\\\n        optionList={object('optionList', ListViewOption)}\\\\n        width={text('width', '120px')}\\\\n        menuIsOpen={boolean('menuIsOpen', false)}\\\\n        iconButtonDetails={array('iconList', [\\\\n          'hide-menu-box',\\\\n          'More',\\\\n          'angle-down'\\\\n        ])}\\\\n        primary={boolean('primary', false)}\\\\n        intent={text('intent', 'page') as tIntent}\\\\n        onChange={action('Value Changed')}\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n        disabled={boolean('disabled', false)}\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\n        tooltipProps={{\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\n        }}\\\\n      />\\\\n    </Box>\\\\n  </ThemeWrapper>\\\\n)\\\\n\\\\nexport const MultiLevelBreadCrumb = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <IconDropdown\\\\n          variant={text('variant', 'multilevel-breadcrumb') as tSelectVariant}\\\\n          optionList={object('optionList', MultiLevelListViewOption)}\\\\n          onChange={action('Value selected')}\\\\n          value={text('value', 'strawberry')}\\\\n          width={text('width', '260px')}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n  }\\\\n\\\\nexport const MultiLevelButtonDropdown = () => (\\\\n  <ThemeWrapper>\\\\n    <Box p='2em' bgColor='grey.50'>\\\\n      <IconDropdown\\\\n        variant={\\\\n          text('varaint', 'multilevel-button-dropdown') as tSelectVariant\\\\n        }\\\\n        optionList={object('optionList', MultiLevelListViewOption)}\\\\n        width={text('width', '120px')}\\\\n        menuIsOpen\\\\n        iconButtonDetails={array('iconList', [\\\\n          'hide-menu-box',\\\\n          'More',\\\\n          'angle-down'\\\\n        ])}\\\\n        defaultOpen='right'\\\\n        primary={boolean('primary', false)}\\\\n        intent={text('intent', 'page') as tIntent}\\\\n        handleClick={(id: any) => console.log('clicked from storybook', id)}\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n        disabled={boolean('disabled', false)}\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\n        tooltipProps={{\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\n        }}\\\\n      />\\\\n    </Box>\\\\n  </ThemeWrapper>\\\\n)\\\\n\\\\nexport const PaginationDropdown = () => (\\\\n  <ThemeWrapper>\\\\n    <CardComponent style={{ height: '300px' }}>\\\\n      <IconDropdown\\\\n        variant={text('variant', 'pagination-size') as tSelectVariant}\\\\n        optionList={object('optionList', paginationOptions)}\\\\n        onChange={action('Value selected')}\\\\n        value={text('value', '50')}\\\\n        width={text('width', '120px')}\\\\n      />\\\\n    </CardComponent>\\\\n  </ThemeWrapper>\\\\n)\\\\n\\\\nexport const columnOptionComponent = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <div style={{ width: '200px', margin: 'auto' }}>\\\\n          <IconDropdown\\\\n            variant={text('variant', 'column-filter') as tSelectVariant}\\\\n            optionList={object('optionList', columnOption)}\\\\n            onChange={action('Value selected')}\\\\n            width={text('width', '10px')}\\\\n            isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n          />\\\\n        </div>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const BreadCrumbComponent = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <IconDropdown\\\\n          variant={text('variant', 'bread-crumb') as tSelectVariant}\\\\n          optionList={object('optionList', options)}\\\\n          onChange={action('Value selected')}\\\\n          value={text('value', 'strawberry')}\\\\n          width={text('width', '260px')}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const DatePickerDropDown = () => (\\\\n  <ThemeWrapper>\\\\n    <CardComponent style={{ height: '200px' }}>\\\\n      <IconDropdown\\\\n        variant={text('variant', 'date-picker') as tSelectVariant}\\\\n        optionList={object('optionList', datePickerOptions)}\\\\n        onChange={action('Value selected')}\\\\n        value={text('value', '50')}\\\\n        width={text('width', '80px')}\\\\n        showDownArrow={boolean('Show Down Arrow', true)}\\\\n        isMultiRegionStyled={boolean('Is Multi Region Styled', false)}\\\\n      />\\\\n    </CardComponent>\\\\n  </ThemeWrapper>\\\\n)\\\\nconst arrayMap = [\\\\n  { variant: 'column-filter', name: 'column-filter0' },\\\\n  { variant: 'column-filter', name: 'column-filter1' },\\\\n  { variant: 'column-filter', name: 'column-filter2' }\\\\n]\\\\n\\\\nexport const columnOptionList = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <div style={{ width: '200px', margin: 'auto' }}>\\\\n          {arrayMap.map((obj: any, index: number) => {\\\\n            return (\\\\n              <IconDropdown\\\\n                variant={text('variant', obj?.variant) as tSelectVariant}\\\\n                optionList={object('optionList', columnOption)}\\\\n                onChange={action('Value selected')}\\\\n                width={text('width', '10px')}\\\\n                isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n                key={index}\\\\n              />\\\\n            )\\\\n          })}\\\\n        </div>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const DropdownUniversal = () => {\\\\n  // reference to style\\\\n  // const theme = useContext(ThemeContext)\\\\n  // const borderBottom = `1px solid ${theme?.colors?.grey['A800']}`\\\\n  // const customStyle = {\\\\n  //   control: (provided: any) => ({\\\\n  //     ...provided,\\\\n  //     borderStyle: 'none',\\\\n  //     borderBottom,\\\\n  //     borderRadius: '0px',\\\\n  //     boxShadow: 'none',\\\\n  //     borderColor: theme?.colors?.grey?.A800,\\\\n  //     '&:focus': {\\\\n  //       borderStyle: 'none',\\\\n  //       borderBottom,\\\\n  //       boxShadow: 'none',\\\\n  //       borderColor: theme?.colors?.grey?.A800\\\\n  //     },\\\\n  //     '&:hover': {\\\\n  //       borderStyle: 'none',\\\\n  //       borderBottom,\\\\n  //       boxShadow: 'none',\\\\n  //       borderColor: theme?.colors?.grey?.A800\\\\n  //     }\\\\n  //   }),\\\\n  //   option: (provided: any, state: any) => ({\\\\n  //     ...provided,\\\\n  //     backgroundColor: state?.isSelected\\\\n  //       ? theme?.colors?.primary?.main\\\\n  //       : theme?.colors?.white,\\\\n  //     '&:hover': {\\\\n  //       backgroundColor: state?.isSelected\\\\n  //         ? theme?.colors?.primary?.main\\\\n  //         : theme?.colors?.grey['50']\\\\n  //     }\\\\n  //   }),\\\\n\\\\n  //   menu: (provided: any, state: any) => ({\\\\n  //     ...provided,\\\\n  //     backgroundColor: state?.isSelected\\\\n  //       ? theme.colors.primary.main\\\\n  //       : theme?.colors?.white,\\\\n  //     borderRadius: '2px',\\\\n  //     '&:hover': {\\\\n  //       backgroundColor: state?.isSelected\\\\n  //         ? theme?.colors?.primary?.main\\\\n  //         : theme?.colors?.white\\\\n  //     },\\\\n  //     marginTop: '5px',\\\\n  //     marginLeft: '16px',\\\\n  //     width: '90%'\\\\n  //   }),\\\\n  //   menuList: (provided: any) => ({\\\\n  //     ...provided,\\\\n  //     marginTop: '0px'\\\\n  //   }),\\\\n  //   valueContainer: (provided: any) => ({\\\\n  //     ...provided,\\\\n  //     padding: '0px'\\\\n  //   })\\\\n  // }\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <IconDropdown\\\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          width={text('width', '120px')}\\\\n          menuIsOpen={boolean('menuIsOpen', false)}\\\\n          primary={boolean('primary', false)}\\\\n          intent={text('intent', 'page') as tIntent}\\\\n          onChange={action('Value Changed')}\\\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n          disabled={boolean('disabled', false)}\\\\n          value='available'\\\\n          optionComponent={({ selectedOption }: any) => {\\\\n            return (\\\\n              <div>\\\\n                <div>{selectedOption?.color}</div>\\\\n                <div>{selectedOption?.label}</div>\\\\n              </div>\\\\n            )\\\\n          }}\\\\n          // customStyle={customStyle}\\\\n        >\\\\n          {({\\\\n            selectedOption,\\\\n            menuIsOpen,\\\\n            setMenuIsOpen\\\\n          }: IUniversalDropdownChildren) => {\\\\n            return (\\\\n              <Button\\\\n                onClick={() => {\\\\n                  setMenuIsOpen(!menuIsOpen)\\\\n                  action('Universal open/closed')(menuIsOpen)\\\\n                }}\\\\n                color={text('color', 'white')}\\\\n                bgColor={text('bgColor', 'black')}\\\\n                fullWidth={boolean('fullWidth', false)}\\\\n              >\\\\n                {selectedOption?.label}\\\\n              </Button>\\\\n            )\\\\n          }}\\\\n        </IconDropdown>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const TextFieldDropdown = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <IconDropdown\\\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          width={text('width', '120px')}\\\\n          menuIsOpen={boolean('menuIsOpen', false)}\\\\n          primary={boolean('primary', false)}\\\\n          intent={text('intent', 'page') as tIntent}\\\\n          onChange={action('Value Changed')}\\\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n          disabled={boolean('disabled', false)}\\\\n          value='available'\\\\n          optionComponent={({ selectedOption }: any) => {\\\\n            return (\\\\n              <div>\\\\n                <div>{selectedOption?.color}</div>\\\\n                <div>{selectedOption?.label}</div>\\\\n              </div>\\\\n            )\\\\n          }}\\\\n          // customStyle={customStyle}\\\\n        >\\\\n          {({\\\\n            selectedOption,\\\\n            menuIsOpen,\\\\n            setMenuIsOpen\\\\n          }: IUniversalDropdownChildren) => {\\\\n            return (\\\\n              <TextInput\\\\n                id='someId'\\\\n                name='someName'\\\\n                className='someClassName'\\\\n                label={text('label', 'Username')}\\\\n                labelColor={text('labelColor', 'text.inputLabel.default')}\\\\n                placeholder={text('placeholder', 'Enter text here...')}\\\\n                maxLength={number('maxLength', 10)}\\\\n                error={boolean('error', false)}\\\\n                errorMessage={text('errorMessage', '')}\\\\n                required={boolean('required', false)}\\\\n                fullWidth={boolean('fullWidth', false)}\\\\n                onChange={action('Triggered: onChange')}\\\\n                onClick={() => {\\\\n                  setMenuIsOpen(!menuIsOpen)\\\\n                  action('universal open/closed')(menuIsOpen)\\\\n                }}\\\\n                value={selectedOption?.value}\\\\n              />\\\\n            )\\\\n          }}\\\\n        </IconDropdown>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/IconDropdown.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\nimport { action } from '@storybook/addon-actions'\\nimport {\\n  array,\\n  boolean,\\n  number,\\n  object,\\n  text,\\n  withKnobs\\n} from '@storybook/addon-knobs'\\nimport React from 'react'\\nimport IconDropdown from '.'\\nimport { path } from '..'\\nimport { Box } from '../../..'\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\nimport Button, { tIntent } from '../../atoms/Button'\\nimport CardComponent from '../../atoms/Card'\\nimport { tPlacement } from '../../../utilities/types'\\nimport {\\n  IUniversalDropdownChildren,\\n  tSelectVariant\\n} from '../DropDown/interface'\\nimport TextInput from '../TextInput'\\n\\nexport default {parameters: {\\\"storySource\\\":{\\\"source\\\":\\\"\\\\n\\\\n// @ts-nocheck\\\\n// @ts-ignore\\\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\\\n// @ts-ignore\\\\nvar addSourceDecorator = require(\\\\\\\"@storybook/source-loader/preview\\\\\\\").addSource;\\\\n// @ts-ignore\\\\nvar __SOURCE_PREFIX__ = \\\\\\\"/Users/farhanansari/Code/ui-library/src/components/molecules/IconDropdown\\\\\\\";\\\\n// @ts-ignore\\\\nvar __STORY__ = \\\\\\\"import { action } from '@storybook/addon-actions'\\\\\\\\nimport {\\\\\\\\n  array,\\\\\\\\n  boolean,\\\\\\\\n  number,\\\\\\\\n  object,\\\\\\\\n  text,\\\\\\\\n  withKnobs\\\\\\\\n} from '@storybook/addon-knobs'\\\\\\\\nimport React from 'react'\\\\\\\\nimport IconDropdown from '.'\\\\\\\\nimport { path } from '..'\\\\\\\\nimport { Box } from '../../..'\\\\\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\\\\\nimport Button, { tIntent } from '../../atoms/Button'\\\\\\\\nimport CardComponent from '../../atoms/Card'\\\\\\\\nimport { tPlacement } from '../../../utilities/types'\\\\\\\\nimport {\\\\\\\\n  IUniversalDropdownChildren,\\\\\\\\n  tSelectVariant\\\\\\\\n} from '../DropDown/interface'\\\\\\\\nimport TextInput from '../TextInput'\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/IconDropdown`,\\\\\\\\n  decorators: [withKnobs],\\\\\\\\n  component: IconDropdown\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst ListViewOption = [\\\\\\\\n  {\\\\\\\\n    value: 'available',\\\\\\\\n    label: 'Mark As Available',\\\\\\\\n    color: 'blue',\\\\\\\\n    tooltipText: 'Mark As Available',\\\\\\\\n    isDisabled: true\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    value: 'unavailable',\\\\\\\\n    label: 'Mark As Unavailable',\\\\\\\\n    color: 'red',\\\\\\\\n    tooltipText: 'Mark As Unavailable'\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    value: 'active',\\\\\\\\n    label: 'Mark As Active',\\\\\\\\n    color: 'purple',\\\\\\\\n    tooltipText: 'Mark As Active'\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    value: 'inactive',\\\\\\\\n    label: 'Mark As Inactive',\\\\\\\\n    color: 'green',\\\\\\\\n    tooltipText: 'Mark As Inactive'\\\\\\\\n  }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst MultiLevelListViewOption = [\\\\\\\\n  {\\\\\\\\n    id: 'available',\\\\\\\\n    value: 'available',\\\\\\\\n    label: 'Mark As Available',\\\\\\\\n    color: 'blue',\\\\\\\\n    tooltipText: 'Mark As Available',\\\\\\\\n    options: [\\\\\\\\n      {\\\\\\\\n        id: 'available',\\\\\\\\n        value: 'available',\\\\\\\\n        label: 'Mark As Child Available',\\\\\\\\n        color: 'blue',\\\\\\\\n        tooltipText: 'Mark As Child Available'\\\\\\\\n      },\\\\\\\\n      {\\\\\\\\n        id: 'unavailable',\\\\\\\\n        value: 'unavailable',\\\\\\\\n        label: 'Mark As Child Unavailable',\\\\\\\\n        color: 'red',\\\\\\\\n        tooltipText: 'Mark As Child Unavailable'\\\\\\\\n      },\\\\\\\\n      {\\\\\\\\n        id: 'active',\\\\\\\\n        value: 'active',\\\\\\\\n        label: 'Mark As Child Active',\\\\\\\\n        color: 'purple',\\\\\\\\n        tooltipText: 'Mark As Child Active'\\\\\\\\n      },\\\\\\\\n      {\\\\\\\\n        id: 'inactive',\\\\\\\\n        value: 'inactive',\\\\\\\\n        label: 'Mark As Child Inactive',\\\\\\\\n        color: 'green',\\\\\\\\n        tooltipText: 'Mark As Child Inactive',\\\\\\\\n        options: [\\\\\\\\n          {\\\\\\\\n            id: 'available',\\\\\\\\n            value: 'available',\\\\\\\\n            label: 'Mark As Grand Child Available',\\\\\\\\n            color: 'blue',\\\\\\\\n            tooltipText: 'Mark As Grand Child Available'\\\\\\\\n          },\\\\\\\\n          {\\\\\\\\n            id: 'unavailable',\\\\\\\\n            value: 'unavailable',\\\\\\\\n            label: 'Mark As Grand Child Unavailable',\\\\\\\\n            color: 'red',\\\\\\\\n            tooltipText: 'Mark As Grand Child Unavailable'\\\\\\\\n          }\\\\\\\\n        ]\\\\\\\\n      }\\\\\\\\n    ]\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    id: 'unavailable',\\\\\\\\n    value: 'unavailable',\\\\\\\\n    label: 'Mark As Unavailable',\\\\\\\\n    color: 'red',\\\\\\\\n    tooltipText: 'Mark As Unavailable'\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    id: 'active',\\\\\\\\n    value: 'active',\\\\\\\\n    label: 'Mark As Active',\\\\\\\\n    color: 'purple',\\\\\\\\n    tooltipText: 'Mark As Active'\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    id: 'inactive',\\\\\\\\n    value: 'inactive',\\\\\\\\n    label: 'Mark As Inactive',\\\\\\\\n    color: 'green',\\\\\\\\n    tooltipText: 'Mark As Inactive'\\\\\\\\n  }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst paginationOptions = [\\\\\\\\n  { value: '25', label: '25 per page', title: '25 per page' },\\\\\\\\n  { value: '50', label: '50 per page', title: '50 per page' },\\\\\\\\n  { value: '100', label: '100 per page', title: '100 per page' },\\\\\\\\n  { value: '200', label: '200 per page', title: '200 per page' }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst columnOption = [\\\\\\\\n  { value: 'ascending', label: 'Sort Ascending', iconVariant: 'hide-menu-box' },\\\\\\\\n  {\\\\\\\\n    value: 'descending',\\\\\\\\n    label: 'Sort Descending',\\\\\\\\n    iconVariant: 'hub-location'\\\\\\\\n  },\\\\\\\\n  { value: 'hideColumn', label: 'Hide Column', iconVariant: 'close' },\\\\\\\\n  { value: 'pinLeft', label: 'Pin Left', iconVariant: 'angle-left' },\\\\\\\\n  { value: 'pinright', label: 'Pin Right', iconVariant: 'angle-right-thin' }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst options = [\\\\\\\\n  {\\\\\\\\n    value: 'emailVerificationPending',\\\\\\\\n    label: 'Email Verification Pending Shipper'\\\\\\\\n  },\\\\\\\\n  { value: 'allShippers', label: 'All Shippers' },\\\\\\\\n  { value: 'approvalPendingShippers', label: 'Approval Pending Shippers' }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst datePickerOptions = [\\\\\\\\n  { value: 'January', label: 'January' },\\\\\\\\n  { value: 'February', label: 'February' },\\\\\\\\n  { value: 'March', label: 'March' },\\\\\\\\n  { value: 'April', label: 'April' },\\\\\\\\n  { value: 'May', label: 'May' },\\\\\\\\n  { value: 'June', label: 'June' },\\\\\\\\n  { value: 'July', label: 'July' },\\\\\\\\n  { value: 'August', label: 'August' },\\\\\\\\n  { value: 'September', label: 'September' },\\\\\\\\n  { value: 'October', label: 'October' },\\\\\\\\n  { value: 'November', label: 'November' },\\\\\\\\n  { value: 'December', label: 'December' }\\\\\\\\n]\\\\\\\\n\\\\\\\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\\\\\\\nexport const ButtonDropdown = () => (\\\\\\\\n  <ThemeWrapper>\\\\\\\\n    <Box p='2em' bgColor='grey.50'>\\\\\\\\n      <IconDropdown\\\\\\\\n        variant={text('varaint', 'button-dropdown') as tSelectVariant}\\\\\\\\n        optionList={object('optionList', ListViewOption)}\\\\\\\\n        width={text('width', '120px')}\\\\\\\\n        menuIsOpen={boolean('menuIsOpen', false)}\\\\\\\\n        iconButtonDetails={array('iconList', [\\\\\\\\n          'hide-menu-box',\\\\\\\\n          'More',\\\\\\\\n          'angle-down'\\\\\\\\n        ])}\\\\\\\\n        primary={boolean('primary', false)}\\\\\\\\n        intent={text('intent', 'page') as tIntent}\\\\\\\\n        onChange={action('Value Changed')}\\\\\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n        disabled={boolean('disabled', false)}\\\\\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\\\\\n        tooltipProps={{\\\\\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </Box>\\\\\\\\n  </ThemeWrapper>\\\\\\\\n)\\\\\\\\n\\\\\\\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\\\\\\\nexport const TextDropdown = () => (\\\\\\\\n  <ThemeWrapper>\\\\\\\\n    <Box p='2em' bgColor='grey.50'>\\\\\\\\n      <IconDropdown\\\\\\\\n        variant={text('varaint', 'text-dropdown') as tSelectVariant}\\\\\\\\n        optionList={object('optionList', ListViewOption)}\\\\\\\\n        width={text('width', '120px')}\\\\\\\\n        menuIsOpen={boolean('menuIsOpen', false)}\\\\\\\\n        iconButtonDetails={array('iconList', [\\\\\\\\n          'hide-menu-box',\\\\\\\\n          'More',\\\\\\\\n          'angle-down'\\\\\\\\n        ])}\\\\\\\\n        primary={boolean('primary', false)}\\\\\\\\n        intent={text('intent', 'page') as tIntent}\\\\\\\\n        onChange={action('Value Changed')}\\\\\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n        disabled={boolean('disabled', false)}\\\\\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\\\\\n        tooltipProps={{\\\\\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </Box>\\\\\\\\n  </ThemeWrapper>\\\\\\\\n)\\\\\\\\n\\\\\\\\nexport const MultiLevelBreadCrumb = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='2em' bgColor='grey.50'>\\\\\\\\n        <IconDropdown\\\\\\\\n          variant={text('variant', 'multilevel-breadcrumb') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', MultiLevelListViewOption)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          value={text('value', 'strawberry')}\\\\\\\\n          width={text('width', '260px')}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n  }\\\\\\\\n\\\\\\\\nexport const MultiLevelButtonDropdown = () => (\\\\\\\\n  <ThemeWrapper>\\\\\\\\n    <Box p='2em' bgColor='grey.50'>\\\\\\\\n      <IconDropdown\\\\\\\\n        variant={\\\\\\\\n          text('varaint', 'multilevel-button-dropdown') as tSelectVariant\\\\\\\\n        }\\\\\\\\n        optionList={object('optionList', MultiLevelListViewOption)}\\\\\\\\n        width={text('width', '120px')}\\\\\\\\n        menuIsOpen\\\\\\\\n        iconButtonDetails={array('iconList', [\\\\\\\\n          'hide-menu-box',\\\\\\\\n          'More',\\\\\\\\n          'angle-down'\\\\\\\\n        ])}\\\\\\\\n        defaultOpen='right'\\\\\\\\n        primary={boolean('primary', false)}\\\\\\\\n        intent={text('intent', 'page') as tIntent}\\\\\\\\n        handleClick={(id: any) => console.log('clicked from storybook', id)}\\\\\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n        disabled={boolean('disabled', false)}\\\\\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\\\\\n        tooltipProps={{\\\\\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </Box>\\\\\\\\n  </ThemeWrapper>\\\\\\\\n)\\\\\\\\n\\\\\\\\nexport const PaginationDropdown = () => (\\\\\\\\n  <ThemeWrapper>\\\\\\\\n    <CardComponent style={{ height: '300px' }}>\\\\\\\\n      <IconDropdown\\\\\\\\n        variant={text('variant', 'pagination-size') as tSelectVariant}\\\\\\\\n        optionList={object('optionList', paginationOptions)}\\\\\\\\n        onChange={action('Value selected')}\\\\\\\\n        value={text('value', '50')}\\\\\\\\n        width={text('width', '120px')}\\\\\\\\n      />\\\\\\\\n    </CardComponent>\\\\\\\\n  </ThemeWrapper>\\\\\\\\n)\\\\\\\\n\\\\\\\\nexport const columnOptionComponent = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='2em' bgColor='grey.50'>\\\\\\\\n        <div style={{ width: '200px', margin: 'auto' }}>\\\\\\\\n          <IconDropdown\\\\\\\\n            variant={text('variant', 'column-filter') as tSelectVariant}\\\\\\\\n            optionList={object('optionList', columnOption)}\\\\\\\\n            onChange={action('Value selected')}\\\\\\\\n            width={text('width', '10px')}\\\\\\\\n            isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n          />\\\\\\\\n        </div>\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const BreadCrumbComponent = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='2em' bgColor='grey.50'>\\\\\\\\n        <IconDropdown\\\\\\\\n          variant={text('variant', 'bread-crumb') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', options)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          value={text('value', 'strawberry')}\\\\\\\\n          width={text('width', '260px')}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const DatePickerDropDown = () => (\\\\\\\\n  <ThemeWrapper>\\\\\\\\n    <CardComponent style={{ height: '200px' }}>\\\\\\\\n      <IconDropdown\\\\\\\\n        variant={text('variant', 'date-picker') as tSelectVariant}\\\\\\\\n        optionList={object('optionList', datePickerOptions)}\\\\\\\\n        onChange={action('Value selected')}\\\\\\\\n        value={text('value', '50')}\\\\\\\\n        width={text('width', '80px')}\\\\\\\\n        showDownArrow={boolean('Show Down Arrow', true)}\\\\\\\\n        isMultiRegionStyled={boolean('Is Multi Region Styled', false)}\\\\\\\\n      />\\\\\\\\n    </CardComponent>\\\\\\\\n  </ThemeWrapper>\\\\\\\\n)\\\\\\\\nconst arrayMap = [\\\\\\\\n  { variant: 'column-filter', name: 'column-filter0' },\\\\\\\\n  { variant: 'column-filter', name: 'column-filter1' },\\\\\\\\n  { variant: 'column-filter', name: 'column-filter2' }\\\\\\\\n]\\\\\\\\n\\\\\\\\nexport const columnOptionList = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='2em' bgColor='grey.50'>\\\\\\\\n        <div style={{ width: '200px', margin: 'auto' }}>\\\\\\\\n          {arrayMap.map((obj: any, index: number) => {\\\\\\\\n            return (\\\\\\\\n              <IconDropdown\\\\\\\\n                variant={text('variant', obj?.variant) as tSelectVariant}\\\\\\\\n                optionList={object('optionList', columnOption)}\\\\\\\\n                onChange={action('Value selected')}\\\\\\\\n                width={text('width', '10px')}\\\\\\\\n                isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n                key={index}\\\\\\\\n              />\\\\\\\\n            )\\\\\\\\n          })}\\\\\\\\n        </div>\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const DropdownUniversal = () => {\\\\\\\\n  // reference to style\\\\\\\\n  // const theme = useContext(ThemeContext)\\\\\\\\n  // const borderBottom = `1px solid ${theme?.colors?.grey['A800']}`\\\\\\\\n  // const customStyle = {\\\\\\\\n  //   control: (provided: any) => ({\\\\\\\\n  //     ...provided,\\\\\\\\n  //     borderStyle: 'none',\\\\\\\\n  //     borderBottom,\\\\\\\\n  //     borderRadius: '0px',\\\\\\\\n  //     boxShadow: 'none',\\\\\\\\n  //     borderColor: theme?.colors?.grey?.A800,\\\\\\\\n  //     '&:focus': {\\\\\\\\n  //       borderStyle: 'none',\\\\\\\\n  //       borderBottom,\\\\\\\\n  //       boxShadow: 'none',\\\\\\\\n  //       borderColor: theme?.colors?.grey?.A800\\\\\\\\n  //     },\\\\\\\\n  //     '&:hover': {\\\\\\\\n  //       borderStyle: 'none',\\\\\\\\n  //       borderBottom,\\\\\\\\n  //       boxShadow: 'none',\\\\\\\\n  //       borderColor: theme?.colors?.grey?.A800\\\\\\\\n  //     }\\\\\\\\n  //   }),\\\\\\\\n  //   option: (provided: any, state: any) => ({\\\\\\\\n  //     ...provided,\\\\\\\\n  //     backgroundColor: state?.isSelected\\\\\\\\n  //       ? theme?.colors?.primary?.main\\\\\\\\n  //       : theme?.colors?.white,\\\\\\\\n  //     '&:hover': {\\\\\\\\n  //       backgroundColor: state?.isSelected\\\\\\\\n  //         ? theme?.colors?.primary?.main\\\\\\\\n  //         : theme?.colors?.grey['50']\\\\\\\\n  //     }\\\\\\\\n  //   }),\\\\\\\\n\\\\\\\\n  //   menu: (provided: any, state: any) => ({\\\\\\\\n  //     ...provided,\\\\\\\\n  //     backgroundColor: state?.isSelected\\\\\\\\n  //       ? theme.colors.primary.main\\\\\\\\n  //       : theme?.colors?.white,\\\\\\\\n  //     borderRadius: '2px',\\\\\\\\n  //     '&:hover': {\\\\\\\\n  //       backgroundColor: state?.isSelected\\\\\\\\n  //         ? theme?.colors?.primary?.main\\\\\\\\n  //         : theme?.colors?.white\\\\\\\\n  //     },\\\\\\\\n  //     marginTop: '5px',\\\\\\\\n  //     marginLeft: '16px',\\\\\\\\n  //     width: '90%'\\\\\\\\n  //   }),\\\\\\\\n  //   menuList: (provided: any) => ({\\\\\\\\n  //     ...provided,\\\\\\\\n  //     marginTop: '0px'\\\\\\\\n  //   }),\\\\\\\\n  //   valueContainer: (provided: any) => ({\\\\\\\\n  //     ...provided,\\\\\\\\n  //     padding: '0px'\\\\\\\\n  //   })\\\\\\\\n  // }\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='2em' bgColor='grey.50'>\\\\\\\\n        <IconDropdown\\\\\\\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', ListViewOption)}\\\\\\\\n          width={text('width', '120px')}\\\\\\\\n          menuIsOpen={boolean('menuIsOpen', false)}\\\\\\\\n          primary={boolean('primary', false)}\\\\\\\\n          intent={text('intent', 'page') as tIntent}\\\\\\\\n          onChange={action('Value Changed')}\\\\\\\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n          value='available'\\\\\\\\n          optionComponent={({ selectedOption }: any) => {\\\\\\\\n            return (\\\\\\\\n              <div>\\\\\\\\n                <div>{selectedOption?.color}</div>\\\\\\\\n                <div>{selectedOption?.label}</div>\\\\\\\\n              </div>\\\\\\\\n            )\\\\\\\\n          }}\\\\\\\\n          // customStyle={customStyle}\\\\\\\\n        >\\\\\\\\n          {({\\\\\\\\n            selectedOption,\\\\\\\\n            menuIsOpen,\\\\\\\\n            setMenuIsOpen\\\\\\\\n          }: IUniversalDropdownChildren) => {\\\\\\\\n            return (\\\\\\\\n              <Button\\\\\\\\n                onClick={() => {\\\\\\\\n                  setMenuIsOpen(!menuIsOpen)\\\\\\\\n                  action('Universal open/closed')(menuIsOpen)\\\\\\\\n                }}\\\\\\\\n                color={text('color', 'white')}\\\\\\\\n                bgColor={text('bgColor', 'black')}\\\\\\\\n                fullWidth={boolean('fullWidth', false)}\\\\\\\\n              >\\\\\\\\n                {selectedOption?.label}\\\\\\\\n              </Button>\\\\\\\\n            )\\\\\\\\n          }}\\\\\\\\n        </IconDropdown>\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const TextFieldDropdown = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='2em' bgColor='grey.50'>\\\\\\\\n        <IconDropdown\\\\\\\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', ListViewOption)}\\\\\\\\n          width={text('width', '120px')}\\\\\\\\n          menuIsOpen={boolean('menuIsOpen', false)}\\\\\\\\n          primary={boolean('primary', false)}\\\\\\\\n          intent={text('intent', 'page') as tIntent}\\\\\\\\n          onChange={action('Value Changed')}\\\\\\\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n          value='available'\\\\\\\\n          optionComponent={({ selectedOption }: any) => {\\\\\\\\n            return (\\\\\\\\n              <div>\\\\\\\\n                <div>{selectedOption?.color}</div>\\\\\\\\n                <div>{selectedOption?.label}</div>\\\\\\\\n              </div>\\\\\\\\n            )\\\\\\\\n          }}\\\\\\\\n          // customStyle={customStyle}\\\\\\\\n        >\\\\\\\\n          {({\\\\\\\\n            selectedOption,\\\\\\\\n            menuIsOpen,\\\\\\\\n            setMenuIsOpen\\\\\\\\n          }: IUniversalDropdownChildren) => {\\\\\\\\n            return (\\\\\\\\n              <TextInput\\\\\\\\n                id='someId'\\\\\\\\n                name='someName'\\\\\\\\n                className='someClassName'\\\\\\\\n                label={text('label', 'Username')}\\\\\\\\n                labelColor={text('labelColor', 'text.inputLabel.default')}\\\\\\\\n                placeholder={text('placeholder', 'Enter text here...')}\\\\\\\\n                maxLength={number('maxLength', 10)}\\\\\\\\n                error={boolean('error', false)}\\\\\\\\n                errorMessage={text('errorMessage', '')}\\\\\\\\n                required={boolean('required', false)}\\\\\\\\n                fullWidth={boolean('fullWidth', false)}\\\\\\\\n                onChange={action('Triggered: onChange')}\\\\\\\\n                onClick={() => {\\\\\\\\n                  setMenuIsOpen(!menuIsOpen)\\\\\\\\n                  action('universal open/closed')(menuIsOpen)\\\\\\\\n                }}\\\\\\\\n                value={selectedOption?.value}\\\\\\\\n              />\\\\\\\\n            )\\\\\\\\n          }}\\\\\\\\n        </IconDropdown>\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\";\\\\n// @ts-ignore\\\\nvar __ADDS_MAP__ = {};\\\\n// @ts-ignore\\\\nvar __MAIN_FILE_LOCATION__ = \\\\\\\"/IconDropdown.stories.tsx\\\\\\\";\\\\n// @ts-ignore\\\\nvar __MODULE_DEPENDENCIES__ = [];\\\\n// @ts-ignore\\\\nvar __LOCAL_DEPENDENCIES__ = {};\\\\n// @ts-ignore\\\\nvar __IDS_TO_FRAMEWORKS__ = {};\\\\n        \\\\nimport { action } from '@storybook/addon-actions'\\\\nimport {\\\\n  array,\\\\n  boolean,\\\\n  number,\\\\n  object,\\\\n  text,\\\\n  withKnobs\\\\n} from '@storybook/addon-knobs'\\\\nimport React from 'react'\\\\nimport IconDropdown from '.'\\\\nimport { path } from '..'\\\\nimport { Box } from '../../..'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport Button, { tIntent } from '../../atoms/Button'\\\\nimport CardComponent from '../../atoms/Card'\\\\nimport { tPlacement } from '../../../utilities/types'\\\\nimport {\\\\n  IUniversalDropdownChildren,\\\\n  tSelectVariant\\\\n} from '../DropDown/interface'\\\\nimport TextInput from '../TextInput'\\\\n\\\\nexport default {parameters: {\\\\\\\"storySource\\\\\\\":{\\\\\\\"source\\\\\\\":\\\\\\\"import { action } from '@storybook/addon-actions'\\\\\\\\nimport {\\\\\\\\n  array,\\\\\\\\n  boolean,\\\\\\\\n  number,\\\\\\\\n  object,\\\\\\\\n  text,\\\\\\\\n  withKnobs\\\\\\\\n} from '@storybook/addon-knobs'\\\\\\\\nimport React from 'react'\\\\\\\\nimport IconDropdown from '.'\\\\\\\\nimport { path } from '..'\\\\\\\\nimport { Box } from '../../..'\\\\\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\\\\\nimport Button, { tIntent } from '../../atoms/Button'\\\\\\\\nimport CardComponent from '../../atoms/Card'\\\\\\\\nimport { tPlacement } from '../../../utilities/types'\\\\\\\\nimport {\\\\\\\\n  IUniversalDropdownChildren,\\\\\\\\n  tSelectVariant\\\\\\\\n} from '../DropDown/interface'\\\\\\\\nimport TextInput from '../TextInput'\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/IconDropdown`,\\\\\\\\n  decorators: [withKnobs],\\\\\\\\n  component: IconDropdown\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst ListViewOption = [\\\\\\\\n  {\\\\\\\\n    value: 'available',\\\\\\\\n    label: 'Mark As Available',\\\\\\\\n    color: 'blue',\\\\\\\\n    tooltipText: 'Mark As Available',\\\\\\\\n    isDisabled: true\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    value: 'unavailable',\\\\\\\\n    label: 'Mark As Unavailable',\\\\\\\\n    color: 'red',\\\\\\\\n    tooltipText: 'Mark As Unavailable'\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    value: 'active',\\\\\\\\n    label: 'Mark As Active',\\\\\\\\n    color: 'purple',\\\\\\\\n    tooltipText: 'Mark As Active'\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    value: 'inactive',\\\\\\\\n    label: 'Mark As Inactive',\\\\\\\\n    color: 'green',\\\\\\\\n    tooltipText: 'Mark As Inactive'\\\\\\\\n  }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst MultiLevelListViewOption = [\\\\\\\\n  {\\\\\\\\n    id: 'available',\\\\\\\\n    value: 'available',\\\\\\\\n    label: 'Mark As Available',\\\\\\\\n    color: 'blue',\\\\\\\\n    tooltipText: 'Mark As Available',\\\\\\\\n    options: [\\\\\\\\n      {\\\\\\\\n        id: 'available',\\\\\\\\n        value: 'available',\\\\\\\\n        label: 'Mark As Child Available',\\\\\\\\n        color: 'blue',\\\\\\\\n        tooltipText: 'Mark As Child Available'\\\\\\\\n      },\\\\\\\\n      {\\\\\\\\n        id: 'unavailable',\\\\\\\\n        value: 'unavailable',\\\\\\\\n        label: 'Mark As Child Unavailable',\\\\\\\\n        color: 'red',\\\\\\\\n        tooltipText: 'Mark As Child Unavailable'\\\\\\\\n      },\\\\\\\\n      {\\\\\\\\n        id: 'active',\\\\\\\\n        value: 'active',\\\\\\\\n        label: 'Mark As Child Active',\\\\\\\\n        color: 'purple',\\\\\\\\n        tooltipText: 'Mark As Child Active'\\\\\\\\n      },\\\\\\\\n      {\\\\\\\\n        id: 'inactive',\\\\\\\\n        value: 'inactive',\\\\\\\\n        label: 'Mark As Child Inactive',\\\\\\\\n        color: 'green',\\\\\\\\n        tooltipText: 'Mark As Child Inactive',\\\\\\\\n        options: [\\\\\\\\n          {\\\\\\\\n            id: 'available',\\\\\\\\n            value: 'available',\\\\\\\\n            label: 'Mark As Grand Child Available',\\\\\\\\n            color: 'blue',\\\\\\\\n            tooltipText: 'Mark As Grand Child Available'\\\\\\\\n          },\\\\\\\\n          {\\\\\\\\n            id: 'unavailable',\\\\\\\\n            value: 'unavailable',\\\\\\\\n            label: 'Mark As Grand Child Unavailable',\\\\\\\\n            color: 'red',\\\\\\\\n            tooltipText: 'Mark As Grand Child Unavailable'\\\\\\\\n          }\\\\\\\\n        ]\\\\\\\\n      }\\\\\\\\n    ]\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    id: 'unavailable',\\\\\\\\n    value: 'unavailable',\\\\\\\\n    label: 'Mark As Unavailable',\\\\\\\\n    color: 'red',\\\\\\\\n    tooltipText: 'Mark As Unavailable'\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    id: 'active',\\\\\\\\n    value: 'active',\\\\\\\\n    label: 'Mark As Active',\\\\\\\\n    color: 'purple',\\\\\\\\n    tooltipText: 'Mark As Active'\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    id: 'inactive',\\\\\\\\n    value: 'inactive',\\\\\\\\n    label: 'Mark As Inactive',\\\\\\\\n    color: 'green',\\\\\\\\n    tooltipText: 'Mark As Inactive'\\\\\\\\n  }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst paginationOptions = [\\\\\\\\n  { value: '25', label: '25 per page', title: '25 per page' },\\\\\\\\n  { value: '50', label: '50 per page', title: '50 per page' },\\\\\\\\n  { value: '100', label: '100 per page', title: '100 per page' },\\\\\\\\n  { value: '200', label: '200 per page', title: '200 per page' }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst columnOption = [\\\\\\\\n  { value: 'ascending', label: 'Sort Ascending', iconVariant: 'hide-menu-box' },\\\\\\\\n  {\\\\\\\\n    value: 'descending',\\\\\\\\n    label: 'Sort Descending',\\\\\\\\n    iconVariant: 'hub-location'\\\\\\\\n  },\\\\\\\\n  { value: 'hideColumn', label: 'Hide Column', iconVariant: 'close' },\\\\\\\\n  { value: 'pinLeft', label: 'Pin Left', iconVariant: 'angle-left' },\\\\\\\\n  { value: 'pinright', label: 'Pin Right', iconVariant: 'angle-right-thin' }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst options = [\\\\\\\\n  {\\\\\\\\n    value: 'emailVerificationPending',\\\\\\\\n    label: 'Email Verification Pending Shipper'\\\\\\\\n  },\\\\\\\\n  { value: 'allShippers', label: 'All Shippers' },\\\\\\\\n  { value: 'approvalPendingShippers', label: 'Approval Pending Shippers' }\\\\\\\\n]\\\\\\\\n\\\\\\\\nconst datePickerOptions = [\\\\\\\\n  { value: 'January', label: 'January' },\\\\\\\\n  { value: 'February', label: 'February' },\\\\\\\\n  { value: 'March', label: 'March' },\\\\\\\\n  { value: 'April', label: 'April' },\\\\\\\\n  { value: 'May', label: 'May' },\\\\\\\\n  { value: 'June', label: 'June' },\\\\\\\\n  { value: 'July', label: 'July' },\\\\\\\\n  { value: 'August', label: 'August' },\\\\\\\\n  { value: 'September', label: 'September' },\\\\\\\\n  { value: 'October', label: 'October' },\\\\\\\\n  { value: 'November', label: 'November' },\\\\\\\\n  { value: 'December', label: 'December' }\\\\\\\\n]\\\\\\\\n\\\\\\\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\\\\\\\nexport const ButtonDropdown = () => (\\\\\\\\n  <ThemeWrapper>\\\\\\\\n    <Box p='2em' bgColor='grey.50'>\\\\\\\\n      <IconDropdown\\\\\\\\n        variant={text('varaint', 'button-dropdown') as tSelectVariant}\\\\\\\\n        optionList={object('optionList', ListViewOption)}\\\\\\\\n        width={text('width', '120px')}\\\\\\\\n        menuIsOpen={boolean('menuIsOpen', false)}\\\\\\\\n        iconButtonDetails={array('iconList', [\\\\\\\\n          'hide-menu-box',\\\\\\\\n          'More',\\\\\\\\n          'angle-down'\\\\\\\\n        ])}\\\\\\\\n        primary={boolean('primary', false)}\\\\\\\\n        intent={text('intent', 'page') as tIntent}\\\\\\\\n        onChange={action('Value Changed')}\\\\\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n        disabled={boolean('disabled', false)}\\\\\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\\\\\n        tooltipProps={{\\\\\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </Box>\\\\\\\\n  </ThemeWrapper>\\\\\\\\n)\\\\\\\\n\\\\\\\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\\\\\\\nexport const TextDropdown = () => (\\\\\\\\n  <ThemeWrapper>\\\\\\\\n    <Box p='2em' bgColor='grey.50'>\\\\\\\\n      <IconDropdown\\\\\\\\n        variant={text('varaint', 'text-dropdown') as tSelectVariant}\\\\\\\\n        optionList={object('optionList', ListViewOption)}\\\\\\\\n        width={text('width', '120px')}\\\\\\\\n        menuIsOpen={boolean('menuIsOpen', false)}\\\\\\\\n        iconButtonDetails={array('iconList', [\\\\\\\\n          'hide-menu-box',\\\\\\\\n          'More',\\\\\\\\n          'angle-down'\\\\\\\\n        ])}\\\\\\\\n        primary={boolean('primary', false)}\\\\\\\\n        intent={text('intent', 'page') as tIntent}\\\\\\\\n        onChange={action('Value Changed')}\\\\\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n        disabled={boolean('disabled', false)}\\\\\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\\\\\n        tooltipProps={{\\\\\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </Box>\\\\\\\\n  </ThemeWrapper>\\\\\\\\n)\\\\\\\\n\\\\\\\\nexport const MultiLevelBreadCrumb = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='2em' bgColor='grey.50'>\\\\\\\\n        <IconDropdown\\\\\\\\n          variant={text('variant', 'multilevel-breadcrumb') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', MultiLevelListViewOption)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          value={text('value', 'strawberry')}\\\\\\\\n          width={text('width', '260px')}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n  }\\\\\\\\n\\\\\\\\nexport const MultiLevelButtonDropdown = () => (\\\\\\\\n  <ThemeWrapper>\\\\\\\\n    <Box p='2em' bgColor='grey.50'>\\\\\\\\n      <IconDropdown\\\\\\\\n        variant={\\\\\\\\n          text('varaint', 'multilevel-button-dropdown') as tSelectVariant\\\\\\\\n        }\\\\\\\\n        optionList={object('optionList', MultiLevelListViewOption)}\\\\\\\\n        width={text('width', '120px')}\\\\\\\\n        menuIsOpen\\\\\\\\n        iconButtonDetails={array('iconList', [\\\\\\\\n          'hide-menu-box',\\\\\\\\n          'More',\\\\\\\\n          'angle-down'\\\\\\\\n        ])}\\\\\\\\n        defaultOpen='right'\\\\\\\\n        primary={boolean('primary', false)}\\\\\\\\n        intent={text('intent', 'page') as tIntent}\\\\\\\\n        handleClick={(id: any) => console.log('clicked from storybook', id)}\\\\\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n        disabled={boolean('disabled', false)}\\\\\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\\\\\n        tooltipProps={{\\\\\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </Box>\\\\\\\\n  </ThemeWrapper>\\\\\\\\n)\\\\\\\\n\\\\\\\\nexport const PaginationDropdown = () => (\\\\\\\\n  <ThemeWrapper>\\\\\\\\n    <CardComponent style={{ height: '300px' }}>\\\\\\\\n      <IconDropdown\\\\\\\\n        variant={text('variant', 'pagination-size') as tSelectVariant}\\\\\\\\n        optionList={object('optionList', paginationOptions)}\\\\\\\\n        onChange={action('Value selected')}\\\\\\\\n        value={text('value', '50')}\\\\\\\\n        width={text('width', '120px')}\\\\\\\\n      />\\\\\\\\n    </CardComponent>\\\\\\\\n  </ThemeWrapper>\\\\\\\\n)\\\\\\\\n\\\\\\\\nexport const columnOptionComponent = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='2em' bgColor='grey.50'>\\\\\\\\n        <div style={{ width: '200px', margin: 'auto' }}>\\\\\\\\n          <IconDropdown\\\\\\\\n            variant={text('variant', 'column-filter') as tSelectVariant}\\\\\\\\n            optionList={object('optionList', columnOption)}\\\\\\\\n            onChange={action('Value selected')}\\\\\\\\n            width={text('width', '10px')}\\\\\\\\n            isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n          />\\\\\\\\n        </div>\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const BreadCrumbComponent = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='2em' bgColor='grey.50'>\\\\\\\\n        <IconDropdown\\\\\\\\n          variant={text('variant', 'bread-crumb') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', options)}\\\\\\\\n          onChange={action('Value selected')}\\\\\\\\n          value={text('value', 'strawberry')}\\\\\\\\n          width={text('width', '260px')}\\\\\\\\n        />\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const DatePickerDropDown = () => (\\\\\\\\n  <ThemeWrapper>\\\\\\\\n    <CardComponent style={{ height: '200px' }}>\\\\\\\\n      <IconDropdown\\\\\\\\n        variant={text('variant', 'date-picker') as tSelectVariant}\\\\\\\\n        optionList={object('optionList', datePickerOptions)}\\\\\\\\n        onChange={action('Value selected')}\\\\\\\\n        value={text('value', '50')}\\\\\\\\n        width={text('width', '80px')}\\\\\\\\n        showDownArrow={boolean('Show Down Arrow', true)}\\\\\\\\n        isMultiRegionStyled={boolean('Is Multi Region Styled', false)}\\\\\\\\n      />\\\\\\\\n    </CardComponent>\\\\\\\\n  </ThemeWrapper>\\\\\\\\n)\\\\\\\\nconst arrayMap = [\\\\\\\\n  { variant: 'column-filter', name: 'column-filter0' },\\\\\\\\n  { variant: 'column-filter', name: 'column-filter1' },\\\\\\\\n  { variant: 'column-filter', name: 'column-filter2' }\\\\\\\\n]\\\\\\\\n\\\\\\\\nexport const columnOptionList = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='2em' bgColor='grey.50'>\\\\\\\\n        <div style={{ width: '200px', margin: 'auto' }}>\\\\\\\\n          {arrayMap.map((obj: any, index: number) => {\\\\\\\\n            return (\\\\\\\\n              <IconDropdown\\\\\\\\n                variant={text('variant', obj?.variant) as tSelectVariant}\\\\\\\\n                optionList={object('optionList', columnOption)}\\\\\\\\n                onChange={action('Value selected')}\\\\\\\\n                width={text('width', '10px')}\\\\\\\\n                isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n                key={index}\\\\\\\\n              />\\\\\\\\n            )\\\\\\\\n          })}\\\\\\\\n        </div>\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const DropdownUniversal = () => {\\\\\\\\n  // reference to style\\\\\\\\n  // const theme = useContext(ThemeContext)\\\\\\\\n  // const borderBottom = `1px solid ${theme?.colors?.grey['A800']}`\\\\\\\\n  // const customStyle = {\\\\\\\\n  //   control: (provided: any) => ({\\\\\\\\n  //     ...provided,\\\\\\\\n  //     borderStyle: 'none',\\\\\\\\n  //     borderBottom,\\\\\\\\n  //     borderRadius: '0px',\\\\\\\\n  //     boxShadow: 'none',\\\\\\\\n  //     borderColor: theme?.colors?.grey?.A800,\\\\\\\\n  //     '&:focus': {\\\\\\\\n  //       borderStyle: 'none',\\\\\\\\n  //       borderBottom,\\\\\\\\n  //       boxShadow: 'none',\\\\\\\\n  //       borderColor: theme?.colors?.grey?.A800\\\\\\\\n  //     },\\\\\\\\n  //     '&:hover': {\\\\\\\\n  //       borderStyle: 'none',\\\\\\\\n  //       borderBottom,\\\\\\\\n  //       boxShadow: 'none',\\\\\\\\n  //       borderColor: theme?.colors?.grey?.A800\\\\\\\\n  //     }\\\\\\\\n  //   }),\\\\\\\\n  //   option: (provided: any, state: any) => ({\\\\\\\\n  //     ...provided,\\\\\\\\n  //     backgroundColor: state?.isSelected\\\\\\\\n  //       ? theme?.colors?.primary?.main\\\\\\\\n  //       : theme?.colors?.white,\\\\\\\\n  //     '&:hover': {\\\\\\\\n  //       backgroundColor: state?.isSelected\\\\\\\\n  //         ? theme?.colors?.primary?.main\\\\\\\\n  //         : theme?.colors?.grey['50']\\\\\\\\n  //     }\\\\\\\\n  //   }),\\\\\\\\n\\\\\\\\n  //   menu: (provided: any, state: any) => ({\\\\\\\\n  //     ...provided,\\\\\\\\n  //     backgroundColor: state?.isSelected\\\\\\\\n  //       ? theme.colors.primary.main\\\\\\\\n  //       : theme?.colors?.white,\\\\\\\\n  //     borderRadius: '2px',\\\\\\\\n  //     '&:hover': {\\\\\\\\n  //       backgroundColor: state?.isSelected\\\\\\\\n  //         ? theme?.colors?.primary?.main\\\\\\\\n  //         : theme?.colors?.white\\\\\\\\n  //     },\\\\\\\\n  //     marginTop: '5px',\\\\\\\\n  //     marginLeft: '16px',\\\\\\\\n  //     width: '90%'\\\\\\\\n  //   }),\\\\\\\\n  //   menuList: (provided: any) => ({\\\\\\\\n  //     ...provided,\\\\\\\\n  //     marginTop: '0px'\\\\\\\\n  //   }),\\\\\\\\n  //   valueContainer: (provided: any) => ({\\\\\\\\n  //     ...provided,\\\\\\\\n  //     padding: '0px'\\\\\\\\n  //   })\\\\\\\\n  // }\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='2em' bgColor='grey.50'>\\\\\\\\n        <IconDropdown\\\\\\\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', ListViewOption)}\\\\\\\\n          width={text('width', '120px')}\\\\\\\\n          menuIsOpen={boolean('menuIsOpen', false)}\\\\\\\\n          primary={boolean('primary', false)}\\\\\\\\n          intent={text('intent', 'page') as tIntent}\\\\\\\\n          onChange={action('Value Changed')}\\\\\\\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n          value='available'\\\\\\\\n          optionComponent={({ selectedOption }: any) => {\\\\\\\\n            return (\\\\\\\\n              <div>\\\\\\\\n                <div>{selectedOption?.color}</div>\\\\\\\\n                <div>{selectedOption?.label}</div>\\\\\\\\n              </div>\\\\\\\\n            )\\\\\\\\n          }}\\\\\\\\n          // customStyle={customStyle}\\\\\\\\n        >\\\\\\\\n          {({\\\\\\\\n            selectedOption,\\\\\\\\n            menuIsOpen,\\\\\\\\n            setMenuIsOpen\\\\\\\\n          }: IUniversalDropdownChildren) => {\\\\\\\\n            return (\\\\\\\\n              <Button\\\\\\\\n                onClick={() => {\\\\\\\\n                  setMenuIsOpen(!menuIsOpen)\\\\\\\\n                  action('Universal open/closed')(menuIsOpen)\\\\\\\\n                }}\\\\\\\\n                color={text('color', 'white')}\\\\\\\\n                bgColor={text('bgColor', 'black')}\\\\\\\\n                fullWidth={boolean('fullWidth', false)}\\\\\\\\n              >\\\\\\\\n                {selectedOption?.label}\\\\\\\\n              </Button>\\\\\\\\n            )\\\\\\\\n          }}\\\\\\\\n        </IconDropdown>\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const TextFieldDropdown = () => {\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <Box p='2em' bgColor='grey.50'>\\\\\\\\n        <IconDropdown\\\\\\\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\\\\\\\n          optionList={object('optionList', ListViewOption)}\\\\\\\\n          width={text('width', '120px')}\\\\\\\\n          menuIsOpen={boolean('menuIsOpen', false)}\\\\\\\\n          primary={boolean('primary', false)}\\\\\\\\n          intent={text('intent', 'page') as tIntent}\\\\\\\\n          onChange={action('Value Changed')}\\\\\\\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\\\\\\\n          disabled={boolean('disabled', false)}\\\\\\\\n          value='available'\\\\\\\\n          optionComponent={({ selectedOption }: any) => {\\\\\\\\n            return (\\\\\\\\n              <div>\\\\\\\\n                <div>{selectedOption?.color}</div>\\\\\\\\n                <div>{selectedOption?.label}</div>\\\\\\\\n              </div>\\\\\\\\n            )\\\\\\\\n          }}\\\\\\\\n          // customStyle={customStyle}\\\\\\\\n        >\\\\\\\\n          {({\\\\\\\\n            selectedOption,\\\\\\\\n            menuIsOpen,\\\\\\\\n            setMenuIsOpen\\\\\\\\n          }: IUniversalDropdownChildren) => {\\\\\\\\n            return (\\\\\\\\n              <TextInput\\\\\\\\n                id='someId'\\\\\\\\n                name='someName'\\\\\\\\n                className='someClassName'\\\\\\\\n                label={text('label', 'Username')}\\\\\\\\n                labelColor={text('labelColor', 'text.inputLabel.default')}\\\\\\\\n                placeholder={text('placeholder', 'Enter text here...')}\\\\\\\\n                maxLength={number('maxLength', 10)}\\\\\\\\n                error={boolean('error', false)}\\\\\\\\n                errorMessage={text('errorMessage', '')}\\\\\\\\n                required={boolean('required', false)}\\\\\\\\n                fullWidth={boolean('fullWidth', false)}\\\\\\\\n                onChange={action('Triggered: onChange')}\\\\\\\\n                onClick={() => {\\\\\\\\n                  setMenuIsOpen(!menuIsOpen)\\\\\\\\n                  action('universal open/closed')(menuIsOpen)\\\\\\\\n                }}\\\\\\\\n                value={selectedOption?.value}\\\\\\\\n              />\\\\\\\\n            )\\\\\\\\n          }}\\\\\\\\n        </IconDropdown>\\\\\\\\n      </Box>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\",\\\\\\\"locationsMap\\\\\\\":{}},},\\\\n  title: `${path}/IconDropdown`,\\\\n  decorators: [withKnobs],\\\\n  component: IconDropdown\\\\n}\\\\n\\\\nconst ListViewOption = [\\\\n  {\\\\n    value: 'available',\\\\n    label: 'Mark As Available',\\\\n    color: 'blue',\\\\n    tooltipText: 'Mark As Available',\\\\n    isDisabled: true\\\\n  },\\\\n  {\\\\n    value: 'unavailable',\\\\n    label: 'Mark As Unavailable',\\\\n    color: 'red',\\\\n    tooltipText: 'Mark As Unavailable'\\\\n  },\\\\n  {\\\\n    value: 'active',\\\\n    label: 'Mark As Active',\\\\n    color: 'purple',\\\\n    tooltipText: 'Mark As Active'\\\\n  },\\\\n  {\\\\n    value: 'inactive',\\\\n    label: 'Mark As Inactive',\\\\n    color: 'green',\\\\n    tooltipText: 'Mark As Inactive'\\\\n  }\\\\n]\\\\n\\\\nconst MultiLevelListViewOption = [\\\\n  {\\\\n    id: 'available',\\\\n    value: 'available',\\\\n    label: 'Mark As Available',\\\\n    color: 'blue',\\\\n    tooltipText: 'Mark As Available',\\\\n    options: [\\\\n      {\\\\n        id: 'available',\\\\n        value: 'available',\\\\n        label: 'Mark As Child Available',\\\\n        color: 'blue',\\\\n        tooltipText: 'Mark As Child Available'\\\\n      },\\\\n      {\\\\n        id: 'unavailable',\\\\n        value: 'unavailable',\\\\n        label: 'Mark As Child Unavailable',\\\\n        color: 'red',\\\\n        tooltipText: 'Mark As Child Unavailable'\\\\n      },\\\\n      {\\\\n        id: 'active',\\\\n        value: 'active',\\\\n        label: 'Mark As Child Active',\\\\n        color: 'purple',\\\\n        tooltipText: 'Mark As Child Active'\\\\n      },\\\\n      {\\\\n        id: 'inactive',\\\\n        value: 'inactive',\\\\n        label: 'Mark As Child Inactive',\\\\n        color: 'green',\\\\n        tooltipText: 'Mark As Child Inactive',\\\\n        options: [\\\\n          {\\\\n            id: 'available',\\\\n            value: 'available',\\\\n            label: 'Mark As Grand Child Available',\\\\n            color: 'blue',\\\\n            tooltipText: 'Mark As Grand Child Available'\\\\n          },\\\\n          {\\\\n            id: 'unavailable',\\\\n            value: 'unavailable',\\\\n            label: 'Mark As Grand Child Unavailable',\\\\n            color: 'red',\\\\n            tooltipText: 'Mark As Grand Child Unavailable'\\\\n          }\\\\n        ]\\\\n      }\\\\n    ]\\\\n  },\\\\n  {\\\\n    id: 'unavailable',\\\\n    value: 'unavailable',\\\\n    label: 'Mark As Unavailable',\\\\n    color: 'red',\\\\n    tooltipText: 'Mark As Unavailable'\\\\n  },\\\\n  {\\\\n    id: 'active',\\\\n    value: 'active',\\\\n    label: 'Mark As Active',\\\\n    color: 'purple',\\\\n    tooltipText: 'Mark As Active'\\\\n  },\\\\n  {\\\\n    id: 'inactive',\\\\n    value: 'inactive',\\\\n    label: 'Mark As Inactive',\\\\n    color: 'green',\\\\n    tooltipText: 'Mark As Inactive'\\\\n  }\\\\n]\\\\n\\\\nconst paginationOptions = [\\\\n  { value: '25', label: '25 per page', title: '25 per page' },\\\\n  { value: '50', label: '50 per page', title: '50 per page' },\\\\n  { value: '100', label: '100 per page', title: '100 per page' },\\\\n  { value: '200', label: '200 per page', title: '200 per page' }\\\\n]\\\\n\\\\nconst columnOption = [\\\\n  { value: 'ascending', label: 'Sort Ascending', iconVariant: 'hide-menu-box' },\\\\n  {\\\\n    value: 'descending',\\\\n    label: 'Sort Descending',\\\\n    iconVariant: 'hub-location'\\\\n  },\\\\n  { value: 'hideColumn', label: 'Hide Column', iconVariant: 'close' },\\\\n  { value: 'pinLeft', label: 'Pin Left', iconVariant: 'angle-left' },\\\\n  { value: 'pinright', label: 'Pin Right', iconVariant: 'angle-right-thin' }\\\\n]\\\\n\\\\nconst options = [\\\\n  {\\\\n    value: 'emailVerificationPending',\\\\n    label: 'Email Verification Pending Shipper'\\\\n  },\\\\n  { value: 'allShippers', label: 'All Shippers' },\\\\n  { value: 'approvalPendingShippers', label: 'Approval Pending Shippers' }\\\\n]\\\\n\\\\nconst datePickerOptions = [\\\\n  { value: 'January', label: 'January' },\\\\n  { value: 'February', label: 'February' },\\\\n  { value: 'March', label: 'March' },\\\\n  { value: 'April', label: 'April' },\\\\n  { value: 'May', label: 'May' },\\\\n  { value: 'June', label: 'June' },\\\\n  { value: 'July', label: 'July' },\\\\n  { value: 'August', label: 'August' },\\\\n  { value: 'September', label: 'September' },\\\\n  { value: 'October', label: 'October' },\\\\n  { value: 'November', label: 'November' },\\\\n  { value: 'December', label: 'December' }\\\\n]\\\\n\\\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\\\nexport const ButtonDropdown = addSourceDecorator(() => (\\\\n  <ThemeWrapper>\\\\n    <Box p='2em' bgColor='grey.50'>\\\\n      <IconDropdown\\\\n        variant={text('varaint', 'button-dropdown') as tSelectVariant}\\\\n        optionList={object('optionList', ListViewOption)}\\\\n        width={text('width', '120px')}\\\\n        menuIsOpen={boolean('menuIsOpen', false)}\\\\n        iconButtonDetails={array('iconList', [\\\\n          'hide-menu-box',\\\\n          'More',\\\\n          'angle-down'\\\\n        ])}\\\\n        primary={boolean('primary', false)}\\\\n        intent={text('intent', 'page') as tIntent}\\\\n        onChange={action('Value Changed')}\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n        disabled={boolean('disabled', false)}\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\n        tooltipProps={{\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\n        }}\\\\n      />\\\\n    </Box>\\\\n  </ThemeWrapper>\\\\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\\\nexport const TextDropdown = addSourceDecorator(() => (\\\\n  <ThemeWrapper>\\\\n    <Box p='2em' bgColor='grey.50'>\\\\n      <IconDropdown\\\\n        variant={text('varaint', 'text-dropdown') as tSelectVariant}\\\\n        optionList={object('optionList', ListViewOption)}\\\\n        width={text('width', '120px')}\\\\n        menuIsOpen={boolean('menuIsOpen', false)}\\\\n        iconButtonDetails={array('iconList', [\\\\n          'hide-menu-box',\\\\n          'More',\\\\n          'angle-down'\\\\n        ])}\\\\n        primary={boolean('primary', false)}\\\\n        intent={text('intent', 'page') as tIntent}\\\\n        onChange={action('Value Changed')}\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n        disabled={boolean('disabled', false)}\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\n        tooltipProps={{\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\n        }}\\\\n      />\\\\n    </Box>\\\\n  </ThemeWrapper>\\\\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const MultiLevelBreadCrumb = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <IconDropdown\\\\n          variant={text('variant', 'multilevel-breadcrumb') as tSelectVariant}\\\\n          optionList={object('optionList', MultiLevelListViewOption)}\\\\n          onChange={action('Value selected')}\\\\n          value={text('value', 'strawberry')}\\\\n          width={text('width', '260px')}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n  }, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const MultiLevelButtonDropdown = addSourceDecorator(() => (\\\\n  <ThemeWrapper>\\\\n    <Box p='2em' bgColor='grey.50'>\\\\n      <IconDropdown\\\\n        variant={\\\\n          text('varaint', 'multilevel-button-dropdown') as tSelectVariant\\\\n        }\\\\n        optionList={object('optionList', MultiLevelListViewOption)}\\\\n        width={text('width', '120px')}\\\\n        menuIsOpen\\\\n        iconButtonDetails={array('iconList', [\\\\n          'hide-menu-box',\\\\n          'More',\\\\n          'angle-down'\\\\n        ])}\\\\n        defaultOpen='right'\\\\n        primary={boolean('primary', false)}\\\\n        intent={text('intent', 'page') as tIntent}\\\\n        handleClick={(id: any) => console.log('clicked from storybook', id)}\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n        disabled={boolean('disabled', false)}\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\n        tooltipProps={{\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\n        }}\\\\n      />\\\\n    </Box>\\\\n  </ThemeWrapper>\\\\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const PaginationDropdown = addSourceDecorator(() => (\\\\n  <ThemeWrapper>\\\\n    <CardComponent style={{ height: '300px' }}>\\\\n      <IconDropdown\\\\n        variant={text('variant', 'pagination-size') as tSelectVariant}\\\\n        optionList={object('optionList', paginationOptions)}\\\\n        onChange={action('Value selected')}\\\\n        value={text('value', '50')}\\\\n        width={text('width', '120px')}\\\\n      />\\\\n    </CardComponent>\\\\n  </ThemeWrapper>\\\\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const columnOptionComponent = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <div style={{ width: '200px', margin: 'auto' }}>\\\\n          <IconDropdown\\\\n            variant={text('variant', 'column-filter') as tSelectVariant}\\\\n            optionList={object('optionList', columnOption)}\\\\n            onChange={action('Value selected')}\\\\n            width={text('width', '10px')}\\\\n            isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n          />\\\\n        </div>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const BreadCrumbComponent = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <IconDropdown\\\\n          variant={text('variant', 'bread-crumb') as tSelectVariant}\\\\n          optionList={object('optionList', options)}\\\\n          onChange={action('Value selected')}\\\\n          value={text('value', 'strawberry')}\\\\n          width={text('width', '260px')}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const DatePickerDropDown = addSourceDecorator(() => (\\\\n  <ThemeWrapper>\\\\n    <CardComponent style={{ height: '200px' }}>\\\\n      <IconDropdown\\\\n        variant={text('variant', 'date-picker') as tSelectVariant}\\\\n        optionList={object('optionList', datePickerOptions)}\\\\n        onChange={action('Value selected')}\\\\n        value={text('value', '50')}\\\\n        width={text('width', '80px')}\\\\n        showDownArrow={boolean('Show Down Arrow', true)}\\\\n        isMultiRegionStyled={boolean('Is Multi Region Styled', false)}\\\\n      />\\\\n    </CardComponent>\\\\n  </ThemeWrapper>\\\\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\nconst arrayMap = [\\\\n  { variant: 'column-filter', name: 'column-filter0' },\\\\n  { variant: 'column-filter', name: 'column-filter1' },\\\\n  { variant: 'column-filter', name: 'column-filter2' }\\\\n]\\\\n\\\\nexport const columnOptionList = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <div style={{ width: '200px', margin: 'auto' }}>\\\\n          {arrayMap.map((obj: any, index: number) => {\\\\n            return (\\\\n              <IconDropdown\\\\n                variant={text('variant', obj?.variant) as tSelectVariant}\\\\n                optionList={object('optionList', columnOption)}\\\\n                onChange={action('Value selected')}\\\\n                width={text('width', '10px')}\\\\n                isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n                key={index}\\\\n              />\\\\n            )\\\\n          })}\\\\n        </div>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const DropdownUniversal = addSourceDecorator(() => {\\\\n  // reference to style\\\\n  // const theme = useContext(ThemeContext)\\\\n  // const borderBottom = `1px solid ${theme?.colors?.grey['A800']}`\\\\n  // const customStyle = {\\\\n  //   control: (provided: any) => ({\\\\n  //     ...provided,\\\\n  //     borderStyle: 'none',\\\\n  //     borderBottom,\\\\n  //     borderRadius: '0px',\\\\n  //     boxShadow: 'none',\\\\n  //     borderColor: theme?.colors?.grey?.A800,\\\\n  //     '&:focus': {\\\\n  //       borderStyle: 'none',\\\\n  //       borderBottom,\\\\n  //       boxShadow: 'none',\\\\n  //       borderColor: theme?.colors?.grey?.A800\\\\n  //     },\\\\n  //     '&:hover': {\\\\n  //       borderStyle: 'none',\\\\n  //       borderBottom,\\\\n  //       boxShadow: 'none',\\\\n  //       borderColor: theme?.colors?.grey?.A800\\\\n  //     }\\\\n  //   }),\\\\n  //   option: (provided: any, state: any) => ({\\\\n  //     ...provided,\\\\n  //     backgroundColor: state?.isSelected\\\\n  //       ? theme?.colors?.primary?.main\\\\n  //       : theme?.colors?.white,\\\\n  //     '&:hover': {\\\\n  //       backgroundColor: state?.isSelected\\\\n  //         ? theme?.colors?.primary?.main\\\\n  //         : theme?.colors?.grey['50']\\\\n  //     }\\\\n  //   }),\\\\n\\\\n  //   menu: (provided: any, state: any) => ({\\\\n  //     ...provided,\\\\n  //     backgroundColor: state?.isSelected\\\\n  //       ? theme.colors.primary.main\\\\n  //       : theme?.colors?.white,\\\\n  //     borderRadius: '2px',\\\\n  //     '&:hover': {\\\\n  //       backgroundColor: state?.isSelected\\\\n  //         ? theme?.colors?.primary?.main\\\\n  //         : theme?.colors?.white\\\\n  //     },\\\\n  //     marginTop: '5px',\\\\n  //     marginLeft: '16px',\\\\n  //     width: '90%'\\\\n  //   }),\\\\n  //   menuList: (provided: any) => ({\\\\n  //     ...provided,\\\\n  //     marginTop: '0px'\\\\n  //   }),\\\\n  //   valueContainer: (provided: any) => ({\\\\n  //     ...provided,\\\\n  //     padding: '0px'\\\\n  //   })\\\\n  // }\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <IconDropdown\\\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          width={text('width', '120px')}\\\\n          menuIsOpen={boolean('menuIsOpen', false)}\\\\n          primary={boolean('primary', false)}\\\\n          intent={text('intent', 'page') as tIntent}\\\\n          onChange={action('Value Changed')}\\\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n          disabled={boolean('disabled', false)}\\\\n          value='available'\\\\n          optionComponent={({ selectedOption }: any) => {\\\\n            return (\\\\n              <div>\\\\n                <div>{selectedOption?.color}</div>\\\\n                <div>{selectedOption?.label}</div>\\\\n              </div>\\\\n            )\\\\n          }}\\\\n          // customStyle={customStyle}\\\\n        >\\\\n          {({\\\\n            selectedOption,\\\\n            menuIsOpen,\\\\n            setMenuIsOpen\\\\n          }: IUniversalDropdownChildren) => {\\\\n            return (\\\\n              <Button\\\\n                onClick={() => {\\\\n                  setMenuIsOpen(!menuIsOpen)\\\\n                  action('Universal open/closed')(menuIsOpen)\\\\n                }}\\\\n                color={text('color', 'white')}\\\\n                bgColor={text('bgColor', 'black')}\\\\n                fullWidth={boolean('fullWidth', false)}\\\\n              >\\\\n                {selectedOption?.label}\\\\n              </Button>\\\\n            )\\\\n          }}\\\\n        </IconDropdown>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\\n\\\\nexport const TextFieldDropdown = addSourceDecorator(() => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <IconDropdown\\\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          width={text('width', '120px')}\\\\n          menuIsOpen={boolean('menuIsOpen', false)}\\\\n          primary={boolean('primary', false)}\\\\n          intent={text('intent', 'page') as tIntent}\\\\n          onChange={action('Value Changed')}\\\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n          disabled={boolean('disabled', false)}\\\\n          value='available'\\\\n          optionComponent={({ selectedOption }: any) => {\\\\n            return (\\\\n              <div>\\\\n                <div>{selectedOption?.color}</div>\\\\n                <div>{selectedOption?.label}</div>\\\\n              </div>\\\\n            )\\\\n          }}\\\\n          // customStyle={customStyle}\\\\n        >\\\\n          {({\\\\n            selectedOption,\\\\n            menuIsOpen,\\\\n            setMenuIsOpen\\\\n          }: IUniversalDropdownChildren) => {\\\\n            return (\\\\n              <TextInput\\\\n                id='someId'\\\\n                name='someName'\\\\n                className='someClassName'\\\\n                label={text('label', 'Username')}\\\\n                labelColor={text('labelColor', 'text.inputLabel.default')}\\\\n                placeholder={text('placeholder', 'Enter text here...')}\\\\n                maxLength={number('maxLength', 10)}\\\\n                error={boolean('error', false)}\\\\n                errorMessage={text('errorMessage', '')}\\\\n                required={boolean('required', false)}\\\\n                fullWidth={boolean('fullWidth', false)}\\\\n                onChange={action('Triggered: onChange')}\\\\n                onClick={() => {\\\\n                  setMenuIsOpen(!menuIsOpen)\\\\n                  action('universal open/closed')(menuIsOpen)\\\\n                }}\\\\n                value={selectedOption?.value}\\\\n              />\\\\n            )\\\\n          }}\\\\n        </IconDropdown>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\",\\\"locationsMap\\\":{}},\\\"storySource\\\":{\\\"source\\\":\\\"import { action } from '@storybook/addon-actions'\\\\nimport {\\\\n  array,\\\\n  boolean,\\\\n  number,\\\\n  object,\\\\n  text,\\\\n  withKnobs\\\\n} from '@storybook/addon-knobs'\\\\nimport React from 'react'\\\\nimport IconDropdown from '.'\\\\nimport { path } from '..'\\\\nimport { Box } from '../../..'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport Button, { tIntent } from '../../atoms/Button'\\\\nimport CardComponent from '../../atoms/Card'\\\\nimport { tPlacement } from '../../../utilities/types'\\\\nimport {\\\\n  IUniversalDropdownChildren,\\\\n  tSelectVariant\\\\n} from '../DropDown/interface'\\\\nimport TextInput from '../TextInput'\\\\n\\\\nexport default {\\\\n  title: `${path}/IconDropdown`,\\\\n  decorators: [withKnobs],\\\\n  component: IconDropdown\\\\n}\\\\n\\\\nconst ListViewOption = [\\\\n  {\\\\n    value: 'available',\\\\n    label: 'Mark As Available',\\\\n    color: 'blue',\\\\n    tooltipText: 'Mark As Available',\\\\n    isDisabled: true\\\\n  },\\\\n  {\\\\n    value: 'unavailable',\\\\n    label: 'Mark As Unavailable',\\\\n    color: 'red',\\\\n    tooltipText: 'Mark As Unavailable'\\\\n  },\\\\n  {\\\\n    value: 'active',\\\\n    label: 'Mark As Active',\\\\n    color: 'purple',\\\\n    tooltipText: 'Mark As Active'\\\\n  },\\\\n  {\\\\n    value: 'inactive',\\\\n    label: 'Mark As Inactive',\\\\n    color: 'green',\\\\n    tooltipText: 'Mark As Inactive'\\\\n  }\\\\n]\\\\n\\\\nconst MultiLevelListViewOption = [\\\\n  {\\\\n    id: 'available',\\\\n    value: 'available',\\\\n    label: 'Mark As Available',\\\\n    color: 'blue',\\\\n    tooltipText: 'Mark As Available',\\\\n    options: [\\\\n      {\\\\n        id: 'available',\\\\n        value: 'available',\\\\n        label: 'Mark As Child Available',\\\\n        color: 'blue',\\\\n        tooltipText: 'Mark As Child Available'\\\\n      },\\\\n      {\\\\n        id: 'unavailable',\\\\n        value: 'unavailable',\\\\n        label: 'Mark As Child Unavailable',\\\\n        color: 'red',\\\\n        tooltipText: 'Mark As Child Unavailable'\\\\n      },\\\\n      {\\\\n        id: 'active',\\\\n        value: 'active',\\\\n        label: 'Mark As Child Active',\\\\n        color: 'purple',\\\\n        tooltipText: 'Mark As Child Active'\\\\n      },\\\\n      {\\\\n        id: 'inactive',\\\\n        value: 'inactive',\\\\n        label: 'Mark As Child Inactive',\\\\n        color: 'green',\\\\n        tooltipText: 'Mark As Child Inactive',\\\\n        options: [\\\\n          {\\\\n            id: 'available',\\\\n            value: 'available',\\\\n            label: 'Mark As Grand Child Available',\\\\n            color: 'blue',\\\\n            tooltipText: 'Mark As Grand Child Available'\\\\n          },\\\\n          {\\\\n            id: 'unavailable',\\\\n            value: 'unavailable',\\\\n            label: 'Mark As Grand Child Unavailable',\\\\n            color: 'red',\\\\n            tooltipText: 'Mark As Grand Child Unavailable'\\\\n          }\\\\n        ]\\\\n      }\\\\n    ]\\\\n  },\\\\n  {\\\\n    id: 'unavailable',\\\\n    value: 'unavailable',\\\\n    label: 'Mark As Unavailable',\\\\n    color: 'red',\\\\n    tooltipText: 'Mark As Unavailable'\\\\n  },\\\\n  {\\\\n    id: 'active',\\\\n    value: 'active',\\\\n    label: 'Mark As Active',\\\\n    color: 'purple',\\\\n    tooltipText: 'Mark As Active'\\\\n  },\\\\n  {\\\\n    id: 'inactive',\\\\n    value: 'inactive',\\\\n    label: 'Mark As Inactive',\\\\n    color: 'green',\\\\n    tooltipText: 'Mark As Inactive'\\\\n  }\\\\n]\\\\n\\\\nconst paginationOptions = [\\\\n  { value: '25', label: '25 per page', title: '25 per page' },\\\\n  { value: '50', label: '50 per page', title: '50 per page' },\\\\n  { value: '100', label: '100 per page', title: '100 per page' },\\\\n  { value: '200', label: '200 per page', title: '200 per page' }\\\\n]\\\\n\\\\nconst columnOption = [\\\\n  { value: 'ascending', label: 'Sort Ascending', iconVariant: 'hide-menu-box' },\\\\n  {\\\\n    value: 'descending',\\\\n    label: 'Sort Descending',\\\\n    iconVariant: 'hub-location'\\\\n  },\\\\n  { value: 'hideColumn', label: 'Hide Column', iconVariant: 'close' },\\\\n  { value: 'pinLeft', label: 'Pin Left', iconVariant: 'angle-left' },\\\\n  { value: 'pinright', label: 'Pin Right', iconVariant: 'angle-right-thin' }\\\\n]\\\\n\\\\nconst options = [\\\\n  {\\\\n    value: 'emailVerificationPending',\\\\n    label: 'Email Verification Pending Shipper'\\\\n  },\\\\n  { value: 'allShippers', label: 'All Shippers' },\\\\n  { value: 'approvalPendingShippers', label: 'Approval Pending Shippers' }\\\\n]\\\\n\\\\nconst datePickerOptions = [\\\\n  { value: 'January', label: 'January' },\\\\n  { value: 'February', label: 'February' },\\\\n  { value: 'March', label: 'March' },\\\\n  { value: 'April', label: 'April' },\\\\n  { value: 'May', label: 'May' },\\\\n  { value: 'June', label: 'June' },\\\\n  { value: 'July', label: 'July' },\\\\n  { value: 'August', label: 'August' },\\\\n  { value: 'September', label: 'September' },\\\\n  { value: 'October', label: 'October' },\\\\n  { value: 'November', label: 'November' },\\\\n  { value: 'December', label: 'December' }\\\\n]\\\\n\\\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\\\nexport const ButtonDropdown = () => (\\\\n  <ThemeWrapper>\\\\n    <Box p='2em' bgColor='grey.50'>\\\\n      <IconDropdown\\\\n        variant={text('varaint', 'button-dropdown') as tSelectVariant}\\\\n        optionList={object('optionList', ListViewOption)}\\\\n        width={text('width', '120px')}\\\\n        menuIsOpen={boolean('menuIsOpen', false)}\\\\n        iconButtonDetails={array('iconList', [\\\\n          'hide-menu-box',\\\\n          'More',\\\\n          'angle-down'\\\\n        ])}\\\\n        primary={boolean('primary', false)}\\\\n        intent={text('intent', 'page') as tIntent}\\\\n        onChange={action('Value Changed')}\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n        disabled={boolean('disabled', false)}\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\n        tooltipProps={{\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\n        }}\\\\n      />\\\\n    </Box>\\\\n  </ThemeWrapper>\\\\n)\\\\n\\\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\\\nexport const TextDropdown = () => (\\\\n  <ThemeWrapper>\\\\n    <Box p='2em' bgColor='grey.50'>\\\\n      <IconDropdown\\\\n        variant={text('varaint', 'text-dropdown') as tSelectVariant}\\\\n        optionList={object('optionList', ListViewOption)}\\\\n        width={text('width', '120px')}\\\\n        menuIsOpen={boolean('menuIsOpen', false)}\\\\n        iconButtonDetails={array('iconList', [\\\\n          'hide-menu-box',\\\\n          'More',\\\\n          'angle-down'\\\\n        ])}\\\\n        primary={boolean('primary', false)}\\\\n        intent={text('intent', 'page') as tIntent}\\\\n        onChange={action('Value Changed')}\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n        disabled={boolean('disabled', false)}\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\n        tooltipProps={{\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\n        }}\\\\n      />\\\\n    </Box>\\\\n  </ThemeWrapper>\\\\n)\\\\n\\\\nexport const MultiLevelBreadCrumb = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <IconDropdown\\\\n          variant={text('variant', 'multilevel-breadcrumb') as tSelectVariant}\\\\n          optionList={object('optionList', MultiLevelListViewOption)}\\\\n          onChange={action('Value selected')}\\\\n          value={text('value', 'strawberry')}\\\\n          width={text('width', '260px')}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n  }\\\\n\\\\nexport const MultiLevelButtonDropdown = () => (\\\\n  <ThemeWrapper>\\\\n    <Box p='2em' bgColor='grey.50'>\\\\n      <IconDropdown\\\\n        variant={\\\\n          text('varaint', 'multilevel-button-dropdown') as tSelectVariant\\\\n        }\\\\n        optionList={object('optionList', MultiLevelListViewOption)}\\\\n        width={text('width', '120px')}\\\\n        menuIsOpen\\\\n        iconButtonDetails={array('iconList', [\\\\n          'hide-menu-box',\\\\n          'More',\\\\n          'angle-down'\\\\n        ])}\\\\n        defaultOpen='right'\\\\n        primary={boolean('primary', false)}\\\\n        intent={text('intent', 'page') as tIntent}\\\\n        handleClick={(id: any) => console.log('clicked from storybook', id)}\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n        disabled={boolean('disabled', false)}\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\n        tooltipProps={{\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\n        }}\\\\n      />\\\\n    </Box>\\\\n  </ThemeWrapper>\\\\n)\\\\n\\\\nexport const PaginationDropdown = () => (\\\\n  <ThemeWrapper>\\\\n    <CardComponent style={{ height: '300px' }}>\\\\n      <IconDropdown\\\\n        variant={text('variant', 'pagination-size') as tSelectVariant}\\\\n        optionList={object('optionList', paginationOptions)}\\\\n        onChange={action('Value selected')}\\\\n        value={text('value', '50')}\\\\n        width={text('width', '120px')}\\\\n      />\\\\n    </CardComponent>\\\\n  </ThemeWrapper>\\\\n)\\\\n\\\\nexport const columnOptionComponent = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <div style={{ width: '200px', margin: 'auto' }}>\\\\n          <IconDropdown\\\\n            variant={text('variant', 'column-filter') as tSelectVariant}\\\\n            optionList={object('optionList', columnOption)}\\\\n            onChange={action('Value selected')}\\\\n            width={text('width', '10px')}\\\\n            isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n          />\\\\n        </div>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const BreadCrumbComponent = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <IconDropdown\\\\n          variant={text('variant', 'bread-crumb') as tSelectVariant}\\\\n          optionList={object('optionList', options)}\\\\n          onChange={action('Value selected')}\\\\n          value={text('value', 'strawberry')}\\\\n          width={text('width', '260px')}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const DatePickerDropDown = () => (\\\\n  <ThemeWrapper>\\\\n    <CardComponent style={{ height: '200px' }}>\\\\n      <IconDropdown\\\\n        variant={text('variant', 'date-picker') as tSelectVariant}\\\\n        optionList={object('optionList', datePickerOptions)}\\\\n        onChange={action('Value selected')}\\\\n        value={text('value', '50')}\\\\n        width={text('width', '80px')}\\\\n        showDownArrow={boolean('Show Down Arrow', true)}\\\\n        isMultiRegionStyled={boolean('Is Multi Region Styled', false)}\\\\n      />\\\\n    </CardComponent>\\\\n  </ThemeWrapper>\\\\n)\\\\nconst arrayMap = [\\\\n  { variant: 'column-filter', name: 'column-filter0' },\\\\n  { variant: 'column-filter', name: 'column-filter1' },\\\\n  { variant: 'column-filter', name: 'column-filter2' }\\\\n]\\\\n\\\\nexport const columnOptionList = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <div style={{ width: '200px', margin: 'auto' }}>\\\\n          {arrayMap.map((obj: any, index: number) => {\\\\n            return (\\\\n              <IconDropdown\\\\n                variant={text('variant', obj?.variant) as tSelectVariant}\\\\n                optionList={object('optionList', columnOption)}\\\\n                onChange={action('Value selected')}\\\\n                width={text('width', '10px')}\\\\n                isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n                key={index}\\\\n              />\\\\n            )\\\\n          })}\\\\n        </div>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const DropdownUniversal = () => {\\\\n  // reference to style\\\\n  // const theme = useContext(ThemeContext)\\\\n  // const borderBottom = `1px solid ${theme?.colors?.grey['A800']}`\\\\n  // const customStyle = {\\\\n  //   control: (provided: any) => ({\\\\n  //     ...provided,\\\\n  //     borderStyle: 'none',\\\\n  //     borderBottom,\\\\n  //     borderRadius: '0px',\\\\n  //     boxShadow: 'none',\\\\n  //     borderColor: theme?.colors?.grey?.A800,\\\\n  //     '&:focus': {\\\\n  //       borderStyle: 'none',\\\\n  //       borderBottom,\\\\n  //       boxShadow: 'none',\\\\n  //       borderColor: theme?.colors?.grey?.A800\\\\n  //     },\\\\n  //     '&:hover': {\\\\n  //       borderStyle: 'none',\\\\n  //       borderBottom,\\\\n  //       boxShadow: 'none',\\\\n  //       borderColor: theme?.colors?.grey?.A800\\\\n  //     }\\\\n  //   }),\\\\n  //   option: (provided: any, state: any) => ({\\\\n  //     ...provided,\\\\n  //     backgroundColor: state?.isSelected\\\\n  //       ? theme?.colors?.primary?.main\\\\n  //       : theme?.colors?.white,\\\\n  //     '&:hover': {\\\\n  //       backgroundColor: state?.isSelected\\\\n  //         ? theme?.colors?.primary?.main\\\\n  //         : theme?.colors?.grey['50']\\\\n  //     }\\\\n  //   }),\\\\n\\\\n  //   menu: (provided: any, state: any) => ({\\\\n  //     ...provided,\\\\n  //     backgroundColor: state?.isSelected\\\\n  //       ? theme.colors.primary.main\\\\n  //       : theme?.colors?.white,\\\\n  //     borderRadius: '2px',\\\\n  //     '&:hover': {\\\\n  //       backgroundColor: state?.isSelected\\\\n  //         ? theme?.colors?.primary?.main\\\\n  //         : theme?.colors?.white\\\\n  //     },\\\\n  //     marginTop: '5px',\\\\n  //     marginLeft: '16px',\\\\n  //     width: '90%'\\\\n  //   }),\\\\n  //   menuList: (provided: any) => ({\\\\n  //     ...provided,\\\\n  //     marginTop: '0px'\\\\n  //   }),\\\\n  //   valueContainer: (provided: any) => ({\\\\n  //     ...provided,\\\\n  //     padding: '0px'\\\\n  //   })\\\\n  // }\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <IconDropdown\\\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          width={text('width', '120px')}\\\\n          menuIsOpen={boolean('menuIsOpen', false)}\\\\n          primary={boolean('primary', false)}\\\\n          intent={text('intent', 'page') as tIntent}\\\\n          onChange={action('Value Changed')}\\\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n          disabled={boolean('disabled', false)}\\\\n          value='available'\\\\n          optionComponent={({ selectedOption }: any) => {\\\\n            return (\\\\n              <div>\\\\n                <div>{selectedOption?.color}</div>\\\\n                <div>{selectedOption?.label}</div>\\\\n              </div>\\\\n            )\\\\n          }}\\\\n          // customStyle={customStyle}\\\\n        >\\\\n          {({\\\\n            selectedOption,\\\\n            menuIsOpen,\\\\n            setMenuIsOpen\\\\n          }: IUniversalDropdownChildren) => {\\\\n            return (\\\\n              <Button\\\\n                onClick={() => {\\\\n                  setMenuIsOpen(!menuIsOpen)\\\\n                  action('Universal open/closed')(menuIsOpen)\\\\n                }}\\\\n                color={text('color', 'white')}\\\\n                bgColor={text('bgColor', 'black')}\\\\n                fullWidth={boolean('fullWidth', false)}\\\\n              >\\\\n                {selectedOption?.label}\\\\n              </Button>\\\\n            )\\\\n          }}\\\\n        </IconDropdown>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const TextFieldDropdown = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <IconDropdown\\\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          width={text('width', '120px')}\\\\n          menuIsOpen={boolean('menuIsOpen', false)}\\\\n          primary={boolean('primary', false)}\\\\n          intent={text('intent', 'page') as tIntent}\\\\n          onChange={action('Value Changed')}\\\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n          disabled={boolean('disabled', false)}\\\\n          value='available'\\\\n          optionComponent={({ selectedOption }: any) => {\\\\n            return (\\\\n              <div>\\\\n                <div>{selectedOption?.color}</div>\\\\n                <div>{selectedOption?.label}</div>\\\\n              </div>\\\\n            )\\\\n          }}\\\\n          // customStyle={customStyle}\\\\n        >\\\\n          {({\\\\n            selectedOption,\\\\n            menuIsOpen,\\\\n            setMenuIsOpen\\\\n          }: IUniversalDropdownChildren) => {\\\\n            return (\\\\n              <TextInput\\\\n                id='someId'\\\\n                name='someName'\\\\n                className='someClassName'\\\\n                label={text('label', 'Username')}\\\\n                labelColor={text('labelColor', 'text.inputLabel.default')}\\\\n                placeholder={text('placeholder', 'Enter text here...')}\\\\n                maxLength={number('maxLength', 10)}\\\\n                error={boolean('error', false)}\\\\n                errorMessage={text('errorMessage', '')}\\\\n                required={boolean('required', false)}\\\\n                fullWidth={boolean('fullWidth', false)}\\\\n                onChange={action('Triggered: onChange')}\\\\n                onClick={() => {\\\\n                  setMenuIsOpen(!menuIsOpen)\\\\n                  action('universal open/closed')(menuIsOpen)\\\\n                }}\\\\n                value={selectedOption?.value}\\\\n              />\\\\n            )\\\\n          }}\\\\n        </IconDropdown>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\",\\\"locationsMap\\\":{}},},\\n  title: `${path}/IconDropdown`,\\n  decorators: [withKnobs],\\n  component: IconDropdown\\n}\\n\\nconst ListViewOption = [\\n  {\\n    value: 'available',\\n    label: 'Mark As Available',\\n    color: 'blue',\\n    tooltipText: 'Mark As Available',\\n    isDisabled: true\\n  },\\n  {\\n    value: 'unavailable',\\n    label: 'Mark As Unavailable',\\n    color: 'red',\\n    tooltipText: 'Mark As Unavailable'\\n  },\\n  {\\n    value: 'active',\\n    label: 'Mark As Active',\\n    color: 'purple',\\n    tooltipText: 'Mark As Active'\\n  },\\n  {\\n    value: 'inactive',\\n    label: 'Mark As Inactive',\\n    color: 'green',\\n    tooltipText: 'Mark As Inactive'\\n  }\\n]\\n\\nconst MultiLevelListViewOption = [\\n  {\\n    id: 'available',\\n    value: 'available',\\n    label: 'Mark As Available',\\n    color: 'blue',\\n    tooltipText: 'Mark As Available',\\n    options: [\\n      {\\n        id: 'available',\\n        value: 'available',\\n        label: 'Mark As Child Available',\\n        color: 'blue',\\n        tooltipText: 'Mark As Child Available'\\n      },\\n      {\\n        id: 'unavailable',\\n        value: 'unavailable',\\n        label: 'Mark As Child Unavailable',\\n        color: 'red',\\n        tooltipText: 'Mark As Child Unavailable'\\n      },\\n      {\\n        id: 'active',\\n        value: 'active',\\n        label: 'Mark As Child Active',\\n        color: 'purple',\\n        tooltipText: 'Mark As Child Active'\\n      },\\n      {\\n        id: 'inactive',\\n        value: 'inactive',\\n        label: 'Mark As Child Inactive',\\n        color: 'green',\\n        tooltipText: 'Mark As Child Inactive',\\n        options: [\\n          {\\n            id: 'available',\\n            value: 'available',\\n            label: 'Mark As Grand Child Available',\\n            color: 'blue',\\n            tooltipText: 'Mark As Grand Child Available'\\n          },\\n          {\\n            id: 'unavailable',\\n            value: 'unavailable',\\n            label: 'Mark As Grand Child Unavailable',\\n            color: 'red',\\n            tooltipText: 'Mark As Grand Child Unavailable'\\n          }\\n        ]\\n      }\\n    ]\\n  },\\n  {\\n    id: 'unavailable',\\n    value: 'unavailable',\\n    label: 'Mark As Unavailable',\\n    color: 'red',\\n    tooltipText: 'Mark As Unavailable'\\n  },\\n  {\\n    id: 'active',\\n    value: 'active',\\n    label: 'Mark As Active',\\n    color: 'purple',\\n    tooltipText: 'Mark As Active'\\n  },\\n  {\\n    id: 'inactive',\\n    value: 'inactive',\\n    label: 'Mark As Inactive',\\n    color: 'green',\\n    tooltipText: 'Mark As Inactive'\\n  }\\n]\\n\\nconst paginationOptions = [\\n  { value: '25', label: '25 per page', title: '25 per page' },\\n  { value: '50', label: '50 per page', title: '50 per page' },\\n  { value: '100', label: '100 per page', title: '100 per page' },\\n  { value: '200', label: '200 per page', title: '200 per page' }\\n]\\n\\nconst columnOption = [\\n  { value: 'ascending', label: 'Sort Ascending', iconVariant: 'hide-menu-box' },\\n  {\\n    value: 'descending',\\n    label: 'Sort Descending',\\n    iconVariant: 'hub-location'\\n  },\\n  { value: 'hideColumn', label: 'Hide Column', iconVariant: 'close' },\\n  { value: 'pinLeft', label: 'Pin Left', iconVariant: 'angle-left' },\\n  { value: 'pinright', label: 'Pin Right', iconVariant: 'angle-right-thin' }\\n]\\n\\nconst options = [\\n  {\\n    value: 'emailVerificationPending',\\n    label: 'Email Verification Pending Shipper'\\n  },\\n  { value: 'allShippers', label: 'All Shippers' },\\n  { value: 'approvalPendingShippers', label: 'Approval Pending Shippers' }\\n]\\n\\nconst datePickerOptions = [\\n  { value: 'January', label: 'January' },\\n  { value: 'February', label: 'February' },\\n  { value: 'March', label: 'March' },\\n  { value: 'April', label: 'April' },\\n  { value: 'May', label: 'May' },\\n  { value: 'June', label: 'June' },\\n  { value: 'July', label: 'July' },\\n  { value: 'August', label: 'August' },\\n  { value: 'September', label: 'September' },\\n  { value: 'October', label: 'October' },\\n  { value: 'November', label: 'November' },\\n  { value: 'December', label: 'December' }\\n]\\n\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\nexport const ButtonDropdown = addSourceDecorator(addSourceDecorator(() => (\\n  <ThemeWrapper>\\n    <Box p='2em' bgColor='grey.50'>\\n      <IconDropdown\\n        variant={text('varaint', 'button-dropdown') as tSelectVariant}\\n        optionList={object('optionList', ListViewOption)}\\n        width={text('width', '120px')}\\n        menuIsOpen={boolean('menuIsOpen', false)}\\n        iconButtonDetails={array('iconList', [\\n          'hide-menu-box',\\n          'More',\\n          'angle-down'\\n        ])}\\n        primary={boolean('primary', false)}\\n        intent={text('intent', 'page') as tIntent}\\n        onChange={action('Value Changed')}\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\n        disabled={boolean('disabled', false)}\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\n        tooltipProps={{\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\n        }}\\n      />\\n    </Box>\\n  </ThemeWrapper>\\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\nexport const TextDropdown = addSourceDecorator(addSourceDecorator(() => (\\n  <ThemeWrapper>\\n    <Box p='2em' bgColor='grey.50'>\\n      <IconDropdown\\n        variant={text('varaint', 'text-dropdown') as tSelectVariant}\\n        optionList={object('optionList', ListViewOption)}\\n        width={text('width', '120px')}\\n        menuIsOpen={boolean('menuIsOpen', false)}\\n        iconButtonDetails={array('iconList', [\\n          'hide-menu-box',\\n          'More',\\n          'angle-down'\\n        ])}\\n        primary={boolean('primary', false)}\\n        intent={text('intent', 'page') as tIntent}\\n        onChange={action('Value Changed')}\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\n        disabled={boolean('disabled', false)}\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\n        tooltipProps={{\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\n        }}\\n      />\\n    </Box>\\n  </ThemeWrapper>\\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const MultiLevelBreadCrumb = addSourceDecorator(addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='2em' bgColor='grey.50'>\\n        <IconDropdown\\n          variant={text('variant', 'multilevel-breadcrumb') as tSelectVariant}\\n          optionList={object('optionList', MultiLevelListViewOption)}\\n          onChange={action('Value selected')}\\n          value={text('value', 'strawberry')}\\n          width={text('width', '260px')}\\n        />\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n  }, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const MultiLevelButtonDropdown = addSourceDecorator(addSourceDecorator(() => (\\n  <ThemeWrapper>\\n    <Box p='2em' bgColor='grey.50'>\\n      <IconDropdown\\n        variant={\\n          text('varaint', 'multilevel-button-dropdown') as tSelectVariant\\n        }\\n        optionList={object('optionList', MultiLevelListViewOption)}\\n        width={text('width', '120px')}\\n        menuIsOpen\\n        iconButtonDetails={array('iconList', [\\n          'hide-menu-box',\\n          'More',\\n          'angle-down'\\n        ])}\\n        defaultOpen='right'\\n        primary={boolean('primary', false)}\\n        intent={text('intent', 'page') as tIntent}\\n        handleClick={(id: any) => console.log('clicked from storybook', id)}\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\n        disabled={boolean('disabled', false)}\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\n        tooltipProps={{\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\n        }}\\n      />\\n    </Box>\\n  </ThemeWrapper>\\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const PaginationDropdown = addSourceDecorator(addSourceDecorator(() => (\\n  <ThemeWrapper>\\n    <CardComponent style={{ height: '300px' }}>\\n      <IconDropdown\\n        variant={text('variant', 'pagination-size') as tSelectVariant}\\n        optionList={object('optionList', paginationOptions)}\\n        onChange={action('Value selected')}\\n        value={text('value', '50')}\\n        width={text('width', '120px')}\\n      />\\n    </CardComponent>\\n  </ThemeWrapper>\\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const columnOptionComponent = addSourceDecorator(addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='2em' bgColor='grey.50'>\\n        <div style={{ width: '200px', margin: 'auto' }}>\\n          <IconDropdown\\n            variant={text('variant', 'column-filter') as tSelectVariant}\\n            optionList={object('optionList', columnOption)}\\n            onChange={action('Value selected')}\\n            width={text('width', '10px')}\\n            isSingleClickOption={boolean('isSingleClickOption', true)}\\n          />\\n        </div>\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const BreadCrumbComponent = addSourceDecorator(addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='2em' bgColor='grey.50'>\\n        <IconDropdown\\n          variant={text('variant', 'bread-crumb') as tSelectVariant}\\n          optionList={object('optionList', options)}\\n          onChange={action('Value selected')}\\n          value={text('value', 'strawberry')}\\n          width={text('width', '260px')}\\n        />\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const DatePickerDropDown = addSourceDecorator(addSourceDecorator(() => (\\n  <ThemeWrapper>\\n    <CardComponent style={{ height: '200px' }}>\\n      <IconDropdown\\n        variant={text('variant', 'date-picker') as tSelectVariant}\\n        optionList={object('optionList', datePickerOptions)}\\n        onChange={action('Value selected')}\\n        value={text('value', '50')}\\n        width={text('width', '80px')}\\n        showDownArrow={boolean('Show Down Arrow', true)}\\n        isMultiRegionStyled={boolean('Is Multi Region Styled', false)}\\n      />\\n    </CardComponent>\\n  </ThemeWrapper>\\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\nconst arrayMap = [\\n  { variant: 'column-filter', name: 'column-filter0' },\\n  { variant: 'column-filter', name: 'column-filter1' },\\n  { variant: 'column-filter', name: 'column-filter2' }\\n]\\n\\nexport const columnOptionList = addSourceDecorator(addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='2em' bgColor='grey.50'>\\n        <div style={{ width: '200px', margin: 'auto' }}>\\n          {arrayMap.map((obj: any, index: number) => {\\n            return (\\n              <IconDropdown\\n                variant={text('variant', obj?.variant) as tSelectVariant}\\n                optionList={object('optionList', columnOption)}\\n                onChange={action('Value selected')}\\n                width={text('width', '10px')}\\n                isSingleClickOption={boolean('isSingleClickOption', true)}\\n                key={index}\\n              />\\n            )\\n          })}\\n        </div>\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const DropdownUniversal = addSourceDecorator(addSourceDecorator(() => {\\n  // reference to style\\n  // const theme = useContext(ThemeContext)\\n  // const borderBottom = `1px solid ${theme?.colors?.grey['A800']}`\\n  // const customStyle = {\\n  //   control: (provided: any) => ({\\n  //     ...provided,\\n  //     borderStyle: 'none',\\n  //     borderBottom,\\n  //     borderRadius: '0px',\\n  //     boxShadow: 'none',\\n  //     borderColor: theme?.colors?.grey?.A800,\\n  //     '&:focus': {\\n  //       borderStyle: 'none',\\n  //       borderBottom,\\n  //       boxShadow: 'none',\\n  //       borderColor: theme?.colors?.grey?.A800\\n  //     },\\n  //     '&:hover': {\\n  //       borderStyle: 'none',\\n  //       borderBottom,\\n  //       boxShadow: 'none',\\n  //       borderColor: theme?.colors?.grey?.A800\\n  //     }\\n  //   }),\\n  //   option: (provided: any, state: any) => ({\\n  //     ...provided,\\n  //     backgroundColor: state?.isSelected\\n  //       ? theme?.colors?.primary?.main\\n  //       : theme?.colors?.white,\\n  //     '&:hover': {\\n  //       backgroundColor: state?.isSelected\\n  //         ? theme?.colors?.primary?.main\\n  //         : theme?.colors?.grey['50']\\n  //     }\\n  //   }),\\n\\n  //   menu: (provided: any, state: any) => ({\\n  //     ...provided,\\n  //     backgroundColor: state?.isSelected\\n  //       ? theme.colors.primary.main\\n  //       : theme?.colors?.white,\\n  //     borderRadius: '2px',\\n  //     '&:hover': {\\n  //       backgroundColor: state?.isSelected\\n  //         ? theme?.colors?.primary?.main\\n  //         : theme?.colors?.white\\n  //     },\\n  //     marginTop: '5px',\\n  //     marginLeft: '16px',\\n  //     width: '90%'\\n  //   }),\\n  //   menuList: (provided: any) => ({\\n  //     ...provided,\\n  //     marginTop: '0px'\\n  //   }),\\n  //   valueContainer: (provided: any) => ({\\n  //     ...provided,\\n  //     padding: '0px'\\n  //   })\\n  // }\\n  return (\\n    <ThemeWrapper>\\n      <Box p='2em' bgColor='grey.50'>\\n        <IconDropdown\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\n          optionList={object('optionList', ListViewOption)}\\n          width={text('width', '120px')}\\n          menuIsOpen={boolean('menuIsOpen', false)}\\n          primary={boolean('primary', false)}\\n          intent={text('intent', 'page') as tIntent}\\n          onChange={action('Value Changed')}\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\n          disabled={boolean('disabled', false)}\\n          value='available'\\n          optionComponent={({ selectedOption }: any) => {\\n            return (\\n              <div>\\n                <div>{selectedOption?.color}</div>\\n                <div>{selectedOption?.label}</div>\\n              </div>\\n            )\\n          }}\\n          // customStyle={customStyle}\\n        >\\n          {({\\n            selectedOption,\\n            menuIsOpen,\\n            setMenuIsOpen\\n          }: IUniversalDropdownChildren) => {\\n            return (\\n              <Button\\n                onClick={() => {\\n                  setMenuIsOpen(!menuIsOpen)\\n                  action('Universal open/closed')(menuIsOpen)\\n                }}\\n                color={text('color', 'white')}\\n                bgColor={text('bgColor', 'black')}\\n                fullWidth={boolean('fullWidth', false)}\\n              >\\n                {selectedOption?.label}\\n              </Button>\\n            )\\n          }}\\n        </IconDropdown>\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const TextFieldDropdown = addSourceDecorator(addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='2em' bgColor='grey.50'>\\n        <IconDropdown\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\n          optionList={object('optionList', ListViewOption)}\\n          width={text('width', '120px')}\\n          menuIsOpen={boolean('menuIsOpen', false)}\\n          primary={boolean('primary', false)}\\n          intent={text('intent', 'page') as tIntent}\\n          onChange={action('Value Changed')}\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\n          disabled={boolean('disabled', false)}\\n          value='available'\\n          optionComponent={({ selectedOption }: any) => {\\n            return (\\n              <div>\\n                <div>{selectedOption?.color}</div>\\n                <div>{selectedOption?.label}</div>\\n              </div>\\n            )\\n          }}\\n          // customStyle={customStyle}\\n        >\\n          {({\\n            selectedOption,\\n            menuIsOpen,\\n            setMenuIsOpen\\n          }: IUniversalDropdownChildren) => {\\n            return (\\n              <TextInput\\n                id='someId'\\n                name='someName'\\n                className='someClassName'\\n                label={text('label', 'Username')}\\n                labelColor={text('labelColor', 'text.inputLabel.default')}\\n                placeholder={text('placeholder', 'Enter text here...')}\\n                maxLength={number('maxLength', 10)}\\n                error={boolean('error', false)}\\n                errorMessage={text('errorMessage', '')}\\n                required={boolean('required', false)}\\n                fullWidth={boolean('fullWidth', false)}\\n                onChange={action('Triggered: onChange')}\\n                onClick={() => {\\n                  setMenuIsOpen(!menuIsOpen)\\n                  action('universal open/closed')(menuIsOpen)\\n                }}\\n                value={selectedOption?.value}\\n              />\\n            )\\n          }}\\n        </IconDropdown>\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\",\"locationsMap\":{}},\"storySource\":{\"source\":\"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/farhanansari/Code/ui-library/src/components/molecules/IconDropdown\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"import { action } from '@storybook/addon-actions'\\\\nimport {\\\\n  array,\\\\n  boolean,\\\\n  number,\\\\n  object,\\\\n  text,\\\\n  withKnobs\\\\n} from '@storybook/addon-knobs'\\\\nimport React from 'react'\\\\nimport IconDropdown from '.'\\\\nimport { path } from '..'\\\\nimport { Box } from '../../..'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport Button, { tIntent } from '../../atoms/Button'\\\\nimport CardComponent from '../../atoms/Card'\\\\nimport { tPlacement } from '../../../utilities/types'\\\\nimport {\\\\n  IUniversalDropdownChildren,\\\\n  tSelectVariant\\\\n} from '../DropDown/interface'\\\\nimport TextInput from '../TextInput'\\\\n\\\\nexport default {\\\\n  title: `${path}/IconDropdown`,\\\\n  decorators: [withKnobs],\\\\n  component: IconDropdown\\\\n}\\\\n\\\\nconst ListViewOption = [\\\\n  {\\\\n    value: 'available',\\\\n    label: 'Mark As Available',\\\\n    color: 'blue',\\\\n    tooltipText: 'Mark As Available',\\\\n    isDisabled: true\\\\n  },\\\\n  {\\\\n    value: 'unavailable',\\\\n    label: 'Mark As Unavailable',\\\\n    color: 'red',\\\\n    tooltipText: 'Mark As Unavailable'\\\\n  },\\\\n  {\\\\n    value: 'active',\\\\n    label: 'Mark As Active',\\\\n    color: 'purple',\\\\n    tooltipText: 'Mark As Active'\\\\n  },\\\\n  {\\\\n    value: 'inactive',\\\\n    label: 'Mark As Inactive',\\\\n    color: 'green',\\\\n    tooltipText: 'Mark As Inactive'\\\\n  }\\\\n]\\\\n\\\\nconst MultiLevelListViewOption = [\\\\n  {\\\\n    id: 'available',\\\\n    value: 'available',\\\\n    label: 'Mark As Available',\\\\n    color: 'blue',\\\\n    tooltipText: 'Mark As Available',\\\\n    options: [\\\\n      {\\\\n        id: 'available',\\\\n        value: 'available',\\\\n        label: 'Mark As Child Available',\\\\n        color: 'blue',\\\\n        tooltipText: 'Mark As Child Available'\\\\n      },\\\\n      {\\\\n        id: 'unavailable',\\\\n        value: 'unavailable',\\\\n        label: 'Mark As Child Unavailable',\\\\n        color: 'red',\\\\n        tooltipText: 'Mark As Child Unavailable'\\\\n      },\\\\n      {\\\\n        id: 'active',\\\\n        value: 'active',\\\\n        label: 'Mark As Child Active',\\\\n        color: 'purple',\\\\n        tooltipText: 'Mark As Child Active'\\\\n      },\\\\n      {\\\\n        id: 'inactive',\\\\n        value: 'inactive',\\\\n        label: 'Mark As Child Inactive',\\\\n        color: 'green',\\\\n        tooltipText: 'Mark As Child Inactive',\\\\n        options: [\\\\n          {\\\\n            id: 'available',\\\\n            value: 'available',\\\\n            label: 'Mark As Grand Child Available',\\\\n            color: 'blue',\\\\n            tooltipText: 'Mark As Grand Child Available'\\\\n          },\\\\n          {\\\\n            id: 'unavailable',\\\\n            value: 'unavailable',\\\\n            label: 'Mark As Grand Child Unavailable',\\\\n            color: 'red',\\\\n            tooltipText: 'Mark As Grand Child Unavailable'\\\\n          }\\\\n        ]\\\\n      }\\\\n    ]\\\\n  },\\\\n  {\\\\n    id: 'unavailable',\\\\n    value: 'unavailable',\\\\n    label: 'Mark As Unavailable',\\\\n    color: 'red',\\\\n    tooltipText: 'Mark As Unavailable'\\\\n  },\\\\n  {\\\\n    id: 'active',\\\\n    value: 'active',\\\\n    label: 'Mark As Active',\\\\n    color: 'purple',\\\\n    tooltipText: 'Mark As Active'\\\\n  },\\\\n  {\\\\n    id: 'inactive',\\\\n    value: 'inactive',\\\\n    label: 'Mark As Inactive',\\\\n    color: 'green',\\\\n    tooltipText: 'Mark As Inactive'\\\\n  }\\\\n]\\\\n\\\\nconst paginationOptions = [\\\\n  { value: '25', label: '25 per page', title: '25 per page' },\\\\n  { value: '50', label: '50 per page', title: '50 per page' },\\\\n  { value: '100', label: '100 per page', title: '100 per page' },\\\\n  { value: '200', label: '200 per page', title: '200 per page' }\\\\n]\\\\n\\\\nconst columnOption = [\\\\n  { value: 'ascending', label: 'Sort Ascending', iconVariant: 'hide-menu-box' },\\\\n  {\\\\n    value: 'descending',\\\\n    label: 'Sort Descending',\\\\n    iconVariant: 'hub-location'\\\\n  },\\\\n  { value: 'hideColumn', label: 'Hide Column', iconVariant: 'close' },\\\\n  { value: 'pinLeft', label: 'Pin Left', iconVariant: 'angle-left' },\\\\n  { value: 'pinright', label: 'Pin Right', iconVariant: 'angle-right-thin' }\\\\n]\\\\n\\\\nconst options = [\\\\n  {\\\\n    value: 'emailVerificationPending',\\\\n    label: 'Email Verification Pending Shipper'\\\\n  },\\\\n  { value: 'allShippers', label: 'All Shippers' },\\\\n  { value: 'approvalPendingShippers', label: 'Approval Pending Shippers' }\\\\n]\\\\n\\\\nconst datePickerOptions = [\\\\n  { value: 'January', label: 'January' },\\\\n  { value: 'February', label: 'February' },\\\\n  { value: 'March', label: 'March' },\\\\n  { value: 'April', label: 'April' },\\\\n  { value: 'May', label: 'May' },\\\\n  { value: 'June', label: 'June' },\\\\n  { value: 'July', label: 'July' },\\\\n  { value: 'August', label: 'August' },\\\\n  { value: 'September', label: 'September' },\\\\n  { value: 'October', label: 'October' },\\\\n  { value: 'November', label: 'November' },\\\\n  { value: 'December', label: 'December' }\\\\n]\\\\n\\\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\\\nexport const ButtonDropdown = () => (\\\\n  <ThemeWrapper>\\\\n    <Box p='2em' bgColor='grey.50'>\\\\n      <IconDropdown\\\\n        variant={text('varaint', 'button-dropdown') as tSelectVariant}\\\\n        optionList={object('optionList', ListViewOption)}\\\\n        width={text('width', '120px')}\\\\n        menuIsOpen={boolean('menuIsOpen', false)}\\\\n        iconButtonDetails={array('iconList', [\\\\n          'hide-menu-box',\\\\n          'More',\\\\n          'angle-down'\\\\n        ])}\\\\n        primary={boolean('primary', false)}\\\\n        intent={text('intent', 'page') as tIntent}\\\\n        onChange={action('Value Changed')}\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n        disabled={boolean('disabled', false)}\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\n        tooltipProps={{\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\n        }}\\\\n      />\\\\n    </Box>\\\\n  </ThemeWrapper>\\\\n)\\\\n\\\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\\\nexport const TextDropdown = () => (\\\\n  <ThemeWrapper>\\\\n    <Box p='2em' bgColor='grey.50'>\\\\n      <IconDropdown\\\\n        variant={text('varaint', 'text-dropdown') as tSelectVariant}\\\\n        optionList={object('optionList', ListViewOption)}\\\\n        width={text('width', '120px')}\\\\n        menuIsOpen={boolean('menuIsOpen', false)}\\\\n        iconButtonDetails={array('iconList', [\\\\n          'hide-menu-box',\\\\n          'More',\\\\n          'angle-down'\\\\n        ])}\\\\n        primary={boolean('primary', false)}\\\\n        intent={text('intent', 'page') as tIntent}\\\\n        onChange={action('Value Changed')}\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n        disabled={boolean('disabled', false)}\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\n        tooltipProps={{\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\n        }}\\\\n      />\\\\n    </Box>\\\\n  </ThemeWrapper>\\\\n)\\\\n\\\\nexport const MultiLevelBreadCrumb = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <IconDropdown\\\\n          variant={text('variant', 'multilevel-breadcrumb') as tSelectVariant}\\\\n          optionList={object('optionList', MultiLevelListViewOption)}\\\\n          onChange={action('Value selected')}\\\\n          value={text('value', 'strawberry')}\\\\n          width={text('width', '260px')}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n  }\\\\n\\\\nexport const MultiLevelButtonDropdown = () => (\\\\n  <ThemeWrapper>\\\\n    <Box p='2em' bgColor='grey.50'>\\\\n      <IconDropdown\\\\n        variant={\\\\n          text('varaint', 'multilevel-button-dropdown') as tSelectVariant\\\\n        }\\\\n        optionList={object('optionList', MultiLevelListViewOption)}\\\\n        width={text('width', '120px')}\\\\n        menuIsOpen\\\\n        iconButtonDetails={array('iconList', [\\\\n          'hide-menu-box',\\\\n          'More',\\\\n          'angle-down'\\\\n        ])}\\\\n        defaultOpen='right'\\\\n        primary={boolean('primary', false)}\\\\n        intent={text('intent', 'page') as tIntent}\\\\n        handleClick={(id: any) => console.log('clicked from storybook', id)}\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n        disabled={boolean('disabled', false)}\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\n        tooltipProps={{\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\n        }}\\\\n      />\\\\n    </Box>\\\\n  </ThemeWrapper>\\\\n)\\\\n\\\\nexport const PaginationDropdown = () => (\\\\n  <ThemeWrapper>\\\\n    <CardComponent style={{ height: '300px' }}>\\\\n      <IconDropdown\\\\n        variant={text('variant', 'pagination-size') as tSelectVariant}\\\\n        optionList={object('optionList', paginationOptions)}\\\\n        onChange={action('Value selected')}\\\\n        value={text('value', '50')}\\\\n        width={text('width', '120px')}\\\\n      />\\\\n    </CardComponent>\\\\n  </ThemeWrapper>\\\\n)\\\\n\\\\nexport const columnOptionComponent = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <div style={{ width: '200px', margin: 'auto' }}>\\\\n          <IconDropdown\\\\n            variant={text('variant', 'column-filter') as tSelectVariant}\\\\n            optionList={object('optionList', columnOption)}\\\\n            onChange={action('Value selected')}\\\\n            width={text('width', '10px')}\\\\n            isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n          />\\\\n        </div>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const BreadCrumbComponent = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <IconDropdown\\\\n          variant={text('variant', 'bread-crumb') as tSelectVariant}\\\\n          optionList={object('optionList', options)}\\\\n          onChange={action('Value selected')}\\\\n          value={text('value', 'strawberry')}\\\\n          width={text('width', '260px')}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const DatePickerDropDown = () => (\\\\n  <ThemeWrapper>\\\\n    <CardComponent style={{ height: '200px' }}>\\\\n      <IconDropdown\\\\n        variant={text('variant', 'date-picker') as tSelectVariant}\\\\n        optionList={object('optionList', datePickerOptions)}\\\\n        onChange={action('Value selected')}\\\\n        value={text('value', '50')}\\\\n        width={text('width', '80px')}\\\\n        showDownArrow={boolean('Show Down Arrow', true)}\\\\n        isMultiRegionStyled={boolean('Is Multi Region Styled', false)}\\\\n      />\\\\n    </CardComponent>\\\\n  </ThemeWrapper>\\\\n)\\\\nconst arrayMap = [\\\\n  { variant: 'column-filter', name: 'column-filter0' },\\\\n  { variant: 'column-filter', name: 'column-filter1' },\\\\n  { variant: 'column-filter', name: 'column-filter2' }\\\\n]\\\\n\\\\nexport const columnOptionList = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <div style={{ width: '200px', margin: 'auto' }}>\\\\n          {arrayMap.map((obj: any, index: number) => {\\\\n            return (\\\\n              <IconDropdown\\\\n                variant={text('variant', obj?.variant) as tSelectVariant}\\\\n                optionList={object('optionList', columnOption)}\\\\n                onChange={action('Value selected')}\\\\n                width={text('width', '10px')}\\\\n                isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n                key={index}\\\\n              />\\\\n            )\\\\n          })}\\\\n        </div>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const DropdownUniversal = () => {\\\\n  // reference to style\\\\n  // const theme = useContext(ThemeContext)\\\\n  // const borderBottom = `1px solid ${theme?.colors?.grey['A800']}`\\\\n  // const customStyle = {\\\\n  //   control: (provided: any) => ({\\\\n  //     ...provided,\\\\n  //     borderStyle: 'none',\\\\n  //     borderBottom,\\\\n  //     borderRadius: '0px',\\\\n  //     boxShadow: 'none',\\\\n  //     borderColor: theme?.colors?.grey?.A800,\\\\n  //     '&:focus': {\\\\n  //       borderStyle: 'none',\\\\n  //       borderBottom,\\\\n  //       boxShadow: 'none',\\\\n  //       borderColor: theme?.colors?.grey?.A800\\\\n  //     },\\\\n  //     '&:hover': {\\\\n  //       borderStyle: 'none',\\\\n  //       borderBottom,\\\\n  //       boxShadow: 'none',\\\\n  //       borderColor: theme?.colors?.grey?.A800\\\\n  //     }\\\\n  //   }),\\\\n  //   option: (provided: any, state: any) => ({\\\\n  //     ...provided,\\\\n  //     backgroundColor: state?.isSelected\\\\n  //       ? theme?.colors?.primary?.main\\\\n  //       : theme?.colors?.white,\\\\n  //     '&:hover': {\\\\n  //       backgroundColor: state?.isSelected\\\\n  //         ? theme?.colors?.primary?.main\\\\n  //         : theme?.colors?.grey['50']\\\\n  //     }\\\\n  //   }),\\\\n\\\\n  //   menu: (provided: any, state: any) => ({\\\\n  //     ...provided,\\\\n  //     backgroundColor: state?.isSelected\\\\n  //       ? theme.colors.primary.main\\\\n  //       : theme?.colors?.white,\\\\n  //     borderRadius: '2px',\\\\n  //     '&:hover': {\\\\n  //       backgroundColor: state?.isSelected\\\\n  //         ? theme?.colors?.primary?.main\\\\n  //         : theme?.colors?.white\\\\n  //     },\\\\n  //     marginTop: '5px',\\\\n  //     marginLeft: '16px',\\\\n  //     width: '90%'\\\\n  //   }),\\\\n  //   menuList: (provided: any) => ({\\\\n  //     ...provided,\\\\n  //     marginTop: '0px'\\\\n  //   }),\\\\n  //   valueContainer: (provided: any) => ({\\\\n  //     ...provided,\\\\n  //     padding: '0px'\\\\n  //   })\\\\n  // }\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <IconDropdown\\\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          width={text('width', '120px')}\\\\n          menuIsOpen={boolean('menuIsOpen', false)}\\\\n          primary={boolean('primary', false)}\\\\n          intent={text('intent', 'page') as tIntent}\\\\n          onChange={action('Value Changed')}\\\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n          disabled={boolean('disabled', false)}\\\\n          value='available'\\\\n          optionComponent={({ selectedOption }: any) => {\\\\n            return (\\\\n              <div>\\\\n                <div>{selectedOption?.color}</div>\\\\n                <div>{selectedOption?.label}</div>\\\\n              </div>\\\\n            )\\\\n          }}\\\\n          // customStyle={customStyle}\\\\n        >\\\\n          {({\\\\n            selectedOption,\\\\n            menuIsOpen,\\\\n            setMenuIsOpen\\\\n          }: IUniversalDropdownChildren) => {\\\\n            return (\\\\n              <Button\\\\n                onClick={() => {\\\\n                  setMenuIsOpen(!menuIsOpen)\\\\n                  action('Universal open/closed')(menuIsOpen)\\\\n                }}\\\\n                color={text('color', 'white')}\\\\n                bgColor={text('bgColor', 'black')}\\\\n                fullWidth={boolean('fullWidth', false)}\\\\n              >\\\\n                {selectedOption?.label}\\\\n              </Button>\\\\n            )\\\\n          }}\\\\n        </IconDropdown>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const TextFieldDropdown = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <IconDropdown\\\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          width={text('width', '120px')}\\\\n          menuIsOpen={boolean('menuIsOpen', false)}\\\\n          primary={boolean('primary', false)}\\\\n          intent={text('intent', 'page') as tIntent}\\\\n          onChange={action('Value Changed')}\\\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n          disabled={boolean('disabled', false)}\\\\n          value='available'\\\\n          optionComponent={({ selectedOption }: any) => {\\\\n            return (\\\\n              <div>\\\\n                <div>{selectedOption?.color}</div>\\\\n                <div>{selectedOption?.label}</div>\\\\n              </div>\\\\n            )\\\\n          }}\\\\n          // customStyle={customStyle}\\\\n        >\\\\n          {({\\\\n            selectedOption,\\\\n            menuIsOpen,\\\\n            setMenuIsOpen\\\\n          }: IUniversalDropdownChildren) => {\\\\n            return (\\\\n              <TextInput\\\\n                id='someId'\\\\n                name='someName'\\\\n                className='someClassName'\\\\n                label={text('label', 'Username')}\\\\n                labelColor={text('labelColor', 'text.inputLabel.default')}\\\\n                placeholder={text('placeholder', 'Enter text here...')}\\\\n                maxLength={number('maxLength', 10)}\\\\n                error={boolean('error', false)}\\\\n                errorMessage={text('errorMessage', '')}\\\\n                required={boolean('required', false)}\\\\n                fullWidth={boolean('fullWidth', false)}\\\\n                onChange={action('Triggered: onChange')}\\\\n                onClick={() => {\\\\n                  setMenuIsOpen(!menuIsOpen)\\\\n                  action('universal open/closed')(menuIsOpen)\\\\n                }}\\\\n                value={selectedOption?.value}\\\\n              />\\\\n            )\\\\n          }}\\\\n        </IconDropdown>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/IconDropdown.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\nimport { action } from '@storybook/addon-actions'\\nimport {\\n  array,\\n  boolean,\\n  number,\\n  object,\\n  text,\\n  withKnobs\\n} from '@storybook/addon-knobs'\\nimport React from 'react'\\nimport IconDropdown from '.'\\nimport { path } from '..'\\nimport { Box } from '../../..'\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\nimport Button, { tIntent } from '../../atoms/Button'\\nimport CardComponent from '../../atoms/Card'\\nimport { tPlacement } from '../../../utilities/types'\\nimport {\\n  IUniversalDropdownChildren,\\n  tSelectVariant\\n} from '../DropDown/interface'\\nimport TextInput from '../TextInput'\\n\\nexport default {parameters: {\\\"storySource\\\":{\\\"source\\\":\\\"import { action } from '@storybook/addon-actions'\\\\nimport {\\\\n  array,\\\\n  boolean,\\\\n  number,\\\\n  object,\\\\n  text,\\\\n  withKnobs\\\\n} from '@storybook/addon-knobs'\\\\nimport React from 'react'\\\\nimport IconDropdown from '.'\\\\nimport { path } from '..'\\\\nimport { Box } from '../../..'\\\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\\\nimport Button, { tIntent } from '../../atoms/Button'\\\\nimport CardComponent from '../../atoms/Card'\\\\nimport { tPlacement } from '../../../utilities/types'\\\\nimport {\\\\n  IUniversalDropdownChildren,\\\\n  tSelectVariant\\\\n} from '../DropDown/interface'\\\\nimport TextInput from '../TextInput'\\\\n\\\\nexport default {\\\\n  title: `${path}/IconDropdown`,\\\\n  decorators: [withKnobs],\\\\n  component: IconDropdown\\\\n}\\\\n\\\\nconst ListViewOption = [\\\\n  {\\\\n    value: 'available',\\\\n    label: 'Mark As Available',\\\\n    color: 'blue',\\\\n    tooltipText: 'Mark As Available',\\\\n    isDisabled: true\\\\n  },\\\\n  {\\\\n    value: 'unavailable',\\\\n    label: 'Mark As Unavailable',\\\\n    color: 'red',\\\\n    tooltipText: 'Mark As Unavailable'\\\\n  },\\\\n  {\\\\n    value: 'active',\\\\n    label: 'Mark As Active',\\\\n    color: 'purple',\\\\n    tooltipText: 'Mark As Active'\\\\n  },\\\\n  {\\\\n    value: 'inactive',\\\\n    label: 'Mark As Inactive',\\\\n    color: 'green',\\\\n    tooltipText: 'Mark As Inactive'\\\\n  }\\\\n]\\\\n\\\\nconst MultiLevelListViewOption = [\\\\n  {\\\\n    id: 'available',\\\\n    value: 'available',\\\\n    label: 'Mark As Available',\\\\n    color: 'blue',\\\\n    tooltipText: 'Mark As Available',\\\\n    options: [\\\\n      {\\\\n        id: 'available',\\\\n        value: 'available',\\\\n        label: 'Mark As Child Available',\\\\n        color: 'blue',\\\\n        tooltipText: 'Mark As Child Available'\\\\n      },\\\\n      {\\\\n        id: 'unavailable',\\\\n        value: 'unavailable',\\\\n        label: 'Mark As Child Unavailable',\\\\n        color: 'red',\\\\n        tooltipText: 'Mark As Child Unavailable'\\\\n      },\\\\n      {\\\\n        id: 'active',\\\\n        value: 'active',\\\\n        label: 'Mark As Child Active',\\\\n        color: 'purple',\\\\n        tooltipText: 'Mark As Child Active'\\\\n      },\\\\n      {\\\\n        id: 'inactive',\\\\n        value: 'inactive',\\\\n        label: 'Mark As Child Inactive',\\\\n        color: 'green',\\\\n        tooltipText: 'Mark As Child Inactive',\\\\n        options: [\\\\n          {\\\\n            id: 'available',\\\\n            value: 'available',\\\\n            label: 'Mark As Grand Child Available',\\\\n            color: 'blue',\\\\n            tooltipText: 'Mark As Grand Child Available'\\\\n          },\\\\n          {\\\\n            id: 'unavailable',\\\\n            value: 'unavailable',\\\\n            label: 'Mark As Grand Child Unavailable',\\\\n            color: 'red',\\\\n            tooltipText: 'Mark As Grand Child Unavailable'\\\\n          }\\\\n        ]\\\\n      }\\\\n    ]\\\\n  },\\\\n  {\\\\n    id: 'unavailable',\\\\n    value: 'unavailable',\\\\n    label: 'Mark As Unavailable',\\\\n    color: 'red',\\\\n    tooltipText: 'Mark As Unavailable'\\\\n  },\\\\n  {\\\\n    id: 'active',\\\\n    value: 'active',\\\\n    label: 'Mark As Active',\\\\n    color: 'purple',\\\\n    tooltipText: 'Mark As Active'\\\\n  },\\\\n  {\\\\n    id: 'inactive',\\\\n    value: 'inactive',\\\\n    label: 'Mark As Inactive',\\\\n    color: 'green',\\\\n    tooltipText: 'Mark As Inactive'\\\\n  }\\\\n]\\\\n\\\\nconst paginationOptions = [\\\\n  { value: '25', label: '25 per page', title: '25 per page' },\\\\n  { value: '50', label: '50 per page', title: '50 per page' },\\\\n  { value: '100', label: '100 per page', title: '100 per page' },\\\\n  { value: '200', label: '200 per page', title: '200 per page' }\\\\n]\\\\n\\\\nconst columnOption = [\\\\n  { value: 'ascending', label: 'Sort Ascending', iconVariant: 'hide-menu-box' },\\\\n  {\\\\n    value: 'descending',\\\\n    label: 'Sort Descending',\\\\n    iconVariant: 'hub-location'\\\\n  },\\\\n  { value: 'hideColumn', label: 'Hide Column', iconVariant: 'close' },\\\\n  { value: 'pinLeft', label: 'Pin Left', iconVariant: 'angle-left' },\\\\n  { value: 'pinright', label: 'Pin Right', iconVariant: 'angle-right-thin' }\\\\n]\\\\n\\\\nconst options = [\\\\n  {\\\\n    value: 'emailVerificationPending',\\\\n    label: 'Email Verification Pending Shipper'\\\\n  },\\\\n  { value: 'allShippers', label: 'All Shippers' },\\\\n  { value: 'approvalPendingShippers', label: 'Approval Pending Shippers' }\\\\n]\\\\n\\\\nconst datePickerOptions = [\\\\n  { value: 'January', label: 'January' },\\\\n  { value: 'February', label: 'February' },\\\\n  { value: 'March', label: 'March' },\\\\n  { value: 'April', label: 'April' },\\\\n  { value: 'May', label: 'May' },\\\\n  { value: 'June', label: 'June' },\\\\n  { value: 'July', label: 'July' },\\\\n  { value: 'August', label: 'August' },\\\\n  { value: 'September', label: 'September' },\\\\n  { value: 'October', label: 'October' },\\\\n  { value: 'November', label: 'November' },\\\\n  { value: 'December', label: 'December' }\\\\n]\\\\n\\\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\\\nexport const ButtonDropdown = () => (\\\\n  <ThemeWrapper>\\\\n    <Box p='2em' bgColor='grey.50'>\\\\n      <IconDropdown\\\\n        variant={text('varaint', 'button-dropdown') as tSelectVariant}\\\\n        optionList={object('optionList', ListViewOption)}\\\\n        width={text('width', '120px')}\\\\n        menuIsOpen={boolean('menuIsOpen', false)}\\\\n        iconButtonDetails={array('iconList', [\\\\n          'hide-menu-box',\\\\n          'More',\\\\n          'angle-down'\\\\n        ])}\\\\n        primary={boolean('primary', false)}\\\\n        intent={text('intent', 'page') as tIntent}\\\\n        onChange={action('Value Changed')}\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n        disabled={boolean('disabled', false)}\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\n        tooltipProps={{\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\n        }}\\\\n      />\\\\n    </Box>\\\\n  </ThemeWrapper>\\\\n)\\\\n\\\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\\\nexport const TextDropdown = () => (\\\\n  <ThemeWrapper>\\\\n    <Box p='2em' bgColor='grey.50'>\\\\n      <IconDropdown\\\\n        variant={text('varaint', 'text-dropdown') as tSelectVariant}\\\\n        optionList={object('optionList', ListViewOption)}\\\\n        width={text('width', '120px')}\\\\n        menuIsOpen={boolean('menuIsOpen', false)}\\\\n        iconButtonDetails={array('iconList', [\\\\n          'hide-menu-box',\\\\n          'More',\\\\n          'angle-down'\\\\n        ])}\\\\n        primary={boolean('primary', false)}\\\\n        intent={text('intent', 'page') as tIntent}\\\\n        onChange={action('Value Changed')}\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n        disabled={boolean('disabled', false)}\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\n        tooltipProps={{\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\n        }}\\\\n      />\\\\n    </Box>\\\\n  </ThemeWrapper>\\\\n)\\\\n\\\\nexport const MultiLevelBreadCrumb = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <IconDropdown\\\\n          variant={text('variant', 'multilevel-breadcrumb') as tSelectVariant}\\\\n          optionList={object('optionList', MultiLevelListViewOption)}\\\\n          onChange={action('Value selected')}\\\\n          value={text('value', 'strawberry')}\\\\n          width={text('width', '260px')}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n  }\\\\n\\\\nexport const MultiLevelButtonDropdown = () => (\\\\n  <ThemeWrapper>\\\\n    <Box p='2em' bgColor='grey.50'>\\\\n      <IconDropdown\\\\n        variant={\\\\n          text('varaint', 'multilevel-button-dropdown') as tSelectVariant\\\\n        }\\\\n        optionList={object('optionList', MultiLevelListViewOption)}\\\\n        width={text('width', '120px')}\\\\n        menuIsOpen\\\\n        iconButtonDetails={array('iconList', [\\\\n          'hide-menu-box',\\\\n          'More',\\\\n          'angle-down'\\\\n        ])}\\\\n        defaultOpen='right'\\\\n        primary={boolean('primary', false)}\\\\n        intent={text('intent', 'page') as tIntent}\\\\n        handleClick={(id: any) => console.log('clicked from storybook', id)}\\\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n        disabled={boolean('disabled', false)}\\\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\\\n        tooltipProps={{\\\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\\\n        }}\\\\n      />\\\\n    </Box>\\\\n  </ThemeWrapper>\\\\n)\\\\n\\\\nexport const PaginationDropdown = () => (\\\\n  <ThemeWrapper>\\\\n    <CardComponent style={{ height: '300px' }}>\\\\n      <IconDropdown\\\\n        variant={text('variant', 'pagination-size') as tSelectVariant}\\\\n        optionList={object('optionList', paginationOptions)}\\\\n        onChange={action('Value selected')}\\\\n        value={text('value', '50')}\\\\n        width={text('width', '120px')}\\\\n      />\\\\n    </CardComponent>\\\\n  </ThemeWrapper>\\\\n)\\\\n\\\\nexport const columnOptionComponent = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <div style={{ width: '200px', margin: 'auto' }}>\\\\n          <IconDropdown\\\\n            variant={text('variant', 'column-filter') as tSelectVariant}\\\\n            optionList={object('optionList', columnOption)}\\\\n            onChange={action('Value selected')}\\\\n            width={text('width', '10px')}\\\\n            isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n          />\\\\n        </div>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const BreadCrumbComponent = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <IconDropdown\\\\n          variant={text('variant', 'bread-crumb') as tSelectVariant}\\\\n          optionList={object('optionList', options)}\\\\n          onChange={action('Value selected')}\\\\n          value={text('value', 'strawberry')}\\\\n          width={text('width', '260px')}\\\\n        />\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const DatePickerDropDown = () => (\\\\n  <ThemeWrapper>\\\\n    <CardComponent style={{ height: '200px' }}>\\\\n      <IconDropdown\\\\n        variant={text('variant', 'date-picker') as tSelectVariant}\\\\n        optionList={object('optionList', datePickerOptions)}\\\\n        onChange={action('Value selected')}\\\\n        value={text('value', '50')}\\\\n        width={text('width', '80px')}\\\\n        showDownArrow={boolean('Show Down Arrow', true)}\\\\n        isMultiRegionStyled={boolean('Is Multi Region Styled', false)}\\\\n      />\\\\n    </CardComponent>\\\\n  </ThemeWrapper>\\\\n)\\\\nconst arrayMap = [\\\\n  { variant: 'column-filter', name: 'column-filter0' },\\\\n  { variant: 'column-filter', name: 'column-filter1' },\\\\n  { variant: 'column-filter', name: 'column-filter2' }\\\\n]\\\\n\\\\nexport const columnOptionList = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <div style={{ width: '200px', margin: 'auto' }}>\\\\n          {arrayMap.map((obj: any, index: number) => {\\\\n            return (\\\\n              <IconDropdown\\\\n                variant={text('variant', obj?.variant) as tSelectVariant}\\\\n                optionList={object('optionList', columnOption)}\\\\n                onChange={action('Value selected')}\\\\n                width={text('width', '10px')}\\\\n                isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n                key={index}\\\\n              />\\\\n            )\\\\n          })}\\\\n        </div>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const DropdownUniversal = () => {\\\\n  // reference to style\\\\n  // const theme = useContext(ThemeContext)\\\\n  // const borderBottom = `1px solid ${theme?.colors?.grey['A800']}`\\\\n  // const customStyle = {\\\\n  //   control: (provided: any) => ({\\\\n  //     ...provided,\\\\n  //     borderStyle: 'none',\\\\n  //     borderBottom,\\\\n  //     borderRadius: '0px',\\\\n  //     boxShadow: 'none',\\\\n  //     borderColor: theme?.colors?.grey?.A800,\\\\n  //     '&:focus': {\\\\n  //       borderStyle: 'none',\\\\n  //       borderBottom,\\\\n  //       boxShadow: 'none',\\\\n  //       borderColor: theme?.colors?.grey?.A800\\\\n  //     },\\\\n  //     '&:hover': {\\\\n  //       borderStyle: 'none',\\\\n  //       borderBottom,\\\\n  //       boxShadow: 'none',\\\\n  //       borderColor: theme?.colors?.grey?.A800\\\\n  //     }\\\\n  //   }),\\\\n  //   option: (provided: any, state: any) => ({\\\\n  //     ...provided,\\\\n  //     backgroundColor: state?.isSelected\\\\n  //       ? theme?.colors?.primary?.main\\\\n  //       : theme?.colors?.white,\\\\n  //     '&:hover': {\\\\n  //       backgroundColor: state?.isSelected\\\\n  //         ? theme?.colors?.primary?.main\\\\n  //         : theme?.colors?.grey['50']\\\\n  //     }\\\\n  //   }),\\\\n\\\\n  //   menu: (provided: any, state: any) => ({\\\\n  //     ...provided,\\\\n  //     backgroundColor: state?.isSelected\\\\n  //       ? theme.colors.primary.main\\\\n  //       : theme?.colors?.white,\\\\n  //     borderRadius: '2px',\\\\n  //     '&:hover': {\\\\n  //       backgroundColor: state?.isSelected\\\\n  //         ? theme?.colors?.primary?.main\\\\n  //         : theme?.colors?.white\\\\n  //     },\\\\n  //     marginTop: '5px',\\\\n  //     marginLeft: '16px',\\\\n  //     width: '90%'\\\\n  //   }),\\\\n  //   menuList: (provided: any) => ({\\\\n  //     ...provided,\\\\n  //     marginTop: '0px'\\\\n  //   }),\\\\n  //   valueContainer: (provided: any) => ({\\\\n  //     ...provided,\\\\n  //     padding: '0px'\\\\n  //   })\\\\n  // }\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <IconDropdown\\\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          width={text('width', '120px')}\\\\n          menuIsOpen={boolean('menuIsOpen', false)}\\\\n          primary={boolean('primary', false)}\\\\n          intent={text('intent', 'page') as tIntent}\\\\n          onChange={action('Value Changed')}\\\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n          disabled={boolean('disabled', false)}\\\\n          value='available'\\\\n          optionComponent={({ selectedOption }: any) => {\\\\n            return (\\\\n              <div>\\\\n                <div>{selectedOption?.color}</div>\\\\n                <div>{selectedOption?.label}</div>\\\\n              </div>\\\\n            )\\\\n          }}\\\\n          // customStyle={customStyle}\\\\n        >\\\\n          {({\\\\n            selectedOption,\\\\n            menuIsOpen,\\\\n            setMenuIsOpen\\\\n          }: IUniversalDropdownChildren) => {\\\\n            return (\\\\n              <Button\\\\n                onClick={() => {\\\\n                  setMenuIsOpen(!menuIsOpen)\\\\n                  action('Universal open/closed')(menuIsOpen)\\\\n                }}\\\\n                color={text('color', 'white')}\\\\n                bgColor={text('bgColor', 'black')}\\\\n                fullWidth={boolean('fullWidth', false)}\\\\n              >\\\\n                {selectedOption?.label}\\\\n              </Button>\\\\n            )\\\\n          }}\\\\n        </IconDropdown>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\\nexport const TextFieldDropdown = () => {\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <Box p='2em' bgColor='grey.50'>\\\\n        <IconDropdown\\\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\\\n          optionList={object('optionList', ListViewOption)}\\\\n          width={text('width', '120px')}\\\\n          menuIsOpen={boolean('menuIsOpen', false)}\\\\n          primary={boolean('primary', false)}\\\\n          intent={text('intent', 'page') as tIntent}\\\\n          onChange={action('Value Changed')}\\\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\\\n          disabled={boolean('disabled', false)}\\\\n          value='available'\\\\n          optionComponent={({ selectedOption }: any) => {\\\\n            return (\\\\n              <div>\\\\n                <div>{selectedOption?.color}</div>\\\\n                <div>{selectedOption?.label}</div>\\\\n              </div>\\\\n            )\\\\n          }}\\\\n          // customStyle={customStyle}\\\\n        >\\\\n          {({\\\\n            selectedOption,\\\\n            menuIsOpen,\\\\n            setMenuIsOpen\\\\n          }: IUniversalDropdownChildren) => {\\\\n            return (\\\\n              <TextInput\\\\n                id='someId'\\\\n                name='someName'\\\\n                className='someClassName'\\\\n                label={text('label', 'Username')}\\\\n                labelColor={text('labelColor', 'text.inputLabel.default')}\\\\n                placeholder={text('placeholder', 'Enter text here...')}\\\\n                maxLength={number('maxLength', 10)}\\\\n                error={boolean('error', false)}\\\\n                errorMessage={text('errorMessage', '')}\\\\n                required={boolean('required', false)}\\\\n                fullWidth={boolean('fullWidth', false)}\\\\n                onChange={action('Triggered: onChange')}\\\\n                onClick={() => {\\\\n                  setMenuIsOpen(!menuIsOpen)\\\\n                  action('universal open/closed')(menuIsOpen)\\\\n                }}\\\\n                value={selectedOption?.value}\\\\n              />\\\\n            )\\\\n          }}\\\\n        </IconDropdown>\\\\n      </Box>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\",\\\"locationsMap\\\":{}},},\\n  title: `${path}/IconDropdown`,\\n  decorators: [withKnobs],\\n  component: IconDropdown\\n}\\n\\nconst ListViewOption = [\\n  {\\n    value: 'available',\\n    label: 'Mark As Available',\\n    color: 'blue',\\n    tooltipText: 'Mark As Available',\\n    isDisabled: true\\n  },\\n  {\\n    value: 'unavailable',\\n    label: 'Mark As Unavailable',\\n    color: 'red',\\n    tooltipText: 'Mark As Unavailable'\\n  },\\n  {\\n    value: 'active',\\n    label: 'Mark As Active',\\n    color: 'purple',\\n    tooltipText: 'Mark As Active'\\n  },\\n  {\\n    value: 'inactive',\\n    label: 'Mark As Inactive',\\n    color: 'green',\\n    tooltipText: 'Mark As Inactive'\\n  }\\n]\\n\\nconst MultiLevelListViewOption = [\\n  {\\n    id: 'available',\\n    value: 'available',\\n    label: 'Mark As Available',\\n    color: 'blue',\\n    tooltipText: 'Mark As Available',\\n    options: [\\n      {\\n        id: 'available',\\n        value: 'available',\\n        label: 'Mark As Child Available',\\n        color: 'blue',\\n        tooltipText: 'Mark As Child Available'\\n      },\\n      {\\n        id: 'unavailable',\\n        value: 'unavailable',\\n        label: 'Mark As Child Unavailable',\\n        color: 'red',\\n        tooltipText: 'Mark As Child Unavailable'\\n      },\\n      {\\n        id: 'active',\\n        value: 'active',\\n        label: 'Mark As Child Active',\\n        color: 'purple',\\n        tooltipText: 'Mark As Child Active'\\n      },\\n      {\\n        id: 'inactive',\\n        value: 'inactive',\\n        label: 'Mark As Child Inactive',\\n        color: 'green',\\n        tooltipText: 'Mark As Child Inactive',\\n        options: [\\n          {\\n            id: 'available',\\n            value: 'available',\\n            label: 'Mark As Grand Child Available',\\n            color: 'blue',\\n            tooltipText: 'Mark As Grand Child Available'\\n          },\\n          {\\n            id: 'unavailable',\\n            value: 'unavailable',\\n            label: 'Mark As Grand Child Unavailable',\\n            color: 'red',\\n            tooltipText: 'Mark As Grand Child Unavailable'\\n          }\\n        ]\\n      }\\n    ]\\n  },\\n  {\\n    id: 'unavailable',\\n    value: 'unavailable',\\n    label: 'Mark As Unavailable',\\n    color: 'red',\\n    tooltipText: 'Mark As Unavailable'\\n  },\\n  {\\n    id: 'active',\\n    value: 'active',\\n    label: 'Mark As Active',\\n    color: 'purple',\\n    tooltipText: 'Mark As Active'\\n  },\\n  {\\n    id: 'inactive',\\n    value: 'inactive',\\n    label: 'Mark As Inactive',\\n    color: 'green',\\n    tooltipText: 'Mark As Inactive'\\n  }\\n]\\n\\nconst paginationOptions = [\\n  { value: '25', label: '25 per page', title: '25 per page' },\\n  { value: '50', label: '50 per page', title: '50 per page' },\\n  { value: '100', label: '100 per page', title: '100 per page' },\\n  { value: '200', label: '200 per page', title: '200 per page' }\\n]\\n\\nconst columnOption = [\\n  { value: 'ascending', label: 'Sort Ascending', iconVariant: 'hide-menu-box' },\\n  {\\n    value: 'descending',\\n    label: 'Sort Descending',\\n    iconVariant: 'hub-location'\\n  },\\n  { value: 'hideColumn', label: 'Hide Column', iconVariant: 'close' },\\n  { value: 'pinLeft', label: 'Pin Left', iconVariant: 'angle-left' },\\n  { value: 'pinright', label: 'Pin Right', iconVariant: 'angle-right-thin' }\\n]\\n\\nconst options = [\\n  {\\n    value: 'emailVerificationPending',\\n    label: 'Email Verification Pending Shipper'\\n  },\\n  { value: 'allShippers', label: 'All Shippers' },\\n  { value: 'approvalPendingShippers', label: 'Approval Pending Shippers' }\\n]\\n\\nconst datePickerOptions = [\\n  { value: 'January', label: 'January' },\\n  { value: 'February', label: 'February' },\\n  { value: 'March', label: 'March' },\\n  { value: 'April', label: 'April' },\\n  { value: 'May', label: 'May' },\\n  { value: 'June', label: 'June' },\\n  { value: 'July', label: 'July' },\\n  { value: 'August', label: 'August' },\\n  { value: 'September', label: 'September' },\\n  { value: 'October', label: 'October' },\\n  { value: 'November', label: 'November' },\\n  { value: 'December', label: 'December' }\\n]\\n\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\nexport const ButtonDropdown = addSourceDecorator(() => (\\n  <ThemeWrapper>\\n    <Box p='2em' bgColor='grey.50'>\\n      <IconDropdown\\n        variant={text('varaint', 'button-dropdown') as tSelectVariant}\\n        optionList={object('optionList', ListViewOption)}\\n        width={text('width', '120px')}\\n        menuIsOpen={boolean('menuIsOpen', false)}\\n        iconButtonDetails={array('iconList', [\\n          'hide-menu-box',\\n          'More',\\n          'angle-down'\\n        ])}\\n        primary={boolean('primary', false)}\\n        intent={text('intent', 'page') as tIntent}\\n        onChange={action('Value Changed')}\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\n        disabled={boolean('disabled', false)}\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\n        tooltipProps={{\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\n        }}\\n      />\\n    </Box>\\n  </ThemeWrapper>\\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\nexport const TextDropdown = addSourceDecorator(() => (\\n  <ThemeWrapper>\\n    <Box p='2em' bgColor='grey.50'>\\n      <IconDropdown\\n        variant={text('varaint', 'text-dropdown') as tSelectVariant}\\n        optionList={object('optionList', ListViewOption)}\\n        width={text('width', '120px')}\\n        menuIsOpen={boolean('menuIsOpen', false)}\\n        iconButtonDetails={array('iconList', [\\n          'hide-menu-box',\\n          'More',\\n          'angle-down'\\n        ])}\\n        primary={boolean('primary', false)}\\n        intent={text('intent', 'page') as tIntent}\\n        onChange={action('Value Changed')}\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\n        disabled={boolean('disabled', false)}\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\n        tooltipProps={{\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\n        }}\\n      />\\n    </Box>\\n  </ThemeWrapper>\\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nexport const MultiLevelBreadCrumb = addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='2em' bgColor='grey.50'>\\n        <IconDropdown\\n          variant={text('variant', 'multilevel-breadcrumb') as tSelectVariant}\\n          optionList={object('optionList', MultiLevelListViewOption)}\\n          onChange={action('Value selected')}\\n          value={text('value', 'strawberry')}\\n          width={text('width', '260px')}\\n        />\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n  }, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nexport const MultiLevelButtonDropdown = addSourceDecorator(() => (\\n  <ThemeWrapper>\\n    <Box p='2em' bgColor='grey.50'>\\n      <IconDropdown\\n        variant={\\n          text('varaint', 'multilevel-button-dropdown') as tSelectVariant\\n        }\\n        optionList={object('optionList', MultiLevelListViewOption)}\\n        width={text('width', '120px')}\\n        menuIsOpen\\n        iconButtonDetails={array('iconList', [\\n          'hide-menu-box',\\n          'More',\\n          'angle-down'\\n        ])}\\n        defaultOpen='right'\\n        primary={boolean('primary', false)}\\n        intent={text('intent', 'page') as tIntent}\\n        handleClick={(id: any) => console.log('clicked from storybook', id)}\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\n        disabled={boolean('disabled', false)}\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\n        tooltipProps={{\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\n        }}\\n      />\\n    </Box>\\n  </ThemeWrapper>\\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nexport const PaginationDropdown = addSourceDecorator(() => (\\n  <ThemeWrapper>\\n    <CardComponent style={{ height: '300px' }}>\\n      <IconDropdown\\n        variant={text('variant', 'pagination-size') as tSelectVariant}\\n        optionList={object('optionList', paginationOptions)}\\n        onChange={action('Value selected')}\\n        value={text('value', '50')}\\n        width={text('width', '120px')}\\n      />\\n    </CardComponent>\\n  </ThemeWrapper>\\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nexport const columnOptionComponent = addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='2em' bgColor='grey.50'>\\n        <div style={{ width: '200px', margin: 'auto' }}>\\n          <IconDropdown\\n            variant={text('variant', 'column-filter') as tSelectVariant}\\n            optionList={object('optionList', columnOption)}\\n            onChange={action('Value selected')}\\n            width={text('width', '10px')}\\n            isSingleClickOption={boolean('isSingleClickOption', true)}\\n          />\\n        </div>\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nexport const BreadCrumbComponent = addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='2em' bgColor='grey.50'>\\n        <IconDropdown\\n          variant={text('variant', 'bread-crumb') as tSelectVariant}\\n          optionList={object('optionList', options)}\\n          onChange={action('Value selected')}\\n          value={text('value', 'strawberry')}\\n          width={text('width', '260px')}\\n        />\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nexport const DatePickerDropDown = addSourceDecorator(() => (\\n  <ThemeWrapper>\\n    <CardComponent style={{ height: '200px' }}>\\n      <IconDropdown\\n        variant={text('variant', 'date-picker') as tSelectVariant}\\n        optionList={object('optionList', datePickerOptions)}\\n        onChange={action('Value selected')}\\n        value={text('value', '50')}\\n        width={text('width', '80px')}\\n        showDownArrow={boolean('Show Down Arrow', true)}\\n        isMultiRegionStyled={boolean('Is Multi Region Styled', false)}\\n      />\\n    </CardComponent>\\n  </ThemeWrapper>\\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\nconst arrayMap = [\\n  { variant: 'column-filter', name: 'column-filter0' },\\n  { variant: 'column-filter', name: 'column-filter1' },\\n  { variant: 'column-filter', name: 'column-filter2' }\\n]\\n\\nexport const columnOptionList = addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='2em' bgColor='grey.50'>\\n        <div style={{ width: '200px', margin: 'auto' }}>\\n          {arrayMap.map((obj: any, index: number) => {\\n            return (\\n              <IconDropdown\\n                variant={text('variant', obj?.variant) as tSelectVariant}\\n                optionList={object('optionList', columnOption)}\\n                onChange={action('Value selected')}\\n                width={text('width', '10px')}\\n                isSingleClickOption={boolean('isSingleClickOption', true)}\\n                key={index}\\n              />\\n            )\\n          })}\\n        </div>\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nexport const DropdownUniversal = addSourceDecorator(() => {\\n  // reference to style\\n  // const theme = useContext(ThemeContext)\\n  // const borderBottom = `1px solid ${theme?.colors?.grey['A800']}`\\n  // const customStyle = {\\n  //   control: (provided: any) => ({\\n  //     ...provided,\\n  //     borderStyle: 'none',\\n  //     borderBottom,\\n  //     borderRadius: '0px',\\n  //     boxShadow: 'none',\\n  //     borderColor: theme?.colors?.grey?.A800,\\n  //     '&:focus': {\\n  //       borderStyle: 'none',\\n  //       borderBottom,\\n  //       boxShadow: 'none',\\n  //       borderColor: theme?.colors?.grey?.A800\\n  //     },\\n  //     '&:hover': {\\n  //       borderStyle: 'none',\\n  //       borderBottom,\\n  //       boxShadow: 'none',\\n  //       borderColor: theme?.colors?.grey?.A800\\n  //     }\\n  //   }),\\n  //   option: (provided: any, state: any) => ({\\n  //     ...provided,\\n  //     backgroundColor: state?.isSelected\\n  //       ? theme?.colors?.primary?.main\\n  //       : theme?.colors?.white,\\n  //     '&:hover': {\\n  //       backgroundColor: state?.isSelected\\n  //         ? theme?.colors?.primary?.main\\n  //         : theme?.colors?.grey['50']\\n  //     }\\n  //   }),\\n\\n  //   menu: (provided: any, state: any) => ({\\n  //     ...provided,\\n  //     backgroundColor: state?.isSelected\\n  //       ? theme.colors.primary.main\\n  //       : theme?.colors?.white,\\n  //     borderRadius: '2px',\\n  //     '&:hover': {\\n  //       backgroundColor: state?.isSelected\\n  //         ? theme?.colors?.primary?.main\\n  //         : theme?.colors?.white\\n  //     },\\n  //     marginTop: '5px',\\n  //     marginLeft: '16px',\\n  //     width: '90%'\\n  //   }),\\n  //   menuList: (provided: any) => ({\\n  //     ...provided,\\n  //     marginTop: '0px'\\n  //   }),\\n  //   valueContainer: (provided: any) => ({\\n  //     ...provided,\\n  //     padding: '0px'\\n  //   })\\n  // }\\n  return (\\n    <ThemeWrapper>\\n      <Box p='2em' bgColor='grey.50'>\\n        <IconDropdown\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\n          optionList={object('optionList', ListViewOption)}\\n          width={text('width', '120px')}\\n          menuIsOpen={boolean('menuIsOpen', false)}\\n          primary={boolean('primary', false)}\\n          intent={text('intent', 'page') as tIntent}\\n          onChange={action('Value Changed')}\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\n          disabled={boolean('disabled', false)}\\n          value='available'\\n          optionComponent={({ selectedOption }: any) => {\\n            return (\\n              <div>\\n                <div>{selectedOption?.color}</div>\\n                <div>{selectedOption?.label}</div>\\n              </div>\\n            )\\n          }}\\n          // customStyle={customStyle}\\n        >\\n          {({\\n            selectedOption,\\n            menuIsOpen,\\n            setMenuIsOpen\\n          }: IUniversalDropdownChildren) => {\\n            return (\\n              <Button\\n                onClick={() => {\\n                  setMenuIsOpen(!menuIsOpen)\\n                  action('Universal open/closed')(menuIsOpen)\\n                }}\\n                color={text('color', 'white')}\\n                bgColor={text('bgColor', 'black')}\\n                fullWidth={boolean('fullWidth', false)}\\n              >\\n                {selectedOption?.label}\\n              </Button>\\n            )\\n          }}\\n        </IconDropdown>\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nexport const TextFieldDropdown = addSourceDecorator(() => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='2em' bgColor='grey.50'>\\n        <IconDropdown\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\n          optionList={object('optionList', ListViewOption)}\\n          width={text('width', '120px')}\\n          menuIsOpen={boolean('menuIsOpen', false)}\\n          primary={boolean('primary', false)}\\n          intent={text('intent', 'page') as tIntent}\\n          onChange={action('Value Changed')}\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\n          disabled={boolean('disabled', false)}\\n          value='available'\\n          optionComponent={({ selectedOption }: any) => {\\n            return (\\n              <div>\\n                <div>{selectedOption?.color}</div>\\n                <div>{selectedOption?.label}</div>\\n              </div>\\n            )\\n          }}\\n          // customStyle={customStyle}\\n        >\\n          {({\\n            selectedOption,\\n            menuIsOpen,\\n            setMenuIsOpen\\n          }: IUniversalDropdownChildren) => {\\n            return (\\n              <TextInput\\n                id='someId'\\n                name='someName'\\n                className='someClassName'\\n                label={text('label', 'Username')}\\n                labelColor={text('labelColor', 'text.inputLabel.default')}\\n                placeholder={text('placeholder', 'Enter text here...')}\\n                maxLength={number('maxLength', 10)}\\n                error={boolean('error', false)}\\n                errorMessage={text('errorMessage', '')}\\n                required={boolean('required', false)}\\n                fullWidth={boolean('fullWidth', false)}\\n                onChange={action('Triggered: onChange')}\\n                onClick={() => {\\n                  setMenuIsOpen(!menuIsOpen)\\n                  action('universal open/closed')(menuIsOpen)\\n                }}\\n                value={selectedOption?.value}\\n              />\\n            )\\n          }}\\n        </IconDropdown>\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\",\"locationsMap\":{}},\"storySource\":{\"source\":\"import { action } from '@storybook/addon-actions'\\nimport {\\n  array,\\n  boolean,\\n  number,\\n  object,\\n  text,\\n  withKnobs\\n} from '@storybook/addon-knobs'\\nimport React from 'react'\\nimport IconDropdown from '.'\\nimport { path } from '..'\\nimport { Box } from '../../..'\\nimport ThemeWrapper from '../../../utilities/components/ThemeWrapper'\\nimport Button, { tIntent } from '../../atoms/Button'\\nimport CardComponent from '../../atoms/Card'\\nimport { tPlacement } from '../../../utilities/types'\\nimport {\\n  IUniversalDropdownChildren,\\n  tSelectVariant\\n} from '../DropDown/interface'\\nimport TextInput from '../TextInput'\\n\\nexport default {\\n  title: `${path}/IconDropdown`,\\n  decorators: [withKnobs],\\n  component: IconDropdown\\n}\\n\\nconst ListViewOption = [\\n  {\\n    value: 'available',\\n    label: 'Mark As Available',\\n    color: 'blue',\\n    tooltipText: 'Mark As Available',\\n    isDisabled: true\\n  },\\n  {\\n    value: 'unavailable',\\n    label: 'Mark As Unavailable',\\n    color: 'red',\\n    tooltipText: 'Mark As Unavailable'\\n  },\\n  {\\n    value: 'active',\\n    label: 'Mark As Active',\\n    color: 'purple',\\n    tooltipText: 'Mark As Active'\\n  },\\n  {\\n    value: 'inactive',\\n    label: 'Mark As Inactive',\\n    color: 'green',\\n    tooltipText: 'Mark As Inactive'\\n  }\\n]\\n\\nconst MultiLevelListViewOption = [\\n  {\\n    id: 'available',\\n    value: 'available',\\n    label: 'Mark As Available',\\n    color: 'blue',\\n    tooltipText: 'Mark As Available',\\n    options: [\\n      {\\n        id: 'available',\\n        value: 'available',\\n        label: 'Mark As Child Available',\\n        color: 'blue',\\n        tooltipText: 'Mark As Child Available'\\n      },\\n      {\\n        id: 'unavailable',\\n        value: 'unavailable',\\n        label: 'Mark As Child Unavailable',\\n        color: 'red',\\n        tooltipText: 'Mark As Child Unavailable'\\n      },\\n      {\\n        id: 'active',\\n        value: 'active',\\n        label: 'Mark As Child Active',\\n        color: 'purple',\\n        tooltipText: 'Mark As Child Active'\\n      },\\n      {\\n        id: 'inactive',\\n        value: 'inactive',\\n        label: 'Mark As Child Inactive',\\n        color: 'green',\\n        tooltipText: 'Mark As Child Inactive',\\n        options: [\\n          {\\n            id: 'available',\\n            value: 'available',\\n            label: 'Mark As Grand Child Available',\\n            color: 'blue',\\n            tooltipText: 'Mark As Grand Child Available'\\n          },\\n          {\\n            id: 'unavailable',\\n            value: 'unavailable',\\n            label: 'Mark As Grand Child Unavailable',\\n            color: 'red',\\n            tooltipText: 'Mark As Grand Child Unavailable'\\n          }\\n        ]\\n      }\\n    ]\\n  },\\n  {\\n    id: 'unavailable',\\n    value: 'unavailable',\\n    label: 'Mark As Unavailable',\\n    color: 'red',\\n    tooltipText: 'Mark As Unavailable'\\n  },\\n  {\\n    id: 'active',\\n    value: 'active',\\n    label: 'Mark As Active',\\n    color: 'purple',\\n    tooltipText: 'Mark As Active'\\n  },\\n  {\\n    id: 'inactive',\\n    value: 'inactive',\\n    label: 'Mark As Inactive',\\n    color: 'green',\\n    tooltipText: 'Mark As Inactive'\\n  }\\n]\\n\\nconst paginationOptions = [\\n  { value: '25', label: '25 per page', title: '25 per page' },\\n  { value: '50', label: '50 per page', title: '50 per page' },\\n  { value: '100', label: '100 per page', title: '100 per page' },\\n  { value: '200', label: '200 per page', title: '200 per page' }\\n]\\n\\nconst columnOption = [\\n  { value: 'ascending', label: 'Sort Ascending', iconVariant: 'hide-menu-box' },\\n  {\\n    value: 'descending',\\n    label: 'Sort Descending',\\n    iconVariant: 'hub-location'\\n  },\\n  { value: 'hideColumn', label: 'Hide Column', iconVariant: 'close' },\\n  { value: 'pinLeft', label: 'Pin Left', iconVariant: 'angle-left' },\\n  { value: 'pinright', label: 'Pin Right', iconVariant: 'angle-right-thin' }\\n]\\n\\nconst options = [\\n  {\\n    value: 'emailVerificationPending',\\n    label: 'Email Verification Pending Shipper'\\n  },\\n  { value: 'allShippers', label: 'All Shippers' },\\n  { value: 'approvalPendingShippers', label: 'Approval Pending Shippers' }\\n]\\n\\nconst datePickerOptions = [\\n  { value: 'January', label: 'January' },\\n  { value: 'February', label: 'February' },\\n  { value: 'March', label: 'March' },\\n  { value: 'April', label: 'April' },\\n  { value: 'May', label: 'May' },\\n  { value: 'June', label: 'June' },\\n  { value: 'July', label: 'July' },\\n  { value: 'August', label: 'August' },\\n  { value: 'September', label: 'September' },\\n  { value: 'October', label: 'October' },\\n  { value: 'November', label: 'November' },\\n  { value: 'December', label: 'December' }\\n]\\n\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\nexport const ButtonDropdown = () => (\\n  <ThemeWrapper>\\n    <Box p='2em' bgColor='grey.50'>\\n      <IconDropdown\\n        variant={text('varaint', 'button-dropdown') as tSelectVariant}\\n        optionList={object('optionList', ListViewOption)}\\n        width={text('width', '120px')}\\n        menuIsOpen={boolean('menuIsOpen', false)}\\n        iconButtonDetails={array('iconList', [\\n          'hide-menu-box',\\n          'More',\\n          'angle-down'\\n        ])}\\n        primary={boolean('primary', false)}\\n        intent={text('intent', 'page') as tIntent}\\n        onChange={action('Value Changed')}\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\n        disabled={boolean('disabled', false)}\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\n        tooltipProps={{\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\n        }}\\n      />\\n    </Box>\\n  </ThemeWrapper>\\n)\\n\\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\\nexport const TextDropdown = () => (\\n  <ThemeWrapper>\\n    <Box p='2em' bgColor='grey.50'>\\n      <IconDropdown\\n        variant={text('varaint', 'text-dropdown') as tSelectVariant}\\n        optionList={object('optionList', ListViewOption)}\\n        width={text('width', '120px')}\\n        menuIsOpen={boolean('menuIsOpen', false)}\\n        iconButtonDetails={array('iconList', [\\n          'hide-menu-box',\\n          'More',\\n          'angle-down'\\n        ])}\\n        primary={boolean('primary', false)}\\n        intent={text('intent', 'page') as tIntent}\\n        onChange={action('Value Changed')}\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\n        disabled={boolean('disabled', false)}\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\n        tooltipProps={{\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\n        }}\\n      />\\n    </Box>\\n  </ThemeWrapper>\\n)\\n\\nexport const MultiLevelBreadCrumb = () => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='2em' bgColor='grey.50'>\\n        <IconDropdown\\n          variant={text('variant', 'multilevel-breadcrumb') as tSelectVariant}\\n          optionList={object('optionList', MultiLevelListViewOption)}\\n          onChange={action('Value selected')}\\n          value={text('value', 'strawberry')}\\n          width={text('width', '260px')}\\n        />\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n  }\\n\\nexport const MultiLevelButtonDropdown = () => (\\n  <ThemeWrapper>\\n    <Box p='2em' bgColor='grey.50'>\\n      <IconDropdown\\n        variant={\\n          text('varaint', 'multilevel-button-dropdown') as tSelectVariant\\n        }\\n        optionList={object('optionList', MultiLevelListViewOption)}\\n        width={text('width', '120px')}\\n        menuIsOpen\\n        iconButtonDetails={array('iconList', [\\n          'hide-menu-box',\\n          'More',\\n          'angle-down'\\n        ])}\\n        defaultOpen='right'\\n        primary={boolean('primary', false)}\\n        intent={text('intent', 'page') as tIntent}\\n        handleClick={(id: any) => console.log('clicked from storybook', id)}\\n        isSingleClickOption={boolean('isSingleClickOption', true)}\\n        disabled={boolean('disabled', false)}\\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\\n        tooltipProps={{\\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\\n        }}\\n      />\\n    </Box>\\n  </ThemeWrapper>\\n)\\n\\nexport const PaginationDropdown = () => (\\n  <ThemeWrapper>\\n    <CardComponent style={{ height: '300px' }}>\\n      <IconDropdown\\n        variant={text('variant', 'pagination-size') as tSelectVariant}\\n        optionList={object('optionList', paginationOptions)}\\n        onChange={action('Value selected')}\\n        value={text('value', '50')}\\n        width={text('width', '120px')}\\n      />\\n    </CardComponent>\\n  </ThemeWrapper>\\n)\\n\\nexport const columnOptionComponent = () => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='2em' bgColor='grey.50'>\\n        <div style={{ width: '200px', margin: 'auto' }}>\\n          <IconDropdown\\n            variant={text('variant', 'column-filter') as tSelectVariant}\\n            optionList={object('optionList', columnOption)}\\n            onChange={action('Value selected')}\\n            width={text('width', '10px')}\\n            isSingleClickOption={boolean('isSingleClickOption', true)}\\n          />\\n        </div>\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}\\n\\nexport const BreadCrumbComponent = () => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='2em' bgColor='grey.50'>\\n        <IconDropdown\\n          variant={text('variant', 'bread-crumb') as tSelectVariant}\\n          optionList={object('optionList', options)}\\n          onChange={action('Value selected')}\\n          value={text('value', 'strawberry')}\\n          width={text('width', '260px')}\\n        />\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}\\n\\nexport const DatePickerDropDown = () => (\\n  <ThemeWrapper>\\n    <CardComponent style={{ height: '200px' }}>\\n      <IconDropdown\\n        variant={text('variant', 'date-picker') as tSelectVariant}\\n        optionList={object('optionList', datePickerOptions)}\\n        onChange={action('Value selected')}\\n        value={text('value', '50')}\\n        width={text('width', '80px')}\\n        showDownArrow={boolean('Show Down Arrow', true)}\\n        isMultiRegionStyled={boolean('Is Multi Region Styled', false)}\\n      />\\n    </CardComponent>\\n  </ThemeWrapper>\\n)\\nconst arrayMap = [\\n  { variant: 'column-filter', name: 'column-filter0' },\\n  { variant: 'column-filter', name: 'column-filter1' },\\n  { variant: 'column-filter', name: 'column-filter2' }\\n]\\n\\nexport const columnOptionList = () => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='2em' bgColor='grey.50'>\\n        <div style={{ width: '200px', margin: 'auto' }}>\\n          {arrayMap.map((obj: any, index: number) => {\\n            return (\\n              <IconDropdown\\n                variant={text('variant', obj?.variant) as tSelectVariant}\\n                optionList={object('optionList', columnOption)}\\n                onChange={action('Value selected')}\\n                width={text('width', '10px')}\\n                isSingleClickOption={boolean('isSingleClickOption', true)}\\n                key={index}\\n              />\\n            )\\n          })}\\n        </div>\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}\\n\\nexport const DropdownUniversal = () => {\\n  // reference to style\\n  // const theme = useContext(ThemeContext)\\n  // const borderBottom = `1px solid ${theme?.colors?.grey['A800']}`\\n  // const customStyle = {\\n  //   control: (provided: any) => ({\\n  //     ...provided,\\n  //     borderStyle: 'none',\\n  //     borderBottom,\\n  //     borderRadius: '0px',\\n  //     boxShadow: 'none',\\n  //     borderColor: theme?.colors?.grey?.A800,\\n  //     '&:focus': {\\n  //       borderStyle: 'none',\\n  //       borderBottom,\\n  //       boxShadow: 'none',\\n  //       borderColor: theme?.colors?.grey?.A800\\n  //     },\\n  //     '&:hover': {\\n  //       borderStyle: 'none',\\n  //       borderBottom,\\n  //       boxShadow: 'none',\\n  //       borderColor: theme?.colors?.grey?.A800\\n  //     }\\n  //   }),\\n  //   option: (provided: any, state: any) => ({\\n  //     ...provided,\\n  //     backgroundColor: state?.isSelected\\n  //       ? theme?.colors?.primary?.main\\n  //       : theme?.colors?.white,\\n  //     '&:hover': {\\n  //       backgroundColor: state?.isSelected\\n  //         ? theme?.colors?.primary?.main\\n  //         : theme?.colors?.grey['50']\\n  //     }\\n  //   }),\\n\\n  //   menu: (provided: any, state: any) => ({\\n  //     ...provided,\\n  //     backgroundColor: state?.isSelected\\n  //       ? theme.colors.primary.main\\n  //       : theme?.colors?.white,\\n  //     borderRadius: '2px',\\n  //     '&:hover': {\\n  //       backgroundColor: state?.isSelected\\n  //         ? theme?.colors?.primary?.main\\n  //         : theme?.colors?.white\\n  //     },\\n  //     marginTop: '5px',\\n  //     marginLeft: '16px',\\n  //     width: '90%'\\n  //   }),\\n  //   menuList: (provided: any) => ({\\n  //     ...provided,\\n  //     marginTop: '0px'\\n  //   }),\\n  //   valueContainer: (provided: any) => ({\\n  //     ...provided,\\n  //     padding: '0px'\\n  //   })\\n  // }\\n  return (\\n    <ThemeWrapper>\\n      <Box p='2em' bgColor='grey.50'>\\n        <IconDropdown\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\n          optionList={object('optionList', ListViewOption)}\\n          width={text('width', '120px')}\\n          menuIsOpen={boolean('menuIsOpen', false)}\\n          primary={boolean('primary', false)}\\n          intent={text('intent', 'page') as tIntent}\\n          onChange={action('Value Changed')}\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\n          disabled={boolean('disabled', false)}\\n          value='available'\\n          optionComponent={({ selectedOption }: any) => {\\n            return (\\n              <div>\\n                <div>{selectedOption?.color}</div>\\n                <div>{selectedOption?.label}</div>\\n              </div>\\n            )\\n          }}\\n          // customStyle={customStyle}\\n        >\\n          {({\\n            selectedOption,\\n            menuIsOpen,\\n            setMenuIsOpen\\n          }: IUniversalDropdownChildren) => {\\n            return (\\n              <Button\\n                onClick={() => {\\n                  setMenuIsOpen(!menuIsOpen)\\n                  action('Universal open/closed')(menuIsOpen)\\n                }}\\n                color={text('color', 'white')}\\n                bgColor={text('bgColor', 'black')}\\n                fullWidth={boolean('fullWidth', false)}\\n              >\\n                {selectedOption?.label}\\n              </Button>\\n            )\\n          }}\\n        </IconDropdown>\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}\\n\\nexport const TextFieldDropdown = () => {\\n  return (\\n    <ThemeWrapper>\\n      <Box p='2em' bgColor='grey.50'>\\n        <IconDropdown\\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\\n          optionList={object('optionList', ListViewOption)}\\n          width={text('width', '120px')}\\n          menuIsOpen={boolean('menuIsOpen', false)}\\n          primary={boolean('primary', false)}\\n          intent={text('intent', 'page') as tIntent}\\n          onChange={action('Value Changed')}\\n          isSingleClickOption={boolean('isSingleClickOption', true)}\\n          disabled={boolean('disabled', false)}\\n          value='available'\\n          optionComponent={({ selectedOption }: any) => {\\n            return (\\n              <div>\\n                <div>{selectedOption?.color}</div>\\n                <div>{selectedOption?.label}</div>\\n              </div>\\n            )\\n          }}\\n          // customStyle={customStyle}\\n        >\\n          {({\\n            selectedOption,\\n            menuIsOpen,\\n            setMenuIsOpen\\n          }: IUniversalDropdownChildren) => {\\n            return (\\n              <TextInput\\n                id='someId'\\n                name='someName'\\n                className='someClassName'\\n                label={text('label', 'Username')}\\n                labelColor={text('labelColor', 'text.inputLabel.default')}\\n                placeholder={text('placeholder', 'Enter text here...')}\\n                maxLength={number('maxLength', 10)}\\n                error={boolean('error', false)}\\n                errorMessage={text('errorMessage', '')}\\n                required={boolean('required', false)}\\n                fullWidth={boolean('fullWidth', false)}\\n                onChange={action('Triggered: onChange')}\\n                onClick={() => {\\n                  setMenuIsOpen(!menuIsOpen)\\n                  action('universal open/closed')(menuIsOpen)\\n                }}\\n                value={selectedOption?.value}\\n              />\\n            )\\n          }}\\n        </IconDropdown>\\n      </Box>\\n    </ThemeWrapper>\\n  )\\n}\\n\",\"locationsMap\":{}},},\n  title: `${path}/IconDropdown`,\n  decorators: [withKnobs],\n  component: IconDropdown\n}\n\nconst ListViewOption = [\n  {\n    value: 'available',\n    label: 'Mark As Available',\n    color: 'blue',\n    tooltipText: 'Mark As Available',\n    isDisabled: true\n  },\n  {\n    value: 'unavailable',\n    label: 'Mark As Unavailable',\n    color: 'red',\n    tooltipText: 'Mark As Unavailable'\n  },\n  {\n    value: 'active',\n    label: 'Mark As Active',\n    color: 'purple',\n    tooltipText: 'Mark As Active'\n  },\n  {\n    value: 'inactive',\n    label: 'Mark As Inactive',\n    color: 'green',\n    tooltipText: 'Mark As Inactive'\n  }\n]\n\nconst MultiLevelListViewOption = [\n  {\n    id: 'available',\n    value: 'available',\n    label: 'Mark As Available',\n    color: 'blue',\n    tooltipText: 'Mark As Available',\n    options: [\n      {\n        id: 'available',\n        value: 'available',\n        label: 'Mark As Child Available',\n        color: 'blue',\n        tooltipText: 'Mark As Child Available'\n      },\n      {\n        id: 'unavailable',\n        value: 'unavailable',\n        label: 'Mark As Child Unavailable',\n        color: 'red',\n        tooltipText: 'Mark As Child Unavailable'\n      },\n      {\n        id: 'active',\n        value: 'active',\n        label: 'Mark As Child Active',\n        color: 'purple',\n        tooltipText: 'Mark As Child Active'\n      },\n      {\n        id: 'inactive',\n        value: 'inactive',\n        label: 'Mark As Child Inactive',\n        color: 'green',\n        tooltipText: 'Mark As Child Inactive',\n        options: [\n          {\n            id: 'available',\n            value: 'available',\n            label: 'Mark As Grand Child Available',\n            color: 'blue',\n            tooltipText: 'Mark As Grand Child Available'\n          },\n          {\n            id: 'unavailable',\n            value: 'unavailable',\n            label: 'Mark As Grand Child Unavailable',\n            color: 'red',\n            tooltipText: 'Mark As Grand Child Unavailable'\n          }\n        ]\n      }\n    ]\n  },\n  {\n    id: 'unavailable',\n    value: 'unavailable',\n    label: 'Mark As Unavailable',\n    color: 'red',\n    tooltipText: 'Mark As Unavailable'\n  },\n  {\n    id: 'active',\n    value: 'active',\n    label: 'Mark As Active',\n    color: 'purple',\n    tooltipText: 'Mark As Active'\n  },\n  {\n    id: 'inactive',\n    value: 'inactive',\n    label: 'Mark As Inactive',\n    color: 'green',\n    tooltipText: 'Mark As Inactive'\n  }\n]\n\nconst paginationOptions = [\n  { value: '25', label: '25 per page', title: '25 per page' },\n  { value: '50', label: '50 per page', title: '50 per page' },\n  { value: '100', label: '100 per page', title: '100 per page' },\n  { value: '200', label: '200 per page', title: '200 per page' }\n]\n\nconst columnOption = [\n  { value: 'ascending', label: 'Sort Ascending', iconVariant: 'hide-menu-box' },\n  {\n    value: 'descending',\n    label: 'Sort Descending',\n    iconVariant: 'hub-location'\n  },\n  { value: 'hideColumn', label: 'Hide Column', iconVariant: 'close' },\n  { value: 'pinLeft', label: 'Pin Left', iconVariant: 'angle-left' },\n  { value: 'pinright', label: 'Pin Right', iconVariant: 'angle-right-thin' }\n]\n\nconst options = [\n  {\n    value: 'emailVerificationPending',\n    label: 'Email Verification Pending Shipper'\n  },\n  { value: 'allShippers', label: 'All Shippers' },\n  { value: 'approvalPendingShippers', label: 'Approval Pending Shippers' }\n]\n\nconst datePickerOptions = [\n  { value: 'January', label: 'January' },\n  { value: 'February', label: 'February' },\n  { value: 'March', label: 'March' },\n  { value: 'April', label: 'April' },\n  { value: 'May', label: 'May' },\n  { value: 'June', label: 'June' },\n  { value: 'July', label: 'July' },\n  { value: 'August', label: 'August' },\n  { value: 'September', label: 'September' },\n  { value: 'October', label: 'October' },\n  { value: 'November', label: 'November' },\n  { value: 'December', label: 'December' }\n]\n\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\nexport const ButtonDropdown = addSourceDecorator(addSourceDecorator(addSourceDecorator(() => (\n  <ThemeWrapper>\n    <Box p='2em' bgColor='grey.50'>\n      <IconDropdown\n        variant={text('varaint', 'button-dropdown') as tSelectVariant}\n        optionList={object('optionList', ListViewOption)}\n        width={text('width', '120px')}\n        menuIsOpen={boolean('menuIsOpen', false)}\n        iconButtonDetails={array('iconList', [\n          'hide-menu-box',\n          'More',\n          'angle-down'\n        ])}\n        primary={boolean('primary', false)}\n        intent={text('intent', 'page') as tIntent}\n        onChange={action('Value Changed')}\n        isSingleClickOption={boolean('isSingleClickOption', true)}\n        disabled={boolean('disabled', false)}\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\n        tooltipProps={{\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\n        }}\n      />\n    </Box>\n  </ThemeWrapper>\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;;\n\n// wherever we using isSingleClickOption and not saving selected option thier iconKey is neccessary\nexport const TextDropdown = addSourceDecorator(addSourceDecorator(addSourceDecorator(() => (\n  <ThemeWrapper>\n    <Box p='2em' bgColor='grey.50'>\n      <IconDropdown\n        variant={text('varaint', 'text-dropdown') as tSelectVariant}\n        optionList={object('optionList', ListViewOption)}\n        width={text('width', '120px')}\n        menuIsOpen={boolean('menuIsOpen', false)}\n        iconButtonDetails={array('iconList', [\n          'hide-menu-box',\n          'More',\n          'angle-down'\n        ])}\n        primary={boolean('primary', false)}\n        intent={text('intent', 'page') as tIntent}\n        onChange={action('Value Changed')}\n        isSingleClickOption={boolean('isSingleClickOption', true)}\n        disabled={boolean('disabled', false)}\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\n        tooltipProps={{\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\n        }}\n      />\n    </Box>\n  </ThemeWrapper>\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;;\n\nexport const MultiLevelBreadCrumb = addSourceDecorator(addSourceDecorator(addSourceDecorator(() => {\n  return (\n    <ThemeWrapper>\n      <Box p='2em' bgColor='grey.50'>\n        <IconDropdown\n          variant={text('variant', 'multilevel-breadcrumb') as tSelectVariant}\n          optionList={object('optionList', MultiLevelListViewOption)}\n          onChange={action('Value selected')}\n          value={text('value', 'strawberry')}\n          width={text('width', '260px')}\n        />\n      </Box>\n    </ThemeWrapper>\n  )\n  }, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;;\n\nexport const MultiLevelButtonDropdown = addSourceDecorator(addSourceDecorator(addSourceDecorator(() => (\n  <ThemeWrapper>\n    <Box p='2em' bgColor='grey.50'>\n      <IconDropdown\n        variant={\n          text('varaint', 'multilevel-button-dropdown') as tSelectVariant\n        }\n        optionList={object('optionList', MultiLevelListViewOption)}\n        width={text('width', '120px')}\n        menuIsOpen\n        iconButtonDetails={array('iconList', [\n          'hide-menu-box',\n          'More',\n          'angle-down'\n        ])}\n        defaultOpen='right'\n        primary={boolean('primary', false)}\n        intent={text('intent', 'page') as tIntent}\n        handleClick={(id: any) => console.log('clicked from storybook', id)}\n        isSingleClickOption={boolean('isSingleClickOption', true)}\n        disabled={boolean('disabled', false)}\n        tooltipMessage={text('tooltipMessage', 'Mark Attendence as Absent.')}\n        tooltipProps={{\n          arrowPlacement: text('arrowPlacement', 'start') as tPlacement\n        }}\n      />\n    </Box>\n  </ThemeWrapper>\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;;\n\nexport const PaginationDropdown = addSourceDecorator(addSourceDecorator(addSourceDecorator(() => (\n  <ThemeWrapper>\n    <CardComponent style={{ height: '300px' }}>\n      <IconDropdown\n        variant={text('variant', 'pagination-size') as tSelectVariant}\n        optionList={object('optionList', paginationOptions)}\n        onChange={action('Value selected')}\n        value={text('value', '50')}\n        width={text('width', '120px')}\n      />\n    </CardComponent>\n  </ThemeWrapper>\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;;\n\nexport const columnOptionComponent = addSourceDecorator(addSourceDecorator(addSourceDecorator(() => {\n  return (\n    <ThemeWrapper>\n      <Box p='2em' bgColor='grey.50'>\n        <div style={{ width: '200px', margin: 'auto' }}>\n          <IconDropdown\n            variant={text('variant', 'column-filter') as tSelectVariant}\n            optionList={object('optionList', columnOption)}\n            onChange={action('Value selected')}\n            width={text('width', '10px')}\n            isSingleClickOption={boolean('isSingleClickOption', true)}\n          />\n        </div>\n      </Box>\n    </ThemeWrapper>\n  )\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;;\n\nexport const BreadCrumbComponent = addSourceDecorator(addSourceDecorator(addSourceDecorator(() => {\n  return (\n    <ThemeWrapper>\n      <Box p='2em' bgColor='grey.50'>\n        <IconDropdown\n          variant={text('variant', 'bread-crumb') as tSelectVariant}\n          optionList={object('optionList', options)}\n          onChange={action('Value selected')}\n          value={text('value', 'strawberry')}\n          width={text('width', '260px')}\n        />\n      </Box>\n    </ThemeWrapper>\n  )\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;;\n\nexport const DatePickerDropDown = addSourceDecorator(addSourceDecorator(addSourceDecorator(() => (\n  <ThemeWrapper>\n    <CardComponent style={{ height: '200px' }}>\n      <IconDropdown\n        variant={text('variant', 'date-picker') as tSelectVariant}\n        optionList={object('optionList', datePickerOptions)}\n        onChange={action('Value selected')}\n        value={text('value', '50')}\n        width={text('width', '80px')}\n        showDownArrow={boolean('Show Down Arrow', true)}\n        isMultiRegionStyled={boolean('Is Multi Region Styled', false)}\n      />\n    </CardComponent>\n  </ThemeWrapper>\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;;\nconst arrayMap = [\n  { variant: 'column-filter', name: 'column-filter0' },\n  { variant: 'column-filter', name: 'column-filter1' },\n  { variant: 'column-filter', name: 'column-filter2' }\n]\n\nexport const columnOptionList = addSourceDecorator(addSourceDecorator(addSourceDecorator(() => {\n  return (\n    <ThemeWrapper>\n      <Box p='2em' bgColor='grey.50'>\n        <div style={{ width: '200px', margin: 'auto' }}>\n          {arrayMap.map((obj: any, index: number) => {\n            return (\n              <IconDropdown\n                variant={text('variant', obj?.variant) as tSelectVariant}\n                optionList={object('optionList', columnOption)}\n                onChange={action('Value selected')}\n                width={text('width', '10px')}\n                isSingleClickOption={boolean('isSingleClickOption', true)}\n                key={index}\n              />\n            )\n          })}\n        </div>\n      </Box>\n    </ThemeWrapper>\n  )\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;;\n\nexport const DropdownUniversal = addSourceDecorator(addSourceDecorator(addSourceDecorator(() => {\n  // reference to style\n  // const theme = useContext(ThemeContext)\n  // const borderBottom = `1px solid ${theme?.colors?.grey['A800']}`\n  // const customStyle = {\n  //   control: (provided: any) => ({\n  //     ...provided,\n  //     borderStyle: 'none',\n  //     borderBottom,\n  //     borderRadius: '0px',\n  //     boxShadow: 'none',\n  //     borderColor: theme?.colors?.grey?.A800,\n  //     '&:focus': {\n  //       borderStyle: 'none',\n  //       borderBottom,\n  //       boxShadow: 'none',\n  //       borderColor: theme?.colors?.grey?.A800\n  //     },\n  //     '&:hover': {\n  //       borderStyle: 'none',\n  //       borderBottom,\n  //       boxShadow: 'none',\n  //       borderColor: theme?.colors?.grey?.A800\n  //     }\n  //   }),\n  //   option: (provided: any, state: any) => ({\n  //     ...provided,\n  //     backgroundColor: state?.isSelected\n  //       ? theme?.colors?.primary?.main\n  //       : theme?.colors?.white,\n  //     '&:hover': {\n  //       backgroundColor: state?.isSelected\n  //         ? theme?.colors?.primary?.main\n  //         : theme?.colors?.grey['50']\n  //     }\n  //   }),\n\n  //   menu: (provided: any, state: any) => ({\n  //     ...provided,\n  //     backgroundColor: state?.isSelected\n  //       ? theme.colors.primary.main\n  //       : theme?.colors?.white,\n  //     borderRadius: '2px',\n  //     '&:hover': {\n  //       backgroundColor: state?.isSelected\n  //         ? theme?.colors?.primary?.main\n  //         : theme?.colors?.white\n  //     },\n  //     marginTop: '5px',\n  //     marginLeft: '16px',\n  //     width: '90%'\n  //   }),\n  //   menuList: (provided: any) => ({\n  //     ...provided,\n  //     marginTop: '0px'\n  //   }),\n  //   valueContainer: (provided: any) => ({\n  //     ...provided,\n  //     padding: '0px'\n  //   })\n  // }\n  return (\n    <ThemeWrapper>\n      <Box p='2em' bgColor='grey.50'>\n        <IconDropdown\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\n          optionList={object('optionList', ListViewOption)}\n          width={text('width', '120px')}\n          menuIsOpen={boolean('menuIsOpen', false)}\n          primary={boolean('primary', false)}\n          intent={text('intent', 'page') as tIntent}\n          onChange={action('Value Changed')}\n          isSingleClickOption={boolean('isSingleClickOption', true)}\n          disabled={boolean('disabled', false)}\n          value='available'\n          optionComponent={({ selectedOption }: any) => {\n            return (\n              <div>\n                <div>{selectedOption?.color}</div>\n                <div>{selectedOption?.label}</div>\n              </div>\n            )\n          }}\n          // customStyle={customStyle}\n        >\n          {({\n            selectedOption,\n            menuIsOpen,\n            setMenuIsOpen\n          }: IUniversalDropdownChildren) => {\n            return (\n              <Button\n                onClick={() => {\n                  setMenuIsOpen(!menuIsOpen)\n                  action('Universal open/closed')(menuIsOpen)\n                }}\n                color={text('color', 'white')}\n                bgColor={text('bgColor', 'black')}\n                fullWidth={boolean('fullWidth', false)}\n              >\n                {selectedOption?.label}\n              </Button>\n            )\n          }}\n        </IconDropdown>\n      </Box>\n    </ThemeWrapper>\n  )\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;;\n\nexport const TextFieldDropdown = addSourceDecorator(addSourceDecorator(addSourceDecorator(() => {\n  return (\n    <ThemeWrapper>\n      <Box p='2em' bgColor='grey.50'>\n        <IconDropdown\n          variant={text('varaint', 'default-dropdown') as tSelectVariant}\n          optionList={object('optionList', ListViewOption)}\n          width={text('width', '120px')}\n          menuIsOpen={boolean('menuIsOpen', false)}\n          primary={boolean('primary', false)}\n          intent={text('intent', 'page') as tIntent}\n          onChange={action('Value Changed')}\n          isSingleClickOption={boolean('isSingleClickOption', true)}\n          disabled={boolean('disabled', false)}\n          value='available'\n          optionComponent={({ selectedOption }: any) => {\n            return (\n              <div>\n                <div>{selectedOption?.color}</div>\n                <div>{selectedOption?.label}</div>\n              </div>\n            )\n          }}\n          // customStyle={customStyle}\n        >\n          {({\n            selectedOption,\n            menuIsOpen,\n            setMenuIsOpen\n          }: IUniversalDropdownChildren) => {\n            return (\n              <TextInput\n                id='someId'\n                name='someName'\n                className='someClassName'\n                label={text('label', 'Username')}\n                labelColor={text('labelColor', 'text.inputLabel.default')}\n                placeholder={text('placeholder', 'Enter text here...')}\n                maxLength={number('maxLength', 10)}\n                error={boolean('error', false)}\n                errorMessage={text('errorMessage', '')}\n                required={boolean('required', false)}\n                fullWidth={boolean('fullWidth', false)}\n                onChange={action('Triggered: onChange')}\n                onClick={() => {\n                  setMenuIsOpen(!menuIsOpen)\n                  action('universal open/closed')(menuIsOpen)\n                }}\n                value={selectedOption?.value}\n              />\n            )\n          }}\n        </IconDropdown>\n      </Box>\n    </ThemeWrapper>\n  )\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});"],"sourceRoot":""},"metadata":{},"sourceType":"module"}