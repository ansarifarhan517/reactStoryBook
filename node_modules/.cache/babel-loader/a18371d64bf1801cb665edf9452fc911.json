{"ast":null,"code":"import _objectSpread from \"/Users/farhanansari/Code/ui-library/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/Users/farhanansari/Code/ui-library/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/farhanansari/Code/ui-library/src/components/atoms/Charts/BarChart/index.tsx\";\n\nimport React, { Fragment, useEffect, useState } from 'react';\nimport { Bar, BarChart, Brush, CartesianGrid, ComposedChart, Legend // Line,\n, ResponsiveContainer, Tooltip, XAxis, YAxis, Cell, ReferenceLine } from 'recharts';\nimport CustomLegend from '../CustomLegend';\nimport TooltipCompoent from '../ToolTip';\nimport { StyledBarChart } from './StyledBarChart'; // for y axis tick values provided we be in below format\n\nvar convertDecimalToPercent = function convertDecimalToPercent(decimal) {\n  var fixed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  return \"\".concat(decimal.toFixed(fixed), \"%\");\n};\n\nvar setToFixed = function setToFixed(decimal) {\n  if (Number.isInteger(decimal)) {\n    return \"\".concat(decimal.toFixed(0));\n  } else {\n    return \"\".concat(decimal.toFixed(1));\n  }\n};\n/* here we are creating a map from legendData where value is 0,i.e. bar chart and as\n typescript doesnt allow to add conditional data in map\n we have to return null and as we dont want null we later filter it out */\n\n\nvar getActiveBarData = function getActiveBarData(legendData) {\n  return legendData.map(function (option) {\n    return option.value === 0 ? option : null;\n  }).filter(function (option) {\n    return option !== null;\n  });\n};\n\nvar BarChartComponent = function BarChartComponent(_ref) {\n  var _activeBarData$, _activeBarData$2, _activeBarData$3, _tinyChartLegendData$, _tinyChartLegendData$2;\n\n  var details = _ref.details,\n      _ref$barGap = _ref.barGap,\n      barGap = _ref$barGap === void 0 ? 0 : _ref$barGap,\n      xAxisLabel = _ref.xAxisLabel,\n      yAxisLabel = _ref.yAxisLabel,\n      legendData = _ref.legendData,\n      _ref$showYaxis = _ref.showYaxis,\n      showYaxis = _ref$showYaxis === void 0 ? true : _ref$showYaxis,\n      _ref$height = _ref.height,\n      height = _ref$height === void 0 ? 500 : _ref$height,\n      _ticks = _ref._ticks,\n      _ref$toolTipVariant = _ref.toolTipVariant,\n      toolTipVariant = _ref$toolTipVariant === void 0 ? 'default' : _ref$toolTipVariant,\n      tinyChartData = _ref.tinyChartData,\n      tinyChartTitleList = _ref.tinyChartTitleList,\n      _ref$labelAngle = _ref.labelAngle,\n      labelAngle = _ref$labelAngle === void 0 ? 180 : _ref$labelAngle,\n      onChange = _ref.onChange,\n      _onClick = _ref.onClick,\n      disableClick = _ref.disableClick,\n      _ref$showTinyChart = _ref.showTinyChart,\n      showTinyChart = _ref$showTinyChart === void 0 ? false : _ref$showTinyChart,\n      tooltipTitleList = _ref.tooltipTitleList,\n      _ref$inactiveBarOpaci = _ref.inactiveBarOpacity,\n      inactiveBarOpacity = _ref$inactiveBarOpaci === void 0 ? 0.7 : _ref$inactiveBarOpaci,\n      _ref$magnifierEndInde = _ref.magnifierEndIndex,\n      magnifierEndIndex = _ref$magnifierEndInde === void 0 ? 30 : _ref$magnifierEndInde,\n      _ref$xAxisTickCharLim = _ref.xAxisTickCharLimit,\n      xAxisTickCharLimit = _ref$xAxisTickCharLim === void 0 ? 15 : _ref$xAxisTickCharLim,\n      barChartTooltip = _ref.barChartTooltip,\n      selectedBarIndex = _ref.selectedBarIndex,\n      selectedBarName = _ref.selectedBarName,\n      _ref$legendFullwidth = _ref.legendFullwidth,\n      legendFullwidth = _ref$legendFullwidth === void 0 ? false : _ref$legendFullwidth,\n      _ref$convertoPercent = _ref.convertoPercent,\n      convertoPercent = _ref$convertoPercent === void 0 ? true : _ref$convertoPercent,\n      domain = _ref.domain,\n      _ref$yAxisLabelData = _ref.yAxisLabelData,\n      yAxisLabelData = _ref$yAxisLabelData === void 0 ? {} : _ref$yAxisLabelData;\n  var ticks = [0, 20, 40, 60, 80, 100];\n\n  var _useState = useState(getActiveBarData(legendData)),\n      _useState2 = _slicedToArray(_useState, 2),\n      activeBarData = _useState2[0],\n      setActiveBarData = _useState2[1];\n\n  var _useState3 = useState(undefined),\n      _useState4 = _slicedToArray(_useState3, 2),\n      activeData = _useState4[0],\n      setActiveData = _useState4[1];\n\n  var _useState5 = useState(legendData),\n      _useState6 = _slicedToArray(_useState5, 2),\n      activeLegend = _useState6[0],\n      setActiveLegend = _useState6[1];\n\n  var _useState7 = useState(selectedBarIndex),\n      _useState8 = _slicedToArray(_useState7, 2),\n      activeIndex = _useState8[0],\n      setActiveIndex = _useState8[1];\n\n  var _useState9 = useState(selectedBarName),\n      _useState10 = _slicedToArray(_useState9, 2),\n      activeBarName = _useState10[0],\n      setActiveBarName = _useState10[1];\n\n  var _useState11 = useState(magnifierEndIndex),\n      _useState12 = _slicedToArray(_useState11, 2),\n      _magnifierEndIndex = _useState12[0],\n      setMagnifierEndIndex = _useState12[1];\n\n  useEffect(function () {\n    setActiveIndex(selectedBarIndex);\n  }, [selectedBarIndex]);\n  useEffect(function () {\n    setActiveIndex(undefined);\n    setActiveBarName(selectedBarName);\n  }, [selectedBarName]); // in case legend data changes, change bar chart accordingly\n\n  useEffect(function () {\n    setActiveLegend(legendData);\n    setActiveBarData(getActiveBarData(legendData));\n    setMagnifierEndIndex(magnifierEndIndex);\n  }, [legendData, details, magnifierEndIndex]);\n  var tinyChartLegendData = legendData.map(function (option) {\n    return tinyChartTitleList.includes(option.name) ? option : null;\n  }).filter(function (option) {\n    return option !== null;\n  });\n\n  var onMouseEnter = function onMouseEnter(_data, _index) {\n    // for line object is not exensible and for bar it is, to handle both condition below code is written\n    var data = Object.assign(_data, {});\n\n    if (_data.type === 'linear') {\n      data = Object.create(_data);\n    }\n\n    data.toolTipVariant = toolTipVariant; // selected bar needs which type of tooltip\n\n    if (toolTipVariant !== 'withoutKpi') {\n      // below data we are capturing to show on tooltip\n      if (data.type === 'linear') {\n        data.toolTipVariant = 'default';\n        data.color = data.stroke;\n        var hoveredLine = legendData.find(function (option) {\n          return option.color === data.stroke;\n        });\n        data.value = hoveredLine === null || hoveredLine === void 0 ? void 0 : hoveredLine.value;\n        data.name = hoveredLine === null || hoveredLine === void 0 ? void 0 : hoveredLine.name;\n      } else {\n        var key = Object.keys(data).find(function (key) {\n          return data[key] === data.value;\n        });\n        data.legend = key; // selected bar of which legend(name)\n\n        legendData.forEach(function (legend) {\n          if (legend.name === key) {\n            data.color = legend.color; // selected bar of which color\n          }\n        });\n      }\n    }\n\n    setActiveData(data);\n  };\n\n  var handleClick = function handleClick(option) {\n    var newDetails = Array.from(Object.create(legendData)); // list of active legend\n\n    var filteredData = newDetails.filter(function (option) {\n      return option.active;\n    }); // here we are changing active to false for unticked legends\n\n    newDetails.forEach(function (dataItem) {\n      if (dataItem.name === option.name) {\n        // if only one legend active,dont let it untick\n        if (filteredData.length > 1) {\n          dataItem.active = !option.active;\n        } else {\n          dataItem.active = true;\n        }\n      }\n    });\n    setActiveLegend(newDetails); // to show active bars\n\n    setActiveBarData(getActiveBarData(newDetails)); // send active legend data , outside to handle other activity\n\n    onChange(newDetails);\n  };\n\n  var customizedAxisTick = function customizedAxisTick(value) {\n    // if the name is greater than limit provided then append ... and trim or else show actual value\n    var trimmedValue = labelAngle !== 0 && (value === null || value === void 0 ? void 0 : value.length) > xAxisTickCharLimit ? \"\".concat(value === null || value === void 0 ? void 0 : value.substring(0, xAxisTickCharLimit), \"...\") : value;\n    return trimmedValue;\n  };\n\n  var referenceLines = React.useMemo(function () {\n    return activeLegend.filter(function (option) {\n      return option.value !== 0 && option.active;\n    }).map(function (option) {\n      return {\n        value: option.value || 0,\n        color: option.color\n      };\n    });\n  }, [activeLegend]);\n  return /*#__PURE__*/React.createElement(StyledBarChart, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ResponsiveContainer, {\n    width: \"100%\",\n    height: height,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ComposedChart, {\n    data: details,\n    barGap: barGap,\n    stackOffset: \"expand\" // style={{ cursor: 'pointer' }}      //Fix Redmine-55059\n    ,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CartesianGrid, {\n    strokeDasharray: \"3 3\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(XAxis, {\n    dataKey: \"name\",\n    padding: {\n      left: 30,\n      right: 50\n    },\n    interval: 0,\n    width: 50,\n    height: labelAngle < 180 ? 100 : 170,\n    angle: labelAngle,\n    textAnchor: labelAngle === 0 ? 'middle' : 'end',\n    tickFormatter: customizedAxisTick,\n    label: {\n      value: xAxisLabel,\n      angle: 0,\n      className: 'axis-title',\n      position: 'insideBottom',\n      offset: 50\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(YAxis, {\n    hide: !showYaxis,\n    tickFormatter: convertoPercent ? convertDecimalToPercent : setToFixed,\n    domain: domain,\n    ticks: convertoPercent ? _ticks || ticks : _ticks || [],\n    label: _objectSpread({\n      value: yAxisLabel,\n      angle: 270,\n      className: 'axis-title',\n      position: 'outside'\n    }, yAxisLabelData),\n    width: 100,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 11\n    }\n  }), activeBarData.length > 1 ? activeBarData.map(function (option) {\n    return /*#__PURE__*/React.createElement(Bar, {\n      dataKey: option.name || '',\n      fill: option.color,\n      key: option.name,\n      onMouseEnter: onMouseEnter,\n      onMouseOut: function onMouseOut() {\n        return setActiveData(undefined);\n      },\n      hide: !option.active,\n      onClick: function onClick(data) {\n        _onClick && !disableClick && _onClick(data);\n      },\n      isAnimationActive: true // isUpdateAnimationActive\n      // animationBegin={3}\n      // animationDuration={3}\n      // animationEasing='linear'\n      ,\n      cursor: \"default\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 17\n      }\n    }, details.map(function (_value, index) {\n      return /*#__PURE__*/React.createElement(Cell, {\n        cursor: disableClick ? 'default' : 'pointer' // fillOpacity={\n        //   index === activeIndex ? 1 : inactiveBarOpacity\n        // }\n        ,\n        fillOpacity: _value.name === activeBarName || index === activeIndex ? 1 : inactiveBarOpacity,\n        key: index,\n        onClick: function onClick() {\n          return !disableClick && setActiveBarName(_value.name);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 23\n        }\n      });\n    }));\n  }) : /*#__PURE__*/React.createElement(Bar, {\n    dataKey: ((_activeBarData$ = activeBarData[0]) === null || _activeBarData$ === void 0 ? void 0 : _activeBarData$.name) || '',\n    fill: (_activeBarData$2 = activeBarData[0]) === null || _activeBarData$2 === void 0 ? void 0 : _activeBarData$2.color,\n    onMouseEnter: onMouseEnter,\n    onMouseOut: function onMouseOut() {\n      return setActiveData(undefined);\n    },\n    hide: !((_activeBarData$3 = activeBarData[0]) === null || _activeBarData$3 === void 0 ? void 0 : _activeBarData$3.active),\n    onClick: function onClick(data) {\n      _onClick && _onClick(data);\n    },\n    isAnimationActive: true // isUpdateAnimationActive\n    // animationBegin={3}\n    // animationDuration={3}\n    // animationEasing='linear'\n    ,\n    cursor: disableClick ? 'default' : 'pointer',\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 13\n    }\n  }, details.map(function (_value, index) {\n    return /*#__PURE__*/React.createElement(Cell // fillOpacity={index === activeIndex ? 1 : inactiveBarOpacity}\n    , {\n      fillOpacity: _value.name === activeBarName || index === activeIndex ? 1 : inactiveBarOpacity,\n      key: index,\n      onClick: function onClick() {\n        return !disableClick && setActiveBarName(_value.name);\n      },\n      cursor: disableClick ? 'default' : 'pointer',\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 19\n      }\n    });\n  })), referenceLines.map(function (line) {\n    return /*#__PURE__*/React.createElement(ReferenceLine, {\n      key: line.value,\n      y: line.value,\n      stroke: line.color,\n      isFront: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 13\n      }\n    });\n  }), /*#__PURE__*/React.createElement(Legend, {\n    content: /*#__PURE__*/React.createElement(CustomLegend, {\n      details: legendData,\n      isRow: true,\n      onChange: function onChange(option) {\n        return handleClick(option);\n      },\n      isFullWidth: legendFullwidth,\n      size: legendFullwidth ? '8px' : '11px',\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 15\n      }\n    }),\n    verticalAlign: \"top\",\n    wrapperStyle: {\n      position: 'unset',\n      top: '9px'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 339,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Tooltip, {\n    active: true,\n    cursor: {\n      fill: '#f00'\n    },\n    content: function content() {\n      return activeData ? /*#__PURE__*/React.createElement(TooltipCompoent, {\n        value: activeData === null || activeData === void 0 ? void 0 : activeData.value,\n        name: activeData === null || activeData === void 0 ? void 0 : activeData.name,\n        color: activeData === null || activeData === void 0 ? void 0 : activeData.color,\n        legend: activeData === null || activeData === void 0 ? void 0 : activeData.legend,\n        toolTipVariant: activeData === null || activeData === void 0 ? void 0 : activeData.toolTipVariant,\n        tooltipTitleList: tooltipTitleList,\n        barChartTooltip: barChartTooltip,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 358,\n          columnNumber: 17\n        }\n      }) : /*#__PURE__*/React.createElement(Fragment, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 368,\n          columnNumber: 17\n        }\n      });\n    },\n    wrapperStyle: {\n      height: 'auto',\n      // width: tooltipWidth,\n      visibility: 'visible'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 353,\n      columnNumber: 11\n    }\n  }), showTinyChart ? /*#__PURE__*/React.createElement(Brush, {\n    height: 70,\n    fill: \"rgba(0, 0, 0, 0)\",\n    stroke: \"rgba(0, 0, 0, 0.24)\",\n    dataKey: \"name\",\n    data: tinyChartData,\n    endIndex: details.length > _magnifierEndIndex ? _magnifierEndIndex : details.length - 1,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 380,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(BarChart, {\n    data: details,\n    barGap: 0,\n    stackOffset: \"expand\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 392,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(XAxis, {\n    dataKey: \"name\",\n    padding: {\n      left: 0,\n      right: 0\n    },\n    interval: 0,\n    width: 50,\n    height: 10,\n    tick: false,\n    dx: 0,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 393,\n      columnNumber: 17\n    }\n  }), tinyChartLegendData.length > 1 ? tinyChartLegendData.map(function (option) {\n    return /*#__PURE__*/React.createElement(Bar, {\n      dataKey: option.name || '',\n      fill: option.color,\n      key: option.name,\n      fillOpacity: inactiveBarOpacity,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 405,\n        columnNumber: 23\n      }\n    });\n  }) : /*#__PURE__*/React.createElement(Bar, {\n    dataKey: ((_tinyChartLegendData$ = tinyChartLegendData[0]) === null || _tinyChartLegendData$ === void 0 ? void 0 : _tinyChartLegendData$.name) || '',\n    fill: (_tinyChartLegendData$2 = tinyChartLegendData[0]) === null || _tinyChartLegendData$2 === void 0 ? void 0 : _tinyChartLegendData$2.color,\n    fillOpacity: inactiveBarOpacity,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 414,\n      columnNumber: 19\n    }\n  }))) : /*#__PURE__*/React.createElement(Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 423,\n      columnNumber: 13\n    }\n  }))));\n};\n\nexport default BarChartComponent;","map":{"version":3,"sources":["/Users/farhanansari/Code/ui-library/src/components/atoms/Charts/BarChart/index.tsx"],"names":["React","Fragment","useEffect","useState","Bar","BarChart","Brush","CartesianGrid","ComposedChart","Legend","ResponsiveContainer","Tooltip","XAxis","YAxis","Cell","ReferenceLine","CustomLegend","TooltipCompoent","StyledBarChart","convertDecimalToPercent","decimal","fixed","toFixed","setToFixed","Number","isInteger","getActiveBarData","legendData","map","option","value","filter","BarChartComponent","details","barGap","xAxisLabel","yAxisLabel","showYaxis","height","_ticks","toolTipVariant","tinyChartData","tinyChartTitleList","labelAngle","onChange","onClick","disableClick","showTinyChart","tooltipTitleList","inactiveBarOpacity","magnifierEndIndex","xAxisTickCharLimit","barChartTooltip","selectedBarIndex","selectedBarName","legendFullwidth","convertoPercent","domain","yAxisLabelData","ticks","activeBarData","setActiveBarData","undefined","activeData","setActiveData","activeLegend","setActiveLegend","activeIndex","setActiveIndex","activeBarName","setActiveBarName","_magnifierEndIndex","setMagnifierEndIndex","tinyChartLegendData","includes","name","onMouseEnter","_data","_index","data","Object","assign","type","create","color","stroke","hoveredLine","find","key","keys","legend","forEach","handleClick","newDetails","Array","from","filteredData","active","dataItem","length","customizedAxisTick","trimmedValue","substring","referenceLines","useMemo","left","right","angle","className","position","offset","_value","index","line","top","fill","visibility"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,QAArC,QAAqD,OAArD;AACA,SACEC,GADF,EAEEC,QAFF,EAGEC,KAHF,EAIEC,aAJF,EAKEC,aALF,EAMEC,MANF,CAOE;AAPF,EAQEC,mBARF,EASEC,OATF,EAUEC,KAVF,EAWEC,KAXF,EAYEC,IAZF,EAaEC,aAbF,QAcO,UAdP;AAeA,OAAOC,YAAP,MAAyB,iBAAzB;AAEA,OAAOC,eAAP,MAA4B,YAA5B;AACA,SAASC,cAAT,QAA+B,kBAA/B,C,CAEA;;AACA,IAAMC,uBAAuB,GAAG,SAA1BA,uBAA0B,CAACC,OAAD,EAAgC;AAAA,MAAdC,KAAc,uEAAN,CAAM;AAC9D,mBAAUD,OAAO,CAACE,OAAR,CAAgBD,KAAhB,CAAV;AACD,CAFD;;AAGA,IAAME,UAAU,GAAG,SAAbA,UAAa,CAACH,OAAD,EAAqB;AACtC,MAAGI,MAAM,CAACC,SAAP,CAAiBL,OAAjB,CAAH,EAA8B;AAC5B,qBAAUA,OAAO,CAACE,OAAR,CAAgB,CAAhB,CAAV;AACD,GAFD,MAEM;AACJ,qBAAUF,OAAO,CAACE,OAAR,CAAgB,CAAhB,CAAV;AACD;AACF,CAND;AAQA;;;;;AAGA,IAAMI,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,UAAD,EAAiC;AACxD,SAAOA,UAAU,CACdC,GADI,CACA,UAACC,MAAD;AAAA,WAAuBA,MAAM,CAACC,KAAP,KAAiB,CAAjB,GAAqBD,MAArB,GAA8B,IAArD;AAAA,GADA,EAEJE,MAFI,CAEG,UAACF,MAAD;AAAA,WAAiBA,MAAM,KAAK,IAA5B;AAAA,GAFH,CAAP;AAGD,CAJD;;AAMA,IAAMG,iBAAiB,GAAG,SAApBA,iBAAoB,OA8BT;AAAA;;AAAA,MA7BfC,OA6Be,QA7BfA,OA6Be;AAAA,yBA5BfC,MA4Be;AAAA,MA5BfA,MA4Be,4BA5BN,CA4BM;AAAA,MA3BfC,UA2Be,QA3BfA,UA2Be;AAAA,MA1BfC,UA0Be,QA1BfA,UA0Be;AAAA,MAzBfT,UAyBe,QAzBfA,UAyBe;AAAA,4BAxBfU,SAwBe;AAAA,MAxBfA,SAwBe,+BAxBH,IAwBG;AAAA,yBAvBfC,MAuBe;AAAA,MAvBfA,MAuBe,4BAvBN,GAuBM;AAAA,MAtBfC,MAsBe,QAtBfA,MAsBe;AAAA,iCArBfC,cAqBe;AAAA,MArBfA,cAqBe,oCArBE,SAqBF;AAAA,MAnBfC,aAmBe,QAnBfA,aAmBe;AAAA,MAlBfC,kBAkBe,QAlBfA,kBAkBe;AAAA,6BAjBfC,UAiBe;AAAA,MAjBfA,UAiBe,gCAjBF,GAiBE;AAAA,MAhBfC,QAgBe,QAhBfA,QAgBe;AAAA,MAffC,QAee,QAffA,OAee;AAAA,MAdfC,YAce,QAdfA,YAce;AAAA,gCAZfC,aAYe;AAAA,MAZfA,aAYe,mCAZC,KAYD;AAAA,MAXfC,gBAWe,QAXfA,gBAWe;AAAA,mCAVfC,kBAUe;AAAA,MAVfA,kBAUe,sCAVM,GAUN;AAAA,mCATfC,iBASe;AAAA,MATfA,iBASe,sCATK,EASL;AAAA,mCARfC,kBAQe;AAAA,MARfA,kBAQe,sCARM,EAQN;AAAA,MAPfC,eAOe,QAPfA,eAOe;AAAA,MANfC,gBAMe,QANfA,gBAMe;AAAA,MALfC,eAKe,QALfA,eAKe;AAAA,kCAJfC,eAIe;AAAA,MAJfA,eAIe,qCAJG,KAIH;AAAA,kCAHfC,eAGe;AAAA,MAHfA,eAGe,qCAHG,IAGH;AAAA,MAFfC,MAEe,QAFfA,MAEe;AAAA,iCADfC,cACe;AAAA,MADfA,cACe,oCADE,EACF;AACf,MAAMC,KAAK,GAAG,CAAC,CAAD,EAAI,EAAJ,EAAQ,EAAR,EAAY,EAAZ,EAAgB,EAAhB,EAAoB,GAApB,CAAd;;AADe,kBAE2BxD,QAAQ,CAChDuB,gBAAgB,CAACC,UAAD,CADgC,CAFnC;AAAA;AAAA,MAERiC,aAFQ;AAAA,MAEOC,gBAFP;;AAAA,mBAKqB1D,QAAQ,CAAM2D,SAAN,CAL7B;AAAA;AAAA,MAKRC,UALQ;AAAA,MAKIC,aALJ;;AAAA,mBAMyB7D,QAAQ,CAACwB,UAAD,CANjC;AAAA;AAAA,MAMRsC,YANQ;AAAA,MAMMC,eANN;;AAAA,mBAOuB/D,QAAQ,CAC5CkD,gBAD4C,CAP/B;AAAA;AAAA,MAORc,WAPQ;AAAA,MAOKC,cAPL;;AAAA,mBAU2BjE,QAAQ,CAChDmD,eADgD,CAVnC;AAAA;AAAA,MAURe,aAVQ;AAAA,MAUOC,gBAVP;;AAAA,oBAaoCnE,QAAQ,CACzD+C,iBADyD,CAb5C;AAAA;AAAA,MAaRqB,kBAbQ;AAAA,MAaYC,oBAbZ;;AAgBftE,EAAAA,SAAS,CAAC,YAAM;AACdkE,IAAAA,cAAc,CAACf,gBAAD,CAAd;AACD,GAFQ,EAEN,CAACA,gBAAD,CAFM,CAAT;AAIAnD,EAAAA,SAAS,CAAC,YAAM;AACdkE,IAAAA,cAAc,CAACN,SAAD,CAAd;AACAQ,IAAAA,gBAAgB,CAAChB,eAAD,CAAhB;AACD,GAHQ,EAGN,CAACA,eAAD,CAHM,CAAT,CApBe,CAyBf;;AACApD,EAAAA,SAAS,CAAC,YAAM;AACdgE,IAAAA,eAAe,CAACvC,UAAD,CAAf;AACAkC,IAAAA,gBAAgB,CAACnC,gBAAgB,CAACC,UAAD,CAAjB,CAAhB;AACA6C,IAAAA,oBAAoB,CAACtB,iBAAD,CAApB;AACD,GAJQ,EAIN,CAACvB,UAAD,EAAaM,OAAb,EAAsBiB,iBAAtB,CAJM,CAAT;AAMA,MAAMuB,mBAAmB,GAAG9C,UAAU,CACnCC,GADyB,CACrB,UAACC,MAAD;AAAA,WACHa,kBAAkB,CAACgC,QAAnB,CAA4B7C,MAAM,CAAC8C,IAAnC,IAA2C9C,MAA3C,GAAoD,IADjD;AAAA,GADqB,EAIzBE,MAJyB,CAIlB,UAACF,MAAD;AAAA,WAAiBA,MAAM,KAAK,IAA5B;AAAA,GAJkB,CAA5B;;AAMA,MAAM+C,YAAY,GAAG,SAAfA,YAAe,CAACC,KAAD,EAAaC,MAAb,EAAgC;AACnD;AACA,QAAIC,IAAI,GAAGC,MAAM,CAACC,MAAP,CAAcJ,KAAd,EAAqB,EAArB,CAAX;;AACA,QAAIA,KAAK,CAACK,IAAN,KAAe,QAAnB,EAA6B;AAC3BH,MAAAA,IAAI,GAAGC,MAAM,CAACG,MAAP,CAAcN,KAAd,CAAP;AACD;;AAEDE,IAAAA,IAAI,CAACvC,cAAL,GAAsBA,cAAtB,CAPmD,CAOd;;AACrC,QAAIA,cAAc,KAAK,YAAvB,EAAqC;AACnC;AACA,UAAIuC,IAAI,CAACG,IAAL,KAAc,QAAlB,EAA4B;AAC1BH,QAAAA,IAAI,CAACvC,cAAL,GAAsB,SAAtB;AACAuC,QAAAA,IAAI,CAACK,KAAL,GAAaL,IAAI,CAACM,MAAlB;AACA,YAAMC,WAAW,GAAG3D,UAAU,CAAC4D,IAAX,CAClB,UAAC1D,MAAD;AAAA,iBAAsBA,MAAM,CAACuD,KAAP,KAAiBL,IAAI,CAACM,MAA5C;AAAA,SADkB,CAApB;AAGAN,QAAAA,IAAI,CAACjD,KAAL,GAAawD,WAAb,aAAaA,WAAb,uBAAaA,WAAW,CAAExD,KAA1B;AACAiD,QAAAA,IAAI,CAACJ,IAAL,GAAYW,WAAZ,aAAYA,WAAZ,uBAAYA,WAAW,CAAEX,IAAzB;AACD,OARD,MAQO;AACL,YAAMa,GAAG,GAAGR,MAAM,CAACS,IAAP,CAAYV,IAAZ,EAAkBQ,IAAlB,CAAuB,UAACC,GAAD;AAAA,iBAAST,IAAI,CAACS,GAAD,CAAJ,KAAcT,IAAI,CAACjD,KAA5B;AAAA,SAAvB,CAAZ;AACAiD,QAAAA,IAAI,CAACW,MAAL,GAAcF,GAAd,CAFK,CAEa;;AAClB7D,QAAAA,UAAU,CAACgE,OAAX,CAAmB,UAACD,MAAD,EAAiB;AAClC,cAAIA,MAAM,CAACf,IAAP,KAAgBa,GAApB,EAAyB;AACvBT,YAAAA,IAAI,CAACK,KAAL,GAAaM,MAAM,CAACN,KAApB,CADuB,CACG;AAC3B;AACF,SAJD;AAKD;AACF;;AAEDpB,IAAAA,aAAa,CAACe,IAAD,CAAb;AACD,GA9BD;;AAgCA,MAAMa,WAAW,GAAG,SAAdA,WAAc,CAAC/D,MAAD,EAAsB;AACxC,QAAMgE,UAAe,GAAGC,KAAK,CAACC,IAAN,CAAWf,MAAM,CAACG,MAAP,CAAcxD,UAAd,CAAX,CAAxB,CADwC,CAExC;;AACA,QAAMqE,YAAY,GAAGH,UAAU,CAAC9D,MAAX,CAAkB,UAACF,MAAD;AAAA,aAAiBA,MAAM,CAACoE,MAAxB;AAAA,KAAlB,CAArB,CAHwC,CAIxC;;AACAJ,IAAAA,UAAU,CAACF,OAAX,CAAmB,UAACO,QAAD,EAAwB;AACzC,UAAIA,QAAQ,CAACvB,IAAT,KAAkB9C,MAAM,CAAC8C,IAA7B,EAAmC;AACjC;AACA,YAAIqB,YAAY,CAACG,MAAb,GAAsB,CAA1B,EAA6B;AAC3BD,UAAAA,QAAQ,CAACD,MAAT,GAAkB,CAACpE,MAAM,CAACoE,MAA1B;AACD,SAFD,MAEO;AACLC,UAAAA,QAAQ,CAACD,MAAT,GAAkB,IAAlB;AACD;AACF;AACF,KATD;AAUA/B,IAAAA,eAAe,CAAC2B,UAAD,CAAf,CAfwC,CAgBxC;;AACAhC,IAAAA,gBAAgB,CAACnC,gBAAgB,CAACmE,UAAD,CAAjB,CAAhB,CAjBwC,CAkBxC;;AACAjD,IAAAA,QAAQ,CAACiD,UAAD,CAAR;AACD,GApBD;;AAqBA,MAAMO,kBAAkB,GAAG,SAArBA,kBAAqB,CAACtE,KAAD,EAAgB;AACzC;AACA,QAAMuE,YAAY,GAChB1D,UAAU,KAAK,CAAf,IAAoB,CAAAb,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEqE,MAAP,IAAgBhD,kBAApC,aACOrB,KADP,aACOA,KADP,uBACOA,KAAK,CAAEwE,SAAP,CAAiB,CAAjB,EAAoBnD,kBAApB,CADP,WAEIrB,KAHN;AAIA,WAAOuE,YAAP;AACD,GAPD;;AASA,MAAME,cAAgC,GAAGvG,KAAK,CAACwG,OAAN,CAAc,YAAM;AAC3D,WAAOvC,YAAY,CAChBlC,MADI,CACG,UAACF,MAAD;AAAA,aAAYA,MAAM,CAACC,KAAP,KAAiB,CAAjB,IAAsBD,MAAM,CAACoE,MAAzC;AAAA,KADH,EAEJrE,GAFI,CAEA,UAACC,MAAD,EAAY;AACf,aAAO;AACLC,QAAAA,KAAK,EAAED,MAAM,CAACC,KAAP,IAAgB,CADlB;AAELsD,QAAAA,KAAK,EAAEvD,MAAM,CAACuD;AAFT,OAAP;AAID,KAPI,CAAP;AAQD,GATwC,EAStC,CAACnB,YAAD,CATsC,CAAzC;AAWA,sBACE,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,mBAAD;AAAqB,IAAA,KAAK,EAAC,MAA3B;AAAkC,IAAA,MAAM,EAAE3B,MAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,aAAD;AACE,IAAA,IAAI,EAAEL,OADR;AAEE,IAAA,MAAM,EAAEC,MAFV;AAGE,IAAA,WAAW,EAAC,QAHd,CAIE;AAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAME,oBAAC,aAAD;AAAe,IAAA,eAAe,EAAC,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,eAOE,oBAAC,KAAD;AACE,IAAA,OAAO,EAAC,MADV;AAEE,IAAA,OAAO,EAAE;AAAEuE,MAAAA,IAAI,EAAE,EAAR;AAAYC,MAAAA,KAAK,EAAE;AAAnB,KAFX;AAGE,IAAA,QAAQ,EAAE,CAHZ;AAIE,IAAA,KAAK,EAAE,EAJT;AAKE,IAAA,MAAM,EAAE/D,UAAU,GAAG,GAAb,GAAmB,GAAnB,GAAyB,GALnC;AAME,IAAA,KAAK,EAAEA,UANT;AAOE,IAAA,UAAU,EAAEA,UAAU,KAAK,CAAf,GAAmB,QAAnB,GAA8B,KAP5C;AAQE,IAAA,aAAa,EAAEyD,kBARjB;AASE,IAAA,KAAK,EAAE;AACLtE,MAAAA,KAAK,EAAEK,UADF;AAELwE,MAAAA,KAAK,EAAE,CAFF;AAGLC,MAAAA,SAAS,EAAE,YAHN;AAILC,MAAAA,QAAQ,EAAE,cAJL;AAKLC,MAAAA,MAAM,EAAE;AALH,KATT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPF,eAwBE,oBAAC,KAAD;AACE,IAAA,IAAI,EAAE,CAACzE,SADT;AAEE,IAAA,aAAa,EACXmB,eAAe,GAAGrC,uBAAH,GAA6BI,UAHhD;AAKE,IAAA,MAAM,EAAEkC,MALV;AAME,IAAA,KAAK,EAAED,eAAe,GAAGjB,MAAM,IAAIoB,KAAb,GAAqBpB,MAAM,IAAI,EANvD;AAOE,IAAA,KAAK;AACHT,MAAAA,KAAK,EAAEM,UADJ;AAEHuE,MAAAA,KAAK,EAAE,GAFJ;AAGHC,MAAAA,SAAS,EAAE,YAHR;AAIHC,MAAAA,QAAQ,EAAE;AAJP,OAKAnD,cALA,CAPP;AAcE,IAAA,KAAK,EAAE,GAdT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAxBF,EAwCGE,aAAa,CAACuC,MAAd,GAAuB,CAAvB,GACCvC,aAAa,CAAChC,GAAd,CAAkB,UAACC,MAAD,EAAiB;AACjC,wBACE,oBAAC,GAAD;AACE,MAAA,OAAO,EAAEA,MAAM,CAAC8C,IAAP,IAAe,EAD1B;AAEE,MAAA,IAAI,EAAE9C,MAAM,CAACuD,KAFf;AAGE,MAAA,GAAG,EAAEvD,MAAM,CAAC8C,IAHd;AAIE,MAAA,YAAY,EAAEC,YAJhB;AAKE,MAAA,UAAU,EAAE;AAAA,eAAMZ,aAAa,CAACF,SAAD,CAAnB;AAAA,OALd;AAME,MAAA,IAAI,EAAE,CAACjC,MAAM,CAACoE,MANhB;AAOE,MAAA,OAAO,EAAE,iBAAClB,IAAD,EAAU;AACjBlC,QAAAA,QAAO,IAAI,CAACC,YAAZ,IAA4BD,QAAO,CAACkC,IAAD,CAAnC;AACD,OATH;AAUE,MAAA,iBAAiB,MAVnB,CAWE;AACA;AACA;AACA;AAdF;AAeE,MAAA,MAAM,EAAC,SAfT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAiBG9C,OAAO,CAACL,GAAR,CAAY,UAACmF,MAAD,EAASC,KAAT,EAAmB;AAC9B,0BACE,oBAAC,IAAD;AACE,QAAA,MAAM,EAAElE,YAAY,GAAG,SAAH,GAAe,SADrC,CAEE;AACA;AACA;AAJF;AAKE,QAAA,WAAW,EACTiE,MAAM,CAACpC,IAAP,KAAgBN,aAAhB,IAAiC2C,KAAK,KAAK7C,WAA3C,GACI,CADJ,GAEIlB,kBARR;AAUE,QAAA,GAAG,EAAE+D,KAVP;AAWE,QAAA,OAAO,EAAE;AAAA,iBACP,CAAClE,YAAD,IAAiBwB,gBAAgB,CAACyC,MAAM,CAACpC,IAAR,CAD1B;AAAA,SAXX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAiBD,KAlBA,CAjBH,CADF;AAuCD,GAxCD,CADD,gBA2CC,oBAAC,GAAD;AACE,IAAA,OAAO,EAAE,oBAAAf,aAAa,CAAC,CAAD,CAAb,oEAAkBe,IAAlB,KAA0B,EADrC;AAEE,IAAA,IAAI,sBAAEf,aAAa,CAAC,CAAD,CAAf,qDAAE,iBAAkBwB,KAF1B;AAGE,IAAA,YAAY,EAAER,YAHhB;AAIE,IAAA,UAAU,EAAE;AAAA,aAAMZ,aAAa,CAACF,SAAD,CAAnB;AAAA,KAJd;AAKE,IAAA,IAAI,EAAE,sBAACF,aAAa,CAAC,CAAD,CAAd,qDAAC,iBAAkBqC,MAAnB,CALR;AAME,IAAA,OAAO,EAAE,iBAAClB,IAAD,EAAU;AACjBlC,MAAAA,QAAO,IAAIA,QAAO,CAACkC,IAAD,CAAlB;AACD,KARH;AASE,IAAA,iBAAiB,MATnB,CAUE;AACA;AACA;AACA;AAbF;AAcE,IAAA,MAAM,EAAEjC,YAAY,GAAG,SAAH,GAAe,SAdrC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAgBGb,OAAO,CAACL,GAAR,CAAY,UAACmF,MAAD,EAASC,KAAT,EAAmB;AAC9B,wBACE,oBAAC,IAAD,CACE;AADF;AAEE,MAAA,WAAW,EACTD,MAAM,CAACpC,IAAP,KAAgBN,aAAhB,IAAiC2C,KAAK,KAAK7C,WAA3C,GACI,CADJ,GAEIlB,kBALR;AAOE,MAAA,GAAG,EAAE+D,KAPP;AAQE,MAAA,OAAO,EAAE;AAAA,eACP,CAAClE,YAAD,IAAiBwB,gBAAgB,CAACyC,MAAM,CAACpC,IAAR,CAD1B;AAAA,OARX;AAWE,MAAA,MAAM,EAAE7B,YAAY,GAAG,SAAH,GAAe,SAXrC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAeD,GAhBA,CAhBH,CAnFJ,EAuHGyD,cAAc,CAAC3E,GAAf,CAAmB,UAACqF,IAAD;AAAA,wBAClB,oBAAC,aAAD;AACE,MAAA,GAAG,EAAEA,IAAI,CAACnF,KADZ;AAEE,MAAA,CAAC,EAAEmF,IAAI,CAACnF,KAFV;AAGE,MAAA,MAAM,EAAEmF,IAAI,CAAC7B,KAHf;AAIE,MAAA,OAAO,MAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADkB;AAAA,GAAnB,CAvHH,eAwJE,oBAAC,MAAD;AACE,IAAA,OAAO,eACL,oBAAC,YAAD;AACE,MAAA,OAAO,EAAEzD,UADX;AAEE,MAAA,KAAK,MAFP;AAGE,MAAA,QAAQ,EAAE,kBAACE,MAAD;AAAA,eAAsB+D,WAAW,CAAC/D,MAAD,CAAjC;AAAA,OAHZ;AAIE,MAAA,WAAW,EAAE0B,eAJf;AAKE,MAAA,IAAI,EAAEA,eAAe,GAAG,KAAH,GAAW,MALlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ;AAUE,IAAA,aAAa,EAAC,KAVhB;AAWE,IAAA,YAAY,EAAE;AAAEsD,MAAAA,QAAQ,EAAE,OAAZ;AAAqBK,MAAAA,GAAG,EAAE;AAA1B,KAXhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAxJF,eAsKE,oBAAC,OAAD;AACE,IAAA,MAAM,MADR;AAEE,IAAA,MAAM,EAAE;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAFV;AAGE,IAAA,OAAO,EAAE,mBAAM;AACb,aAAOpD,UAAU,gBACf,oBAAC,eAAD;AACE,QAAA,KAAK,EAAEA,UAAF,aAAEA,UAAF,uBAAEA,UAAU,CAAEjC,KADrB;AAEE,QAAA,IAAI,EAAEiC,UAAF,aAAEA,UAAF,uBAAEA,UAAU,CAAEY,IAFpB;AAGE,QAAA,KAAK,EAAEZ,UAAF,aAAEA,UAAF,uBAAEA,UAAU,CAAEqB,KAHrB;AAIE,QAAA,MAAM,EAAErB,UAAF,aAAEA,UAAF,uBAAEA,UAAU,CAAE2B,MAJtB;AAKE,QAAA,cAAc,EAAE3B,UAAF,aAAEA,UAAF,uBAAEA,UAAU,CAAEvB,cAL9B;AAME,QAAA,gBAAgB,EAAEQ,gBANpB;AAOE,QAAA,eAAe,EAAEI,eAPnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADe,gBAWf,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAXF;AAaD,KAjBH;AAkBE,IAAA,YAAY,EAAE;AACZd,MAAAA,MAAM,EAAE,MADI;AAEZ;AACA8E,MAAAA,UAAU,EAAE;AAHA,KAlBhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAtKF,EAgMGrE,aAAa,gBACZ,oBAAC,KAAD;AACE,IAAA,MAAM,EAAE,EADV;AAEE,IAAA,IAAI,EAAC,kBAFP;AAGE,IAAA,MAAM,EAAC,qBAHT;AAIE,IAAA,OAAO,EAAC,MAJV;AAKE,IAAA,IAAI,EAAEN,aALR;AAME,IAAA,QAAQ,EACNR,OAAO,CAACkE,MAAR,GAAiB5B,kBAAjB,GACIA,kBADJ,GAEItC,OAAO,CAACkE,MAAR,GAAiB,CATzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAYE,oBAAC,QAAD;AAAU,IAAA,IAAI,EAAElE,OAAhB;AAAyB,IAAA,MAAM,EAAE,CAAjC;AAAoC,IAAA,WAAW,EAAC,QAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,KAAD;AACE,IAAA,OAAO,EAAC,MADV;AAEE,IAAA,OAAO,EAAE;AAAEwE,MAAAA,IAAI,EAAE,CAAR;AAAWC,MAAAA,KAAK,EAAE;AAAlB,KAFX;AAGE,IAAA,QAAQ,EAAE,CAHZ;AAIE,IAAA,KAAK,EAAE,EAJT;AAKE,IAAA,MAAM,EAAE,EALV;AAME,IAAA,IAAI,EAAE,KANR;AAOE,IAAA,EAAE,EAAE,CAPN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAUGjC,mBAAmB,CAAC0B,MAApB,GAA6B,CAA7B,GACC1B,mBAAmB,CAAC7C,GAApB,CAAwB,UAACC,MAAD,EAAiB;AACvC,wBACE,oBAAC,GAAD;AACE,MAAA,OAAO,EAAEA,MAAM,CAAC8C,IAAP,IAAe,EAD1B;AAEE,MAAA,IAAI,EAAE9C,MAAM,CAACuD,KAFf;AAGE,MAAA,GAAG,EAAEvD,MAAM,CAAC8C,IAHd;AAIE,MAAA,WAAW,EAAE1B,kBAJf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAQD,GATD,CADD,gBAYC,oBAAC,GAAD;AACE,IAAA,OAAO,EAAE,0BAAAwB,mBAAmB,CAAC,CAAD,CAAnB,gFAAwBE,IAAxB,KAAgC,EAD3C;AAEE,IAAA,IAAI,4BAAEF,mBAAmB,CAAC,CAAD,CAArB,2DAAE,uBAAwBW,KAFhC;AAGE,IAAA,WAAW,EAAEnC,kBAHf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAtBJ,CAZF,CADY,gBA4CZ,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA5OJ,CADF,CADF,CADF;AAqPD,CAlYD;;AAoYA,eAAejB,iBAAf","sourcesContent":["import React, { Fragment, useEffect, useState } from 'react'\nimport {\n  Bar,\n  BarChart,\n  Brush,\n  CartesianGrid,\n  ComposedChart,\n  Legend,\n  // Line,\n  ResponsiveContainer,\n  Tooltip,\n  XAxis,\n  YAxis,\n  Cell,\n  ReferenceLine\n} from 'recharts'\nimport CustomLegend from '../CustomLegend'\nimport { IBarChart, IDetails, IReferenceLine } from '../interface'\nimport TooltipCompoent from '../ToolTip'\nimport { StyledBarChart } from './StyledBarChart'\n\n// for y axis tick values provided we be in below format\nconst convertDecimalToPercent = (decimal: number, fixed = 0) => {\n  return `${decimal.toFixed(fixed)}%`\n}\nconst setToFixed = (decimal: number) => {\n  if(Number.isInteger(decimal)) {\n    return `${decimal.toFixed(0)}`\n  }else {\n    return `${decimal.toFixed(1)}`\n  }\n}\n\n/* here we are creating a map from legendData where value is 0,i.e. bar chart and as\n typescript doesnt allow to add conditional data in map\n we have to return null and as we dont want null we later filter it out */\nconst getActiveBarData = (legendData: Array<IDetails>) => {\n  return legendData\n    .map((option: IDetails) => (option.value === 0 ? option : null))\n    .filter((option: any) => option !== null)\n}\n\nconst BarChartComponent = ({\n  details,\n  barGap = 0,\n  xAxisLabel,\n  yAxisLabel,\n  legendData,\n  showYaxis = true,\n  height = 500,\n  _ticks,\n  toolTipVariant = 'default',\n  // tooltipWidth = 231,\n  tinyChartData,\n  tinyChartTitleList,\n  labelAngle = 180,\n  onChange,\n  onClick,\n  disableClick,\n  // onLineClick,\n  showTinyChart = false,\n  tooltipTitleList,\n  inactiveBarOpacity = 0.7,\n  magnifierEndIndex = 30,\n  xAxisTickCharLimit = 15,\n  barChartTooltip,\n  selectedBarIndex,\n  selectedBarName,\n  legendFullwidth = false,\n  convertoPercent = true,\n  domain,\n  yAxisLabelData = {}\n}: IBarChart) => {\n  const ticks = [0, 20, 40, 60, 80, 100]\n  const [activeBarData, setActiveBarData] = useState(\n    getActiveBarData(legendData)\n  )\n  const [activeData, setActiveData] = useState<any>(undefined)\n  const [activeLegend, setActiveLegend] = useState(legendData)\n  const [activeIndex, setActiveIndex] = useState<number | undefined>(\n    selectedBarIndex\n  )\n  const [activeBarName, setActiveBarName] = useState<string | undefined>(\n    selectedBarName\n  )\n  const [_magnifierEndIndex, setMagnifierEndIndex] = useState<number>(\n    magnifierEndIndex\n  )\n  useEffect(() => {\n    setActiveIndex(selectedBarIndex)\n  }, [selectedBarIndex])\n\n  useEffect(() => {\n    setActiveIndex(undefined)\n    setActiveBarName(selectedBarName)\n  }, [selectedBarName])\n\n  // in case legend data changes, change bar chart accordingly\n  useEffect(() => {\n    setActiveLegend(legendData)\n    setActiveBarData(getActiveBarData(legendData))\n    setMagnifierEndIndex(magnifierEndIndex)\n  }, [legendData, details, magnifierEndIndex])\n\n  const tinyChartLegendData = legendData\n    .map((option: IDetails) =>\n      tinyChartTitleList.includes(option.name) ? option : null\n    )\n    .filter((option: any) => option !== null)\n\n  const onMouseEnter = (_data: any, _index: number) => {\n    // for line object is not exensible and for bar it is, to handle both condition below code is written\n    let data = Object.assign(_data, {})\n    if (_data.type === 'linear') {\n      data = Object.create(_data)\n    }\n\n    data.toolTipVariant = toolTipVariant // selected bar needs which type of tooltip\n    if (toolTipVariant !== 'withoutKpi') {\n      // below data we are capturing to show on tooltip\n      if (data.type === 'linear') {\n        data.toolTipVariant = 'default'\n        data.color = data.stroke\n        const hoveredLine = legendData.find(\n          (option: IDetails) => option.color === data.stroke\n        )\n        data.value = hoveredLine?.value\n        data.name = hoveredLine?.name\n      } else {\n        const key = Object.keys(data).find((key) => data[key] === data.value)\n        data.legend = key // selected bar of which legend(name)\n        legendData.forEach((legend: any) => {\n          if (legend.name === key) {\n            data.color = legend.color // selected bar of which color\n          }\n        })\n      }\n    }\n\n    setActiveData(data)\n  }\n\n  const handleClick = (option: IDetails) => {\n    const newDetails: any = Array.from(Object.create(legendData))\n    // list of active legend\n    const filteredData = newDetails.filter((option: any) => option.active)\n    // here we are changing active to false for unticked legends\n    newDetails.forEach((dataItem: IDetails) => {\n      if (dataItem.name === option.name) {\n        // if only one legend active,dont let it untick\n        if (filteredData.length > 1) {\n          dataItem.active = !option.active\n        } else {\n          dataItem.active = true\n        }\n      }\n    })\n    setActiveLegend(newDetails)\n    // to show active bars\n    setActiveBarData(getActiveBarData(newDetails))\n    // send active legend data , outside to handle other activity\n    onChange(newDetails)\n  }\n  const customizedAxisTick = (value: any) => {\n    // if the name is greater than limit provided then append ... and trim or else show actual value\n    const trimmedValue =\n      labelAngle !== 0 && value?.length > xAxisTickCharLimit\n        ? `${value?.substring(0, xAxisTickCharLimit)}...`\n        : value\n    return trimmedValue\n  }\n\n  const referenceLines: IReferenceLine[] = React.useMemo(() => {\n    return activeLegend\n      .filter((option) => option.value !== 0 && option.active)\n      .map((option) => {\n        return {\n          value: option.value || 0,\n          color: option.color\n        }\n      })\n  }, [activeLegend])\n\n  return (\n    <StyledBarChart>\n      <ResponsiveContainer width='100%' height={height}>\n        <ComposedChart\n          data={details}\n          barGap={barGap}\n          stackOffset='expand'\n          // style={{ cursor: 'pointer' }}      //Fix Redmine-55059\n        >\n          <CartesianGrid strokeDasharray='3 3' />\n          <XAxis\n            dataKey='name'\n            padding={{ left: 30, right: 50 }}\n            interval={0}\n            width={50}\n            height={labelAngle < 180 ? 100 : 170}\n            angle={labelAngle}\n            textAnchor={labelAngle === 0 ? 'middle' : 'end'}\n            tickFormatter={customizedAxisTick}\n            label={{\n              value: xAxisLabel,\n              angle: 0,\n              className: 'axis-title',\n              position: 'insideBottom', \n              offset: 50\n            }}\n          />\n          <YAxis\n            hide={!showYaxis}\n            tickFormatter={\n              convertoPercent ? convertDecimalToPercent : setToFixed\n            }\n            domain={domain}\n            ticks={convertoPercent ? _ticks || ticks : _ticks || []}\n            label={{\n              value: yAxisLabel,\n              angle: 270,\n              className: 'axis-title',\n              position: 'outside',\n              ...yAxisLabelData\n            }}\n            width={100}\n          />\n          {activeBarData.length > 1 ? (\n            activeBarData.map((option: any) => {\n              return (\n                <Bar\n                  dataKey={option.name || ''}\n                  fill={option.color}\n                  key={option.name}\n                  onMouseEnter={onMouseEnter}\n                  onMouseOut={() => setActiveData(undefined)}\n                  hide={!option.active}\n                  onClick={(data) => {\n                    onClick && !disableClick && onClick(data)\n                  }}\n                  isAnimationActive\n                  // isUpdateAnimationActive\n                  // animationBegin={3}\n                  // animationDuration={3}\n                  // animationEasing='linear'\n                  cursor='default'\n                >\n                  {details.map((_value, index) => {\n                    return (\n                      <Cell\n                        cursor={disableClick ? 'default' : 'pointer'}\n                        // fillOpacity={\n                        //   index === activeIndex ? 1 : inactiveBarOpacity\n                        // }\n                        fillOpacity={\n                          _value.name === activeBarName || index === activeIndex\n                            ? 1\n                            : inactiveBarOpacity\n                        }\n                        key={index}\n                        onClick={() =>\n                          !disableClick && setActiveBarName(_value.name)\n                        }\n                      />\n                    )\n                  })}\n                </Bar>\n              )\n            })\n          ) : (\n            <Bar\n              dataKey={activeBarData[0]?.name || ''}\n              fill={activeBarData[0]?.color}\n              onMouseEnter={onMouseEnter}\n              onMouseOut={() => setActiveData(undefined)}\n              hide={!activeBarData[0]?.active}\n              onClick={(data) => {\n                onClick && onClick(data)\n              }}\n              isAnimationActive\n              // isUpdateAnimationActive\n              // animationBegin={3}\n              // animationDuration={3}\n              // animationEasing='linear'\n              cursor={disableClick ? 'default' : 'pointer'}\n            >\n              {details.map((_value, index) => {\n                return (\n                  <Cell\n                    // fillOpacity={index === activeIndex ? 1 : inactiveBarOpacity}\n                    fillOpacity={\n                      _value.name === activeBarName || index === activeIndex\n                        ? 1\n                        : inactiveBarOpacity\n                    }\n                    key={index}\n                    onClick={() =>\n                      !disableClick && setActiveBarName(_value.name)\n                    }\n                    cursor={disableClick ? 'default' : 'pointer'}\n                  />\n                )\n              })}\n            </Bar>\n          )}\n\n          {referenceLines.map((line) => (\n            <ReferenceLine\n              key={line.value}\n              y={line.value}\n              stroke={line.color}\n              isFront\n            />\n          ))}\n\n          {/* {activeLegend\n            .map((option: IDetails) => {\n              if (option.value !== 0) {\n                return (\n                  <Line\n                    strokeWidth={2}\n                    dataKey={option.name || ''}\n                    fill={option.color}\n                    key={option.name}\n                    stroke={option.color}\n                    dot={false}\n                    activeDot={false}\n                    onMouseEnter={onMouseEnter}\n                    onMouseOut={() => setActiveData(undefined)}\n                    hide={!option.active}\n                    onClick={(data) => onLineClick && onLineClick(data)}\n                    cursor='pointer'\n                  />\n                )\n              }\n              return null\n            })\n            .filter((option) => option !== null)} */}\n\n          <Legend\n            content={\n              <CustomLegend\n                details={legendData}\n                isRow\n                onChange={(option: IDetails) => handleClick(option)}\n                isFullWidth={legendFullwidth}\n                size={legendFullwidth ? '8px' : '11px'}\n              />\n            }\n            verticalAlign='top'\n            wrapperStyle={{ position: 'unset', top: '9px' }}\n          />\n\n          <Tooltip\n            active\n            cursor={{ fill: '#f00' }}\n            content={() => {\n              return activeData ? (\n                <TooltipCompoent\n                  value={activeData?.value}\n                  name={activeData?.name}\n                  color={activeData?.color}\n                  legend={activeData?.legend}\n                  toolTipVariant={activeData?.toolTipVariant}\n                  tooltipTitleList={tooltipTitleList}\n                  barChartTooltip={barChartTooltip}\n                />\n              ) : (\n                <Fragment />\n              )\n            }}\n            wrapperStyle={{\n              height: 'auto',\n              // width: tooltipWidth,\n              visibility: 'visible'\n            }}\n          />\n\n          {/* tiny chart start from here with zooming brush */}\n          {showTinyChart ? (\n            <Brush\n              height={70}\n              fill='rgba(0, 0, 0, 0)'\n              stroke='rgba(0, 0, 0, 0.24)'\n              dataKey='name'\n              data={tinyChartData}\n              endIndex={\n                details.length > _magnifierEndIndex\n                  ? _magnifierEndIndex\n                  : details.length - 1\n              }\n            >\n              <BarChart data={details} barGap={0} stackOffset='expand'>\n                <XAxis\n                  dataKey='name'\n                  padding={{ left: 0, right: 0 }}\n                  interval={0}\n                  width={50}\n                  height={10}\n                  tick={false}\n                  dx={0}\n                />\n                {tinyChartLegendData.length > 1 ? (\n                  tinyChartLegendData.map((option: any) => {\n                    return (\n                      <Bar\n                        dataKey={option.name || ''}\n                        fill={option.color}\n                        key={option.name}\n                        fillOpacity={inactiveBarOpacity}\n                      />\n                    )\n                  })\n                ) : (\n                  <Bar\n                    dataKey={tinyChartLegendData[0]?.name || ''}\n                    fill={tinyChartLegendData[0]?.color}\n                    fillOpacity={inactiveBarOpacity}\n                  />\n                )}\n              </BarChart>\n            </Brush>\n          ) : (\n            <Fragment />\n          )}\n        </ComposedChart>\n      </ResponsiveContainer>\n    </StyledBarChart>\n  )\n}\n\nexport default BarChartComponent\n"]},"metadata":{},"sourceType":"module"}