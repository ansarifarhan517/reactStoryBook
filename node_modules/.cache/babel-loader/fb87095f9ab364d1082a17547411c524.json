{"ast":null,"code":"import _objectSpread from \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/atoms/Charts/LineChart/index.tsx\";\n\nimport React, { Fragment, useEffect, useState } from 'react';\nimport { Brush, CartesianGrid, Legend, Line, LineChart, ResponsiveContainer, Tooltip, XAxis, YAxis } from 'recharts';\nimport CustomLegend from '../CustomLegend';\nimport LineChartTooltip from './LineChartTooltip';\nimport { StyledLineChart } from './StyledLineChart';\n\nvar LineChartComponent = function LineChartComponent(_ref) {\n  var details = _ref.details,\n      _ref$labelAngle = _ref.labelAngle,\n      labelAngle = _ref$labelAngle === void 0 ? 90 : _ref$labelAngle,\n      xAxisLabel = _ref.xAxisLabel,\n      yAxisLabel = _ref.yAxisLabel,\n      legendData = _ref.legendData,\n      showYaxis = _ref.showYaxis,\n      _ref$height = _ref.height,\n      height = _ref$height === void 0 ? 500 : _ref$height,\n      _ticks = _ref._ticks,\n      onChange = _ref.onChange,\n      _onClick = _ref.onClick,\n      _ref$tooltipWidth = _ref.tooltipWidth,\n      tooltipWidth = _ref$tooltipWidth === void 0 ? 231 : _ref$tooltipWidth,\n      _ref$showTinyChart = _ref.showTinyChart,\n      showTinyChart = _ref$showTinyChart === void 0 ? true : _ref$showTinyChart,\n      _ref$startWithXaxis = _ref.startWithXaxis,\n      startWithXaxis = _ref$startWithXaxis === void 0 ? false : _ref$startWithXaxis,\n      _ref$tickInPercentage = _ref.tickInPercentage,\n      tickInPercentage = _ref$tickInPercentage === void 0 ? true : _ref$tickInPercentage,\n      lineChartTooltip = _ref.lineChartTooltip,\n      _ref$xAxisTickCharLim = _ref.xAxisTickCharLimit,\n      xAxisTickCharLimit = _ref$xAxisTickCharLim === void 0 ? 15 : _ref$xAxisTickCharLim,\n      _ref$legendFullwidth = _ref.legendFullwidth,\n      legendFullwidth = _ref$legendFullwidth === void 0 ? false : _ref$legendFullwidth,\n      _ref$magnifierStartIn = _ref.magnifierStartIndex,\n      magnifierStartIndex = _ref$magnifierStartIn === void 0 ? 15 : _ref$magnifierStartIn,\n      _ref$convertoPercent = _ref.convertoPercent,\n      convertoPercent = _ref$convertoPercent === void 0 ? true : _ref$convertoPercent,\n      domain = _ref.domain,\n      _ref$yAxisLabelData = _ref.yAxisLabelData,\n      yAxisLabelData = _ref$yAxisLabelData === void 0 ? {} : _ref$yAxisLabelData;\n  var ticks = [0, 20, 40, 60, 80, 100];\n\n  var _useState = useState(details),\n      _useState2 = _slicedToArray(_useState, 2),\n      _details = _useState2[0],\n      setDetails = _useState2[1];\n\n  var _useState3 = useState(undefined),\n      _useState4 = _slicedToArray(_useState3, 2),\n      activeData = _useState4[0],\n      setActiveData = _useState4[1];\n\n  var _useState5 = useState(legendData),\n      _useState6 = _slicedToArray(_useState5, 2),\n      legend = _useState6[0],\n      setLegend = _useState6[1];\n\n  var _useState7 = useState(magnifierStartIndex),\n      _useState8 = _slicedToArray(_useState7, 2),\n      _magnifierStartIndex = _useState8[0],\n      setMagnifierStartIndex = _useState8[1]; // if legends changes,reload\n\n\n  useEffect(function () {\n    setLegend(legendData);\n    setDetails(details);\n    setMagnifierStartIndex(magnifierStartIndex);\n  }, [legendData, details, magnifierStartIndex]);\n\n  var onMouseEnter = function onMouseEnter(_data, _index) {\n    setActiveData(_data);\n  }; // for y axis tick values provided we be in below format\n\n\n  var convertDecimalToPercent = function convertDecimalToPercent(decimal) {\n    var fixed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n    if (tickInPercentage) {\n      return \"\".concat(decimal.toFixed(fixed), \"%\");\n    }\n\n    return \"\".concat(decimal);\n  };\n\n  var setToFixed = function setToFixed(decimal) {\n    if (Number.isInteger(decimal)) {\n      return \"\".concat(decimal.toFixed(0));\n    } else {\n      return \"\".concat(decimal.toFixed(1));\n    }\n  };\n\n  var handleClick = function handleClick(option) {\n    var newDetails = Array.from(Object.create(legendData)); // list of active legend\n\n    var filteredData = newDetails.filter(function (option) {\n      return option.active;\n    }); // here we are changing active to false for unticked legends\n\n    newDetails.forEach(function (dataItem) {\n      if (dataItem.name === option.name) {\n        // if only one legend active,dont let it untick\n        if (filteredData.length > 1) {\n          dataItem.active = !option.active;\n        } else {\n          dataItem.active = true;\n        }\n      }\n    });\n    setLegend(newDetails); // send active legend data , outside to handle other activity\n\n    onChange(newDetails);\n  };\n\n  var customizedAxisTick = function customizedAxisTick(value) {\n    // if the name is greater than limit provided then append ... and trim or else show actual value\n    var trimmedValue = labelAngle !== 0 && (value === null || value === void 0 ? void 0 : value.length) > xAxisTickCharLimit ? \"\".concat(value === null || value === void 0 ? void 0 : value.substring(0, xAxisTickCharLimit), \"...\") : value;\n    return trimmedValue;\n  };\n\n  return /*#__PURE__*/React.createElement(StyledLineChart, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ResponsiveContainer, {\n    width: \"100%\",\n    height: height,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(LineChart, {\n    data: _details,\n    stackOffset: \"expand\",\n    style: {\n      cursor: 'pointer'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CartesianGrid, {\n    strokeDasharray: \"2 2\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(XAxis, {\n    dataKey: \"name\",\n    padding: {\n      left: startWithXaxis ? 0 : 120,\n      right: 15\n    },\n    angle: labelAngle,\n    interval: 0,\n    width: 30,\n    textAnchor: labelAngle === 0 ? 'middle' : 'end',\n    height: labelAngle < 180 ? 100 : 190,\n    tickFormatter: customizedAxisTick,\n    dx: 10,\n    label: {\n      value: xAxisLabel,\n      angle: 0,\n      className: 'axis-title',\n      position: 'inside'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(YAxis, {\n    hide: !showYaxis,\n    tickFormatter: convertoPercent ? convertDecimalToPercent : setToFixed,\n    domain: domain,\n    ticks: convertoPercent ? _ticks || ticks : _ticks || undefined,\n    label: _objectSpread({\n      value: yAxisLabel,\n      angle: 270,\n      className: 'axis-title',\n      position: 'outside'\n    }, yAxisLabelData),\n    width: 100,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 11\n    }\n  }), legend.map(function (option) {\n    return /*#__PURE__*/React.createElement(Line, {\n      type: \"linear\",\n      dataKey: option.name || '',\n      stroke: option.color,\n      key: option.name,\n      dot: {\n        fill: option.color,\n        strokeWidth: 4\n      },\n      fill: option.color,\n      activeDot: false,\n      onMouseEnter: onMouseEnter,\n      onMouseOut: function onMouseOut() {\n        return setActiveData(undefined);\n      },\n      hide: !option.active,\n      isAnimationActive: true // isUpdateAnimationActive\n      // animationBegin={3}\n      // animationDuration={3}\n      // animationEasing='linear'\n      ,\n      onClick: function onClick(data) {\n        _onClick && _onClick(option, data);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 15\n      }\n    });\n  }), /*#__PURE__*/React.createElement(Legend, {\n    content: /*#__PURE__*/React.createElement(CustomLegend, {\n      details: legendData,\n      isRow: true,\n      onChange: function onChange(option) {\n        return handleClick(option);\n      },\n      isFullWidth: legendFullwidth,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 15\n      }\n    }),\n    verticalAlign: \"top\",\n    wrapperStyle: {\n      position: 'unset'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Tooltip, {\n    active: true,\n    cursor: {\n      fill: '#f00'\n    },\n    wrapperStyle: {\n      height: 'auto',\n      width: tooltipWidth,\n      visibility: 'visible'\n    },\n    content: function content(_ref2) {\n      var active = _ref2.active,\n          label = _ref2.label;\n      return active && label ? /*#__PURE__*/React.createElement(LineChartTooltip, {\n        label: label,\n        legendData: legendData,\n        selectedColor: activeData === null || activeData === void 0 ? void 0 : activeData.stroke,\n        details: _details,\n        lineChartTooltip: lineChartTooltip,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 17\n        }\n      }) : /*#__PURE__*/React.createElement(Fragment, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 17\n        }\n      });\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 11\n    }\n  }), showTinyChart ? /*#__PURE__*/React.createElement(Brush, {\n    height: 70,\n    fill: \"rgba(0, 0, 0, 0)\",\n    stroke: \"rgba(0, 0, 0, 0.24)\",\n    dataKey: \"name\",\n    data: _details,\n    startIndex: // if magnifierStartIndex is less than total width then show magnifierStartIndex or else show 0\n    _magnifierStartIndex && _details.length > _magnifierStartIndex ? _magnifierStartIndex : 0,\n    endIndex: _details.length - 1,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(LineChart, {\n    data: _details,\n    stackOffset: \"expand\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(XAxis, {\n    dataKey: \"name\",\n    tick: false,\n    padding: {\n      left: startWithXaxis ? 0 : 120,\n      right: 15\n    },\n    angle: labelAngle,\n    interval: 0,\n    width: 50,\n    height: 10,\n    textAnchor: \"end\",\n    dx: 10,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 17\n    }\n  }), legend.map(function (option) {\n    return /*#__PURE__*/React.createElement(Line, {\n      type: \"linear\",\n      dataKey: option.name || '',\n      stroke: option.color,\n      key: option.name,\n      dot: false,\n      fill: option.color,\n      cursor: \"pointer\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 21\n      }\n    });\n  }))) : /*#__PURE__*/React.createElement(Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 13\n    }\n  }))));\n};\n\nexport default LineChartComponent;","map":{"version":3,"sources":["/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/atoms/Charts/LineChart/index.tsx"],"names":["React","Fragment","useEffect","useState","Brush","CartesianGrid","Legend","Line","LineChart","ResponsiveContainer","Tooltip","XAxis","YAxis","CustomLegend","LineChartTooltip","StyledLineChart","LineChartComponent","details","labelAngle","xAxisLabel","yAxisLabel","legendData","showYaxis","height","_ticks","onChange","onClick","tooltipWidth","showTinyChart","startWithXaxis","tickInPercentage","lineChartTooltip","xAxisTickCharLimit","legendFullwidth","magnifierStartIndex","convertoPercent","domain","yAxisLabelData","ticks","_details","setDetails","undefined","activeData","setActiveData","legend","setLegend","_magnifierStartIndex","setMagnifierStartIndex","onMouseEnter","_data","_index","convertDecimalToPercent","decimal","fixed","toFixed","setToFixed","Number","isInteger","handleClick","option","newDetails","Array","from","Object","create","filteredData","filter","active","forEach","dataItem","name","length","customizedAxisTick","value","trimmedValue","substring","cursor","left","right","angle","className","position","map","color","fill","strokeWidth","data","width","visibility","label","stroke"],"mappings":"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","sourcesContent":["import React, { Fragment, useEffect, useState } from 'react'\nimport {\n  Brush,\n  CartesianGrid,\n  Legend,\n  Line,\n  LineChart,\n  ResponsiveContainer,\n  Tooltip,\n  XAxis,\n  YAxis\n} from 'recharts'\nimport CustomLegend from '../CustomLegend'\nimport { IDetails, ILineChart } from '../interface'\nimport LineChartTooltip from './LineChartTooltip'\nimport { StyledLineChart } from './StyledLineChart'\n\nconst LineChartComponent = ({\n  details,\n  labelAngle = 90,\n  xAxisLabel,\n  yAxisLabel,\n  legendData,\n  showYaxis,\n  height = 500,\n  _ticks,\n  onChange,\n  onClick,\n  tooltipWidth = 231,\n  showTinyChart = true,\n  startWithXaxis = false,\n  tickInPercentage = true,\n  lineChartTooltip,\n  xAxisTickCharLimit = 15,\n  legendFullwidth = false,\n  magnifierStartIndex = 15,\n  convertoPercent = true,\n  domain,\n  yAxisLabelData = {}\n}: ILineChart) => {\n  const ticks = [0, 20, 40, 60, 80, 100]\n  const [_details, setDetails] = useState(details)\n  const [activeData, setActiveData] = useState<any>(undefined)\n  const [legend, setLegend] = useState(legendData)\n  const [_magnifierStartIndex, setMagnifierStartIndex] = useState<number>(\n    magnifierStartIndex\n  )\n\n  // if legends changes,reload\n  useEffect(() => {\n    setLegend(legendData)\n    setDetails(details)\n    setMagnifierStartIndex(magnifierStartIndex)\n  }, [legendData, details, magnifierStartIndex])\n\n  const onMouseEnter = (_data: any, _index: number) => {\n    setActiveData(_data)\n  }\n  // for y axis tick values provided we be in below format\n  const convertDecimalToPercent = (decimal: number, fixed = 0) => {\n    if (tickInPercentage) {\n      return `${decimal.toFixed(fixed)}%`\n    }\n    return `${decimal}`\n  }\n\n  const setToFixed = (decimal: number) => {\n    if(Number.isInteger(decimal)) {\n      return `${decimal.toFixed(0)}`\n    }else {\n      return `${decimal.toFixed(1)}`\n    }\n  }\n\n  const handleClick = (option: IDetails) => {\n    const newDetails: any = Array.from(Object.create(legendData))\n    // list of active legend\n    const filteredData = newDetails.filter((option: any) => option.active)\n    // here we are changing active to false for unticked legends\n    newDetails.forEach((dataItem: IDetails) => {\n      if (dataItem.name === option.name) {\n        // if only one legend active,dont let it untick\n        if (filteredData.length > 1) {\n          dataItem.active = !option.active\n        } else {\n          dataItem.active = true\n        }\n      }\n    })\n    setLegend(newDetails)\n    // send active legend data , outside to handle other activity\n    onChange(newDetails)\n  }\n\n  const customizedAxisTick = (value: any) => {\n    // if the name is greater than limit provided then append ... and trim or else show actual value\n    const trimmedValue =\n      labelAngle !== 0 && value?.length > xAxisTickCharLimit\n        ? `${value?.substring(0, xAxisTickCharLimit)}...`\n        : value\n    return trimmedValue\n  }\n\n  return (\n    <StyledLineChart>\n      <ResponsiveContainer width='100%' height={height}>\n        <LineChart\n          data={_details}\n          stackOffset='expand'\n          style={{ cursor: 'pointer' }}\n        >\n          <CartesianGrid strokeDasharray='2 2' />\n\n          <XAxis\n            dataKey='name'\n            padding={{ left: startWithXaxis ? 0 : 120, right: 15 }}\n            angle={labelAngle}\n            interval={0}\n            width={30}\n            textAnchor={labelAngle === 0 ? 'middle' : 'end'}\n            height={labelAngle < 180 ? 100 : 190}\n            tickFormatter={customizedAxisTick}\n            dx={10}\n            label={{\n              value: xAxisLabel,\n              angle: 0,\n              className: 'axis-title',\n              position: 'inside'\n            }}\n          />\n          <YAxis\n            hide={!showYaxis}\n            tickFormatter={\n              convertoPercent ? convertDecimalToPercent : setToFixed\n            }\n            domain={domain}\n            ticks={convertoPercent ? _ticks || ticks : _ticks || undefined}\n            label={{\n              value: yAxisLabel,\n              angle: 270,\n              className: 'axis-title',\n              position: 'outside',\n              ...yAxisLabelData\n            }}\n            width={100}\n          />\n\n          {legend.map((option: IDetails) => {\n            return (\n              <Line\n                type='linear'\n                dataKey={option.name || ''}\n                stroke={option.color}\n                key={option.name}\n                dot={{\n                  fill: option.color,\n                  strokeWidth: 4\n                }}\n                fill={option.color}\n                activeDot={false}\n                onMouseEnter={onMouseEnter}\n                onMouseOut={() => setActiveData(undefined)}\n                hide={!option.active}\n                isAnimationActive\n                // isUpdateAnimationActive\n                // animationBegin={3}\n                // animationDuration={3}\n                // animationEasing='linear'\n                onClick={(data) => {\n                  onClick && onClick(option, data)\n                }}\n              />\n            )\n          })}\n          <Legend\n            content={\n              <CustomLegend\n                details={legendData}\n                isRow\n                onChange={(option: IDetails) => handleClick(option)}\n                isFullWidth={legendFullwidth}\n              />\n            }\n            verticalAlign='top'\n            wrapperStyle={{ position: 'unset' }}\n          />\n          <Tooltip\n            active\n            cursor={{ fill: '#f00' }}\n            wrapperStyle={{\n              height: 'auto',\n              width: tooltipWidth,\n              visibility: 'visible'\n            }}\n            content={({\n              active,\n              label\n            }: {\n              active: boolean\n              label: string\n            }) => {\n              return active && label ? (\n                <LineChartTooltip\n                  label={label}\n                  legendData={legendData}\n                  selectedColor={activeData?.stroke}\n                  details={_details}\n                  lineChartTooltip={lineChartTooltip}\n                />\n              ) : (\n                <Fragment />\n              )\n            }}\n          />\n          {/* tiny chart start from here with zooming brush */}\n\n          {showTinyChart ? (\n            <Brush\n              height={70}\n              fill='rgba(0, 0, 0, 0)'\n              stroke='rgba(0, 0, 0, 0.24)'\n              dataKey='name'\n              data={_details}\n              startIndex={\n                // if magnifierStartIndex is less than total width then show magnifierStartIndex or else show 0\n                _magnifierStartIndex && _details.length > _magnifierStartIndex\n                  ? _magnifierStartIndex\n                  : 0\n              }\n              endIndex={_details.length - 1}\n            >\n              <LineChart data={_details} stackOffset='expand'>\n                <XAxis\n                  dataKey='name'\n                  tick={false}\n                  padding={{ left: startWithXaxis ? 0 : 120, right: 15 }}\n                  angle={labelAngle}\n                  interval={0}\n                  width={50}\n                  height={10}\n                  textAnchor='end'\n                  dx={10}\n                />\n                {legend.map((option: IDetails) => {\n                  return (\n                    <Line\n                      type='linear'\n                      dataKey={option.name || ''}\n                      stroke={option.color}\n                      key={option.name}\n                      dot={false}\n                      fill={option.color}\n                      cursor='pointer'\n                    />\n                  )\n                })}\n              </LineChart>\n            </Brush>\n          ) : (\n            <Fragment />\n          )}\n        </LineChart>\n      </ResponsiveContainer>\n    </StyledLineChart>\n  )\n}\n\nexport default LineChartComponent\n"]},"metadata":{},"sourceType":"module"}