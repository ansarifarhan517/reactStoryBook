{"ast":null,"code":"import _toConsumableArray from \"/Users/farhanansari/Code/ui-library/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/Users/farhanansari/Code/ui-library/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"/Users/farhanansari/Code/ui-library/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/farhanansari/Code/ui-library/src/components/molecules/MultiSelect/index.tsx\";\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport Select from './components/Select';\nimport { Option as _Option, AnimatedComponents } from './components/CheckboxOptions';\nimport { ValueContainer, MultiValue, Input // NoOptionsMessage\n} from './components/SearchField';\nimport { MultiSelectStyled, CustomStyles } from './MutiSelect.styled';\nvar emptyArray = [];\n\nvar removeExtra = function removeExtra(maximumSelected, selected) {\n  if (!maximumSelected || selected.length <= maximumSelected) {\n    return selected || [];\n  } else {\n    return selected.slice(-selected.length, maximumSelected) || [];\n  }\n};\n\nvar defaultCallback = function defaultCallback() {};\n\nvar MultiSelect = function MultiSelect(_ref) {\n  var options = _ref.options,\n      _ref$onChange = _ref.onChange,\n      _onChange = _ref$onChange === void 0 ? function () {} : _ref$onChange,\n      width = _ref.width,\n      children = _ref.children,\n      _ref$isLoading = _ref.isLoading,\n      isLoading = _ref$isLoading === void 0 ? false : _ref$isLoading,\n      _ref$isNoOption = _ref.isNoOption,\n      isNoOption = _ref$isNoOption === void 0 ? false : _ref$isNoOption,\n      _ref$menuOpen = _ref.menuOpen,\n      menuOpen = _ref$menuOpen === void 0 ? false : _ref$menuOpen,\n      _ref$defaultSelected = _ref.defaultSelected,\n      defaultSelected = _ref$defaultSelected === void 0 ? emptyArray : _ref$defaultSelected,\n      _ref$selected = _ref.selected,\n      selected = _ref$selected === void 0 ? emptyArray : _ref$selected,\n      allowSelectAll = _ref.allowSelectAll,\n      maximumSelected = _ref.maximumSelected,\n      _ref$searchableKeys = _ref.searchableKeys,\n      searchableKeys = _ref$searchableKeys === void 0 ? ['label'] : _ref$searchableKeys,\n      _ref$onMenuOpen = _ref.onMenuOpen,\n      onMenuOpen = _ref$onMenuOpen === void 0 ? defaultCallback : _ref$onMenuOpen,\n      _ref$onMenuClose = _ref.onMenuClose,\n      onMenuClose = _ref$onMenuClose === void 0 ? defaultCallback : _ref$onMenuClose,\n      _ref$resultLimit = _ref.resultLimit,\n      resultLimit = _ref$resultLimit === void 0 ? 50 : _ref$resultLimit,\n      _onInputChange = _ref.onInputChange,\n      onOutsideClick = _ref.onOutsideClick,\n      rest = _objectWithoutProperties(_ref, [\"options\", \"onChange\", \"width\", \"children\", \"isLoading\", \"isNoOption\", \"menuOpen\", \"defaultSelected\", \"selected\", \"allowSelectAll\", \"maximumSelected\", \"searchableKeys\", \"onMenuOpen\", \"onMenuClose\", \"resultLimit\", \"onInputChange\", \"onOutsideClick\"]);\n\n  var node = useRef(null);\n\n  var _useState = useState(menuOpen),\n      _useState2 = _slicedToArray(_useState, 2),\n      isMenuOpen = _useState2[0],\n      openMenu = _useState2[1];\n\n  var _React$useState = React.useState(),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      inputValue = _React$useState2[0],\n      setInputValue = _React$useState2[1];\n\n  var menuOpenRef = React.useRef(menuOpen);\n  var count = 0;\n  useEffect(function () {\n    menuOpenRef.current = isMenuOpen;\n  }, [isMenuOpen]);\n\n  var handleOutsideClick = function handleOutsideClick(e) {\n    var n = node.current;\n    if (n.contains(e.target)) return;\n\n    if (menuOpenRef.current) {\n      onMenuClose();\n      setInputValue('');\n      onOutsideClick && onOutsideClick();\n    }\n\n    openMenu(false);\n  };\n\n  useEffect(function () {\n    document.addEventListener('mousedown', handleOutsideClick);\n    return function () {\n      document.removeEventListener('mousedown', handleOutsideClick);\n    };\n  }, []);\n\n  var _useState3 = useState(defaultSelected.length ? defaultSelected : selected),\n      _useState4 = _slicedToArray(_useState3, 2),\n      optionSelected = _useState4[0],\n      setOptionSelected = _useState4[1];\n\n  useEffect(function () {\n    setOptionSelected(maximumSelected ? removeExtra(maximumSelected, selected) : selected);\n  }, [selected]);\n\n  var fiterOptions = function fiterOptions() {\n    count = 0;\n    var selectedOptionsMap = {};\n    var selectedOptions = (selected === null || selected === void 0 ? void 0 : selected.length) > 0 ? selected === null || selected === void 0 ? void 0 : selected.filter(function (i) {\n      return searchableKeys.some(function (c) {\n        var _i$c, _i$c$toLowerCase, _ref2, _i$c2, _i$c2$toLowerCase, _ref3;\n\n        if (i && ((_i$c = i[c]) === null || _i$c === void 0 ? void 0 : (_i$c$toLowerCase = _i$c.toLowerCase()) === null || _i$c$toLowerCase === void 0 ? void 0 : _i$c$toLowerCase.includes((_ref2 = inputValue || '') === null || _ref2 === void 0 ? void 0 : _ref2.toLowerCase()))) {\n          selectedOptionsMap[i === null || i === void 0 ? void 0 : i.value] = i;\n        }\n\n        return i && ((_i$c2 = i[c]) === null || _i$c2 === void 0 ? void 0 : (_i$c2$toLowerCase = _i$c2.toLowerCase()) === null || _i$c2$toLowerCase === void 0 ? void 0 : _i$c2$toLowerCase.includes((_ref3 = inputValue || '') === null || _ref3 === void 0 ? void 0 : _ref3.toLowerCase()));\n      });\n    }) : [];\n    var filterOptions = options === null || options === void 0 ? void 0 : options.filter(function (i) {\n      return !selectedOptionsMap[i === null || i === void 0 ? void 0 : i.value] && searchableKeys.some(function (c) {\n        var _i$c3, _i$c3$toLowerCase, _ref4;\n\n        return ((_i$c3 = i[c]) === null || _i$c3 === void 0 ? void 0 : (_i$c3$toLowerCase = _i$c3.toLowerCase()) === null || _i$c3$toLowerCase === void 0 ? void 0 : _i$c3$toLowerCase.includes((_ref4 = inputValue || '') === null || _ref4 === void 0 ? void 0 : _ref4.toLowerCase())) && count++ < resultLimit - (selectedOptions === null || selectedOptions === void 0 ? void 0 : selectedOptions.length);\n      });\n    });\n    return [].concat(_toConsumableArray(selectedOptions), _toConsumableArray(filterOptions || []));\n  };\n\n  var optionsMemo = React.useMemo(function () {\n    return fiterOptions();\n  }, [fiterOptions, options]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    ref: node,\n    style: {\n      width: '100%',\n      cursor: 'pointer'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 5\n    }\n  }, children({\n    optionSelected: optionSelected,\n    isMenuOpen: isMenuOpen,\n    openMenu: openMenu\n  }), isMenuOpen && /*#__PURE__*/React.createElement(MultiSelectStyled, Object.assign({\n    className: \"d-inline-block\",\n    \"data-toggle\": \"popover\",\n    \"data-trigger\": \"focus\",\n    \"data-content\": \"Search\",\n    width: width\n  }, rest, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Select, {\n    loadOptions: function loadOptions(_, callback) {\n      callback(fiterOptions());\n    },\n    options: isLoading || isNoOption ? undefined : optionsMemo,\n    value: optionSelected,\n    components: {\n      Option: function Option(props) {\n        return /*#__PURE__*/React.createElement(_Option, Object.assign({}, props, {\n          optionSelected: optionSelected,\n          maximumSelected: maximumSelected,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 17\n          }\n        }));\n      },\n      MultiValue: MultiValue,\n      ValueContainer: ValueContainer,\n      AnimatedComponents: AnimatedComponents,\n      Input: Input,\n      IndicatorSeparator: function IndicatorSeparator() {\n        return null;\n      },\n      DropdownIndicator: function DropdownIndicator() {\n        return null;\n      },\n      ClearIndicator: function ClearIndicator() {\n        return null;\n      }\n    },\n    onChange: function onChange(value, isSelected, selectedOption, event) {\n      count = 0;\n\n      if ((event === null || event === void 0 ? void 0 : event.action) !== 'pop-value') {\n        if (!isSelected || !maximumSelected || !optionSelected || (optionSelected === null || optionSelected === void 0 ? void 0 : optionSelected.length) < maximumSelected) {\n          var _selectedArray$;\n\n          // if selected all, then removing the { select-all, *} from array and exposing the array\n          var selectedArray = _toConsumableArray(selectedOption);\n\n          var SelectAllObject = selectedArray[0];\n          selectedArray = ((_selectedArray$ = selectedArray[0]) === null || _selectedArray$ === void 0 ? void 0 : _selectedArray$.value) === '*' ? selectedArray.slice(1) : selectedArray;\n          /** * if maxiumum selected applied and select all, that logic is applied here .**/\n\n          var newSelectedOption = maximumSelected && selectedArray.length > maximumSelected ? removeExtra(maximumSelected, selectedArray) : selectedArray;\n\n          if (value === '*') {\n            if (isSelected) {\n              newSelectedOption.push(SelectAllObject);\n            } else {\n              newSelectedOption = [];\n            }\n          } else {\n            if (!isSelected) {\n              var index = newSelectedOption.map(function (v) {\n                return v.value;\n              }).indexOf(value);\n              index !== -1 && newSelectedOption.splice(index, 1);\n            }\n          } // logic for selectall and maximum selected ends\n\n\n          setOptionSelected(newSelectedOption);\n\n          _onChange(event, value, isSelected, newSelectedOption);\n        } else {\n          _onChange(event, 'maximum exceeded', false, optionSelected);\n        }\n      }\n    },\n    inputValue: inputValue,\n    onInputChange: function onInputChange(query, _ref5) {\n      var action = _ref5.action;\n\n      // Prevents resetting our input after option has been selected\n      if (action === 'input-change') {\n        setInputValue(query);\n      }\n\n      _onInputChange && _onInputChange(query);\n    },\n    allowSelectAll: allowSelectAll,\n    menuIsOpen: true,\n    hideSelectedOptions: false,\n    closeMenuOnSelect: false,\n    isMulti: true,\n    styles: CustomStyles(),\n    closeMenuOnScroll: true,\n    noOptionsMessage: function noOptionsMessage() {\n      return isLoading ? 'Loading...' : 'No Data Available';\n    },\n    onMenuClose: onMenuClose,\n    onMenuOpen: onMenuOpen,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 11\n    }\n  })));\n};\n\nexport default MultiSelect;","map":{"version":3,"sources":["/Users/farhanansari/Code/ui-library/src/components/molecules/MultiSelect/index.tsx"],"names":["React","useState","useEffect","useRef","Select","Option","AnimatedComponents","ValueContainer","MultiValue","Input","MultiSelectStyled","CustomStyles","emptyArray","removeExtra","maximumSelected","selected","length","slice","defaultCallback","MultiSelect","options","onChange","width","children","isLoading","isNoOption","menuOpen","defaultSelected","allowSelectAll","searchableKeys","onMenuOpen","onMenuClose","resultLimit","onInputChange","onOutsideClick","rest","node","isMenuOpen","openMenu","inputValue","setInputValue","menuOpenRef","count","current","handleOutsideClick","e","n","contains","target","document","addEventListener","removeEventListener","optionSelected","setOptionSelected","fiterOptions","selectedOptionsMap","selectedOptions","filter","i","some","c","toLowerCase","includes","value","filterOptions","optionsMemo","useMemo","cursor","_","callback","undefined","props","IndicatorSeparator","DropdownIndicator","ClearIndicator","isSelected","selectedOption","event","action","selectedArray","SelectAllObject","newSelectedOption","push","index","map","v","indexOf","splice","query"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\nimport Select from './components/Select'\n\nimport { Option, AnimatedComponents } from './components/CheckboxOptions'\nimport {\n  ValueContainer,\n  MultiValue,\n  Input\n  // NoOptionsMessage\n} from './components/SearchField'\n\nimport { MultiSelectStyled, CustomStyles } from './MutiSelect.styled'\n\nimport { IMultiSelectProps, IMultiSelectOptions } from './interfaces'\n\nconst emptyArray: IMultiSelectOptions[] = []\n\nconst removeExtra = (maximumSelected: number, selected: any[]) => {\n  if (!maximumSelected || selected.length <= maximumSelected) {\n    return selected || []\n  } else {\n    return selected.slice(-selected.length, maximumSelected) || []\n  }\n}\n\nconst defaultCallback = () => {}\nconst MultiSelect = ({\n  options,\n  onChange = () => {},\n  width,\n  children,\n  isLoading = false,\n  isNoOption = false,\n  menuOpen = false,\n  defaultSelected = emptyArray,\n  selected = emptyArray,\n  allowSelectAll,\n  maximumSelected,\n  searchableKeys = ['label'],\n  onMenuOpen = defaultCallback,\n  onMenuClose = defaultCallback,\n  resultLimit = 50,\n  onInputChange,\n  onOutsideClick,\n  ...rest\n}: IMultiSelectProps) => {\n  const node = useRef(null)\n  const [isMenuOpen, openMenu] = useState(menuOpen)\n  const [inputValue, setInputValue] = React.useState<string>()\n  const menuOpenRef = React.useRef<boolean>(menuOpen)\n\n  let count: number = 0\n\n  useEffect(() => {\n    menuOpenRef.current = isMenuOpen\n  }, [isMenuOpen])\n\n  const handleOutsideClick = (e: any) => {\n    const n = (node.current as unknown) as Node\n    if (n.contains(e.target)) return\n    if (menuOpenRef.current) {\n      onMenuClose()\n      setInputValue('')\n      onOutsideClick && onOutsideClick()\n    }\n    openMenu(false)\n  }\n\n  useEffect(() => {\n    document.addEventListener('mousedown', handleOutsideClick)\n    return () => {\n      document.removeEventListener('mousedown', handleOutsideClick)\n    }\n  }, [])\n\n  const [optionSelected, setOptionSelected] = useState<IMultiSelectOptions[]>(\n    defaultSelected.length ? defaultSelected : selected\n  )\n\n  useEffect(() => {\n    setOptionSelected(\n      maximumSelected ? removeExtra(maximumSelected, selected) : selected\n    )\n  }, [selected])\n\n  const fiterOptions = () => {\n    count = 0\n    const selectedOptionsMap = {}\n    const selectedOptions =\n      selected?.length > 0\n        ? selected?.filter((i) => {\n            return searchableKeys.some((c) => {\n              if (\n                i &&\n                i[c]?.toLowerCase()?.includes((inputValue || '')?.toLowerCase())\n              ) {\n                selectedOptionsMap[i?.value] = i\n              }\n              return (\n                i &&\n                i[c]?.toLowerCase()?.includes((inputValue || '')?.toLowerCase())\n              )\n            })\n          })\n        : []\n    const filterOptions = options?.filter((i) => {\n      return (\n        !selectedOptionsMap[i?.value] &&\n        searchableKeys.some((c) => {\n          return (\n            i[c]?.toLowerCase()?.includes((inputValue || '')?.toLowerCase()) &&\n            count++ < resultLimit - selectedOptions?.length\n          )\n        })\n      )\n    })\n    return [...selectedOptions, ...[...(filterOptions || [])]]\n  }\n\n  const optionsMemo = React.useMemo(() => {\n    return fiterOptions()\n  }, [fiterOptions, options])\n\n  return (\n    <div ref={node} style={{ width: '100%', cursor: 'pointer' }}>\n      {children({ optionSelected, isMenuOpen, openMenu })}\n\n      {isMenuOpen && (\n        <MultiSelectStyled\n          className='d-inline-block'\n          data-toggle='popover'\n          data-trigger='focus'\n          data-content='Search'\n          width={width}\n          {...rest}\n        >\n          <Select\n            loadOptions={(_, callback) => {\n              callback(fiterOptions())\n            }}\n            options={isLoading || isNoOption ? undefined : optionsMemo}\n            value={optionSelected}\n            components={{\n              Option: (props: any) => (\n                <Option\n                  {...props}\n                  optionSelected={optionSelected}\n                  maximumSelected={maximumSelected}\n                />\n              ),\n              MultiValue,\n              ValueContainer,\n              AnimatedComponents,\n              Input,\n              IndicatorSeparator: () => null,\n              DropdownIndicator: () => null,\n              ClearIndicator: () => null\n            }}\n            onChange={(\n              value: string,\n              isSelected: boolean,\n              selectedOption: IMultiSelectOptions[],\n              event: any\n            ) => {\n              count = 0\n              if (event?.action !== 'pop-value') {\n                if (\n                  !isSelected ||\n                  !maximumSelected ||\n                  !optionSelected ||\n                  optionSelected?.length < maximumSelected\n                ) {\n                  // if selected all, then removing the { select-all, *} from array and exposing the array\n                  let selectedArray: any = [...selectedOption]\n                  const SelectAllObject = selectedArray[0]\n                  selectedArray =\n                    selectedArray[0]?.value === '*'\n                      ? selectedArray.slice(1)\n                      : selectedArray\n\n                  /** * if maxiumum selected applied and select all, that logic is applied here .**/\n                  let newSelectedOption =\n                    maximumSelected && selectedArray.length > maximumSelected\n                      ? removeExtra(maximumSelected, selectedArray)\n                      : selectedArray\n                  if (value === '*') {\n                    if (isSelected) {\n                      newSelectedOption.push(SelectAllObject)\n                    } else {\n                      newSelectedOption = []\n                    }\n                  } else {\n                    if (!isSelected) {\n                      const index = newSelectedOption\n                        .map((v: any) => v.value)\n                        .indexOf(value)\n                      index !== -1 && newSelectedOption.splice(index, 1)\n                    }\n                  }\n                  // logic for selectall and maximum selected ends\n\n                  setOptionSelected(newSelectedOption)\n\n                  onChange(event, value, isSelected, newSelectedOption)\n                } else {\n                  onChange(event, 'maximum exceeded', false, optionSelected)\n                }\n              }\n            }}\n            inputValue={inputValue}\n            onInputChange={(query, { action }) => {\n              // Prevents resetting our input after option has been selected\n              if (action === 'input-change') {\n                setInputValue(query)\n              }\n              onInputChange && onInputChange(query)\n            }}\n            allowSelectAll={allowSelectAll}\n            menuIsOpen\n            hideSelectedOptions={false}\n            closeMenuOnSelect={false}\n            isMulti\n            styles={CustomStyles()}\n            closeMenuOnScroll\n            noOptionsMessage={() =>\n              isLoading ? 'Loading...' : 'No Data Available'\n            }\n            onMenuClose={onMenuClose}\n            onMenuOpen={onMenuOpen}\n          />\n        </MultiSelectStyled>\n      )}\n    </div>\n  )\n}\n\nexport default MultiSelect\n"]},"metadata":{},"sourceType":"module"}