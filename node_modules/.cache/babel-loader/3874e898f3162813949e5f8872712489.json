{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/farhanansari/Code/ui-library/src/components/atoms/Map/layers/LeafletCirclePlotting.tsx\";\n\nimport LL from 'leaflet';\nimport React, { Fragment } from 'react';\nimport { Circle, FeatureGroup, Tooltip } from 'react-leaflet';\nimport { StyledPopUp } from '../StyledMap';\nimport LeafletInfowindow from '../utils/LeafletInfowindow';\n\nvar LeafletCirclePlottingLayer = function LeafletCirclePlottingLayer(_ref) {\n  var circle = _ref.circle,\n      popupRef = _ref.popupRef,\n      google = _ref.google,\n      popupCustomComponent = _ref.popupCustomComponent;\n  // as mouse over will rerender component, we show tooltip only when it gets clicked\n  var popupRefType = circle === null || circle === void 0 ? void 0 : circle.popupRef; // type which we are mapping in popupRef object\n\n  var toolTipKey = circle === null || circle === void 0 ? void 0 : circle.toolTipKey; // tooltip key which will be give value from option object\n\n  var centerKey = circle === null || circle === void 0 ? void 0 : circle.center; // circle will take [lat,lng]\n\n  var circleData = circle === null || circle === void 0 ? void 0 : circle.data; // circle data like name, radius\n\n  var radiusKey = circle === null || circle === void 0 ? void 0 : circle.radiusKey;\n  var styleKeys = circle === null || circle === void 0 ? void 0 : circle.styleKey; // circle style\n\n  var renderer = LL.canvas({\n    padding: 0.5\n  }); // adding renderer if data entries more than 200\n\n  return /*#__PURE__*/React.createElement(FeatureGroup, {\n    renderer: renderer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }\n  }, circleData.map(function (option, dataIndex) {\n    var center = centerKey ? centerKey.map(function (entity) {\n      return option[entity];\n    }) : [option === null || option === void 0 ? void 0 : option.latitude, option === null || option === void 0 ? void 0 : option.longitude];\n    var parsedRadiusKey = radiusKey && parseFloat(option[radiusKey]);\n    return /*#__PURE__*/React.createElement(Fragment, {\n      key: dataIndex,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Circle, {\n      fillColor: (styleKeys === null || styleKeys === void 0 ? void 0 : styleKeys.fillColor) && option[styleKeys === null || styleKeys === void 0 ? void 0 : styleKeys.fillColor] ? option[styleKeys === null || styleKeys === void 0 ? void 0 : styleKeys.fillColor] : '#3388ff',\n      stroke: true,\n      renderer: circleData.length > 200 ? renderer : undefined,\n      weight: (styleKeys === null || styleKeys === void 0 ? void 0 : styleKeys.weight) && option[styleKeys === null || styleKeys === void 0 ? void 0 : styleKeys.weight] ? option[styleKeys === null || styleKeys === void 0 ? void 0 : styleKeys.weight] : 3,\n      color: circle.colorKey && option[circle.colorKey] || '#3388ff',\n      dashArray: (styleKeys === null || styleKeys === void 0 ? void 0 : styleKeys.dashArray) && option[styleKeys === null || styleKeys === void 0 ? void 0 : styleKeys.dashArray] ? option[styleKeys === null || styleKeys === void 0 ? void 0 : styleKeys.dashArray] : null,\n      fillOpacity: (styleKeys === null || styleKeys === void 0 ? void 0 : styleKeys.fillOpacity) && option[styleKeys === null || styleKeys === void 0 ? void 0 : styleKeys.fillOpacity] ? option[styleKeys === null || styleKeys === void 0 ? void 0 : styleKeys.fillOpacity] : 0.2,\n      radius: parsedRadiusKey ? parseFloat((parsedRadiusKey * 1000).toFixed(2)) : 200,\n      center: center,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Tooltip, {\n      sticky: true,\n      direction: \"auto\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 15\n      }\n    }, option[toolTipKey]), popupRef && popupRefType && /*#__PURE__*/React.createElement(StyledPopUp, {\n      keepInView: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(LeafletInfowindow, {\n      structures: popupRef,\n      popupRef: popupRefType,\n      data: option,\n      google: google // will be needed for location using geocoder\n      ,\n      latlngObj: {\n        lat: parseFloat(option.latitude),\n        lng: parseFloat(option.longitude)\n      },\n      popupCustomComponent: popupCustomComponent,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 19\n      }\n    }))));\n  }));\n};\n\nexport default LeafletCirclePlottingLayer;","map":{"version":3,"sources":["/Users/farhanansari/Code/ui-library/src/components/atoms/Map/layers/LeafletCirclePlotting.tsx"],"names":["LL","React","Fragment","Circle","FeatureGroup","Tooltip","StyledPopUp","LeafletInfowindow","LeafletCirclePlottingLayer","circle","popupRef","google","popupCustomComponent","popupRefType","toolTipKey","centerKey","center","circleData","data","radiusKey","styleKeys","styleKey","renderer","canvas","padding","map","option","dataIndex","entity","latitude","longitude","parsedRadiusKey","parseFloat","fillColor","length","undefined","weight","colorKey","dashArray","fillOpacity","toFixed","lat","lng"],"mappings":"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","sourcesContent":["import { GoogleAPI } from 'google-maps-react'\nimport LL, { LatLngExpression } from 'leaflet'\nimport React, { Fragment } from 'react'\nimport { Circle, FeatureGroup, Tooltip } from 'react-leaflet'\nimport { ICircle } from '../interfaces.d'\nimport { StyledPopUp } from '../StyledMap'\nimport LeafletInfowindow from '../utils/LeafletInfowindow'\n\ninterface ILeafletCirclePlottingLayer {\n  circle: ICircle\n  popupRef: any\n  google: GoogleAPI\n  popupCustomComponent: any\n}\n\nconst LeafletCirclePlottingLayer = ({\n  circle,\n  popupRef, // popup key structure, which keys can be shown\n  google, // for location finding\n  popupCustomComponent\n}: ILeafletCirclePlottingLayer) => {\n  // as mouse over will rerender component, we show tooltip only when it gets clicked\n\n  const popupRefType = circle?.popupRef // type which we are mapping in popupRef object\n  const toolTipKey = circle?.toolTipKey // tooltip key which will be give value from option object\n  const centerKey = circle?.center // circle will take [lat,lng]\n  const circleData = circle?.data // circle data like name, radius\n  const radiusKey = circle?.radiusKey\n  const styleKeys = circle?.styleKey // circle style\n  const renderer: any = LL.canvas({ padding: 0.5 }) // adding renderer if data entries more than 200\n\n  return (\n    <FeatureGroup renderer={renderer}>\n      {circleData.map((option: any, dataIndex: number) => {\n        const center = centerKey\n          ? centerKey.map((entity: string) => option[entity])\n          : [option?.latitude, option?.longitude]\n\n        const parsedRadiusKey = radiusKey && parseFloat(option[radiusKey])\n\n        return (\n          <Fragment key={dataIndex}>\n            <Circle\n              fillColor={\n                styleKeys?.fillColor && option[styleKeys?.fillColor]\n                  ? option[styleKeys?.fillColor]\n                  : '#3388ff'\n              }\n              stroke\n              renderer={circleData.length > 200 ? renderer : undefined}\n              weight={\n                styleKeys?.weight && option[styleKeys?.weight]\n                  ? option[styleKeys?.weight]\n                  : 3\n              }\n              color={(circle.colorKey && option[circle.colorKey]) || '#3388ff'}\n              dashArray={\n                styleKeys?.dashArray && option[styleKeys?.dashArray]\n                  ? option[styleKeys?.dashArray]\n                  : null\n              }\n              fillOpacity={\n                styleKeys?.fillOpacity && option[styleKeys?.fillOpacity]\n                  ? option[styleKeys?.fillOpacity]\n                  : 0.2\n              }\n              radius={\n                parsedRadiusKey\n                  ? parseFloat((parsedRadiusKey * 1000).toFixed(2))\n                  : 200\n              }\n              center={center as LatLngExpression}\n            >\n              {/* Tooltip which shows on marker hover */}\n              <Tooltip sticky direction='auto'>\n                {option[toolTipKey]}\n              </Tooltip>\n\n              {/* Popup which opens up on marker click */}\n              {popupRef && popupRefType && (\n                <StyledPopUp keepInView>\n                  <LeafletInfowindow\n                    structures={popupRef}\n                    popupRef={popupRefType}\n                    data={option}\n                    google={google} // will be needed for location using geocoder\n                    latlngObj={{\n                      lat: parseFloat(option.latitude),\n                      lng: parseFloat(option.longitude)\n                    }}\n                    popupCustomComponent={popupCustomComponent}\n                  />\n                </StyledPopUp>\n              )}\n            </Circle>\n          </Fragment>\n        )\n      })}\n    </FeatureGroup>\n  )\n}\n\nexport default LeafletCirclePlottingLayer\n"]},"metadata":{},"sourceType":"module"}