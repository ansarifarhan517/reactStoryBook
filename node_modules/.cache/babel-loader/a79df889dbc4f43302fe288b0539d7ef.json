{"ast":null,"code":"import _slicedToArray from \"/Users/farhanansari/Code/ui-library/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"/Users/farhanansari/Code/ui-library/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _taggedTemplateLiteral from \"/Users/farhanansari/Code/ui-library/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/farhanansari/Code/ui-library/src/components/molecules/SliderWithNumbers/index.tsx\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  border-bottom: 1px solid \", \";\\n  width: 100%;\\n  display: flex;\\n  justify-content: space-between;\\n  align-items: center;\\n  padding: 0.7em 0;\\n  & > * {\\n    display: inline-block;\\n    padding: 0px 5px;\\n  }\\n  & > div {\\n    letter-spacing: 0.6px;\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useEffect } from 'react';\nimport styled from 'styled-components';\nimport Typography from '../../atoms/Typography';\nimport ProgressBarDraggable from '../../atoms/ProgressBarDraggable';\nimport NumberInput from '../NumberInput';\nimport Position from '../Position';\nimport useDebounce from '../../../utilities/useDebounce';\nvar SliderWithNumbersStyled = styled.div(_templateObject(), function (_ref) {\n  var _theme$colors;\n\n  var theme = _ref.theme;\n  return theme === null || theme === void 0 ? void 0 : (_theme$colors = theme.colors) === null || _theme$colors === void 0 ? void 0 : _theme$colors.grey['200'];\n});\n\nvar SliderWithNumbers = function SliderWithNumbers(_ref2) {\n  var children = _ref2.children,\n      _ref2$minRange = _ref2.minRange,\n      minRange = _ref2$minRange === void 0 ? 0 : _ref2$minRange,\n      _ref2$maxRange = _ref2.maxRange,\n      maxRange = _ref2$maxRange === void 0 ? 100 : _ref2$maxRange,\n      _ref2$selectedRange = _ref2.selectedRange,\n      selectedRange = _ref2$selectedRange === void 0 ? 0 : _ref2$selectedRange,\n      _ref2$resetOutOfBound = _ref2.resetOutOfBounds,\n      resetOutOfBounds = _ref2$resetOutOfBound === void 0 ? false : _ref2$resetOutOfBound,\n      _ref2$resetInterval = _ref2.resetInterval,\n      resetInterval = _ref2$resetInterval === void 0 ? 200 : _ref2$resetInterval,\n      setFinalData = _ref2.setFinalData,\n      rest = _objectWithoutProperties(_ref2, [\"children\", \"minRange\", \"maxRange\", \"selectedRange\", \"resetOutOfBounds\", \"resetInterval\", \"setFinalData\"]);\n\n  var _React$useState = React.useState(0),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      progressPercent = _React$useState2[0],\n      setProgressPercent = _React$useState2[1]; // for slider value between 0 to 100\n\n\n  var _React$useState3 = React.useState(selectedRange),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      selectionNumberState = _React$useState4[0],\n      setSelectionNumber = _React$useState4[1];\n\n  var debounceTime = resetOutOfBounds ? resetInterval : 0;\n  var selectionNumber = useDebounce(selectionNumberState, debounceTime);\n  useEffect(function () {\n    setSelectionNumber(selectedRange);\n  }, [selectedRange]);\n  useEffect(function () {\n    if (selectionNumber >= minRange && selectionNumber <= maxRange) {\n      setProgressPercent(Math.round((selectionNumber - minRange) / (maxRange - minRange) * 100));\n    } else if (selectionNumber < minRange) {\n      setProgressPercent(0);\n      resetOutOfBounds && resetTextBox(true);\n    } else if (selectionNumber > maxRange) {\n      setProgressPercent(100);\n      resetOutOfBounds && resetTextBox(false);\n    }\n  }, [selectionNumber]);\n\n  var resetTextBox = function resetTextBox(toMin) {\n    if (toMin) {\n      setSelectionNumber(minRange);\n      setFinalData(minRange);\n    } else {\n      setSelectionNumber(maxRange);\n      setFinalData(maxRange);\n    }\n  };\n\n  var handleTextChange = function handleTextChange(txtField) {\n    var newRangeNum = parseInt(txtField);\n\n    if (newRangeNum !== NaN) {\n      setFinalData(newRangeNum);\n      setSelectionNumber(newRangeNum);\n    }\n  };\n\n  var handleSliderChange = function handleSliderChange(changedPercent) {\n    if (changedPercent !== NaN) {\n      var txtFieldNum = Math.round(minRange + (maxRange - minRange) * changedPercent / 100);\n      setSelectionNumber(txtFieldNum);\n      setFinalData(txtFieldNum);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(Position, {\n    display: \"block\",\n    type: \"relative\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(SliderWithNumbersStyled, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Typography, Object.assign({\n    useStyle: false,\n    \"font-size\": \"11px\",\n    color: \"black\"\n  }, rest, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }\n  }), minRange), /*#__PURE__*/React.createElement(ProgressBarDraggable, {\n    completedPercent: progressPercent,\n    notifySliderChange: function notifySliderChange(newPercent) {\n      return handleSliderChange(newPercent);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Typography, Object.assign({\n    useStyle: false,\n    \"font-size\": \"11px\",\n    color: \"black\"\n  }, rest, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }\n  }), maxRange), /*#__PURE__*/React.createElement(NumberInput, {\n    id: \"someId\",\n    name: \"someName\",\n    className: \"someClassName\",\n    label: \"\",\n    maxLength: 10,\n    initialValue: selectionNumber,\n    required: false,\n    fullWidth: false,\n    onChange: function onChange(e) {\n      return handleTextChange(e);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }\n  }), children));\n};\n\nexport default SliderWithNumbers;","map":{"version":3,"sources":["/Users/farhanansari/Code/ui-library/src/components/molecules/SliderWithNumbers/index.tsx"],"names":["React","useEffect","styled","Typography","ProgressBarDraggable","NumberInput","Position","useDebounce","SliderWithNumbersStyled","div","theme","colors","grey","SliderWithNumbers","children","minRange","maxRange","selectedRange","resetOutOfBounds","resetInterval","setFinalData","rest","useState","progressPercent","setProgressPercent","selectionNumberState","setSelectionNumber","debounceTime","selectionNumber","Math","round","resetTextBox","toMin","handleTextChange","txtField","newRangeNum","parseInt","NaN","handleSliderChange","changedPercent","txtFieldNum","newPercent","e"],"mappings":"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","sourcesContent":["import React, { ReactNode, useEffect } from 'react'\nimport styled from 'styled-components'\nimport Typography from '../../atoms/Typography'\nimport ProgressBarDraggable from '../../atoms/ProgressBarDraggable'\nimport NumberInput from '../NumberInput'\nimport Position from '../Position'\nimport useDebounce from '../../../utilities/useDebounce'\nexport interface ISliderWithNumbersProps {\n  children?: ReactNode\n  minRange: number\n  maxRange: number\n  selectedRange: number\n  errorMessage?: string\n  resetOutOfBounds: boolean\n  resetInterval?: number\n  setFinalData ?:any\n}\n\nconst SliderWithNumbersStyled = styled.div`\n  border-bottom: 1px solid ${({ theme }) => theme?.colors?.grey['200']};\n  width: 100%;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 0.7em 0;\n  & > * {\n    display: inline-block;\n    padding: 0px 5px;\n  }\n  & > div {\n    letter-spacing: 0.6px;\n  }\n`\n\nconst SliderWithNumbers = ({\n  children,\n  minRange = 0,\n  maxRange = 100,\n  selectedRange = 0,\n  resetOutOfBounds = false,\n  resetInterval = 200,\n  setFinalData,\n  ...rest\n}: ISliderWithNumbersProps) => {\n  const [progressPercent, setProgressPercent] = React.useState(0);  // for slider value between 0 to 100\n  const [selectionNumberState, setSelectionNumber] = React.useState(selectedRange); \n  let debounceTime = resetOutOfBounds? resetInterval : 0\n  const selectionNumber = useDebounce(selectionNumberState, debounceTime)\n  \n\n  useEffect(() => {\n    setSelectionNumber(selectedRange)\n  }, [selectedRange])\n\n  useEffect(() => {\n    if (selectionNumber >= minRange &&  selectionNumber <= maxRange) {\n      setProgressPercent(Math.round((selectionNumber-minRange)/(maxRange-minRange) * 100));\n    } else if (selectionNumber < minRange) {\n      setProgressPercent(0)\n      resetOutOfBounds && resetTextBox(true)\n    } else if (selectionNumber > maxRange) {\n      setProgressPercent(100)\n      resetOutOfBounds && resetTextBox(false)\n    }\n  }, [selectionNumber])\n\n\n  \n  const resetTextBox = (toMin: boolean) => {\n    if (toMin) {\n      setSelectionNumber(minRange)\n      setFinalData(minRange)\n    } else {\n      setSelectionNumber(maxRange)\n      setFinalData(maxRange)\n    }\n  }\n\n  const handleTextChange = (txtField: string) => {\n    let newRangeNum = parseInt(txtField)\n    if (newRangeNum !== NaN) {\n      setFinalData(newRangeNum)\n      setSelectionNumber(newRangeNum)\n    }\n  };  \n  const handleSliderChange = (changedPercent: number) => {\n    if (changedPercent !== NaN) {\n      let txtFieldNum = Math.round(minRange + ((maxRange-minRange) * changedPercent / 100))\n      setSelectionNumber(txtFieldNum)\n      setFinalData(txtFieldNum)\n    }\n  };\n\n  return (\n    <Position display='block' type='relative'>\n      <SliderWithNumbersStyled>\n        <Typography\n          useStyle={false}\n          font-size='11px'\n          color='black'\n          {...rest}\n        >\n          {minRange}\n        </Typography>\n        <ProgressBarDraggable\n          completedPercent = {progressPercent}\n          notifySliderChange={(newPercent: number) => handleSliderChange(newPercent)}\n        />\n        <Typography\n          useStyle={false}\n          font-size='11px'\n          color='black'\n          {...rest}\n        >\n          {maxRange}\n        </Typography>\n        <NumberInput\n          id='someId'\n          name='someName'\n          className='someClassName'\n          label={\"\"}\n          maxLength={10}\n          initialValue={selectionNumber}\n          required={false}\n          fullWidth={false}\n          onChange={(e) => handleTextChange(e)}\n        />\n        {children}\n      </SliderWithNumbersStyled>\n    </Position>\n  )\n}\nexport default SliderWithNumbers\n"]},"metadata":{},"sourceType":"module"}