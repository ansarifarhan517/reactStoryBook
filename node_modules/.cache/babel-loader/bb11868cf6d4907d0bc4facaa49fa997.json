{"ast":null,"code":"import _slicedToArray from \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/molecules/IconDropdown/index.tsx\";\n\nimport React, { useContext, useEffect, useState } from 'react';\nimport { ThemeContext } from 'styled-components';\nimport BreadCrumb from './Variant/BreadCrumb';\nimport ButtonDropdown from './Variant/ButtonDropdown';\nimport TextDropdown from './Variant/TextDropdown';\nimport ColumnOptionFilter from './Variant/ColumnOptionFilter';\nimport DatepickerDropdown from './Variant/DatepickerDropdown';\nimport DropdownUniversal from './Variant/DropdownUniversal';\nimport PaginationDropdown from './Variant/PaginationDropdown';\nimport MultiLevelButtonDropdown from './Variant/MultiLevelButtonDropdown';\nimport { IconDropdownDropdownStyled } from './StyledIconDropdown';\nimport MultiLevelBreadCrumb from './Variant/MultiLevelBreadCrumb';\n\nvar IconDropdown = function IconDropdown(_ref) {\n  var id = _ref.id,\n      _ref$variant = _ref.variant,\n      variant = _ref$variant === void 0 ? 'button-dropdown' : _ref$variant,\n      _ref$width = _ref.width,\n      width = _ref$width === void 0 ? 'auto' : _ref$width,\n      _ref$optionList = _ref.optionList,\n      optionList = _ref$optionList === void 0 ? [] : _ref$optionList,\n      _ref$iconButtonDetail = _ref.iconButtonDetails,\n      iconButtonDetails = _ref$iconButtonDetail === void 0 ? [] : _ref$iconButtonDetail,\n      _ref$onChange = _ref.onChange,\n      onChange = _ref$onChange === void 0 ? function () {} : _ref$onChange,\n      primary = _ref.primary,\n      intent = _ref.intent,\n      value = _ref.value,\n      placeholder = _ref.placeholder,\n      showDownArrow = _ref.showDownArrow,\n      _ref$isSingleClickOpt = _ref.isSingleClickOption,\n      isSingleClickOption = _ref$isSingleClickOpt === void 0 ? false : _ref$isSingleClickOpt,\n      _ref$disabled = _ref.disabled,\n      disabled = _ref$disabled === void 0 ? false : _ref$disabled,\n      children = _ref.children,\n      optionComponent = _ref.optionComponent,\n      menuIsOpen = _ref.menuIsOpen,\n      customStyle = _ref.customStyle,\n      tooltipMessage = _ref.tooltipMessage,\n      tooltipProps = _ref.tooltipProps,\n      showOptionIcon = _ref.showOptionIcon,\n      dropdownPosition = _ref.dropdownPosition,\n      onSetAsFavourite = _ref.onSetAsFavourite,\n      defaultOpen = _ref.defaultOpen,\n      _ref$isMultiRegionSty = _ref.isMultiRegionStyled,\n      isMultiRegionStyled = _ref$isMultiRegionSty === void 0 ? false : _ref$isMultiRegionSty,\n      _ref$handleClick = _ref.handleClick,\n      handleClick = _ref$handleClick === void 0 ? function () {} : _ref$handleClick;\n\n  var _useState = useState(optionList.find(function (_ref2) {\n    var optionValue = _ref2.value;\n    return optionValue === value;\n  }) || null),\n      _useState2 = _slicedToArray(_useState, 2),\n      selectedOption = _useState2[0],\n      setSelectedOption = _useState2[1];\n\n  var _useState3 = useState(menuIsOpen),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isMenuOpen = _useState4[0],\n      setIsMenuOpen = _useState4[1];\n  /* In the case of Date picker , I externally pass selected value which will be string. \n  As react-select wants {label, value} format.\n  Selection is done below */\n\n\n  useEffect(function () {\n    setIsMenuOpen(menuIsOpen);\n  }, [menuIsOpen]);\n  useEffect(function () {\n    var optionSelected = optionList.find(function (_ref3) {\n      var optionValue = _ref3.value;\n      return optionValue === value;\n    });\n    setSelectedOption(optionSelected);\n  }, [value]);\n  var theme = useContext(ThemeContext);\n  var defaultProps = {\n    id: id,\n    primary: primary,\n    intent: intent,\n    iconButtonDetails: iconButtonDetails,\n    options: optionList,\n    value: selectedOption,\n    variant: variant,\n    width: width,\n    theme: theme,\n    placeholder: placeholder,\n    showDownArrow: showDownArrow,\n    children: children,\n    customStyle: customStyle,\n    menuIsOpen: isMenuOpen,\n    onChange: function onChange(input) {\n      return handleDeviceChange(input);\n    },\n    optionComponent: optionComponent,\n    tooltipMessage: tooltipMessage,\n    disabled: disabled,\n    tooltipProps: tooltipProps,\n    showOptionIcon: showOptionIcon,\n    dropdownPosition: dropdownPosition,\n    handleClick: handleClick,\n    defaultOpen: defaultOpen,\n    isMultiRegionStyled: isMultiRegionStyled\n  };\n  var selectComponent = {\n    'button-dropdown': /*#__PURE__*/React.createElement(ButtonDropdown, {\n      defaultProps: defaultProps,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 24\n      }\n    }),\n    'multilevel-button-dropdown': /*#__PURE__*/React.createElement(MultiLevelButtonDropdown, {\n      defaultProps: defaultProps,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 7\n      }\n    }),\n    'pagination-size': /*#__PURE__*/React.createElement(PaginationDropdown, {\n      defaultProps: defaultProps,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 24\n      }\n    }),\n    'column-filter': /*#__PURE__*/React.createElement(ColumnOptionFilter, {\n      defaultProps: defaultProps,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 22\n      }\n    }),\n    'bread-crumb': /*#__PURE__*/React.createElement(BreadCrumb, {\n      defaultProps: defaultProps,\n      handleOutsideChange: onChange,\n      onSetAsFavourite: onSetAsFavourite,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 7\n      }\n    }),\n    'date-picker': /*#__PURE__*/React.createElement(DatepickerDropdown, {\n      defaultProps: defaultProps,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 20\n      }\n    }),\n    'default-dropdown': /*#__PURE__*/React.createElement(DropdownUniversal, {\n      defaultProps: defaultProps,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 25\n      }\n    }),\n    'text-dropdown': /*#__PURE__*/React.createElement(TextDropdown, {\n      defaultProps: defaultProps,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 22\n      }\n    }),\n    'multilevel-breadcrumb': /*#__PURE__*/React.createElement(MultiLevelBreadCrumb, {\n      defaultProps: defaultProps,\n      handleOutsideChange: onChange,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 7\n      }\n    })\n  };\n\n  var handleDeviceChange = function handleDeviceChange(input) {\n    var option = input;\n    var previousOption = selectedOption;\n\n    if ((option === null || option === void 0 ? void 0 : option.value) !== (previousOption === null || previousOption === void 0 ? void 0 : previousOption.value)) {\n      setSelectedOption(input);\n      option ? onChange(option === null || option === void 0 ? void 0 : option.value) : onChange(undefined);\n    } else if (isSingleClickOption) {\n      option && onChange(option === null || option === void 0 ? void 0 : option.value);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(IconDropdownDropdownStyled, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 5\n    }\n  }, selectComponent[variant] || 'No varaint');\n};\n\nexport default IconDropdown;","map":{"version":3,"sources":["/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/molecules/IconDropdown/index.tsx"],"names":["React","useContext","useEffect","useState","ThemeContext","BreadCrumb","ButtonDropdown","TextDropdown","ColumnOptionFilter","DatepickerDropdown","DropdownUniversal","PaginationDropdown","MultiLevelButtonDropdown","IconDropdownDropdownStyled","MultiLevelBreadCrumb","IconDropdown","id","variant","width","optionList","iconButtonDetails","onChange","primary","intent","value","placeholder","showDownArrow","isSingleClickOption","disabled","children","optionComponent","menuIsOpen","customStyle","tooltipMessage","tooltipProps","showOptionIcon","dropdownPosition","onSetAsFavourite","defaultOpen","isMultiRegionStyled","handleClick","find","optionValue","selectedOption","setSelectedOption","isMenuOpen","setIsMenuOpen","optionSelected","theme","defaultProps","options","input","handleDeviceChange","selectComponent","option","previousOption","undefined"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState } from 'react'\nimport { ValueType } from 'react-select'\nimport { ThemeContext } from 'styled-components'\nimport { ISelectProps, OptionType } from '../DropDown/interface'\nimport BreadCrumb from './Variant/BreadCrumb'\nimport ButtonDropdown from './Variant/ButtonDropdown'\nimport TextDropdown from './Variant/TextDropdown'\nimport ColumnOptionFilter from './Variant/ColumnOptionFilter'\nimport DatepickerDropdown from './Variant/DatepickerDropdown'\nimport DropdownUniversal from './Variant/DropdownUniversal'\nimport PaginationDropdown from './Variant/PaginationDropdown'\nimport MultiLevelButtonDropdown from './Variant/MultiLevelButtonDropdown'\nimport { IconDropdownDropdownStyled } from './StyledIconDropdown'\nimport MultiLevelBreadCrumb from './Variant/MultiLevelBreadCrumb'\n\nconst IconDropdown = ({\n  id,\n  variant = 'button-dropdown',\n  width = 'auto',\n  optionList = [],\n  iconButtonDetails = [],\n  onChange = () => {},\n  primary,\n  intent,\n  value,\n  placeholder,\n  showDownArrow,\n  isSingleClickOption = false,\n  disabled = false,\n  children,\n  optionComponent,\n  menuIsOpen,\n  customStyle,\n  tooltipMessage,\n  tooltipProps,\n  showOptionIcon,\n  dropdownPosition,\n  onSetAsFavourite,\n  defaultOpen,\n  isMultiRegionStyled = false,\n  handleClick = () => {},\n}: ISelectProps) => {\n  const [selectedOption, setSelectedOption] = useState<ValueType<\n    OptionType\n  > | null>(\n    optionList.find(\n      ({ value: optionValue }: { value: string }) => optionValue === value\n    ) || null\n  )\n  const [isMenuOpen, setIsMenuOpen] = useState(menuIsOpen)\n\n  /* In the case of Date picker , I externally pass selected value which will be string. \n  As react-select wants {label, value} format.\n  Selection is done below */\n\n  useEffect(() => {\n    setIsMenuOpen(menuIsOpen)\n  }, [menuIsOpen])\n  useEffect(() => {\n    const optionSelected = optionList.find(\n      ({ value: optionValue }: { value: string }) => optionValue === value\n    )\n    setSelectedOption(optionSelected)\n  }, [value])\n\n  const theme = useContext(ThemeContext)\n  const defaultProps = {\n    id,\n    primary,\n    intent,\n    iconButtonDetails,\n    options: optionList,\n    value: selectedOption,\n    variant,\n    width,\n    theme,\n    placeholder,\n    showDownArrow,\n    children,\n    customStyle,\n    menuIsOpen: isMenuOpen,\n    onChange: (input: ValueType<OptionType>) => handleDeviceChange(input),\n    optionComponent,\n    tooltipMessage,\n    disabled,\n    tooltipProps,\n    showOptionIcon,\n    dropdownPosition,\n    handleClick,\n    defaultOpen,\n    isMultiRegionStyled\n  }\n\n  const selectComponent = {\n    'button-dropdown': <ButtonDropdown defaultProps={defaultProps} />,\n    'multilevel-button-dropdown': (\n      <MultiLevelButtonDropdown defaultProps={defaultProps} />\n    ),\n    'pagination-size': <PaginationDropdown defaultProps={defaultProps} />,\n    'column-filter': <ColumnOptionFilter defaultProps={defaultProps} />,\n    'bread-crumb': (\n      <BreadCrumb\n        defaultProps={defaultProps}\n        handleOutsideChange={onChange}\n        onSetAsFavourite={onSetAsFavourite}\n      />\n    ),\n    'date-picker': <DatepickerDropdown defaultProps={defaultProps} />,\n    'default-dropdown': <DropdownUniversal defaultProps={defaultProps} />,\n    'text-dropdown': <TextDropdown defaultProps={defaultProps} />,\n    'multilevel-breadcrumb' : \n      <MultiLevelBreadCrumb\n        defaultProps={defaultProps}\n        handleOutsideChange={onChange}\n      />\n  }\n\n  const handleDeviceChange = (input: ValueType<OptionType>) => {\n    const option = input as OptionType\n    const previousOption = selectedOption as OptionType\n    if (option?.value !== previousOption?.value) {\n      setSelectedOption(input)\n      option ? onChange(option?.value as string) : onChange(undefined)\n    } else if (isSingleClickOption) {\n      option && onChange(option?.value)\n    }\n  }\n  return (\n    <IconDropdownDropdownStyled>\n      {selectComponent[variant] || 'No varaint'}\n    </IconDropdownDropdownStyled>\n  )\n}\n\nexport default IconDropdown\n"]},"metadata":{},"sourceType":"module"}