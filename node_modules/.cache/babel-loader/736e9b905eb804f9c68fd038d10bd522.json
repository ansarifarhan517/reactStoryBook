{"ast":null,"code":"import _toConsumableArray from \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/organisms/AdvancedFilter/index.tsx\";\n\nimport React, { useEffect, useState, useRef } from 'react';\nimport { AdvancedFilterWrapperStyled, AdvancedFilterStyled } from './styled';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport Body from './components/Body'; // import Position from '../../molecules/Position'\n\nimport PrepColumnsData from './DataCleansing/PrepColumnsData';\nimport PrepOperationsTypeArray from './DataCleansing/PrepOperationsTypeArray';\nimport PrepFilterData from './DataCleansing/PrepFilterData';\nimport Draggable from './components/Draggable';\nimport { PrepareFilterData, validateFilterData // validateFiltersData,\n, validateFilterConditions, validateFullSortCriteria, validateHalfSortCriteria } from './components/Utils';\nimport { useToast } from '../../molecules/Toast'; // handle FavouriteSections\n\nvar addList = function addList(favouriteSections) {\n  if (favouriteSections && (favouriteSections === null || favouriteSections === void 0 ? void 0 : favouriteSections.length) !== 0) {\n    if (favouriteSections === null || favouriteSections === void 0 ? void 0 : favouriteSections.find(function (e) {\n      return e === 'live';\n    })) {\n      return ['list', 'live'];\n    }\n  }\n\n  return ['list'];\n};\n\nvar removeList = function removeList(favouriteSections) {\n  if ((favouriteSections === null || favouriteSections === void 0 ? void 0 : favouriteSections.length) !== 0) {\n    if (favouriteSections.find(function (e) {\n      return e === 'live';\n    })) {\n      return ['live'];\n    } else {\n      return [];\n    }\n  } else {\n    return [];\n  }\n};\n\nvar AdvancedFilter = function AdvancedFilter(_ref) {\n  var children = _ref.children,\n      chipsArray = _ref.chipsArray,\n      dropDownOptions = _ref.dropDownOptions,\n      onDelete = _ref.onDelete,\n      onApply = _ref.onApply,\n      onRemove = _ref.onRemove,\n      onSave = _ref.onSave,\n      onUpdate = _ref.onUpdate,\n      onFavourite = _ref.onFavourite,\n      backButton = _ref.backButton,\n      backButtonCallback = _ref.backButtonCallback,\n      ThirdElement = _ref.ThirdElement,\n      ThirdElementFormatter = _ref.ThirdElementFormatter,\n      fieldOperation = _ref.fieldOperation,\n      style = _ref.style,\n      appliedFilterId = _ref.appliedFilterId,\n      _ref$showOpen = _ref.showOpen,\n      showOpen = _ref$showOpen === void 0 ? false : _ref$showOpen,\n      onAddFilter = _ref.onAddFilter,\n      onAddCondition = _ref.onAddCondition,\n      id = _ref.id,\n      rest = _objectWithoutProperties(_ref, [\"children\", \"chipsArray\", \"dropDownOptions\", \"onDelete\", \"onApply\", \"onRemove\", \"onSave\", \"onUpdate\", \"onFavourite\", \"backButton\", \"backButtonCallback\", \"ThirdElement\", \"ThirdElementFormatter\", \"fieldOperation\", \"style\", \"appliedFilterId\", \"showOpen\", \"onAddFilter\", \"onAddCondition\", \"id\"]);\n\n  var node = useRef(null);\n\n  var _useState = useState(PrepFilterData(chipsArray, appliedFilterId)),\n      _useState2 = _slicedToArray(_useState, 2),\n      chips = _useState2[0],\n      setChips = _useState2[1];\n\n  var _useState3 = useState(showOpen),\n      _useState4 = _slicedToArray(_useState3, 2),\n      open = _useState4[0],\n      setOpen = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      showCard = _useState6[0],\n      _setShowCard = _useState6[1];\n\n  var _useState7 = useState(undefined),\n      _useState8 = _slicedToArray(_useState7, 2),\n      clearCard = _useState8[0],\n      setClearCard = _useState8[1];\n\n  var _useState9 = useState(),\n      _useState10 = _slicedToArray(_useState9, 2),\n      currentCard = _useState10[0],\n      setCurrentCard = _useState10[1];\n\n  var _useState11 = useState(false),\n      _useState12 = _slicedToArray(_useState11, 2),\n      showRemoveFilter = _useState12[0],\n      setShowRemoveFilter = _useState12[1];\n\n  var _useState13 = useState(PrepOperationsTypeArray(fieldOperation)),\n      _useState14 = _slicedToArray(_useState13, 2),\n      operationTypes = _useState14[0],\n      setOperationTypes = _useState14[1];\n\n  var _useState15 = useState({\n    sortDropdown: [],\n    columnStructure: [],\n    HSetColumnStructure: {}\n  }),\n      _useState16 = _slicedToArray(_useState15, 2),\n      columnsData = _useState16[0],\n      setColumnsData = _useState16[1];\n\n  var handleOutsideClick = function handleOutsideClick(e) {\n    var n = node.current;\n    if (n.contains(e.target)) return;\n    setOpen(false);\n  };\n\n  React.useEffect(function () {\n    setOpen(showOpen);\n  }, [showOpen]);\n  useEffect(function () {\n    setShowRemoveFilter(!!appliedFilterId);\n  }, [appliedFilterId]);\n  React.useEffect(function () {\n    document.addEventListener('mousedown', handleOutsideClick);\n    return function () {\n      document.removeEventListener('mousedown', handleOutsideClick);\n    };\n  }, []);\n  /*********************************************************/\n  // error messages toast\n\n  /*********************************************************/\n\n  var toast = useToast();\n\n  var showToast = function showToast(message) {\n    return toast.add(message, 'warning', false);\n  };\n\n  var handleAddFilter = function handleAddFilter() {\n    _setShowCard(true);\n\n    setClearCard(new Date().getTime()); // setShowRemoveFilter(false)\n\n    onAddFilter && onAddFilter();\n  };\n\n  var openCard = function openCard(IFilter) {\n    var current = chipsArray.find(function (c) {\n      return IFilter.id === c.id;\n    });\n    IFilter && setCurrentCard(current); // setShowRemoveFilter(!!IFilter?.filterApplied)\n  };\n\n  var updateData = function updateData(object) {\n    setCurrentCard(_objectSpread({}, object));\n  }; // handle apply\n\n\n  var handleApply = function handleApply() {\n    var _currentCard$filterDa, _currentCard$filterDa2, _currentCard$filterDa3, _currentCard$filterDa4, _currentCard$filterDa5, _currentCard$filterDa6, _currentCard$filterDa7, _columnsData$HSetColu, _currentCard$filterDa8, _currentCard$filterDa9, _currentCard$filterDa10, _currentCard$filterDa11;\n\n    var filters = PrepareFilterData(currentCard.filterConditions, columnsData.HSetColumnStructure, 'apply', chipsArray);\n    var columnName = typeof (currentCard === null || currentCard === void 0 ? void 0 : (_currentCard$filterDa = currentCard.filterData) === null || _currentCard$filterDa === void 0 ? void 0 : (_currentCard$filterDa2 = _currentCard$filterDa.sortable) === null || _currentCard$filterDa2 === void 0 ? void 0 : _currentCard$filterDa2.columnName) === 'object' ? currentCard === null || currentCard === void 0 ? void 0 : (_currentCard$filterDa3 = currentCard.filterData) === null || _currentCard$filterDa3 === void 0 ? void 0 : (_currentCard$filterDa4 = _currentCard$filterDa3.sortable) === null || _currentCard$filterDa4 === void 0 ? void 0 : _currentCard$filterDa4.columnName.id : currentCard === null || currentCard === void 0 ? void 0 : (_currentCard$filterDa5 = currentCard.filterData) === null || _currentCard$filterDa5 === void 0 ? void 0 : (_currentCard$filterDa6 = _currentCard$filterDa5.sortable) === null || _currentCard$filterDa6 === void 0 ? void 0 : _currentCard$filterDa6.columnName;\n    var temp = {\n      id: currentCard.filterData.id,\n      filterName: currentCard.filterData.filterName || ' ',\n      filters: filters,\n      isFavourite: currentCard.filterData.isFavourite,\n      favouriteSections: currentCard.filterData.favouriteSections,\n      operationLogic: currentCard === null || currentCard === void 0 ? void 0 : (_currentCard$filterDa7 = currentCard.filterData) === null || _currentCard$filterDa7 === void 0 ? void 0 : _currentCard$filterDa7.filterMasterCondition,\n      sortCriteria: [{\n        fieldId: columnName,\n        fieldLabelKey: (_columnsData$HSetColu = columnsData.HSetColumnStructure[columnName]) === null || _columnsData$HSetColu === void 0 ? void 0 : _columnsData$HSetColu.label,\n        operationLabelKey: currentCard === null || currentCard === void 0 ? void 0 : (_currentCard$filterDa8 = currentCard.filterData) === null || _currentCard$filterDa8 === void 0 ? void 0 : (_currentCard$filterDa9 = _currentCard$filterDa8.sortable) === null || _currentCard$filterDa9 === void 0 ? void 0 : _currentCard$filterDa9.sortOrder.value,\n        operationSymbol: currentCard === null || currentCard === void 0 ? void 0 : (_currentCard$filterDa10 = currentCard.filterData) === null || _currentCard$filterDa10 === void 0 ? void 0 : (_currentCard$filterDa11 = _currentCard$filterDa10.sortable) === null || _currentCard$filterDa11 === void 0 ? void 0 : _currentCard$filterDa11.sortOrder.value\n      }]\n    };\n    var sortFlag = validateFullSortCriteria(temp === null || temp === void 0 ? void 0 : temp.sortCriteria[0]);\n\n    if (validateHalfSortCriteria(temp === null || temp === void 0 ? void 0 : temp.sortCriteria[0]) && !sortFlag) {\n      showToast('Incomplete Information');\n    } else {\n      !sortFlag && (temp === null || temp === void 0 ? true : delete temp.sortCriteria);\n      var _flag$message = {\n        flag: true,\n        message: ''\n      },\n          flag = _flag$message.flag,\n          message = _flag$message.message;\n\n      var _validateFilterCondit = validateFilterConditions(currentCard.filterConditions),\n          Cflag = _validateFilterCondit.flag,\n          Cmessage = _validateFilterCondit.message;\n\n      flag && (sortFlag || Cflag) && _setShowCard(false);\n      var onApplyfilters = {\n        id: temp === null || temp === void 0 ? void 0 : temp.id,\n        filterName: (temp === null || temp === void 0 ? void 0 : temp.filterName) || ' ',\n        filters: temp === null || temp === void 0 ? void 0 : temp.filters,\n        operationLogic: temp === null || temp === void 0 ? void 0 : temp.operationLogic,\n        sortCriteria: (temp === null || temp === void 0 ? void 0 : temp.sortCriteria) || []\n      };\n      return flag ? sortFlag || Cflag ? onApply && currentCard && onApply(_objectSpread({}, onApplyfilters)) : showToast(Cmessage) : showToast(sortFlag || Cflag ? message : Cmessage);\n    }\n  }; // handle Save\n\n\n  var handleUpdateAndSave = function handleUpdateAndSave(object) {\n    var _object$filterConditi, _object$filterData, _object$filterData$so, _object$filterData2, _object$filterData2$s, _object$filterData3, _object$filterData3$s, _object$filterData4, _columnsData$HSetColu2, _object$filterData5, _object$filterData5$s, _object$filterData6, _object$filterData6$s;\n\n    var filters = PrepareFilterData(object.filterConditions, columnsData.HSetColumnStructure, 'save');\n    var AdvancedRefIds = [];\n    (_object$filterConditi = object.filterConditions) === null || _object$filterConditi === void 0 ? void 0 : _object$filterConditi.forEach(function (fc) {\n      var _fc$thirdElement;\n\n      if ((fc === null || fc === void 0 ? void 0 : (_fc$thirdElement = fc.thirdElement) === null || _fc$thirdElement === void 0 ? void 0 : _fc$thirdElement.type) === 'savedFilter') {\n        AdvancedRefIds.push(fc.thirdElement.value.id);\n      }\n    });\n    var columnName = typeof (object === null || object === void 0 ? void 0 : (_object$filterData = object.filterData) === null || _object$filterData === void 0 ? void 0 : (_object$filterData$so = _object$filterData.sortable) === null || _object$filterData$so === void 0 ? void 0 : _object$filterData$so.columnName) === 'object' ? object === null || object === void 0 ? void 0 : (_object$filterData2 = object.filterData) === null || _object$filterData2 === void 0 ? void 0 : (_object$filterData2$s = _object$filterData2.sortable) === null || _object$filterData2$s === void 0 ? void 0 : _object$filterData2$s.columnName.id : object === null || object === void 0 ? void 0 : (_object$filterData3 = object.filterData) === null || _object$filterData3 === void 0 ? void 0 : (_object$filterData3$s = _object$filterData3.sortable) === null || _object$filterData3$s === void 0 ? void 0 : _object$filterData3$s.columnName;\n    var temp = {\n      id: object.filterData.id,\n      filterName: object.filterData.filterName || ' ',\n      filters: filters,\n      isFavourite: object.filterData.isFavourite,\n      favouriteSections: object.filterData.favouriteSections,\n      operationLogic: object === null || object === void 0 ? void 0 : (_object$filterData4 = object.filterData) === null || _object$filterData4 === void 0 ? void 0 : _object$filterData4.filterMasterCondition,\n      sortCriteria: [{\n        fieldId: columnName,\n        fieldLabelKey: (_columnsData$HSetColu2 = columnsData.HSetColumnStructure[columnName]) === null || _columnsData$HSetColu2 === void 0 ? void 0 : _columnsData$HSetColu2.label,\n        operationLabelKey: object === null || object === void 0 ? void 0 : (_object$filterData5 = object.filterData) === null || _object$filterData5 === void 0 ? void 0 : (_object$filterData5$s = _object$filterData5.sortable) === null || _object$filterData5$s === void 0 ? void 0 : _object$filterData5$s.sortOrder.value,\n        operationSymbol: object === null || object === void 0 ? void 0 : (_object$filterData6 = object.filterData) === null || _object$filterData6 === void 0 ? void 0 : (_object$filterData6$s = _object$filterData6.sortable) === null || _object$filterData6$s === void 0 ? void 0 : _object$filterData6$s.sortOrder.value\n      }],\n      advanceFilterTagReferenceIds: [].concat(AdvancedRefIds)\n    };\n    var sortFlag = validateFullSortCriteria(temp === null || temp === void 0 ? void 0 : temp.sortCriteria[0]);\n\n    if (validateHalfSortCriteria(temp === null || temp === void 0 ? void 0 : temp.sortCriteria[0]) && !sortFlag) {\n      showToast('Incomplete Information');\n    } else {\n      !sortFlag && (temp === null || temp === void 0 ? true : delete temp.sortCriteria);\n\n      var _validateFilterData = validateFilterData(chipsArray, object.filterData),\n          flag = _validateFilterData.flag,\n          message = _validateFilterData.message;\n\n      var _validateFilterCondit2 = validateFilterConditions(object.filterConditions),\n          Cflag = _validateFilterCondit2.flag,\n          Cmessage = _validateFilterCondit2.message;\n\n      flag && (sortFlag || Cflag) && _setShowCard(false);\n      return flag ? sortFlag || Cflag ? object.filterData.id && object.filterData.id !== 'draft' ? onUpdate && onUpdate(_objectSpread({}, temp)) : onSave && onSave(_objectSpread({}, temp)) : showToast(Cmessage) : showToast(sortFlag || Cflag ? message : Cmessage);\n    }\n  }; // handle delete\n\n\n  var handleDelete = function handleDelete(id) {\n    onDelete && onDelete(id);\n\n    _setShowCard(false);\n  }; // chips array\n\n\n  useEffect(function () {\n    setChips(_toConsumableArray(PrepFilterData(chipsArray, appliedFilterId)));\n  }, [chipsArray]); // field Operations\n\n  useEffect(function () {\n    setOperationTypes(PrepOperationsTypeArray(fieldOperation));\n  }, [fieldOperation]); // dropdown options\n\n  useEffect(function () {\n    var _PrepColumnsData = PrepColumnsData(dropDownOptions),\n        _PrepColumnsData2 = _slicedToArray(_PrepColumnsData, 3),\n        sortDropdown = _PrepColumnsData2[0],\n        columnStructure = _PrepColumnsData2[1],\n        HSetColumnStructure = _PrepColumnsData2[2];\n\n    setColumnsData({\n      sortDropdown: sortDropdown,\n      columnStructure: columnStructure,\n      HSetColumnStructure: HSetColumnStructure\n    });\n  }, [dropDownOptions]); // draggable\n\n  Draggable('advancedFilterDraggable', 'advancedFilterHeader'); // handle favourites\n\n  var handleFavourites = function handleFavourites(object) {\n    // handle prepping data and all\n    var temp = chipsArray.find(function (c) {\n      var _object$filterData7;\n\n      return c.id === (object === null || object === void 0 ? void 0 : (_object$filterData7 = object.filterData) === null || _object$filterData7 === void 0 ? void 0 : _object$filterData7.id);\n    });\n\n    if (temp) {\n      var _object$filterData8;\n\n      var finalObj = (object === null || object === void 0 ? void 0 : (_object$filterData8 = object.filterData) === null || _object$filterData8 === void 0 ? void 0 : _object$filterData8.isFavourite) ? _objectSpread(_objectSpread({}, temp), {}, {\n        isFavourite: false,\n        favouriteSections: removeList(temp.favouriteSections)\n      }) : _objectSpread(_objectSpread({}, temp), {}, {\n        isFavourite: true,\n        favouriteSections: temp.favouriteSections ? addList(temp.favouriteSections) : ['list']\n      });\n      onFavourite && onFavourite(_objectSpread({}, finalObj));\n    } else {\n      showToast('Something went wrong. Please refresh');\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(AdvancedFilterStyled, {\n    ref: node,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 5\n    }\n  }, children({\n    open: open,\n    setOpen: setOpen,\n    chips: chips\n  }), open && /*#__PURE__*/React.createElement(AdvancedFilterWrapperStyled, {\n    type: \"relative\",\n    display: \"inline-block\",\n    style: style,\n    id: \"advancedFilterDraggable\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    closeAdvancedFilter: function closeAdvancedFilter() {\n      setClearCard(new Date().getTime());\n      setOpen(false);\n\n      _setShowCard(false);\n    },\n    backButton: backButton,\n    backButtonCallback: backButtonCallback,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 341,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Body, Object.assign({\n    showCard: showCard,\n    setShowCard: function setShowCard(status) {\n      return status !== undefined && _setShowCard(status);\n    },\n    chipsArray: chips,\n    showCardId: appliedFilterId,\n    clearCard: clearCard,\n    handleDelete: handleDelete,\n    columnsData: columnsData.columnStructure,\n    HSetColumnData: columnsData.HSetColumnStructure,\n    onFavourite: onFavourite && handleFavourites,\n    handleUpdateAndSave: handleUpdateAndSave,\n    ThirdElement: ThirdElement,\n    openCard: openCard,\n    updateData: updateData,\n    sortDropdown: columnsData.sortDropdown,\n    fieldOperation: operationTypes,\n    onAddCondition: onAddCondition,\n    ThirdElementFormatter: ThirdElementFormatter\n  }, rest, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Footer, {\n    showApply: showCard,\n    showRemove: showRemoveFilter,\n    showAddFilter: !showCard,\n    addFilter: handleAddFilter,\n    removeFilter: function removeFilter() {\n      var _currentCard$filterDa12;\n\n      onRemove && currentCard && onRemove(currentCard === null || currentCard === void 0 ? void 0 : (_currentCard$filterDa12 = currentCard.filterData) === null || _currentCard$filterDa12 === void 0 ? void 0 : _currentCard$filterDa12.id);\n    },\n    applyFilter: handleApply,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 373,\n      columnNumber: 11\n    }\n  })));\n};\n\nexport default AdvancedFilter;","map":{"version":3,"sources":["/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/organisms/AdvancedFilter/index.tsx"],"names":["React","useEffect","useState","useRef","AdvancedFilterWrapperStyled","AdvancedFilterStyled","Header","Footer","Body","PrepColumnsData","PrepOperationsTypeArray","PrepFilterData","Draggable","PrepareFilterData","validateFilterData","validateFilterConditions","validateFullSortCriteria","validateHalfSortCriteria","useToast","addList","favouriteSections","length","find","e","removeList","AdvancedFilter","children","chipsArray","dropDownOptions","onDelete","onApply","onRemove","onSave","onUpdate","onFavourite","backButton","backButtonCallback","ThirdElement","ThirdElementFormatter","fieldOperation","style","appliedFilterId","showOpen","onAddFilter","onAddCondition","id","rest","node","chips","setChips","open","setOpen","showCard","setShowCard","undefined","clearCard","setClearCard","currentCard","setCurrentCard","showRemoveFilter","setShowRemoveFilter","operationTypes","setOperationTypes","sortDropdown","columnStructure","HSetColumnStructure","columnsData","setColumnsData","handleOutsideClick","n","current","contains","target","document","addEventListener","removeEventListener","toast","showToast","message","add","handleAddFilter","Date","getTime","openCard","IFilter","c","updateData","object","handleApply","filters","filterConditions","columnName","filterData","sortable","temp","filterName","isFavourite","operationLogic","filterMasterCondition","sortCriteria","fieldId","fieldLabelKey","label","operationLabelKey","sortOrder","value","operationSymbol","sortFlag","flag","Cflag","Cmessage","onApplyfilters","handleUpdateAndSave","AdvancedRefIds","forEach","fc","thirdElement","type","push","advanceFilterTagReferenceIds","handleDelete","handleFavourites","finalObj","status"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef } from 'react'\nimport { AdvancedFilterWrapperStyled, AdvancedFilterStyled } from './styled'\nimport {\n  IAdvancedFilter,\n  IFilter,\n  // IFilterData,\n  // IFilterData,\n  // IExposeFilters,\n  IRawExposedData\n} from './interfaces'\nimport Header from './components/Header'\nimport Footer from './components/Footer'\nimport Body from './components/Body'\n// import Position from '../../molecules/Position'\nimport PrepColumnsData from './DataCleansing/PrepColumnsData'\nimport PrepOperationsTypeArray from './DataCleansing/PrepOperationsTypeArray'\nimport PrepFilterData from './DataCleansing/PrepFilterData'\nimport Draggable from './components/Draggable'\nimport {\n  PrepareFilterData,\n  validateFilterData,\n  // validateFiltersData,\n  validateFilterConditions,\n  validateFullSortCriteria,\n  validateHalfSortCriteria\n} from './components/Utils'\nimport { useToast } from '../../molecules/Toast'\n\n// handle FavouriteSections\n\nconst addList = (favouriteSections: string[]) => {\n  if (favouriteSections && favouriteSections?.length !== 0) {\n    if (favouriteSections?.find((e) => e === 'live')) {\n      return ['list', 'live']\n    }\n  }\n  return ['list']\n}\n\nconst removeList = (favouriteSections: string[]) => {\n  if (favouriteSections?.length !== 0) {\n    if (favouriteSections.find((e) => e === 'live')) {\n      return ['live']\n    } else {\n      return []\n    }\n  } else {\n    return []\n  }\n}\n\nconst AdvancedFilter = ({\n  children,\n  chipsArray,\n  dropDownOptions,\n  onDelete,\n  onApply,\n  onRemove,\n  onSave,\n  onUpdate,\n  onFavourite,\n  backButton,\n  backButtonCallback,\n  ThirdElement,\n  ThirdElementFormatter,\n  fieldOperation,\n  style,\n  appliedFilterId,\n  showOpen = false,\n  onAddFilter,\n  onAddCondition,\n  id,\n  ...rest\n}: IAdvancedFilter) => {\n  const node = useRef(null)\n  const [chips, setChips] = useState(\n    PrepFilterData(chipsArray, appliedFilterId)\n  )\n  const [open, setOpen] = useState(showOpen)\n  const [showCard, setShowCard] = useState(false)\n  const [clearCard, setClearCard] = useState<number | undefined>(undefined)\n  const [currentCard, setCurrentCard] = useState<any>()\n  const [showRemoveFilter, setShowRemoveFilter] = useState(false)\n  const [operationTypes, setOperationTypes] = useState(\n    PrepOperationsTypeArray(fieldOperation)\n  )\n  const [columnsData, setColumnsData] = useState({\n    sortDropdown: [],\n    columnStructure: [],\n    HSetColumnStructure: {}\n  })\n\n  const handleOutsideClick = (e: any) => {\n    const n = (node.current as unknown) as Node\n    if (n.contains(e.target)) return\n    setOpen(false)\n  }\n\n  React.useEffect(() => {\n    setOpen(showOpen)\n  }, [showOpen])\n\n  useEffect(() => {\n    setShowRemoveFilter(!!appliedFilterId)\n  }, [appliedFilterId])\n\n  React.useEffect(() => {\n    document.addEventListener('mousedown', handleOutsideClick)\n\n    return () => {\n      document.removeEventListener('mousedown', handleOutsideClick)\n    }\n  }, [])\n  /*********************************************************/\n  // error messages toast\n  /*********************************************************/\n  const toast = useToast()\n  const showToast = (message: string) => toast.add(message, 'warning', false)\n\n  const handleAddFilter = () => {\n    setShowCard(true)\n    setClearCard(new Date().getTime())\n    // setShowRemoveFilter(false)\n    onAddFilter && onAddFilter()\n  }\n\n  const openCard = (IFilter: IFilter) => {\n    const current = chipsArray.find((c) => IFilter.id === c.id)\n    IFilter && setCurrentCard(current)\n    // setShowRemoveFilter(!!IFilter?.filterApplied)\n  }\n\n  const updateData = (object: IRawExposedData) => {\n    setCurrentCard({ ...object })\n  }\n\n  // handle apply\n  const handleApply = () => {\n    const filters = PrepareFilterData(\n      currentCard.filterConditions,\n      columnsData.HSetColumnStructure,\n      'apply',\n      chipsArray\n    )\n\n    const columnName =\n      typeof currentCard?.filterData?.sortable?.columnName === 'object'\n        ? currentCard?.filterData?.sortable?.columnName.id\n        : currentCard?.filterData?.sortable?.columnName\n\n    const temp: any = {\n      id: currentCard.filterData.id,\n      filterName: currentCard.filterData.filterName || ' ',\n      filters: filters,\n      isFavourite: currentCard.filterData.isFavourite,\n      favouriteSections: currentCard.filterData.favouriteSections,\n      operationLogic: currentCard?.filterData?.filterMasterCondition,\n      sortCriteria: [\n        {\n          fieldId: columnName,\n          fieldLabelKey: columnsData.HSetColumnStructure[columnName]?.label,\n          operationLabelKey: currentCard?.filterData?.sortable?.sortOrder.value,\n          operationSymbol: currentCard?.filterData?.sortable?.sortOrder.value\n        }\n      ]\n    }\n\n    const sortFlag = validateFullSortCriteria(temp?.sortCriteria[0])\n\n    if (validateHalfSortCriteria(temp?.sortCriteria[0]) && !sortFlag) {\n      showToast('Incomplete Information')\n    } else {\n      !sortFlag && delete temp?.sortCriteria\n\n      const { flag, message } = { flag: true, message: '' }\n      const { flag: Cflag, message: Cmessage } = validateFilterConditions(\n        currentCard.filterConditions\n      )\n\n      flag && (sortFlag || Cflag) && setShowCard(false)\n\n      const onApplyfilters = {\n        id: temp?.id,\n        filterName: temp?.filterName || ' ',\n        filters: temp?.filters,\n        operationLogic: temp?.operationLogic,\n        sortCriteria: temp?.sortCriteria || []\n      }\n\n      return flag\n        ? sortFlag || Cflag\n          ? onApply && currentCard && onApply({ ...onApplyfilters })\n          : showToast(Cmessage)\n        : showToast(sortFlag || Cflag ? message : Cmessage)\n    }\n  }\n\n  // handle Save\n  const handleUpdateAndSave = (object: any) => {\n    const filters = PrepareFilterData(\n      object.filterConditions,\n      columnsData.HSetColumnStructure,\n      'save'\n    )\n    const AdvancedRefIds: string[] = []\n    object.filterConditions?.forEach((fc: any) => {\n      if (fc?.thirdElement?.type === 'savedFilter') {\n        AdvancedRefIds.push(fc.thirdElement.value.id)\n      }\n    })\n\n    const columnName =\n      typeof object?.filterData?.sortable?.columnName === 'object'\n        ? object?.filterData?.sortable?.columnName.id\n        : object?.filterData?.sortable?.columnName\n\n    const temp: any = {\n      id: object.filterData.id,\n      filterName: object.filterData.filterName || ' ',\n      filters: filters,\n      isFavourite: object.filterData.isFavourite,\n      favouriteSections: object.filterData.favouriteSections,\n      operationLogic: object?.filterData?.filterMasterCondition,\n      sortCriteria: [\n        {\n          fieldId: columnName,\n          fieldLabelKey: columnsData.HSetColumnStructure[columnName]?.label,\n          operationLabelKey: object?.filterData?.sortable?.sortOrder.value,\n          operationSymbol: object?.filterData?.sortable?.sortOrder.value\n        }\n      ],\n      advanceFilterTagReferenceIds: [...AdvancedRefIds]\n    }\n\n    const sortFlag = validateFullSortCriteria(temp?.sortCriteria[0])\n\n    if (validateHalfSortCriteria(temp?.sortCriteria[0]) && !sortFlag) {\n      showToast('Incomplete Information')\n    } else {\n      !sortFlag && delete temp?.sortCriteria\n\n      const { flag, message } = validateFilterData(\n        chipsArray,\n        object.filterData\n      )\n\n      const { flag: Cflag, message: Cmessage } = validateFilterConditions(\n        object.filterConditions\n      )\n\n      flag && (sortFlag || Cflag) && setShowCard(false)\n\n      return flag\n        ? sortFlag || Cflag\n          ? object.filterData.id && object.filterData.id !== 'draft'\n            ? onUpdate &&\n              onUpdate({\n                ...temp\n              })\n            : onSave && onSave({ ...temp })\n          : showToast(Cmessage)\n        : showToast(sortFlag || Cflag ? message : Cmessage)\n    }\n  }\n\n  // handle delete\n  const handleDelete = (id: string) => {\n    onDelete && onDelete(id)\n    setShowCard(false)\n  }\n\n  // chips array\n  useEffect(() => {\n    setChips([...PrepFilterData(chipsArray, appliedFilterId)])\n  }, [chipsArray])\n\n  // field Operations\n  useEffect(() => {\n    setOperationTypes(PrepOperationsTypeArray(fieldOperation))\n  }, [fieldOperation])\n\n  // dropdown options\n  useEffect(() => {\n    const [\n      sortDropdown,\n      columnStructure,\n      HSetColumnStructure\n    ]: any = PrepColumnsData(dropDownOptions)\n    setColumnsData({\n      sortDropdown: sortDropdown,\n      columnStructure: columnStructure,\n      HSetColumnStructure: HSetColumnStructure\n    })\n  }, [dropDownOptions])\n\n  // draggable\n  Draggable('advancedFilterDraggable', 'advancedFilterHeader')\n\n  // handle favourites\n  const handleFavourites = (object: IRawExposedData) => {\n    // handle prepping data and all\n\n    const temp: any = chipsArray.find((c) => {\n      return c.id === object?.filterData?.id\n    })\n    if (temp) {\n      const finalObj = object?.filterData?.isFavourite\n        ? {\n            ...temp,\n            isFavourite: false,\n            favouriteSections: removeList(temp.favouriteSections)\n          }\n        : {\n            ...temp,\n            isFavourite: true,\n            favouriteSections: temp.favouriteSections\n              ? addList(temp.favouriteSections)\n              : ['list']\n          }\n      onFavourite && onFavourite({ ...finalObj })\n    } else {\n      showToast('Something went wrong. Please refresh')\n    }\n  }\n\n  return (\n    <AdvancedFilterStyled ref={node}>\n      {children({\n        open,\n        setOpen,\n        chips,\n      })}\n\n      {open && (\n        <AdvancedFilterWrapperStyled\n          type='relative'\n          display='inline-block'\n          style={style}\n          id='advancedFilterDraggable'\n        >\n          <Header\n            closeAdvancedFilter={() => {\n              setClearCard(new Date().getTime())\n              setOpen(false)\n              setShowCard(false)\n            }}\n            backButton={backButton}\n            backButtonCallback={backButtonCallback}\n          />\n          <Body\n            showCard={showCard}\n            setShowCard={(status?: boolean) =>\n              status !== undefined && setShowCard(status)\n            }\n            chipsArray={chips}\n            showCardId={appliedFilterId}\n            clearCard={clearCard}\n            handleDelete={handleDelete}\n            columnsData={columnsData.columnStructure}\n            HSetColumnData={columnsData.HSetColumnStructure}\n            onFavourite={onFavourite && handleFavourites}\n            handleUpdateAndSave={handleUpdateAndSave}\n            ThirdElement={ThirdElement}\n            openCard={openCard}\n            updateData={updateData}\n            sortDropdown={columnsData.sortDropdown}\n            fieldOperation={operationTypes}\n            onAddCondition={onAddCondition}\n            ThirdElementFormatter={ThirdElementFormatter}\n            {...rest}\n          />\n\n          <Footer\n            showApply={showCard}\n            showRemove={showRemoveFilter}\n            showAddFilter={!showCard}\n            addFilter={handleAddFilter}\n            removeFilter={() => {\n              onRemove && currentCard && onRemove(currentCard?.filterData?.id)\n            }}\n            applyFilter={handleApply}\n          />\n        </AdvancedFilterWrapperStyled>\n      )}\n    </AdvancedFilterStyled>\n  )\n}\n\nexport default AdvancedFilter\n"]},"metadata":{},"sourceType":"module"}