{"ast":null,"code":"import _objectSpread from \"/Users/farhanansari/Code/ui-library/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/Users/farhanansari/Code/ui-library/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/farhanansari/Code/ui-library/src/components/atoms/Map/layers/LeafletCircleEditLayer.tsx\";\n\nimport LL from 'leaflet';\nimport React, { useContext, useEffect, useRef, useState } from 'react';\nimport { FeatureGroup, useLeaflet } from 'react-leaflet';\nimport { EditControl } from 'react-leaflet-draw';\nimport { GeocodingContext } from '..';\nimport { getCircleBounds } from '../helperMethods';\nimport { StyledPopUp } from '../StyledMap';\n\nvar LeafletCircleEditLayer = function LeafletCircleEditLayer(_ref) {\n  var _customFields$find;\n\n  var circle = _ref.circle,\n      editPopUpComponent = _ref.editPopUpComponent,\n      onChange = _ref.onChange,\n      setFeatureGroupProps = _ref.setFeatureGroupProps;\n  var featureGroupRef = React.useRef();\n  var layerRef = useRef({});\n  var renderer = LL.canvas({\n    padding: 0.5\n  }); // adding renderer if data entries more than 200\n\n  var radiusKey = circle === null || circle === void 0 ? void 0 : circle.radiusKey;\n  var styleKeys = circle === null || circle === void 0 ? void 0 : circle.styleKey; // circle style\n\n  var editLayer = circle === null || circle === void 0 ? void 0 : circle.editLayer;\n  var createPermission = (circle === null || circle === void 0 ? void 0 : circle.createPermission) || false;\n  var orinalCoordinatesKey = circle === null || circle === void 0 ? void 0 : circle.center;\n  var geocodingContext = useContext(GeocodingContext);\n\n  var _ref2 = geocodingContext === null || geocodingContext === void 0 ? void 0 : geocodingContext.geocoding,\n      shouldUpdateShape = _ref2.shouldUpdateShape,\n      customFields = _ref2.customFields,\n      position = _ref2.position;\n\n  var radius = customFields && customFields.length > 0 ? (_customFields$find = customFields.find(function (field) {\n    return field.name === \"radius\";\n  })) === null || _customFields$find === void 0 ? void 0 : _customFields$find.value : 0;\n\n  var _useState = useState(position),\n      _useState2 = _slicedToArray(_useState, 2),\n      center = _useState2[0],\n      setCenter = _useState2[1];\n\n  var _useState3 = useState(radius),\n      _useState4 = _slicedToArray(_useState3, 2),\n      cRadius = _useState4[0],\n      setCRadius = _useState4[1];\n\n  var _useLeaflet = useLeaflet(),\n      map = _useLeaflet.map;\n\n  useEffect(function () {\n    renderPloyLayer();\n  }, []);\n\n  var handleFitBoundsPosition = function handleFitBoundsPosition(radius, lat, lng) {\n    var _Object$keys, _layerRef$current$edi;\n\n    if (map && Object.keys(map).length > 0 && layerRef.current.editing._map && ((_Object$keys = Object.keys((_layerRef$current$edi = layerRef.current.editing) === null || _layerRef$current$edi === void 0 ? void 0 : _layerRef$current$edi._map)) === null || _Object$keys === void 0 ? void 0 : _Object$keys.length) > 0) {\n      var circleBounds = layerRef.current.getBounds();\n      var southWest = circleBounds.getSouthWest();\n      var northEast = circleBounds.getNorthEast();\n      var paddedBounds = LL.latLngBounds([southWest.lat, southWest.lng], [northEast.lat, northEast.lng]);\n      var bounds = getCircleBounds(radius, lat, lng);\n      var zoom = map.getBoundsZoom(bounds);\n      map === null || map === void 0 ? void 0 : map.setView(paddedBounds.getCenter(), zoom, {\n        animate: true\n      });\n    }\n  };\n\n  useEffect(function () {\n    var _Object$keys2;\n\n    if (shouldUpdateShape && layerRef.current && ((_Object$keys2 = Object.keys(layerRef.current)) === null || _Object$keys2 === void 0 ? void 0 : _Object$keys2.length) > 0 && ((center === null || center === void 0 ? void 0 : center[0]) !== (position === null || position === void 0 ? void 0 : position[0]) || (center === null || center === void 0 ? void 0 : center[1]) !== (position === null || position === void 0 ? void 0 : position[1]))) {\n      var _layerRef$current;\n\n      (_layerRef$current = layerRef.current) === null || _layerRef$current === void 0 ? void 0 : _layerRef$current.setLatLng(position);\n      onChange({\n        center: position,\n        originalCenter: center,\n        isChanged: true,\n        radius: '',\n        originalRadius: radius\n      });\n      handleFitBoundsPosition(radius, position[0], position[1]);\n      handleRelocateMarker(layerRef.current);\n      setCenter(position);\n    }\n  }, [position]);\n\n  var handleFitBoundsRadius = function handleFitBoundsRadius(radius, lat, lng) {\n    if (map && Object.keys(map).length > 0) {\n      var bounds = getCircleBounds(radius, lat, lng);\n      map === null || map === void 0 ? void 0 : map.fitBounds(bounds, {\n        padding: LL.point(100, 100)\n      });\n    }\n  };\n\n  var handleValidRadius = function handleValidRadius(radius) {\n    var _layerRef$current2;\n\n    (_layerRef$current2 = layerRef.current) === null || _layerRef$current2 === void 0 ? void 0 : _layerRef$current2.setRadius(radius);\n    onChange({\n      center: [],\n      originalCenter: position,\n      isChanged: false,\n      radius: radius,\n      originalRadius: cRadius\n    });\n    handleFitBoundsRadius(radius, position[0], position[1]);\n    handleRelocateMarker(layerRef.current);\n    setCRadius(radius);\n  };\n\n  var handleInvalidRadius = function handleInvalidRadius(leafletElement) {\n    onChange({\n      center: [],\n      originalCenter: position,\n      isChanged: false,\n      radius: 0,\n      originalRadius: 0\n    });\n    leafletElement.clearLayers();\n    setCRadius(0);\n  };\n\n  useEffect(function () {\n    var _Object$keys3, _Object$keys4;\n\n    if (!shouldUpdateShape || ((_Object$keys3 = Object.keys(featureGroupRef === null || featureGroupRef === void 0 ? void 0 : featureGroupRef.current)) === null || _Object$keys3 === void 0 ? void 0 : _Object$keys3.length) === 0) {\n      return;\n    }\n\n    var _featureGroupRef$curr = featureGroupRef === null || featureGroupRef === void 0 ? void 0 : featureGroupRef.current,\n        leafletElement = _featureGroupRef$curr.leafletElement;\n\n    var layers = leafletElement.getLayers();\n\n    if (((_Object$keys4 = Object.keys(layers)) === null || _Object$keys4 === void 0 ? void 0 : _Object$keys4.length) > 0) {\n      radius > 0 ? handleValidRadius(radius) : handleInvalidRadius(leafletElement);\n    } else if (radius) {\n      var _circle$editing;\n\n      var _circle = LL.circle(position, {\n        interactive: true,\n        lineJoin: 'round',\n        lineCap: 'round',\n        fill: true,\n        stroke: true,\n        fillColor: '#5698d3',\n        radius: parseFloat(radius.toFixed(2))\n      });\n\n      _circle.originalCenter = position;\n      _circle.originalRadius = parseFloat(radius.toFixed(2));\n      _circle === null || _circle === void 0 ? void 0 : (_circle$editing = _circle.editing) === null || _circle$editing === void 0 ? void 0 : _circle$editing.enable();\n      leafletElement.addLayer(_circle);\n      layerRef.current = _circle;\n      onChange({\n        center: [],\n        originalCenter: position,\n        isChanged: false,\n        radius: \"\",\n        originalRadius: radius\n      });\n      handleFitBoundsRadius(radius, position[0], position[1]);\n    }\n  }, [radius]);\n\n  var handleRelocateMarker = function handleRelocateMarker(layer) {\n    if (layer && Object.keys(layer).length > 0) {\n      var _Object$keys5;\n\n      var editing = layer.editing;\n\n      if ((editing === null || editing === void 0 ? void 0 : editing._map) && ((_Object$keys5 = Object.keys(editing === null || editing === void 0 ? void 0 : editing._map)) === null || _Object$keys5 === void 0 ? void 0 : _Object$keys5.length) > 0) {\n        var _editing$_markerGroup;\n\n        editing === null || editing === void 0 ? void 0 : (_editing$_markerGroup = editing._markerGroup) === null || _editing$_markerGroup === void 0 ? void 0 : _editing$_markerGroup.clearLayers(); // Create center marker\n\n        editing._createMoveMarker(); // Create edge marker\n\n\n        editing._createResizeMarker();\n      }\n    }\n  };\n\n  var renderPloyLayer = function renderPloyLayer() {\n    // populate the leaflet FeatureGroup with the geoJson layers\n    if (featureGroupRef === null || featureGroupRef === void 0 ? void 0 : featureGroupRef.current) {\n      // eslint-disable-next-line\n      var leafletFG = featureGroupRef === null || featureGroupRef === void 0 ? void 0 : featureGroupRef.current;\n      /* eslint-disable-line no-alert */\n\n      var leafletElement = leafletFG.leafletElement;\n      var geoJsonData = editLayer === null || editLayer === void 0 ? void 0 : editLayer.data; // suppose geoJsonData [{bhiwandi},{Dadar}]\n\n      var coordinates = geoJsonData.map(function (option) {\n        var optionObj = orinalCoordinatesKey.map(function (key) {\n          return option[key];\n        }); // [lat,long]\n\n        return [optionObj];\n      }); // [[],[]]\n\n      var circleLayer = [];\n      coordinates === null || coordinates === void 0 ? void 0 : coordinates.forEach(function (option, index) {\n        var currentData = geoJsonData[index];\n        var parsedRadiusKey = radiusKey && parseFloat(currentData[radiusKey]);\n        var circle = LL.circle(option[index], {\n          interactive: true,\n          lineJoin: 'round',\n          lineCap: 'round',\n          fill: true,\n          stroke: true,\n          fillColor: '#5698d3',\n          radius: parsedRadiusKey ? parseFloat((parsedRadiusKey * 1000).toFixed(2)) : 200,\n          weight: (styleKeys === null || styleKeys === void 0 ? void 0 : styleKeys.weight) && currentData[styleKeys === null || styleKeys === void 0 ? void 0 : styleKeys.weight] ? currentData[styleKeys === null || styleKeys === void 0 ? void 0 : styleKeys.weight] : 3,\n          dashArray: (styleKeys === null || styleKeys === void 0 ? void 0 : styleKeys.dashArray) && currentData[styleKeys === null || styleKeys === void 0 ? void 0 : styleKeys.dashArray] ? currentData[styleKeys === null || styleKeys === void 0 ? void 0 : styleKeys.dashArray] : null,\n          fillOpacity: (styleKeys === null || styleKeys === void 0 ? void 0 : styleKeys.fillOpacity) && currentData[styleKeys === null || styleKeys === void 0 ? void 0 : styleKeys.fillOpacity] ? currentData[styleKeys === null || styleKeys === void 0 ? void 0 : styleKeys.fillOpacity] : 0.2,\n          renderer: geoJsonData.length > 200 ? renderer : undefined\n        });\n        circleLayer.push(circle);\n      });\n      circleLayer.forEach(function (layer, index) {\n        var _layer$editing;\n\n        var currentData = geoJsonData[index];\n        var parsedRadiusKey = radiusKey && parseFloat(currentData[radiusKey]);\n        var optionObj = orinalCoordinatesKey.map(function (key) {\n          return currentData[key];\n        }); // manually adding initial radius and center\n\n        layer.originalCenter = optionObj;\n        layer.originalRadius = parsedRadiusKey && parseFloat((parsedRadiusKey * 1000).toFixed(2)); // add circle layer to featuregroup\n\n        leafletElement.addLayer(layer); // make circle layer editable on load\n\n        layer === null || layer === void 0 ? void 0 : (_layer$editing = layer.editing) === null || _layer$editing === void 0 ? void 0 : _layer$editing.enable();\n      });\n      layerRef.current = circleLayer[0];\n      setFeatureGroupProps === null || setFeatureGroupProps === void 0 ? void 0 : setFeatureGroupProps(_objectSpread({}, featureGroupRef.current));\n    }\n  }; // when creating new layer, keep it editable and remove previous all layer, only one edited layer creation is permitted\n\n\n  var _onCreated = function _onCreated(e) {\n    var _layer$editing2, _drawnItems$latestCre;\n\n    var layer = e.layer;\n    layerRef.current = e.layer; // on creation make it editable\n\n    layer === null || layer === void 0 ? void 0 : (_layer$editing2 = layer.editing) === null || _layer$editing2 === void 0 ? void 0 : _layer$editing2.enable(); // all layer on featuregroup\n\n    var drawnItems = featureGroupRef.current.leafletElement._layers; // all editable layer with newly created layer on last index on array\n\n    var drawnItemsValue = Object.keys(drawnItems);\n    var latestCreatedItem = drawnItemsValue[drawnItemsValue.length - 1];\n\n    if (drawnItemsValue.length > 1) {\n      drawnItemsValue.forEach(function (layerid) {\n        // keep last, latest area,remove remaining, (we are allowing only one area to create)\n        if (latestCreatedItem === layerid) return;\n        var layer = drawnItems[layerid];\n        featureGroupRef.current.leafletElement.removeLayer(layer);\n      });\n    }\n\n    setFeatureGroupProps === null || setFeatureGroupProps === void 0 ? void 0 : setFeatureGroupProps(_objectSpread({}, featureGroupRef.current)); // bind popup and open it once created\n    // only created layer will remain,lat lang of that layer {lat: ,long:}\n\n    var newLatLng = (_drawnItems$latestCre = drawnItems[latestCreatedItem]) === null || _drawnItems$latestCre === void 0 ? void 0 : _drawnItems$latestCre._latlng; // send out to save in the form\n\n    onChange({\n      center: [],\n      originalCenter: Object.values(newLatLng),\n      isChanged: false,\n      radius: '',\n      originalRadius: layer._mRadius\n    });\n  }; // when user clicks on create layer\n\n\n  var _onDrawStart = function _onDrawStart(_e) {\n    var _e$target;\n\n    //add an active class to the create button\n    var mapContainer = _e === null || _e === void 0 ? void 0 : (_e$target = _e.target) === null || _e$target === void 0 ? void 0 : _e$target.getContainer();\n    var createShapeButton = mapContainer.querySelector(\".leaflet-draw-draw-circle\");\n\n    if (createShapeButton) {\n      createShapeButton.classList.add(\"draw-active\");\n    } // all layer on featuregroup\n\n\n    var drawnItems = featureGroupRef.current.leafletElement._layers; // all editable layer with newly created layer on last index on array\n\n    var drawnItemsValue = Object.keys(drawnItems);\n\n    if (drawnItemsValue.length > 1) {\n      drawnItemsValue.forEach(function (layerid) {\n        // remove all existing edited layer if start creating new\n        var layer = drawnItems[layerid];\n        featureGroupRef.current.leafletElement.removeLayer(layer);\n      });\n    }\n\n    setFeatureGroupProps === null || setFeatureGroupProps === void 0 ? void 0 : setFeatureGroupProps(_objectSpread({}, featureGroupRef.current));\n  }; // when edited or created circle moves from center\n\n\n  var onEditMove = function onEditMove(e) {\n    var layer = e.layer; // if original and changed center coordinates different teh  go inside\n\n    if (layer.originalCenter !== Object.values(layer._latlng)) {\n      var _layer$editing3;\n\n      // on creation make it editable\n      layer === null || layer === void 0 ? void 0 : (_layer$editing3 = layer.editing) === null || _layer$editing3 === void 0 ? void 0 : _layer$editing3.enable();\n      onChange({\n        center: Object.values(layer._latlng),\n        originalCenter: layer.originalCenter,\n        isChanged: true,\n        radius: '',\n        originalRadius: layer._mRadius\n      });\n    }\n  }; // when edited or created circle radius changes\n\n\n  var onEditResize = function onEditResize(e) {\n    var _layer$editing4;\n\n    var layer = e.layer; // on creation make it editable\n\n    layer === null || layer === void 0 ? void 0 : (_layer$editing4 = layer.editing) === null || _layer$editing4 === void 0 ? void 0 : _layer$editing4.enable();\n    var newRadius = layer === null || layer === void 0 ? void 0 : layer._mRadius;\n    onChange({\n      center: layer.originalCenter ? Object.values(layer._latlng) : [],\n      // if original center(edition going on) present then newer will come here\n      originalCenter: layer.originalCenter ? layer.originalCenter : Object.values(layer._latlng),\n      // if original center(edition going on) present then original will be original or show new coordinates (creation)\n      isChanged: false,\n      radius: layer.originalRadius ? newRadius : '',\n      originalRadius: layer.originalRadius ? layer.originalRadius : newRadius\n    });\n  };\n\n  var _DrawStop = function _DrawStop(e) {\n    var _e$target2;\n\n    //remove the active class when the draw stops\n    var mapContainer = e === null || e === void 0 ? void 0 : (_e$target2 = e.target) === null || _e$target2 === void 0 ? void 0 : _e$target2.getContainer();\n    var createShapeButton = mapContainer.querySelector(\".leaflet-draw-draw-circle\");\n\n    if (createShapeButton) {\n      createShapeButton.classList.remove(\"draw-active\");\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(FeatureGroup, {\n    ref: featureGroupRef,\n    renderer: renderer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(EditControl, {\n    position: \"bottomright\",\n    onCreated: _onCreated,\n    onDrawStart: _onDrawStart,\n    onEditMove: onEditMove,\n    onEditResize: onEditResize,\n    onDrawStop: _DrawStop,\n    draw: createPermission ? {\n      rectangle: false,\n      polyline: false,\n      polygon: false,\n      marker: false,\n      circlemarker: false,\n      circle: {\n        allowIntersection: false,\n        showArea: true,\n        clickable: true\n      }\n    } : false,\n    edit: {\n      remove: false,\n      allowIntersection: false,\n      edit: false,\n      toolbar: false\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 7\n    }\n  }), editPopUpComponent && /*#__PURE__*/React.createElement(StyledPopUp, {\n    keepInView: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 30\n    }\n  }, editPopUpComponent({\n    map: map\n  })));\n};\n\nexport default React.memo(LeafletCircleEditLayer);","map":{"version":3,"sources":["/Users/farhanansari/Code/ui-library/src/components/atoms/Map/layers/LeafletCircleEditLayer.tsx"],"names":["LL","React","useContext","useEffect","useRef","useState","FeatureGroup","useLeaflet","EditControl","GeocodingContext","getCircleBounds","StyledPopUp","LeafletCircleEditLayer","circle","editPopUpComponent","onChange","setFeatureGroupProps","featureGroupRef","layerRef","renderer","canvas","padding","radiusKey","styleKeys","styleKey","editLayer","createPermission","orinalCoordinatesKey","center","geocodingContext","geocoding","shouldUpdateShape","customFields","position","radius","length","find","field","name","value","setCenter","cRadius","setCRadius","map","renderPloyLayer","handleFitBoundsPosition","lat","lng","Object","keys","current","editing","_map","circleBounds","getBounds","southWest","getSouthWest","northEast","getNorthEast","paddedBounds","latLngBounds","bounds","zoom","getBoundsZoom","setView","getCenter","animate","setLatLng","originalCenter","isChanged","originalRadius","handleRelocateMarker","handleFitBoundsRadius","fitBounds","point","handleValidRadius","setRadius","handleInvalidRadius","leafletElement","clearLayers","layers","getLayers","interactive","lineJoin","lineCap","fill","stroke","fillColor","parseFloat","toFixed","enable","addLayer","layer","_markerGroup","_createMoveMarker","_createResizeMarker","leafletFG","geoJsonData","data","coordinates","option","optionObj","key","circleLayer","forEach","index","currentData","parsedRadiusKey","weight","dashArray","fillOpacity","undefined","push","_onCreated","e","drawnItems","_layers","drawnItemsValue","latestCreatedItem","layerid","removeLayer","newLatLng","_latlng","values","_mRadius","_onDrawStart","_e","mapContainer","target","getContainer","createShapeButton","querySelector","classList","add","onEditMove","onEditResize","newRadius","_DrawStop","remove","rectangle","polyline","polygon","marker","circlemarker","allowIntersection","showArea","clickable","edit","toolbar","memo"],"mappings":"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","sourcesContent":["import LL from 'leaflet'\nimport React, { useContext, useEffect, useRef, useState } from 'react'\nimport { FeatureGroup, useLeaflet } from 'react-leaflet'\nimport { EditControl } from 'react-leaflet-draw'\nimport { IGeocodingContext, GeocodingContext } from '..'\nimport { getCircleBounds } from '../helperMethods'\nimport { ICircle, tGeocoding } from '../interfaces.d'\nimport { StyledPopUp } from '../StyledMap'\n\ninterface ILeafletCircleEditLayer {\n  onChange: (changedObject: IChangedObject) => void\n  createShape: boolean\n  setCreateShape: (createShape: boolean) => void\n  editPopUpComponent: any\n  circle: ICircle\n  setFeatureGroupProps?: React.Dispatch<React.SetStateAction<FeatureGroup>>\n}\ninterface IChangedObject {\n  center: any[]\n  originalCenter: any[]\n  isChanged: boolean\n  radius: string | number\n  originalRadius: string | number\n}\n\nconst LeafletCircleEditLayer = ({\n  // createShape,\n  // setCreateShape,\n  circle,\n  editPopUpComponent,\n  onChange,\n  setFeatureGroupProps\n}: ILeafletCircleEditLayer) => {\n  const featureGroupRef: any = React.useRef()\n  const layerRef: any = useRef({});\n  const renderer: any = LL.canvas({ padding: 0.5 }) // adding renderer if data entries more than 200\n  const radiusKey = circle?.radiusKey\n  const styleKeys = circle?.styleKey // circle style\n  const editLayer = circle?.editLayer\n  const createPermission = circle?.createPermission || false\n  const orinalCoordinatesKey = circle?.center\n  const geocodingContext: IGeocodingContext = useContext(GeocodingContext);\n  const { shouldUpdateShape, customFields, position} = geocodingContext?.geocoding as tGeocoding;\n  const radius = customFields && customFields.length > 0 ? customFields.find(field => field.name === \"radius\")?.value : 0\n  const [center, setCenter] = useState(position);\n  const [cRadius, setCRadius] = useState(radius);\n\n  const { map } = useLeaflet()\n\n  useEffect(() => {\n    renderPloyLayer()\n  }, [])\n\n  const handleFitBoundsPosition = (radius: number, lat:number, lng:number) => {\n    if(map && Object.keys(map).length > 0 && layerRef.current.editing._map && Object.keys(layerRef.current.editing?._map)?.length > 0) {\n        const circleBounds = layerRef.current.getBounds();\n        const southWest = circleBounds.getSouthWest();\n        const northEast = circleBounds.getNorthEast();\n        const paddedBounds = LL.latLngBounds([southWest.lat, southWest.lng],[northEast.lat, northEast.lng]);\n        const bounds = getCircleBounds(radius, lat, lng);\n        const zoom = map.getBoundsZoom(bounds);\n        map?.setView(paddedBounds.getCenter(), zoom, {animate: true });\n      }\n  }\n\n  useEffect(() => {\n    if(shouldUpdateShape && layerRef.current && Object.keys(layerRef.current)?.length > 0 && ((center?.[0] !== position?.[0]) || (center?.[1] !== position?.[1]))) {\n      layerRef.current?.setLatLng(position);\n      onChange({ center: position, originalCenter: center, isChanged: true, radius: '', originalRadius: radius});\n      handleFitBoundsPosition(radius, position[0], position[1]);\n      handleRelocateMarker(layerRef.current);\n      setCenter(position);\n    }\n  },[position]);\n\n  const handleFitBoundsRadius = (radius: number, lat:number, lng:number) => {\n    if(map && Object.keys(map).length > 0) {\n      const bounds = getCircleBounds(radius, lat, lng);\n      map?.fitBounds(bounds, {padding: LL.point(100, 100)});\n    }\n  }\n\n  const handleValidRadius = (radius: number) => {\n    layerRef.current?.setRadius(radius);\n    onChange({ center: [], originalCenter: position, isChanged: false, radius: radius, originalRadius: cRadius });\n    handleFitBoundsRadius(radius, position[0], position[1]);\n    handleRelocateMarker(layerRef.current);\n    setCRadius(radius);\n  }\n\n  const handleInvalidRadius = (leafletElement: any) => {\n    onChange({ center: [], originalCenter: position, isChanged: false, radius: 0, originalRadius: 0 });\n    leafletElement.clearLayers(); \n    setCRadius(0);\n  }\n\n  useEffect(() => {\n    if(!shouldUpdateShape || Object.keys(featureGroupRef?.current)?.length === 0) { return; }\n    const { leafletElement }  = featureGroupRef?.current\n    const layers = leafletElement.getLayers(); \n    if(Object.keys(layers)?.length > 0) {\n      radius > 0 ? handleValidRadius(radius) : handleInvalidRadius(leafletElement);\n    } else if(radius) {\n      const circle: any = LL.circle(position as [number,number], {\n          interactive: true,\n          lineJoin: 'round',\n          lineCap: 'round',\n          fill: true,\n          stroke: true,\n          fillColor: '#5698d3',\n          radius: parseFloat((radius).toFixed(2))\n        });\n      circle.originalCenter = position;\n      circle.originalRadius = parseFloat((radius).toFixed(2));\n      circle?.editing?.enable();\n      leafletElement.addLayer(circle);\n      layerRef.current = circle;\n      onChange({ center: [], originalCenter: position, isChanged: false, radius: \"\", originalRadius: radius });\n      handleFitBoundsRadius(radius, position[0], position[1]);\n    }\n  },[radius]);\n\n  const handleRelocateMarker = (layer: any) => {\n    if(layer && Object.keys(layer).length > 0) {   \n      const { editing } = layer;\n      if(editing?._map && Object.keys(editing?._map)?.length > 0) {\n        editing?._markerGroup?.clearLayers();\n        // Create center marker\n\t\t    editing._createMoveMarker();\n        // Create edge marker\n        editing._createResizeMarker();\n      }\n    }\n  }\n\n  const renderPloyLayer = () => {\n    // populate the leaflet FeatureGroup with the geoJson layers\n\n    if (featureGroupRef?.current) {\n      // eslint-disable-next-line\n      const leafletFG =\n        featureGroupRef?.current /* eslint-disable-line no-alert */\n      const { leafletElement } = leafletFG\n      const geoJsonData = editLayer?.data\n\n      // suppose geoJsonData [{bhiwandi},{Dadar}]\n      const coordinates = geoJsonData.map((option: any) => {\n        const optionObj = orinalCoordinatesKey.map((key: string) => option[key])\n        // [lat,long]\n        return [optionObj]\n      }) // [[],[]]\n\n      const circleLayer: any[] = []\n      coordinates?.forEach((option: any, index: number) => {\n        const currentData = geoJsonData[index]\n        const parsedRadiusKey = radiusKey && parseFloat(currentData[radiusKey])\n        const circle = LL.circle(option[index], {\n          interactive: true,\n          lineJoin: 'round',\n          lineCap: 'round',\n          fill: true,\n          stroke: true,\n          fillColor: '#5698d3',\n          radius: parsedRadiusKey\n            ? parseFloat((parsedRadiusKey * 1000).toFixed(2))\n            : 200,\n          weight:\n            styleKeys?.weight && currentData[styleKeys?.weight]\n              ? currentData[styleKeys?.weight]\n              : 3,\n          dashArray:\n            styleKeys?.dashArray && currentData[styleKeys?.dashArray]\n              ? currentData[styleKeys?.dashArray]\n              : null,\n          fillOpacity:\n            styleKeys?.fillOpacity && currentData[styleKeys?.fillOpacity]\n              ? currentData[styleKeys?.fillOpacity]\n              : 0.2,\n\n          renderer: geoJsonData.length > 200 ? renderer : undefined\n        })\n\n        circleLayer.push(circle)\n      })\n\n      circleLayer.forEach((layer: any, index: number) => {\n        const currentData = geoJsonData[index]\n        const parsedRadiusKey = radiusKey && parseFloat(currentData[radiusKey])\n        const optionObj = orinalCoordinatesKey.map(\n          (key: string) => currentData[key]\n        )\n        // manually adding initial radius and center\n        layer.originalCenter = optionObj\n        layer.originalRadius =\n          parsedRadiusKey && parseFloat((parsedRadiusKey * 1000).toFixed(2))\n        // add circle layer to featuregroup\n        leafletElement.addLayer(layer)\n        // make circle layer editable on load\n        layer?.editing?.enable()\n      })\n      layerRef.current = circleLayer[0];\n      setFeatureGroupProps?.({...featureGroupRef.current})\n    }\n  }\n\n  // when creating new layer, keep it editable and remove previous all layer, only one edited layer creation is permitted\n  const _onCreated = (e: any) => {\n    const layer = e.layer\n    layerRef.current = e.layer;\n    // on creation make it editable\n    layer?.editing?.enable()\n    // all layer on featuregroup\n    const drawnItems = featureGroupRef.current.leafletElement._layers\n    // all editable layer with newly created layer on last index on array\n    const drawnItemsValue = Object.keys(drawnItems)\n    const latestCreatedItem = drawnItemsValue[drawnItemsValue.length - 1]\n    if (drawnItemsValue.length > 1) {\n      drawnItemsValue.forEach((layerid) => {\n        // keep last, latest area,remove remaining, (we are allowing only one area to create)\n        if (latestCreatedItem === layerid) return\n        const layer = drawnItems[layerid]\n        featureGroupRef.current.leafletElement.removeLayer(layer)\n      })\n    }\n    setFeatureGroupProps?.({...featureGroupRef.current});\n    // bind popup and open it once created\n\n    // only created layer will remain,lat lang of that layer {lat: ,long:}\n    const newLatLng = drawnItems[latestCreatedItem]?._latlng\n\n    // send out to save in the form\n    onChange({\n      center: [],\n      originalCenter: Object.values(newLatLng),\n      isChanged: false,\n      radius: '',\n      originalRadius: layer._mRadius\n    })\n  }\n\n  // when user clicks on create layer\n  const _onDrawStart = (_e: any) => {  \n    //add an active class to the create button\n    const mapContainer: HTMLElement = _e?.target?.getContainer();\n    let createShapeButton = mapContainer.querySelector(\".leaflet-draw-draw-circle\") as HTMLElement;\n    if(createShapeButton) { createShapeButton.classList.add(\"draw-active\"); }\n\n    // all layer on featuregroup\n    const drawnItems = featureGroupRef.current.leafletElement._layers\n    // all editable layer with newly created layer on last index on array\n    const drawnItemsValue = Object.keys(drawnItems)\n\n    if (drawnItemsValue.length > 1) {\n      drawnItemsValue.forEach((layerid) => {\n        // remove all existing edited layer if start creating new\n        const layer = drawnItems[layerid]\n        featureGroupRef.current.leafletElement.removeLayer(layer)\n      })\n    }\n    setFeatureGroupProps?.({...featureGroupRef.current})\n  }\n\n  // when edited or created circle moves from center\n  const onEditMove = (e: any) => {\n    const layer = e.layer\n    // if original and changed center coordinates different teh  go inside\n    if (layer.originalCenter !== Object.values(layer._latlng)) {\n      // on creation make it editable\n      layer?.editing?.enable()\n      onChange({\n        center: Object.values(layer._latlng),\n        originalCenter: layer.originalCenter,\n        isChanged: true,\n        radius: '',\n        originalRadius: layer._mRadius\n      })\n    }\n  }\n  // when edited or created circle radius changes\n  const onEditResize = (e: any) => {\n    const layer = e.layer\n    // on creation make it editable\n    layer?.editing?.enable()\n\n    const newRadius = layer?._mRadius\n    onChange({\n      center: layer.originalCenter ? Object.values(layer._latlng) : [], // if original center(edition going on) present then newer will come here\n      originalCenter: layer.originalCenter\n        ? layer.originalCenter\n        : Object.values(layer._latlng), // if original center(edition going on) present then original will be original or show new coordinates (creation)\n      isChanged: false,\n      radius: layer.originalRadius ? newRadius : '',\n      originalRadius: layer.originalRadius ? layer.originalRadius : newRadius\n    })\n  }\n\n  const _DrawStop = (e:any) => {\n    //remove the active class when the draw stops\n    const mapContainer: HTMLElement = e?.target?.getContainer();\n    let createShapeButton = mapContainer.querySelector(\".leaflet-draw-draw-circle\") as HTMLElement;\n    if(createShapeButton) { createShapeButton.classList.remove(\"draw-active\"); }\n  }\n\n  return (\n    <FeatureGroup ref={featureGroupRef as any} renderer={renderer}>\n      <EditControl\n        position='bottomright'\n        onCreated={_onCreated}\n        onDrawStart={_onDrawStart}\n        onEditMove={onEditMove}\n        onEditResize={onEditResize}\n        onDrawStop={_DrawStop}\n        draw={\n          createPermission\n            ? {\n                rectangle: false,\n                polyline: false,\n                polygon: false,\n                marker: false,\n                circlemarker: false,\n                circle: {\n                  allowIntersection: false,\n                  showArea: true,\n                  clickable: true\n                }\n              }\n            : false\n        }\n        edit={{\n          remove: false,\n          allowIntersection: false,\n          edit: false,\n          toolbar: false\n        }}\n      />\n      {editPopUpComponent && <StyledPopUp keepInView>{editPopUpComponent({ map })}</StyledPopUp>}\n    </FeatureGroup>\n  )\n}\n\nexport default React.memo(LeafletCircleEditLayer)\n"]},"metadata":{},"sourceType":"module"}