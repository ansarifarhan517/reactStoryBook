{"ast":null,"code":"import _slicedToArray from \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/atoms/SettingBox/index.tsx\";\n\nimport React, { useState } from 'react';\nimport Header from './Header';\nimport SettingBody from './SettingBody';\nimport { StyledButton, StyledIcon, StyledSettingBox } from './StyledSettingBox';\nimport SettingWrapper from './UniversalBodyWrapper';\nimport Tooltip from '../../molecules/Tooltip';\nimport IconButton from '../../atoms/IconButton';\nimport Box from '../../atoms/Box';\nimport { deepCopy, getNewSetting } from '../Map/helperMethods';\n\nvar SettingBox = function SettingBox(_ref) {\n  var onChange = _ref.onChange,\n      _ref$width = _ref.width,\n      width = _ref$width === void 0 ? '350px' : _ref$width,\n      settingOption = _ref.settingOption,\n      isOpenStreet = _ref.isOpenStreet,\n      _ref$showModal = _ref.showModal,\n      showModal = _ref$showModal === void 0 ? true : _ref$showModal,\n      handleShowModal = _ref.handleShowModal,\n      setMarkers = _ref.setMarkers,\n      heatMap = _ref.heatMap,\n      settingButtonTitle = _ref.settingButtonTitle,\n      onSettingChange = _ref.onSettingChange,\n      legend = _ref.legend,\n      geocoding = _ref.geocoding,\n      setFocusSearchPlace = _ref.setFocusSearchPlace;\n  var keys = Object.keys(settingOption); // to create a new reference completely below approach.- deep clone\n\n  var _useState = useState(Object.values(getNewSetting(settingOption))),\n      _useState2 = _slicedToArray(_useState, 2),\n      _settingOption = _useState2[0],\n      setSettingOption = _useState2[1];\n\n  React.useEffect(function () {\n    setSettingOption(Object.values(getNewSetting(settingOption)));\n  }, [settingOption]);\n  React.useEffect(function () {\n    // whenever close modal just revert the changes\n    if (!showModal) {\n      onCancel();\n    }\n  }, [showModal]);\n\n  var handleChange = function handleChange(newSetting) {\n    // set setting in array format\n    setSettingOption(newSetting);\n  };\n\n  var onSaveAndApply = function onSaveAndApply() {\n    var _settings$Legends;\n\n    // create a object like setting again\n    var settings = {};\n    keys.forEach(function (key, index) {\n      settings[key] = _settingOption[index];\n    }); // if search text in search box then set focus search place true\n\n    (geocoding === null || geocoding === void 0 ? void 0 : geocoding.searchText) && setFocusSearchPlace(true); // whatever checkbox for legends getting changed, set it to outer marker layer legendmodel,\n\n    setMarkers(settings === null || settings === void 0 ? void 0 : (_settings$Legends = settings.Legends) === null || _settings$Legends === void 0 ? void 0 : _settings$Legends.option); // send settings to map, to set all the settings accordingly\n\n    onChange(settings); // send setting out of map component to save it\n\n    onSettingChange && onSettingChange(settings, 'save');\n  };\n\n  var onApply = function onApply() {\n    var _settings$Legends2;\n\n    // create a object like setting again\n    var settings = {};\n    keys.forEach(function (key, index) {\n      settings[key] = _settingOption[index];\n    }); // if search text in search box then set focus search place true\n\n    (geocoding === null || geocoding === void 0 ? void 0 : geocoding.searchText) && setFocusSearchPlace(true); // whatever checkbox for legends getting changed, set it to outer marker layer legendmodel,\n\n    setMarkers(settings === null || settings === void 0 ? void 0 : (_settings$Legends2 = settings.Legends) === null || _settings$Legends2 === void 0 ? void 0 : _settings$Legends2.option); // send settings to map, to set all the settings accordingly\n\n    onChange(settings); // send setting out of map component to keep  it temporarily\n\n    onSettingChange && onSettingChange(settings, 'apply');\n  };\n\n  var onCancel = function onCancel() {\n    var instance = deepCopy(Object.values(settingOption)); // it will help to keep out legends in sync with outer marker legend model\n    // we have to some how revert it to original model- pending\n    // if search text in search box then set focus search place true\n\n    (geocoding === null || geocoding === void 0 ? void 0 : geocoding.searchText) && setFocusSearchPlace(true);\n    setMarkers(legend);\n    setSettingOption(instance);\n    handleShowModal(false);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 5\n    }\n  }, !showModal ? /*#__PURE__*/React.createElement(StyledIcon, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Tooltip, {\n    messagePlacement: \"end\",\n    arrowPlacement: \"center\",\n    tooltipDirection: \"bottom\",\n    hide: showModal,\n    hover: true,\n    message: settingButtonTitle || 'Click here to configure the settings of the map to get a customized map view.',\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(StyledButton, {\n    onClick: function onClick() {\n      handleShowModal(true);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    // title={\n    //   settingButtonTitle ||\n    //   'configure the way you visualize data, how map the looks and unlock exciting tools!'\n    // }\n    style: {\n      marginTop: '7px',\n      marginLeft: '8px'\n    },\n    src: \"https://loginext-media-bucket.s3-ap-southeast-1.amazonaws.com/images/loginext-logos-icons/maps-icons/mapAssist.png\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 15\n    }\n  })))) : null, showModal ? /*#__PURE__*/React.createElement(StyledSettingBox, {\n    width: width,\n    id: \"setting-box\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(SettingWrapper, {\n    header: /*#__PURE__*/React.createElement(Header, {\n      headerTitle: \"Map Settings\",\n      handleClose: function handleClose() {\n        onCancel();\n      },\n      imageVariant: \"close\",\n      width: width,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 15\n      }\n    }),\n    footer: /*#__PURE__*/React.createElement(Box, {\n      display: \"flex\",\n      color: \"black\",\n      style: {\n        boxShadow: '0 2px 11px -5px #000',\n        backgroundColor: '#fff'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Box, {\n      display: \"flex\",\n      justifyContent: \"flex-end\",\n      fullWidth: true,\n      horizontalSpacing: \"10px\",\n      p: \"15px\",\n      style: {\n        boxShadow: '0 2px 11px -5px #000',\n        zIndex: 2000\n      } // pt='0px'\n      ,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(IconButton, {\n      iconVariant: \"icomoon-save\",\n      primary: true,\n      className: \"footer\",\n      onClick: function onClick() {\n        handleShowModal(false);\n        onSaveAndApply();\n      },\n      children: \"Save & Apply\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(IconButton, {\n      iconVariant: \"icomoon-tick-circled\",\n      primary: true,\n      className: \"footer\",\n      onClick: function onClick() {\n        handleShowModal(false);\n        onApply();\n      },\n      children: \"Apply\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(IconButton, {\n      className: \"footer\",\n      iconVariant: \"icomoon-close\",\n      children: \"Cancel\" // iconSize={19}\n      ,\n      onClick: function onClick() {\n        onCancel();\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 19\n      }\n    }))),\n    content: /*#__PURE__*/React.createElement(SettingBody, {\n      settings: _settingOption,\n      onChange: function onChange(newSetting) {\n        return handleChange(newSetting);\n      },\n      isOpenStreet: !!isOpenStreet,\n      heatMap: heatMap,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 15\n      }\n    }),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 11\n    }\n  })) : null);\n};\n\nexport default SettingBox;","map":{"version":3,"sources":["/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/atoms/SettingBox/index.tsx"],"names":["React","useState","Header","SettingBody","StyledButton","StyledIcon","StyledSettingBox","SettingWrapper","Tooltip","IconButton","Box","deepCopy","getNewSetting","SettingBox","onChange","width","settingOption","isOpenStreet","showModal","handleShowModal","setMarkers","heatMap","settingButtonTitle","onSettingChange","legend","geocoding","setFocusSearchPlace","keys","Object","values","_settingOption","setSettingOption","useEffect","onCancel","handleChange","newSetting","onSaveAndApply","settings","forEach","key","index","searchText","Legends","option","onApply","instance","marginTop","marginLeft","boxShadow","backgroundColor","zIndex"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport Header from './Header'\nimport { ISetting, ISettingOption } from './interface'\nimport SettingBody from './SettingBody'\nimport { StyledButton, StyledIcon, StyledSettingBox } from './StyledSettingBox'\nimport SettingWrapper from './UniversalBodyWrapper'\nimport Tooltip from '../../molecules/Tooltip'\nimport IconButton from '../../atoms/IconButton'\nimport Box from '../../atoms/Box'\nimport { deepCopy, getNewSetting } from '../Map/helperMethods'\n\nconst SettingBox = ({\n  onChange,\n  width = '350px',\n  settingOption,\n  isOpenStreet,\n  showModal = true,\n  handleShowModal,\n  setMarkers,\n  heatMap,\n  settingButtonTitle,\n  onSettingChange,\n  legend,\n  geocoding,\n  setFocusSearchPlace\n}: ISetting) => {\n  const keys = Object.keys(settingOption)\n\n  // to create a new reference completely below approach.- deep clone\n  const [_settingOption, setSettingOption] = useState<Array<ISettingOption>>(\n    Object.values(getNewSetting(settingOption))\n  )\n  React.useEffect(() => {\n    setSettingOption(Object.values(getNewSetting(settingOption)))\n  }, [settingOption])\n\n  React.useEffect(() => {\n    // whenever close modal just revert the changes\n    if (!showModal) {\n      onCancel()\n    }\n  }, [showModal])\n\n  const handleChange = (newSetting: Array<ISettingOption>) => {\n    // set setting in array format\n    setSettingOption(newSetting)\n  }\n\n  const onSaveAndApply = () => {\n    // create a object like setting again\n    const settings: any = {}\n    keys.forEach((key: string, index: number) => {\n      settings[key] = _settingOption[index]\n    })\n    // if search text in search box then set focus search place true\n    geocoding?.searchText && setFocusSearchPlace(true)\n    // whatever checkbox for legends getting changed, set it to outer marker layer legendmodel,\n    setMarkers(settings?.Legends?.option)\n\n    // send settings to map, to set all the settings accordingly\n    onChange(settings)\n    // send setting out of map component to save it\n    onSettingChange && onSettingChange(settings, 'save')\n  }\n  const onApply = () => {\n    // create a object like setting again\n    const settings: any = {}\n    keys.forEach((key: string, index: number) => {\n      settings[key] = _settingOption[index]\n    })\n    // if search text in search box then set focus search place true\n    geocoding?.searchText && setFocusSearchPlace(true)\n    // whatever checkbox for legends getting changed, set it to outer marker layer legendmodel,\n    setMarkers(settings?.Legends?.option)\n\n    // send settings to map, to set all the settings accordingly\n    onChange(settings)\n    // send setting out of map component to keep  it temporarily\n    onSettingChange && onSettingChange(settings, 'apply')\n  }\n  const onCancel = () => {\n    const instance = deepCopy(Object.values(settingOption))\n    // it will help to keep out legends in sync with outer marker legend model\n    // we have to some how revert it to original model- pending\n\n    // if search text in search box then set focus search place true\n    geocoding?.searchText && setFocusSearchPlace(true)\n    setMarkers(legend)\n\n    setSettingOption(instance)\n    handleShowModal(false)\n  }\n  return (\n    <div>\n      {!showModal ? (\n        <StyledIcon>\n          <Tooltip\n            messagePlacement='end'\n            arrowPlacement='center'\n            tooltipDirection='bottom'\n            hide={showModal}\n            hover\n            message={\n              settingButtonTitle ||\n              'Click here to configure the settings of the map to get a customized map view.'\n            }\n          >\n            <StyledButton\n              onClick={() => {\n                handleShowModal(true)\n              }}\n            >\n              <img\n                // title={\n                //   settingButtonTitle ||\n                //   'configure the way you visualize data, how map the looks and unlock exciting tools!'\n                // }\n                style={{ marginTop: '7px', marginLeft: '8px' }}\n                src='https://loginext-media-bucket.s3-ap-southeast-1.amazonaws.com/images/loginext-logos-icons/maps-icons/mapAssist.png'\n              />\n            </StyledButton>\n          </Tooltip>\n        </StyledIcon>\n      ) : null}\n      {showModal ? (\n        <StyledSettingBox width={width} id='setting-box'>\n          <SettingWrapper\n            header={\n              <Header\n                headerTitle='Map Settings'\n                handleClose={() => {\n                  onCancel()\n                }}\n                imageVariant='close'\n                width={width}\n              />\n            }\n            footer={\n              <Box\n                display='flex'\n                color='black'\n                style={{\n                  boxShadow: '0 2px 11px -5px #000',\n                  backgroundColor: '#fff'\n                }}\n              >\n                <Box\n                  display='flex'\n                  justifyContent='flex-end'\n                  fullWidth\n                  horizontalSpacing='10px'\n                  p='15px'\n                  style={{\n                    boxShadow: '0 2px 11px -5px #000',\n                    zIndex: 2000\n                  }}\n                  // pt='0px'\n                >\n                  <IconButton\n                    iconVariant='icomoon-save'\n                    primary\n                    className='footer'\n                    onClick={() => {\n                      handleShowModal(false)\n                      onSaveAndApply()\n                    }}\n                    children='Save & Apply'\n                  />\n                  <IconButton\n                    iconVariant='icomoon-tick-circled'\n                    primary\n                    className='footer'\n                    onClick={() => {\n                      handleShowModal(false)\n                      onApply()\n                    }}\n                    children='Apply'\n                  />\n                  <IconButton\n                    className='footer'\n                    iconVariant='icomoon-close'\n                    children='Cancel'\n                    // iconSize={19}\n                    onClick={() => {\n                      onCancel()\n                    }}\n                  />\n                </Box>\n              </Box>\n            }\n            content={\n              <SettingBody\n                settings={_settingOption}\n                onChange={(newSetting: Array<ISettingOption>) =>\n                  handleChange(newSetting)\n                }\n                isOpenStreet={!!isOpenStreet}\n                heatMap={heatMap}\n              />\n            }\n          />\n        </StyledSettingBox>\n      ) : null}\n    </div>\n  )\n}\nexport default SettingBox\n"]},"metadata":{},"sourceType":"module"}