{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/farhanansari/Code/ui-library/src/components/organisms/ListView/utils/components/TableHeaderCell.tsx\";\n\nimport React from 'react';\nimport TableHeadingStyled from '../../styles/TableHeadingStyled';\nimport ColumnOptions from './ColumnOptions';\nimport ColumnHeadingStyled from '../../styles/ColumnHeadingStyled';\nimport { Shimmer } from 'react-shimmer';\nimport Box from '../../../../atoms/Box';\nimport ColumnFilterLoading from '../../styles/ColumnFilterLoading';\nimport ColumnResizerStyled from '../../styles/ColumnResizerStyled';\n\nvar TableHeaderCell = function TableHeaderCell(_ref) {\n  var pinnedColumns = _ref.pinnedColumns,\n      columnInstance = _ref.columnInstance,\n      isColumnLoading = _ref.isColumnLoading,\n      instance = _ref.instance,\n      setPinnedColumns = _ref.setPinnedColumns,\n      pinnedColumnsTotalWidth = _ref.pinnedColumnsTotalWidth,\n      setPinnedColumnsTotalWidth = _ref.setPinnedColumnsTotalWidth,\n      setShowHideColumns = _ref.setShowHideColumns,\n      setColumnCheckedCount = _ref.setColumnCheckedCount,\n      columns = _ref.columns,\n      selectedRows = _ref.selectedRows,\n      data = _ref.data,\n      loading = _ref.loading,\n      isEditMode = _ref.isEditMode,\n      setSelectedRows = _ref.setSelectedRows,\n      onRowSelect = _ref.onRowSelect,\n      rowIdentifier = _ref.rowIdentifier,\n      filters = _ref.filters,\n      setFilters = _ref.setFilters,\n      getTextFieldProps = _ref.getTextFieldProps,\n      getSelectFieldProps = _ref.getSelectFieldProps,\n      hideColumnSettings = _ref.hideColumnSettings,\n      _ref$hasSelectAllRows = _ref.hasSelectAllRows,\n      hasSelectAllRows = _ref$hasSelectAllRows === void 0 ? true : _ref$hasSelectAllRows;\n  var columnHeaderProps = columnInstance.getHeaderProps();\n  return /*#__PURE__*/React.createElement(TableHeadingStyled, Object.assign({}, columnHeaderProps, {\n    title: undefined,\n    pinnedColumn: pinnedColumns.left[columnInstance.id] || pinnedColumns.right[columnInstance.id],\n    direction: pinnedColumns.left[columnInstance.id] ? 'left' : pinnedColumns.right[columnInstance.id] ? 'right' : undefined,\n    className: (columnInstance === null || columnInstance === void 0 ? void 0 : columnInstance['isSortable']) && 'cursor',\n    columnId: columnInstance.id,\n    id: \"column-header-\".concat(columnInstance.id),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 5\n    }\n  }), !isColumnLoading && columnInstance.id !== 'selection' && columnInstance.id !== 'selectionWithEdit' && !hideColumnSettings && /*#__PURE__*/React.createElement(ColumnOptions, {\n    instance: instance,\n    columnInstance: columnInstance,\n    columns: columns,\n    pinnedColumns: pinnedColumns,\n    pinnedColumnsTotalWidth: pinnedColumnsTotalWidth,\n    setPinnedColumns: setPinnedColumns,\n    setColumnCheckedCount: setColumnCheckedCount,\n    setShowHideColumns: setShowHideColumns,\n    setPinnedColumnsTotalWidth: setPinnedColumnsTotalWidth,\n    hideColumnSettings: hideColumnSettings,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(ColumnHeadingStyled, Object.assign({}, (columnInstance === null || columnInstance === void 0 ? void 0 : columnInstance['isSortable']) === true ? columnInstance.getSortByToggleProps() : {}, {\n    column: columnInstance,\n    title: (columnInstance === null || columnInstance === void 0 ? void 0 : columnInstance['infoTip']) || (typeof columnInstance.Header === 'string' ? columnInstance.Header : undefined),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"strong\", {\n    style: {\n      userSelect: 'none'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }\n  }, isColumnLoading && columnInstance.id !== 'selection' && columnInstance.id !== 'selectionWithEdit' ? /*#__PURE__*/React.createElement(Shimmer, {\n    width: Number(columnInstance.width) - 50,\n    height: 20,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 13\n    }\n  }) : columnInstance.render('Header', {\n    selectedRows: selectedRows,\n    data: data,\n    loading: loading,\n    isEditMode: isEditMode,\n    setSelectedRows: setSelectedRows,\n    onRowSelect: onRowSelect,\n    rowIdentifier: rowIdentifier,\n    hasSelectAllRows: hasSelectAllRows\n  }))), (columnInstance === null || columnInstance === void 0 ? void 0 : columnInstance['isFilterable']) && /*#__PURE__*/React.createElement(Box, {\n    mt: \"12px\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 9\n    }\n  }, isColumnLoading ? /*#__PURE__*/React.createElement(ColumnFilterLoading, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }\n  }) : columnInstance.render('Filter', {\n    textFieldProps: getTextFieldProps(columnInstance),\n    selectFieldProps: getSelectFieldProps(columnInstance),\n    filters: filters,\n    setFilters: setFilters\n  })), !isColumnLoading && columnInstance.id !== 'selection' && columnInstance.id !== 'selectionWithEdit' && /*#__PURE__*/React.createElement(ColumnResizerStyled, Object.assign({}, columnInstance.getResizerProps(), {\n    isResizing: columnInstance.isResizing,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 11\n    }\n  })));\n};\n\nexport default TableHeaderCell;","map":{"version":3,"sources":["/Users/farhanansari/Code/ui-library/src/components/organisms/ListView/utils/components/TableHeaderCell.tsx"],"names":["React","TableHeadingStyled","ColumnOptions","ColumnHeadingStyled","Shimmer","Box","ColumnFilterLoading","ColumnResizerStyled","TableHeaderCell","pinnedColumns","columnInstance","isColumnLoading","instance","setPinnedColumns","pinnedColumnsTotalWidth","setPinnedColumnsTotalWidth","setShowHideColumns","setColumnCheckedCount","columns","selectedRows","data","loading","isEditMode","setSelectedRows","onRowSelect","rowIdentifier","filters","setFilters","getTextFieldProps","getSelectFieldProps","hideColumnSettings","hasSelectAllRows","columnHeaderProps","getHeaderProps","undefined","left","id","right","getSortByToggleProps","Header","userSelect","Number","width","render","textFieldProps","selectFieldProps","getResizerProps","isResizing"],"mappings":"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","sourcesContent":["import React from 'react'\nimport TableHeadingStyled from '../../styles/TableHeadingStyled'\nimport {\n  IPinnedColumnState,\n  IListViewRow,\n  IPinnedColumnTotalWidthState,\n  IListViewColumn,\n  ISelectedRows,\n  ITextFieldProps,\n  ISelectFieldProps\n} from '../../interfaces'\nimport { ColumnInstance, TableInstance, Column } from 'react-table'\nimport ColumnOptions from './ColumnOptions'\nimport ColumnHeadingStyled from '../../styles/ColumnHeadingStyled'\nimport { IOptionType } from '../../../../atoms/CheckboxGroup'\nimport { Shimmer } from 'react-shimmer'\nimport Box from '../../../../atoms/Box'\nimport ColumnFilterLoading from '../../styles/ColumnFilterLoading'\nimport ColumnResizerStyled from '../../styles/ColumnResizerStyled'\n\ninterface ITableHeaderCellProps {\n  pinnedColumns: IPinnedColumnState\n  columnInstance: ColumnInstance<IListViewRow>\n  isColumnLoading: boolean\n  instance: TableInstance\n  setPinnedColumns: React.Dispatch<React.SetStateAction<IPinnedColumnState>>\n  pinnedColumnsTotalWidth: IPinnedColumnTotalWidthState\n  setPinnedColumnsTotalWidth: React.Dispatch<\n    React.SetStateAction<IPinnedColumnTotalWidthState>\n  >\n  setShowHideColumns: React.Dispatch<React.SetStateAction<IOptionType[]>>\n  setColumnCheckedCount: React.Dispatch<React.SetStateAction<number>>\n  columns: IListViewColumn[]\n  selectedRows: ISelectedRows\n  data: IListViewRow[]\n  loading: boolean\n  isEditMode: boolean\n  setSelectedRows: React.Dispatch<React.SetStateAction<ISelectedRows>>\n  onRowSelect: (selectedRows: ISelectedRows) => void\n  rowIdentifier: string\n  filters: Record<string, string>\n  setFilters: React.Dispatch<React.SetStateAction<Record<string, string>>>\n  getTextFieldProps(column: Column): ITextFieldProps\n  getSelectFieldProps(column: Column): ISelectFieldProps\n  hideColumnSettings: boolean\n  hasSelectAllRows?: boolean\n}\n\nconst TableHeaderCell = ({\n  pinnedColumns,\n  columnInstance,\n  isColumnLoading,\n  instance,\n  setPinnedColumns,\n  pinnedColumnsTotalWidth,\n  setPinnedColumnsTotalWidth,\n  setShowHideColumns,\n  setColumnCheckedCount,\n  columns,\n  selectedRows,\n  data,\n  loading,\n  isEditMode,\n  setSelectedRows,\n  onRowSelect,\n  rowIdentifier,\n  filters,\n  setFilters,\n  getTextFieldProps,\n  getSelectFieldProps,\n  hideColumnSettings,\n  hasSelectAllRows = true\n}: ITableHeaderCellProps) => {\n  const columnHeaderProps = columnInstance.getHeaderProps()\n  return (\n    <TableHeadingStyled\n      {...columnHeaderProps}\n      title={undefined}\n      pinnedColumn={\n        pinnedColumns.left[columnInstance.id] ||\n        pinnedColumns.right[columnInstance.id]\n      }\n      direction={\n        pinnedColumns.left[columnInstance.id]\n          ? 'left'\n          : pinnedColumns.right[columnInstance.id]\n          ? 'right'\n          : undefined\n      }\n      className={columnInstance?.['isSortable'] && 'cursor'}\n      columnId={columnInstance.id}\n      id={`column-header-${columnInstance.id}`}\n    >\n      {!isColumnLoading &&\n        columnInstance.id !== 'selection' &&\n        columnInstance.id !== 'selectionWithEdit' &&\n        !hideColumnSettings && (\n          <ColumnOptions\n            instance={instance}\n            columnInstance={columnInstance as any}\n            columns={columns}\n            pinnedColumns={pinnedColumns}\n            pinnedColumnsTotalWidth={pinnedColumnsTotalWidth}\n            setPinnedColumns={setPinnedColumns}\n            setColumnCheckedCount={setColumnCheckedCount}\n            setShowHideColumns={setShowHideColumns}\n            setPinnedColumnsTotalWidth={setPinnedColumnsTotalWidth}\n            hideColumnSettings={hideColumnSettings}\n          />\n        )}\n      <ColumnHeadingStyled\n        {...(columnInstance?.['isSortable'] === true\n          ? columnInstance.getSortByToggleProps()\n          : {})}\n        column={columnInstance}\n        title={\n          columnInstance?.['infoTip'] ||\n          (typeof columnInstance.Header === 'string'\n            ? columnInstance.Header\n            : undefined)\n        }\n      >\n        <strong style={{ userSelect: 'none' }}>\n          {isColumnLoading &&\n          columnInstance.id !== 'selection' &&\n          columnInstance.id !== 'selectionWithEdit' ? (\n            <Shimmer width={Number(columnInstance.width) - 50} height={20} />\n          ) : (\n            columnInstance.render('Header', {\n              selectedRows,\n              data,\n              loading,\n              isEditMode,\n              setSelectedRows,\n              onRowSelect,\n              rowIdentifier,\n              hasSelectAllRows\n            })\n          )}\n        </strong>\n      </ColumnHeadingStyled>\n      {columnInstance?.['isFilterable'] && (\n        <Box mt='12px'>\n          {isColumnLoading ? (\n            <ColumnFilterLoading />\n          ) : (\n            columnInstance.render('Filter', {\n              textFieldProps: getTextFieldProps(columnInstance),\n              selectFieldProps: getSelectFieldProps(columnInstance),\n              filters,\n              setFilters\n            })\n          )}\n        </Box>\n      )}\n      {!isColumnLoading &&\n        columnInstance.id !== 'selection' &&\n        columnInstance.id !== 'selectionWithEdit' && (\n          <ColumnResizerStyled\n            {...columnInstance.getResizerProps()}\n            isResizing={columnInstance.isResizing}\n          />\n        )}\n    </TableHeadingStyled>\n  )\n}\n\nexport default TableHeaderCell\n"]},"metadata":{},"sourceType":"module"}