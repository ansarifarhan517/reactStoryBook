{"ast":null,"code":"import _objectWithoutProperties from \"/Users/farhanansari/Code/ui-library/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"/Users/farhanansari/Code/ui-library/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/farhanansari/Code/ui-library/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/farhanansari/Code/ui-library/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/farhanansari/Code/ui-library/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport * as L from 'leaflet';\nimport { GridLayer, withLeaflet } from 'react-leaflet';\nimport 'leaflet.gridlayer.googlemutant';\nimport * as GoogleMapsLoader from 'google-maps';\n\nvar ReactLeafletGoogleLayer = /*#__PURE__*/function (_GridLayer) {\n  _inherits(ReactLeafletGoogleLayer, _GridLayer);\n\n  var _super = _createSuper(ReactLeafletGoogleLayer);\n\n  function ReactLeafletGoogleLayer() {\n    var _this;\n\n    _classCallCheck(this, ReactLeafletGoogleLayer);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this.addGoogleLayer = function (name, options) {\n      var layer = _this.leafletElement;\n      layer.addGoogleLayer(name, options);\n    };\n\n    _this.removeGoogleLayer = function (name) {\n      var layer = _this.leafletElement;\n      layer.removeGoogleLayer(name);\n    };\n\n    return _this;\n  }\n\n  _createClass(ReactLeafletGoogleLayer, [{\n    key: \"createLeafletElement\",\n    value: function createLeafletElement(props) {\n      var _this2 = this;\n\n      var useGoogMapsLoader = props.useGoogMapsLoader,\n          googleMapsLoaderConf = props.googleMapsLoaderConf,\n          googleMapsAddLayers = props.googleMapsAddLayers,\n          leaflet = props.leaflet,\n          googleMutantProps = _objectWithoutProperties(props, [\"useGoogMapsLoader\", \"googleMapsLoaderConf\", \"googleMapsAddLayers\", \"leaflet\"]);\n\n      if (useGoogMapsLoader) {\n        var googleMapsLoader = GoogleMapsLoader;\n        googleMapsLoader = Object.assign(googleMapsLoader, googleMapsLoaderConf);\n        googleMapsLoader.load();\n      }\n\n      this.leafletElement = L.gridLayer.googleMutant(googleMutantProps);\n\n      if (googleMapsAddLayers) {\n        googleMapsAddLayers.forEach(function (layer) {\n          ;\n\n          _this2.leafletElement.addGoogleLayer(layer.name, layer.options);\n        });\n      }\n\n      return this.leafletElement;\n    }\n  }, {\n    key: \"updateLeafletElement\",\n    value: function updateLeafletElement(prevProps, nextProps) {\n      var opacity = nextProps.opacity,\n          zIndex = nextProps.zIndex;\n\n      if (opacity !== undefined && opacity !== prevProps.opacity) {\n        this.leafletElement.setOpacity(opacity);\n      }\n\n      if (zIndex !== undefined && zIndex !== prevProps.zIndex) {\n        this.leafletElement.setZIndex(zIndex);\n      }\n    }\n  }]);\n\n  return ReactLeafletGoogleLayer;\n}(GridLayer);\n\nReactLeafletGoogleLayer.defaultProps = {\n  useGoogMapsLoader: true,\n  googleMapsLoaderConf: {\n    VERSION: undefined\n  },\n  googleMapsAddLayers: undefined\n};\nexport default withLeaflet(ReactLeafletGoogleLayer);","map":{"version":3,"sources":["/Users/farhanansari/Code/ui-library/src/components/atoms/Map/layers/LeaftletGoogleLayer.ts"],"names":["L","GridLayer","withLeaflet","GoogleMapsLoader","ReactLeafletGoogleLayer","addGoogleLayer","name","options","layer","leafletElement","removeGoogleLayer","props","useGoogMapsLoader","googleMapsLoaderConf","googleMapsAddLayers","leaflet","googleMutantProps","googleMapsLoader","Object","assign","load","gridLayer","googleMutant","forEach","prevProps","nextProps","opacity","zIndex","undefined","setOpacity","setZIndex","defaultProps","VERSION"],"mappings":";;;;;AACA,OAAO,KAAKA,CAAZ,MAAmB,SAAnB;AACA,SAAuBC,SAAvB,EAAkCC,WAAlC,QAAqD,eAArD;AACA,OAAO,gCAAP;AACA,OAAO,KAAKC,gBAAZ,MAAkC,aAAlC;;IAgBMC,uB;;;;;;;;;;;;;;;;UAgCGC,c,GAAiB,UAACC,IAAD,EAAeC,OAAf,EAAiC;AACvD,UAAMC,KAAK,GAAG,MAAKC,cAAnB;AACAD,MAAAA,KAAK,CAACH,cAAN,CAAqBC,IAArB,EAA2BC,OAA3B;AACD,K;;UAEMG,iB,GAAoB,UAACJ,IAAD,EAAkB;AAC3C,UAAME,KAAK,GAAG,MAAKC,cAAnB;AACAD,MAAAA,KAAK,CAACE,iBAAN,CAAwBJ,IAAxB;AACD,K;;;;;;;yCAjC2BK,K,EAAe;AAAA;;AAAA,UAEvCC,iBAFuC,GAOrCD,KAPqC,CAEvCC,iBAFuC;AAAA,UAGvCC,oBAHuC,GAOrCF,KAPqC,CAGvCE,oBAHuC;AAAA,UAIvCC,mBAJuC,GAOrCH,KAPqC,CAIvCG,mBAJuC;AAAA,UAKvCC,OALuC,GAOrCJ,KAPqC,CAKvCI,OALuC;AAAA,UAMpCC,iBANoC,4BAOrCL,KAPqC;;AAQzC,UAAIC,iBAAJ,EAAuB;AACrB,YAAIK,gBAAgB,GAAGd,gBAAvB;AACAc,QAAAA,gBAAgB,GAAGC,MAAM,CAACC,MAAP,CAAcF,gBAAd,EAAgCJ,oBAAhC,CAAnB;AACAI,QAAAA,gBAAgB,CAACG,IAAjB;AACD;;AACD,WAAKX,cAAL,GAAsBT,CAAC,CAACqB,SAAF,CAAYC,YAAZ,CAAyBN,iBAAzB,CAAtB;;AACA,UAAIF,mBAAJ,EAAyB;AACvBA,QAAAA,mBAAmB,CAACS,OAApB,CAA4B,UAACf,KAAD,EAAW;AACrC;;AAAE,UAAA,MAAI,CAACC,cAAN,CAAkDJ,cAAlD,CACCG,KAAK,CAACF,IADP,EAECE,KAAK,CAACD,OAFP;AAIF,SALD;AAMD;;AACD,aAAO,KAAKE,cAAZ;AACD;;;yCAY2Be,S,EAAmBC,S,EAAmB;AAAA,UACxDC,OADwD,GACpCD,SADoC,CACxDC,OADwD;AAAA,UAC/CC,MAD+C,GACpCF,SADoC,CAC/CE,MAD+C;;AAEhE,UAAID,OAAO,KAAKE,SAAZ,IAAyBF,OAAO,KAAKF,SAAS,CAACE,OAAnD,EAA4D;AAC1D,aAAKjB,cAAL,CAAoBoB,UAApB,CAA+BH,OAA/B;AACD;;AACD,UAAIC,MAAM,KAAKC,SAAX,IAAwBD,MAAM,KAAKH,SAAS,CAACG,MAAjD,EAAyD;AACvD,aAAKlB,cAAL,CAAoBqB,SAApB,CAA8BH,MAA9B;AACD;AACF;;;;EAlDmC1B,S;;AAAhCG,uB,CACU2B,Y,GAAuB;AACnCnB,EAAAA,iBAAiB,EAAE,IADgB;AAEnCC,EAAAA,oBAAoB,EAAE;AAAEmB,IAAAA,OAAO,EAAEJ;AAAX,GAFa;AAGnCd,EAAAA,mBAAmB,EAAEc;AAHc,C;AAoDvC,eAAe1B,WAAW,CAACE,uBAAD,CAA1B","sourcesContent":["import * as React from 'react'\nimport * as L from 'leaflet'\nimport { ContextProps, GridLayer, withLeaflet } from 'react-leaflet'\nimport 'leaflet.gridlayer.googlemutant'\nimport * as GoogleMapsLoader from 'google-maps'\n\ninterface IGoogleMapsAddLayer {\n  name: 'BicyclingLayer' | 'TrafficLayer' | 'TransitLayer'\n  options?: any\n}\n\ninterface IProps extends L.gridLayer.GoogleMutantOptions, ContextProps {\n  zIndex?: number\n  useGoogMapsLoader?: boolean\n  googleMapsLoaderConf?: Partial<typeof GoogleMapsLoader>\n  googleMapsAddLayers?: IGoogleMapsAddLayer[]\n  ref?: React.Ref<any>\n  onAdd?: any\n}\n\nclass ReactLeafletGoogleLayer extends GridLayer<IProps> {\n  public static defaultProps: IProps = {\n    useGoogMapsLoader: true,\n    googleMapsLoaderConf: { VERSION: undefined },\n    googleMapsAddLayers: undefined\n  }\n\n  public createLeafletElement(props: IProps) {\n    const {\n      useGoogMapsLoader,\n      googleMapsLoaderConf,\n      googleMapsAddLayers,\n      leaflet,\n      ...googleMutantProps\n    } = props\n    if (useGoogMapsLoader) {\n      let googleMapsLoader = GoogleMapsLoader\n      googleMapsLoader = Object.assign(googleMapsLoader, googleMapsLoaderConf)\n      googleMapsLoader.load()\n    }\n    this.leafletElement = L.gridLayer.googleMutant(googleMutantProps)\n    if (googleMapsAddLayers) {\n      googleMapsAddLayers.forEach((layer) => {\n        ;(this.leafletElement as L.gridLayer.GoogleMutant).addGoogleLayer(\n          layer.name,\n          layer.options\n        )\n      })\n    }\n    return this.leafletElement\n  }\n\n  public addGoogleLayer = (name: string, options?: any) => {\n    const layer = this.leafletElement as L.gridLayer.GoogleMutant\n    layer.addGoogleLayer(name, options)\n  }\n\n  public removeGoogleLayer = (name: string) => {\n    const layer = this.leafletElement as L.gridLayer.GoogleMutant\n    layer.removeGoogleLayer(name)\n  }\n\n  public updateLeafletElement(prevProps: IProps, nextProps: IProps) {\n    const { opacity, zIndex } = nextProps\n    if (opacity !== undefined && opacity !== prevProps.opacity) {\n      this.leafletElement.setOpacity(opacity)\n    }\n    if (zIndex !== undefined && zIndex !== prevProps.zIndex) {\n      this.leafletElement.setZIndex(zIndex)\n    }\n  }\n}\n\nexport default withLeaflet(ReactLeafletGoogleLayer)\n"]},"metadata":{},"sourceType":"module"}