{"ast":null,"code":"import _slicedToArray from \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/atoms/ProgressBarDraggable/index.tsx\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  \", \"\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useEffect } from 'react';\nimport styled from 'styled-components';\nvar SliderDraggable = styled.input(_templateObject(), function (_ref) {\n  var _theme$colors, _theme$colors$primary, _theme$colors2, _theme$colors2$primar, _theme$colors3, _theme$colors3$primar;\n\n  var completedColor = _ref.completedColor,\n      _ref$completedPercent = _ref.completedPercent,\n      completedPercent = _ref$completedPercent === void 0 ? 0 : _ref$completedPercent,\n      _ref$thickness = _ref.thickness,\n      thickness = _ref$thickness === void 0 ? 6 : _ref$thickness,\n      theme = _ref.theme,\n      _ref$incompleteColor = _ref.incompleteColor,\n      incompleteColor = _ref$incompleteColor === void 0 ? \"#e9edf0\" : _ref$incompleteColor,\n      _ref$ovalRadius = _ref.ovalRadius,\n      ovalRadius = _ref$ovalRadius === void 0 ? 10 : _ref$ovalRadius;\n  return \"\\n    background: linear-gradient(to right, \".concat(completedColor ? completedColor : theme === null || theme === void 0 ? void 0 : (_theme$colors = theme.colors) === null || _theme$colors === void 0 ? void 0 : (_theme$colors$primary = _theme$colors.primary) === null || _theme$colors$primary === void 0 ? void 0 : _theme$colors$primary.main, \" 0%, \").concat(completedColor ? completedColor : theme === null || theme === void 0 ? void 0 : (_theme$colors2 = theme.colors) === null || _theme$colors2 === void 0 ? void 0 : (_theme$colors2$primar = _theme$colors2.primary) === null || _theme$colors2$primar === void 0 ? void 0 : _theme$colors2$primar.main, \" \").concat(completedPercent, \"%, \").concat(incompleteColor, \" \").concat(completedPercent, \"%, \").concat(incompleteColor, \" 100%);\\n    border: solid 1px #82CFD0;\\n    border-radius: 2px;\\n    width: 100%;\\n    height: \").concat(thickness, \"px;\\n    outline: none;\\n    opacity: 0.85;\\n    transition: background 150ms ease-in;\\n    transition: opacity 0.2s;\\n    -webkit-appearance: none;\\n    \\n    &::-webkit-slider-thumb {\\n      border: 3px solid \").concat(completedColor ? completedColor : theme === null || theme === void 0 ? void 0 : (_theme$colors3 = theme.colors) === null || _theme$colors3 === void 0 ? void 0 : (_theme$colors3$primar = _theme$colors3.primary) === null || _theme$colors3$primar === void 0 ? void 0 : _theme$colors3$primar.main, \";\\n      border-radius: 50%;\\n      background-color: #fffff2;\\n      -webkit-appearance: none;\\n      appearance: none;\\n      width: \").concat(ovalRadius * 2, \"px;\\n      height: \").concat(ovalRadius * 2, \"px;\\n      cursor: pointer;\\n    }\\n    \\n  \");\n});\n\nvar ProgressBarDraggable = function ProgressBarDraggable(_ref2) {\n  var _ref2$incompleteColor = _ref2.incompleteColor,\n      incompleteColor = _ref2$incompleteColor === void 0 ? '#e9edf0' : _ref2$incompleteColor,\n      _ref2$completedColor = _ref2.completedColor,\n      completedColor = _ref2$completedColor === void 0 ? '#5698d3' : _ref2$completedColor,\n      _ref2$completedPercen = _ref2.completedPercent,\n      completedPercent = _ref2$completedPercen === void 0 ? 0 : _ref2$completedPercen,\n      _ref2$thickness = _ref2.thickness,\n      thickness = _ref2$thickness === void 0 ? 6 : _ref2$thickness,\n      _ref2$withDragThumb = _ref2.withDragThumb,\n      withDragThumb = _ref2$withDragThumb === void 0 ? true : _ref2$withDragThumb,\n      _ref2$notifySliderCha = _ref2.notifySliderChange,\n      notifySliderChange = _ref2$notifySliderCha === void 0 ? function () {} : _ref2$notifySliderCha,\n      _ref2$ovalRadius = _ref2.ovalRadius,\n      ovalRadius = _ref2$ovalRadius === void 0 ? 8 : _ref2$ovalRadius;\n\n  var _React$useState = React.useState(completedPercent),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      progressPercent = _React$useState2[0],\n      setProgressPercent = _React$useState2[1];\n\n  useEffect(function () {\n    setProgressPercent(completedPercent);\n  }, [completedPercent]);\n\n  var handleChange = function handleChange(e) {\n    var sliderPercentNumber = parseInt(e.target.value);\n\n    if (sliderPercentNumber !== NaN) {\n      setProgressPercent(sliderPercentNumber);\n\n      if (sliderPercentNumber >= 0 && sliderPercentNumber <= 100) {\n        //validation for component fixed ranges expected values\n        notifySliderChange(sliderPercentNumber);\n      }\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(SliderDraggable, {\n    thickness: thickness,\n    completedColor: completedColor,\n    completedPercent: progressPercent,\n    incompleteColor: incompleteColor,\n    withDragThumb: withDragThumb,\n    ovalRadius: ovalRadius,\n    value: progressPercent,\n    type: \"range\",\n    onChange: function onChange(e) {\n      return handleChange(e);\n    },\n    notifySliderChange: notifySliderChange,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 5\n    }\n  });\n};\n\nexport default ProgressBarDraggable;","map":{"version":3,"sources":["/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/atoms/ProgressBarDraggable/index.tsx"],"names":["React","useEffect","styled","SliderDraggable","input","completedColor","completedPercent","thickness","theme","incompleteColor","ovalRadius","colors","primary","main","ProgressBarDraggable","withDragThumb","notifySliderChange","useState","progressPercent","setProgressPercent","handleChange","e","sliderPercentNumber","parseInt","target","value","NaN"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react'\nimport styled from 'styled-components'\n\nexport interface ProgressBarDraggableProps {\n  incompleteColor?: string\n  completedColor?: string\n  completedPercent?: number\n  thickness?: number\n  withDragThumb?: boolean\n  ovalRadius: number\n  borderThickness?: number\n  notifySliderChange: (newPercent: number) => void\n}\n// All Numbers in pixels\nexport type ovalRadiusType = 2 | 5 | 10 | 15\nexport type thicknessType = 2 | 4 | 6 | 8 | 10\n\nconst SliderDraggable = styled.input<ProgressBarDraggableProps>`\n  ${({ completedColor, completedPercent = 0, thickness = 6, theme, incompleteColor = \"#e9edf0\", \n  ovalRadius = 10 }) =>\n    `\n    background: linear-gradient(to right, ${completedColor?completedColor:theme?.colors?.primary?.main} 0%, ${completedColor?completedColor:theme?.colors?.primary?.main} ${completedPercent}%, ${incompleteColor} ${completedPercent}%, ${incompleteColor} 100%);\n    border: solid 1px #82CFD0;\n    border-radius: 2px;\n    width: 100%;\n    height: ${thickness}px;\n    outline: none;\n    opacity: 0.85;\n    transition: background 150ms ease-in;\n    transition: opacity 0.2s;\n    -webkit-appearance: none;\n    \n    &::-webkit-slider-thumb {\n      border: 3px solid ${completedColor?completedColor:theme?.colors?.primary?.main};\n      border-radius: 50%;\n      background-color: #fffff2;\n      -webkit-appearance: none;\n      appearance: none;\n      width: ${ovalRadius*2}px;\n      height: ${ovalRadius*2}px;\n      cursor: pointer;\n    }\n    \n  `}\n`\n\nconst ProgressBarDraggable = ({\n  incompleteColor = '#e9edf0',\n  completedColor = '#5698d3',\n  completedPercent = 0,\n  thickness = 6,\n  withDragThumb = true,\n  notifySliderChange = () => {},\n  ovalRadius = 8\n}: Partial<ProgressBarDraggableProps>) => {\n  const [progressPercent, setProgressPercent] = React.useState(completedPercent);\n\n  useEffect(() => {\n    setProgressPercent(completedPercent);\n  }, [completedPercent])\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    let sliderPercentNumber = parseInt(e.target.value)\n    if (sliderPercentNumber !== NaN) {\n      setProgressPercent(sliderPercentNumber);\n      if (sliderPercentNumber >= 0 && sliderPercentNumber <= 100) { //validation for component fixed ranges expected values\n        notifySliderChange(sliderPercentNumber)\n      }\n    }\n  };\n  return (\n    <SliderDraggable \n      thickness={thickness} \n      completedColor={completedColor}\n      completedPercent={progressPercent}\n      incompleteColor={incompleteColor}\n      withDragThumb={withDragThumb}\n      ovalRadius={ovalRadius}\n      value={progressPercent}\n      type=\"range\"\n      onChange={(e) => handleChange(e)}\n      notifySliderChange={notifySliderChange}\n    >\n      \n    </SliderDraggable>\n  )\n\n}\n\nexport default ProgressBarDraggable\n"]},"metadata":{},"sourceType":"module"}