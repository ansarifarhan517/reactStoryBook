{"ast":null,"code":"import _defineProperty from \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nvar _parameters;\n\n/* eslint-disable */\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource; // @ts-ignore\n\n\nvar addSourceDecorator = require(\"@storybook/source-loader/preview\").addSource; // @ts-ignore\n\n\nvar __SOURCE_PREFIX__ = \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/molecules/DatePicker/stories\"; // @ts-ignore\n\nvar __STORY__ = \"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/molecules/DatePicker/stories\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"\\\\n\\\\n// @ts-nocheck\\\\n// @ts-ignore\\\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\\\n// @ts-ignore\\\\nvar addSourceDecorator = require(\\\\\\\"@storybook/source-loader/preview\\\\\\\").addSource;\\\\n// @ts-ignore\\\\nvar __SOURCE_PREFIX__ = \\\\\\\"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/molecules/DatePicker/stories\\\\\\\";\\\\n// @ts-ignore\\\\nvar __STORY__ = \\\\\\\"import React from 'react'\\\\\\\\nimport { DatePicker, DateRangePicker } from '../../DatePicker'\\\\\\\\nimport { tDateRangeChildren } from '../interfaces'\\\\\\\\nimport { path } from '../..'\\\\\\\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\\\\\\\nimport { boolean, text, object } from '@storybook/addon-knobs'\\\\\\\\nimport { action } from '@storybook/addon-actions'\\\\\\\\nimport { TextInputStyled } from '../Styles/DateRange.styles'\\\\\\\\nimport TextInput from '../../TextInput'\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/DatePicker`,\\\\\\\\n  component: DatePicker\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst getFormattedDate = (date: Date) => {\\\\\\\\n  const todayTime = date\\\\\\\\n  const month = todayTime.getMonth() + 1\\\\\\\\n  const day = todayTime.getDate()\\\\\\\\n  const year = todayTime.getFullYear()\\\\\\\\n  const hours = todayTime.getHours()\\\\\\\\n  const minutes = todayTime.getMinutes()\\\\\\\\n  const AM = todayTime.getHours() > 12 ? 'PM' : 'AM'\\\\\\\\n\\\\\\\\n  return month + '/' + day + '/' + year + '-' + hours + ':' + minutes + ' ' + AM\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const withDateRange = () => {\\\\\\\\n  const startDate = new Date(\\\\\\\\n    new Date().getFullYear(),\\\\\\\\n    new Date().getMonth(),\\\\\\\\n    new Date().getDate() - 8\\\\\\\\n  )\\\\\\\\n\\\\\\\\n  const endDate = new Date(\\\\\\\\n    new Date().getFullYear(),\\\\\\\\n    new Date().getMonth(),\\\\\\\\n    new Date().getDate() - 1\\\\\\\\n  )\\\\\\\\n\\\\\\\\n  const isInValidDate = (d: any) => {\\\\\\\\n    return d instanceof Date && isNaN(d.getTime())\\\\\\\\n  }\\\\\\\\n  // const convertStringToDate = (input: string) => {\\\\\\\\n  //   const finalDate = new Date()\\\\\\\\n  //   const dateArray = input.trim().split('/')\\\\\\\\n  //   const month = parseInt(dateArray[0])\\\\\\\\n  //   if (month <= 12) {\\\\\\\\n  //     //  valid day\\\\\\\\n  //     finalDate.setMonth(month - 1)\\\\\\\\n\\\\\\\\n  //     // set Month\\\\\\\\n  //     const day = parseInt(dateArray[1])\\\\\\\\n  //     if (day <= 31) {\\\\\\\\n  //       finalDate.setDate(day)\\\\\\\\n\\\\\\\\n  //       // set year\\\\\\\\n  //       const year = parseInt(dateArray[2])\\\\\\\\n  //       if (year <= 2050 && year >= 1970) {\\\\\\\\n  //         finalDate.setFullYear(year)\\\\\\\\n\\\\\\\\n  //         // return finalDate\\\\\\\\n  //         return finalDate\\\\\\\\n  //       }\\\\\\\\n  //     }\\\\\\\\n  //   }\\\\\\\\n  //   return undefined\\\\\\\\n  // }\\\\\\\\n  const convertStringToDate = (input: string) => {\\\\\\\\n    const newDate = new Date(input)\\\\\\\\n    if (isInValidDate(newDate)) {\\\\\\\\n      return undefined\\\\\\\\n    } else {\\\\\\\\n      console.log('String to Date: ', newDate)\\\\\\\\n      return newDate\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <DateRangePicker\\\\\\\\n        onFromChange={action('From Clicked')}\\\\\\\\n        onToChange={action('To Clicked')}\\\\\\\\n        onApply={action('Apply Clicked')}\\\\\\\\n        onCancel={action('Cancel Clicked')}\\\\\\\\n        label={text('Label', 'Date Range')}\\\\\\\\n        variant='daterange'\\\\\\\\n        timeFormat={12}\\\\\\\\n        showTime={boolean('Show time', true)}\\\\\\\\n        style={object('style', {\\\\\\\\n          position: 'absolute',\\\\\\\\n          left: '0px'\\\\\\\\n        })}\\\\\\\\n        startDate={startDate}\\\\\\\\n        endDate={endDate}\\\\\\\\n        fromDateFormatter={getFormattedDate}\\\\\\\\n        toDateFormatter={getFormattedDate}\\\\\\\\n        stringToDate={convertStringToDate}\\\\\\\\n        open={boolean('open', false)}\\\\\\\\n      >\\\\\\\\n        {({ value, open, setOpen }: tDateRangeChildren) => (\\\\\\\\n          <div>\\\\\\\\n            <TextInputStyled onClick={() => setOpen(!open)}>\\\\\\\\n              <TextInput\\\\\\\\n                id='someId'\\\\\\\\n                name='someId'\\\\\\\\n                className='someClassname'\\\\\\\\n                label='Holidays'\\\\\\\\n                variant='basic'\\\\\\\\n                labelColor='text.inputLabel.default'\\\\\\\\n                placeholder='Please Click Here'\\\\\\\\n                fullWidth\\\\\\\\n                value={value?.toString()}\\\\\\\\n                onChange={action('On change clicked')}\\\\\\\\n              />\\\\\\\\n            </TextInputStyled>\\\\\\\\n          </div>\\\\\\\\n        )}\\\\\\\\n      </DateRangePicker>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\";\\\\n// @ts-ignore\\\\nvar __ADDS_MAP__ = {};\\\\n// @ts-ignore\\\\nvar __MAIN_FILE_LOCATION__ = \\\\\\\"/DateRange.stories.tsx\\\\\\\";\\\\n// @ts-ignore\\\\nvar __MODULE_DEPENDENCIES__ = [];\\\\n// @ts-ignore\\\\nvar __LOCAL_DEPENDENCIES__ = {};\\\\n// @ts-ignore\\\\nvar __IDS_TO_FRAMEWORKS__ = {};\\\\n        \\\\nimport React from 'react'\\\\nimport { DatePicker, DateRangePicker } from '../../DatePicker'\\\\nimport { tDateRangeChildren } from '../interfaces'\\\\nimport { path } from '../..'\\\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\\\nimport { boolean, text, object } from '@storybook/addon-knobs'\\\\nimport { action } from '@storybook/addon-actions'\\\\nimport { TextInputStyled } from '../Styles/DateRange.styles'\\\\nimport TextInput from '../../TextInput'\\\\n\\\\nexport default {parameters: {\\\\\\\"storySource\\\\\\\":{\\\\\\\"source\\\\\\\":\\\\\\\"import React from 'react'\\\\\\\\nimport { DatePicker, DateRangePicker } from '../../DatePicker'\\\\\\\\nimport { tDateRangeChildren } from '../interfaces'\\\\\\\\nimport { path } from '../..'\\\\\\\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\\\\\\\nimport { boolean, text, object } from '@storybook/addon-knobs'\\\\\\\\nimport { action } from '@storybook/addon-actions'\\\\\\\\nimport { TextInputStyled } from '../Styles/DateRange.styles'\\\\\\\\nimport TextInput from '../../TextInput'\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/DatePicker`,\\\\\\\\n  component: DatePicker\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst getFormattedDate = (date: Date) => {\\\\\\\\n  const todayTime = date\\\\\\\\n  const month = todayTime.getMonth() + 1\\\\\\\\n  const day = todayTime.getDate()\\\\\\\\n  const year = todayTime.getFullYear()\\\\\\\\n  const hours = todayTime.getHours()\\\\\\\\n  const minutes = todayTime.getMinutes()\\\\\\\\n  const AM = todayTime.getHours() > 12 ? 'PM' : 'AM'\\\\\\\\n\\\\\\\\n  return month + '/' + day + '/' + year + '-' + hours + ':' + minutes + ' ' + AM\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const withDateRange = () => {\\\\\\\\n  const startDate = new Date(\\\\\\\\n    new Date().getFullYear(),\\\\\\\\n    new Date().getMonth(),\\\\\\\\n    new Date().getDate() - 8\\\\\\\\n  )\\\\\\\\n\\\\\\\\n  const endDate = new Date(\\\\\\\\n    new Date().getFullYear(),\\\\\\\\n    new Date().getMonth(),\\\\\\\\n    new Date().getDate() - 1\\\\\\\\n  )\\\\\\\\n\\\\\\\\n  const isInValidDate = (d: any) => {\\\\\\\\n    return d instanceof Date && isNaN(d.getTime())\\\\\\\\n  }\\\\\\\\n  // const convertStringToDate = (input: string) => {\\\\\\\\n  //   const finalDate = new Date()\\\\\\\\n  //   const dateArray = input.trim().split('/')\\\\\\\\n  //   const month = parseInt(dateArray[0])\\\\\\\\n  //   if (month <= 12) {\\\\\\\\n  //     //  valid day\\\\\\\\n  //     finalDate.setMonth(month - 1)\\\\\\\\n\\\\\\\\n  //     // set Month\\\\\\\\n  //     const day = parseInt(dateArray[1])\\\\\\\\n  //     if (day <= 31) {\\\\\\\\n  //       finalDate.setDate(day)\\\\\\\\n\\\\\\\\n  //       // set year\\\\\\\\n  //       const year = parseInt(dateArray[2])\\\\\\\\n  //       if (year <= 2050 && year >= 1970) {\\\\\\\\n  //         finalDate.setFullYear(year)\\\\\\\\n\\\\\\\\n  //         // return finalDate\\\\\\\\n  //         return finalDate\\\\\\\\n  //       }\\\\\\\\n  //     }\\\\\\\\n  //   }\\\\\\\\n  //   return undefined\\\\\\\\n  // }\\\\\\\\n  const convertStringToDate = (input: string) => {\\\\\\\\n    const newDate = new Date(input)\\\\\\\\n    if (isInValidDate(newDate)) {\\\\\\\\n      return undefined\\\\\\\\n    } else {\\\\\\\\n      console.log('String to Date: ', newDate)\\\\\\\\n      return newDate\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <DateRangePicker\\\\\\\\n        onFromChange={action('From Clicked')}\\\\\\\\n        onToChange={action('To Clicked')}\\\\\\\\n        onApply={action('Apply Clicked')}\\\\\\\\n        onCancel={action('Cancel Clicked')}\\\\\\\\n        label={text('Label', 'Date Range')}\\\\\\\\n        variant='daterange'\\\\\\\\n        timeFormat={12}\\\\\\\\n        showTime={boolean('Show time', true)}\\\\\\\\n        style={object('style', {\\\\\\\\n          position: 'absolute',\\\\\\\\n          left: '0px'\\\\\\\\n        })}\\\\\\\\n        startDate={startDate}\\\\\\\\n        endDate={endDate}\\\\\\\\n        fromDateFormatter={getFormattedDate}\\\\\\\\n        toDateFormatter={getFormattedDate}\\\\\\\\n        stringToDate={convertStringToDate}\\\\\\\\n        open={boolean('open', false)}\\\\\\\\n      >\\\\\\\\n        {({ value, open, setOpen }: tDateRangeChildren) => (\\\\\\\\n          <div>\\\\\\\\n            <TextInputStyled onClick={() => setOpen(!open)}>\\\\\\\\n              <TextInput\\\\\\\\n                id='someId'\\\\\\\\n                name='someId'\\\\\\\\n                className='someClassname'\\\\\\\\n                label='Holidays'\\\\\\\\n                variant='basic'\\\\\\\\n                labelColor='text.inputLabel.default'\\\\\\\\n                placeholder='Please Click Here'\\\\\\\\n                fullWidth\\\\\\\\n                value={value?.toString()}\\\\\\\\n                onChange={action('On change clicked')}\\\\\\\\n              />\\\\\\\\n            </TextInputStyled>\\\\\\\\n          </div>\\\\\\\\n        )}\\\\\\\\n      </DateRangePicker>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\",\\\\\\\"locationsMap\\\\\\\":{}},},\\\\n  title: `${path}/DatePicker`,\\\\n  component: DatePicker\\\\n}\\\\n\\\\nconst getFormattedDate = (date: Date) => {\\\\n  const todayTime = date\\\\n  const month = todayTime.getMonth() + 1\\\\n  const day = todayTime.getDate()\\\\n  const year = todayTime.getFullYear()\\\\n  const hours = todayTime.getHours()\\\\n  const minutes = todayTime.getMinutes()\\\\n  const AM = todayTime.getHours() > 12 ? 'PM' : 'AM'\\\\n\\\\n  return month + '/' + day + '/' + year + '-' + hours + ':' + minutes + ' ' + AM\\\\n}\\\\n\\\\nexport const withDateRange = addSourceDecorator(() => {\\\\n  const startDate = new Date(\\\\n    new Date().getFullYear(),\\\\n    new Date().getMonth(),\\\\n    new Date().getDate() - 8\\\\n  )\\\\n\\\\n  const endDate = new Date(\\\\n    new Date().getFullYear(),\\\\n    new Date().getMonth(),\\\\n    new Date().getDate() - 1\\\\n  )\\\\n\\\\n  const isInValidDate = (d: any) => {\\\\n    return d instanceof Date && isNaN(d.getTime())\\\\n  }\\\\n  // const convertStringToDate = (input: string) => {\\\\n  //   const finalDate = new Date()\\\\n  //   const dateArray = input.trim().split('/')\\\\n  //   const month = parseInt(dateArray[0])\\\\n  //   if (month <= 12) {\\\\n  //     //  valid day\\\\n  //     finalDate.setMonth(month - 1)\\\\n\\\\n  //     // set Month\\\\n  //     const day = parseInt(dateArray[1])\\\\n  //     if (day <= 31) {\\\\n  //       finalDate.setDate(day)\\\\n\\\\n  //       // set year\\\\n  //       const year = parseInt(dateArray[2])\\\\n  //       if (year <= 2050 && year >= 1970) {\\\\n  //         finalDate.setFullYear(year)\\\\n\\\\n  //         // return finalDate\\\\n  //         return finalDate\\\\n  //       }\\\\n  //     }\\\\n  //   }\\\\n  //   return undefined\\\\n  // }\\\\n  const convertStringToDate = (input: string) => {\\\\n    const newDate = new Date(input)\\\\n    if (isInValidDate(newDate)) {\\\\n      return undefined\\\\n    } else {\\\\n      console.log('String to Date: ', newDate)\\\\n      return newDate\\\\n    }\\\\n  }\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <DateRangePicker\\\\n        onFromChange={action('From Clicked')}\\\\n        onToChange={action('To Clicked')}\\\\n        onApply={action('Apply Clicked')}\\\\n        onCancel={action('Cancel Clicked')}\\\\n        label={text('Label', 'Date Range')}\\\\n        variant='daterange'\\\\n        timeFormat={12}\\\\n        showTime={boolean('Show time', true)}\\\\n        style={object('style', {\\\\n          position: 'absolute',\\\\n          left: '0px'\\\\n        })}\\\\n        startDate={startDate}\\\\n        endDate={endDate}\\\\n        fromDateFormatter={getFormattedDate}\\\\n        toDateFormatter={getFormattedDate}\\\\n        stringToDate={convertStringToDate}\\\\n        open={boolean('open', false)}\\\\n      >\\\\n        {({ value, open, setOpen }: tDateRangeChildren) => (\\\\n          <div>\\\\n            <TextInputStyled onClick={() => setOpen(!open)}>\\\\n              <TextInput\\\\n                id='someId'\\\\n                name='someId'\\\\n                className='someClassname'\\\\n                label='Holidays'\\\\n                variant='basic'\\\\n                labelColor='text.inputLabel.default'\\\\n                placeholder='Please Click Here'\\\\n                fullWidth\\\\n                value={value?.toString()}\\\\n                onChange={action('On change clicked')}\\\\n              />\\\\n            </TextInputStyled>\\\\n          </div>\\\\n        )}\\\\n      </DateRangePicker>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/DateRange.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\n\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/molecules/DatePicker/stories\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"import React from 'react'\\\\nimport { DatePicker, DateRangePicker } from '../../DatePicker'\\\\nimport { tDateRangeChildren } from '../interfaces'\\\\nimport { path } from '../..'\\\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\\\nimport { boolean, text, object } from '@storybook/addon-knobs'\\\\nimport { action } from '@storybook/addon-actions'\\\\nimport { TextInputStyled } from '../Styles/DateRange.styles'\\\\nimport TextInput from '../../TextInput'\\\\n\\\\nexport default {\\\\n  title: `${path}/DatePicker`,\\\\n  component: DatePicker\\\\n}\\\\n\\\\nconst getFormattedDate = (date: Date) => {\\\\n  const todayTime = date\\\\n  const month = todayTime.getMonth() + 1\\\\n  const day = todayTime.getDate()\\\\n  const year = todayTime.getFullYear()\\\\n  const hours = todayTime.getHours()\\\\n  const minutes = todayTime.getMinutes()\\\\n  const AM = todayTime.getHours() > 12 ? 'PM' : 'AM'\\\\n\\\\n  return month + '/' + day + '/' + year + '-' + hours + ':' + minutes + ' ' + AM\\\\n}\\\\n\\\\nexport const withDateRange = () => {\\\\n  const startDate = new Date(\\\\n    new Date().getFullYear(),\\\\n    new Date().getMonth(),\\\\n    new Date().getDate() - 8\\\\n  )\\\\n\\\\n  const endDate = new Date(\\\\n    new Date().getFullYear(),\\\\n    new Date().getMonth(),\\\\n    new Date().getDate() - 1\\\\n  )\\\\n\\\\n  const isInValidDate = (d: any) => {\\\\n    return d instanceof Date && isNaN(d.getTime())\\\\n  }\\\\n  // const convertStringToDate = (input: string) => {\\\\n  //   const finalDate = new Date()\\\\n  //   const dateArray = input.trim().split('/')\\\\n  //   const month = parseInt(dateArray[0])\\\\n  //   if (month <= 12) {\\\\n  //     //  valid day\\\\n  //     finalDate.setMonth(month - 1)\\\\n\\\\n  //     // set Month\\\\n  //     const day = parseInt(dateArray[1])\\\\n  //     if (day <= 31) {\\\\n  //       finalDate.setDate(day)\\\\n\\\\n  //       // set year\\\\n  //       const year = parseInt(dateArray[2])\\\\n  //       if (year <= 2050 && year >= 1970) {\\\\n  //         finalDate.setFullYear(year)\\\\n\\\\n  //         // return finalDate\\\\n  //         return finalDate\\\\n  //       }\\\\n  //     }\\\\n  //   }\\\\n  //   return undefined\\\\n  // }\\\\n  const convertStringToDate = (input: string) => {\\\\n    const newDate = new Date(input)\\\\n    if (isInValidDate(newDate)) {\\\\n      return undefined\\\\n    } else {\\\\n      console.log('String to Date: ', newDate)\\\\n      return newDate\\\\n    }\\\\n  }\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <DateRangePicker\\\\n        onFromChange={action('From Clicked')}\\\\n        onToChange={action('To Clicked')}\\\\n        onApply={action('Apply Clicked')}\\\\n        onCancel={action('Cancel Clicked')}\\\\n        label={text('Label', 'Date Range')}\\\\n        variant='daterange'\\\\n        timeFormat={12}\\\\n        showTime={boolean('Show time', true)}\\\\n        style={object('style', {\\\\n          position: 'absolute',\\\\n          left: '0px'\\\\n        })}\\\\n        startDate={startDate}\\\\n        endDate={endDate}\\\\n        fromDateFormatter={getFormattedDate}\\\\n        toDateFormatter={getFormattedDate}\\\\n        stringToDate={convertStringToDate}\\\\n        open={boolean('open', false)}\\\\n      >\\\\n        {({ value, open, setOpen }: tDateRangeChildren) => (\\\\n          <div>\\\\n            <TextInputStyled onClick={() => setOpen(!open)}>\\\\n              <TextInput\\\\n                id='someId'\\\\n                name='someId'\\\\n                className='someClassname'\\\\n                label='Holidays'\\\\n                variant='basic'\\\\n                labelColor='text.inputLabel.default'\\\\n                placeholder='Please Click Here'\\\\n                fullWidth\\\\n                value={value?.toString()}\\\\n                onChange={action('On change clicked')}\\\\n              />\\\\n            </TextInputStyled>\\\\n          </div>\\\\n        )}\\\\n      </DateRangePicker>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/DateRange.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\nimport React from 'react'\\nimport { DatePicker, DateRangePicker } from '../../DatePicker'\\nimport { tDateRangeChildren } from '../interfaces'\\nimport { path } from '../..'\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\nimport { boolean, text, object } from '@storybook/addon-knobs'\\nimport { action } from '@storybook/addon-actions'\\nimport { TextInputStyled } from '../Styles/DateRange.styles'\\nimport TextInput from '../../TextInput'\\n\\nexport default {parameters: {\\\"storySource\\\":{\\\"source\\\":\\\"\\\\n\\\\n// @ts-nocheck\\\\n// @ts-ignore\\\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\\\n// @ts-ignore\\\\nvar addSourceDecorator = require(\\\\\\\"@storybook/source-loader/preview\\\\\\\").addSource;\\\\n// @ts-ignore\\\\nvar __SOURCE_PREFIX__ = \\\\\\\"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/molecules/DatePicker/stories\\\\\\\";\\\\n// @ts-ignore\\\\nvar __STORY__ = \\\\\\\"import React from 'react'\\\\\\\\nimport { DatePicker, DateRangePicker } from '../../DatePicker'\\\\\\\\nimport { tDateRangeChildren } from '../interfaces'\\\\\\\\nimport { path } from '../..'\\\\\\\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\\\\\\\nimport { boolean, text, object } from '@storybook/addon-knobs'\\\\\\\\nimport { action } from '@storybook/addon-actions'\\\\\\\\nimport { TextInputStyled } from '../Styles/DateRange.styles'\\\\\\\\nimport TextInput from '../../TextInput'\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/DatePicker`,\\\\\\\\n  component: DatePicker\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst getFormattedDate = (date: Date) => {\\\\\\\\n  const todayTime = date\\\\\\\\n  const month = todayTime.getMonth() + 1\\\\\\\\n  const day = todayTime.getDate()\\\\\\\\n  const year = todayTime.getFullYear()\\\\\\\\n  const hours = todayTime.getHours()\\\\\\\\n  const minutes = todayTime.getMinutes()\\\\\\\\n  const AM = todayTime.getHours() > 12 ? 'PM' : 'AM'\\\\\\\\n\\\\\\\\n  return month + '/' + day + '/' + year + '-' + hours + ':' + minutes + ' ' + AM\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const withDateRange = () => {\\\\\\\\n  const startDate = new Date(\\\\\\\\n    new Date().getFullYear(),\\\\\\\\n    new Date().getMonth(),\\\\\\\\n    new Date().getDate() - 8\\\\\\\\n  )\\\\\\\\n\\\\\\\\n  const endDate = new Date(\\\\\\\\n    new Date().getFullYear(),\\\\\\\\n    new Date().getMonth(),\\\\\\\\n    new Date().getDate() - 1\\\\\\\\n  )\\\\\\\\n\\\\\\\\n  const isInValidDate = (d: any) => {\\\\\\\\n    return d instanceof Date && isNaN(d.getTime())\\\\\\\\n  }\\\\\\\\n  // const convertStringToDate = (input: string) => {\\\\\\\\n  //   const finalDate = new Date()\\\\\\\\n  //   const dateArray = input.trim().split('/')\\\\\\\\n  //   const month = parseInt(dateArray[0])\\\\\\\\n  //   if (month <= 12) {\\\\\\\\n  //     //  valid day\\\\\\\\n  //     finalDate.setMonth(month - 1)\\\\\\\\n\\\\\\\\n  //     // set Month\\\\\\\\n  //     const day = parseInt(dateArray[1])\\\\\\\\n  //     if (day <= 31) {\\\\\\\\n  //       finalDate.setDate(day)\\\\\\\\n\\\\\\\\n  //       // set year\\\\\\\\n  //       const year = parseInt(dateArray[2])\\\\\\\\n  //       if (year <= 2050 && year >= 1970) {\\\\\\\\n  //         finalDate.setFullYear(year)\\\\\\\\n\\\\\\\\n  //         // return finalDate\\\\\\\\n  //         return finalDate\\\\\\\\n  //       }\\\\\\\\n  //     }\\\\\\\\n  //   }\\\\\\\\n  //   return undefined\\\\\\\\n  // }\\\\\\\\n  const convertStringToDate = (input: string) => {\\\\\\\\n    const newDate = new Date(input)\\\\\\\\n    if (isInValidDate(newDate)) {\\\\\\\\n      return undefined\\\\\\\\n    } else {\\\\\\\\n      console.log('String to Date: ', newDate)\\\\\\\\n      return newDate\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <DateRangePicker\\\\\\\\n        onFromChange={action('From Clicked')}\\\\\\\\n        onToChange={action('To Clicked')}\\\\\\\\n        onApply={action('Apply Clicked')}\\\\\\\\n        onCancel={action('Cancel Clicked')}\\\\\\\\n        label={text('Label', 'Date Range')}\\\\\\\\n        variant='daterange'\\\\\\\\n        timeFormat={12}\\\\\\\\n        showTime={boolean('Show time', true)}\\\\\\\\n        style={object('style', {\\\\\\\\n          position: 'absolute',\\\\\\\\n          left: '0px'\\\\\\\\n        })}\\\\\\\\n        startDate={startDate}\\\\\\\\n        endDate={endDate}\\\\\\\\n        fromDateFormatter={getFormattedDate}\\\\\\\\n        toDateFormatter={getFormattedDate}\\\\\\\\n        stringToDate={convertStringToDate}\\\\\\\\n        open={boolean('open', false)}\\\\\\\\n      >\\\\\\\\n        {({ value, open, setOpen }: tDateRangeChildren) => (\\\\\\\\n          <div>\\\\\\\\n            <TextInputStyled onClick={() => setOpen(!open)}>\\\\\\\\n              <TextInput\\\\\\\\n                id='someId'\\\\\\\\n                name='someId'\\\\\\\\n                className='someClassname'\\\\\\\\n                label='Holidays'\\\\\\\\n                variant='basic'\\\\\\\\n                labelColor='text.inputLabel.default'\\\\\\\\n                placeholder='Please Click Here'\\\\\\\\n                fullWidth\\\\\\\\n                value={value?.toString()}\\\\\\\\n                onChange={action('On change clicked')}\\\\\\\\n              />\\\\\\\\n            </TextInputStyled>\\\\\\\\n          </div>\\\\\\\\n        )}\\\\\\\\n      </DateRangePicker>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\";\\\\n// @ts-ignore\\\\nvar __ADDS_MAP__ = {};\\\\n// @ts-ignore\\\\nvar __MAIN_FILE_LOCATION__ = \\\\\\\"/DateRange.stories.tsx\\\\\\\";\\\\n// @ts-ignore\\\\nvar __MODULE_DEPENDENCIES__ = [];\\\\n// @ts-ignore\\\\nvar __LOCAL_DEPENDENCIES__ = {};\\\\n// @ts-ignore\\\\nvar __IDS_TO_FRAMEWORKS__ = {};\\\\n        \\\\nimport React from 'react'\\\\nimport { DatePicker, DateRangePicker } from '../../DatePicker'\\\\nimport { tDateRangeChildren } from '../interfaces'\\\\nimport { path } from '../..'\\\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\\\nimport { boolean, text, object } from '@storybook/addon-knobs'\\\\nimport { action } from '@storybook/addon-actions'\\\\nimport { TextInputStyled } from '../Styles/DateRange.styles'\\\\nimport TextInput from '../../TextInput'\\\\n\\\\nexport default {parameters: {\\\\\\\"storySource\\\\\\\":{\\\\\\\"source\\\\\\\":\\\\\\\"import React from 'react'\\\\\\\\nimport { DatePicker, DateRangePicker } from '../../DatePicker'\\\\\\\\nimport { tDateRangeChildren } from '../interfaces'\\\\\\\\nimport { path } from '../..'\\\\\\\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\\\\\\\nimport { boolean, text, object } from '@storybook/addon-knobs'\\\\\\\\nimport { action } from '@storybook/addon-actions'\\\\\\\\nimport { TextInputStyled } from '../Styles/DateRange.styles'\\\\\\\\nimport TextInput from '../../TextInput'\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/DatePicker`,\\\\\\\\n  component: DatePicker\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst getFormattedDate = (date: Date) => {\\\\\\\\n  const todayTime = date\\\\\\\\n  const month = todayTime.getMonth() + 1\\\\\\\\n  const day = todayTime.getDate()\\\\\\\\n  const year = todayTime.getFullYear()\\\\\\\\n  const hours = todayTime.getHours()\\\\\\\\n  const minutes = todayTime.getMinutes()\\\\\\\\n  const AM = todayTime.getHours() > 12 ? 'PM' : 'AM'\\\\\\\\n\\\\\\\\n  return month + '/' + day + '/' + year + '-' + hours + ':' + minutes + ' ' + AM\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const withDateRange = () => {\\\\\\\\n  const startDate = new Date(\\\\\\\\n    new Date().getFullYear(),\\\\\\\\n    new Date().getMonth(),\\\\\\\\n    new Date().getDate() - 8\\\\\\\\n  )\\\\\\\\n\\\\\\\\n  const endDate = new Date(\\\\\\\\n    new Date().getFullYear(),\\\\\\\\n    new Date().getMonth(),\\\\\\\\n    new Date().getDate() - 1\\\\\\\\n  )\\\\\\\\n\\\\\\\\n  const isInValidDate = (d: any) => {\\\\\\\\n    return d instanceof Date && isNaN(d.getTime())\\\\\\\\n  }\\\\\\\\n  // const convertStringToDate = (input: string) => {\\\\\\\\n  //   const finalDate = new Date()\\\\\\\\n  //   const dateArray = input.trim().split('/')\\\\\\\\n  //   const month = parseInt(dateArray[0])\\\\\\\\n  //   if (month <= 12) {\\\\\\\\n  //     //  valid day\\\\\\\\n  //     finalDate.setMonth(month - 1)\\\\\\\\n\\\\\\\\n  //     // set Month\\\\\\\\n  //     const day = parseInt(dateArray[1])\\\\\\\\n  //     if (day <= 31) {\\\\\\\\n  //       finalDate.setDate(day)\\\\\\\\n\\\\\\\\n  //       // set year\\\\\\\\n  //       const year = parseInt(dateArray[2])\\\\\\\\n  //       if (year <= 2050 && year >= 1970) {\\\\\\\\n  //         finalDate.setFullYear(year)\\\\\\\\n\\\\\\\\n  //         // return finalDate\\\\\\\\n  //         return finalDate\\\\\\\\n  //       }\\\\\\\\n  //     }\\\\\\\\n  //   }\\\\\\\\n  //   return undefined\\\\\\\\n  // }\\\\\\\\n  const convertStringToDate = (input: string) => {\\\\\\\\n    const newDate = new Date(input)\\\\\\\\n    if (isInValidDate(newDate)) {\\\\\\\\n      return undefined\\\\\\\\n    } else {\\\\\\\\n      console.log('String to Date: ', newDate)\\\\\\\\n      return newDate\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <DateRangePicker\\\\\\\\n        onFromChange={action('From Clicked')}\\\\\\\\n        onToChange={action('To Clicked')}\\\\\\\\n        onApply={action('Apply Clicked')}\\\\\\\\n        onCancel={action('Cancel Clicked')}\\\\\\\\n        label={text('Label', 'Date Range')}\\\\\\\\n        variant='daterange'\\\\\\\\n        timeFormat={12}\\\\\\\\n        showTime={boolean('Show time', true)}\\\\\\\\n        style={object('style', {\\\\\\\\n          position: 'absolute',\\\\\\\\n          left: '0px'\\\\\\\\n        })}\\\\\\\\n        startDate={startDate}\\\\\\\\n        endDate={endDate}\\\\\\\\n        fromDateFormatter={getFormattedDate}\\\\\\\\n        toDateFormatter={getFormattedDate}\\\\\\\\n        stringToDate={convertStringToDate}\\\\\\\\n        open={boolean('open', false)}\\\\\\\\n      >\\\\\\\\n        {({ value, open, setOpen }: tDateRangeChildren) => (\\\\\\\\n          <div>\\\\\\\\n            <TextInputStyled onClick={() => setOpen(!open)}>\\\\\\\\n              <TextInput\\\\\\\\n                id='someId'\\\\\\\\n                name='someId'\\\\\\\\n                className='someClassname'\\\\\\\\n                label='Holidays'\\\\\\\\n                variant='basic'\\\\\\\\n                labelColor='text.inputLabel.default'\\\\\\\\n                placeholder='Please Click Here'\\\\\\\\n                fullWidth\\\\\\\\n                value={value?.toString()}\\\\\\\\n                onChange={action('On change clicked')}\\\\\\\\n              />\\\\\\\\n            </TextInputStyled>\\\\\\\\n          </div>\\\\\\\\n        )}\\\\\\\\n      </DateRangePicker>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\",\\\\\\\"locationsMap\\\\\\\":{}},},\\\\n  title: `${path}/DatePicker`,\\\\n  component: DatePicker\\\\n}\\\\n\\\\nconst getFormattedDate = (date: Date) => {\\\\n  const todayTime = date\\\\n  const month = todayTime.getMonth() + 1\\\\n  const day = todayTime.getDate()\\\\n  const year = todayTime.getFullYear()\\\\n  const hours = todayTime.getHours()\\\\n  const minutes = todayTime.getMinutes()\\\\n  const AM = todayTime.getHours() > 12 ? 'PM' : 'AM'\\\\n\\\\n  return month + '/' + day + '/' + year + '-' + hours + ':' + minutes + ' ' + AM\\\\n}\\\\n\\\\nexport const withDateRange = addSourceDecorator(() => {\\\\n  const startDate = new Date(\\\\n    new Date().getFullYear(),\\\\n    new Date().getMonth(),\\\\n    new Date().getDate() - 8\\\\n  )\\\\n\\\\n  const endDate = new Date(\\\\n    new Date().getFullYear(),\\\\n    new Date().getMonth(),\\\\n    new Date().getDate() - 1\\\\n  )\\\\n\\\\n  const isInValidDate = (d: any) => {\\\\n    return d instanceof Date && isNaN(d.getTime())\\\\n  }\\\\n  // const convertStringToDate = (input: string) => {\\\\n  //   const finalDate = new Date()\\\\n  //   const dateArray = input.trim().split('/')\\\\n  //   const month = parseInt(dateArray[0])\\\\n  //   if (month <= 12) {\\\\n  //     //  valid day\\\\n  //     finalDate.setMonth(month - 1)\\\\n\\\\n  //     // set Month\\\\n  //     const day = parseInt(dateArray[1])\\\\n  //     if (day <= 31) {\\\\n  //       finalDate.setDate(day)\\\\n\\\\n  //       // set year\\\\n  //       const year = parseInt(dateArray[2])\\\\n  //       if (year <= 2050 && year >= 1970) {\\\\n  //         finalDate.setFullYear(year)\\\\n\\\\n  //         // return finalDate\\\\n  //         return finalDate\\\\n  //       }\\\\n  //     }\\\\n  //   }\\\\n  //   return undefined\\\\n  // }\\\\n  const convertStringToDate = (input: string) => {\\\\n    const newDate = new Date(input)\\\\n    if (isInValidDate(newDate)) {\\\\n      return undefined\\\\n    } else {\\\\n      console.log('String to Date: ', newDate)\\\\n      return newDate\\\\n    }\\\\n  }\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <DateRangePicker\\\\n        onFromChange={action('From Clicked')}\\\\n        onToChange={action('To Clicked')}\\\\n        onApply={action('Apply Clicked')}\\\\n        onCancel={action('Cancel Clicked')}\\\\n        label={text('Label', 'Date Range')}\\\\n        variant='daterange'\\\\n        timeFormat={12}\\\\n        showTime={boolean('Show time', true)}\\\\n        style={object('style', {\\\\n          position: 'absolute',\\\\n          left: '0px'\\\\n        })}\\\\n        startDate={startDate}\\\\n        endDate={endDate}\\\\n        fromDateFormatter={getFormattedDate}\\\\n        toDateFormatter={getFormattedDate}\\\\n        stringToDate={convertStringToDate}\\\\n        open={boolean('open', false)}\\\\n      >\\\\n        {({ value, open, setOpen }: tDateRangeChildren) => (\\\\n          <div>\\\\n            <TextInputStyled onClick={() => setOpen(!open)}>\\\\n              <TextInput\\\\n                id='someId'\\\\n                name='someId'\\\\n                className='someClassname'\\\\n                label='Holidays'\\\\n                variant='basic'\\\\n                labelColor='text.inputLabel.default'\\\\n                placeholder='Please Click Here'\\\\n                fullWidth\\\\n                value={value?.toString()}\\\\n                onChange={action('On change clicked')}\\\\n              />\\\\n            </TextInputStyled>\\\\n          </div>\\\\n        )}\\\\n      </DateRangePicker>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\",\\\"locationsMap\\\":{}},\\\"storySource\\\":{\\\"source\\\":\\\"import React from 'react'\\\\nimport { DatePicker, DateRangePicker } from '../../DatePicker'\\\\nimport { tDateRangeChildren } from '../interfaces'\\\\nimport { path } from '../..'\\\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\\\nimport { boolean, text, object } from '@storybook/addon-knobs'\\\\nimport { action } from '@storybook/addon-actions'\\\\nimport { TextInputStyled } from '../Styles/DateRange.styles'\\\\nimport TextInput from '../../TextInput'\\\\n\\\\nexport default {\\\\n  title: `${path}/DatePicker`,\\\\n  component: DatePicker\\\\n}\\\\n\\\\nconst getFormattedDate = (date: Date) => {\\\\n  const todayTime = date\\\\n  const month = todayTime.getMonth() + 1\\\\n  const day = todayTime.getDate()\\\\n  const year = todayTime.getFullYear()\\\\n  const hours = todayTime.getHours()\\\\n  const minutes = todayTime.getMinutes()\\\\n  const AM = todayTime.getHours() > 12 ? 'PM' : 'AM'\\\\n\\\\n  return month + '/' + day + '/' + year + '-' + hours + ':' + minutes + ' ' + AM\\\\n}\\\\n\\\\nexport const withDateRange = () => {\\\\n  const startDate = new Date(\\\\n    new Date().getFullYear(),\\\\n    new Date().getMonth(),\\\\n    new Date().getDate() - 8\\\\n  )\\\\n\\\\n  const endDate = new Date(\\\\n    new Date().getFullYear(),\\\\n    new Date().getMonth(),\\\\n    new Date().getDate() - 1\\\\n  )\\\\n\\\\n  const isInValidDate = (d: any) => {\\\\n    return d instanceof Date && isNaN(d.getTime())\\\\n  }\\\\n  // const convertStringToDate = (input: string) => {\\\\n  //   const finalDate = new Date()\\\\n  //   const dateArray = input.trim().split('/')\\\\n  //   const month = parseInt(dateArray[0])\\\\n  //   if (month <= 12) {\\\\n  //     //  valid day\\\\n  //     finalDate.setMonth(month - 1)\\\\n\\\\n  //     // set Month\\\\n  //     const day = parseInt(dateArray[1])\\\\n  //     if (day <= 31) {\\\\n  //       finalDate.setDate(day)\\\\n\\\\n  //       // set year\\\\n  //       const year = parseInt(dateArray[2])\\\\n  //       if (year <= 2050 && year >= 1970) {\\\\n  //         finalDate.setFullYear(year)\\\\n\\\\n  //         // return finalDate\\\\n  //         return finalDate\\\\n  //       }\\\\n  //     }\\\\n  //   }\\\\n  //   return undefined\\\\n  // }\\\\n  const convertStringToDate = (input: string) => {\\\\n    const newDate = new Date(input)\\\\n    if (isInValidDate(newDate)) {\\\\n      return undefined\\\\n    } else {\\\\n      console.log('String to Date: ', newDate)\\\\n      return newDate\\\\n    }\\\\n  }\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <DateRangePicker\\\\n        onFromChange={action('From Clicked')}\\\\n        onToChange={action('To Clicked')}\\\\n        onApply={action('Apply Clicked')}\\\\n        onCancel={action('Cancel Clicked')}\\\\n        label={text('Label', 'Date Range')}\\\\n        variant='daterange'\\\\n        timeFormat={12}\\\\n        showTime={boolean('Show time', true)}\\\\n        style={object('style', {\\\\n          position: 'absolute',\\\\n          left: '0px'\\\\n        })}\\\\n        startDate={startDate}\\\\n        endDate={endDate}\\\\n        fromDateFormatter={getFormattedDate}\\\\n        toDateFormatter={getFormattedDate}\\\\n        stringToDate={convertStringToDate}\\\\n        open={boolean('open', false)}\\\\n      >\\\\n        {({ value, open, setOpen }: tDateRangeChildren) => (\\\\n          <div>\\\\n            <TextInputStyled onClick={() => setOpen(!open)}>\\\\n              <TextInput\\\\n                id='someId'\\\\n                name='someId'\\\\n                className='someClassname'\\\\n                label='Holidays'\\\\n                variant='basic'\\\\n                labelColor='text.inputLabel.default'\\\\n                placeholder='Please Click Here'\\\\n                fullWidth\\\\n                value={value?.toString()}\\\\n                onChange={action('On change clicked')}\\\\n              />\\\\n            </TextInputStyled>\\\\n          </div>\\\\n        )}\\\\n      </DateRangePicker>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\",\\\"locationsMap\\\":{}},},\\n  title: `${path}/DatePicker`,\\n  component: DatePicker\\n}\\n\\nconst getFormattedDate = (date: Date) => {\\n  const todayTime = date\\n  const month = todayTime.getMonth() + 1\\n  const day = todayTime.getDate()\\n  const year = todayTime.getFullYear()\\n  const hours = todayTime.getHours()\\n  const minutes = todayTime.getMinutes()\\n  const AM = todayTime.getHours() > 12 ? 'PM' : 'AM'\\n\\n  return month + '/' + day + '/' + year + '-' + hours + ':' + minutes + ' ' + AM\\n}\\n\\nexport const withDateRange = addSourceDecorator(addSourceDecorator(() => {\\n  const startDate = new Date(\\n    new Date().getFullYear(),\\n    new Date().getMonth(),\\n    new Date().getDate() - 8\\n  )\\n\\n  const endDate = new Date(\\n    new Date().getFullYear(),\\n    new Date().getMonth(),\\n    new Date().getDate() - 1\\n  )\\n\\n  const isInValidDate = (d: any) => {\\n    return d instanceof Date && isNaN(d.getTime())\\n  }\\n  // const convertStringToDate = (input: string) => {\\n  //   const finalDate = new Date()\\n  //   const dateArray = input.trim().split('/')\\n  //   const month = parseInt(dateArray[0])\\n  //   if (month <= 12) {\\n  //     //  valid day\\n  //     finalDate.setMonth(month - 1)\\n\\n  //     // set Month\\n  //     const day = parseInt(dateArray[1])\\n  //     if (day <= 31) {\\n  //       finalDate.setDate(day)\\n\\n  //       // set year\\n  //       const year = parseInt(dateArray[2])\\n  //       if (year <= 2050 && year >= 1970) {\\n  //         finalDate.setFullYear(year)\\n\\n  //         // return finalDate\\n  //         return finalDate\\n  //       }\\n  //     }\\n  //   }\\n  //   return undefined\\n  // }\\n  const convertStringToDate = (input: string) => {\\n    const newDate = new Date(input)\\n    if (isInValidDate(newDate)) {\\n      return undefined\\n    } else {\\n      console.log('String to Date: ', newDate)\\n      return newDate\\n    }\\n  }\\n  return (\\n    <ThemeWrapper>\\n      <DateRangePicker\\n        onFromChange={action('From Clicked')}\\n        onToChange={action('To Clicked')}\\n        onApply={action('Apply Clicked')}\\n        onCancel={action('Cancel Clicked')}\\n        label={text('Label', 'Date Range')}\\n        variant='daterange'\\n        timeFormat={12}\\n        showTime={boolean('Show time', true)}\\n        style={object('style', {\\n          position: 'absolute',\\n          left: '0px'\\n        })}\\n        startDate={startDate}\\n        endDate={endDate}\\n        fromDateFormatter={getFormattedDate}\\n        toDateFormatter={getFormattedDate}\\n        stringToDate={convertStringToDate}\\n        open={boolean('open', false)}\\n      >\\n        {({ value, open, setOpen }: tDateRangeChildren) => (\\n          <div>\\n            <TextInputStyled onClick={() => setOpen(!open)}>\\n              <TextInput\\n                id='someId'\\n                name='someId'\\n                className='someClassname'\\n                label='Holidays'\\n                variant='basic'\\n                labelColor='text.inputLabel.default'\\n                placeholder='Please Click Here'\\n                fullWidth\\n                value={value?.toString()}\\n                onChange={action('On change clicked')}\\n              />\\n            </TextInputStyled>\\n          </div>\\n        )}\\n      </DateRangePicker>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\"; // @ts-ignore\n\nvar __ADDS_MAP__ = {}; // @ts-ignore\n\nvar __MAIN_FILE_LOCATION__ = \"/DateRange.stories.tsx\"; // @ts-ignore\n\nvar __MODULE_DEPENDENCIES__ = []; // @ts-ignore\n\nvar __LOCAL_DEPENDENCIES__ = {}; // @ts-ignore\n\nvar __IDS_TO_FRAMEWORKS__ = {};\n/* eslint-disable */\n// @ts-nocheck\n// @ts-ignore\n\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource; // @ts-ignore\n\n\nvar addSourceDecorator = require(\"@storybook/source-loader/preview\").addSource; // @ts-ignore\n\n\nvar __SOURCE_PREFIX__ = \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/molecules/DatePicker/stories\"; // @ts-ignore\n\nvar __STORY__ = \"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/molecules/DatePicker/stories\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"import React from 'react'\\\\nimport { DatePicker, DateRangePicker } from '../../DatePicker'\\\\nimport { tDateRangeChildren } from '../interfaces'\\\\nimport { path } from '../..'\\\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\\\nimport { boolean, text, object } from '@storybook/addon-knobs'\\\\nimport { action } from '@storybook/addon-actions'\\\\nimport { TextInputStyled } from '../Styles/DateRange.styles'\\\\nimport TextInput from '../../TextInput'\\\\n\\\\nexport default {\\\\n  title: `${path}/DatePicker`,\\\\n  component: DatePicker\\\\n}\\\\n\\\\nconst getFormattedDate = (date: Date) => {\\\\n  const todayTime = date\\\\n  const month = todayTime.getMonth() + 1\\\\n  const day = todayTime.getDate()\\\\n  const year = todayTime.getFullYear()\\\\n  const hours = todayTime.getHours()\\\\n  const minutes = todayTime.getMinutes()\\\\n  const AM = todayTime.getHours() > 12 ? 'PM' : 'AM'\\\\n\\\\n  return month + '/' + day + '/' + year + '-' + hours + ':' + minutes + ' ' + AM\\\\n}\\\\n\\\\nexport const withDateRange = () => {\\\\n  const startDate = new Date(\\\\n    new Date().getFullYear(),\\\\n    new Date().getMonth(),\\\\n    new Date().getDate() - 8\\\\n  )\\\\n\\\\n  const endDate = new Date(\\\\n    new Date().getFullYear(),\\\\n    new Date().getMonth(),\\\\n    new Date().getDate() - 1\\\\n  )\\\\n\\\\n  const isInValidDate = (d: any) => {\\\\n    return d instanceof Date && isNaN(d.getTime())\\\\n  }\\\\n  // const convertStringToDate = (input: string) => {\\\\n  //   const finalDate = new Date()\\\\n  //   const dateArray = input.trim().split('/')\\\\n  //   const month = parseInt(dateArray[0])\\\\n  //   if (month <= 12) {\\\\n  //     //  valid day\\\\n  //     finalDate.setMonth(month - 1)\\\\n\\\\n  //     // set Month\\\\n  //     const day = parseInt(dateArray[1])\\\\n  //     if (day <= 31) {\\\\n  //       finalDate.setDate(day)\\\\n\\\\n  //       // set year\\\\n  //       const year = parseInt(dateArray[2])\\\\n  //       if (year <= 2050 && year >= 1970) {\\\\n  //         finalDate.setFullYear(year)\\\\n\\\\n  //         // return finalDate\\\\n  //         return finalDate\\\\n  //       }\\\\n  //     }\\\\n  //   }\\\\n  //   return undefined\\\\n  // }\\\\n  const convertStringToDate = (input: string) => {\\\\n    const newDate = new Date(input)\\\\n    if (isInValidDate(newDate)) {\\\\n      return undefined\\\\n    } else {\\\\n      console.log('String to Date: ', newDate)\\\\n      return newDate\\\\n    }\\\\n  }\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <DateRangePicker\\\\n        onFromChange={action('From Clicked')}\\\\n        onToChange={action('To Clicked')}\\\\n        onApply={action('Apply Clicked')}\\\\n        onCancel={action('Cancel Clicked')}\\\\n        label={text('Label', 'Date Range')}\\\\n        variant='daterange'\\\\n        timeFormat={12}\\\\n        showTime={boolean('Show time', true)}\\\\n        style={object('style', {\\\\n          position: 'absolute',\\\\n          left: '0px'\\\\n        })}\\\\n        startDate={startDate}\\\\n        endDate={endDate}\\\\n        fromDateFormatter={getFormattedDate}\\\\n        toDateFormatter={getFormattedDate}\\\\n        stringToDate={convertStringToDate}\\\\n        open={boolean('open', false)}\\\\n      >\\\\n        {({ value, open, setOpen }: tDateRangeChildren) => (\\\\n          <div>\\\\n            <TextInputStyled onClick={() => setOpen(!open)}>\\\\n              <TextInput\\\\n                id='someId'\\\\n                name='someId'\\\\n                className='someClassname'\\\\n                label='Holidays'\\\\n                variant='basic'\\\\n                labelColor='text.inputLabel.default'\\\\n                placeholder='Please Click Here'\\\\n                fullWidth\\\\n                value={value?.toString()}\\\\n                onChange={action('On change clicked')}\\\\n              />\\\\n            </TextInputStyled>\\\\n          </div>\\\\n        )}\\\\n      </DateRangePicker>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/DateRange.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\nimport React from 'react'\\nimport { DatePicker, DateRangePicker } from '../../DatePicker'\\nimport { tDateRangeChildren } from '../interfaces'\\nimport { path } from '../..'\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\nimport { boolean, text, object } from '@storybook/addon-knobs'\\nimport { action } from '@storybook/addon-actions'\\nimport { TextInputStyled } from '../Styles/DateRange.styles'\\nimport TextInput from '../../TextInput'\\n\\nexport default {parameters: {\\\"storySource\\\":{\\\"source\\\":\\\"import React from 'react'\\\\nimport { DatePicker, DateRangePicker } from '../../DatePicker'\\\\nimport { tDateRangeChildren } from '../interfaces'\\\\nimport { path } from '../..'\\\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\\\nimport { boolean, text, object } from '@storybook/addon-knobs'\\\\nimport { action } from '@storybook/addon-actions'\\\\nimport { TextInputStyled } from '../Styles/DateRange.styles'\\\\nimport TextInput from '../../TextInput'\\\\n\\\\nexport default {\\\\n  title: `${path}/DatePicker`,\\\\n  component: DatePicker\\\\n}\\\\n\\\\nconst getFormattedDate = (date: Date) => {\\\\n  const todayTime = date\\\\n  const month = todayTime.getMonth() + 1\\\\n  const day = todayTime.getDate()\\\\n  const year = todayTime.getFullYear()\\\\n  const hours = todayTime.getHours()\\\\n  const minutes = todayTime.getMinutes()\\\\n  const AM = todayTime.getHours() > 12 ? 'PM' : 'AM'\\\\n\\\\n  return month + '/' + day + '/' + year + '-' + hours + ':' + minutes + ' ' + AM\\\\n}\\\\n\\\\nexport const withDateRange = () => {\\\\n  const startDate = new Date(\\\\n    new Date().getFullYear(),\\\\n    new Date().getMonth(),\\\\n    new Date().getDate() - 8\\\\n  )\\\\n\\\\n  const endDate = new Date(\\\\n    new Date().getFullYear(),\\\\n    new Date().getMonth(),\\\\n    new Date().getDate() - 1\\\\n  )\\\\n\\\\n  const isInValidDate = (d: any) => {\\\\n    return d instanceof Date && isNaN(d.getTime())\\\\n  }\\\\n  // const convertStringToDate = (input: string) => {\\\\n  //   const finalDate = new Date()\\\\n  //   const dateArray = input.trim().split('/')\\\\n  //   const month = parseInt(dateArray[0])\\\\n  //   if (month <= 12) {\\\\n  //     //  valid day\\\\n  //     finalDate.setMonth(month - 1)\\\\n\\\\n  //     // set Month\\\\n  //     const day = parseInt(dateArray[1])\\\\n  //     if (day <= 31) {\\\\n  //       finalDate.setDate(day)\\\\n\\\\n  //       // set year\\\\n  //       const year = parseInt(dateArray[2])\\\\n  //       if (year <= 2050 && year >= 1970) {\\\\n  //         finalDate.setFullYear(year)\\\\n\\\\n  //         // return finalDate\\\\n  //         return finalDate\\\\n  //       }\\\\n  //     }\\\\n  //   }\\\\n  //   return undefined\\\\n  // }\\\\n  const convertStringToDate = (input: string) => {\\\\n    const newDate = new Date(input)\\\\n    if (isInValidDate(newDate)) {\\\\n      return undefined\\\\n    } else {\\\\n      console.log('String to Date: ', newDate)\\\\n      return newDate\\\\n    }\\\\n  }\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <DateRangePicker\\\\n        onFromChange={action('From Clicked')}\\\\n        onToChange={action('To Clicked')}\\\\n        onApply={action('Apply Clicked')}\\\\n        onCancel={action('Cancel Clicked')}\\\\n        label={text('Label', 'Date Range')}\\\\n        variant='daterange'\\\\n        timeFormat={12}\\\\n        showTime={boolean('Show time', true)}\\\\n        style={object('style', {\\\\n          position: 'absolute',\\\\n          left: '0px'\\\\n        })}\\\\n        startDate={startDate}\\\\n        endDate={endDate}\\\\n        fromDateFormatter={getFormattedDate}\\\\n        toDateFormatter={getFormattedDate}\\\\n        stringToDate={convertStringToDate}\\\\n        open={boolean('open', false)}\\\\n      >\\\\n        {({ value, open, setOpen }: tDateRangeChildren) => (\\\\n          <div>\\\\n            <TextInputStyled onClick={() => setOpen(!open)}>\\\\n              <TextInput\\\\n                id='someId'\\\\n                name='someId'\\\\n                className='someClassname'\\\\n                label='Holidays'\\\\n                variant='basic'\\\\n                labelColor='text.inputLabel.default'\\\\n                placeholder='Please Click Here'\\\\n                fullWidth\\\\n                value={value?.toString()}\\\\n                onChange={action('On change clicked')}\\\\n              />\\\\n            </TextInputStyled>\\\\n          </div>\\\\n        )}\\\\n      </DateRangePicker>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\",\\\"locationsMap\\\":{}},},\\n  title: `${path}/DatePicker`,\\n  component: DatePicker\\n}\\n\\nconst getFormattedDate = (date: Date) => {\\n  const todayTime = date\\n  const month = todayTime.getMonth() + 1\\n  const day = todayTime.getDate()\\n  const year = todayTime.getFullYear()\\n  const hours = todayTime.getHours()\\n  const minutes = todayTime.getMinutes()\\n  const AM = todayTime.getHours() > 12 ? 'PM' : 'AM'\\n\\n  return month + '/' + day + '/' + year + '-' + hours + ':' + minutes + ' ' + AM\\n}\\n\\nexport const withDateRange = addSourceDecorator(() => {\\n  const startDate = new Date(\\n    new Date().getFullYear(),\\n    new Date().getMonth(),\\n    new Date().getDate() - 8\\n  )\\n\\n  const endDate = new Date(\\n    new Date().getFullYear(),\\n    new Date().getMonth(),\\n    new Date().getDate() - 1\\n  )\\n\\n  const isInValidDate = (d: any) => {\\n    return d instanceof Date && isNaN(d.getTime())\\n  }\\n  // const convertStringToDate = (input: string) => {\\n  //   const finalDate = new Date()\\n  //   const dateArray = input.trim().split('/')\\n  //   const month = parseInt(dateArray[0])\\n  //   if (month <= 12) {\\n  //     //  valid day\\n  //     finalDate.setMonth(month - 1)\\n\\n  //     // set Month\\n  //     const day = parseInt(dateArray[1])\\n  //     if (day <= 31) {\\n  //       finalDate.setDate(day)\\n\\n  //       // set year\\n  //       const year = parseInt(dateArray[2])\\n  //       if (year <= 2050 && year >= 1970) {\\n  //         finalDate.setFullYear(year)\\n\\n  //         // return finalDate\\n  //         return finalDate\\n  //       }\\n  //     }\\n  //   }\\n  //   return undefined\\n  // }\\n  const convertStringToDate = (input: string) => {\\n    const newDate = new Date(input)\\n    if (isInValidDate(newDate)) {\\n      return undefined\\n    } else {\\n      console.log('String to Date: ', newDate)\\n      return newDate\\n    }\\n  }\\n  return (\\n    <ThemeWrapper>\\n      <DateRangePicker\\n        onFromChange={action('From Clicked')}\\n        onToChange={action('To Clicked')}\\n        onApply={action('Apply Clicked')}\\n        onCancel={action('Cancel Clicked')}\\n        label={text('Label', 'Date Range')}\\n        variant='daterange'\\n        timeFormat={12}\\n        showTime={boolean('Show time', true)}\\n        style={object('style', {\\n          position: 'absolute',\\n          left: '0px'\\n        })}\\n        startDate={startDate}\\n        endDate={endDate}\\n        fromDateFormatter={getFormattedDate}\\n        toDateFormatter={getFormattedDate}\\n        stringToDate={convertStringToDate}\\n        open={boolean('open', false)}\\n      >\\n        {({ value, open, setOpen }: tDateRangeChildren) => (\\n          <div>\\n            <TextInputStyled onClick={() => setOpen(!open)}>\\n              <TextInput\\n                id='someId'\\n                name='someId'\\n                className='someClassname'\\n                label='Holidays'\\n                variant='basic'\\n                labelColor='text.inputLabel.default'\\n                placeholder='Please Click Here'\\n                fullWidth\\n                value={value?.toString()}\\n                onChange={action('On change clicked')}\\n              />\\n            </TextInputStyled>\\n          </div>\\n        )}\\n      </DateRangePicker>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\"; // @ts-ignore\n\nvar __ADDS_MAP__ = {}; // @ts-ignore\n\nvar __MAIN_FILE_LOCATION__ = \"/DateRange.stories.tsx\"; // @ts-ignore\n\nvar __MODULE_DEPENDENCIES__ = []; // @ts-ignore\n\nvar __LOCAL_DEPENDENCIES__ = {}; // @ts-ignore\n\nvar __IDS_TO_FRAMEWORKS__ = {};\n/* eslint-disable */\n// @ts-nocheck\n// @ts-ignore\n\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource; // @ts-ignore\n\n\nvar addSourceDecorator = require(\"@storybook/source-loader/preview\").addSource; // @ts-ignore\n\n\nvar __SOURCE_PREFIX__ = \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/molecules/DatePicker/stories\"; // @ts-ignore\n\nvar __STORY__ = \"import React from 'react'\\nimport { DatePicker, DateRangePicker } from '../../DatePicker'\\nimport { tDateRangeChildren } from '../interfaces'\\nimport { path } from '../..'\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\nimport { boolean, text, object } from '@storybook/addon-knobs'\\nimport { action } from '@storybook/addon-actions'\\nimport { TextInputStyled } from '../Styles/DateRange.styles'\\nimport TextInput from '../../TextInput'\\n\\nexport default {\\n  title: `${path}/DatePicker`,\\n  component: DatePicker\\n}\\n\\nconst getFormattedDate = (date: Date) => {\\n  const todayTime = date\\n  const month = todayTime.getMonth() + 1\\n  const day = todayTime.getDate()\\n  const year = todayTime.getFullYear()\\n  const hours = todayTime.getHours()\\n  const minutes = todayTime.getMinutes()\\n  const AM = todayTime.getHours() > 12 ? 'PM' : 'AM'\\n\\n  return month + '/' + day + '/' + year + '-' + hours + ':' + minutes + ' ' + AM\\n}\\n\\nexport const withDateRange = () => {\\n  const startDate = new Date(\\n    new Date().getFullYear(),\\n    new Date().getMonth(),\\n    new Date().getDate() - 8\\n  )\\n\\n  const endDate = new Date(\\n    new Date().getFullYear(),\\n    new Date().getMonth(),\\n    new Date().getDate() - 1\\n  )\\n\\n  const isInValidDate = (d: any) => {\\n    return d instanceof Date && isNaN(d.getTime())\\n  }\\n  // const convertStringToDate = (input: string) => {\\n  //   const finalDate = new Date()\\n  //   const dateArray = input.trim().split('/')\\n  //   const month = parseInt(dateArray[0])\\n  //   if (month <= 12) {\\n  //     //  valid day\\n  //     finalDate.setMonth(month - 1)\\n\\n  //     // set Month\\n  //     const day = parseInt(dateArray[1])\\n  //     if (day <= 31) {\\n  //       finalDate.setDate(day)\\n\\n  //       // set year\\n  //       const year = parseInt(dateArray[2])\\n  //       if (year <= 2050 && year >= 1970) {\\n  //         finalDate.setFullYear(year)\\n\\n  //         // return finalDate\\n  //         return finalDate\\n  //       }\\n  //     }\\n  //   }\\n  //   return undefined\\n  // }\\n  const convertStringToDate = (input: string) => {\\n    const newDate = new Date(input)\\n    if (isInValidDate(newDate)) {\\n      return undefined\\n    } else {\\n      console.log('String to Date: ', newDate)\\n      return newDate\\n    }\\n  }\\n  return (\\n    <ThemeWrapper>\\n      <DateRangePicker\\n        onFromChange={action('From Clicked')}\\n        onToChange={action('To Clicked')}\\n        onApply={action('Apply Clicked')}\\n        onCancel={action('Cancel Clicked')}\\n        label={text('Label', 'Date Range')}\\n        variant='daterange'\\n        timeFormat={12}\\n        showTime={boolean('Show time', true)}\\n        style={object('style', {\\n          position: 'absolute',\\n          left: '0px'\\n        })}\\n        startDate={startDate}\\n        endDate={endDate}\\n        fromDateFormatter={getFormattedDate}\\n        toDateFormatter={getFormattedDate}\\n        stringToDate={convertStringToDate}\\n        open={boolean('open', false)}\\n      >\\n        {({ value, open, setOpen }: tDateRangeChildren) => (\\n          <div>\\n            <TextInputStyled onClick={() => setOpen(!open)}>\\n              <TextInput\\n                id='someId'\\n                name='someId'\\n                className='someClassname'\\n                label='Holidays'\\n                variant='basic'\\n                labelColor='text.inputLabel.default'\\n                placeholder='Please Click Here'\\n                fullWidth\\n                value={value?.toString()}\\n                onChange={action('On change clicked')}\\n              />\\n            </TextInputStyled>\\n          </div>\\n        )}\\n      </DateRangePicker>\\n    </ThemeWrapper>\\n  )\\n}\\n\"; // @ts-ignore\n\nvar __ADDS_MAP__ = {}; // @ts-ignore\n\nvar __MAIN_FILE_LOCATION__ = \"/DateRange.stories.tsx\"; // @ts-ignore\n\nvar __MODULE_DEPENDENCIES__ = []; // @ts-ignore\n\nvar __LOCAL_DEPENDENCIES__ = {}; // @ts-ignore\n\nvar __IDS_TO_FRAMEWORKS__ = {};\nimport React from 'react';\nimport { DatePicker, DateRangePicker } from '../../DatePicker';\nimport { path } from '../..';\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper';\nimport { boolean as _boolean, text, object } from '@storybook/addon-knobs';\nimport { action } from '@storybook/addon-actions';\nimport { TextInputStyled } from '../Styles/DateRange.styles';\nimport TextInput from '../../TextInput';\nexport default {\n  parameters: (_parameters = {\n    \"storySource\": {\n      \"source\": \"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/molecules/DatePicker/stories\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"\\\\n\\\\n// @ts-nocheck\\\\n// @ts-ignore\\\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\\\n// @ts-ignore\\\\nvar addSourceDecorator = require(\\\\\\\"@storybook/source-loader/preview\\\\\\\").addSource;\\\\n// @ts-ignore\\\\nvar __SOURCE_PREFIX__ = \\\\\\\"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/molecules/DatePicker/stories\\\\\\\";\\\\n// @ts-ignore\\\\nvar __STORY__ = \\\\\\\"import React from 'react'\\\\\\\\nimport { DatePicker, DateRangePicker } from '../../DatePicker'\\\\\\\\nimport { tDateRangeChildren } from '../interfaces'\\\\\\\\nimport { path } from '../..'\\\\\\\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\\\\\\\nimport { boolean, text, object } from '@storybook/addon-knobs'\\\\\\\\nimport { action } from '@storybook/addon-actions'\\\\\\\\nimport { TextInputStyled } from '../Styles/DateRange.styles'\\\\\\\\nimport TextInput from '../../TextInput'\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/DatePicker`,\\\\\\\\n  component: DatePicker\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst getFormattedDate = (date: Date) => {\\\\\\\\n  const todayTime = date\\\\\\\\n  const month = todayTime.getMonth() + 1\\\\\\\\n  const day = todayTime.getDate()\\\\\\\\n  const year = todayTime.getFullYear()\\\\\\\\n  const hours = todayTime.getHours()\\\\\\\\n  const minutes = todayTime.getMinutes()\\\\\\\\n  const AM = todayTime.getHours() > 12 ? 'PM' : 'AM'\\\\\\\\n\\\\\\\\n  return month + '/' + day + '/' + year + '-' + hours + ':' + minutes + ' ' + AM\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const withDateRange = () => {\\\\\\\\n  const startDate = new Date(\\\\\\\\n    new Date().getFullYear(),\\\\\\\\n    new Date().getMonth(),\\\\\\\\n    new Date().getDate() - 8\\\\\\\\n  )\\\\\\\\n\\\\\\\\n  const endDate = new Date(\\\\\\\\n    new Date().getFullYear(),\\\\\\\\n    new Date().getMonth(),\\\\\\\\n    new Date().getDate() - 1\\\\\\\\n  )\\\\\\\\n\\\\\\\\n  const isInValidDate = (d: any) => {\\\\\\\\n    return d instanceof Date && isNaN(d.getTime())\\\\\\\\n  }\\\\\\\\n  // const convertStringToDate = (input: string) => {\\\\\\\\n  //   const finalDate = new Date()\\\\\\\\n  //   const dateArray = input.trim().split('/')\\\\\\\\n  //   const month = parseInt(dateArray[0])\\\\\\\\n  //   if (month <= 12) {\\\\\\\\n  //     //  valid day\\\\\\\\n  //     finalDate.setMonth(month - 1)\\\\\\\\n\\\\\\\\n  //     // set Month\\\\\\\\n  //     const day = parseInt(dateArray[1])\\\\\\\\n  //     if (day <= 31) {\\\\\\\\n  //       finalDate.setDate(day)\\\\\\\\n\\\\\\\\n  //       // set year\\\\\\\\n  //       const year = parseInt(dateArray[2])\\\\\\\\n  //       if (year <= 2050 && year >= 1970) {\\\\\\\\n  //         finalDate.setFullYear(year)\\\\\\\\n\\\\\\\\n  //         // return finalDate\\\\\\\\n  //         return finalDate\\\\\\\\n  //       }\\\\\\\\n  //     }\\\\\\\\n  //   }\\\\\\\\n  //   return undefined\\\\\\\\n  // }\\\\\\\\n  const convertStringToDate = (input: string) => {\\\\\\\\n    const newDate = new Date(input)\\\\\\\\n    if (isInValidDate(newDate)) {\\\\\\\\n      return undefined\\\\\\\\n    } else {\\\\\\\\n      console.log('String to Date: ', newDate)\\\\\\\\n      return newDate\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <DateRangePicker\\\\\\\\n        onFromChange={action('From Clicked')}\\\\\\\\n        onToChange={action('To Clicked')}\\\\\\\\n        onApply={action('Apply Clicked')}\\\\\\\\n        onCancel={action('Cancel Clicked')}\\\\\\\\n        label={text('Label', 'Date Range')}\\\\\\\\n        variant='daterange'\\\\\\\\n        timeFormat={12}\\\\\\\\n        showTime={boolean('Show time', true)}\\\\\\\\n        style={object('style', {\\\\\\\\n          position: 'absolute',\\\\\\\\n          left: '0px'\\\\\\\\n        })}\\\\\\\\n        startDate={startDate}\\\\\\\\n        endDate={endDate}\\\\\\\\n        fromDateFormatter={getFormattedDate}\\\\\\\\n        toDateFormatter={getFormattedDate}\\\\\\\\n        stringToDate={convertStringToDate}\\\\\\\\n        open={boolean('open', false)}\\\\\\\\n      >\\\\\\\\n        {({ value, open, setOpen }: tDateRangeChildren) => (\\\\\\\\n          <div>\\\\\\\\n            <TextInputStyled onClick={() => setOpen(!open)}>\\\\\\\\n              <TextInput\\\\\\\\n                id='someId'\\\\\\\\n                name='someId'\\\\\\\\n                className='someClassname'\\\\\\\\n                label='Holidays'\\\\\\\\n                variant='basic'\\\\\\\\n                labelColor='text.inputLabel.default'\\\\\\\\n                placeholder='Please Click Here'\\\\\\\\n                fullWidth\\\\\\\\n                value={value?.toString()}\\\\\\\\n                onChange={action('On change clicked')}\\\\\\\\n              />\\\\\\\\n            </TextInputStyled>\\\\\\\\n          </div>\\\\\\\\n        )}\\\\\\\\n      </DateRangePicker>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\";\\\\n// @ts-ignore\\\\nvar __ADDS_MAP__ = {};\\\\n// @ts-ignore\\\\nvar __MAIN_FILE_LOCATION__ = \\\\\\\"/DateRange.stories.tsx\\\\\\\";\\\\n// @ts-ignore\\\\nvar __MODULE_DEPENDENCIES__ = [];\\\\n// @ts-ignore\\\\nvar __LOCAL_DEPENDENCIES__ = {};\\\\n// @ts-ignore\\\\nvar __IDS_TO_FRAMEWORKS__ = {};\\\\n        \\\\nimport React from 'react'\\\\nimport { DatePicker, DateRangePicker } from '../../DatePicker'\\\\nimport { tDateRangeChildren } from '../interfaces'\\\\nimport { path } from '../..'\\\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\\\nimport { boolean, text, object } from '@storybook/addon-knobs'\\\\nimport { action } from '@storybook/addon-actions'\\\\nimport { TextInputStyled } from '../Styles/DateRange.styles'\\\\nimport TextInput from '../../TextInput'\\\\n\\\\nexport default {parameters: {\\\\\\\"storySource\\\\\\\":{\\\\\\\"source\\\\\\\":\\\\\\\"import React from 'react'\\\\\\\\nimport { DatePicker, DateRangePicker } from '../../DatePicker'\\\\\\\\nimport { tDateRangeChildren } from '../interfaces'\\\\\\\\nimport { path } from '../..'\\\\\\\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\\\\\\\nimport { boolean, text, object } from '@storybook/addon-knobs'\\\\\\\\nimport { action } from '@storybook/addon-actions'\\\\\\\\nimport { TextInputStyled } from '../Styles/DateRange.styles'\\\\\\\\nimport TextInput from '../../TextInput'\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/DatePicker`,\\\\\\\\n  component: DatePicker\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst getFormattedDate = (date: Date) => {\\\\\\\\n  const todayTime = date\\\\\\\\n  const month = todayTime.getMonth() + 1\\\\\\\\n  const day = todayTime.getDate()\\\\\\\\n  const year = todayTime.getFullYear()\\\\\\\\n  const hours = todayTime.getHours()\\\\\\\\n  const minutes = todayTime.getMinutes()\\\\\\\\n  const AM = todayTime.getHours() > 12 ? 'PM' : 'AM'\\\\\\\\n\\\\\\\\n  return month + '/' + day + '/' + year + '-' + hours + ':' + minutes + ' ' + AM\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const withDateRange = () => {\\\\\\\\n  const startDate = new Date(\\\\\\\\n    new Date().getFullYear(),\\\\\\\\n    new Date().getMonth(),\\\\\\\\n    new Date().getDate() - 8\\\\\\\\n  )\\\\\\\\n\\\\\\\\n  const endDate = new Date(\\\\\\\\n    new Date().getFullYear(),\\\\\\\\n    new Date().getMonth(),\\\\\\\\n    new Date().getDate() - 1\\\\\\\\n  )\\\\\\\\n\\\\\\\\n  const isInValidDate = (d: any) => {\\\\\\\\n    return d instanceof Date && isNaN(d.getTime())\\\\\\\\n  }\\\\\\\\n  // const convertStringToDate = (input: string) => {\\\\\\\\n  //   const finalDate = new Date()\\\\\\\\n  //   const dateArray = input.trim().split('/')\\\\\\\\n  //   const month = parseInt(dateArray[0])\\\\\\\\n  //   if (month <= 12) {\\\\\\\\n  //     //  valid day\\\\\\\\n  //     finalDate.setMonth(month - 1)\\\\\\\\n\\\\\\\\n  //     // set Month\\\\\\\\n  //     const day = parseInt(dateArray[1])\\\\\\\\n  //     if (day <= 31) {\\\\\\\\n  //       finalDate.setDate(day)\\\\\\\\n\\\\\\\\n  //       // set year\\\\\\\\n  //       const year = parseInt(dateArray[2])\\\\\\\\n  //       if (year <= 2050 && year >= 1970) {\\\\\\\\n  //         finalDate.setFullYear(year)\\\\\\\\n\\\\\\\\n  //         // return finalDate\\\\\\\\n  //         return finalDate\\\\\\\\n  //       }\\\\\\\\n  //     }\\\\\\\\n  //   }\\\\\\\\n  //   return undefined\\\\\\\\n  // }\\\\\\\\n  const convertStringToDate = (input: string) => {\\\\\\\\n    const newDate = new Date(input)\\\\\\\\n    if (isInValidDate(newDate)) {\\\\\\\\n      return undefined\\\\\\\\n    } else {\\\\\\\\n      console.log('String to Date: ', newDate)\\\\\\\\n      return newDate\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <DateRangePicker\\\\\\\\n        onFromChange={action('From Clicked')}\\\\\\\\n        onToChange={action('To Clicked')}\\\\\\\\n        onApply={action('Apply Clicked')}\\\\\\\\n        onCancel={action('Cancel Clicked')}\\\\\\\\n        label={text('Label', 'Date Range')}\\\\\\\\n        variant='daterange'\\\\\\\\n        timeFormat={12}\\\\\\\\n        showTime={boolean('Show time', true)}\\\\\\\\n        style={object('style', {\\\\\\\\n          position: 'absolute',\\\\\\\\n          left: '0px'\\\\\\\\n        })}\\\\\\\\n        startDate={startDate}\\\\\\\\n        endDate={endDate}\\\\\\\\n        fromDateFormatter={getFormattedDate}\\\\\\\\n        toDateFormatter={getFormattedDate}\\\\\\\\n        stringToDate={convertStringToDate}\\\\\\\\n        open={boolean('open', false)}\\\\\\\\n      >\\\\\\\\n        {({ value, open, setOpen }: tDateRangeChildren) => (\\\\\\\\n          <div>\\\\\\\\n            <TextInputStyled onClick={() => setOpen(!open)}>\\\\\\\\n              <TextInput\\\\\\\\n                id='someId'\\\\\\\\n                name='someId'\\\\\\\\n                className='someClassname'\\\\\\\\n                label='Holidays'\\\\\\\\n                variant='basic'\\\\\\\\n                labelColor='text.inputLabel.default'\\\\\\\\n                placeholder='Please Click Here'\\\\\\\\n                fullWidth\\\\\\\\n                value={value?.toString()}\\\\\\\\n                onChange={action('On change clicked')}\\\\\\\\n              />\\\\\\\\n            </TextInputStyled>\\\\\\\\n          </div>\\\\\\\\n        )}\\\\\\\\n      </DateRangePicker>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\",\\\\\\\"locationsMap\\\\\\\":{}},},\\\\n  title: `${path}/DatePicker`,\\\\n  component: DatePicker\\\\n}\\\\n\\\\nconst getFormattedDate = (date: Date) => {\\\\n  const todayTime = date\\\\n  const month = todayTime.getMonth() + 1\\\\n  const day = todayTime.getDate()\\\\n  const year = todayTime.getFullYear()\\\\n  const hours = todayTime.getHours()\\\\n  const minutes = todayTime.getMinutes()\\\\n  const AM = todayTime.getHours() > 12 ? 'PM' : 'AM'\\\\n\\\\n  return month + '/' + day + '/' + year + '-' + hours + ':' + minutes + ' ' + AM\\\\n}\\\\n\\\\nexport const withDateRange = addSourceDecorator(() => {\\\\n  const startDate = new Date(\\\\n    new Date().getFullYear(),\\\\n    new Date().getMonth(),\\\\n    new Date().getDate() - 8\\\\n  )\\\\n\\\\n  const endDate = new Date(\\\\n    new Date().getFullYear(),\\\\n    new Date().getMonth(),\\\\n    new Date().getDate() - 1\\\\n  )\\\\n\\\\n  const isInValidDate = (d: any) => {\\\\n    return d instanceof Date && isNaN(d.getTime())\\\\n  }\\\\n  // const convertStringToDate = (input: string) => {\\\\n  //   const finalDate = new Date()\\\\n  //   const dateArray = input.trim().split('/')\\\\n  //   const month = parseInt(dateArray[0])\\\\n  //   if (month <= 12) {\\\\n  //     //  valid day\\\\n  //     finalDate.setMonth(month - 1)\\\\n\\\\n  //     // set Month\\\\n  //     const day = parseInt(dateArray[1])\\\\n  //     if (day <= 31) {\\\\n  //       finalDate.setDate(day)\\\\n\\\\n  //       // set year\\\\n  //       const year = parseInt(dateArray[2])\\\\n  //       if (year <= 2050 && year >= 1970) {\\\\n  //         finalDate.setFullYear(year)\\\\n\\\\n  //         // return finalDate\\\\n  //         return finalDate\\\\n  //       }\\\\n  //     }\\\\n  //   }\\\\n  //   return undefined\\\\n  // }\\\\n  const convertStringToDate = (input: string) => {\\\\n    const newDate = new Date(input)\\\\n    if (isInValidDate(newDate)) {\\\\n      return undefined\\\\n    } else {\\\\n      console.log('String to Date: ', newDate)\\\\n      return newDate\\\\n    }\\\\n  }\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <DateRangePicker\\\\n        onFromChange={action('From Clicked')}\\\\n        onToChange={action('To Clicked')}\\\\n        onApply={action('Apply Clicked')}\\\\n        onCancel={action('Cancel Clicked')}\\\\n        label={text('Label', 'Date Range')}\\\\n        variant='daterange'\\\\n        timeFormat={12}\\\\n        showTime={boolean('Show time', true)}\\\\n        style={object('style', {\\\\n          position: 'absolute',\\\\n          left: '0px'\\\\n        })}\\\\n        startDate={startDate}\\\\n        endDate={endDate}\\\\n        fromDateFormatter={getFormattedDate}\\\\n        toDateFormatter={getFormattedDate}\\\\n        stringToDate={convertStringToDate}\\\\n        open={boolean('open', false)}\\\\n      >\\\\n        {({ value, open, setOpen }: tDateRangeChildren) => (\\\\n          <div>\\\\n            <TextInputStyled onClick={() => setOpen(!open)}>\\\\n              <TextInput\\\\n                id='someId'\\\\n                name='someId'\\\\n                className='someClassname'\\\\n                label='Holidays'\\\\n                variant='basic'\\\\n                labelColor='text.inputLabel.default'\\\\n                placeholder='Please Click Here'\\\\n                fullWidth\\\\n                value={value?.toString()}\\\\n                onChange={action('On change clicked')}\\\\n              />\\\\n            </TextInputStyled>\\\\n          </div>\\\\n        )}\\\\n      </DateRangePicker>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/DateRange.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\n\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/molecules/DatePicker/stories\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"import React from 'react'\\\\nimport { DatePicker, DateRangePicker } from '../../DatePicker'\\\\nimport { tDateRangeChildren } from '../interfaces'\\\\nimport { path } from '../..'\\\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\\\nimport { boolean, text, object } from '@storybook/addon-knobs'\\\\nimport { action } from '@storybook/addon-actions'\\\\nimport { TextInputStyled } from '../Styles/DateRange.styles'\\\\nimport TextInput from '../../TextInput'\\\\n\\\\nexport default {\\\\n  title: `${path}/DatePicker`,\\\\n  component: DatePicker\\\\n}\\\\n\\\\nconst getFormattedDate = (date: Date) => {\\\\n  const todayTime = date\\\\n  const month = todayTime.getMonth() + 1\\\\n  const day = todayTime.getDate()\\\\n  const year = todayTime.getFullYear()\\\\n  const hours = todayTime.getHours()\\\\n  const minutes = todayTime.getMinutes()\\\\n  const AM = todayTime.getHours() > 12 ? 'PM' : 'AM'\\\\n\\\\n  return month + '/' + day + '/' + year + '-' + hours + ':' + minutes + ' ' + AM\\\\n}\\\\n\\\\nexport const withDateRange = () => {\\\\n  const startDate = new Date(\\\\n    new Date().getFullYear(),\\\\n    new Date().getMonth(),\\\\n    new Date().getDate() - 8\\\\n  )\\\\n\\\\n  const endDate = new Date(\\\\n    new Date().getFullYear(),\\\\n    new Date().getMonth(),\\\\n    new Date().getDate() - 1\\\\n  )\\\\n\\\\n  const isInValidDate = (d: any) => {\\\\n    return d instanceof Date && isNaN(d.getTime())\\\\n  }\\\\n  // const convertStringToDate = (input: string) => {\\\\n  //   const finalDate = new Date()\\\\n  //   const dateArray = input.trim().split('/')\\\\n  //   const month = parseInt(dateArray[0])\\\\n  //   if (month <= 12) {\\\\n  //     //  valid day\\\\n  //     finalDate.setMonth(month - 1)\\\\n\\\\n  //     // set Month\\\\n  //     const day = parseInt(dateArray[1])\\\\n  //     if (day <= 31) {\\\\n  //       finalDate.setDate(day)\\\\n\\\\n  //       // set year\\\\n  //       const year = parseInt(dateArray[2])\\\\n  //       if (year <= 2050 && year >= 1970) {\\\\n  //         finalDate.setFullYear(year)\\\\n\\\\n  //         // return finalDate\\\\n  //         return finalDate\\\\n  //       }\\\\n  //     }\\\\n  //   }\\\\n  //   return undefined\\\\n  // }\\\\n  const convertStringToDate = (input: string) => {\\\\n    const newDate = new Date(input)\\\\n    if (isInValidDate(newDate)) {\\\\n      return undefined\\\\n    } else {\\\\n      console.log('String to Date: ', newDate)\\\\n      return newDate\\\\n    }\\\\n  }\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <DateRangePicker\\\\n        onFromChange={action('From Clicked')}\\\\n        onToChange={action('To Clicked')}\\\\n        onApply={action('Apply Clicked')}\\\\n        onCancel={action('Cancel Clicked')}\\\\n        label={text('Label', 'Date Range')}\\\\n        variant='daterange'\\\\n        timeFormat={12}\\\\n        showTime={boolean('Show time', true)}\\\\n        style={object('style', {\\\\n          position: 'absolute',\\\\n          left: '0px'\\\\n        })}\\\\n        startDate={startDate}\\\\n        endDate={endDate}\\\\n        fromDateFormatter={getFormattedDate}\\\\n        toDateFormatter={getFormattedDate}\\\\n        stringToDate={convertStringToDate}\\\\n        open={boolean('open', false)}\\\\n      >\\\\n        {({ value, open, setOpen }: tDateRangeChildren) => (\\\\n          <div>\\\\n            <TextInputStyled onClick={() => setOpen(!open)}>\\\\n              <TextInput\\\\n                id='someId'\\\\n                name='someId'\\\\n                className='someClassname'\\\\n                label='Holidays'\\\\n                variant='basic'\\\\n                labelColor='text.inputLabel.default'\\\\n                placeholder='Please Click Here'\\\\n                fullWidth\\\\n                value={value?.toString()}\\\\n                onChange={action('On change clicked')}\\\\n              />\\\\n            </TextInputStyled>\\\\n          </div>\\\\n        )}\\\\n      </DateRangePicker>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/DateRange.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\nimport React from 'react'\\nimport { DatePicker, DateRangePicker } from '../../DatePicker'\\nimport { tDateRangeChildren } from '../interfaces'\\nimport { path } from '../..'\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\nimport { boolean, text, object } from '@storybook/addon-knobs'\\nimport { action } from '@storybook/addon-actions'\\nimport { TextInputStyled } from '../Styles/DateRange.styles'\\nimport TextInput from '../../TextInput'\\n\\nexport default {parameters: {\\\"storySource\\\":{\\\"source\\\":\\\"\\\\n\\\\n// @ts-nocheck\\\\n// @ts-ignore\\\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\\\n// @ts-ignore\\\\nvar addSourceDecorator = require(\\\\\\\"@storybook/source-loader/preview\\\\\\\").addSource;\\\\n// @ts-ignore\\\\nvar __SOURCE_PREFIX__ = \\\\\\\"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/molecules/DatePicker/stories\\\\\\\";\\\\n// @ts-ignore\\\\nvar __STORY__ = \\\\\\\"import React from 'react'\\\\\\\\nimport { DatePicker, DateRangePicker } from '../../DatePicker'\\\\\\\\nimport { tDateRangeChildren } from '../interfaces'\\\\\\\\nimport { path } from '../..'\\\\\\\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\\\\\\\nimport { boolean, text, object } from '@storybook/addon-knobs'\\\\\\\\nimport { action } from '@storybook/addon-actions'\\\\\\\\nimport { TextInputStyled } from '../Styles/DateRange.styles'\\\\\\\\nimport TextInput from '../../TextInput'\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/DatePicker`,\\\\\\\\n  component: DatePicker\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst getFormattedDate = (date: Date) => {\\\\\\\\n  const todayTime = date\\\\\\\\n  const month = todayTime.getMonth() + 1\\\\\\\\n  const day = todayTime.getDate()\\\\\\\\n  const year = todayTime.getFullYear()\\\\\\\\n  const hours = todayTime.getHours()\\\\\\\\n  const minutes = todayTime.getMinutes()\\\\\\\\n  const AM = todayTime.getHours() > 12 ? 'PM' : 'AM'\\\\\\\\n\\\\\\\\n  return month + '/' + day + '/' + year + '-' + hours + ':' + minutes + ' ' + AM\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const withDateRange = () => {\\\\\\\\n  const startDate = new Date(\\\\\\\\n    new Date().getFullYear(),\\\\\\\\n    new Date().getMonth(),\\\\\\\\n    new Date().getDate() - 8\\\\\\\\n  )\\\\\\\\n\\\\\\\\n  const endDate = new Date(\\\\\\\\n    new Date().getFullYear(),\\\\\\\\n    new Date().getMonth(),\\\\\\\\n    new Date().getDate() - 1\\\\\\\\n  )\\\\\\\\n\\\\\\\\n  const isInValidDate = (d: any) => {\\\\\\\\n    return d instanceof Date && isNaN(d.getTime())\\\\\\\\n  }\\\\\\\\n  // const convertStringToDate = (input: string) => {\\\\\\\\n  //   const finalDate = new Date()\\\\\\\\n  //   const dateArray = input.trim().split('/')\\\\\\\\n  //   const month = parseInt(dateArray[0])\\\\\\\\n  //   if (month <= 12) {\\\\\\\\n  //     //  valid day\\\\\\\\n  //     finalDate.setMonth(month - 1)\\\\\\\\n\\\\\\\\n  //     // set Month\\\\\\\\n  //     const day = parseInt(dateArray[1])\\\\\\\\n  //     if (day <= 31) {\\\\\\\\n  //       finalDate.setDate(day)\\\\\\\\n\\\\\\\\n  //       // set year\\\\\\\\n  //       const year = parseInt(dateArray[2])\\\\\\\\n  //       if (year <= 2050 && year >= 1970) {\\\\\\\\n  //         finalDate.setFullYear(year)\\\\\\\\n\\\\\\\\n  //         // return finalDate\\\\\\\\n  //         return finalDate\\\\\\\\n  //       }\\\\\\\\n  //     }\\\\\\\\n  //   }\\\\\\\\n  //   return undefined\\\\\\\\n  // }\\\\\\\\n  const convertStringToDate = (input: string) => {\\\\\\\\n    const newDate = new Date(input)\\\\\\\\n    if (isInValidDate(newDate)) {\\\\\\\\n      return undefined\\\\\\\\n    } else {\\\\\\\\n      console.log('String to Date: ', newDate)\\\\\\\\n      return newDate\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <DateRangePicker\\\\\\\\n        onFromChange={action('From Clicked')}\\\\\\\\n        onToChange={action('To Clicked')}\\\\\\\\n        onApply={action('Apply Clicked')}\\\\\\\\n        onCancel={action('Cancel Clicked')}\\\\\\\\n        label={text('Label', 'Date Range')}\\\\\\\\n        variant='daterange'\\\\\\\\n        timeFormat={12}\\\\\\\\n        showTime={boolean('Show time', true)}\\\\\\\\n        style={object('style', {\\\\\\\\n          position: 'absolute',\\\\\\\\n          left: '0px'\\\\\\\\n        })}\\\\\\\\n        startDate={startDate}\\\\\\\\n        endDate={endDate}\\\\\\\\n        fromDateFormatter={getFormattedDate}\\\\\\\\n        toDateFormatter={getFormattedDate}\\\\\\\\n        stringToDate={convertStringToDate}\\\\\\\\n        open={boolean('open', false)}\\\\\\\\n      >\\\\\\\\n        {({ value, open, setOpen }: tDateRangeChildren) => (\\\\\\\\n          <div>\\\\\\\\n            <TextInputStyled onClick={() => setOpen(!open)}>\\\\\\\\n              <TextInput\\\\\\\\n                id='someId'\\\\\\\\n                name='someId'\\\\\\\\n                className='someClassname'\\\\\\\\n                label='Holidays'\\\\\\\\n                variant='basic'\\\\\\\\n                labelColor='text.inputLabel.default'\\\\\\\\n                placeholder='Please Click Here'\\\\\\\\n                fullWidth\\\\\\\\n                value={value?.toString()}\\\\\\\\n                onChange={action('On change clicked')}\\\\\\\\n              />\\\\\\\\n            </TextInputStyled>\\\\\\\\n          </div>\\\\\\\\n        )}\\\\\\\\n      </DateRangePicker>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\";\\\\n// @ts-ignore\\\\nvar __ADDS_MAP__ = {};\\\\n// @ts-ignore\\\\nvar __MAIN_FILE_LOCATION__ = \\\\\\\"/DateRange.stories.tsx\\\\\\\";\\\\n// @ts-ignore\\\\nvar __MODULE_DEPENDENCIES__ = [];\\\\n// @ts-ignore\\\\nvar __LOCAL_DEPENDENCIES__ = {};\\\\n// @ts-ignore\\\\nvar __IDS_TO_FRAMEWORKS__ = {};\\\\n        \\\\nimport React from 'react'\\\\nimport { DatePicker, DateRangePicker } from '../../DatePicker'\\\\nimport { tDateRangeChildren } from '../interfaces'\\\\nimport { path } from '../..'\\\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\\\nimport { boolean, text, object } from '@storybook/addon-knobs'\\\\nimport { action } from '@storybook/addon-actions'\\\\nimport { TextInputStyled } from '../Styles/DateRange.styles'\\\\nimport TextInput from '../../TextInput'\\\\n\\\\nexport default {parameters: {\\\\\\\"storySource\\\\\\\":{\\\\\\\"source\\\\\\\":\\\\\\\"import React from 'react'\\\\\\\\nimport { DatePicker, DateRangePicker } from '../../DatePicker'\\\\\\\\nimport { tDateRangeChildren } from '../interfaces'\\\\\\\\nimport { path } from '../..'\\\\\\\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\\\\\\\nimport { boolean, text, object } from '@storybook/addon-knobs'\\\\\\\\nimport { action } from '@storybook/addon-actions'\\\\\\\\nimport { TextInputStyled } from '../Styles/DateRange.styles'\\\\\\\\nimport TextInput from '../../TextInput'\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/DatePicker`,\\\\\\\\n  component: DatePicker\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst getFormattedDate = (date: Date) => {\\\\\\\\n  const todayTime = date\\\\\\\\n  const month = todayTime.getMonth() + 1\\\\\\\\n  const day = todayTime.getDate()\\\\\\\\n  const year = todayTime.getFullYear()\\\\\\\\n  const hours = todayTime.getHours()\\\\\\\\n  const minutes = todayTime.getMinutes()\\\\\\\\n  const AM = todayTime.getHours() > 12 ? 'PM' : 'AM'\\\\\\\\n\\\\\\\\n  return month + '/' + day + '/' + year + '-' + hours + ':' + minutes + ' ' + AM\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const withDateRange = () => {\\\\\\\\n  const startDate = new Date(\\\\\\\\n    new Date().getFullYear(),\\\\\\\\n    new Date().getMonth(),\\\\\\\\n    new Date().getDate() - 8\\\\\\\\n  )\\\\\\\\n\\\\\\\\n  const endDate = new Date(\\\\\\\\n    new Date().getFullYear(),\\\\\\\\n    new Date().getMonth(),\\\\\\\\n    new Date().getDate() - 1\\\\\\\\n  )\\\\\\\\n\\\\\\\\n  const isInValidDate = (d: any) => {\\\\\\\\n    return d instanceof Date && isNaN(d.getTime())\\\\\\\\n  }\\\\\\\\n  // const convertStringToDate = (input: string) => {\\\\\\\\n  //   const finalDate = new Date()\\\\\\\\n  //   const dateArray = input.trim().split('/')\\\\\\\\n  //   const month = parseInt(dateArray[0])\\\\\\\\n  //   if (month <= 12) {\\\\\\\\n  //     //  valid day\\\\\\\\n  //     finalDate.setMonth(month - 1)\\\\\\\\n\\\\\\\\n  //     // set Month\\\\\\\\n  //     const day = parseInt(dateArray[1])\\\\\\\\n  //     if (day <= 31) {\\\\\\\\n  //       finalDate.setDate(day)\\\\\\\\n\\\\\\\\n  //       // set year\\\\\\\\n  //       const year = parseInt(dateArray[2])\\\\\\\\n  //       if (year <= 2050 && year >= 1970) {\\\\\\\\n  //         finalDate.setFullYear(year)\\\\\\\\n\\\\\\\\n  //         // return finalDate\\\\\\\\n  //         return finalDate\\\\\\\\n  //       }\\\\\\\\n  //     }\\\\\\\\n  //   }\\\\\\\\n  //   return undefined\\\\\\\\n  // }\\\\\\\\n  const convertStringToDate = (input: string) => {\\\\\\\\n    const newDate = new Date(input)\\\\\\\\n    if (isInValidDate(newDate)) {\\\\\\\\n      return undefined\\\\\\\\n    } else {\\\\\\\\n      console.log('String to Date: ', newDate)\\\\\\\\n      return newDate\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <DateRangePicker\\\\\\\\n        onFromChange={action('From Clicked')}\\\\\\\\n        onToChange={action('To Clicked')}\\\\\\\\n        onApply={action('Apply Clicked')}\\\\\\\\n        onCancel={action('Cancel Clicked')}\\\\\\\\n        label={text('Label', 'Date Range')}\\\\\\\\n        variant='daterange'\\\\\\\\n        timeFormat={12}\\\\\\\\n        showTime={boolean('Show time', true)}\\\\\\\\n        style={object('style', {\\\\\\\\n          position: 'absolute',\\\\\\\\n          left: '0px'\\\\\\\\n        })}\\\\\\\\n        startDate={startDate}\\\\\\\\n        endDate={endDate}\\\\\\\\n        fromDateFormatter={getFormattedDate}\\\\\\\\n        toDateFormatter={getFormattedDate}\\\\\\\\n        stringToDate={convertStringToDate}\\\\\\\\n        open={boolean('open', false)}\\\\\\\\n      >\\\\\\\\n        {({ value, open, setOpen }: tDateRangeChildren) => (\\\\\\\\n          <div>\\\\\\\\n            <TextInputStyled onClick={() => setOpen(!open)}>\\\\\\\\n              <TextInput\\\\\\\\n                id='someId'\\\\\\\\n                name='someId'\\\\\\\\n                className='someClassname'\\\\\\\\n                label='Holidays'\\\\\\\\n                variant='basic'\\\\\\\\n                labelColor='text.inputLabel.default'\\\\\\\\n                placeholder='Please Click Here'\\\\\\\\n                fullWidth\\\\\\\\n                value={value?.toString()}\\\\\\\\n                onChange={action('On change clicked')}\\\\\\\\n              />\\\\\\\\n            </TextInputStyled>\\\\\\\\n          </div>\\\\\\\\n        )}\\\\\\\\n      </DateRangePicker>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\",\\\\\\\"locationsMap\\\\\\\":{}},},\\\\n  title: `${path}/DatePicker`,\\\\n  component: DatePicker\\\\n}\\\\n\\\\nconst getFormattedDate = (date: Date) => {\\\\n  const todayTime = date\\\\n  const month = todayTime.getMonth() + 1\\\\n  const day = todayTime.getDate()\\\\n  const year = todayTime.getFullYear()\\\\n  const hours = todayTime.getHours()\\\\n  const minutes = todayTime.getMinutes()\\\\n  const AM = todayTime.getHours() > 12 ? 'PM' : 'AM'\\\\n\\\\n  return month + '/' + day + '/' + year + '-' + hours + ':' + minutes + ' ' + AM\\\\n}\\\\n\\\\nexport const withDateRange = addSourceDecorator(() => {\\\\n  const startDate = new Date(\\\\n    new Date().getFullYear(),\\\\n    new Date().getMonth(),\\\\n    new Date().getDate() - 8\\\\n  )\\\\n\\\\n  const endDate = new Date(\\\\n    new Date().getFullYear(),\\\\n    new Date().getMonth(),\\\\n    new Date().getDate() - 1\\\\n  )\\\\n\\\\n  const isInValidDate = (d: any) => {\\\\n    return d instanceof Date && isNaN(d.getTime())\\\\n  }\\\\n  // const convertStringToDate = (input: string) => {\\\\n  //   const finalDate = new Date()\\\\n  //   const dateArray = input.trim().split('/')\\\\n  //   const month = parseInt(dateArray[0])\\\\n  //   if (month <= 12) {\\\\n  //     //  valid day\\\\n  //     finalDate.setMonth(month - 1)\\\\n\\\\n  //     // set Month\\\\n  //     const day = parseInt(dateArray[1])\\\\n  //     if (day <= 31) {\\\\n  //       finalDate.setDate(day)\\\\n\\\\n  //       // set year\\\\n  //       const year = parseInt(dateArray[2])\\\\n  //       if (year <= 2050 && year >= 1970) {\\\\n  //         finalDate.setFullYear(year)\\\\n\\\\n  //         // return finalDate\\\\n  //         return finalDate\\\\n  //       }\\\\n  //     }\\\\n  //   }\\\\n  //   return undefined\\\\n  // }\\\\n  const convertStringToDate = (input: string) => {\\\\n    const newDate = new Date(input)\\\\n    if (isInValidDate(newDate)) {\\\\n      return undefined\\\\n    } else {\\\\n      console.log('String to Date: ', newDate)\\\\n      return newDate\\\\n    }\\\\n  }\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <DateRangePicker\\\\n        onFromChange={action('From Clicked')}\\\\n        onToChange={action('To Clicked')}\\\\n        onApply={action('Apply Clicked')}\\\\n        onCancel={action('Cancel Clicked')}\\\\n        label={text('Label', 'Date Range')}\\\\n        variant='daterange'\\\\n        timeFormat={12}\\\\n        showTime={boolean('Show time', true)}\\\\n        style={object('style', {\\\\n          position: 'absolute',\\\\n          left: '0px'\\\\n        })}\\\\n        startDate={startDate}\\\\n        endDate={endDate}\\\\n        fromDateFormatter={getFormattedDate}\\\\n        toDateFormatter={getFormattedDate}\\\\n        stringToDate={convertStringToDate}\\\\n        open={boolean('open', false)}\\\\n      >\\\\n        {({ value, open, setOpen }: tDateRangeChildren) => (\\\\n          <div>\\\\n            <TextInputStyled onClick={() => setOpen(!open)}>\\\\n              <TextInput\\\\n                id='someId'\\\\n                name='someId'\\\\n                className='someClassname'\\\\n                label='Holidays'\\\\n                variant='basic'\\\\n                labelColor='text.inputLabel.default'\\\\n                placeholder='Please Click Here'\\\\n                fullWidth\\\\n                value={value?.toString()}\\\\n                onChange={action('On change clicked')}\\\\n              />\\\\n            </TextInputStyled>\\\\n          </div>\\\\n        )}\\\\n      </DateRangePicker>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\",\\\"locationsMap\\\":{}},\\\"storySource\\\":{\\\"source\\\":\\\"import React from 'react'\\\\nimport { DatePicker, DateRangePicker } from '../../DatePicker'\\\\nimport { tDateRangeChildren } from '../interfaces'\\\\nimport { path } from '../..'\\\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\\\nimport { boolean, text, object } from '@storybook/addon-knobs'\\\\nimport { action } from '@storybook/addon-actions'\\\\nimport { TextInputStyled } from '../Styles/DateRange.styles'\\\\nimport TextInput from '../../TextInput'\\\\n\\\\nexport default {\\\\n  title: `${path}/DatePicker`,\\\\n  component: DatePicker\\\\n}\\\\n\\\\nconst getFormattedDate = (date: Date) => {\\\\n  const todayTime = date\\\\n  const month = todayTime.getMonth() + 1\\\\n  const day = todayTime.getDate()\\\\n  const year = todayTime.getFullYear()\\\\n  const hours = todayTime.getHours()\\\\n  const minutes = todayTime.getMinutes()\\\\n  const AM = todayTime.getHours() > 12 ? 'PM' : 'AM'\\\\n\\\\n  return month + '/' + day + '/' + year + '-' + hours + ':' + minutes + ' ' + AM\\\\n}\\\\n\\\\nexport const withDateRange = () => {\\\\n  const startDate = new Date(\\\\n    new Date().getFullYear(),\\\\n    new Date().getMonth(),\\\\n    new Date().getDate() - 8\\\\n  )\\\\n\\\\n  const endDate = new Date(\\\\n    new Date().getFullYear(),\\\\n    new Date().getMonth(),\\\\n    new Date().getDate() - 1\\\\n  )\\\\n\\\\n  const isInValidDate = (d: any) => {\\\\n    return d instanceof Date && isNaN(d.getTime())\\\\n  }\\\\n  // const convertStringToDate = (input: string) => {\\\\n  //   const finalDate = new Date()\\\\n  //   const dateArray = input.trim().split('/')\\\\n  //   const month = parseInt(dateArray[0])\\\\n  //   if (month <= 12) {\\\\n  //     //  valid day\\\\n  //     finalDate.setMonth(month - 1)\\\\n\\\\n  //     // set Month\\\\n  //     const day = parseInt(dateArray[1])\\\\n  //     if (day <= 31) {\\\\n  //       finalDate.setDate(day)\\\\n\\\\n  //       // set year\\\\n  //       const year = parseInt(dateArray[2])\\\\n  //       if (year <= 2050 && year >= 1970) {\\\\n  //         finalDate.setFullYear(year)\\\\n\\\\n  //         // return finalDate\\\\n  //         return finalDate\\\\n  //       }\\\\n  //     }\\\\n  //   }\\\\n  //   return undefined\\\\n  // }\\\\n  const convertStringToDate = (input: string) => {\\\\n    const newDate = new Date(input)\\\\n    if (isInValidDate(newDate)) {\\\\n      return undefined\\\\n    } else {\\\\n      console.log('String to Date: ', newDate)\\\\n      return newDate\\\\n    }\\\\n  }\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <DateRangePicker\\\\n        onFromChange={action('From Clicked')}\\\\n        onToChange={action('To Clicked')}\\\\n        onApply={action('Apply Clicked')}\\\\n        onCancel={action('Cancel Clicked')}\\\\n        label={text('Label', 'Date Range')}\\\\n        variant='daterange'\\\\n        timeFormat={12}\\\\n        showTime={boolean('Show time', true)}\\\\n        style={object('style', {\\\\n          position: 'absolute',\\\\n          left: '0px'\\\\n        })}\\\\n        startDate={startDate}\\\\n        endDate={endDate}\\\\n        fromDateFormatter={getFormattedDate}\\\\n        toDateFormatter={getFormattedDate}\\\\n        stringToDate={convertStringToDate}\\\\n        open={boolean('open', false)}\\\\n      >\\\\n        {({ value, open, setOpen }: tDateRangeChildren) => (\\\\n          <div>\\\\n            <TextInputStyled onClick={() => setOpen(!open)}>\\\\n              <TextInput\\\\n                id='someId'\\\\n                name='someId'\\\\n                className='someClassname'\\\\n                label='Holidays'\\\\n                variant='basic'\\\\n                labelColor='text.inputLabel.default'\\\\n                placeholder='Please Click Here'\\\\n                fullWidth\\\\n                value={value?.toString()}\\\\n                onChange={action('On change clicked')}\\\\n              />\\\\n            </TextInputStyled>\\\\n          </div>\\\\n        )}\\\\n      </DateRangePicker>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\",\\\"locationsMap\\\":{}},},\\n  title: `${path}/DatePicker`,\\n  component: DatePicker\\n}\\n\\nconst getFormattedDate = (date: Date) => {\\n  const todayTime = date\\n  const month = todayTime.getMonth() + 1\\n  const day = todayTime.getDate()\\n  const year = todayTime.getFullYear()\\n  const hours = todayTime.getHours()\\n  const minutes = todayTime.getMinutes()\\n  const AM = todayTime.getHours() > 12 ? 'PM' : 'AM'\\n\\n  return month + '/' + day + '/' + year + '-' + hours + ':' + minutes + ' ' + AM\\n}\\n\\nexport const withDateRange = addSourceDecorator(addSourceDecorator(() => {\\n  const startDate = new Date(\\n    new Date().getFullYear(),\\n    new Date().getMonth(),\\n    new Date().getDate() - 8\\n  )\\n\\n  const endDate = new Date(\\n    new Date().getFullYear(),\\n    new Date().getMonth(),\\n    new Date().getDate() - 1\\n  )\\n\\n  const isInValidDate = (d: any) => {\\n    return d instanceof Date && isNaN(d.getTime())\\n  }\\n  // const convertStringToDate = (input: string) => {\\n  //   const finalDate = new Date()\\n  //   const dateArray = input.trim().split('/')\\n  //   const month = parseInt(dateArray[0])\\n  //   if (month <= 12) {\\n  //     //  valid day\\n  //     finalDate.setMonth(month - 1)\\n\\n  //     // set Month\\n  //     const day = parseInt(dateArray[1])\\n  //     if (day <= 31) {\\n  //       finalDate.setDate(day)\\n\\n  //       // set year\\n  //       const year = parseInt(dateArray[2])\\n  //       if (year <= 2050 && year >= 1970) {\\n  //         finalDate.setFullYear(year)\\n\\n  //         // return finalDate\\n  //         return finalDate\\n  //       }\\n  //     }\\n  //   }\\n  //   return undefined\\n  // }\\n  const convertStringToDate = (input: string) => {\\n    const newDate = new Date(input)\\n    if (isInValidDate(newDate)) {\\n      return undefined\\n    } else {\\n      console.log('String to Date: ', newDate)\\n      return newDate\\n    }\\n  }\\n  return (\\n    <ThemeWrapper>\\n      <DateRangePicker\\n        onFromChange={action('From Clicked')}\\n        onToChange={action('To Clicked')}\\n        onApply={action('Apply Clicked')}\\n        onCancel={action('Cancel Clicked')}\\n        label={text('Label', 'Date Range')}\\n        variant='daterange'\\n        timeFormat={12}\\n        showTime={boolean('Show time', true)}\\n        style={object('style', {\\n          position: 'absolute',\\n          left: '0px'\\n        })}\\n        startDate={startDate}\\n        endDate={endDate}\\n        fromDateFormatter={getFormattedDate}\\n        toDateFormatter={getFormattedDate}\\n        stringToDate={convertStringToDate}\\n        open={boolean('open', false)}\\n      >\\n        {({ value, open, setOpen }: tDateRangeChildren) => (\\n          <div>\\n            <TextInputStyled onClick={() => setOpen(!open)}>\\n              <TextInput\\n                id='someId'\\n                name='someId'\\n                className='someClassname'\\n                label='Holidays'\\n                variant='basic'\\n                labelColor='text.inputLabel.default'\\n                placeholder='Please Click Here'\\n                fullWidth\\n                value={value?.toString()}\\n                onChange={action('On change clicked')}\\n              />\\n            </TextInputStyled>\\n          </div>\\n        )}\\n      </DateRangePicker>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\",\n      \"locationsMap\": {}\n    }\n  }, _defineProperty(_parameters, \"storySource\", {\n    \"source\": \"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/molecules/DatePicker/stories\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"import React from 'react'\\\\nimport { DatePicker, DateRangePicker } from '../../DatePicker'\\\\nimport { tDateRangeChildren } from '../interfaces'\\\\nimport { path } from '../..'\\\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\\\nimport { boolean, text, object } from '@storybook/addon-knobs'\\\\nimport { action } from '@storybook/addon-actions'\\\\nimport { TextInputStyled } from '../Styles/DateRange.styles'\\\\nimport TextInput from '../../TextInput'\\\\n\\\\nexport default {\\\\n  title: `${path}/DatePicker`,\\\\n  component: DatePicker\\\\n}\\\\n\\\\nconst getFormattedDate = (date: Date) => {\\\\n  const todayTime = date\\\\n  const month = todayTime.getMonth() + 1\\\\n  const day = todayTime.getDate()\\\\n  const year = todayTime.getFullYear()\\\\n  const hours = todayTime.getHours()\\\\n  const minutes = todayTime.getMinutes()\\\\n  const AM = todayTime.getHours() > 12 ? 'PM' : 'AM'\\\\n\\\\n  return month + '/' + day + '/' + year + '-' + hours + ':' + minutes + ' ' + AM\\\\n}\\\\n\\\\nexport const withDateRange = () => {\\\\n  const startDate = new Date(\\\\n    new Date().getFullYear(),\\\\n    new Date().getMonth(),\\\\n    new Date().getDate() - 8\\\\n  )\\\\n\\\\n  const endDate = new Date(\\\\n    new Date().getFullYear(),\\\\n    new Date().getMonth(),\\\\n    new Date().getDate() - 1\\\\n  )\\\\n\\\\n  const isInValidDate = (d: any) => {\\\\n    return d instanceof Date && isNaN(d.getTime())\\\\n  }\\\\n  // const convertStringToDate = (input: string) => {\\\\n  //   const finalDate = new Date()\\\\n  //   const dateArray = input.trim().split('/')\\\\n  //   const month = parseInt(dateArray[0])\\\\n  //   if (month <= 12) {\\\\n  //     //  valid day\\\\n  //     finalDate.setMonth(month - 1)\\\\n\\\\n  //     // set Month\\\\n  //     const day = parseInt(dateArray[1])\\\\n  //     if (day <= 31) {\\\\n  //       finalDate.setDate(day)\\\\n\\\\n  //       // set year\\\\n  //       const year = parseInt(dateArray[2])\\\\n  //       if (year <= 2050 && year >= 1970) {\\\\n  //         finalDate.setFullYear(year)\\\\n\\\\n  //         // return finalDate\\\\n  //         return finalDate\\\\n  //       }\\\\n  //     }\\\\n  //   }\\\\n  //   return undefined\\\\n  // }\\\\n  const convertStringToDate = (input: string) => {\\\\n    const newDate = new Date(input)\\\\n    if (isInValidDate(newDate)) {\\\\n      return undefined\\\\n    } else {\\\\n      console.log('String to Date: ', newDate)\\\\n      return newDate\\\\n    }\\\\n  }\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <DateRangePicker\\\\n        onFromChange={action('From Clicked')}\\\\n        onToChange={action('To Clicked')}\\\\n        onApply={action('Apply Clicked')}\\\\n        onCancel={action('Cancel Clicked')}\\\\n        label={text('Label', 'Date Range')}\\\\n        variant='daterange'\\\\n        timeFormat={12}\\\\n        showTime={boolean('Show time', true)}\\\\n        style={object('style', {\\\\n          position: 'absolute',\\\\n          left: '0px'\\\\n        })}\\\\n        startDate={startDate}\\\\n        endDate={endDate}\\\\n        fromDateFormatter={getFormattedDate}\\\\n        toDateFormatter={getFormattedDate}\\\\n        stringToDate={convertStringToDate}\\\\n        open={boolean('open', false)}\\\\n      >\\\\n        {({ value, open, setOpen }: tDateRangeChildren) => (\\\\n          <div>\\\\n            <TextInputStyled onClick={() => setOpen(!open)}>\\\\n              <TextInput\\\\n                id='someId'\\\\n                name='someId'\\\\n                className='someClassname'\\\\n                label='Holidays'\\\\n                variant='basic'\\\\n                labelColor='text.inputLabel.default'\\\\n                placeholder='Please Click Here'\\\\n                fullWidth\\\\n                value={value?.toString()}\\\\n                onChange={action('On change clicked')}\\\\n              />\\\\n            </TextInputStyled>\\\\n          </div>\\\\n        )}\\\\n      </DateRangePicker>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/DateRange.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\nimport React from 'react'\\nimport { DatePicker, DateRangePicker } from '../../DatePicker'\\nimport { tDateRangeChildren } from '../interfaces'\\nimport { path } from '../..'\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\nimport { boolean, text, object } from '@storybook/addon-knobs'\\nimport { action } from '@storybook/addon-actions'\\nimport { TextInputStyled } from '../Styles/DateRange.styles'\\nimport TextInput from '../../TextInput'\\n\\nexport default {parameters: {\\\"storySource\\\":{\\\"source\\\":\\\"import React from 'react'\\\\nimport { DatePicker, DateRangePicker } from '../../DatePicker'\\\\nimport { tDateRangeChildren } from '../interfaces'\\\\nimport { path } from '../..'\\\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\\\nimport { boolean, text, object } from '@storybook/addon-knobs'\\\\nimport { action } from '@storybook/addon-actions'\\\\nimport { TextInputStyled } from '../Styles/DateRange.styles'\\\\nimport TextInput from '../../TextInput'\\\\n\\\\nexport default {\\\\n  title: `${path}/DatePicker`,\\\\n  component: DatePicker\\\\n}\\\\n\\\\nconst getFormattedDate = (date: Date) => {\\\\n  const todayTime = date\\\\n  const month = todayTime.getMonth() + 1\\\\n  const day = todayTime.getDate()\\\\n  const year = todayTime.getFullYear()\\\\n  const hours = todayTime.getHours()\\\\n  const minutes = todayTime.getMinutes()\\\\n  const AM = todayTime.getHours() > 12 ? 'PM' : 'AM'\\\\n\\\\n  return month + '/' + day + '/' + year + '-' + hours + ':' + minutes + ' ' + AM\\\\n}\\\\n\\\\nexport const withDateRange = () => {\\\\n  const startDate = new Date(\\\\n    new Date().getFullYear(),\\\\n    new Date().getMonth(),\\\\n    new Date().getDate() - 8\\\\n  )\\\\n\\\\n  const endDate = new Date(\\\\n    new Date().getFullYear(),\\\\n    new Date().getMonth(),\\\\n    new Date().getDate() - 1\\\\n  )\\\\n\\\\n  const isInValidDate = (d: any) => {\\\\n    return d instanceof Date && isNaN(d.getTime())\\\\n  }\\\\n  // const convertStringToDate = (input: string) => {\\\\n  //   const finalDate = new Date()\\\\n  //   const dateArray = input.trim().split('/')\\\\n  //   const month = parseInt(dateArray[0])\\\\n  //   if (month <= 12) {\\\\n  //     //  valid day\\\\n  //     finalDate.setMonth(month - 1)\\\\n\\\\n  //     // set Month\\\\n  //     const day = parseInt(dateArray[1])\\\\n  //     if (day <= 31) {\\\\n  //       finalDate.setDate(day)\\\\n\\\\n  //       // set year\\\\n  //       const year = parseInt(dateArray[2])\\\\n  //       if (year <= 2050 && year >= 1970) {\\\\n  //         finalDate.setFullYear(year)\\\\n\\\\n  //         // return finalDate\\\\n  //         return finalDate\\\\n  //       }\\\\n  //     }\\\\n  //   }\\\\n  //   return undefined\\\\n  // }\\\\n  const convertStringToDate = (input: string) => {\\\\n    const newDate = new Date(input)\\\\n    if (isInValidDate(newDate)) {\\\\n      return undefined\\\\n    } else {\\\\n      console.log('String to Date: ', newDate)\\\\n      return newDate\\\\n    }\\\\n  }\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <DateRangePicker\\\\n        onFromChange={action('From Clicked')}\\\\n        onToChange={action('To Clicked')}\\\\n        onApply={action('Apply Clicked')}\\\\n        onCancel={action('Cancel Clicked')}\\\\n        label={text('Label', 'Date Range')}\\\\n        variant='daterange'\\\\n        timeFormat={12}\\\\n        showTime={boolean('Show time', true)}\\\\n        style={object('style', {\\\\n          position: 'absolute',\\\\n          left: '0px'\\\\n        })}\\\\n        startDate={startDate}\\\\n        endDate={endDate}\\\\n        fromDateFormatter={getFormattedDate}\\\\n        toDateFormatter={getFormattedDate}\\\\n        stringToDate={convertStringToDate}\\\\n        open={boolean('open', false)}\\\\n      >\\\\n        {({ value, open, setOpen }: tDateRangeChildren) => (\\\\n          <div>\\\\n            <TextInputStyled onClick={() => setOpen(!open)}>\\\\n              <TextInput\\\\n                id='someId'\\\\n                name='someId'\\\\n                className='someClassname'\\\\n                label='Holidays'\\\\n                variant='basic'\\\\n                labelColor='text.inputLabel.default'\\\\n                placeholder='Please Click Here'\\\\n                fullWidth\\\\n                value={value?.toString()}\\\\n                onChange={action('On change clicked')}\\\\n              />\\\\n            </TextInputStyled>\\\\n          </div>\\\\n        )}\\\\n      </DateRangePicker>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\",\\\"locationsMap\\\":{}},},\\n  title: `${path}/DatePicker`,\\n  component: DatePicker\\n}\\n\\nconst getFormattedDate = (date: Date) => {\\n  const todayTime = date\\n  const month = todayTime.getMonth() + 1\\n  const day = todayTime.getDate()\\n  const year = todayTime.getFullYear()\\n  const hours = todayTime.getHours()\\n  const minutes = todayTime.getMinutes()\\n  const AM = todayTime.getHours() > 12 ? 'PM' : 'AM'\\n\\n  return month + '/' + day + '/' + year + '-' + hours + ':' + minutes + ' ' + AM\\n}\\n\\nexport const withDateRange = addSourceDecorator(() => {\\n  const startDate = new Date(\\n    new Date().getFullYear(),\\n    new Date().getMonth(),\\n    new Date().getDate() - 8\\n  )\\n\\n  const endDate = new Date(\\n    new Date().getFullYear(),\\n    new Date().getMonth(),\\n    new Date().getDate() - 1\\n  )\\n\\n  const isInValidDate = (d: any) => {\\n    return d instanceof Date && isNaN(d.getTime())\\n  }\\n  // const convertStringToDate = (input: string) => {\\n  //   const finalDate = new Date()\\n  //   const dateArray = input.trim().split('/')\\n  //   const month = parseInt(dateArray[0])\\n  //   if (month <= 12) {\\n  //     //  valid day\\n  //     finalDate.setMonth(month - 1)\\n\\n  //     // set Month\\n  //     const day = parseInt(dateArray[1])\\n  //     if (day <= 31) {\\n  //       finalDate.setDate(day)\\n\\n  //       // set year\\n  //       const year = parseInt(dateArray[2])\\n  //       if (year <= 2050 && year >= 1970) {\\n  //         finalDate.setFullYear(year)\\n\\n  //         // return finalDate\\n  //         return finalDate\\n  //       }\\n  //     }\\n  //   }\\n  //   return undefined\\n  // }\\n  const convertStringToDate = (input: string) => {\\n    const newDate = new Date(input)\\n    if (isInValidDate(newDate)) {\\n      return undefined\\n    } else {\\n      console.log('String to Date: ', newDate)\\n      return newDate\\n    }\\n  }\\n  return (\\n    <ThemeWrapper>\\n      <DateRangePicker\\n        onFromChange={action('From Clicked')}\\n        onToChange={action('To Clicked')}\\n        onApply={action('Apply Clicked')}\\n        onCancel={action('Cancel Clicked')}\\n        label={text('Label', 'Date Range')}\\n        variant='daterange'\\n        timeFormat={12}\\n        showTime={boolean('Show time', true)}\\n        style={object('style', {\\n          position: 'absolute',\\n          left: '0px'\\n        })}\\n        startDate={startDate}\\n        endDate={endDate}\\n        fromDateFormatter={getFormattedDate}\\n        toDateFormatter={getFormattedDate}\\n        stringToDate={convertStringToDate}\\n        open={boolean('open', false)}\\n      >\\n        {({ value, open, setOpen }: tDateRangeChildren) => (\\n          <div>\\n            <TextInputStyled onClick={() => setOpen(!open)}>\\n              <TextInput\\n                id='someId'\\n                name='someId'\\n                className='someClassname'\\n                label='Holidays'\\n                variant='basic'\\n                labelColor='text.inputLabel.default'\\n                placeholder='Please Click Here'\\n                fullWidth\\n                value={value?.toString()}\\n                onChange={action('On change clicked')}\\n              />\\n            </TextInputStyled>\\n          </div>\\n        )}\\n      </DateRangePicker>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\",\n    \"locationsMap\": {}\n  }), _defineProperty(_parameters, \"storySource\", {\n    \"source\": \"import React from 'react'\\nimport { DatePicker, DateRangePicker } from '../../DatePicker'\\nimport { tDateRangeChildren } from '../interfaces'\\nimport { path } from '../..'\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\nimport { boolean, text, object } from '@storybook/addon-knobs'\\nimport { action } from '@storybook/addon-actions'\\nimport { TextInputStyled } from '../Styles/DateRange.styles'\\nimport TextInput from '../../TextInput'\\n\\nexport default {\\n  title: `${path}/DatePicker`,\\n  component: DatePicker\\n}\\n\\nconst getFormattedDate = (date: Date) => {\\n  const todayTime = date\\n  const month = todayTime.getMonth() + 1\\n  const day = todayTime.getDate()\\n  const year = todayTime.getFullYear()\\n  const hours = todayTime.getHours()\\n  const minutes = todayTime.getMinutes()\\n  const AM = todayTime.getHours() > 12 ? 'PM' : 'AM'\\n\\n  return month + '/' + day + '/' + year + '-' + hours + ':' + minutes + ' ' + AM\\n}\\n\\nexport const withDateRange = () => {\\n  const startDate = new Date(\\n    new Date().getFullYear(),\\n    new Date().getMonth(),\\n    new Date().getDate() - 8\\n  )\\n\\n  const endDate = new Date(\\n    new Date().getFullYear(),\\n    new Date().getMonth(),\\n    new Date().getDate() - 1\\n  )\\n\\n  const isInValidDate = (d: any) => {\\n    return d instanceof Date && isNaN(d.getTime())\\n  }\\n  // const convertStringToDate = (input: string) => {\\n  //   const finalDate = new Date()\\n  //   const dateArray = input.trim().split('/')\\n  //   const month = parseInt(dateArray[0])\\n  //   if (month <= 12) {\\n  //     //  valid day\\n  //     finalDate.setMonth(month - 1)\\n\\n  //     // set Month\\n  //     const day = parseInt(dateArray[1])\\n  //     if (day <= 31) {\\n  //       finalDate.setDate(day)\\n\\n  //       // set year\\n  //       const year = parseInt(dateArray[2])\\n  //       if (year <= 2050 && year >= 1970) {\\n  //         finalDate.setFullYear(year)\\n\\n  //         // return finalDate\\n  //         return finalDate\\n  //       }\\n  //     }\\n  //   }\\n  //   return undefined\\n  // }\\n  const convertStringToDate = (input: string) => {\\n    const newDate = new Date(input)\\n    if (isInValidDate(newDate)) {\\n      return undefined\\n    } else {\\n      console.log('String to Date: ', newDate)\\n      return newDate\\n    }\\n  }\\n  return (\\n    <ThemeWrapper>\\n      <DateRangePicker\\n        onFromChange={action('From Clicked')}\\n        onToChange={action('To Clicked')}\\n        onApply={action('Apply Clicked')}\\n        onCancel={action('Cancel Clicked')}\\n        label={text('Label', 'Date Range')}\\n        variant='daterange'\\n        timeFormat={12}\\n        showTime={boolean('Show time', true)}\\n        style={object('style', {\\n          position: 'absolute',\\n          left: '0px'\\n        })}\\n        startDate={startDate}\\n        endDate={endDate}\\n        fromDateFormatter={getFormattedDate}\\n        toDateFormatter={getFormattedDate}\\n        stringToDate={convertStringToDate}\\n        open={boolean('open', false)}\\n      >\\n        {({ value, open, setOpen }: tDateRangeChildren) => (\\n          <div>\\n            <TextInputStyled onClick={() => setOpen(!open)}>\\n              <TextInput\\n                id='someId'\\n                name='someId'\\n                className='someClassname'\\n                label='Holidays'\\n                variant='basic'\\n                labelColor='text.inputLabel.default'\\n                placeholder='Please Click Here'\\n                fullWidth\\n                value={value?.toString()}\\n                onChange={action('On change clicked')}\\n              />\\n            </TextInputStyled>\\n          </div>\\n        )}\\n      </DateRangePicker>\\n    </ThemeWrapper>\\n  )\\n}\\n\",\n    \"locationsMap\": {}\n  }), _parameters),\n  title: path + \"/DatePicker\",\n  component: DatePicker\n};\n\nvar getFormattedDate = function getFormattedDate(date) {\n  var todayTime = date;\n  var month = todayTime.getMonth() + 1;\n  var day = todayTime.getDate();\n  var year = todayTime.getFullYear();\n  var hours = todayTime.getHours();\n  var minutes = todayTime.getMinutes();\n  var AM = todayTime.getHours() > 12 ? 'PM' : 'AM';\n  return month + '/' + day + '/' + year + '-' + hours + ':' + minutes + ' ' + AM;\n};\n\nexport var withDateRange = addSourceDecorator(addSourceDecorator(addSourceDecorator(function () {\n  var startDate = new Date(new Date().getFullYear(), new Date().getMonth(), new Date().getDate() - 8);\n  var endDate = new Date(new Date().getFullYear(), new Date().getMonth(), new Date().getDate() - 1);\n\n  var isInValidDate = function isInValidDate(d) {\n    return d instanceof Date && isNaN(d.getTime());\n  }; // const convertStringToDate = (input: string) => {\n  //   const finalDate = new Date()\n  //   const dateArray = input.trim().split('/')\n  //   const month = parseInt(dateArray[0])\n  //   if (month <= 12) {\n  //     //  valid day\n  //     finalDate.setMonth(month - 1)\n  //     // set Month\n  //     const day = parseInt(dateArray[1])\n  //     if (day <= 31) {\n  //       finalDate.setDate(day)\n  //       // set year\n  //       const year = parseInt(dateArray[2])\n  //       if (year <= 2050 && year >= 1970) {\n  //         finalDate.setFullYear(year)\n  //         // return finalDate\n  //         return finalDate\n  //       }\n  //     }\n  //   }\n  //   return undefined\n  // }\n\n\n  var convertStringToDate = function convertStringToDate(input) {\n    var newDate = new Date(input);\n\n    if (isInValidDate(newDate)) {\n      return undefined;\n    } else {\n      console.log('String to Date: ', newDate);\n      return newDate;\n    }\n  };\n\n  return React.createElement(ThemeWrapper, null, React.createElement(DateRangePicker, {\n    onFromChange: action('From Clicked'),\n    onToChange: action('To Clicked'),\n    onApply: action('Apply Clicked'),\n    onCancel: action('Cancel Clicked'),\n    label: text('Label', 'Date Range'),\n    variant: 'daterange',\n    timeFormat: 12,\n    showTime: _boolean('Show time', true),\n    style: object('style', {\n      position: 'absolute',\n      left: '0px'\n    }),\n    startDate: startDate,\n    endDate: endDate,\n    fromDateFormatter: getFormattedDate,\n    toDateFormatter: getFormattedDate,\n    stringToDate: convertStringToDate,\n    open: _boolean('open', false)\n  }, function (_a) {\n    var value = _a.value,\n        open = _a.open,\n        setOpen = _a.setOpen;\n    return React.createElement(\"div\", null, React.createElement(TextInputStyled, {\n      onClick: function onClick() {\n        return setOpen(!open);\n      }\n    }, React.createElement(TextInput, {\n      id: 'someId',\n      name: 'someId',\n      className: 'someClassname',\n      label: 'Holidays',\n      variant: 'basic',\n      labelColor: 'text.inputLabel.default',\n      placeholder: 'Please Click Here',\n      fullWidth: true,\n      value: value === null || value === void 0 ? void 0 : value.toString(),\n      onChange: action('On change clicked')\n    })));\n  }));\n}, {\n  __STORY__: __STORY__,\n  __ADDS_MAP__: __ADDS_MAP__,\n  __MAIN_FILE_LOCATION__: __MAIN_FILE_LOCATION__,\n  __MODULE_DEPENDENCIES__: __MODULE_DEPENDENCIES__,\n  __LOCAL_DEPENDENCIES__: __LOCAL_DEPENDENCIES__,\n  __SOURCE_PREFIX__: __SOURCE_PREFIX__,\n  __IDS_TO_FRAMEWORKS__: __IDS_TO_FRAMEWORKS__\n}), {\n  __STORY__: __STORY__,\n  __ADDS_MAP__: __ADDS_MAP__,\n  __MAIN_FILE_LOCATION__: __MAIN_FILE_LOCATION__,\n  __MODULE_DEPENDENCIES__: __MODULE_DEPENDENCIES__,\n  __LOCAL_DEPENDENCIES__: __LOCAL_DEPENDENCIES__,\n  __SOURCE_PREFIX__: __SOURCE_PREFIX__,\n  __IDS_TO_FRAMEWORKS__: __IDS_TO_FRAMEWORKS__\n}), {\n  __STORY__: __STORY__,\n  __ADDS_MAP__: __ADDS_MAP__,\n  __MAIN_FILE_LOCATION__: __MAIN_FILE_LOCATION__,\n  __MODULE_DEPENDENCIES__: __MODULE_DEPENDENCIES__,\n  __LOCAL_DEPENDENCIES__: __LOCAL_DEPENDENCIES__,\n  __SOURCE_PREFIX__: __SOURCE_PREFIX__,\n  __IDS_TO_FRAMEWORKS__: __IDS_TO_FRAMEWORKS__\n});","map":{"version":3,"sources":["/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/node_modules/react-docgen-typescript-loader/dist/index.js!/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/node_modules/eslint-loader/dist/cjs.js??ref--6-0!/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/node_modules/@storybook/source-loader/dist/server/index.js??ref--11!/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/node_modules/@storybook/source-loader/dist/server/index.js!/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/node_modules/@storybook/source-loader/dist/server/index.js!/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/molecules/DatePicker/stories/DateRange.stories.tsx"],"names":[],"mappings":";;;;AACA;AACA;AACA;AACA,IAAI,gBAAgB,GAAG,OAAO,CAAC,kCAAD,CAAP,CAA4C,UAAnE,C,CACA;;;AACA,IAAI,kBAAkB,GAAG,OAAO,CAAC,kCAAD,CAAP,CAA4C,SAArE,C,CACA;;;AACA,IAAI,iBAAiB,GAAG,wHAAxB,C,CACA;;AACA,IAAI,SAAS,GAAG,mvsCAAhB,C,CACA;;AACA,IAAI,YAAY,GAAG,EAAnB,C,CACA;;AACA,IAAI,sBAAsB,GAAG,wBAA7B,C,CACA;;AACA,IAAI,uBAAuB,GAAG,EAA9B,C,CACA;;AACA,IAAI,sBAAsB,GAAG,EAA7B,C,CACA;;AACA,IAAI,qBAAqB,GAAG,EAA5B;AAGA;AACA;AACA;;AACA,IAAI,gBAAgB,GAAG,OAAO,CAAC,kCAAD,CAAP,CAA4C,UAAnE,C,CACA;;;AACA,IAAI,kBAAkB,GAAG,OAAO,CAAC,kCAAD,CAAP,CAA4C,SAArE,C,CACA;;;AACA,IAAI,iBAAiB,GAAG,wHAAxB,C,CACA;;AACA,IAAI,SAAS,GAAG,4hYAAhB,C,CACA;;AACA,IAAI,YAAY,GAAG,EAAnB,C,CACA;;AACA,IAAI,sBAAsB,GAAG,wBAA7B,C,CACA;;AACA,IAAI,uBAAuB,GAAG,EAA9B,C,CACA;;AACA,IAAI,sBAAsB,GAAG,EAA7B,C,CACA;;AACA,IAAI,qBAAqB,GAAG,EAA5B;AAGA;AACA;AACA;;AACA,IAAI,gBAAgB,GAAG,OAAO,CAAC,kCAAD,CAAP,CAA4C,UAAnE,C,CACA;;;AACA,IAAI,kBAAkB,GAAG,OAAO,CAAC,kCAAD,CAAP,CAA4C,SAArE,C,CACA;;;AACA,IAAI,iBAAiB,GAAG,wHAAxB,C,CACA;;AACA,IAAI,SAAS,GAAG,2oHAAhB,C,CACA;;AACA,IAAI,YAAY,GAAG,EAAnB,C,CACA;;AACA,IAAI,sBAAsB,GAAG,wBAA7B,C,CACA;;AACA,IAAI,uBAAuB,GAAG,EAA9B,C,CACA;;AACA,IAAI,sBAAsB,GAAG,EAA7B,C,CACA;;AACA,IAAI,qBAAqB,GAAG,EAA5B;AAEA,OAAO,KAAP,MAAkB,OAAlB;AACA,SAAS,UAAT,EAAqB,eAArB,QAA4C,kBAA5C;AAEA,SAAS,IAAT,QAAqB,OAArB;AACA,OAAO,YAAP,MAAyB,+CAAzB;AACA,SAAS,OAAO,IAAP,QAAT,EAAkB,IAAlB,EAAwB,MAAxB,QAAsC,wBAAtC;AACA,SAAS,MAAT,QAAuB,0BAAvB;AACA,SAAS,eAAT,QAAgC,4BAAhC;AACA,OAAO,SAAP,MAAsB,iBAAtB;AAEA,eAAe;AAAC,EAAA,UAAU;AAAG,mBAAc;AAAC,gBAAS,mvsCAAV;AAA8vsC,sBAAe;AAA7wsC;AAAjB,iDAAgzsC;AAAC,cAAS,4hYAAV;AAAuiY,oBAAe;AAAtjY,GAAhzsC,+CAAw3kD;AAAC,cAAS,2oHAAV;AAAspH,oBAAe;AAArqH,GAAx3kD,eAAX;AACb,EAAA,KAAK,EAAK,IAAI,GAAA,aADD;AAEb,EAAA,SAAS,EAAE;AAFE,CAAf;;AAKA,IAAM,gBAAgB,GAAG,SAAnB,gBAAmB,CAAC,IAAD,EAAW;AAClC,MAAM,SAAS,GAAG,IAAlB;AACA,MAAM,KAAK,GAAG,SAAS,CAAC,QAAV,KAAuB,CAArC;AACA,MAAM,GAAG,GAAG,SAAS,CAAC,OAAV,EAAZ;AACA,MAAM,IAAI,GAAG,SAAS,CAAC,WAAV,EAAb;AACA,MAAM,KAAK,GAAG,SAAS,CAAC,QAAV,EAAd;AACA,MAAM,OAAO,GAAG,SAAS,CAAC,UAAV,EAAhB;AACA,MAAM,EAAE,GAAG,SAAS,CAAC,QAAV,KAAuB,EAAvB,GAA4B,IAA5B,GAAmC,IAA9C;AAEA,SAAO,KAAK,GAAG,GAAR,GAAc,GAAd,GAAoB,GAApB,GAA0B,IAA1B,GAAiC,GAAjC,GAAuC,KAAvC,GAA+C,GAA/C,GAAqD,OAArD,GAA+D,GAA/D,GAAqE,EAA5E;AACD,CAVD;;AAYA,OAAO,IAAM,aAAa,GAAG,kBAAkB,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,YAAA;AACpF,MAAM,SAAS,GAAG,IAAI,IAAJ,CAChB,IAAI,IAAJ,GAAW,WAAX,EADgB,EAEhB,IAAI,IAAJ,GAAW,QAAX,EAFgB,EAGhB,IAAI,IAAJ,GAAW,OAAX,KAAuB,CAHP,CAAlB;AAMA,MAAM,OAAO,GAAG,IAAI,IAAJ,CACd,IAAI,IAAJ,GAAW,WAAX,EADc,EAEd,IAAI,IAAJ,GAAW,QAAX,EAFc,EAGd,IAAI,IAAJ,GAAW,OAAX,KAAuB,CAHT,CAAhB;;AAMA,MAAM,aAAa,GAAG,SAAhB,aAAgB,CAAC,CAAD,EAAO;AAC3B,WAAO,CAAC,YAAY,IAAb,IAAqB,KAAK,CAAC,CAAC,CAAC,OAAF,EAAD,CAAjC;AACD,GAFD,CAboF,CAgBpF;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAM,mBAAmB,GAAG,SAAtB,mBAAsB,CAAC,KAAD,EAAc;AACxC,QAAM,OAAO,GAAG,IAAI,IAAJ,CAAS,KAAT,CAAhB;;AACA,QAAI,aAAa,CAAC,OAAD,CAAjB,EAA4B;AAC1B,aAAO,SAAP;AACD,KAFD,MAEO;AACL,MAAA,OAAO,CAAC,GAAR,CAAY,kBAAZ,EAAgC,OAAhC;AACA,aAAO,OAAP;AACD;AACF,GARD;;AASA,SACE,KAAA,CAAA,aAAA,CAAC,YAAD,EAAa,IAAb,EACE,KAAA,CAAA,aAAA,CAAC,eAAD,EAAgB;AACd,IAAA,YAAY,EAAE,MAAM,CAAC,cAAD,CADN;AAEd,IAAA,UAAU,EAAE,MAAM,CAAC,YAAD,CAFJ;AAGd,IAAA,OAAO,EAAE,MAAM,CAAC,eAAD,CAHD;AAId,IAAA,QAAQ,EAAE,MAAM,CAAC,gBAAD,CAJF;AAKd,IAAA,KAAK,EAAE,IAAI,CAAC,OAAD,EAAU,YAAV,CALG;AAMd,IAAA,OAAO,EAAC,WANM;AAOd,IAAA,UAAU,EAAE,EAPE;AAQd,IAAA,QAAQ,EAAE,QAAO,CAAC,WAAD,EAAc,IAAd,CARH;AASd,IAAA,KAAK,EAAE,MAAM,CAAC,OAAD,EAAU;AACrB,MAAA,QAAQ,EAAE,UADW;AAErB,MAAA,IAAI,EAAE;AAFe,KAAV,CATC;AAad,IAAA,SAAS,EAAE,SAbG;AAcd,IAAA,OAAO,EAAE,OAdK;AAed,IAAA,iBAAiB,EAAE,gBAfL;AAgBd,IAAA,eAAe,EAAE,gBAhBH;AAiBd,IAAA,YAAY,EAAE,mBAjBA;AAkBd,IAAA,IAAI,EAAE,QAAO,CAAC,MAAD,EAAS,KAAT;AAlBC,GAAhB,EAoBG,UAAC,EAAD,EAA6C;QAA1C,KAAK,GAAA,EAAA,CAAA,K;QAAE,IAAI,GAAA,EAAA,CAAA,I;QAAE,OAAO,GAAA,EAAA,CAAA,O;AAA2B,WACjD,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,IAAA,EACE,KAAA,CAAA,aAAA,CAAC,eAAD,EAAgB;AAAC,MAAA,OAAO,EAAE,mBAAA;AAAM,eAAA,OAAO,CAAC,CAAR,IAAO,CAAP;AAAc;AAA9B,KAAhB,EACE,KAAA,CAAA,aAAA,CAAC,SAAD,EAAU;AACR,MAAA,EAAE,EAAC,QADK;AAER,MAAA,IAAI,EAAC,QAFG;AAGR,MAAA,SAAS,EAAC,eAHF;AAIR,MAAA,KAAK,EAAC,UAJE;AAKR,MAAA,OAAO,EAAC,OALA;AAMR,MAAA,UAAU,EAAC,yBANH;AAOR,MAAA,WAAW,EAAC,mBAPJ;AAQR,MAAA,SAAS,EAAA,IARD;AASR,MAAA,KAAK,EAAE,KAAK,KAAA,IAAL,IAAA,KAAK,KAAA,KAAA,CAAL,GAAK,KAAA,CAAL,GAAA,KAAK,CAAE,QAAP,EATC;AAUR,MAAA,QAAQ,EAAE,MAAM,CAAC,mBAAD;AAVR,KAAV,CADF,CADF,CADiD;AAiBlD,GArCH,CADF,CADF;AA2CD,CA7FoF,EA6FlF;AAAC,EAAA,SAAS,EAAA,SAAV;AAAY,EAAA,YAAY,EAAA,YAAxB;AAAyB,EAAA,sBAAsB,EAAA,sBAA/C;AAAgD,EAAA,uBAAuB,EAAA,uBAAvE;AAAwE,EAAA,sBAAsB,EAAA,sBAA9F;AAA+F,EAAA,iBAAiB,EAAA,iBAAhH;AAAiH,EAAA,qBAAqB,EAAA;AAAtI,CA7FkF,CAAnB,EA6F2E;AAAC,EAAA,SAAS,EAAA,SAAV;AAAY,EAAA,YAAY,EAAA,YAAxB;AAAyB,EAAA,sBAAsB,EAAA,sBAA/C;AAAgD,EAAA,uBAAuB,EAAA,uBAAvE;AAAwE,EAAA,sBAAsB,EAAA,sBAA9F;AAA+F,EAAA,iBAAiB,EAAA,iBAAhH;AAAiH,EAAA,qBAAqB,EAAA;AAAtI,CA7F3E,CAAnB,EA6FwO;AAAC,EAAA,SAAS,EAAA,SAAV;AAAY,EAAA,YAAY,EAAA,YAAxB;AAAyB,EAAA,sBAAsB,EAAA,sBAA/C;AAAgD,EAAA,uBAAuB,EAAA,uBAAvE;AAAwE,EAAA,sBAAsB,EAAA,sBAA9F;AAA+F,EAAA,iBAAiB,EAAA,iBAAhH;AAAiH,EAAA,qBAAqB,EAAA;AAAtI,CA7FxO,CAAxC","sourcesContent":["\n/* eslint-disable */\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\n// @ts-ignore\nvar addSourceDecorator = require(\"@storybook/source-loader/preview\").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/molecules/DatePicker/stories\";\n// @ts-ignore\nvar __STORY__ = \"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/molecules/DatePicker/stories\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"\\\\n\\\\n// @ts-nocheck\\\\n// @ts-ignore\\\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\\\n// @ts-ignore\\\\nvar addSourceDecorator = require(\\\\\\\"@storybook/source-loader/preview\\\\\\\").addSource;\\\\n// @ts-ignore\\\\nvar __SOURCE_PREFIX__ = \\\\\\\"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/molecules/DatePicker/stories\\\\\\\";\\\\n// @ts-ignore\\\\nvar __STORY__ = \\\\\\\"import React from 'react'\\\\\\\\nimport { DatePicker, DateRangePicker } from '../../DatePicker'\\\\\\\\nimport { tDateRangeChildren } from '../interfaces'\\\\\\\\nimport { path } from '../..'\\\\\\\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\\\\\\\nimport { boolean, text, object } from '@storybook/addon-knobs'\\\\\\\\nimport { action } from '@storybook/addon-actions'\\\\\\\\nimport { TextInputStyled } from '../Styles/DateRange.styles'\\\\\\\\nimport TextInput from '../../TextInput'\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/DatePicker`,\\\\\\\\n  component: DatePicker\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst getFormattedDate = (date: Date) => {\\\\\\\\n  const todayTime = date\\\\\\\\n  const month = todayTime.getMonth() + 1\\\\\\\\n  const day = todayTime.getDate()\\\\\\\\n  const year = todayTime.getFullYear()\\\\\\\\n  const hours = todayTime.getHours()\\\\\\\\n  const minutes = todayTime.getMinutes()\\\\\\\\n  const AM = todayTime.getHours() > 12 ? 'PM' : 'AM'\\\\\\\\n\\\\\\\\n  return month + '/' + day + '/' + year + '-' + hours + ':' + minutes + ' ' + AM\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const withDateRange = () => {\\\\\\\\n  const startDate = new Date(\\\\\\\\n    new Date().getFullYear(),\\\\\\\\n    new Date().getMonth(),\\\\\\\\n    new Date().getDate() - 8\\\\\\\\n  )\\\\\\\\n\\\\\\\\n  const endDate = new Date(\\\\\\\\n    new Date().getFullYear(),\\\\\\\\n    new Date().getMonth(),\\\\\\\\n    new Date().getDate() - 1\\\\\\\\n  )\\\\\\\\n\\\\\\\\n  const isInValidDate = (d: any) => {\\\\\\\\n    return d instanceof Date && isNaN(d.getTime())\\\\\\\\n  }\\\\\\\\n  // const convertStringToDate = (input: string) => {\\\\\\\\n  //   const finalDate = new Date()\\\\\\\\n  //   const dateArray = input.trim().split('/')\\\\\\\\n  //   const month = parseInt(dateArray[0])\\\\\\\\n  //   if (month <= 12) {\\\\\\\\n  //     //  valid day\\\\\\\\n  //     finalDate.setMonth(month - 1)\\\\\\\\n\\\\\\\\n  //     // set Month\\\\\\\\n  //     const day = parseInt(dateArray[1])\\\\\\\\n  //     if (day <= 31) {\\\\\\\\n  //       finalDate.setDate(day)\\\\\\\\n\\\\\\\\n  //       // set year\\\\\\\\n  //       const year = parseInt(dateArray[2])\\\\\\\\n  //       if (year <= 2050 && year >= 1970) {\\\\\\\\n  //         finalDate.setFullYear(year)\\\\\\\\n\\\\\\\\n  //         // return finalDate\\\\\\\\n  //         return finalDate\\\\\\\\n  //       }\\\\\\\\n  //     }\\\\\\\\n  //   }\\\\\\\\n  //   return undefined\\\\\\\\n  // }\\\\\\\\n  const convertStringToDate = (input: string) => {\\\\\\\\n    const newDate = new Date(input)\\\\\\\\n    if (isInValidDate(newDate)) {\\\\\\\\n      return undefined\\\\\\\\n    } else {\\\\\\\\n      console.log('String to Date: ', newDate)\\\\\\\\n      return newDate\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <DateRangePicker\\\\\\\\n        onFromChange={action('From Clicked')}\\\\\\\\n        onToChange={action('To Clicked')}\\\\\\\\n        onApply={action('Apply Clicked')}\\\\\\\\n        onCancel={action('Cancel Clicked')}\\\\\\\\n        label={text('Label', 'Date Range')}\\\\\\\\n        variant='daterange'\\\\\\\\n        timeFormat={12}\\\\\\\\n        showTime={boolean('Show time', true)}\\\\\\\\n        style={object('style', {\\\\\\\\n          position: 'absolute',\\\\\\\\n          left: '0px'\\\\\\\\n        })}\\\\\\\\n        startDate={startDate}\\\\\\\\n        endDate={endDate}\\\\\\\\n        fromDateFormatter={getFormattedDate}\\\\\\\\n        toDateFormatter={getFormattedDate}\\\\\\\\n        stringToDate={convertStringToDate}\\\\\\\\n        open={boolean('open', false)}\\\\\\\\n      >\\\\\\\\n        {({ value, open, setOpen }: tDateRangeChildren) => (\\\\\\\\n          <div>\\\\\\\\n            <TextInputStyled onClick={() => setOpen(!open)}>\\\\\\\\n              <TextInput\\\\\\\\n                id='someId'\\\\\\\\n                name='someId'\\\\\\\\n                className='someClassname'\\\\\\\\n                label='Holidays'\\\\\\\\n                variant='basic'\\\\\\\\n                labelColor='text.inputLabel.default'\\\\\\\\n                placeholder='Please Click Here'\\\\\\\\n                fullWidth\\\\\\\\n                value={value?.toString()}\\\\\\\\n                onChange={action('On change clicked')}\\\\\\\\n              />\\\\\\\\n            </TextInputStyled>\\\\\\\\n          </div>\\\\\\\\n        )}\\\\\\\\n      </DateRangePicker>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\";\\\\n// @ts-ignore\\\\nvar __ADDS_MAP__ = {};\\\\n// @ts-ignore\\\\nvar __MAIN_FILE_LOCATION__ = \\\\\\\"/DateRange.stories.tsx\\\\\\\";\\\\n// @ts-ignore\\\\nvar __MODULE_DEPENDENCIES__ = [];\\\\n// @ts-ignore\\\\nvar __LOCAL_DEPENDENCIES__ = {};\\\\n// @ts-ignore\\\\nvar __IDS_TO_FRAMEWORKS__ = {};\\\\n        \\\\nimport React from 'react'\\\\nimport { DatePicker, DateRangePicker } from '../../DatePicker'\\\\nimport { tDateRangeChildren } from '../interfaces'\\\\nimport { path } from '../..'\\\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\\\nimport { boolean, text, object } from '@storybook/addon-knobs'\\\\nimport { action } from '@storybook/addon-actions'\\\\nimport { TextInputStyled } from '../Styles/DateRange.styles'\\\\nimport TextInput from '../../TextInput'\\\\n\\\\nexport default {parameters: {\\\\\\\"storySource\\\\\\\":{\\\\\\\"source\\\\\\\":\\\\\\\"import React from 'react'\\\\\\\\nimport { DatePicker, DateRangePicker } from '../../DatePicker'\\\\\\\\nimport { tDateRangeChildren } from '../interfaces'\\\\\\\\nimport { path } from '../..'\\\\\\\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\\\\\\\nimport { boolean, text, object } from '@storybook/addon-knobs'\\\\\\\\nimport { action } from '@storybook/addon-actions'\\\\\\\\nimport { TextInputStyled } from '../Styles/DateRange.styles'\\\\\\\\nimport TextInput from '../../TextInput'\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/DatePicker`,\\\\\\\\n  component: DatePicker\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst getFormattedDate = (date: Date) => {\\\\\\\\n  const todayTime = date\\\\\\\\n  const month = todayTime.getMonth() + 1\\\\\\\\n  const day = todayTime.getDate()\\\\\\\\n  const year = todayTime.getFullYear()\\\\\\\\n  const hours = todayTime.getHours()\\\\\\\\n  const minutes = todayTime.getMinutes()\\\\\\\\n  const AM = todayTime.getHours() > 12 ? 'PM' : 'AM'\\\\\\\\n\\\\\\\\n  return month + '/' + day + '/' + year + '-' + hours + ':' + minutes + ' ' + AM\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const withDateRange = () => {\\\\\\\\n  const startDate = new Date(\\\\\\\\n    new Date().getFullYear(),\\\\\\\\n    new Date().getMonth(),\\\\\\\\n    new Date().getDate() - 8\\\\\\\\n  )\\\\\\\\n\\\\\\\\n  const endDate = new Date(\\\\\\\\n    new Date().getFullYear(),\\\\\\\\n    new Date().getMonth(),\\\\\\\\n    new Date().getDate() - 1\\\\\\\\n  )\\\\\\\\n\\\\\\\\n  const isInValidDate = (d: any) => {\\\\\\\\n    return d instanceof Date && isNaN(d.getTime())\\\\\\\\n  }\\\\\\\\n  // const convertStringToDate = (input: string) => {\\\\\\\\n  //   const finalDate = new Date()\\\\\\\\n  //   const dateArray = input.trim().split('/')\\\\\\\\n  //   const month = parseInt(dateArray[0])\\\\\\\\n  //   if (month <= 12) {\\\\\\\\n  //     //  valid day\\\\\\\\n  //     finalDate.setMonth(month - 1)\\\\\\\\n\\\\\\\\n  //     // set Month\\\\\\\\n  //     const day = parseInt(dateArray[1])\\\\\\\\n  //     if (day <= 31) {\\\\\\\\n  //       finalDate.setDate(day)\\\\\\\\n\\\\\\\\n  //       // set year\\\\\\\\n  //       const year = parseInt(dateArray[2])\\\\\\\\n  //       if (year <= 2050 && year >= 1970) {\\\\\\\\n  //         finalDate.setFullYear(year)\\\\\\\\n\\\\\\\\n  //         // return finalDate\\\\\\\\n  //         return finalDate\\\\\\\\n  //       }\\\\\\\\n  //     }\\\\\\\\n  //   }\\\\\\\\n  //   return undefined\\\\\\\\n  // }\\\\\\\\n  const convertStringToDate = (input: string) => {\\\\\\\\n    const newDate = new Date(input)\\\\\\\\n    if (isInValidDate(newDate)) {\\\\\\\\n      return undefined\\\\\\\\n    } else {\\\\\\\\n      console.log('String to Date: ', newDate)\\\\\\\\n      return newDate\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <DateRangePicker\\\\\\\\n        onFromChange={action('From Clicked')}\\\\\\\\n        onToChange={action('To Clicked')}\\\\\\\\n        onApply={action('Apply Clicked')}\\\\\\\\n        onCancel={action('Cancel Clicked')}\\\\\\\\n        label={text('Label', 'Date Range')}\\\\\\\\n        variant='daterange'\\\\\\\\n        timeFormat={12}\\\\\\\\n        showTime={boolean('Show time', true)}\\\\\\\\n        style={object('style', {\\\\\\\\n          position: 'absolute',\\\\\\\\n          left: '0px'\\\\\\\\n        })}\\\\\\\\n        startDate={startDate}\\\\\\\\n        endDate={endDate}\\\\\\\\n        fromDateFormatter={getFormattedDate}\\\\\\\\n        toDateFormatter={getFormattedDate}\\\\\\\\n        stringToDate={convertStringToDate}\\\\\\\\n        open={boolean('open', false)}\\\\\\\\n      >\\\\\\\\n        {({ value, open, setOpen }: tDateRangeChildren) => (\\\\\\\\n          <div>\\\\\\\\n            <TextInputStyled onClick={() => setOpen(!open)}>\\\\\\\\n              <TextInput\\\\\\\\n                id='someId'\\\\\\\\n                name='someId'\\\\\\\\n                className='someClassname'\\\\\\\\n                label='Holidays'\\\\\\\\n                variant='basic'\\\\\\\\n                labelColor='text.inputLabel.default'\\\\\\\\n                placeholder='Please Click Here'\\\\\\\\n                fullWidth\\\\\\\\n                value={value?.toString()}\\\\\\\\n                onChange={action('On change clicked')}\\\\\\\\n              />\\\\\\\\n            </TextInputStyled>\\\\\\\\n          </div>\\\\\\\\n        )}\\\\\\\\n      </DateRangePicker>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\",\\\\\\\"locationsMap\\\\\\\":{}},},\\\\n  title: `${path}/DatePicker`,\\\\n  component: DatePicker\\\\n}\\\\n\\\\nconst getFormattedDate = (date: Date) => {\\\\n  const todayTime = date\\\\n  const month = todayTime.getMonth() + 1\\\\n  const day = todayTime.getDate()\\\\n  const year = todayTime.getFullYear()\\\\n  const hours = todayTime.getHours()\\\\n  const minutes = todayTime.getMinutes()\\\\n  const AM = todayTime.getHours() > 12 ? 'PM' : 'AM'\\\\n\\\\n  return month + '/' + day + '/' + year + '-' + hours + ':' + minutes + ' ' + AM\\\\n}\\\\n\\\\nexport const withDateRange = addSourceDecorator(() => {\\\\n  const startDate = new Date(\\\\n    new Date().getFullYear(),\\\\n    new Date().getMonth(),\\\\n    new Date().getDate() - 8\\\\n  )\\\\n\\\\n  const endDate = new Date(\\\\n    new Date().getFullYear(),\\\\n    new Date().getMonth(),\\\\n    new Date().getDate() - 1\\\\n  )\\\\n\\\\n  const isInValidDate = (d: any) => {\\\\n    return d instanceof Date && isNaN(d.getTime())\\\\n  }\\\\n  // const convertStringToDate = (input: string) => {\\\\n  //   const finalDate = new Date()\\\\n  //   const dateArray = input.trim().split('/')\\\\n  //   const month = parseInt(dateArray[0])\\\\n  //   if (month <= 12) {\\\\n  //     //  valid day\\\\n  //     finalDate.setMonth(month - 1)\\\\n\\\\n  //     // set Month\\\\n  //     const day = parseInt(dateArray[1])\\\\n  //     if (day <= 31) {\\\\n  //       finalDate.setDate(day)\\\\n\\\\n  //       // set year\\\\n  //       const year = parseInt(dateArray[2])\\\\n  //       if (year <= 2050 && year >= 1970) {\\\\n  //         finalDate.setFullYear(year)\\\\n\\\\n  //         // return finalDate\\\\n  //         return finalDate\\\\n  //       }\\\\n  //     }\\\\n  //   }\\\\n  //   return undefined\\\\n  // }\\\\n  const convertStringToDate = (input: string) => {\\\\n    const newDate = new Date(input)\\\\n    if (isInValidDate(newDate)) {\\\\n      return undefined\\\\n    } else {\\\\n      console.log('String to Date: ', newDate)\\\\n      return newDate\\\\n    }\\\\n  }\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <DateRangePicker\\\\n        onFromChange={action('From Clicked')}\\\\n        onToChange={action('To Clicked')}\\\\n        onApply={action('Apply Clicked')}\\\\n        onCancel={action('Cancel Clicked')}\\\\n        label={text('Label', 'Date Range')}\\\\n        variant='daterange'\\\\n        timeFormat={12}\\\\n        showTime={boolean('Show time', true)}\\\\n        style={object('style', {\\\\n          position: 'absolute',\\\\n          left: '0px'\\\\n        })}\\\\n        startDate={startDate}\\\\n        endDate={endDate}\\\\n        fromDateFormatter={getFormattedDate}\\\\n        toDateFormatter={getFormattedDate}\\\\n        stringToDate={convertStringToDate}\\\\n        open={boolean('open', false)}\\\\n      >\\\\n        {({ value, open, setOpen }: tDateRangeChildren) => (\\\\n          <div>\\\\n            <TextInputStyled onClick={() => setOpen(!open)}>\\\\n              <TextInput\\\\n                id='someId'\\\\n                name='someId'\\\\n                className='someClassname'\\\\n                label='Holidays'\\\\n                variant='basic'\\\\n                labelColor='text.inputLabel.default'\\\\n                placeholder='Please Click Here'\\\\n                fullWidth\\\\n                value={value?.toString()}\\\\n                onChange={action('On change clicked')}\\\\n              />\\\\n            </TextInputStyled>\\\\n          </div>\\\\n        )}\\\\n      </DateRangePicker>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/DateRange.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\n\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/molecules/DatePicker/stories\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"import React from 'react'\\\\nimport { DatePicker, DateRangePicker } from '../../DatePicker'\\\\nimport { tDateRangeChildren } from '../interfaces'\\\\nimport { path } from '../..'\\\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\\\nimport { boolean, text, object } from '@storybook/addon-knobs'\\\\nimport { action } from '@storybook/addon-actions'\\\\nimport { TextInputStyled } from '../Styles/DateRange.styles'\\\\nimport TextInput from '../../TextInput'\\\\n\\\\nexport default {\\\\n  title: `${path}/DatePicker`,\\\\n  component: DatePicker\\\\n}\\\\n\\\\nconst getFormattedDate = (date: Date) => {\\\\n  const todayTime = date\\\\n  const month = todayTime.getMonth() + 1\\\\n  const day = todayTime.getDate()\\\\n  const year = todayTime.getFullYear()\\\\n  const hours = todayTime.getHours()\\\\n  const minutes = todayTime.getMinutes()\\\\n  const AM = todayTime.getHours() > 12 ? 'PM' : 'AM'\\\\n\\\\n  return month + '/' + day + '/' + year + '-' + hours + ':' + minutes + ' ' + AM\\\\n}\\\\n\\\\nexport const withDateRange = () => {\\\\n  const startDate = new Date(\\\\n    new Date().getFullYear(),\\\\n    new Date().getMonth(),\\\\n    new Date().getDate() - 8\\\\n  )\\\\n\\\\n  const endDate = new Date(\\\\n    new Date().getFullYear(),\\\\n    new Date().getMonth(),\\\\n    new Date().getDate() - 1\\\\n  )\\\\n\\\\n  const isInValidDate = (d: any) => {\\\\n    return d instanceof Date && isNaN(d.getTime())\\\\n  }\\\\n  // const convertStringToDate = (input: string) => {\\\\n  //   const finalDate = new Date()\\\\n  //   const dateArray = input.trim().split('/')\\\\n  //   const month = parseInt(dateArray[0])\\\\n  //   if (month <= 12) {\\\\n  //     //  valid day\\\\n  //     finalDate.setMonth(month - 1)\\\\n\\\\n  //     // set Month\\\\n  //     const day = parseInt(dateArray[1])\\\\n  //     if (day <= 31) {\\\\n  //       finalDate.setDate(day)\\\\n\\\\n  //       // set year\\\\n  //       const year = parseInt(dateArray[2])\\\\n  //       if (year <= 2050 && year >= 1970) {\\\\n  //         finalDate.setFullYear(year)\\\\n\\\\n  //         // return finalDate\\\\n  //         return finalDate\\\\n  //       }\\\\n  //     }\\\\n  //   }\\\\n  //   return undefined\\\\n  // }\\\\n  const convertStringToDate = (input: string) => {\\\\n    const newDate = new Date(input)\\\\n    if (isInValidDate(newDate)) {\\\\n      return undefined\\\\n    } else {\\\\n      console.log('String to Date: ', newDate)\\\\n      return newDate\\\\n    }\\\\n  }\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <DateRangePicker\\\\n        onFromChange={action('From Clicked')}\\\\n        onToChange={action('To Clicked')}\\\\n        onApply={action('Apply Clicked')}\\\\n        onCancel={action('Cancel Clicked')}\\\\n        label={text('Label', 'Date Range')}\\\\n        variant='daterange'\\\\n        timeFormat={12}\\\\n        showTime={boolean('Show time', true)}\\\\n        style={object('style', {\\\\n          position: 'absolute',\\\\n          left: '0px'\\\\n        })}\\\\n        startDate={startDate}\\\\n        endDate={endDate}\\\\n        fromDateFormatter={getFormattedDate}\\\\n        toDateFormatter={getFormattedDate}\\\\n        stringToDate={convertStringToDate}\\\\n        open={boolean('open', false)}\\\\n      >\\\\n        {({ value, open, setOpen }: tDateRangeChildren) => (\\\\n          <div>\\\\n            <TextInputStyled onClick={() => setOpen(!open)}>\\\\n              <TextInput\\\\n                id='someId'\\\\n                name='someId'\\\\n                className='someClassname'\\\\n                label='Holidays'\\\\n                variant='basic'\\\\n                labelColor='text.inputLabel.default'\\\\n                placeholder='Please Click Here'\\\\n                fullWidth\\\\n                value={value?.toString()}\\\\n                onChange={action('On change clicked')}\\\\n              />\\\\n            </TextInputStyled>\\\\n          </div>\\\\n        )}\\\\n      </DateRangePicker>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/DateRange.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\nimport React from 'react'\\nimport { DatePicker, DateRangePicker } from '../../DatePicker'\\nimport { tDateRangeChildren } from '../interfaces'\\nimport { path } from '../..'\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\nimport { boolean, text, object } from '@storybook/addon-knobs'\\nimport { action } from '@storybook/addon-actions'\\nimport { TextInputStyled } from '../Styles/DateRange.styles'\\nimport TextInput from '../../TextInput'\\n\\nexport default {parameters: {\\\"storySource\\\":{\\\"source\\\":\\\"\\\\n\\\\n// @ts-nocheck\\\\n// @ts-ignore\\\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\\\n// @ts-ignore\\\\nvar addSourceDecorator = require(\\\\\\\"@storybook/source-loader/preview\\\\\\\").addSource;\\\\n// @ts-ignore\\\\nvar __SOURCE_PREFIX__ = \\\\\\\"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/molecules/DatePicker/stories\\\\\\\";\\\\n// @ts-ignore\\\\nvar __STORY__ = \\\\\\\"import React from 'react'\\\\\\\\nimport { DatePicker, DateRangePicker } from '../../DatePicker'\\\\\\\\nimport { tDateRangeChildren } from '../interfaces'\\\\\\\\nimport { path } from '../..'\\\\\\\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\\\\\\\nimport { boolean, text, object } from '@storybook/addon-knobs'\\\\\\\\nimport { action } from '@storybook/addon-actions'\\\\\\\\nimport { TextInputStyled } from '../Styles/DateRange.styles'\\\\\\\\nimport TextInput from '../../TextInput'\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/DatePicker`,\\\\\\\\n  component: DatePicker\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst getFormattedDate = (date: Date) => {\\\\\\\\n  const todayTime = date\\\\\\\\n  const month = todayTime.getMonth() + 1\\\\\\\\n  const day = todayTime.getDate()\\\\\\\\n  const year = todayTime.getFullYear()\\\\\\\\n  const hours = todayTime.getHours()\\\\\\\\n  const minutes = todayTime.getMinutes()\\\\\\\\n  const AM = todayTime.getHours() > 12 ? 'PM' : 'AM'\\\\\\\\n\\\\\\\\n  return month + '/' + day + '/' + year + '-' + hours + ':' + minutes + ' ' + AM\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const withDateRange = () => {\\\\\\\\n  const startDate = new Date(\\\\\\\\n    new Date().getFullYear(),\\\\\\\\n    new Date().getMonth(),\\\\\\\\n    new Date().getDate() - 8\\\\\\\\n  )\\\\\\\\n\\\\\\\\n  const endDate = new Date(\\\\\\\\n    new Date().getFullYear(),\\\\\\\\n    new Date().getMonth(),\\\\\\\\n    new Date().getDate() - 1\\\\\\\\n  )\\\\\\\\n\\\\\\\\n  const isInValidDate = (d: any) => {\\\\\\\\n    return d instanceof Date && isNaN(d.getTime())\\\\\\\\n  }\\\\\\\\n  // const convertStringToDate = (input: string) => {\\\\\\\\n  //   const finalDate = new Date()\\\\\\\\n  //   const dateArray = input.trim().split('/')\\\\\\\\n  //   const month = parseInt(dateArray[0])\\\\\\\\n  //   if (month <= 12) {\\\\\\\\n  //     //  valid day\\\\\\\\n  //     finalDate.setMonth(month - 1)\\\\\\\\n\\\\\\\\n  //     // set Month\\\\\\\\n  //     const day = parseInt(dateArray[1])\\\\\\\\n  //     if (day <= 31) {\\\\\\\\n  //       finalDate.setDate(day)\\\\\\\\n\\\\\\\\n  //       // set year\\\\\\\\n  //       const year = parseInt(dateArray[2])\\\\\\\\n  //       if (year <= 2050 && year >= 1970) {\\\\\\\\n  //         finalDate.setFullYear(year)\\\\\\\\n\\\\\\\\n  //         // return finalDate\\\\\\\\n  //         return finalDate\\\\\\\\n  //       }\\\\\\\\n  //     }\\\\\\\\n  //   }\\\\\\\\n  //   return undefined\\\\\\\\n  // }\\\\\\\\n  const convertStringToDate = (input: string) => {\\\\\\\\n    const newDate = new Date(input)\\\\\\\\n    if (isInValidDate(newDate)) {\\\\\\\\n      return undefined\\\\\\\\n    } else {\\\\\\\\n      console.log('String to Date: ', newDate)\\\\\\\\n      return newDate\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <DateRangePicker\\\\\\\\n        onFromChange={action('From Clicked')}\\\\\\\\n        onToChange={action('To Clicked')}\\\\\\\\n        onApply={action('Apply Clicked')}\\\\\\\\n        onCancel={action('Cancel Clicked')}\\\\\\\\n        label={text('Label', 'Date Range')}\\\\\\\\n        variant='daterange'\\\\\\\\n        timeFormat={12}\\\\\\\\n        showTime={boolean('Show time', true)}\\\\\\\\n        style={object('style', {\\\\\\\\n          position: 'absolute',\\\\\\\\n          left: '0px'\\\\\\\\n        })}\\\\\\\\n        startDate={startDate}\\\\\\\\n        endDate={endDate}\\\\\\\\n        fromDateFormatter={getFormattedDate}\\\\\\\\n        toDateFormatter={getFormattedDate}\\\\\\\\n        stringToDate={convertStringToDate}\\\\\\\\n        open={boolean('open', false)}\\\\\\\\n      >\\\\\\\\n        {({ value, open, setOpen }: tDateRangeChildren) => (\\\\\\\\n          <div>\\\\\\\\n            <TextInputStyled onClick={() => setOpen(!open)}>\\\\\\\\n              <TextInput\\\\\\\\n                id='someId'\\\\\\\\n                name='someId'\\\\\\\\n                className='someClassname'\\\\\\\\n                label='Holidays'\\\\\\\\n                variant='basic'\\\\\\\\n                labelColor='text.inputLabel.default'\\\\\\\\n                placeholder='Please Click Here'\\\\\\\\n                fullWidth\\\\\\\\n                value={value?.toString()}\\\\\\\\n                onChange={action('On change clicked')}\\\\\\\\n              />\\\\\\\\n            </TextInputStyled>\\\\\\\\n          </div>\\\\\\\\n        )}\\\\\\\\n      </DateRangePicker>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\";\\\\n// @ts-ignore\\\\nvar __ADDS_MAP__ = {};\\\\n// @ts-ignore\\\\nvar __MAIN_FILE_LOCATION__ = \\\\\\\"/DateRange.stories.tsx\\\\\\\";\\\\n// @ts-ignore\\\\nvar __MODULE_DEPENDENCIES__ = [];\\\\n// @ts-ignore\\\\nvar __LOCAL_DEPENDENCIES__ = {};\\\\n// @ts-ignore\\\\nvar __IDS_TO_FRAMEWORKS__ = {};\\\\n        \\\\nimport React from 'react'\\\\nimport { DatePicker, DateRangePicker } from '../../DatePicker'\\\\nimport { tDateRangeChildren } from '../interfaces'\\\\nimport { path } from '../..'\\\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\\\nimport { boolean, text, object } from '@storybook/addon-knobs'\\\\nimport { action } from '@storybook/addon-actions'\\\\nimport { TextInputStyled } from '../Styles/DateRange.styles'\\\\nimport TextInput from '../../TextInput'\\\\n\\\\nexport default {parameters: {\\\\\\\"storySource\\\\\\\":{\\\\\\\"source\\\\\\\":\\\\\\\"import React from 'react'\\\\\\\\nimport { DatePicker, DateRangePicker } from '../../DatePicker'\\\\\\\\nimport { tDateRangeChildren } from '../interfaces'\\\\\\\\nimport { path } from '../..'\\\\\\\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\\\\\\\nimport { boolean, text, object } from '@storybook/addon-knobs'\\\\\\\\nimport { action } from '@storybook/addon-actions'\\\\\\\\nimport { TextInputStyled } from '../Styles/DateRange.styles'\\\\\\\\nimport TextInput from '../../TextInput'\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/DatePicker`,\\\\\\\\n  component: DatePicker\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst getFormattedDate = (date: Date) => {\\\\\\\\n  const todayTime = date\\\\\\\\n  const month = todayTime.getMonth() + 1\\\\\\\\n  const day = todayTime.getDate()\\\\\\\\n  const year = todayTime.getFullYear()\\\\\\\\n  const hours = todayTime.getHours()\\\\\\\\n  const minutes = todayTime.getMinutes()\\\\\\\\n  const AM = todayTime.getHours() > 12 ? 'PM' : 'AM'\\\\\\\\n\\\\\\\\n  return month + '/' + day + '/' + year + '-' + hours + ':' + minutes + ' ' + AM\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const withDateRange = () => {\\\\\\\\n  const startDate = new Date(\\\\\\\\n    new Date().getFullYear(),\\\\\\\\n    new Date().getMonth(),\\\\\\\\n    new Date().getDate() - 8\\\\\\\\n  )\\\\\\\\n\\\\\\\\n  const endDate = new Date(\\\\\\\\n    new Date().getFullYear(),\\\\\\\\n    new Date().getMonth(),\\\\\\\\n    new Date().getDate() - 1\\\\\\\\n  )\\\\\\\\n\\\\\\\\n  const isInValidDate = (d: any) => {\\\\\\\\n    return d instanceof Date && isNaN(d.getTime())\\\\\\\\n  }\\\\\\\\n  // const convertStringToDate = (input: string) => {\\\\\\\\n  //   const finalDate = new Date()\\\\\\\\n  //   const dateArray = input.trim().split('/')\\\\\\\\n  //   const month = parseInt(dateArray[0])\\\\\\\\n  //   if (month <= 12) {\\\\\\\\n  //     //  valid day\\\\\\\\n  //     finalDate.setMonth(month - 1)\\\\\\\\n\\\\\\\\n  //     // set Month\\\\\\\\n  //     const day = parseInt(dateArray[1])\\\\\\\\n  //     if (day <= 31) {\\\\\\\\n  //       finalDate.setDate(day)\\\\\\\\n\\\\\\\\n  //       // set year\\\\\\\\n  //       const year = parseInt(dateArray[2])\\\\\\\\n  //       if (year <= 2050 && year >= 1970) {\\\\\\\\n  //         finalDate.setFullYear(year)\\\\\\\\n\\\\\\\\n  //         // return finalDate\\\\\\\\n  //         return finalDate\\\\\\\\n  //       }\\\\\\\\n  //     }\\\\\\\\n  //   }\\\\\\\\n  //   return undefined\\\\\\\\n  // }\\\\\\\\n  const convertStringToDate = (input: string) => {\\\\\\\\n    const newDate = new Date(input)\\\\\\\\n    if (isInValidDate(newDate)) {\\\\\\\\n      return undefined\\\\\\\\n    } else {\\\\\\\\n      console.log('String to Date: ', newDate)\\\\\\\\n      return newDate\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <DateRangePicker\\\\\\\\n        onFromChange={action('From Clicked')}\\\\\\\\n        onToChange={action('To Clicked')}\\\\\\\\n        onApply={action('Apply Clicked')}\\\\\\\\n        onCancel={action('Cancel Clicked')}\\\\\\\\n        label={text('Label', 'Date Range')}\\\\\\\\n        variant='daterange'\\\\\\\\n        timeFormat={12}\\\\\\\\n        showTime={boolean('Show time', true)}\\\\\\\\n        style={object('style', {\\\\\\\\n          position: 'absolute',\\\\\\\\n          left: '0px'\\\\\\\\n        })}\\\\\\\\n        startDate={startDate}\\\\\\\\n        endDate={endDate}\\\\\\\\n        fromDateFormatter={getFormattedDate}\\\\\\\\n        toDateFormatter={getFormattedDate}\\\\\\\\n        stringToDate={convertStringToDate}\\\\\\\\n        open={boolean('open', false)}\\\\\\\\n      >\\\\\\\\n        {({ value, open, setOpen }: tDateRangeChildren) => (\\\\\\\\n          <div>\\\\\\\\n            <TextInputStyled onClick={() => setOpen(!open)}>\\\\\\\\n              <TextInput\\\\\\\\n                id='someId'\\\\\\\\n                name='someId'\\\\\\\\n                className='someClassname'\\\\\\\\n                label='Holidays'\\\\\\\\n                variant='basic'\\\\\\\\n                labelColor='text.inputLabel.default'\\\\\\\\n                placeholder='Please Click Here'\\\\\\\\n                fullWidth\\\\\\\\n                value={value?.toString()}\\\\\\\\n                onChange={action('On change clicked')}\\\\\\\\n              />\\\\\\\\n            </TextInputStyled>\\\\\\\\n          </div>\\\\\\\\n        )}\\\\\\\\n      </DateRangePicker>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\",\\\\\\\"locationsMap\\\\\\\":{}},},\\\\n  title: `${path}/DatePicker`,\\\\n  component: DatePicker\\\\n}\\\\n\\\\nconst getFormattedDate = (date: Date) => {\\\\n  const todayTime = date\\\\n  const month = todayTime.getMonth() + 1\\\\n  const day = todayTime.getDate()\\\\n  const year = todayTime.getFullYear()\\\\n  const hours = todayTime.getHours()\\\\n  const minutes = todayTime.getMinutes()\\\\n  const AM = todayTime.getHours() > 12 ? 'PM' : 'AM'\\\\n\\\\n  return month + '/' + day + '/' + year + '-' + hours + ':' + minutes + ' ' + AM\\\\n}\\\\n\\\\nexport const withDateRange = addSourceDecorator(() => {\\\\n  const startDate = new Date(\\\\n    new Date().getFullYear(),\\\\n    new Date().getMonth(),\\\\n    new Date().getDate() - 8\\\\n  )\\\\n\\\\n  const endDate = new Date(\\\\n    new Date().getFullYear(),\\\\n    new Date().getMonth(),\\\\n    new Date().getDate() - 1\\\\n  )\\\\n\\\\n  const isInValidDate = (d: any) => {\\\\n    return d instanceof Date && isNaN(d.getTime())\\\\n  }\\\\n  // const convertStringToDate = (input: string) => {\\\\n  //   const finalDate = new Date()\\\\n  //   const dateArray = input.trim().split('/')\\\\n  //   const month = parseInt(dateArray[0])\\\\n  //   if (month <= 12) {\\\\n  //     //  valid day\\\\n  //     finalDate.setMonth(month - 1)\\\\n\\\\n  //     // set Month\\\\n  //     const day = parseInt(dateArray[1])\\\\n  //     if (day <= 31) {\\\\n  //       finalDate.setDate(day)\\\\n\\\\n  //       // set year\\\\n  //       const year = parseInt(dateArray[2])\\\\n  //       if (year <= 2050 && year >= 1970) {\\\\n  //         finalDate.setFullYear(year)\\\\n\\\\n  //         // return finalDate\\\\n  //         return finalDate\\\\n  //       }\\\\n  //     }\\\\n  //   }\\\\n  //   return undefined\\\\n  // }\\\\n  const convertStringToDate = (input: string) => {\\\\n    const newDate = new Date(input)\\\\n    if (isInValidDate(newDate)) {\\\\n      return undefined\\\\n    } else {\\\\n      console.log('String to Date: ', newDate)\\\\n      return newDate\\\\n    }\\\\n  }\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <DateRangePicker\\\\n        onFromChange={action('From Clicked')}\\\\n        onToChange={action('To Clicked')}\\\\n        onApply={action('Apply Clicked')}\\\\n        onCancel={action('Cancel Clicked')}\\\\n        label={text('Label', 'Date Range')}\\\\n        variant='daterange'\\\\n        timeFormat={12}\\\\n        showTime={boolean('Show time', true)}\\\\n        style={object('style', {\\\\n          position: 'absolute',\\\\n          left: '0px'\\\\n        })}\\\\n        startDate={startDate}\\\\n        endDate={endDate}\\\\n        fromDateFormatter={getFormattedDate}\\\\n        toDateFormatter={getFormattedDate}\\\\n        stringToDate={convertStringToDate}\\\\n        open={boolean('open', false)}\\\\n      >\\\\n        {({ value, open, setOpen }: tDateRangeChildren) => (\\\\n          <div>\\\\n            <TextInputStyled onClick={() => setOpen(!open)}>\\\\n              <TextInput\\\\n                id='someId'\\\\n                name='someId'\\\\n                className='someClassname'\\\\n                label='Holidays'\\\\n                variant='basic'\\\\n                labelColor='text.inputLabel.default'\\\\n                placeholder='Please Click Here'\\\\n                fullWidth\\\\n                value={value?.toString()}\\\\n                onChange={action('On change clicked')}\\\\n              />\\\\n            </TextInputStyled>\\\\n          </div>\\\\n        )}\\\\n      </DateRangePicker>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\",\\\"locationsMap\\\":{}},\\\"storySource\\\":{\\\"source\\\":\\\"import React from 'react'\\\\nimport { DatePicker, DateRangePicker } from '../../DatePicker'\\\\nimport { tDateRangeChildren } from '../interfaces'\\\\nimport { path } from '../..'\\\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\\\nimport { boolean, text, object } from '@storybook/addon-knobs'\\\\nimport { action } from '@storybook/addon-actions'\\\\nimport { TextInputStyled } from '../Styles/DateRange.styles'\\\\nimport TextInput from '../../TextInput'\\\\n\\\\nexport default {\\\\n  title: `${path}/DatePicker`,\\\\n  component: DatePicker\\\\n}\\\\n\\\\nconst getFormattedDate = (date: Date) => {\\\\n  const todayTime = date\\\\n  const month = todayTime.getMonth() + 1\\\\n  const day = todayTime.getDate()\\\\n  const year = todayTime.getFullYear()\\\\n  const hours = todayTime.getHours()\\\\n  const minutes = todayTime.getMinutes()\\\\n  const AM = todayTime.getHours() > 12 ? 'PM' : 'AM'\\\\n\\\\n  return month + '/' + day + '/' + year + '-' + hours + ':' + minutes + ' ' + AM\\\\n}\\\\n\\\\nexport const withDateRange = () => {\\\\n  const startDate = new Date(\\\\n    new Date().getFullYear(),\\\\n    new Date().getMonth(),\\\\n    new Date().getDate() - 8\\\\n  )\\\\n\\\\n  const endDate = new Date(\\\\n    new Date().getFullYear(),\\\\n    new Date().getMonth(),\\\\n    new Date().getDate() - 1\\\\n  )\\\\n\\\\n  const isInValidDate = (d: any) => {\\\\n    return d instanceof Date && isNaN(d.getTime())\\\\n  }\\\\n  // const convertStringToDate = (input: string) => {\\\\n  //   const finalDate = new Date()\\\\n  //   const dateArray = input.trim().split('/')\\\\n  //   const month = parseInt(dateArray[0])\\\\n  //   if (month <= 12) {\\\\n  //     //  valid day\\\\n  //     finalDate.setMonth(month - 1)\\\\n\\\\n  //     // set Month\\\\n  //     const day = parseInt(dateArray[1])\\\\n  //     if (day <= 31) {\\\\n  //       finalDate.setDate(day)\\\\n\\\\n  //       // set year\\\\n  //       const year = parseInt(dateArray[2])\\\\n  //       if (year <= 2050 && year >= 1970) {\\\\n  //         finalDate.setFullYear(year)\\\\n\\\\n  //         // return finalDate\\\\n  //         return finalDate\\\\n  //       }\\\\n  //     }\\\\n  //   }\\\\n  //   return undefined\\\\n  // }\\\\n  const convertStringToDate = (input: string) => {\\\\n    const newDate = new Date(input)\\\\n    if (isInValidDate(newDate)) {\\\\n      return undefined\\\\n    } else {\\\\n      console.log('String to Date: ', newDate)\\\\n      return newDate\\\\n    }\\\\n  }\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <DateRangePicker\\\\n        onFromChange={action('From Clicked')}\\\\n        onToChange={action('To Clicked')}\\\\n        onApply={action('Apply Clicked')}\\\\n        onCancel={action('Cancel Clicked')}\\\\n        label={text('Label', 'Date Range')}\\\\n        variant='daterange'\\\\n        timeFormat={12}\\\\n        showTime={boolean('Show time', true)}\\\\n        style={object('style', {\\\\n          position: 'absolute',\\\\n          left: '0px'\\\\n        })}\\\\n        startDate={startDate}\\\\n        endDate={endDate}\\\\n        fromDateFormatter={getFormattedDate}\\\\n        toDateFormatter={getFormattedDate}\\\\n        stringToDate={convertStringToDate}\\\\n        open={boolean('open', false)}\\\\n      >\\\\n        {({ value, open, setOpen }: tDateRangeChildren) => (\\\\n          <div>\\\\n            <TextInputStyled onClick={() => setOpen(!open)}>\\\\n              <TextInput\\\\n                id='someId'\\\\n                name='someId'\\\\n                className='someClassname'\\\\n                label='Holidays'\\\\n                variant='basic'\\\\n                labelColor='text.inputLabel.default'\\\\n                placeholder='Please Click Here'\\\\n                fullWidth\\\\n                value={value?.toString()}\\\\n                onChange={action('On change clicked')}\\\\n              />\\\\n            </TextInputStyled>\\\\n          </div>\\\\n        )}\\\\n      </DateRangePicker>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\",\\\"locationsMap\\\":{}},},\\n  title: `${path}/DatePicker`,\\n  component: DatePicker\\n}\\n\\nconst getFormattedDate = (date: Date) => {\\n  const todayTime = date\\n  const month = todayTime.getMonth() + 1\\n  const day = todayTime.getDate()\\n  const year = todayTime.getFullYear()\\n  const hours = todayTime.getHours()\\n  const minutes = todayTime.getMinutes()\\n  const AM = todayTime.getHours() > 12 ? 'PM' : 'AM'\\n\\n  return month + '/' + day + '/' + year + '-' + hours + ':' + minutes + ' ' + AM\\n}\\n\\nexport const withDateRange = addSourceDecorator(addSourceDecorator(() => {\\n  const startDate = new Date(\\n    new Date().getFullYear(),\\n    new Date().getMonth(),\\n    new Date().getDate() - 8\\n  )\\n\\n  const endDate = new Date(\\n    new Date().getFullYear(),\\n    new Date().getMonth(),\\n    new Date().getDate() - 1\\n  )\\n\\n  const isInValidDate = (d: any) => {\\n    return d instanceof Date && isNaN(d.getTime())\\n  }\\n  // const convertStringToDate = (input: string) => {\\n  //   const finalDate = new Date()\\n  //   const dateArray = input.trim().split('/')\\n  //   const month = parseInt(dateArray[0])\\n  //   if (month <= 12) {\\n  //     //  valid day\\n  //     finalDate.setMonth(month - 1)\\n\\n  //     // set Month\\n  //     const day = parseInt(dateArray[1])\\n  //     if (day <= 31) {\\n  //       finalDate.setDate(day)\\n\\n  //       // set year\\n  //       const year = parseInt(dateArray[2])\\n  //       if (year <= 2050 && year >= 1970) {\\n  //         finalDate.setFullYear(year)\\n\\n  //         // return finalDate\\n  //         return finalDate\\n  //       }\\n  //     }\\n  //   }\\n  //   return undefined\\n  // }\\n  const convertStringToDate = (input: string) => {\\n    const newDate = new Date(input)\\n    if (isInValidDate(newDate)) {\\n      return undefined\\n    } else {\\n      console.log('String to Date: ', newDate)\\n      return newDate\\n    }\\n  }\\n  return (\\n    <ThemeWrapper>\\n      <DateRangePicker\\n        onFromChange={action('From Clicked')}\\n        onToChange={action('To Clicked')}\\n        onApply={action('Apply Clicked')}\\n        onCancel={action('Cancel Clicked')}\\n        label={text('Label', 'Date Range')}\\n        variant='daterange'\\n        timeFormat={12}\\n        showTime={boolean('Show time', true)}\\n        style={object('style', {\\n          position: 'absolute',\\n          left: '0px'\\n        })}\\n        startDate={startDate}\\n        endDate={endDate}\\n        fromDateFormatter={getFormattedDate}\\n        toDateFormatter={getFormattedDate}\\n        stringToDate={convertStringToDate}\\n        open={boolean('open', false)}\\n      >\\n        {({ value, open, setOpen }: tDateRangeChildren) => (\\n          <div>\\n            <TextInputStyled onClick={() => setOpen(!open)}>\\n              <TextInput\\n                id='someId'\\n                name='someId'\\n                className='someClassname'\\n                label='Holidays'\\n                variant='basic'\\n                labelColor='text.inputLabel.default'\\n                placeholder='Please Click Here'\\n                fullWidth\\n                value={value?.toString()}\\n                onChange={action('On change clicked')}\\n              />\\n            </TextInputStyled>\\n          </div>\\n        )}\\n      </DateRangePicker>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\";\n// @ts-ignore\nvar __ADDS_MAP__ = {};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = \"/DateRange.stories.tsx\";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \n\n/* eslint-disable */\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\n// @ts-ignore\nvar addSourceDecorator = require(\"@storybook/source-loader/preview\").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/molecules/DatePicker/stories\";\n// @ts-ignore\nvar __STORY__ = \"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/molecules/DatePicker/stories\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"import React from 'react'\\\\nimport { DatePicker, DateRangePicker } from '../../DatePicker'\\\\nimport { tDateRangeChildren } from '../interfaces'\\\\nimport { path } from '../..'\\\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\\\nimport { boolean, text, object } from '@storybook/addon-knobs'\\\\nimport { action } from '@storybook/addon-actions'\\\\nimport { TextInputStyled } from '../Styles/DateRange.styles'\\\\nimport TextInput from '../../TextInput'\\\\n\\\\nexport default {\\\\n  title: `${path}/DatePicker`,\\\\n  component: DatePicker\\\\n}\\\\n\\\\nconst getFormattedDate = (date: Date) => {\\\\n  const todayTime = date\\\\n  const month = todayTime.getMonth() + 1\\\\n  const day = todayTime.getDate()\\\\n  const year = todayTime.getFullYear()\\\\n  const hours = todayTime.getHours()\\\\n  const minutes = todayTime.getMinutes()\\\\n  const AM = todayTime.getHours() > 12 ? 'PM' : 'AM'\\\\n\\\\n  return month + '/' + day + '/' + year + '-' + hours + ':' + minutes + ' ' + AM\\\\n}\\\\n\\\\nexport const withDateRange = () => {\\\\n  const startDate = new Date(\\\\n    new Date().getFullYear(),\\\\n    new Date().getMonth(),\\\\n    new Date().getDate() - 8\\\\n  )\\\\n\\\\n  const endDate = new Date(\\\\n    new Date().getFullYear(),\\\\n    new Date().getMonth(),\\\\n    new Date().getDate() - 1\\\\n  )\\\\n\\\\n  const isInValidDate = (d: any) => {\\\\n    return d instanceof Date && isNaN(d.getTime())\\\\n  }\\\\n  // const convertStringToDate = (input: string) => {\\\\n  //   const finalDate = new Date()\\\\n  //   const dateArray = input.trim().split('/')\\\\n  //   const month = parseInt(dateArray[0])\\\\n  //   if (month <= 12) {\\\\n  //     //  valid day\\\\n  //     finalDate.setMonth(month - 1)\\\\n\\\\n  //     // set Month\\\\n  //     const day = parseInt(dateArray[1])\\\\n  //     if (day <= 31) {\\\\n  //       finalDate.setDate(day)\\\\n\\\\n  //       // set year\\\\n  //       const year = parseInt(dateArray[2])\\\\n  //       if (year <= 2050 && year >= 1970) {\\\\n  //         finalDate.setFullYear(year)\\\\n\\\\n  //         // return finalDate\\\\n  //         return finalDate\\\\n  //       }\\\\n  //     }\\\\n  //   }\\\\n  //   return undefined\\\\n  // }\\\\n  const convertStringToDate = (input: string) => {\\\\n    const newDate = new Date(input)\\\\n    if (isInValidDate(newDate)) {\\\\n      return undefined\\\\n    } else {\\\\n      console.log('String to Date: ', newDate)\\\\n      return newDate\\\\n    }\\\\n  }\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <DateRangePicker\\\\n        onFromChange={action('From Clicked')}\\\\n        onToChange={action('To Clicked')}\\\\n        onApply={action('Apply Clicked')}\\\\n        onCancel={action('Cancel Clicked')}\\\\n        label={text('Label', 'Date Range')}\\\\n        variant='daterange'\\\\n        timeFormat={12}\\\\n        showTime={boolean('Show time', true)}\\\\n        style={object('style', {\\\\n          position: 'absolute',\\\\n          left: '0px'\\\\n        })}\\\\n        startDate={startDate}\\\\n        endDate={endDate}\\\\n        fromDateFormatter={getFormattedDate}\\\\n        toDateFormatter={getFormattedDate}\\\\n        stringToDate={convertStringToDate}\\\\n        open={boolean('open', false)}\\\\n      >\\\\n        {({ value, open, setOpen }: tDateRangeChildren) => (\\\\n          <div>\\\\n            <TextInputStyled onClick={() => setOpen(!open)}>\\\\n              <TextInput\\\\n                id='someId'\\\\n                name='someId'\\\\n                className='someClassname'\\\\n                label='Holidays'\\\\n                variant='basic'\\\\n                labelColor='text.inputLabel.default'\\\\n                placeholder='Please Click Here'\\\\n                fullWidth\\\\n                value={value?.toString()}\\\\n                onChange={action('On change clicked')}\\\\n              />\\\\n            </TextInputStyled>\\\\n          </div>\\\\n        )}\\\\n      </DateRangePicker>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/DateRange.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\nimport React from 'react'\\nimport { DatePicker, DateRangePicker } from '../../DatePicker'\\nimport { tDateRangeChildren } from '../interfaces'\\nimport { path } from '../..'\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\nimport { boolean, text, object } from '@storybook/addon-knobs'\\nimport { action } from '@storybook/addon-actions'\\nimport { TextInputStyled } from '../Styles/DateRange.styles'\\nimport TextInput from '../../TextInput'\\n\\nexport default {parameters: {\\\"storySource\\\":{\\\"source\\\":\\\"import React from 'react'\\\\nimport { DatePicker, DateRangePicker } from '../../DatePicker'\\\\nimport { tDateRangeChildren } from '../interfaces'\\\\nimport { path } from '../..'\\\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\\\nimport { boolean, text, object } from '@storybook/addon-knobs'\\\\nimport { action } from '@storybook/addon-actions'\\\\nimport { TextInputStyled } from '../Styles/DateRange.styles'\\\\nimport TextInput from '../../TextInput'\\\\n\\\\nexport default {\\\\n  title: `${path}/DatePicker`,\\\\n  component: DatePicker\\\\n}\\\\n\\\\nconst getFormattedDate = (date: Date) => {\\\\n  const todayTime = date\\\\n  const month = todayTime.getMonth() + 1\\\\n  const day = todayTime.getDate()\\\\n  const year = todayTime.getFullYear()\\\\n  const hours = todayTime.getHours()\\\\n  const minutes = todayTime.getMinutes()\\\\n  const AM = todayTime.getHours() > 12 ? 'PM' : 'AM'\\\\n\\\\n  return month + '/' + day + '/' + year + '-' + hours + ':' + minutes + ' ' + AM\\\\n}\\\\n\\\\nexport const withDateRange = () => {\\\\n  const startDate = new Date(\\\\n    new Date().getFullYear(),\\\\n    new Date().getMonth(),\\\\n    new Date().getDate() - 8\\\\n  )\\\\n\\\\n  const endDate = new Date(\\\\n    new Date().getFullYear(),\\\\n    new Date().getMonth(),\\\\n    new Date().getDate() - 1\\\\n  )\\\\n\\\\n  const isInValidDate = (d: any) => {\\\\n    return d instanceof Date && isNaN(d.getTime())\\\\n  }\\\\n  // const convertStringToDate = (input: string) => {\\\\n  //   const finalDate = new Date()\\\\n  //   const dateArray = input.trim().split('/')\\\\n  //   const month = parseInt(dateArray[0])\\\\n  //   if (month <= 12) {\\\\n  //     //  valid day\\\\n  //     finalDate.setMonth(month - 1)\\\\n\\\\n  //     // set Month\\\\n  //     const day = parseInt(dateArray[1])\\\\n  //     if (day <= 31) {\\\\n  //       finalDate.setDate(day)\\\\n\\\\n  //       // set year\\\\n  //       const year = parseInt(dateArray[2])\\\\n  //       if (year <= 2050 && year >= 1970) {\\\\n  //         finalDate.setFullYear(year)\\\\n\\\\n  //         // return finalDate\\\\n  //         return finalDate\\\\n  //       }\\\\n  //     }\\\\n  //   }\\\\n  //   return undefined\\\\n  // }\\\\n  const convertStringToDate = (input: string) => {\\\\n    const newDate = new Date(input)\\\\n    if (isInValidDate(newDate)) {\\\\n      return undefined\\\\n    } else {\\\\n      console.log('String to Date: ', newDate)\\\\n      return newDate\\\\n    }\\\\n  }\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <DateRangePicker\\\\n        onFromChange={action('From Clicked')}\\\\n        onToChange={action('To Clicked')}\\\\n        onApply={action('Apply Clicked')}\\\\n        onCancel={action('Cancel Clicked')}\\\\n        label={text('Label', 'Date Range')}\\\\n        variant='daterange'\\\\n        timeFormat={12}\\\\n        showTime={boolean('Show time', true)}\\\\n        style={object('style', {\\\\n          position: 'absolute',\\\\n          left: '0px'\\\\n        })}\\\\n        startDate={startDate}\\\\n        endDate={endDate}\\\\n        fromDateFormatter={getFormattedDate}\\\\n        toDateFormatter={getFormattedDate}\\\\n        stringToDate={convertStringToDate}\\\\n        open={boolean('open', false)}\\\\n      >\\\\n        {({ value, open, setOpen }: tDateRangeChildren) => (\\\\n          <div>\\\\n            <TextInputStyled onClick={() => setOpen(!open)}>\\\\n              <TextInput\\\\n                id='someId'\\\\n                name='someId'\\\\n                className='someClassname'\\\\n                label='Holidays'\\\\n                variant='basic'\\\\n                labelColor='text.inputLabel.default'\\\\n                placeholder='Please Click Here'\\\\n                fullWidth\\\\n                value={value?.toString()}\\\\n                onChange={action('On change clicked')}\\\\n              />\\\\n            </TextInputStyled>\\\\n          </div>\\\\n        )}\\\\n      </DateRangePicker>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\",\\\"locationsMap\\\":{}},},\\n  title: `${path}/DatePicker`,\\n  component: DatePicker\\n}\\n\\nconst getFormattedDate = (date: Date) => {\\n  const todayTime = date\\n  const month = todayTime.getMonth() + 1\\n  const day = todayTime.getDate()\\n  const year = todayTime.getFullYear()\\n  const hours = todayTime.getHours()\\n  const minutes = todayTime.getMinutes()\\n  const AM = todayTime.getHours() > 12 ? 'PM' : 'AM'\\n\\n  return month + '/' + day + '/' + year + '-' + hours + ':' + minutes + ' ' + AM\\n}\\n\\nexport const withDateRange = addSourceDecorator(() => {\\n  const startDate = new Date(\\n    new Date().getFullYear(),\\n    new Date().getMonth(),\\n    new Date().getDate() - 8\\n  )\\n\\n  const endDate = new Date(\\n    new Date().getFullYear(),\\n    new Date().getMonth(),\\n    new Date().getDate() - 1\\n  )\\n\\n  const isInValidDate = (d: any) => {\\n    return d instanceof Date && isNaN(d.getTime())\\n  }\\n  // const convertStringToDate = (input: string) => {\\n  //   const finalDate = new Date()\\n  //   const dateArray = input.trim().split('/')\\n  //   const month = parseInt(dateArray[0])\\n  //   if (month <= 12) {\\n  //     //  valid day\\n  //     finalDate.setMonth(month - 1)\\n\\n  //     // set Month\\n  //     const day = parseInt(dateArray[1])\\n  //     if (day <= 31) {\\n  //       finalDate.setDate(day)\\n\\n  //       // set year\\n  //       const year = parseInt(dateArray[2])\\n  //       if (year <= 2050 && year >= 1970) {\\n  //         finalDate.setFullYear(year)\\n\\n  //         // return finalDate\\n  //         return finalDate\\n  //       }\\n  //     }\\n  //   }\\n  //   return undefined\\n  // }\\n  const convertStringToDate = (input: string) => {\\n    const newDate = new Date(input)\\n    if (isInValidDate(newDate)) {\\n      return undefined\\n    } else {\\n      console.log('String to Date: ', newDate)\\n      return newDate\\n    }\\n  }\\n  return (\\n    <ThemeWrapper>\\n      <DateRangePicker\\n        onFromChange={action('From Clicked')}\\n        onToChange={action('To Clicked')}\\n        onApply={action('Apply Clicked')}\\n        onCancel={action('Cancel Clicked')}\\n        label={text('Label', 'Date Range')}\\n        variant='daterange'\\n        timeFormat={12}\\n        showTime={boolean('Show time', true)}\\n        style={object('style', {\\n          position: 'absolute',\\n          left: '0px'\\n        })}\\n        startDate={startDate}\\n        endDate={endDate}\\n        fromDateFormatter={getFormattedDate}\\n        toDateFormatter={getFormattedDate}\\n        stringToDate={convertStringToDate}\\n        open={boolean('open', false)}\\n      >\\n        {({ value, open, setOpen }: tDateRangeChildren) => (\\n          <div>\\n            <TextInputStyled onClick={() => setOpen(!open)}>\\n              <TextInput\\n                id='someId'\\n                name='someId'\\n                className='someClassname'\\n                label='Holidays'\\n                variant='basic'\\n                labelColor='text.inputLabel.default'\\n                placeholder='Please Click Here'\\n                fullWidth\\n                value={value?.toString()}\\n                onChange={action('On change clicked')}\\n              />\\n            </TextInputStyled>\\n          </div>\\n        )}\\n      </DateRangePicker>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\";\n// @ts-ignore\nvar __ADDS_MAP__ = {};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = \"/DateRange.stories.tsx\";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \n\n/* eslint-disable */\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\n// @ts-ignore\nvar addSourceDecorator = require(\"@storybook/source-loader/preview\").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/molecules/DatePicker/stories\";\n// @ts-ignore\nvar __STORY__ = \"import React from 'react'\\nimport { DatePicker, DateRangePicker } from '../../DatePicker'\\nimport { tDateRangeChildren } from '../interfaces'\\nimport { path } from '../..'\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\nimport { boolean, text, object } from '@storybook/addon-knobs'\\nimport { action } from '@storybook/addon-actions'\\nimport { TextInputStyled } from '../Styles/DateRange.styles'\\nimport TextInput from '../../TextInput'\\n\\nexport default {\\n  title: `${path}/DatePicker`,\\n  component: DatePicker\\n}\\n\\nconst getFormattedDate = (date: Date) => {\\n  const todayTime = date\\n  const month = todayTime.getMonth() + 1\\n  const day = todayTime.getDate()\\n  const year = todayTime.getFullYear()\\n  const hours = todayTime.getHours()\\n  const minutes = todayTime.getMinutes()\\n  const AM = todayTime.getHours() > 12 ? 'PM' : 'AM'\\n\\n  return month + '/' + day + '/' + year + '-' + hours + ':' + minutes + ' ' + AM\\n}\\n\\nexport const withDateRange = () => {\\n  const startDate = new Date(\\n    new Date().getFullYear(),\\n    new Date().getMonth(),\\n    new Date().getDate() - 8\\n  )\\n\\n  const endDate = new Date(\\n    new Date().getFullYear(),\\n    new Date().getMonth(),\\n    new Date().getDate() - 1\\n  )\\n\\n  const isInValidDate = (d: any) => {\\n    return d instanceof Date && isNaN(d.getTime())\\n  }\\n  // const convertStringToDate = (input: string) => {\\n  //   const finalDate = new Date()\\n  //   const dateArray = input.trim().split('/')\\n  //   const month = parseInt(dateArray[0])\\n  //   if (month <= 12) {\\n  //     //  valid day\\n  //     finalDate.setMonth(month - 1)\\n\\n  //     // set Month\\n  //     const day = parseInt(dateArray[1])\\n  //     if (day <= 31) {\\n  //       finalDate.setDate(day)\\n\\n  //       // set year\\n  //       const year = parseInt(dateArray[2])\\n  //       if (year <= 2050 && year >= 1970) {\\n  //         finalDate.setFullYear(year)\\n\\n  //         // return finalDate\\n  //         return finalDate\\n  //       }\\n  //     }\\n  //   }\\n  //   return undefined\\n  // }\\n  const convertStringToDate = (input: string) => {\\n    const newDate = new Date(input)\\n    if (isInValidDate(newDate)) {\\n      return undefined\\n    } else {\\n      console.log('String to Date: ', newDate)\\n      return newDate\\n    }\\n  }\\n  return (\\n    <ThemeWrapper>\\n      <DateRangePicker\\n        onFromChange={action('From Clicked')}\\n        onToChange={action('To Clicked')}\\n        onApply={action('Apply Clicked')}\\n        onCancel={action('Cancel Clicked')}\\n        label={text('Label', 'Date Range')}\\n        variant='daterange'\\n        timeFormat={12}\\n        showTime={boolean('Show time', true)}\\n        style={object('style', {\\n          position: 'absolute',\\n          left: '0px'\\n        })}\\n        startDate={startDate}\\n        endDate={endDate}\\n        fromDateFormatter={getFormattedDate}\\n        toDateFormatter={getFormattedDate}\\n        stringToDate={convertStringToDate}\\n        open={boolean('open', false)}\\n      >\\n        {({ value, open, setOpen }: tDateRangeChildren) => (\\n          <div>\\n            <TextInputStyled onClick={() => setOpen(!open)}>\\n              <TextInput\\n                id='someId'\\n                name='someId'\\n                className='someClassname'\\n                label='Holidays'\\n                variant='basic'\\n                labelColor='text.inputLabel.default'\\n                placeholder='Please Click Here'\\n                fullWidth\\n                value={value?.toString()}\\n                onChange={action('On change clicked')}\\n              />\\n            </TextInputStyled>\\n          </div>\\n        )}\\n      </DateRangePicker>\\n    </ThemeWrapper>\\n  )\\n}\\n\";\n// @ts-ignore\nvar __ADDS_MAP__ = {};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = \"/DateRange.stories.tsx\";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \nimport React from 'react'\nimport { DatePicker, DateRangePicker } from '../../DatePicker'\nimport { tDateRangeChildren } from '../interfaces'\nimport { path } from '../..'\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\nimport { boolean, text, object } from '@storybook/addon-knobs'\nimport { action } from '@storybook/addon-actions'\nimport { TextInputStyled } from '../Styles/DateRange.styles'\nimport TextInput from '../../TextInput'\n\nexport default {parameters: {\"storySource\":{\"source\":\"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/molecules/DatePicker/stories\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"\\\\n\\\\n// @ts-nocheck\\\\n// @ts-ignore\\\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\\\n// @ts-ignore\\\\nvar addSourceDecorator = require(\\\\\\\"@storybook/source-loader/preview\\\\\\\").addSource;\\\\n// @ts-ignore\\\\nvar __SOURCE_PREFIX__ = \\\\\\\"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/molecules/DatePicker/stories\\\\\\\";\\\\n// @ts-ignore\\\\nvar __STORY__ = \\\\\\\"import React from 'react'\\\\\\\\nimport { DatePicker, DateRangePicker } from '../../DatePicker'\\\\\\\\nimport { tDateRangeChildren } from '../interfaces'\\\\\\\\nimport { path } from '../..'\\\\\\\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\\\\\\\nimport { boolean, text, object } from '@storybook/addon-knobs'\\\\\\\\nimport { action } from '@storybook/addon-actions'\\\\\\\\nimport { TextInputStyled } from '../Styles/DateRange.styles'\\\\\\\\nimport TextInput from '../../TextInput'\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/DatePicker`,\\\\\\\\n  component: DatePicker\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst getFormattedDate = (date: Date) => {\\\\\\\\n  const todayTime = date\\\\\\\\n  const month = todayTime.getMonth() + 1\\\\\\\\n  const day = todayTime.getDate()\\\\\\\\n  const year = todayTime.getFullYear()\\\\\\\\n  const hours = todayTime.getHours()\\\\\\\\n  const minutes = todayTime.getMinutes()\\\\\\\\n  const AM = todayTime.getHours() > 12 ? 'PM' : 'AM'\\\\\\\\n\\\\\\\\n  return month + '/' + day + '/' + year + '-' + hours + ':' + minutes + ' ' + AM\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const withDateRange = () => {\\\\\\\\n  const startDate = new Date(\\\\\\\\n    new Date().getFullYear(),\\\\\\\\n    new Date().getMonth(),\\\\\\\\n    new Date().getDate() - 8\\\\\\\\n  )\\\\\\\\n\\\\\\\\n  const endDate = new Date(\\\\\\\\n    new Date().getFullYear(),\\\\\\\\n    new Date().getMonth(),\\\\\\\\n    new Date().getDate() - 1\\\\\\\\n  )\\\\\\\\n\\\\\\\\n  const isInValidDate = (d: any) => {\\\\\\\\n    return d instanceof Date && isNaN(d.getTime())\\\\\\\\n  }\\\\\\\\n  // const convertStringToDate = (input: string) => {\\\\\\\\n  //   const finalDate = new Date()\\\\\\\\n  //   const dateArray = input.trim().split('/')\\\\\\\\n  //   const month = parseInt(dateArray[0])\\\\\\\\n  //   if (month <= 12) {\\\\\\\\n  //     //  valid day\\\\\\\\n  //     finalDate.setMonth(month - 1)\\\\\\\\n\\\\\\\\n  //     // set Month\\\\\\\\n  //     const day = parseInt(dateArray[1])\\\\\\\\n  //     if (day <= 31) {\\\\\\\\n  //       finalDate.setDate(day)\\\\\\\\n\\\\\\\\n  //       // set year\\\\\\\\n  //       const year = parseInt(dateArray[2])\\\\\\\\n  //       if (year <= 2050 && year >= 1970) {\\\\\\\\n  //         finalDate.setFullYear(year)\\\\\\\\n\\\\\\\\n  //         // return finalDate\\\\\\\\n  //         return finalDate\\\\\\\\n  //       }\\\\\\\\n  //     }\\\\\\\\n  //   }\\\\\\\\n  //   return undefined\\\\\\\\n  // }\\\\\\\\n  const convertStringToDate = (input: string) => {\\\\\\\\n    const newDate = new Date(input)\\\\\\\\n    if (isInValidDate(newDate)) {\\\\\\\\n      return undefined\\\\\\\\n    } else {\\\\\\\\n      console.log('String to Date: ', newDate)\\\\\\\\n      return newDate\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <DateRangePicker\\\\\\\\n        onFromChange={action('From Clicked')}\\\\\\\\n        onToChange={action('To Clicked')}\\\\\\\\n        onApply={action('Apply Clicked')}\\\\\\\\n        onCancel={action('Cancel Clicked')}\\\\\\\\n        label={text('Label', 'Date Range')}\\\\\\\\n        variant='daterange'\\\\\\\\n        timeFormat={12}\\\\\\\\n        showTime={boolean('Show time', true)}\\\\\\\\n        style={object('style', {\\\\\\\\n          position: 'absolute',\\\\\\\\n          left: '0px'\\\\\\\\n        })}\\\\\\\\n        startDate={startDate}\\\\\\\\n        endDate={endDate}\\\\\\\\n        fromDateFormatter={getFormattedDate}\\\\\\\\n        toDateFormatter={getFormattedDate}\\\\\\\\n        stringToDate={convertStringToDate}\\\\\\\\n        open={boolean('open', false)}\\\\\\\\n      >\\\\\\\\n        {({ value, open, setOpen }: tDateRangeChildren) => (\\\\\\\\n          <div>\\\\\\\\n            <TextInputStyled onClick={() => setOpen(!open)}>\\\\\\\\n              <TextInput\\\\\\\\n                id='someId'\\\\\\\\n                name='someId'\\\\\\\\n                className='someClassname'\\\\\\\\n                label='Holidays'\\\\\\\\n                variant='basic'\\\\\\\\n                labelColor='text.inputLabel.default'\\\\\\\\n                placeholder='Please Click Here'\\\\\\\\n                fullWidth\\\\\\\\n                value={value?.toString()}\\\\\\\\n                onChange={action('On change clicked')}\\\\\\\\n              />\\\\\\\\n            </TextInputStyled>\\\\\\\\n          </div>\\\\\\\\n        )}\\\\\\\\n      </DateRangePicker>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\";\\\\n// @ts-ignore\\\\nvar __ADDS_MAP__ = {};\\\\n// @ts-ignore\\\\nvar __MAIN_FILE_LOCATION__ = \\\\\\\"/DateRange.stories.tsx\\\\\\\";\\\\n// @ts-ignore\\\\nvar __MODULE_DEPENDENCIES__ = [];\\\\n// @ts-ignore\\\\nvar __LOCAL_DEPENDENCIES__ = {};\\\\n// @ts-ignore\\\\nvar __IDS_TO_FRAMEWORKS__ = {};\\\\n        \\\\nimport React from 'react'\\\\nimport { DatePicker, DateRangePicker } from '../../DatePicker'\\\\nimport { tDateRangeChildren } from '../interfaces'\\\\nimport { path } from '../..'\\\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\\\nimport { boolean, text, object } from '@storybook/addon-knobs'\\\\nimport { action } from '@storybook/addon-actions'\\\\nimport { TextInputStyled } from '../Styles/DateRange.styles'\\\\nimport TextInput from '../../TextInput'\\\\n\\\\nexport default {parameters: {\\\\\\\"storySource\\\\\\\":{\\\\\\\"source\\\\\\\":\\\\\\\"import React from 'react'\\\\\\\\nimport { DatePicker, DateRangePicker } from '../../DatePicker'\\\\\\\\nimport { tDateRangeChildren } from '../interfaces'\\\\\\\\nimport { path } from '../..'\\\\\\\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\\\\\\\nimport { boolean, text, object } from '@storybook/addon-knobs'\\\\\\\\nimport { action } from '@storybook/addon-actions'\\\\\\\\nimport { TextInputStyled } from '../Styles/DateRange.styles'\\\\\\\\nimport TextInput from '../../TextInput'\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/DatePicker`,\\\\\\\\n  component: DatePicker\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst getFormattedDate = (date: Date) => {\\\\\\\\n  const todayTime = date\\\\\\\\n  const month = todayTime.getMonth() + 1\\\\\\\\n  const day = todayTime.getDate()\\\\\\\\n  const year = todayTime.getFullYear()\\\\\\\\n  const hours = todayTime.getHours()\\\\\\\\n  const minutes = todayTime.getMinutes()\\\\\\\\n  const AM = todayTime.getHours() > 12 ? 'PM' : 'AM'\\\\\\\\n\\\\\\\\n  return month + '/' + day + '/' + year + '-' + hours + ':' + minutes + ' ' + AM\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const withDateRange = () => {\\\\\\\\n  const startDate = new Date(\\\\\\\\n    new Date().getFullYear(),\\\\\\\\n    new Date().getMonth(),\\\\\\\\n    new Date().getDate() - 8\\\\\\\\n  )\\\\\\\\n\\\\\\\\n  const endDate = new Date(\\\\\\\\n    new Date().getFullYear(),\\\\\\\\n    new Date().getMonth(),\\\\\\\\n    new Date().getDate() - 1\\\\\\\\n  )\\\\\\\\n\\\\\\\\n  const isInValidDate = (d: any) => {\\\\\\\\n    return d instanceof Date && isNaN(d.getTime())\\\\\\\\n  }\\\\\\\\n  // const convertStringToDate = (input: string) => {\\\\\\\\n  //   const finalDate = new Date()\\\\\\\\n  //   const dateArray = input.trim().split('/')\\\\\\\\n  //   const month = parseInt(dateArray[0])\\\\\\\\n  //   if (month <= 12) {\\\\\\\\n  //     //  valid day\\\\\\\\n  //     finalDate.setMonth(month - 1)\\\\\\\\n\\\\\\\\n  //     // set Month\\\\\\\\n  //     const day = parseInt(dateArray[1])\\\\\\\\n  //     if (day <= 31) {\\\\\\\\n  //       finalDate.setDate(day)\\\\\\\\n\\\\\\\\n  //       // set year\\\\\\\\n  //       const year = parseInt(dateArray[2])\\\\\\\\n  //       if (year <= 2050 && year >= 1970) {\\\\\\\\n  //         finalDate.setFullYear(year)\\\\\\\\n\\\\\\\\n  //         // return finalDate\\\\\\\\n  //         return finalDate\\\\\\\\n  //       }\\\\\\\\n  //     }\\\\\\\\n  //   }\\\\\\\\n  //   return undefined\\\\\\\\n  // }\\\\\\\\n  const convertStringToDate = (input: string) => {\\\\\\\\n    const newDate = new Date(input)\\\\\\\\n    if (isInValidDate(newDate)) {\\\\\\\\n      return undefined\\\\\\\\n    } else {\\\\\\\\n      console.log('String to Date: ', newDate)\\\\\\\\n      return newDate\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <DateRangePicker\\\\\\\\n        onFromChange={action('From Clicked')}\\\\\\\\n        onToChange={action('To Clicked')}\\\\\\\\n        onApply={action('Apply Clicked')}\\\\\\\\n        onCancel={action('Cancel Clicked')}\\\\\\\\n        label={text('Label', 'Date Range')}\\\\\\\\n        variant='daterange'\\\\\\\\n        timeFormat={12}\\\\\\\\n        showTime={boolean('Show time', true)}\\\\\\\\n        style={object('style', {\\\\\\\\n          position: 'absolute',\\\\\\\\n          left: '0px'\\\\\\\\n        })}\\\\\\\\n        startDate={startDate}\\\\\\\\n        endDate={endDate}\\\\\\\\n        fromDateFormatter={getFormattedDate}\\\\\\\\n        toDateFormatter={getFormattedDate}\\\\\\\\n        stringToDate={convertStringToDate}\\\\\\\\n        open={boolean('open', false)}\\\\\\\\n      >\\\\\\\\n        {({ value, open, setOpen }: tDateRangeChildren) => (\\\\\\\\n          <div>\\\\\\\\n            <TextInputStyled onClick={() => setOpen(!open)}>\\\\\\\\n              <TextInput\\\\\\\\n                id='someId'\\\\\\\\n                name='someId'\\\\\\\\n                className='someClassname'\\\\\\\\n                label='Holidays'\\\\\\\\n                variant='basic'\\\\\\\\n                labelColor='text.inputLabel.default'\\\\\\\\n                placeholder='Please Click Here'\\\\\\\\n                fullWidth\\\\\\\\n                value={value?.toString()}\\\\\\\\n                onChange={action('On change clicked')}\\\\\\\\n              />\\\\\\\\n            </TextInputStyled>\\\\\\\\n          </div>\\\\\\\\n        )}\\\\\\\\n      </DateRangePicker>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\",\\\\\\\"locationsMap\\\\\\\":{}},},\\\\n  title: `${path}/DatePicker`,\\\\n  component: DatePicker\\\\n}\\\\n\\\\nconst getFormattedDate = (date: Date) => {\\\\n  const todayTime = date\\\\n  const month = todayTime.getMonth() + 1\\\\n  const day = todayTime.getDate()\\\\n  const year = todayTime.getFullYear()\\\\n  const hours = todayTime.getHours()\\\\n  const minutes = todayTime.getMinutes()\\\\n  const AM = todayTime.getHours() > 12 ? 'PM' : 'AM'\\\\n\\\\n  return month + '/' + day + '/' + year + '-' + hours + ':' + minutes + ' ' + AM\\\\n}\\\\n\\\\nexport const withDateRange = addSourceDecorator(() => {\\\\n  const startDate = new Date(\\\\n    new Date().getFullYear(),\\\\n    new Date().getMonth(),\\\\n    new Date().getDate() - 8\\\\n  )\\\\n\\\\n  const endDate = new Date(\\\\n    new Date().getFullYear(),\\\\n    new Date().getMonth(),\\\\n    new Date().getDate() - 1\\\\n  )\\\\n\\\\n  const isInValidDate = (d: any) => {\\\\n    return d instanceof Date && isNaN(d.getTime())\\\\n  }\\\\n  // const convertStringToDate = (input: string) => {\\\\n  //   const finalDate = new Date()\\\\n  //   const dateArray = input.trim().split('/')\\\\n  //   const month = parseInt(dateArray[0])\\\\n  //   if (month <= 12) {\\\\n  //     //  valid day\\\\n  //     finalDate.setMonth(month - 1)\\\\n\\\\n  //     // set Month\\\\n  //     const day = parseInt(dateArray[1])\\\\n  //     if (day <= 31) {\\\\n  //       finalDate.setDate(day)\\\\n\\\\n  //       // set year\\\\n  //       const year = parseInt(dateArray[2])\\\\n  //       if (year <= 2050 && year >= 1970) {\\\\n  //         finalDate.setFullYear(year)\\\\n\\\\n  //         // return finalDate\\\\n  //         return finalDate\\\\n  //       }\\\\n  //     }\\\\n  //   }\\\\n  //   return undefined\\\\n  // }\\\\n  const convertStringToDate = (input: string) => {\\\\n    const newDate = new Date(input)\\\\n    if (isInValidDate(newDate)) {\\\\n      return undefined\\\\n    } else {\\\\n      console.log('String to Date: ', newDate)\\\\n      return newDate\\\\n    }\\\\n  }\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <DateRangePicker\\\\n        onFromChange={action('From Clicked')}\\\\n        onToChange={action('To Clicked')}\\\\n        onApply={action('Apply Clicked')}\\\\n        onCancel={action('Cancel Clicked')}\\\\n        label={text('Label', 'Date Range')}\\\\n        variant='daterange'\\\\n        timeFormat={12}\\\\n        showTime={boolean('Show time', true)}\\\\n        style={object('style', {\\\\n          position: 'absolute',\\\\n          left: '0px'\\\\n        })}\\\\n        startDate={startDate}\\\\n        endDate={endDate}\\\\n        fromDateFormatter={getFormattedDate}\\\\n        toDateFormatter={getFormattedDate}\\\\n        stringToDate={convertStringToDate}\\\\n        open={boolean('open', false)}\\\\n      >\\\\n        {({ value, open, setOpen }: tDateRangeChildren) => (\\\\n          <div>\\\\n            <TextInputStyled onClick={() => setOpen(!open)}>\\\\n              <TextInput\\\\n                id='someId'\\\\n                name='someId'\\\\n                className='someClassname'\\\\n                label='Holidays'\\\\n                variant='basic'\\\\n                labelColor='text.inputLabel.default'\\\\n                placeholder='Please Click Here'\\\\n                fullWidth\\\\n                value={value?.toString()}\\\\n                onChange={action('On change clicked')}\\\\n              />\\\\n            </TextInputStyled>\\\\n          </div>\\\\n        )}\\\\n      </DateRangePicker>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/DateRange.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\n\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/molecules/DatePicker/stories\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"import React from 'react'\\\\nimport { DatePicker, DateRangePicker } from '../../DatePicker'\\\\nimport { tDateRangeChildren } from '../interfaces'\\\\nimport { path } from '../..'\\\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\\\nimport { boolean, text, object } from '@storybook/addon-knobs'\\\\nimport { action } from '@storybook/addon-actions'\\\\nimport { TextInputStyled } from '../Styles/DateRange.styles'\\\\nimport TextInput from '../../TextInput'\\\\n\\\\nexport default {\\\\n  title: `${path}/DatePicker`,\\\\n  component: DatePicker\\\\n}\\\\n\\\\nconst getFormattedDate = (date: Date) => {\\\\n  const todayTime = date\\\\n  const month = todayTime.getMonth() + 1\\\\n  const day = todayTime.getDate()\\\\n  const year = todayTime.getFullYear()\\\\n  const hours = todayTime.getHours()\\\\n  const minutes = todayTime.getMinutes()\\\\n  const AM = todayTime.getHours() > 12 ? 'PM' : 'AM'\\\\n\\\\n  return month + '/' + day + '/' + year + '-' + hours + ':' + minutes + ' ' + AM\\\\n}\\\\n\\\\nexport const withDateRange = () => {\\\\n  const startDate = new Date(\\\\n    new Date().getFullYear(),\\\\n    new Date().getMonth(),\\\\n    new Date().getDate() - 8\\\\n  )\\\\n\\\\n  const endDate = new Date(\\\\n    new Date().getFullYear(),\\\\n    new Date().getMonth(),\\\\n    new Date().getDate() - 1\\\\n  )\\\\n\\\\n  const isInValidDate = (d: any) => {\\\\n    return d instanceof Date && isNaN(d.getTime())\\\\n  }\\\\n  // const convertStringToDate = (input: string) => {\\\\n  //   const finalDate = new Date()\\\\n  //   const dateArray = input.trim().split('/')\\\\n  //   const month = parseInt(dateArray[0])\\\\n  //   if (month <= 12) {\\\\n  //     //  valid day\\\\n  //     finalDate.setMonth(month - 1)\\\\n\\\\n  //     // set Month\\\\n  //     const day = parseInt(dateArray[1])\\\\n  //     if (day <= 31) {\\\\n  //       finalDate.setDate(day)\\\\n\\\\n  //       // set year\\\\n  //       const year = parseInt(dateArray[2])\\\\n  //       if (year <= 2050 && year >= 1970) {\\\\n  //         finalDate.setFullYear(year)\\\\n\\\\n  //         // return finalDate\\\\n  //         return finalDate\\\\n  //       }\\\\n  //     }\\\\n  //   }\\\\n  //   return undefined\\\\n  // }\\\\n  const convertStringToDate = (input: string) => {\\\\n    const newDate = new Date(input)\\\\n    if (isInValidDate(newDate)) {\\\\n      return undefined\\\\n    } else {\\\\n      console.log('String to Date: ', newDate)\\\\n      return newDate\\\\n    }\\\\n  }\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <DateRangePicker\\\\n        onFromChange={action('From Clicked')}\\\\n        onToChange={action('To Clicked')}\\\\n        onApply={action('Apply Clicked')}\\\\n        onCancel={action('Cancel Clicked')}\\\\n        label={text('Label', 'Date Range')}\\\\n        variant='daterange'\\\\n        timeFormat={12}\\\\n        showTime={boolean('Show time', true)}\\\\n        style={object('style', {\\\\n          position: 'absolute',\\\\n          left: '0px'\\\\n        })}\\\\n        startDate={startDate}\\\\n        endDate={endDate}\\\\n        fromDateFormatter={getFormattedDate}\\\\n        toDateFormatter={getFormattedDate}\\\\n        stringToDate={convertStringToDate}\\\\n        open={boolean('open', false)}\\\\n      >\\\\n        {({ value, open, setOpen }: tDateRangeChildren) => (\\\\n          <div>\\\\n            <TextInputStyled onClick={() => setOpen(!open)}>\\\\n              <TextInput\\\\n                id='someId'\\\\n                name='someId'\\\\n                className='someClassname'\\\\n                label='Holidays'\\\\n                variant='basic'\\\\n                labelColor='text.inputLabel.default'\\\\n                placeholder='Please Click Here'\\\\n                fullWidth\\\\n                value={value?.toString()}\\\\n                onChange={action('On change clicked')}\\\\n              />\\\\n            </TextInputStyled>\\\\n          </div>\\\\n        )}\\\\n      </DateRangePicker>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/DateRange.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\nimport React from 'react'\\nimport { DatePicker, DateRangePicker } from '../../DatePicker'\\nimport { tDateRangeChildren } from '../interfaces'\\nimport { path } from '../..'\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\nimport { boolean, text, object } from '@storybook/addon-knobs'\\nimport { action } from '@storybook/addon-actions'\\nimport { TextInputStyled } from '../Styles/DateRange.styles'\\nimport TextInput from '../../TextInput'\\n\\nexport default {parameters: {\\\"storySource\\\":{\\\"source\\\":\\\"\\\\n\\\\n// @ts-nocheck\\\\n// @ts-ignore\\\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\\\n// @ts-ignore\\\\nvar addSourceDecorator = require(\\\\\\\"@storybook/source-loader/preview\\\\\\\").addSource;\\\\n// @ts-ignore\\\\nvar __SOURCE_PREFIX__ = \\\\\\\"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/molecules/DatePicker/stories\\\\\\\";\\\\n// @ts-ignore\\\\nvar __STORY__ = \\\\\\\"import React from 'react'\\\\\\\\nimport { DatePicker, DateRangePicker } from '../../DatePicker'\\\\\\\\nimport { tDateRangeChildren } from '../interfaces'\\\\\\\\nimport { path } from '../..'\\\\\\\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\\\\\\\nimport { boolean, text, object } from '@storybook/addon-knobs'\\\\\\\\nimport { action } from '@storybook/addon-actions'\\\\\\\\nimport { TextInputStyled } from '../Styles/DateRange.styles'\\\\\\\\nimport TextInput from '../../TextInput'\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/DatePicker`,\\\\\\\\n  component: DatePicker\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst getFormattedDate = (date: Date) => {\\\\\\\\n  const todayTime = date\\\\\\\\n  const month = todayTime.getMonth() + 1\\\\\\\\n  const day = todayTime.getDate()\\\\\\\\n  const year = todayTime.getFullYear()\\\\\\\\n  const hours = todayTime.getHours()\\\\\\\\n  const minutes = todayTime.getMinutes()\\\\\\\\n  const AM = todayTime.getHours() > 12 ? 'PM' : 'AM'\\\\\\\\n\\\\\\\\n  return month + '/' + day + '/' + year + '-' + hours + ':' + minutes + ' ' + AM\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const withDateRange = () => {\\\\\\\\n  const startDate = new Date(\\\\\\\\n    new Date().getFullYear(),\\\\\\\\n    new Date().getMonth(),\\\\\\\\n    new Date().getDate() - 8\\\\\\\\n  )\\\\\\\\n\\\\\\\\n  const endDate = new Date(\\\\\\\\n    new Date().getFullYear(),\\\\\\\\n    new Date().getMonth(),\\\\\\\\n    new Date().getDate() - 1\\\\\\\\n  )\\\\\\\\n\\\\\\\\n  const isInValidDate = (d: any) => {\\\\\\\\n    return d instanceof Date && isNaN(d.getTime())\\\\\\\\n  }\\\\\\\\n  // const convertStringToDate = (input: string) => {\\\\\\\\n  //   const finalDate = new Date()\\\\\\\\n  //   const dateArray = input.trim().split('/')\\\\\\\\n  //   const month = parseInt(dateArray[0])\\\\\\\\n  //   if (month <= 12) {\\\\\\\\n  //     //  valid day\\\\\\\\n  //     finalDate.setMonth(month - 1)\\\\\\\\n\\\\\\\\n  //     // set Month\\\\\\\\n  //     const day = parseInt(dateArray[1])\\\\\\\\n  //     if (day <= 31) {\\\\\\\\n  //       finalDate.setDate(day)\\\\\\\\n\\\\\\\\n  //       // set year\\\\\\\\n  //       const year = parseInt(dateArray[2])\\\\\\\\n  //       if (year <= 2050 && year >= 1970) {\\\\\\\\n  //         finalDate.setFullYear(year)\\\\\\\\n\\\\\\\\n  //         // return finalDate\\\\\\\\n  //         return finalDate\\\\\\\\n  //       }\\\\\\\\n  //     }\\\\\\\\n  //   }\\\\\\\\n  //   return undefined\\\\\\\\n  // }\\\\\\\\n  const convertStringToDate = (input: string) => {\\\\\\\\n    const newDate = new Date(input)\\\\\\\\n    if (isInValidDate(newDate)) {\\\\\\\\n      return undefined\\\\\\\\n    } else {\\\\\\\\n      console.log('String to Date: ', newDate)\\\\\\\\n      return newDate\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <DateRangePicker\\\\\\\\n        onFromChange={action('From Clicked')}\\\\\\\\n        onToChange={action('To Clicked')}\\\\\\\\n        onApply={action('Apply Clicked')}\\\\\\\\n        onCancel={action('Cancel Clicked')}\\\\\\\\n        label={text('Label', 'Date Range')}\\\\\\\\n        variant='daterange'\\\\\\\\n        timeFormat={12}\\\\\\\\n        showTime={boolean('Show time', true)}\\\\\\\\n        style={object('style', {\\\\\\\\n          position: 'absolute',\\\\\\\\n          left: '0px'\\\\\\\\n        })}\\\\\\\\n        startDate={startDate}\\\\\\\\n        endDate={endDate}\\\\\\\\n        fromDateFormatter={getFormattedDate}\\\\\\\\n        toDateFormatter={getFormattedDate}\\\\\\\\n        stringToDate={convertStringToDate}\\\\\\\\n        open={boolean('open', false)}\\\\\\\\n      >\\\\\\\\n        {({ value, open, setOpen }: tDateRangeChildren) => (\\\\\\\\n          <div>\\\\\\\\n            <TextInputStyled onClick={() => setOpen(!open)}>\\\\\\\\n              <TextInput\\\\\\\\n                id='someId'\\\\\\\\n                name='someId'\\\\\\\\n                className='someClassname'\\\\\\\\n                label='Holidays'\\\\\\\\n                variant='basic'\\\\\\\\n                labelColor='text.inputLabel.default'\\\\\\\\n                placeholder='Please Click Here'\\\\\\\\n                fullWidth\\\\\\\\n                value={value?.toString()}\\\\\\\\n                onChange={action('On change clicked')}\\\\\\\\n              />\\\\\\\\n            </TextInputStyled>\\\\\\\\n          </div>\\\\\\\\n        )}\\\\\\\\n      </DateRangePicker>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\";\\\\n// @ts-ignore\\\\nvar __ADDS_MAP__ = {};\\\\n// @ts-ignore\\\\nvar __MAIN_FILE_LOCATION__ = \\\\\\\"/DateRange.stories.tsx\\\\\\\";\\\\n// @ts-ignore\\\\nvar __MODULE_DEPENDENCIES__ = [];\\\\n// @ts-ignore\\\\nvar __LOCAL_DEPENDENCIES__ = {};\\\\n// @ts-ignore\\\\nvar __IDS_TO_FRAMEWORKS__ = {};\\\\n        \\\\nimport React from 'react'\\\\nimport { DatePicker, DateRangePicker } from '../../DatePicker'\\\\nimport { tDateRangeChildren } from '../interfaces'\\\\nimport { path } from '../..'\\\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\\\nimport { boolean, text, object } from '@storybook/addon-knobs'\\\\nimport { action } from '@storybook/addon-actions'\\\\nimport { TextInputStyled } from '../Styles/DateRange.styles'\\\\nimport TextInput from '../../TextInput'\\\\n\\\\nexport default {parameters: {\\\\\\\"storySource\\\\\\\":{\\\\\\\"source\\\\\\\":\\\\\\\"import React from 'react'\\\\\\\\nimport { DatePicker, DateRangePicker } from '../../DatePicker'\\\\\\\\nimport { tDateRangeChildren } from '../interfaces'\\\\\\\\nimport { path } from '../..'\\\\\\\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\\\\\\\nimport { boolean, text, object } from '@storybook/addon-knobs'\\\\\\\\nimport { action } from '@storybook/addon-actions'\\\\\\\\nimport { TextInputStyled } from '../Styles/DateRange.styles'\\\\\\\\nimport TextInput from '../../TextInput'\\\\\\\\n\\\\\\\\nexport default {\\\\\\\\n  title: `${path}/DatePicker`,\\\\\\\\n  component: DatePicker\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst getFormattedDate = (date: Date) => {\\\\\\\\n  const todayTime = date\\\\\\\\n  const month = todayTime.getMonth() + 1\\\\\\\\n  const day = todayTime.getDate()\\\\\\\\n  const year = todayTime.getFullYear()\\\\\\\\n  const hours = todayTime.getHours()\\\\\\\\n  const minutes = todayTime.getMinutes()\\\\\\\\n  const AM = todayTime.getHours() > 12 ? 'PM' : 'AM'\\\\\\\\n\\\\\\\\n  return month + '/' + day + '/' + year + '-' + hours + ':' + minutes + ' ' + AM\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport const withDateRange = () => {\\\\\\\\n  const startDate = new Date(\\\\\\\\n    new Date().getFullYear(),\\\\\\\\n    new Date().getMonth(),\\\\\\\\n    new Date().getDate() - 8\\\\\\\\n  )\\\\\\\\n\\\\\\\\n  const endDate = new Date(\\\\\\\\n    new Date().getFullYear(),\\\\\\\\n    new Date().getMonth(),\\\\\\\\n    new Date().getDate() - 1\\\\\\\\n  )\\\\\\\\n\\\\\\\\n  const isInValidDate = (d: any) => {\\\\\\\\n    return d instanceof Date && isNaN(d.getTime())\\\\\\\\n  }\\\\\\\\n  // const convertStringToDate = (input: string) => {\\\\\\\\n  //   const finalDate = new Date()\\\\\\\\n  //   const dateArray = input.trim().split('/')\\\\\\\\n  //   const month = parseInt(dateArray[0])\\\\\\\\n  //   if (month <= 12) {\\\\\\\\n  //     //  valid day\\\\\\\\n  //     finalDate.setMonth(month - 1)\\\\\\\\n\\\\\\\\n  //     // set Month\\\\\\\\n  //     const day = parseInt(dateArray[1])\\\\\\\\n  //     if (day <= 31) {\\\\\\\\n  //       finalDate.setDate(day)\\\\\\\\n\\\\\\\\n  //       // set year\\\\\\\\n  //       const year = parseInt(dateArray[2])\\\\\\\\n  //       if (year <= 2050 && year >= 1970) {\\\\\\\\n  //         finalDate.setFullYear(year)\\\\\\\\n\\\\\\\\n  //         // return finalDate\\\\\\\\n  //         return finalDate\\\\\\\\n  //       }\\\\\\\\n  //     }\\\\\\\\n  //   }\\\\\\\\n  //   return undefined\\\\\\\\n  // }\\\\\\\\n  const convertStringToDate = (input: string) => {\\\\\\\\n    const newDate = new Date(input)\\\\\\\\n    if (isInValidDate(newDate)) {\\\\\\\\n      return undefined\\\\\\\\n    } else {\\\\\\\\n      console.log('String to Date: ', newDate)\\\\\\\\n      return newDate\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n  return (\\\\\\\\n    <ThemeWrapper>\\\\\\\\n      <DateRangePicker\\\\\\\\n        onFromChange={action('From Clicked')}\\\\\\\\n        onToChange={action('To Clicked')}\\\\\\\\n        onApply={action('Apply Clicked')}\\\\\\\\n        onCancel={action('Cancel Clicked')}\\\\\\\\n        label={text('Label', 'Date Range')}\\\\\\\\n        variant='daterange'\\\\\\\\n        timeFormat={12}\\\\\\\\n        showTime={boolean('Show time', true)}\\\\\\\\n        style={object('style', {\\\\\\\\n          position: 'absolute',\\\\\\\\n          left: '0px'\\\\\\\\n        })}\\\\\\\\n        startDate={startDate}\\\\\\\\n        endDate={endDate}\\\\\\\\n        fromDateFormatter={getFormattedDate}\\\\\\\\n        toDateFormatter={getFormattedDate}\\\\\\\\n        stringToDate={convertStringToDate}\\\\\\\\n        open={boolean('open', false)}\\\\\\\\n      >\\\\\\\\n        {({ value, open, setOpen }: tDateRangeChildren) => (\\\\\\\\n          <div>\\\\\\\\n            <TextInputStyled onClick={() => setOpen(!open)}>\\\\\\\\n              <TextInput\\\\\\\\n                id='someId'\\\\\\\\n                name='someId'\\\\\\\\n                className='someClassname'\\\\\\\\n                label='Holidays'\\\\\\\\n                variant='basic'\\\\\\\\n                labelColor='text.inputLabel.default'\\\\\\\\n                placeholder='Please Click Here'\\\\\\\\n                fullWidth\\\\\\\\n                value={value?.toString()}\\\\\\\\n                onChange={action('On change clicked')}\\\\\\\\n              />\\\\\\\\n            </TextInputStyled>\\\\\\\\n          </div>\\\\\\\\n        )}\\\\\\\\n      </DateRangePicker>\\\\\\\\n    </ThemeWrapper>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\",\\\\\\\"locationsMap\\\\\\\":{}},},\\\\n  title: `${path}/DatePicker`,\\\\n  component: DatePicker\\\\n}\\\\n\\\\nconst getFormattedDate = (date: Date) => {\\\\n  const todayTime = date\\\\n  const month = todayTime.getMonth() + 1\\\\n  const day = todayTime.getDate()\\\\n  const year = todayTime.getFullYear()\\\\n  const hours = todayTime.getHours()\\\\n  const minutes = todayTime.getMinutes()\\\\n  const AM = todayTime.getHours() > 12 ? 'PM' : 'AM'\\\\n\\\\n  return month + '/' + day + '/' + year + '-' + hours + ':' + minutes + ' ' + AM\\\\n}\\\\n\\\\nexport const withDateRange = addSourceDecorator(() => {\\\\n  const startDate = new Date(\\\\n    new Date().getFullYear(),\\\\n    new Date().getMonth(),\\\\n    new Date().getDate() - 8\\\\n  )\\\\n\\\\n  const endDate = new Date(\\\\n    new Date().getFullYear(),\\\\n    new Date().getMonth(),\\\\n    new Date().getDate() - 1\\\\n  )\\\\n\\\\n  const isInValidDate = (d: any) => {\\\\n    return d instanceof Date && isNaN(d.getTime())\\\\n  }\\\\n  // const convertStringToDate = (input: string) => {\\\\n  //   const finalDate = new Date()\\\\n  //   const dateArray = input.trim().split('/')\\\\n  //   const month = parseInt(dateArray[0])\\\\n  //   if (month <= 12) {\\\\n  //     //  valid day\\\\n  //     finalDate.setMonth(month - 1)\\\\n\\\\n  //     // set Month\\\\n  //     const day = parseInt(dateArray[1])\\\\n  //     if (day <= 31) {\\\\n  //       finalDate.setDate(day)\\\\n\\\\n  //       // set year\\\\n  //       const year = parseInt(dateArray[2])\\\\n  //       if (year <= 2050 && year >= 1970) {\\\\n  //         finalDate.setFullYear(year)\\\\n\\\\n  //         // return finalDate\\\\n  //         return finalDate\\\\n  //       }\\\\n  //     }\\\\n  //   }\\\\n  //   return undefined\\\\n  // }\\\\n  const convertStringToDate = (input: string) => {\\\\n    const newDate = new Date(input)\\\\n    if (isInValidDate(newDate)) {\\\\n      return undefined\\\\n    } else {\\\\n      console.log('String to Date: ', newDate)\\\\n      return newDate\\\\n    }\\\\n  }\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <DateRangePicker\\\\n        onFromChange={action('From Clicked')}\\\\n        onToChange={action('To Clicked')}\\\\n        onApply={action('Apply Clicked')}\\\\n        onCancel={action('Cancel Clicked')}\\\\n        label={text('Label', 'Date Range')}\\\\n        variant='daterange'\\\\n        timeFormat={12}\\\\n        showTime={boolean('Show time', true)}\\\\n        style={object('style', {\\\\n          position: 'absolute',\\\\n          left: '0px'\\\\n        })}\\\\n        startDate={startDate}\\\\n        endDate={endDate}\\\\n        fromDateFormatter={getFormattedDate}\\\\n        toDateFormatter={getFormattedDate}\\\\n        stringToDate={convertStringToDate}\\\\n        open={boolean('open', false)}\\\\n      >\\\\n        {({ value, open, setOpen }: tDateRangeChildren) => (\\\\n          <div>\\\\n            <TextInputStyled onClick={() => setOpen(!open)}>\\\\n              <TextInput\\\\n                id='someId'\\\\n                name='someId'\\\\n                className='someClassname'\\\\n                label='Holidays'\\\\n                variant='basic'\\\\n                labelColor='text.inputLabel.default'\\\\n                placeholder='Please Click Here'\\\\n                fullWidth\\\\n                value={value?.toString()}\\\\n                onChange={action('On change clicked')}\\\\n              />\\\\n            </TextInputStyled>\\\\n          </div>\\\\n        )}\\\\n      </DateRangePicker>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\\",\\\"locationsMap\\\":{}},\\\"storySource\\\":{\\\"source\\\":\\\"import React from 'react'\\\\nimport { DatePicker, DateRangePicker } from '../../DatePicker'\\\\nimport { tDateRangeChildren } from '../interfaces'\\\\nimport { path } from '../..'\\\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\\\nimport { boolean, text, object } from '@storybook/addon-knobs'\\\\nimport { action } from '@storybook/addon-actions'\\\\nimport { TextInputStyled } from '../Styles/DateRange.styles'\\\\nimport TextInput from '../../TextInput'\\\\n\\\\nexport default {\\\\n  title: `${path}/DatePicker`,\\\\n  component: DatePicker\\\\n}\\\\n\\\\nconst getFormattedDate = (date: Date) => {\\\\n  const todayTime = date\\\\n  const month = todayTime.getMonth() + 1\\\\n  const day = todayTime.getDate()\\\\n  const year = todayTime.getFullYear()\\\\n  const hours = todayTime.getHours()\\\\n  const minutes = todayTime.getMinutes()\\\\n  const AM = todayTime.getHours() > 12 ? 'PM' : 'AM'\\\\n\\\\n  return month + '/' + day + '/' + year + '-' + hours + ':' + minutes + ' ' + AM\\\\n}\\\\n\\\\nexport const withDateRange = () => {\\\\n  const startDate = new Date(\\\\n    new Date().getFullYear(),\\\\n    new Date().getMonth(),\\\\n    new Date().getDate() - 8\\\\n  )\\\\n\\\\n  const endDate = new Date(\\\\n    new Date().getFullYear(),\\\\n    new Date().getMonth(),\\\\n    new Date().getDate() - 1\\\\n  )\\\\n\\\\n  const isInValidDate = (d: any) => {\\\\n    return d instanceof Date && isNaN(d.getTime())\\\\n  }\\\\n  // const convertStringToDate = (input: string) => {\\\\n  //   const finalDate = new Date()\\\\n  //   const dateArray = input.trim().split('/')\\\\n  //   const month = parseInt(dateArray[0])\\\\n  //   if (month <= 12) {\\\\n  //     //  valid day\\\\n  //     finalDate.setMonth(month - 1)\\\\n\\\\n  //     // set Month\\\\n  //     const day = parseInt(dateArray[1])\\\\n  //     if (day <= 31) {\\\\n  //       finalDate.setDate(day)\\\\n\\\\n  //       // set year\\\\n  //       const year = parseInt(dateArray[2])\\\\n  //       if (year <= 2050 && year >= 1970) {\\\\n  //         finalDate.setFullYear(year)\\\\n\\\\n  //         // return finalDate\\\\n  //         return finalDate\\\\n  //       }\\\\n  //     }\\\\n  //   }\\\\n  //   return undefined\\\\n  // }\\\\n  const convertStringToDate = (input: string) => {\\\\n    const newDate = new Date(input)\\\\n    if (isInValidDate(newDate)) {\\\\n      return undefined\\\\n    } else {\\\\n      console.log('String to Date: ', newDate)\\\\n      return newDate\\\\n    }\\\\n  }\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <DateRangePicker\\\\n        onFromChange={action('From Clicked')}\\\\n        onToChange={action('To Clicked')}\\\\n        onApply={action('Apply Clicked')}\\\\n        onCancel={action('Cancel Clicked')}\\\\n        label={text('Label', 'Date Range')}\\\\n        variant='daterange'\\\\n        timeFormat={12}\\\\n        showTime={boolean('Show time', true)}\\\\n        style={object('style', {\\\\n          position: 'absolute',\\\\n          left: '0px'\\\\n        })}\\\\n        startDate={startDate}\\\\n        endDate={endDate}\\\\n        fromDateFormatter={getFormattedDate}\\\\n        toDateFormatter={getFormattedDate}\\\\n        stringToDate={convertStringToDate}\\\\n        open={boolean('open', false)}\\\\n      >\\\\n        {({ value, open, setOpen }: tDateRangeChildren) => (\\\\n          <div>\\\\n            <TextInputStyled onClick={() => setOpen(!open)}>\\\\n              <TextInput\\\\n                id='someId'\\\\n                name='someId'\\\\n                className='someClassname'\\\\n                label='Holidays'\\\\n                variant='basic'\\\\n                labelColor='text.inputLabel.default'\\\\n                placeholder='Please Click Here'\\\\n                fullWidth\\\\n                value={value?.toString()}\\\\n                onChange={action('On change clicked')}\\\\n              />\\\\n            </TextInputStyled>\\\\n          </div>\\\\n        )}\\\\n      </DateRangePicker>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\",\\\"locationsMap\\\":{}},},\\n  title: `${path}/DatePicker`,\\n  component: DatePicker\\n}\\n\\nconst getFormattedDate = (date: Date) => {\\n  const todayTime = date\\n  const month = todayTime.getMonth() + 1\\n  const day = todayTime.getDate()\\n  const year = todayTime.getFullYear()\\n  const hours = todayTime.getHours()\\n  const minutes = todayTime.getMinutes()\\n  const AM = todayTime.getHours() > 12 ? 'PM' : 'AM'\\n\\n  return month + '/' + day + '/' + year + '-' + hours + ':' + minutes + ' ' + AM\\n}\\n\\nexport const withDateRange = addSourceDecorator(addSourceDecorator(() => {\\n  const startDate = new Date(\\n    new Date().getFullYear(),\\n    new Date().getMonth(),\\n    new Date().getDate() - 8\\n  )\\n\\n  const endDate = new Date(\\n    new Date().getFullYear(),\\n    new Date().getMonth(),\\n    new Date().getDate() - 1\\n  )\\n\\n  const isInValidDate = (d: any) => {\\n    return d instanceof Date && isNaN(d.getTime())\\n  }\\n  // const convertStringToDate = (input: string) => {\\n  //   const finalDate = new Date()\\n  //   const dateArray = input.trim().split('/')\\n  //   const month = parseInt(dateArray[0])\\n  //   if (month <= 12) {\\n  //     //  valid day\\n  //     finalDate.setMonth(month - 1)\\n\\n  //     // set Month\\n  //     const day = parseInt(dateArray[1])\\n  //     if (day <= 31) {\\n  //       finalDate.setDate(day)\\n\\n  //       // set year\\n  //       const year = parseInt(dateArray[2])\\n  //       if (year <= 2050 && year >= 1970) {\\n  //         finalDate.setFullYear(year)\\n\\n  //         // return finalDate\\n  //         return finalDate\\n  //       }\\n  //     }\\n  //   }\\n  //   return undefined\\n  // }\\n  const convertStringToDate = (input: string) => {\\n    const newDate = new Date(input)\\n    if (isInValidDate(newDate)) {\\n      return undefined\\n    } else {\\n      console.log('String to Date: ', newDate)\\n      return newDate\\n    }\\n  }\\n  return (\\n    <ThemeWrapper>\\n      <DateRangePicker\\n        onFromChange={action('From Clicked')}\\n        onToChange={action('To Clicked')}\\n        onApply={action('Apply Clicked')}\\n        onCancel={action('Cancel Clicked')}\\n        label={text('Label', 'Date Range')}\\n        variant='daterange'\\n        timeFormat={12}\\n        showTime={boolean('Show time', true)}\\n        style={object('style', {\\n          position: 'absolute',\\n          left: '0px'\\n        })}\\n        startDate={startDate}\\n        endDate={endDate}\\n        fromDateFormatter={getFormattedDate}\\n        toDateFormatter={getFormattedDate}\\n        stringToDate={convertStringToDate}\\n        open={boolean('open', false)}\\n      >\\n        {({ value, open, setOpen }: tDateRangeChildren) => (\\n          <div>\\n            <TextInputStyled onClick={() => setOpen(!open)}>\\n              <TextInput\\n                id='someId'\\n                name='someId'\\n                className='someClassname'\\n                label='Holidays'\\n                variant='basic'\\n                labelColor='text.inputLabel.default'\\n                placeholder='Please Click Here'\\n                fullWidth\\n                value={value?.toString()}\\n                onChange={action('On change clicked')}\\n              />\\n            </TextInputStyled>\\n          </div>\\n        )}\\n      </DateRangePicker>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\",\"locationsMap\":{}},\"storySource\":{\"source\":\"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/molecules/DatePicker/stories\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"import React from 'react'\\\\nimport { DatePicker, DateRangePicker } from '../../DatePicker'\\\\nimport { tDateRangeChildren } from '../interfaces'\\\\nimport { path } from '../..'\\\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\\\nimport { boolean, text, object } from '@storybook/addon-knobs'\\\\nimport { action } from '@storybook/addon-actions'\\\\nimport { TextInputStyled } from '../Styles/DateRange.styles'\\\\nimport TextInput from '../../TextInput'\\\\n\\\\nexport default {\\\\n  title: `${path}/DatePicker`,\\\\n  component: DatePicker\\\\n}\\\\n\\\\nconst getFormattedDate = (date: Date) => {\\\\n  const todayTime = date\\\\n  const month = todayTime.getMonth() + 1\\\\n  const day = todayTime.getDate()\\\\n  const year = todayTime.getFullYear()\\\\n  const hours = todayTime.getHours()\\\\n  const minutes = todayTime.getMinutes()\\\\n  const AM = todayTime.getHours() > 12 ? 'PM' : 'AM'\\\\n\\\\n  return month + '/' + day + '/' + year + '-' + hours + ':' + minutes + ' ' + AM\\\\n}\\\\n\\\\nexport const withDateRange = () => {\\\\n  const startDate = new Date(\\\\n    new Date().getFullYear(),\\\\n    new Date().getMonth(),\\\\n    new Date().getDate() - 8\\\\n  )\\\\n\\\\n  const endDate = new Date(\\\\n    new Date().getFullYear(),\\\\n    new Date().getMonth(),\\\\n    new Date().getDate() - 1\\\\n  )\\\\n\\\\n  const isInValidDate = (d: any) => {\\\\n    return d instanceof Date && isNaN(d.getTime())\\\\n  }\\\\n  // const convertStringToDate = (input: string) => {\\\\n  //   const finalDate = new Date()\\\\n  //   const dateArray = input.trim().split('/')\\\\n  //   const month = parseInt(dateArray[0])\\\\n  //   if (month <= 12) {\\\\n  //     //  valid day\\\\n  //     finalDate.setMonth(month - 1)\\\\n\\\\n  //     // set Month\\\\n  //     const day = parseInt(dateArray[1])\\\\n  //     if (day <= 31) {\\\\n  //       finalDate.setDate(day)\\\\n\\\\n  //       // set year\\\\n  //       const year = parseInt(dateArray[2])\\\\n  //       if (year <= 2050 && year >= 1970) {\\\\n  //         finalDate.setFullYear(year)\\\\n\\\\n  //         // return finalDate\\\\n  //         return finalDate\\\\n  //       }\\\\n  //     }\\\\n  //   }\\\\n  //   return undefined\\\\n  // }\\\\n  const convertStringToDate = (input: string) => {\\\\n    const newDate = new Date(input)\\\\n    if (isInValidDate(newDate)) {\\\\n      return undefined\\\\n    } else {\\\\n      console.log('String to Date: ', newDate)\\\\n      return newDate\\\\n    }\\\\n  }\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <DateRangePicker\\\\n        onFromChange={action('From Clicked')}\\\\n        onToChange={action('To Clicked')}\\\\n        onApply={action('Apply Clicked')}\\\\n        onCancel={action('Cancel Clicked')}\\\\n        label={text('Label', 'Date Range')}\\\\n        variant='daterange'\\\\n        timeFormat={12}\\\\n        showTime={boolean('Show time', true)}\\\\n        style={object('style', {\\\\n          position: 'absolute',\\\\n          left: '0px'\\\\n        })}\\\\n        startDate={startDate}\\\\n        endDate={endDate}\\\\n        fromDateFormatter={getFormattedDate}\\\\n        toDateFormatter={getFormattedDate}\\\\n        stringToDate={convertStringToDate}\\\\n        open={boolean('open', false)}\\\\n      >\\\\n        {({ value, open, setOpen }: tDateRangeChildren) => (\\\\n          <div>\\\\n            <TextInputStyled onClick={() => setOpen(!open)}>\\\\n              <TextInput\\\\n                id='someId'\\\\n                name='someId'\\\\n                className='someClassname'\\\\n                label='Holidays'\\\\n                variant='basic'\\\\n                labelColor='text.inputLabel.default'\\\\n                placeholder='Please Click Here'\\\\n                fullWidth\\\\n                value={value?.toString()}\\\\n                onChange={action('On change clicked')}\\\\n              />\\\\n            </TextInputStyled>\\\\n          </div>\\\\n        )}\\\\n      </DateRangePicker>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/DateRange.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\nimport React from 'react'\\nimport { DatePicker, DateRangePicker } from '../../DatePicker'\\nimport { tDateRangeChildren } from '../interfaces'\\nimport { path } from '../..'\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\nimport { boolean, text, object } from '@storybook/addon-knobs'\\nimport { action } from '@storybook/addon-actions'\\nimport { TextInputStyled } from '../Styles/DateRange.styles'\\nimport TextInput from '../../TextInput'\\n\\nexport default {parameters: {\\\"storySource\\\":{\\\"source\\\":\\\"import React from 'react'\\\\nimport { DatePicker, DateRangePicker } from '../../DatePicker'\\\\nimport { tDateRangeChildren } from '../interfaces'\\\\nimport { path } from '../..'\\\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\\\nimport { boolean, text, object } from '@storybook/addon-knobs'\\\\nimport { action } from '@storybook/addon-actions'\\\\nimport { TextInputStyled } from '../Styles/DateRange.styles'\\\\nimport TextInput from '../../TextInput'\\\\n\\\\nexport default {\\\\n  title: `${path}/DatePicker`,\\\\n  component: DatePicker\\\\n}\\\\n\\\\nconst getFormattedDate = (date: Date) => {\\\\n  const todayTime = date\\\\n  const month = todayTime.getMonth() + 1\\\\n  const day = todayTime.getDate()\\\\n  const year = todayTime.getFullYear()\\\\n  const hours = todayTime.getHours()\\\\n  const minutes = todayTime.getMinutes()\\\\n  const AM = todayTime.getHours() > 12 ? 'PM' : 'AM'\\\\n\\\\n  return month + '/' + day + '/' + year + '-' + hours + ':' + minutes + ' ' + AM\\\\n}\\\\n\\\\nexport const withDateRange = () => {\\\\n  const startDate = new Date(\\\\n    new Date().getFullYear(),\\\\n    new Date().getMonth(),\\\\n    new Date().getDate() - 8\\\\n  )\\\\n\\\\n  const endDate = new Date(\\\\n    new Date().getFullYear(),\\\\n    new Date().getMonth(),\\\\n    new Date().getDate() - 1\\\\n  )\\\\n\\\\n  const isInValidDate = (d: any) => {\\\\n    return d instanceof Date && isNaN(d.getTime())\\\\n  }\\\\n  // const convertStringToDate = (input: string) => {\\\\n  //   const finalDate = new Date()\\\\n  //   const dateArray = input.trim().split('/')\\\\n  //   const month = parseInt(dateArray[0])\\\\n  //   if (month <= 12) {\\\\n  //     //  valid day\\\\n  //     finalDate.setMonth(month - 1)\\\\n\\\\n  //     // set Month\\\\n  //     const day = parseInt(dateArray[1])\\\\n  //     if (day <= 31) {\\\\n  //       finalDate.setDate(day)\\\\n\\\\n  //       // set year\\\\n  //       const year = parseInt(dateArray[2])\\\\n  //       if (year <= 2050 && year >= 1970) {\\\\n  //         finalDate.setFullYear(year)\\\\n\\\\n  //         // return finalDate\\\\n  //         return finalDate\\\\n  //       }\\\\n  //     }\\\\n  //   }\\\\n  //   return undefined\\\\n  // }\\\\n  const convertStringToDate = (input: string) => {\\\\n    const newDate = new Date(input)\\\\n    if (isInValidDate(newDate)) {\\\\n      return undefined\\\\n    } else {\\\\n      console.log('String to Date: ', newDate)\\\\n      return newDate\\\\n    }\\\\n  }\\\\n  return (\\\\n    <ThemeWrapper>\\\\n      <DateRangePicker\\\\n        onFromChange={action('From Clicked')}\\\\n        onToChange={action('To Clicked')}\\\\n        onApply={action('Apply Clicked')}\\\\n        onCancel={action('Cancel Clicked')}\\\\n        label={text('Label', 'Date Range')}\\\\n        variant='daterange'\\\\n        timeFormat={12}\\\\n        showTime={boolean('Show time', true)}\\\\n        style={object('style', {\\\\n          position: 'absolute',\\\\n          left: '0px'\\\\n        })}\\\\n        startDate={startDate}\\\\n        endDate={endDate}\\\\n        fromDateFormatter={getFormattedDate}\\\\n        toDateFormatter={getFormattedDate}\\\\n        stringToDate={convertStringToDate}\\\\n        open={boolean('open', false)}\\\\n      >\\\\n        {({ value, open, setOpen }: tDateRangeChildren) => (\\\\n          <div>\\\\n            <TextInputStyled onClick={() => setOpen(!open)}>\\\\n              <TextInput\\\\n                id='someId'\\\\n                name='someId'\\\\n                className='someClassname'\\\\n                label='Holidays'\\\\n                variant='basic'\\\\n                labelColor='text.inputLabel.default'\\\\n                placeholder='Please Click Here'\\\\n                fullWidth\\\\n                value={value?.toString()}\\\\n                onChange={action('On change clicked')}\\\\n              />\\\\n            </TextInputStyled>\\\\n          </div>\\\\n        )}\\\\n      </DateRangePicker>\\\\n    </ThemeWrapper>\\\\n  )\\\\n}\\\\n\\\",\\\"locationsMap\\\":{}},},\\n  title: `${path}/DatePicker`,\\n  component: DatePicker\\n}\\n\\nconst getFormattedDate = (date: Date) => {\\n  const todayTime = date\\n  const month = todayTime.getMonth() + 1\\n  const day = todayTime.getDate()\\n  const year = todayTime.getFullYear()\\n  const hours = todayTime.getHours()\\n  const minutes = todayTime.getMinutes()\\n  const AM = todayTime.getHours() > 12 ? 'PM' : 'AM'\\n\\n  return month + '/' + day + '/' + year + '-' + hours + ':' + minutes + ' ' + AM\\n}\\n\\nexport const withDateRange = addSourceDecorator(() => {\\n  const startDate = new Date(\\n    new Date().getFullYear(),\\n    new Date().getMonth(),\\n    new Date().getDate() - 8\\n  )\\n\\n  const endDate = new Date(\\n    new Date().getFullYear(),\\n    new Date().getMonth(),\\n    new Date().getDate() - 1\\n  )\\n\\n  const isInValidDate = (d: any) => {\\n    return d instanceof Date && isNaN(d.getTime())\\n  }\\n  // const convertStringToDate = (input: string) => {\\n  //   const finalDate = new Date()\\n  //   const dateArray = input.trim().split('/')\\n  //   const month = parseInt(dateArray[0])\\n  //   if (month <= 12) {\\n  //     //  valid day\\n  //     finalDate.setMonth(month - 1)\\n\\n  //     // set Month\\n  //     const day = parseInt(dateArray[1])\\n  //     if (day <= 31) {\\n  //       finalDate.setDate(day)\\n\\n  //       // set year\\n  //       const year = parseInt(dateArray[2])\\n  //       if (year <= 2050 && year >= 1970) {\\n  //         finalDate.setFullYear(year)\\n\\n  //         // return finalDate\\n  //         return finalDate\\n  //       }\\n  //     }\\n  //   }\\n  //   return undefined\\n  // }\\n  const convertStringToDate = (input: string) => {\\n    const newDate = new Date(input)\\n    if (isInValidDate(newDate)) {\\n      return undefined\\n    } else {\\n      console.log('String to Date: ', newDate)\\n      return newDate\\n    }\\n  }\\n  return (\\n    <ThemeWrapper>\\n      <DateRangePicker\\n        onFromChange={action('From Clicked')}\\n        onToChange={action('To Clicked')}\\n        onApply={action('Apply Clicked')}\\n        onCancel={action('Cancel Clicked')}\\n        label={text('Label', 'Date Range')}\\n        variant='daterange'\\n        timeFormat={12}\\n        showTime={boolean('Show time', true)}\\n        style={object('style', {\\n          position: 'absolute',\\n          left: '0px'\\n        })}\\n        startDate={startDate}\\n        endDate={endDate}\\n        fromDateFormatter={getFormattedDate}\\n        toDateFormatter={getFormattedDate}\\n        stringToDate={convertStringToDate}\\n        open={boolean('open', false)}\\n      >\\n        {({ value, open, setOpen }: tDateRangeChildren) => (\\n          <div>\\n            <TextInputStyled onClick={() => setOpen(!open)}>\\n              <TextInput\\n                id='someId'\\n                name='someId'\\n                className='someClassname'\\n                label='Holidays'\\n                variant='basic'\\n                labelColor='text.inputLabel.default'\\n                placeholder='Please Click Here'\\n                fullWidth\\n                value={value?.toString()}\\n                onChange={action('On change clicked')}\\n              />\\n            </TextInputStyled>\\n          </div>\\n        )}\\n      </DateRangePicker>\\n    </ThemeWrapper>\\n  )\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\",\"locationsMap\":{}},\"storySource\":{\"source\":\"import React from 'react'\\nimport { DatePicker, DateRangePicker } from '../../DatePicker'\\nimport { tDateRangeChildren } from '../interfaces'\\nimport { path } from '../..'\\nimport ThemeWrapper from '../../../../utilities/components/ThemeWrapper'\\nimport { boolean, text, object } from '@storybook/addon-knobs'\\nimport { action } from '@storybook/addon-actions'\\nimport { TextInputStyled } from '../Styles/DateRange.styles'\\nimport TextInput from '../../TextInput'\\n\\nexport default {\\n  title: `${path}/DatePicker`,\\n  component: DatePicker\\n}\\n\\nconst getFormattedDate = (date: Date) => {\\n  const todayTime = date\\n  const month = todayTime.getMonth() + 1\\n  const day = todayTime.getDate()\\n  const year = todayTime.getFullYear()\\n  const hours = todayTime.getHours()\\n  const minutes = todayTime.getMinutes()\\n  const AM = todayTime.getHours() > 12 ? 'PM' : 'AM'\\n\\n  return month + '/' + day + '/' + year + '-' + hours + ':' + minutes + ' ' + AM\\n}\\n\\nexport const withDateRange = () => {\\n  const startDate = new Date(\\n    new Date().getFullYear(),\\n    new Date().getMonth(),\\n    new Date().getDate() - 8\\n  )\\n\\n  const endDate = new Date(\\n    new Date().getFullYear(),\\n    new Date().getMonth(),\\n    new Date().getDate() - 1\\n  )\\n\\n  const isInValidDate = (d: any) => {\\n    return d instanceof Date && isNaN(d.getTime())\\n  }\\n  // const convertStringToDate = (input: string) => {\\n  //   const finalDate = new Date()\\n  //   const dateArray = input.trim().split('/')\\n  //   const month = parseInt(dateArray[0])\\n  //   if (month <= 12) {\\n  //     //  valid day\\n  //     finalDate.setMonth(month - 1)\\n\\n  //     // set Month\\n  //     const day = parseInt(dateArray[1])\\n  //     if (day <= 31) {\\n  //       finalDate.setDate(day)\\n\\n  //       // set year\\n  //       const year = parseInt(dateArray[2])\\n  //       if (year <= 2050 && year >= 1970) {\\n  //         finalDate.setFullYear(year)\\n\\n  //         // return finalDate\\n  //         return finalDate\\n  //       }\\n  //     }\\n  //   }\\n  //   return undefined\\n  // }\\n  const convertStringToDate = (input: string) => {\\n    const newDate = new Date(input)\\n    if (isInValidDate(newDate)) {\\n      return undefined\\n    } else {\\n      console.log('String to Date: ', newDate)\\n      return newDate\\n    }\\n  }\\n  return (\\n    <ThemeWrapper>\\n      <DateRangePicker\\n        onFromChange={action('From Clicked')}\\n        onToChange={action('To Clicked')}\\n        onApply={action('Apply Clicked')}\\n        onCancel={action('Cancel Clicked')}\\n        label={text('Label', 'Date Range')}\\n        variant='daterange'\\n        timeFormat={12}\\n        showTime={boolean('Show time', true)}\\n        style={object('style', {\\n          position: 'absolute',\\n          left: '0px'\\n        })}\\n        startDate={startDate}\\n        endDate={endDate}\\n        fromDateFormatter={getFormattedDate}\\n        toDateFormatter={getFormattedDate}\\n        stringToDate={convertStringToDate}\\n        open={boolean('open', false)}\\n      >\\n        {({ value, open, setOpen }: tDateRangeChildren) => (\\n          <div>\\n            <TextInputStyled onClick={() => setOpen(!open)}>\\n              <TextInput\\n                id='someId'\\n                name='someId'\\n                className='someClassname'\\n                label='Holidays'\\n                variant='basic'\\n                labelColor='text.inputLabel.default'\\n                placeholder='Please Click Here'\\n                fullWidth\\n                value={value?.toString()}\\n                onChange={action('On change clicked')}\\n              />\\n            </TextInputStyled>\\n          </div>\\n        )}\\n      </DateRangePicker>\\n    </ThemeWrapper>\\n  )\\n}\\n\",\"locationsMap\":{}},},\n  title: `${path}/DatePicker`,\n  component: DatePicker\n}\n\nconst getFormattedDate = (date: Date) => {\n  const todayTime = date\n  const month = todayTime.getMonth() + 1\n  const day = todayTime.getDate()\n  const year = todayTime.getFullYear()\n  const hours = todayTime.getHours()\n  const minutes = todayTime.getMinutes()\n  const AM = todayTime.getHours() > 12 ? 'PM' : 'AM'\n\n  return month + '/' + day + '/' + year + '-' + hours + ':' + minutes + ' ' + AM\n}\n\nexport const withDateRange = addSourceDecorator(addSourceDecorator(addSourceDecorator(() => {\n  const startDate = new Date(\n    new Date().getFullYear(),\n    new Date().getMonth(),\n    new Date().getDate() - 8\n  )\n\n  const endDate = new Date(\n    new Date().getFullYear(),\n    new Date().getMonth(),\n    new Date().getDate() - 1\n  )\n\n  const isInValidDate = (d: any) => {\n    return d instanceof Date && isNaN(d.getTime())\n  }\n  // const convertStringToDate = (input: string) => {\n  //   const finalDate = new Date()\n  //   const dateArray = input.trim().split('/')\n  //   const month = parseInt(dateArray[0])\n  //   if (month <= 12) {\n  //     //  valid day\n  //     finalDate.setMonth(month - 1)\n\n  //     // set Month\n  //     const day = parseInt(dateArray[1])\n  //     if (day <= 31) {\n  //       finalDate.setDate(day)\n\n  //       // set year\n  //       const year = parseInt(dateArray[2])\n  //       if (year <= 2050 && year >= 1970) {\n  //         finalDate.setFullYear(year)\n\n  //         // return finalDate\n  //         return finalDate\n  //       }\n  //     }\n  //   }\n  //   return undefined\n  // }\n  const convertStringToDate = (input: string) => {\n    const newDate = new Date(input)\n    if (isInValidDate(newDate)) {\n      return undefined\n    } else {\n      console.log('String to Date: ', newDate)\n      return newDate\n    }\n  }\n  return (\n    <ThemeWrapper>\n      <DateRangePicker\n        onFromChange={action('From Clicked')}\n        onToChange={action('To Clicked')}\n        onApply={action('Apply Clicked')}\n        onCancel={action('Cancel Clicked')}\n        label={text('Label', 'Date Range')}\n        variant='daterange'\n        timeFormat={12}\n        showTime={boolean('Show time', true)}\n        style={object('style', {\n          position: 'absolute',\n          left: '0px'\n        })}\n        startDate={startDate}\n        endDate={endDate}\n        fromDateFormatter={getFormattedDate}\n        toDateFormatter={getFormattedDate}\n        stringToDate={convertStringToDate}\n        open={boolean('open', false)}\n      >\n        {({ value, open, setOpen }: tDateRangeChildren) => (\n          <div>\n            <TextInputStyled onClick={() => setOpen(!open)}>\n              <TextInput\n                id='someId'\n                name='someId'\n                className='someClassname'\n                label='Holidays'\n                variant='basic'\n                labelColor='text.inputLabel.default'\n                placeholder='Please Click Here'\n                fullWidth\n                value={value?.toString()}\n                onChange={action('On change clicked')}\n              />\n            </TextInputStyled>\n          </div>\n        )}\n      </DateRangePicker>\n    </ThemeWrapper>\n  )\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});"],"sourceRoot":""},"metadata":{},"sourceType":"module"}