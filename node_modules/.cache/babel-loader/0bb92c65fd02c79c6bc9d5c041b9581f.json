{"ast":null,"code":"import _toConsumableArray from \"/Users/farhanansari/Code/ui-library/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Users/farhanansari/Code/ui-library/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/Users/farhanansari/Code/ui-library/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/farhanansari/Code/ui-library/src/components/atoms/Map/index.tsx\";\n\n// The base component - atom - of the leaflet map\nimport { GoogleApiWrapper } from 'google-maps-react';\nimport React, { useEffect, useState, createContext } from 'react';\nimport { Map } from 'react-leaflet';\nimport { LeafletStyles } from 'styled-leaflet';\nimport SettingBox from '../SettingBox';\nimport Settings from '../SettingBox/data';\nimport { ZOOM_500M } from './constants/googleIntegration.constants';\nimport { convertArrayToObject, deepCopy, setLegendMarkers, updateMapWithSettings } from './helperMethods';\nimport LeafletCircleLayer from './layers/LeafletCircleLayer';\nimport LeafletControlLayer from './layers/LeafletControlLayer';\nimport LeafletGeocodingLayer from './layers/LeafletGeocodingLayer';\nimport LeafletHeatLayer from './layers/LeafletHeatLayer';\nimport LeafletMarkerLayer from './layers/LeafletMarkerLayer';\nimport LeafletPolygonLayer from './layers/LeafletPolygonLayer';\nimport LeafletTileLayer from './layers/LeafletTileLayer';\nimport LeafletTrackingLayer from './layers/LeafletTrackingLayer';\nimport LeafletTripsLayer from './layers/LeafletTripsLayer';\nimport { LeafletOverlay } from './utils/LeafletOverlay';\nimport { StyledMap } from './StyledMap';\nimport { LatLngBounds } from 'leaflet';\nimport CustomControl from './SubComponent/CustomControl';\nimport LL from 'leaflet';\n\nvar _ = require('lodash');\n\nexport var GeocodingContext = createContext({});\n\nvar LeafletMapWrapper = function LeafletMapWrapper(props) {\n  var _settingConfig$Legend, _settingConfig$Legend2, _props$geocoding, _props$geocoding2, _props$geocoding3, _props$geocoding10, _props$geocoding16, _props$geocoding20, _configurableOption$h2, _configurableOption$h3, _configurableOption$h4, _props$trips, _configurableOption$h5, _configurableOption$h6, _props$trips2, _props$trips3, _props$trips3$data, _props$trips4, _props$trips4$noSelec, _props$trips5, _props$trips5$noSelec, _props$trips6, _props$trips6$noSelec, _props$trips7, _props$trips7$noSelec, _props$trips8, _props$trips8$noSelec, _props$tracking, _configurableOption$p2, _configurableOption$c;\n\n  var markers = props.markers,\n      theme = props.theme,\n      heatmap = props.heatmap,\n      tiles = props.tiles,\n      poi = props.poi,\n      popupRef = props.popupRef,\n      onEdit = props.onEdit,\n      editPopUpComponent = props.editPopUpComponent,\n      popupCustomComponent = props.popupCustomComponent,\n      circle = props.circle,\n      polygon = props.polygon,\n      _props$locationSearch = props.locationSearch,\n      locationSearch = _props$locationSearch === void 0 ? true : _props$locationSearch,\n      rulerControl = props.rulerControl,\n      traffic = props.traffic,\n      _props$zoomControl = props.zoomControl,\n      zoomControl = _props$zoomControl === void 0 ? true : _props$zoomControl,\n      sendLocationOutside = props.sendLocationOutside,\n      _props$isShowMapTileL = props.isShowMapTileLayer,\n      isShowMapTileLayer = _props$isShowMapTileL === void 0 ? true : _props$isShowMapTileL,\n      handleClosePopup = props.handleClosePopup,\n      _props$showLegendWrap = props.showLegendWrapper,\n      showLegendWrapper = _props$showLegendWrap === void 0 ? true : _props$showLegendWrap,\n      _props$useFlyTo = props.useFlyTo,\n      useFlyTo = _props$useFlyTo === void 0 ? true : _props$useFlyTo,\n      allowCustomControl = props.allowCustomControl,\n      customControlProps = props.customControlProps,\n      setMapProps = props.setMapProps,\n      setFeatureGroupProps = props.setFeatureGroupProps,\n      setLocationSearched = props.setLocationSearched,\n      _props$getLatLong = props.getLatLong,\n      getLatLong = _props$getLatLong === void 0 ? function () {} : _props$getLatLong;\n\n  var _useState = useState(markers),\n      _useState2 = _slicedToArray(_useState, 2),\n      markerConfig = _useState2[0],\n      setmarkerConfig = _useState2[1];\n\n  var _useState3 = useState((props === null || props === void 0 ? void 0 : props.settingConfig) || Settings),\n      _useState4 = _slicedToArray(_useState3, 2),\n      settingConfig = _useState4[0],\n      setSettingConfig = _useState4[1];\n\n  var _useState5 = useState(isShowMapTileLayer),\n      _useState6 = _slicedToArray(_useState5, 2),\n      _isShowTileLayer = _useState6[0],\n      setIsShowTileLayer = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      createShape = _useState8[0],\n      setCreateShape = _useState8[1];\n\n  var _useState9 = useState(React.createRef()),\n      _useState10 = _slicedToArray(_useState9, 2),\n      mapRef = _useState10[0],\n      setMapRef = _useState10[1];\n\n  var maxZoomConst = {\n    google: 20,\n    osm: 18\n  };\n\n  var _useState11 = useState(props.zoom),\n      _useState12 = _slicedToArray(_useState11, 2),\n      localZoom = _useState12[0],\n      setLocalZoom = _useState12[1];\n\n  var selectedTile = tiles === null || tiles === void 0 ? void 0 : tiles.split('_')[0]; // this to decide when to zoom on search place in searchbox or markers.\n\n  var _useState13 = useState(false),\n      _useState14 = _slicedToArray(_useState13, 2),\n      focusSearchPlace = _useState14[0],\n      setFocusSearchPlace = _useState14[1];\n\n  var _useState15 = useState({}),\n      _useState16 = _slicedToArray(_useState15, 2),\n      searchFieldAddressInfo = _useState16[0],\n      setSearchFieldAddressInfo = _useState16[1]; // create a legend model for marker layer\n\n\n  var _useState17 = useState(settingConfig === null || settingConfig === void 0 ? void 0 : (_settingConfig$Legend = settingConfig.Legends) === null || _settingConfig$Legend === void 0 ? void 0 : _settingConfig$Legend.option),\n      _useState18 = _slicedToArray(_useState17, 2),\n      legend = _useState18[0],\n      setLegend = _useState18[1]; // legends in setting will be array of object\n\n\n  var _useState19 = useState(convertArrayToObject(settingConfig === null || settingConfig === void 0 ? void 0 : (_settingConfig$Legend2 = settingConfig.Legends) === null || _settingConfig$Legend2 === void 0 ? void 0 : _settingConfig$Legend2.option)),\n      _useState20 = _slicedToArray(_useState19, 2),\n      legendModel = _useState20[0],\n      setLegendModel = _useState20[1]; // for settings needed configuration\n\n\n  var _useState21 = useState({\n    theme: theme,\n    // map theme\n    heatmap: heatmap,\n    // if heatmap or marker choice\n    tiles: tiles,\n    // of type tTiles\n    isOpenStreet: false,\n    poi: poi,\n    // point of intrest toggle\n    locationSearch: locationSearch,\n    // weather to show search or not\n    rulerControl: !!rulerControl,\n    // weather to show rular or not\n    circle: circle,\n    polygon: polygon,\n    traffic: !!traffic\n  }),\n      _useState22 = _slicedToArray(_useState21, 2),\n      configurableOption = _useState22[0],\n      setConfigurableOption = _useState22[1]; // on setting open modal and fade background\n\n\n  var _useState23 = useState(false),\n      _useState24 = _slicedToArray(_useState23, 2),\n      showModal = _useState24[0],\n      setShowModal = _useState24[1]; // this is to determine weather user searched through search input in map\n\n\n  var _useState25 = useState(false),\n      _useState26 = _slicedToArray(_useState25, 2),\n      isMapSearched = _useState26[0],\n      setIsMapSearched = _useState26[1];\n\n  var _useState27 = useState({\n    zoom: props.zoom,\n    center: props.center,\n    latLngBounds: props.latLngBounds\n  }),\n      _useState28 = _slicedToArray(_useState27, 2),\n      orientation = _useState28[0],\n      setOrientation = _useState28[1];\n\n  var _useState29 = useState(props.geocoding ? props.geocoding : {\n    permission: false,\n    position: props === null || props === void 0 ? void 0 : (_props$geocoding = props.geocoding) === null || _props$geocoding === void 0 ? void 0 : _props$geocoding.position,\n    searchText: props === null || props === void 0 ? void 0 : (_props$geocoding2 = props.geocoding) === null || _props$geocoding2 === void 0 ? void 0 : _props$geocoding2.searchText,\n    isSave: props === null || props === void 0 ? void 0 : (_props$geocoding3 = props.geocoding) === null || _props$geocoding3 === void 0 ? void 0 : _props$geocoding3.isSave\n  }),\n      _useState30 = _slicedToArray(_useState29, 2),\n      geocoding = _useState30[0],\n      setGeocoding = _useState30[1]; // marker drag or geocoding field change will create dragged pheonomenon,so set it true\n  // wherever user not physically writting search text is dagged pheonomenon\n\n\n  var _useState31 = useState(false),\n      _useState32 = _slicedToArray(_useState31, 2),\n      isMarkerDragged = _useState32[0],\n      setIsMarkerDragged = _useState32[1];\n\n  var geocodingContextValue = React.useMemo(function () {\n    return {\n      geocoding: geocoding\n    };\n  }, [geocoding]);\n\n  var _setMarkers = function setMarkers(legends) {\n    // current legends is not euqal to old legend then set false to serach place zooming  i.e. legends will zoom\n    if (JSON.stringify(legend) !== JSON.stringify(legends)) {\n      setFocusSearchPlace(false);\n    } // create a legend model for marker layer\n\n\n    setLegend && setLegend(deepCopy(legends)); // this is needed for settingconfig updation\n\n    setLegendModel(deepCopy(convertArrayToObject(legends))); // this is needed for marker legend model updation\n\n    var newMarker = markerConfig && setLegendMarkers(deepCopy(legends), deepCopy(markerConfig));\n    setmarkerConfig && setmarkerConfig(newMarker);\n  };\n\n  useEffect(function () {\n    setIsShowTileLayer(isShowMapTileLayer);\n  }, [isShowMapTileLayer]);\n  useEffect(function () {\n    var _props$settingConfig;\n\n    if ((props === null || props === void 0 ? void 0 : props.settingConfig) && (props === null || props === void 0 ? void 0 : (_props$settingConfig = props.settingConfig) === null || _props$settingConfig === void 0 ? void 0 : _props$settingConfig.Legends)) {\n      var newSettingConfig = deepCopy(settingConfig); // change setting on the basis of new marker legends\n\n      newSettingConfig.Legends.option = legend;\n      setSettingConfig(newSettingConfig);\n    }\n  }, [legend]);\n  useEffect(function () {\n    if (props === null || props === void 0 ? void 0 : props.settingConfig) {\n      setSettingConfig(deepCopy(props === null || props === void 0 ? void 0 : props.settingConfig));\n      setOrientation(_objectSpread(_objectSpread({}, orientation), {}, {\n        zoom: props.zoom\n      }));\n    }\n  }, [props === null || props === void 0 ? void 0 : props.settingConfig]);\n  useEffect(function () {\n    var _props$geocoding4, _props$geocoding5, _props$geocoding6, _props$geocoding6$pos, _geocoding$position, _props$geocoding7, _props$geocoding7$pos, _geocoding$position2;\n\n    if ((props === null || props === void 0 ? void 0 : (_props$geocoding4 = props.geocoding) === null || _props$geocoding4 === void 0 ? void 0 : _props$geocoding4.permission) && (props === null || props === void 0 ? void 0 : (_props$geocoding5 = props.geocoding) === null || _props$geocoding5 === void 0 ? void 0 : _props$geocoding5.position) && (JSON.stringify(props === null || props === void 0 ? void 0 : (_props$geocoding6 = props.geocoding) === null || _props$geocoding6 === void 0 ? void 0 : (_props$geocoding6$pos = _props$geocoding6.position) === null || _props$geocoding6$pos === void 0 ? void 0 : _props$geocoding6$pos[0]) !== JSON.stringify(geocoding === null || geocoding === void 0 ? void 0 : (_geocoding$position = geocoding.position) === null || _geocoding$position === void 0 ? void 0 : _geocoding$position[0]) || JSON.stringify(props === null || props === void 0 ? void 0 : (_props$geocoding7 = props.geocoding) === null || _props$geocoding7 === void 0 ? void 0 : (_props$geocoding7$pos = _props$geocoding7.position) === null || _props$geocoding7$pos === void 0 ? void 0 : _props$geocoding7$pos[1]) !== JSON.stringify(geocoding === null || geocoding === void 0 ? void 0 : (_geocoding$position2 = geocoding.position) === null || _geocoding$position2 === void 0 ? void 0 : _geocoding$position2[1]))) {\n      setGeocoding(function (prevValues) {\n        var _props$geocoding8, _props$geocoding8$pos, _props$geocoding9, _props$geocoding9$pos;\n\n        return _objectSpread(_objectSpread({}, prevValues), {}, {\n          position: [Number(props === null || props === void 0 ? void 0 : (_props$geocoding8 = props.geocoding) === null || _props$geocoding8 === void 0 ? void 0 : (_props$geocoding8$pos = _props$geocoding8.position) === null || _props$geocoding8$pos === void 0 ? void 0 : _props$geocoding8$pos[0]), Number(props === null || props === void 0 ? void 0 : (_props$geocoding9 = props.geocoding) === null || _props$geocoding9 === void 0 ? void 0 : (_props$geocoding9$pos = _props$geocoding9.position) === null || _props$geocoding9$pos === void 0 ? void 0 : _props$geocoding9$pos[1])]\n        });\n      }); // beacuse search/position coming from props and once something in search input we need to focus the field\n\n      setFocusSearchPlace(true);\n    }\n  }, [props === null || props === void 0 ? void 0 : (_props$geocoding10 = props.geocoding) === null || _props$geocoding10 === void 0 ? void 0 : _props$geocoding10.position]);\n  useEffect(function () {\n    var _props$geocoding11, _props$geocoding12, _props$geocoding13;\n\n    if ((props === null || props === void 0 ? void 0 : (_props$geocoding11 = props.geocoding) === null || _props$geocoding11 === void 0 ? void 0 : _props$geocoding11.permission) && (props === null || props === void 0 ? void 0 : (_props$geocoding12 = props.geocoding) === null || _props$geocoding12 === void 0 ? void 0 : _props$geocoding12.customFields) && (props === null || props === void 0 ? void 0 : (_props$geocoding13 = props.geocoding) === null || _props$geocoding13 === void 0 ? void 0 : _props$geocoding13.customFields.length) > 0) {\n      var _props$geocoding14;\n\n      if (!_.isEqual(props === null || props === void 0 ? void 0 : (_props$geocoding14 = props.geocoding) === null || _props$geocoding14 === void 0 ? void 0 : _props$geocoding14.customFields, geocoding === null || geocoding === void 0 ? void 0 : geocoding.customFields)) {\n        setGeocoding(function (prevValues) {\n          var _props$geocoding15;\n\n          return _objectSpread(_objectSpread({}, prevValues), {}, {\n            customFields: _toConsumableArray(props === null || props === void 0 ? void 0 : (_props$geocoding15 = props.geocoding) === null || _props$geocoding15 === void 0 ? void 0 : _props$geocoding15.customFields)\n          });\n        });\n      }\n    }\n  }, [props === null || props === void 0 ? void 0 : (_props$geocoding16 = props.geocoding) === null || _props$geocoding16 === void 0 ? void 0 : _props$geocoding16.customFields]);\n  useEffect(function () {\n    var _props$geocoding17, _props$geocoding18;\n\n    if ((props === null || props === void 0 ? void 0 : (_props$geocoding17 = props.geocoding) === null || _props$geocoding17 === void 0 ? void 0 : _props$geocoding17.permission) && (props === null || props === void 0 ? void 0 : (_props$geocoding18 = props.geocoding) === null || _props$geocoding18 === void 0 ? void 0 : _props$geocoding18.searchText) // props?.geocoding?.searchText !== geocoding?.searchText\n    ) {\n        var _props$geocoding19;\n\n        setIsMapSearched(false);\n        setGeocoding(_objectSpread(_objectSpread({}, geocoding), {}, {\n          searchText: props === null || props === void 0 ? void 0 : (_props$geocoding19 = props.geocoding) === null || _props$geocoding19 === void 0 ? void 0 : _props$geocoding19.searchText\n        })); // beacuse search coming from props and once something in search input we need to focus the field\n\n        setFocusSearchPlace(true);\n      }\n  }, [props === null || props === void 0 ? void 0 : (_props$geocoding20 = props.geocoding) === null || _props$geocoding20 === void 0 ? void 0 : _props$geocoding20.searchText]);\n  useEffect(function () {\n    setConfigurableOption(_objectSpread(_objectSpread({}, configurableOption), {}, {\n      heatmap: heatmap\n    }));\n  }, [heatmap]);\n  useEffect(function () {\n    setConfigurableOption(function (prevOptions) {\n      return _objectSpread(_objectSpread({}, prevOptions), {}, {\n        polygon: polygon\n      });\n    });\n  }, [polygon, polygon === null || polygon === void 0 ? void 0 : polygon.popupRef]);\n  useEffect(function () {\n    setConfigurableOption(function (prevOptions) {\n      return _objectSpread(_objectSpread({}, prevOptions), {}, {\n        circle: circle\n      });\n    });\n  }, [circle]);\n  useEffect(function () {\n    var _configurableOption$h;\n\n    if (configurableOption === null || configurableOption === void 0 ? void 0 : (_configurableOption$h = configurableOption.heatmap) === null || _configurableOption$h === void 0 ? void 0 : _configurableOption$h.permission) {// if heatmap true then hide makers\n      //  setmarkerConfig({ ...markerConfig, permission: false })\n    } else {\n      if ((configurableOption === null || configurableOption === void 0 ? void 0 : configurableOption.heatmap) && markerConfig) {\n        // if heatmap is false then make makers true\n        var newConfig = Object.assign({}, configurableOption);\n        newConfig.heatmap.permission = false;\n        setConfigurableOption(newConfig);\n        setmarkerConfig(_objectSpread(_objectSpread({}, markerConfig), {}, {\n          permission: true\n        }));\n      }\n    }\n  }, [configurableOption === null || configurableOption === void 0 ? void 0 : (_configurableOption$h2 = configurableOption.heatmap) === null || _configurableOption$h2 === void 0 ? void 0 : _configurableOption$h2.permission]);\n  useEffect(function () {\n    var _newSettig$Miscellane, _newSettig$Miscellane2;\n\n    // change in config\n    setConfigurableOption(_objectSpread(_objectSpread({}, configurableOption), {}, {\n      locationSearch: !!props.locationSearch,\n      poi: props.poi,\n      rulerControl: !!props.rulerControl,\n      tiles: tiles\n    }));\n    var newSettig = deepCopy(settingConfig); // change in setting data structure\n\n    newSettig === null || newSettig === void 0 ? void 0 : (_newSettig$Miscellane = newSettig.Miscellaneous) === null || _newSettig$Miscellane === void 0 ? void 0 : (_newSettig$Miscellane2 = _newSettig$Miscellane.option) === null || _newSettig$Miscellane2 === void 0 ? void 0 : _newSettig$Miscellane2.find(function (entry) {\n      if (entry.name === 'Point of interest') {\n        entry.selected = !!poi;\n      } else if (entry.name === 'Traffic') {\n        entry.selected = !!traffic;\n      } else if (entry.name === 'Ruler Control') {\n        entry.selected = !!rulerControl;\n      } else if (entry.name === 'Location Search') {\n        entry.selected = !!locationSearch;\n      }\n    });\n  }, [locationSearch, poi, rulerControl, traffic, tiles]);\n  useEffect(function () {\n    setOrientation(_objectSpread(_objectSpread({}, orientation), {}, {\n      zoom: props.zoom\n    })); // render it on change in setting, legend change which will need for mapping marker layer and setting\n    // markerconfig updation on change in legends on map or setting  and toggled setting legend into legendmodel required for marker layer\n\n    updateMapWithSettings(settingConfig, configurableOption, setConfigurableOption, setSettingConfig, markerConfig, setmarkerConfig, heatmap, geocoding, setGeocoding, locationSearch);\n  }, [settingConfig, legend, legendModel]);\n  useEffect(function () {\n    // if rows data selected from list view is not equal to markerConfig means we trigger list selection then make focust serach place false\n    if (JSON.stringify(markers) !== JSON.stringify(markerConfig)) {\n      setFocusSearchPlace(false);\n    } // update the map state once the input markers are changed\n\n\n    setmarkerConfig(markers);\n  }, [markers]);\n  useEffect(function () {\n    var _mapRef$current, _mapRef$current$conte;\n\n    setMapRef(mapRef);\n    setMapProps === null || setMapProps === void 0 ? void 0 : setMapProps(mapRef.current.leafletElement);\n    var contextValueMap = mapRef === null || mapRef === void 0 ? void 0 : (_mapRef$current = mapRef.current) === null || _mapRef$current === void 0 ? void 0 : (_mapRef$current$conte = _mapRef$current.contextValue) === null || _mapRef$current$conte === void 0 ? void 0 : _mapRef$current$conte.map; // as we get map inside map we are moving flying bound functionality here\n\n    if (contextValueMap) {\n      var _configurableOption$p;\n\n      contextValueMap === null || contextValueMap === void 0 ? void 0 : contextValueMap.invalidateSize(true);\n      contextValueMap === null || contextValueMap === void 0 ? void 0 : contextValueMap.doubleClickZoom.enable();\n      contextValueMap === null || contextValueMap === void 0 ? void 0 : contextValueMap.boxZoom.enable();\n      contextValueMap === null || contextValueMap === void 0 ? void 0 : contextValueMap.scrollWheelZoom.enable();\n      contextValueMap === null || contextValueMap === void 0 ? void 0 : contextValueMap.dragging.enable();\n\n      if ((_configurableOption$p = configurableOption.polygon) === null || _configurableOption$p === void 0 ? void 0 : _configurableOption$p.permission) {\n        var _Object$values;\n\n        var bounds = new LatLngBounds([]);\n        var boundsData = configurableOption.polygon.editLayer ? configurableOption.polygon.editLayer.data : configurableOption.polygon.data;\n        boundsData && boundsData.length && boundsData.map(function (poly) {\n          var latllnf = poly.polygonCoordinates.map(function (lt) {\n            return [lt.latitude, lt.longitude];\n          });\n          var Latlng = new LatLngBounds(latllnf);\n          bounds.extend(Latlng);\n        });\n\n        if ((_Object$values = Object.values(bounds)) === null || _Object$values === void 0 ? void 0 : _Object$values.length) {\n          contextValueMap === null || contextValueMap === void 0 ? void 0 : contextValueMap.fitBounds(bounds, {\n            padding: LL.point(100, 100)\n          });\n        }\n      }\n    }\n  }, [mapRef]);\n  useEffect(function () {\n    if (searchFieldAddressInfo && Object.keys(searchFieldAddressInfo).length > 0 && (searchFieldAddressInfo === null || searchFieldAddressInfo === void 0 ? void 0 : searchFieldAddressInfo.position)) {\n      // while searching this keeps getting trigger so make sure whatevr searching field and (geocoding api)response searchfield should have same value\n      // even above condition not filling and user dragging/changing geocode field then as well send that info outside\n      // if (\n      //   geocoding.searchText === searchFieldAddressInfo.searchText ||\n      //   isMarkerDragged\n      // ) {\n      // dont touch this code, whenever we address from locationSelect(geocoding done in useEffect),this use effect will get called\n      // isMapSearched : true - whenevr user search through input in map search places it will go true\n      sendLocationOutside && sendLocationOutside(_objectSpread(_objectSpread({}, searchFieldAddressInfo), {}, {\n        isPropSearch: isMapSearched\n      })); // }\n    }\n  }, [searchFieldAddressInfo]);\n\n  var updateGeocoding = function updateGeocoding(position, searchText, bounds, recentZoom, radius) {\n    var updatedCustomFields = [];\n\n    if ((geocoding === null || geocoding === void 0 ? void 0 : geocoding.customFields) && (geocoding === null || geocoding === void 0 ? void 0 : geocoding.customFields.length) > 0) {\n      updatedCustomFields = geocoding === null || geocoding === void 0 ? void 0 : geocoding.customFields.map(function (obj) {\n        return obj.name === \"radius\" ? _objectSpread(_objectSpread({}, obj), {}, {\n          value: radius !== null && radius !== void 0 ? radius : 0\n        }) : _objectSpread({}, obj);\n      });\n    }\n\n    var updatedGeocoding = _objectSpread(_objectSpread({}, geocoding), {}, {\n      position: position,\n      searchText: searchText,\n      customFields: _toConsumableArray(updatedCustomFields)\n    });\n\n    setGeocoding(_objectSpread({}, updatedGeocoding));\n    setLocationSearched === null || setLocationSearched === void 0 ? void 0 : setLocationSearched(searchText);\n\n    if (!recentZoom && typeof recentZoom === \"undefined\") {\n      setLocalZoom(14);\n    }\n\n    setOrientation(_objectSpread(_objectSpread({}, orientation), {}, {\n      center: position,\n      latLngBounds: bounds,\n      zoom: recentZoom || 14\n    }));\n  }; // whenever any location is selected or updated, this function is called and focus place variable to true\n\n\n  var onLocationSelect = function onLocationSelect(position, searchText, isMarkerDragged, bounds, _zoom, radius) // isCustomSearch?: boolean\n  {\n    // if marker is not dragged or geocoding fields got changed and automatically got search value then use whatevr coming from props as a searchtext\n    // but use position caluclated in locationSeach which will come in callback args\n    // isMapSearched : false meaning search text coming from prop\n    if (_zoom) setLocalZoom(_zoom);\n\n    if ((geocoding === null || geocoding === void 0 ? void 0 : geocoding.searchText) !== searchText && !isMarkerDragged && !isMapSearched) {\n      updateGeocoding([Number(position === null || position === void 0 ? void 0 : position[0]), Number(position === null || position === void 0 ? void 0 : position[1])], geocoding === null || geocoding === void 0 ? void 0 : geocoding.searchText, bounds, _zoom, radius);\n    } else {\n      updateGeocoding(position, searchText, bounds, _zoom, radius);\n    }\n\n    setFocusSearchPlace(true);\n  }; // on LL popup close\n\n\n  var onhandlePopupClose = function onhandlePopupClose(_e) {\n    handleClosePopup && handleClosePopup(polygon === null || polygon === void 0 ? void 0 : polygon.popupRef);\n  };\n\n  return /*#__PURE__*/React.createElement(GeocodingContext.Provider, {\n    value: geocodingContextValue,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 414,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(LeafletStyles, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 416,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(StyledMap, {\n    createShape: createShape,\n    isOpenStreet: configurableOption.isOpenStreet // show google sign at bottom when google map selected\n    ,\n    showModal: showModal,\n    onMouseDown: function onMouseDown(e) {\n      var _e$target, _e$target2, _e$target3, _e$target3$className, _e$target4;\n\n      var isLefaletClassName = (e === null || e === void 0 ? void 0 : (_e$target = e.target) === null || _e$target === void 0 ? void 0 : _e$target.className) && typeof (e === null || e === void 0 ? void 0 : (_e$target2 = e.target) === null || _e$target2 === void 0 ? void 0 : _e$target2.className) === 'string' && (e === null || e === void 0 ? void 0 : (_e$target3 = e.target) === null || _e$target3 === void 0 ? void 0 : (_e$target3$className = _e$target3.className) === null || _e$target3$className === void 0 ? void 0 : _e$target3$className.includes('leaflet'));\n\n      if (isLefaletClassName || (e === null || e === void 0 ? void 0 : (_e$target4 = e.target) === null || _e$target4 === void 0 ? void 0 : _e$target4.id) === props.id) {\n        var _mapRef$current2, _mapRef$current2$cont;\n\n        setShowModal(false); // as we get map inside map we are moving flying bound functionality here\n\n        var contextValueMap = mapRef === null || mapRef === void 0 ? void 0 : (_mapRef$current2 = mapRef.current) === null || _mapRef$current2 === void 0 ? void 0 : (_mapRef$current2$cont = _mapRef$current2.contextValue) === null || _mapRef$current2$cont === void 0 ? void 0 : _mapRef$current2$cont.map;\n        contextValueMap === null || contextValueMap === void 0 ? void 0 : contextValueMap.invalidateSize(true);\n        contextValueMap === null || contextValueMap === void 0 ? void 0 : contextValueMap.doubleClickZoom.enable();\n        contextValueMap === null || contextValueMap === void 0 ? void 0 : contextValueMap.boxZoom.enable();\n        contextValueMap === null || contextValueMap === void 0 ? void 0 : contextValueMap.scrollWheelZoom.enable();\n        contextValueMap === null || contextValueMap === void 0 ? void 0 : contextValueMap.dragging.enable();\n      }\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 420,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Map, {\n    ref: mapRef,\n    id: props.id,\n    className: 'leafletMap ' + props.classes,\n    zoom: orientation.zoom || props.zoom || ZOOM_500M,\n    center: orientation.center || props.center,\n    style: {\n      height: props.height ? props.height : '100%',\n      width: props.width ? props.width : '100%',\n      background: showModal ? '#333' : configurableOption.theme === 'dark' && !configurableOption.isOpenStreet ? '#18273c' : '#ebe9e4'\n    },\n    maxNativeZoom: selectedTile === 'google' ? 21 : 19 // this to stop dancing map\n    ,\n    maxZoom: maxZoomConst[selectedTile || 'google'] || 18 // this is to stop blacking out on map\n    ,\n    scrollWheelZoom: false,\n    zoomControl: false,\n    animate: true,\n    useFlyTo: useFlyTo,\n    duration: 1,\n    worldCopyJump: false // double copy of map restict\n    ,\n    attributionControl: false // leaflet text in bottom hidding\n    ,\n    onPopupClose: onhandlePopupClose,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 442,\n      columnNumber: 9\n    }\n  }, (props === null || props === void 0 ? void 0 : props.settingConfig) && /*#__PURE__*/React.createElement(SettingBox, {\n    onChange: function onChange(settingConfigs) {\n      return setSettingConfig(settingConfigs);\n    },\n    isOpenStreet: configurableOption.isOpenStreet,\n    settingOption: settingConfig,\n    showModal: showModal,\n    handleShowModal: function handleShowModal(showModal) {\n      return setShowModal(showModal);\n    },\n    setMarkers: function setMarkers(legend) {\n      return _setMarkers(legend);\n    },\n    heatMap: !!(configurableOption === null || configurableOption === void 0 ? void 0 : (_configurableOption$h3 = configurableOption.heatmap) === null || _configurableOption$h3 === void 0 ? void 0 : _configurableOption$h3.permission),\n    settingButtonTitle: props.settingButtonTitle,\n    onSettingChange: props === null || props === void 0 ? void 0 : props.onSettingChange,\n    legend: legend,\n    setFocusSearchPlace: setFocusSearchPlace,\n    geocoding: geocoding,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 471,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(LeafletGeocodingLayer, Object.assign({}, props, {\n    // position={[props.geocoding?.lat, props.geocoding?.lng]}\n    geocoding: geocoding,\n    onLocationSelect: onLocationSelect,\n    settingConfig: settingConfig,\n    focusSearchPlace: focusSearchPlace,\n    setIsMarkerDragged: setIsMarkerDragged,\n    setIsMapSearched: setIsMapSearched,\n    zoomLGC: localZoom,\n    theMap: mapRef,\n    getLatLong: getLatLong,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 491,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(LeafletControlLayer, {\n    zoomControl: zoomControl,\n    google: props.google,\n    locationSearch: configurableOption.locationSearch,\n    onLocationSelect: onLocationSelect,\n    focusSearchPlace: focusSearchPlace,\n    setIsMarkerDragged: setIsMarkerDragged,\n    isMarkerDragged: isMarkerDragged,\n    setSearchFieldAddressInfo: setSearchFieldAddressInfo,\n    setIsMapSearched: setIsMapSearched,\n    isMapSearched: isMapSearched,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 506,\n      columnNumber: 11\n    }\n  }), props.google && _isShowTileLayer && /*#__PURE__*/React.createElement(LeafletTileLayer, {\n    googleApiKey: props.googleApiKey,\n    tiles: configurableOption.tiles,\n    poi: !!configurableOption.poi,\n    theme: configurableOption.theme,\n    orientation: orientation,\n    traffic: configurableOption.traffic,\n    rulerControl: !!configurableOption.rulerControl,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 520,\n      columnNumber: 13\n    }\n  }), ((markerConfig === null || markerConfig === void 0 ? void 0 : markerConfig.permission) || (configurableOption === null || configurableOption === void 0 ? void 0 : (_configurableOption$h4 = configurableOption.heatmap) === null || _configurableOption$h4 === void 0 ? void 0 : _configurableOption$h4.permission)) && !((_props$trips = props.trips) === null || _props$trips === void 0 ? void 0 : _props$trips.permission) && /*#__PURE__*/React.createElement(LeafletMarkerLayer, {\n    iconsRef: props.iconsRef,\n    popupRef: props.popupRef,\n    marker: markerConfig,\n    google: props.google,\n    geocoding: geocoding,\n    updateMarkers: function updateMarkers(legends) {\n      setFocusSearchPlace(false); // legend change has to be saved ,so that we can update it into settings\n\n      setLegend && setLegend(legends);\n      setLegendModel && setLegendModel(convertArrayToObject(legends)); // legends gets changed in marker layer, we update our marker layer based on new legends\n\n      var newMarker = markerConfig && setLegendMarkers(deepCopy(legends), deepCopy(markerConfig));\n      setmarkerConfig && setmarkerConfig(newMarker);\n    },\n    showModal: showModal,\n    legendModel: legendModel,\n    focusMarkerId: props.focusMarkerId,\n    heatMap: !!(configurableOption === null || configurableOption === void 0 ? void 0 : (_configurableOption$h5 = configurableOption.heatmap) === null || _configurableOption$h5 === void 0 ? void 0 : _configurableOption$h5.permission),\n    focusSearchPlace: focusSearchPlace,\n    showLegendWrapper: showLegendWrapper,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 535,\n      columnNumber: 15\n    }\n  }), (configurableOption === null || configurableOption === void 0 ? void 0 : (_configurableOption$h6 = configurableOption.heatmap) === null || _configurableOption$h6 === void 0 ? void 0 : _configurableOption$h6.permission) && /*#__PURE__*/React.createElement(LeafletHeatLayer, {\n    legend: legend,\n    heatmap: configurableOption === null || configurableOption === void 0 ? void 0 : configurableOption.heatmap,\n    heatMapData: heatmap === null || heatmap === void 0 ? void 0 : heatmap.data,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 566,\n      columnNumber: 13\n    }\n  }), ((_props$trips2 = props.trips) === null || _props$trips2 === void 0 ? void 0 : _props$trips2.permission) && (((_props$trips3 = props.trips) === null || _props$trips3 === void 0 ? void 0 : (_props$trips3$data = _props$trips3.data) === null || _props$trips3$data === void 0 ? void 0 : _props$trips3$data.length) > 0 && !(props === null || props === void 0 ? void 0 : (_props$trips4 = props.trips) === null || _props$trips4 === void 0 ? void 0 : (_props$trips4$noSelec = _props$trips4.noSelectedRows) === null || _props$trips4$noSelec === void 0 ? void 0 : _props$trips4$noSelec.permission) ? /*#__PURE__*/React.createElement(LeafletTripsLayer, Object.assign({}, props, configurableOption, {\n    showModal: showModal,\n    heatMap: !!configurableOption.heatmap,\n    focusSearchPlace: focusSearchPlace,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 576,\n      columnNumber: 15\n    }\n  })) : (props === null || props === void 0 ? void 0 : (_props$trips5 = props.trips) === null || _props$trips5 === void 0 ? void 0 : (_props$trips5$noSelec = _props$trips5.noSelectedRows) === null || _props$trips5$noSelec === void 0 ? void 0 : _props$trips5$noSelec.permission) ? /*#__PURE__*/React.createElement(LeafletOverlay, {\n    title: props === null || props === void 0 ? void 0 : (_props$trips6 = props.trips) === null || _props$trips6 === void 0 ? void 0 : (_props$trips6$noSelec = _props$trips6.noSelectedRows) === null || _props$trips6$noSelec === void 0 ? void 0 : _props$trips6$noSelec.title,\n    showArrow: props === null || props === void 0 ? void 0 : (_props$trips7 = props.trips) === null || _props$trips7 === void 0 ? void 0 : (_props$trips7$noSelec = _props$trips7.noSelectedRows) === null || _props$trips7$noSelec === void 0 ? void 0 : _props$trips7$noSelec.showArrow,\n    showCloseIcon: props === null || props === void 0 ? void 0 : (_props$trips8 = props.trips) === null || _props$trips8 === void 0 ? void 0 : (_props$trips8$noSelec = _props$trips8.noSelectedRows) === null || _props$trips8$noSelec === void 0 ? void 0 : _props$trips8$noSelec.showCloseIcon,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 584,\n      columnNumber: 15\n    }\n  }) : null), ((_props$tracking = props.tracking) === null || _props$tracking === void 0 ? void 0 : _props$tracking.permission) && /*#__PURE__*/React.createElement(LeafletTrackingLayer, Object.assign({}, props, configurableOption, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 592,\n      columnNumber: 13\n    }\n  })), ((_configurableOption$p2 = configurableOption.polygon) === null || _configurableOption$p2 === void 0 ? void 0 : _configurableOption$p2.permission) && /*#__PURE__*/React.createElement(LeafletPolygonLayer, {\n    polygon: configurableOption.polygon,\n    popupRef: popupRef // object to map popupRef\n    ,\n    google: props.google,\n    createShape: createShape,\n    setCreateShape: setCreateShape,\n    editPopUpComponent: editPopUpComponent,\n    onEdit: onEdit,\n    popupCustomComponent: popupCustomComponent,\n    setFeatureGroupProps: setFeatureGroupProps,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 596,\n      columnNumber: 13\n    }\n  }), ((_configurableOption$c = configurableOption.circle) === null || _configurableOption$c === void 0 ? void 0 : _configurableOption$c.permission) && /*#__PURE__*/React.createElement(LeafletCircleLayer, {\n    circle: configurableOption.circle // circle with -data,permission,tooltipKey,popupRefType\n    ,\n    popupRef: popupRef // object to map popupRef\n    ,\n    google: props.google // google, for geocoder location find\n    ,\n    createShape: createShape,\n    setCreateShape: setCreateShape,\n    popupCustomComponent: popupCustomComponent,\n    editPopUpComponent: editPopUpComponent,\n    onEdit: onEdit,\n    setFeatureGroupProps: setFeatureGroupProps,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 609,\n      columnNumber: 13\n    }\n  }), allowCustomControl && /*#__PURE__*/React.createElement(CustomControl, Object.assign({}, customControlProps, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 621,\n      columnNumber: 37\n    }\n  })))));\n};\n\nvar LeafletMap = GoogleApiWrapper(function (props) {\n  return {\n    apiKey: props.googleApiKey\n  };\n})(LeafletMapWrapper); // default props for the leaflet map\n\nLeafletMap.defaultProps = {\n  height: '400px',\n  width: '700px',\n  theme: 'light',\n  poi: false,\n  center: [51.0, 19.0],\n  zoom: 4,\n  zoomControl: true,\n  locationSearch: true,\n  tiles: 'google_roadmap'\n};\nexport default LeafletMap;","map":{"version":3,"sources":["/Users/farhanansari/Code/ui-library/src/components/atoms/Map/index.tsx"],"names":["GoogleApiWrapper","React","useEffect","useState","createContext","Map","LeafletStyles","SettingBox","Settings","ZOOM_500M","convertArrayToObject","deepCopy","setLegendMarkers","updateMapWithSettings","LeafletCircleLayer","LeafletControlLayer","LeafletGeocodingLayer","LeafletHeatLayer","LeafletMarkerLayer","LeafletPolygonLayer","LeafletTileLayer","LeafletTrackingLayer","LeafletTripsLayer","LeafletOverlay","StyledMap","LatLngBounds","CustomControl","LL","_","require","GeocodingContext","LeafletMapWrapper","props","markers","theme","heatmap","tiles","poi","popupRef","onEdit","editPopUpComponent","popupCustomComponent","circle","polygon","locationSearch","rulerControl","traffic","zoomControl","sendLocationOutside","isShowMapTileLayer","handleClosePopup","showLegendWrapper","useFlyTo","allowCustomControl","customControlProps","setMapProps","setFeatureGroupProps","setLocationSearched","getLatLong","markerConfig","setmarkerConfig","settingConfig","setSettingConfig","_isShowTileLayer","setIsShowTileLayer","createShape","setCreateShape","createRef","mapRef","setMapRef","maxZoomConst","google","osm","zoom","localZoom","setLocalZoom","selectedTile","split","focusSearchPlace","setFocusSearchPlace","searchFieldAddressInfo","setSearchFieldAddressInfo","Legends","option","legend","setLegend","legendModel","setLegendModel","isOpenStreet","configurableOption","setConfigurableOption","showModal","setShowModal","isMapSearched","setIsMapSearched","center","latLngBounds","orientation","setOrientation","geocoding","permission","position","searchText","isSave","setGeocoding","isMarkerDragged","setIsMarkerDragged","geocodingContextValue","useMemo","setMarkers","legends","JSON","stringify","newMarker","newSettingConfig","prevValues","Number","customFields","length","isEqual","prevOptions","newConfig","Object","assign","newSettig","Miscellaneous","find","entry","name","selected","current","leafletElement","contextValueMap","contextValue","map","invalidateSize","doubleClickZoom","enable","boxZoom","scrollWheelZoom","dragging","bounds","boundsData","editLayer","data","poly","latllnf","polygonCoordinates","lt","latitude","longitude","Latlng","extend","values","fitBounds","padding","point","keys","isPropSearch","updateGeocoding","recentZoom","radius","updatedCustomFields","obj","value","updatedGeocoding","onLocationSelect","_zoom","onhandlePopupClose","_e","e","isLefaletClassName","target","className","includes","id","classes","height","width","background","settingConfigs","settingButtonTitle","onSettingChange","googleApiKey","trips","iconsRef","focusMarkerId","noSelectedRows","title","showArrow","showCloseIcon","tracking","LeafletMap","apiKey","defaultProps"],"mappings":"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","sourcesContent":["// The base component - atom - of the leaflet map\n\nimport { GoogleApiWrapper } from 'google-maps-react'\nimport React, { useEffect, useState, createContext } from 'react'\nimport { Map } from 'react-leaflet'\nimport { LeafletStyles } from 'styled-leaflet'\nimport SettingBox from '../SettingBox'\nimport Settings from '../SettingBox/data'\nimport { ZOOM_500M } from './constants/googleIntegration.constants'\nimport {\n  convertArrayToObject,\n  deepCopy,\n  setLegendMarkers,\n  updateMapWithSettings\n} from './helperMethods'\nimport ILeafletMapProps, {\n  ICustomField,\n  ILeafletMapPropsLite,\n  tGeocoding,\n  tSearchFieldAddressInfo\n} from './interfaces.d'\nimport LeafletCircleLayer from './layers/LeafletCircleLayer'\nimport LeafletControlLayer from './layers/LeafletControlLayer'\nimport LeafletGeocodingLayer from './layers/LeafletGeocodingLayer'\nimport LeafletHeatLayer from './layers/LeafletHeatLayer'\nimport LeafletMarkerLayer from './layers/LeafletMarkerLayer'\nimport LeafletPolygonLayer from './layers/LeafletPolygonLayer'\nimport LeafletTileLayer from './layers/LeafletTileLayer'\nimport LeafletTrackingLayer from './layers/LeafletTrackingLayer'\nimport LeafletTripsLayer from './layers/LeafletTripsLayer'\nimport { LeafletOverlay } from './utils/LeafletOverlay'\nimport { StyledMap } from './StyledMap'\nimport { tTheme, tTiles } from './types.d'\nimport { LatLngBounds } from 'leaflet'\nimport CustomControl from './SubComponent/CustomControl'\nimport LL from 'leaflet'\nconst _ = require('lodash');\nexport interface IGeocodingContext {\n  geocoding?: tGeocoding\n}\nexport const GeocodingContext = createContext<IGeocodingContext>({})\n\nconst LeafletMapWrapper = (props: ILeafletMapProps) => {\n  const {\n    markers,\n    theme,\n    heatmap,\n    tiles,\n    poi,\n    popupRef,\n    onEdit,\n    editPopUpComponent,\n    popupCustomComponent,\n    circle,\n    polygon,\n    locationSearch = true,\n    rulerControl,\n    traffic,\n    zoomControl = true,\n    sendLocationOutside,\n    isShowMapTileLayer = true,\n    handleClosePopup,\n    showLegendWrapper = true,\n    useFlyTo = true,\n    allowCustomControl,\n    customControlProps,\n    setMapProps,\n    setFeatureGroupProps,\n    setLocationSearched,\n    getLatLong = () => {}\n  } = props\n  const [markerConfig, setmarkerConfig] = useState(markers)\n  const [settingConfig, setSettingConfig] = useState(\n    props?.settingConfig || Settings\n  )\n  const [_isShowTileLayer, setIsShowTileLayer] = useState<boolean>(\n    isShowMapTileLayer\n  )\n  const [createShape, setCreateShape] = useState(false)\n  const [mapRef, setMapRef] = useState<any>(React.createRef())\n  const maxZoomConst = { google: 20, osm: 18 }\n  const [localZoom, setLocalZoom] = useState(props.zoom)\n  const selectedTile = tiles?.split('_')[0]\n  // this to decide when to zoom on search place in searchbox or markers.\n  const [focusSearchPlace, setFocusSearchPlace] = useState<boolean>(false)\n  const [searchFieldAddressInfo, setSearchFieldAddressInfo] = useState<\n    tSearchFieldAddressInfo | Partial<tSearchFieldAddressInfo>\n  >({})\n\n  // create a legend model for marker layer\n  const [legend, setLegend] = useState(settingConfig?.Legends?.option)\n\n  // legends in setting will be array of object\n  const [legendModel, setLegendModel] = useState(\n    convertArrayToObject(settingConfig?.Legends?.option)\n  )\n  // for settings needed configuration\n  const [configurableOption, setConfigurableOption] = useState({\n    theme: theme, // map theme\n    heatmap: heatmap, // if heatmap or marker choice\n    tiles: tiles, // of type tTiles\n    isOpenStreet: false,\n    poi: poi, // point of intrest toggle\n    locationSearch: locationSearch, // weather to show search or not\n    rulerControl: !!rulerControl, // weather to show rular or not\n    circle,\n    polygon,\n    traffic: !!traffic\n  })\n\n  // on setting open modal and fade background\n  const [showModal, setShowModal] = useState(false)\n\n  // this is to determine weather user searched through search input in map\n  const [isMapSearched, setIsMapSearched] = useState<boolean>(false)\n\n  const [orientation, setOrientation] = useState({\n    zoom: props.zoom,\n    center: props.center,\n    latLngBounds: props.latLngBounds\n  })\n\n  const [geocoding, setGeocoding] = useState<tGeocoding>(\n    props.geocoding\n      ? props.geocoding\n      : {\n          permission: false,\n          position: props?.geocoding?.position,\n          searchText: props?.geocoding?.searchText,\n          isSave: props?.geocoding?.isSave\n        }\n  )\n  // marker drag or geocoding field change will create dragged pheonomenon,so set it true\n  // wherever user not physically writting search text is dagged pheonomenon\n  const [isMarkerDragged, setIsMarkerDragged] = useState<boolean>(false)\n\n  const geocodingContextValue = React.useMemo(() => ({ geocoding }), [\n    geocoding\n  ])\n  const setMarkers = (legends: any) => {\n    // current legends is not euqal to old legend then set false to serach place zooming  i.e. legends will zoom\n    if (JSON.stringify(legend) !== JSON.stringify(legends)) {\n      setFocusSearchPlace(false)\n    }\n    // create a legend model for marker layer\n    setLegend && setLegend(deepCopy(legends)) // this is needed for settingconfig updation\n    setLegendModel(deepCopy(convertArrayToObject(legends))) // this is needed for marker legend model updation\n\n    const newMarker =\n      markerConfig &&\n      setLegendMarkers(deepCopy(legends), deepCopy(markerConfig))\n\n    setmarkerConfig && setmarkerConfig(newMarker)\n  }\n  useEffect(() => {\n    setIsShowTileLayer(isShowMapTileLayer)\n  }, [isShowMapTileLayer])\n\n  useEffect(() => {\n    if (props?.settingConfig && props?.settingConfig?.Legends) {\n      const newSettingConfig = deepCopy(settingConfig)\n      // change setting on the basis of new marker legends\n      newSettingConfig.Legends.option = legend\n      setSettingConfig(newSettingConfig)\n    }\n  }, [legend])\n\n  useEffect(() => {\n    if (props?.settingConfig) {\n      setSettingConfig(deepCopy(props?.settingConfig))\n      setOrientation({\n        ...orientation,\n        zoom: props.zoom\n      })\n    }\n  }, [props?.settingConfig])\n\n  useEffect(() => {\n    if (\n      props?.geocoding?.permission &&\n      props?.geocoding?.position &&\n      ((JSON.stringify(props?.geocoding?.position?.[0]) !==\n        JSON.stringify(geocoding?.position?.[0])) ||\n      (JSON.stringify(props?.geocoding?.position?.[1]) !==\n        JSON.stringify(geocoding?.position?.[1])))\n    ) {\n      setGeocoding(prevValues => ({\n        ...prevValues,\n        position: [\n          Number(props?.geocoding?.position?.[0]),\n          Number(props?.geocoding?.position?.[1])\n        ]\n      }))\n      // beacuse search/position coming from props and once something in search input we need to focus the field\n      setFocusSearchPlace(true)\n    }\n  }, [props?.geocoding?.position])\n\n  useEffect(() => {\n    if (props?.geocoding?.permission && props?.geocoding?.customFields && props?.geocoding?.customFields.length > 0) {\n      if(!(_.isEqual(props?.geocoding?.customFields, geocoding?.customFields))) {\n        setGeocoding(prevValues => ({\n          ...prevValues,\n          customFields: [...props?.geocoding?.customFields]\n        }))\n      }\n    }\n  }, [props?.geocoding?.customFields])\n\n  useEffect(() => {\n    if (\n      props?.geocoding?.permission &&\n      props?.geocoding?.searchText\n      // props?.geocoding?.searchText !== geocoding?.searchText\n    ) {\n      setIsMapSearched(false)\n      setGeocoding({\n        ...geocoding,\n        searchText: props?.geocoding?.searchText\n      })\n      // beacuse search coming from props and once something in search input we need to focus the field\n      setFocusSearchPlace(true)\n    }\n  }, [props?.geocoding?.searchText])\n\n  useEffect(() => {\n    setConfigurableOption({ ...configurableOption, heatmap })\n  }, [heatmap])\n\n  useEffect(() => {\n    setConfigurableOption(prevOptions => ({ ...prevOptions, polygon }))\n  }, [polygon, polygon?.popupRef])\n  \n  useEffect(() => {\n    setConfigurableOption(prevOptions =>({ ...prevOptions, circle}))\n  }, [circle])\n\n  useEffect(() => {\n    if (configurableOption?.heatmap?.permission) {\n      // if heatmap true then hide makers\n      //  setmarkerConfig({ ...markerConfig, permission: false })\n    } else {\n      if (configurableOption?.heatmap && markerConfig) {\n        // if heatmap is false then make makers true\n        const newConfig = Object.assign({}, configurableOption)\n        newConfig.heatmap.permission = false\n        setConfigurableOption(newConfig)\n        setmarkerConfig({ ...markerConfig, permission: true })\n      }\n    }\n  }, [configurableOption?.heatmap?.permission])\n\n  useEffect(() => {\n    // change in config\n    setConfigurableOption({\n      ...configurableOption,\n      locationSearch: !!props.locationSearch,\n      poi: props.poi,\n      rulerControl: !!props.rulerControl,\n      tiles: tiles\n    })\n    const newSettig = deepCopy(settingConfig)\n    // change in setting data structure\n    newSettig?.Miscellaneous?.option?.find((entry: any) => {\n      if (entry.name === 'Point of interest') {\n        entry.selected = !!poi\n      } else if (entry.name === 'Traffic') {\n        entry.selected = !!traffic\n      } else if (entry.name === 'Ruler Control') {\n        entry.selected = !!rulerControl\n      } else if (entry.name === 'Location Search') {\n        entry.selected = !!locationSearch\n      }\n    })\n  }, [locationSearch, poi, rulerControl, traffic, tiles])\n\n  useEffect(() => {\n    setOrientation({\n      ...orientation,\n      zoom: props.zoom\n    })\n    // render it on change in setting, legend change which will need for mapping marker layer and setting\n    // markerconfig updation on change in legends on map or setting  and toggled setting legend into legendmodel required for marker layer\n    updateMapWithSettings(\n      settingConfig,\n      configurableOption,\n      setConfigurableOption,\n      setSettingConfig,\n      markerConfig,\n      setmarkerConfig,\n      heatmap,\n      geocoding,\n      setGeocoding,\n      locationSearch\n    )\n  }, [settingConfig, legend, legendModel])\n\n  useEffect(() => {\n    // if rows data selected from list view is not equal to markerConfig means we trigger list selection then make focust serach place false\n    if (JSON.stringify(markers) !== JSON.stringify(markerConfig)) {\n      setFocusSearchPlace(false)\n    }\n    // update the map state once the input markers are changed\n    setmarkerConfig(markers)\n  }, [markers])\n\n  useEffect(() => {\n    setMapRef(mapRef)\n    setMapProps?.(mapRef.current.leafletElement)\n    const contextValueMap = mapRef?.current?.contextValue?.map as any\n    // as we get map inside map we are moving flying bound functionality here\n    if (contextValueMap) {\n      contextValueMap?.invalidateSize(true)\n      contextValueMap?.doubleClickZoom.enable()\n      contextValueMap?.boxZoom.enable()\n      contextValueMap?.scrollWheelZoom.enable()\n      contextValueMap?.dragging.enable()\n      if(configurableOption.polygon?.permission){\n        let bounds= new LatLngBounds([])\n        let boundsData= configurableOption.polygon.editLayer? configurableOption.polygon.editLayer.data: configurableOption.polygon.data\n        boundsData && boundsData.length && boundsData.map((poly:any)=>{\n          let latllnf= poly.polygonCoordinates.map((lt:any)=> {\n            return [lt.latitude,lt.longitude]\n          })\n          const Latlng= new LatLngBounds(latllnf)\n          bounds.extend(Latlng)\n        })\n        if(Object.values(bounds)?.length){\n          contextValueMap?.fitBounds(bounds, {padding: LL.point(100, 100)})\n        } \n      }\n\n    }\n  }, [mapRef])\n\n  useEffect(() => {\n    if (\n      searchFieldAddressInfo &&\n      Object.keys(searchFieldAddressInfo).length > 0 &&\n      searchFieldAddressInfo?.position\n    ) {\n      // while searching this keeps getting trigger so make sure whatevr searching field and (geocoding api)response searchfield should have same value\n      // even above condition not filling and user dragging/changing geocode field then as well send that info outside\n      // if (\n      //   geocoding.searchText === searchFieldAddressInfo.searchText ||\n      //   isMarkerDragged\n      // ) {\n      // dont touch this code, whenever we address from locationSelect(geocoding done in useEffect),this use effect will get called\n      // isMapSearched : true - whenevr user search through input in map search places it will go true\n      sendLocationOutside &&\n        sendLocationOutside({\n          ...searchFieldAddressInfo,\n          isPropSearch: isMapSearched\n        })\n      // }\n    }\n  }, [searchFieldAddressInfo])\n\n  const updateGeocoding = (position: any, searchText?: any, bounds?: any, recentZoom?: number, radius?: any) => {\n    let updatedCustomFields: ICustomField[] = [];\n    if(geocoding?.customFields && geocoding?.customFields.length > 0) {\n      updatedCustomFields = geocoding?.customFields.map((obj:ICustomField) => obj.name === \"radius\" ? { ...obj, value: radius ?? 0} : {...obj});\n    }\n    const updatedGeocoding: tGeocoding = {...geocoding, position: position, searchText: searchText, customFields: [...updatedCustomFields] }\n    setGeocoding({...updatedGeocoding});\n    setLocationSearched?.(searchText);\n    if (!recentZoom && typeof recentZoom === \"undefined\") { setLocalZoom(14) }\n    setOrientation({\n      ...orientation,\n      center: position,\n      latLngBounds: bounds,\n      zoom: recentZoom || 14\n    })\n  }\n  // whenever any location is selected or updated, this function is called and focus place variable to true\n  const onLocationSelect = (\n    position: any,\n    searchText?: any,\n    isMarkerDragged?: boolean,\n    bounds?: any,\n    _zoom?: number,\n    radius?: any\n    // isCustomSearch?: boolean\n  ) => {\n    // if marker is not dragged or geocoding fields got changed and automatically got search value then use whatevr coming from props as a searchtext\n    // but use position caluclated in locationSeach which will come in callback args\n    // isMapSearched : false meaning search text coming from prop\n    if (_zoom) setLocalZoom(_zoom)\n    if (\n      geocoding?.searchText !== searchText &&\n      !isMarkerDragged &&\n      !isMapSearched\n    ) {\n      updateGeocoding(\n        [Number(position?.[0]), Number(position?.[1])],\n        geocoding?.searchText,\n        bounds, \n        _zoom,\n        radius\n      )\n    } else {\n      updateGeocoding(position, searchText, bounds, _zoom, radius)\n    }\n    setFocusSearchPlace(true)\n  }\n\n  // on LL popup close\n\n  const onhandlePopupClose = (_e: { popup: any }) => {\n    handleClosePopup && handleClosePopup(polygon?.popupRef)\n  }\n\n  return (\n    <GeocodingContext.Provider value={geocodingContextValue}>\n      {/* Import the static-styling component of the map required by leaflet */}\n      <LeafletStyles />\n\n      {/* This is the main map component */}\n\n      <StyledMap\n        createShape={createShape}\n        isOpenStreet={configurableOption.isOpenStreet} // show google sign at bottom when google map selected\n        showModal={showModal}\n        onMouseDown={(e: any) => {\n          const isLefaletClassName =\n            e?.target?.className &&\n            typeof e?.target?.className === 'string' &&\n            e?.target?.className?.includes('leaflet')\n\n          if (isLefaletClassName || e?.target?.id === props.id) {\n            setShowModal(false)\n            // as we get map inside map we are moving flying bound functionality here\n            const contextValueMap = mapRef?.current?.contextValue?.map as any\n            contextValueMap?.invalidateSize(true)\n            contextValueMap?.doubleClickZoom.enable()\n            contextValueMap?.boxZoom.enable()\n            contextValueMap?.scrollWheelZoom.enable()\n            contextValueMap?.dragging.enable()\n          }\n        }}\n      >\n        <Map\n          ref={mapRef as any}\n          id={props.id}\n          className={'leafletMap ' + props.classes}\n          zoom={orientation.zoom || props.zoom || ZOOM_500M}\n          center={orientation.center || props.center}\n          style={{\n            height: props.height ? props.height : '100%',\n            width: props.width ? props.width : '100%',\n            background: showModal\n              ? '#333'\n              : configurableOption.theme === 'dark' &&\n                !configurableOption.isOpenStreet\n              ? '#18273c'\n              : '#ebe9e4'\n          }}\n          maxNativeZoom={selectedTile === 'google' ? 21 : 19} // this to stop dancing map\n          maxZoom={maxZoomConst[selectedTile || 'google'] || 18} // this is to stop blacking out on map\n          scrollWheelZoom={false}\n          zoomControl={false}\n          animate\n          useFlyTo={useFlyTo}\n          duration={1}\n          worldCopyJump={false} // double copy of map restict\n          attributionControl={false} // leaflet text in bottom hidding\n          onPopupClose={onhandlePopupClose}\n        >\n          {/* Map settings - map mode, theme,legends,control */}\n          {props?.settingConfig && (\n            <SettingBox\n              onChange={(settingConfigs: any) =>\n                setSettingConfig(settingConfigs)\n              }\n              isOpenStreet={configurableOption.isOpenStreet}\n              settingOption={settingConfig}\n              showModal={showModal}\n              handleShowModal={(showModal: boolean) => setShowModal(showModal)}\n              setMarkers={(legend: any) => setMarkers(legend)}\n              heatMap={!!configurableOption?.heatmap?.permission}\n              settingButtonTitle={props.settingButtonTitle}\n              onSettingChange={props?.onSettingChange}\n              legend={legend}\n              setFocusSearchPlace={setFocusSearchPlace}\n              geocoding={geocoding}\n            />\n          )}\n\n          {/* Layers in the map */}\n          {/* Geo coding and location search layer */}\n          <LeafletGeocodingLayer\n            {...props}\n            // position={[props.geocoding?.lat, props.geocoding?.lng]}\n            geocoding={geocoding}\n            onLocationSelect={onLocationSelect}\n            settingConfig={settingConfig}\n            focusSearchPlace={focusSearchPlace}\n            setIsMarkerDragged={setIsMarkerDragged}\n            setIsMapSearched={setIsMapSearched}\n            zoomLGC={localZoom}\n            theMap={mapRef}\n            getLatLong={getLatLong}\n\n          />\n          {/* The layer which displays all the buttons on the map */}\n          <LeafletControlLayer\n            zoomControl={zoomControl}\n            google={props.google}\n            locationSearch={configurableOption.locationSearch}\n            onLocationSelect={onLocationSelect}\n            focusSearchPlace={focusSearchPlace}\n            setIsMarkerDragged={setIsMarkerDragged}\n            isMarkerDragged={isMarkerDragged}\n            setSearchFieldAddressInfo={setSearchFieldAddressInfo}\n            setIsMapSearched={setIsMapSearched}\n            isMapSearched={isMapSearched}\n          />\n          {/* The base layer which will display the map tiles underneath */}\n          {props.google && _isShowTileLayer && (\n            <LeafletTileLayer\n              googleApiKey={props.googleApiKey}\n              tiles={configurableOption.tiles as tTiles}\n              poi={!!configurableOption.poi}\n              theme={configurableOption.theme as tTheme}\n              orientation={orientation}\n              traffic={configurableOption.traffic}\n              rulerControl={!!configurableOption.rulerControl}\n            />\n          )}\n\n          {/* The marker layer which will display all the markers and marker clusters */}\n          {(markerConfig?.permission ||\n            configurableOption?.heatmap?.permission) &&\n            !props.trips?.permission && (\n              <LeafletMarkerLayer\n                iconsRef={props.iconsRef}\n                popupRef={props.popupRef}\n                marker={markerConfig}\n                google={props.google}\n                geocoding={geocoding}\n                updateMarkers={(legends: any) => {\n                  setFocusSearchPlace(false)\n                  // legend change has to be saved ,so that we can update it into settings\n                  setLegend && setLegend(legends)\n                  setLegendModel &&\n                    setLegendModel(convertArrayToObject(legends))\n\n                  // legends gets changed in marker layer, we update our marker layer based on new legends\n                  const newMarker =\n                    markerConfig &&\n                    setLegendMarkers(deepCopy(legends), deepCopy(markerConfig))\n\n                  setmarkerConfig && setmarkerConfig(newMarker)\n                }}\n                showModal={showModal}\n                legendModel={legendModel}\n                focusMarkerId={props.focusMarkerId}\n                heatMap={!!configurableOption?.heatmap?.permission}\n                focusSearchPlace={focusSearchPlace}\n                showLegendWrapper={showLegendWrapper}\n              />\n            )}\n\n          {/* The heat layer which will display all the heatmap */}\n          {configurableOption?.heatmap?.permission && (\n            <LeafletHeatLayer\n              legend={legend}\n              heatmap={configurableOption?.heatmap}\n              heatMapData={heatmap?.data}\n            />\n          )}\n          {/* The trips layer which will display all the path */}\n          {props.trips?.permission &&\n            (props.trips?.data?.length > 0 &&\n            !props?.trips?.noSelectedRows?.permission ? (\n              <LeafletTripsLayer\n                {...props}\n                {...configurableOption}\n                showModal={showModal}\n                heatMap={!!configurableOption.heatmap}\n                focusSearchPlace={focusSearchPlace}\n              />\n            ) : props?.trips?.noSelectedRows?.permission ? (\n              <LeafletOverlay\n                title={props?.trips?.noSelectedRows?.title}\n                showArrow={props?.trips?.noSelectedRows?.showArrow}\n                showCloseIcon={props?.trips?.noSelectedRows?.showCloseIcon}\n              />\n            ) : null)}\n          {/* The tracking layer which will display all the tracking */}\n          {props.tracking?.permission && (\n            <LeafletTrackingLayer {...props} {...configurableOption} />\n          )}\n          {/* Leaflet layer polygon */}\n          {configurableOption.polygon?.permission && (\n            <LeafletPolygonLayer\n              polygon={configurableOption.polygon}\n              popupRef={popupRef} // object to map popupRef\n              google={props.google}\n              createShape={createShape}\n              setCreateShape={setCreateShape}\n              editPopUpComponent={editPopUpComponent}\n              onEdit={onEdit}\n              popupCustomComponent={popupCustomComponent}\n              setFeatureGroupProps={setFeatureGroupProps}\n            />\n          )}\n          {configurableOption.circle?.permission && (\n            <LeafletCircleLayer\n              circle={configurableOption.circle} // circle with -data,permission,tooltipKey,popupRefType\n              popupRef={popupRef} // object to map popupRef\n              google={props.google} // google, for geocoder location find\n              createShape={createShape}\n              setCreateShape={setCreateShape}\n              popupCustomComponent={popupCustomComponent}\n              editPopUpComponent={editPopUpComponent}\n              onEdit={onEdit}\n              setFeatureGroupProps={setFeatureGroupProps}\n            />\n          )}\n          {allowCustomControl &&  ( <CustomControl {...customControlProps} /> )}\n        </Map>\n      </StyledMap>\n    </GeocodingContext.Provider>\n  )\n}\nconst LeafletMap = GoogleApiWrapper((props: ILeafletMapPropsLite) => ({\n  apiKey: props.googleApiKey\n}))(LeafletMapWrapper)\n// default props for the leaflet map\nLeafletMap.defaultProps = {\n  height: '400px',\n  width: '700px',\n  theme: 'light',\n  poi: false,\n  center: [51.0, 19.0],\n  zoom: 4,\n  zoomControl: true,\n  locationSearch: true,\n  tiles: 'google_roadmap'\n} as Partial<ILeafletMapPropsLite>\n\nexport default LeafletMap\n"]},"metadata":{},"sourceType":"module"}