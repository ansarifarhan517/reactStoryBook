{"ast":null,"code":"import _slicedToArray from \"/Users/farhanansari/Code/ui-library/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/farhanansari/Code/ui-library/src/components/atoms/SettingBox/SettingBody.tsx\";\n\nimport React, { Fragment, useEffect, useState } from 'react';\nimport { useLeaflet } from 'react-leaflet';\nimport { StyledBody } from './StyledSettingBox';\nimport { CheckboxOption, DependentOption, RadioOption, ToggleOption } from './Type';\n\nvar SettingBody = function SettingBody(_ref) {\n  var settings = _ref.settings,\n      _onChange = _ref.onChange,\n      isOpenStreet = _ref.isOpenStreet,\n      heatMap = _ref.heatMap;\n\n  var _useState = useState(settings),\n      _useState2 = _slicedToArray(_useState, 2),\n      _settingOption = _useState2[0],\n      setSettingOption = _useState2[1];\n\n  var _useLeaflet = useLeaflet(),\n      map = _useLeaflet.map;\n\n  useEffect(function () {\n    setSettingOption(settings);\n\n    if (map) {\n      // disable zoom option when u click on legend\n      map === null || map === void 0 ? void 0 : map.doubleClickZoom.disable();\n      map === null || map === void 0 ? void 0 : map.boxZoom.disable();\n      map === null || map === void 0 ? void 0 : map.scrollWheelZoom.disable();\n      map === null || map === void 0 ? void 0 : map.dragging.disable();\n    }\n  }, [settings, map]);\n  var body = _settingOption === null || _settingOption === void 0 ? void 0 : _settingOption.map(function (options, index) {\n    var OptionType = {\n      radio: /*#__PURE__*/React.createElement(RadioOption, {\n        key: options.title + index,\n        settingOption: options,\n        settingConfig: _settingOption,\n        onChange: function onChange(newSetting) {\n          return _onChange(newSetting);\n        },\n        disabled: isOpenStreet,\n        listOfDisabledTitle: ['Map Theme'],\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 9\n        }\n      }),\n      toggle: /*#__PURE__*/React.createElement(ToggleOption, {\n        key: options.title + index,\n        settingOption: options,\n        settingConfig: _settingOption,\n        disabled: isOpenStreet,\n        onChange: function onChange(newSetting) {\n          return _onChange(newSetting);\n        },\n        listOfDisabledTitle: ['Point of interest', 'Traffic'],\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 9\n        }\n      }),\n      dependent: /*#__PURE__*/React.createElement(DependentOption, {\n        key: options.title + index,\n        settingOption: options,\n        settingConfig: _settingOption,\n        onChange: function onChange(newSetting) {\n          return _onChange(newSetting);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 9\n        }\n      }),\n      checkbox: /*#__PURE__*/React.createElement(CheckboxOption, {\n        key: options.title + index,\n        settingOption: options,\n        checkboxSubOption: options.option,\n        settingConfig: _settingOption,\n        onChange: function onChange(newSetting) {\n          return _onChange(newSetting);\n        },\n        heatMap: heatMap,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 9\n        }\n      })\n    };\n    return /*#__PURE__*/React.createElement(Fragment, {\n      key: options.title + index,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 7\n      }\n    }, OptionType[options.type] || '');\n  });\n  return /*#__PURE__*/React.createElement(StyledBody, {\n    id: \"settingBody\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 10\n    }\n  }, body);\n};\n\nexport default SettingBody;","map":{"version":3,"sources":["/Users/farhanansari/Code/ui-library/src/components/atoms/SettingBox/SettingBody.tsx"],"names":["React","Fragment","useEffect","useState","useLeaflet","StyledBody","CheckboxOption","DependentOption","RadioOption","ToggleOption","SettingBody","settings","onChange","isOpenStreet","heatMap","_settingOption","setSettingOption","map","doubleClickZoom","disable","boxZoom","scrollWheelZoom","dragging","body","options","index","OptionType","radio","title","newSetting","toggle","dependent","checkbox","option","type"],"mappings":"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","sourcesContent":["import React, { Fragment, useEffect, useState } from 'react'\nimport { useLeaflet } from 'react-leaflet'\nimport { ISettingBox, ISettingOption } from './interface'\nimport { StyledBody } from './StyledSettingBox'\nimport {\n  CheckboxOption,\n  DependentOption,\n  RadioOption,\n  ToggleOption\n} from './Type'\n\nconst SettingBody = ({\n  settings,\n  onChange,\n  isOpenStreet,\n  heatMap\n}: ISettingBox) => {\n  const [_settingOption, setSettingOption] = useState(settings)\n  const { map } = useLeaflet()\n\n  useEffect(() => {\n    setSettingOption(settings)\n    if (map) {\n      // disable zoom option when u click on legend\n      map?.doubleClickZoom.disable()\n      map?.boxZoom.disable()\n      map?.scrollWheelZoom.disable()\n      map?.dragging.disable()\n    }\n  }, [settings, map])\n\n  const body = _settingOption?.map((options: ISettingOption, index: number) => {\n    const OptionType = {\n      radio: (\n        <RadioOption\n          key={options.title + index}\n          settingOption={options}\n          settingConfig={_settingOption}\n          onChange={(newSetting: Array<ISettingOption>) => onChange(newSetting)}\n          disabled={isOpenStreet}\n          listOfDisabledTitle={['Map Theme']}\n        />\n      ),\n      toggle: (\n        <ToggleOption\n          key={options.title + index}\n          settingOption={options}\n          settingConfig={_settingOption}\n          disabled={isOpenStreet}\n          onChange={(newSetting: Array<ISettingOption>) => onChange(newSetting)}\n          listOfDisabledTitle={['Point of interest', 'Traffic']}\n        />\n      ),\n      dependent: (\n        <DependentOption\n          key={options.title + index}\n          settingOption={options}\n          settingConfig={_settingOption}\n          onChange={(newSetting: Array<ISettingOption>) => onChange(newSetting)}\n        />\n      ),\n      checkbox: (\n        <CheckboxOption\n          key={options.title + index}\n          settingOption={options}\n          checkboxSubOption={options.option}\n          settingConfig={_settingOption}\n          onChange={(newSetting: Array<ISettingOption>) => onChange(newSetting)}\n          heatMap={heatMap}\n        />\n      )\n    }\n    return (\n      <Fragment key={options.title + index}>\n        {OptionType[options.type] || ''}\n      </Fragment>\n    )\n  })\n  return <StyledBody id='settingBody'>{body}</StyledBody>\n}\nexport default SettingBody\n"]},"metadata":{},"sourceType":"module"}