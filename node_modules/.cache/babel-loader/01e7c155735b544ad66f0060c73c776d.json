{"ast":null,"code":"import _slicedToArray from \"/Users/farhanansari/Code/ui-library/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/farhanansari/Code/ui-library/src/components/molecules/ButtonGroup/index.tsx\";\n\nimport React, { useState, useEffect } from 'react';\nimport ButtonGroupWrapper from './StyledButtonGroup';\nimport FontIcon from '../../atoms/FontIcon';\nimport Box from '../../atoms/Box';\nimport ToolTip from '../../molecules/Tooltip';\n\nvar defaultFunction = function defaultFunction() {};\n\nvar ButtonGroup = function ButtonGroup(_ref) {\n  var data = _ref.data,\n      _ref$onChange = _ref.onChange,\n      onChange = _ref$onChange === void 0 ? defaultFunction : _ref$onChange,\n      _ref$width = _ref.width,\n      width = _ref$width === void 0 ? 'initial' : _ref$width,\n      _ref$height = _ref.height,\n      height = _ref$height === void 0 ? '30px' : _ref$height;\n\n  var _useState = useState(data),\n      _useState2 = _slicedToArray(_useState, 2),\n      dataList = _useState2[0],\n      setDataList = _useState2[1]; // Refresh dataList whenever props change\n\n\n  useEffect(function () {\n    setDataList(data);\n  }, [data]); // Handle ButtonGroup Option Click\n\n  var handleClick = function handleClick(id) {\n    // Set Selected for dataItem & reset other dataItems\n    var newList = Array.from(Object.create(dataList));\n    newList.forEach(function (dataItem) {\n      return dataItem.selected = id === dataItem.id;\n    });\n    setDataList(newList);\n    onChange(id);\n  };\n\n  return /*#__PURE__*/React.createElement(ButtonGroupWrapper, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ButtonGroupWrapper.ButtonGroups, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }\n  }, dataList.map(function (_ref2, index) {\n    var label = _ref2.label,\n        id = _ref2.id,\n        selected = _ref2.selected,\n        icon = _ref2.icon,\n        tooltipText = _ref2.tooltipText;\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      key: id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 15\n      }\n    }, tooltipText ? /*#__PURE__*/React.createElement(ToolTip, {\n      message: tooltipText,\n      hover: true,\n      arrowPlacement: \"center\",\n      messagePlacement: dataList.length - 1 === index ? 'end' : 'center',\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(ButtonGroupWrapper, {\n      style: {\n        marginLeft: '-2px',\n        width: width,\n        height: height\n      },\n      id: id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(ButtonGroupWrapper.ButtonOption, {\n      selected: selected,\n      height: height // key={id}\n      ,\n      onClick: function onClick() {\n        return handleClick(id);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(Box, {\n      horizontalSpacing: \"10px\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 25\n      }\n    }, icon && /*#__PURE__*/React.createElement(FontIcon, {\n      variant: icon,\n      size: \"sm\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 36\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        verticalAlign: 'middle',\n        fontSize: '13px'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 27\n      }\n    }, label))))) : /*#__PURE__*/React.createElement(ButtonGroupWrapper.ButtonOption, {\n      id: id,\n      height: height,\n      selected: selected // key={id}\n      ,\n      onClick: function onClick() {\n        return handleClick(id);\n      },\n      style: {\n        width: width,\n        height: height\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(Box, {\n      horizontalSpacing: \"10px\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 21\n      }\n    }, icon && /*#__PURE__*/React.createElement(FontIcon, {\n      variant: icon,\n      size: \"sm\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 32\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 23\n      }\n    }, label))));\n  })));\n};\n\nButtonGroup.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"ButtonGroup\",\n  \"props\": {\n    \"onChange\": {\n      \"defaultValue\": {\n        \"value\": \"() => {}\",\n        \"computed\": false\n      },\n      \"required\": false\n    },\n    \"width\": {\n      \"defaultValue\": {\n        \"value\": \"'initial'\",\n        \"computed\": false\n      },\n      \"required\": false\n    },\n    \"height\": {\n      \"defaultValue\": {\n        \"value\": \"'30px'\",\n        \"computed\": false\n      },\n      \"required\": false\n    }\n  }\n};\nexport default ButtonGroup; // < ButtonGroup options = { [{ id: '', label: '', selected: false }, {}]}\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src/components/molecules/ButtonGroup/index.tsx\"] = {\n    name: \"ButtonGroup\",\n    docgenInfo: ButtonGroup.__docgenInfo,\n    path: \"src/components/molecules/ButtonGroup/index.tsx\"\n  };\n}","map":{"version":3,"sources":["/Users/farhanansari/Code/ui-library/src/components/molecules/ButtonGroup/index.tsx"],"names":["React","useState","useEffect","ButtonGroupWrapper","FontIcon","Box","ToolTip","defaultFunction","ButtonGroup","data","onChange","width","height","dataList","setDataList","handleClick","id","newList","Array","from","Object","create","forEach","dataItem","selected","map","index","label","icon","tooltipText","length","marginLeft","verticalAlign","fontSize"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport ButtonGroupWrapper from './StyledButtonGroup'\nimport FontIcon from '../../atoms/FontIcon'\nimport Box from '../../atoms/Box'\nimport ToolTip from '../../molecules/Tooltip'\nimport { IButtonGroup } from './interfaces'\n\nconst defaultFunction = () => {}\nconst ButtonGroup = ({\n  data,\n  onChange = defaultFunction,\n  width = 'initial',\n  height = '30px'\n}: IButtonGroup) => {\n  const [dataList, setDataList] = useState(data)\n\n  // Refresh dataList whenever props change\n  useEffect(() => {\n    setDataList(data)\n  }, [data])\n\n  // Handle ButtonGroup Option Click\n  const handleClick = (id: string) => {\n    // Set Selected for dataItem & reset other dataItems\n    const newList: any = Array.from(Object.create(dataList))\n    newList.forEach((dataItem: any) => (dataItem.selected = id === dataItem.id))\n    setDataList(newList)\n    onChange(id)\n  }\n\n  return (\n    <ButtonGroupWrapper>\n      <ButtonGroupWrapper.ButtonGroups>\n        {dataList.map(\n          ({ label, id, selected, icon, tooltipText }, index: number) => {\n            return (\n              <React.Fragment key={id}>\n                {tooltipText ? (\n                  <ToolTip\n                    message={tooltipText}\n                    hover\n                    arrowPlacement='center'\n                    messagePlacement={\n                      dataList.length - 1 === index ? 'end' : 'center'\n                    }\n                  >\n                    <ButtonGroupWrapper\n                      style={{\n                        marginLeft: '-2px',\n                        width: width,\n                        height: height\n                      }}\n                      id={id}\n                    >\n                      <ButtonGroupWrapper.ButtonOption\n                        selected={selected}\n                        height={height}\n                        // key={id}\n                        onClick={() => handleClick(id)}\n                      >\n                        <Box horizontalSpacing='10px'>\n                          {icon && <FontIcon variant={icon} size='sm' />}\n                          <span\n                            style={{\n                              verticalAlign: 'middle',\n                              fontSize: '13px'\n                            }}\n                          >\n                            {label}\n                          </span>\n                        </Box>\n                      </ButtonGroupWrapper.ButtonOption>\n                    </ButtonGroupWrapper>\n                  </ToolTip>\n                ) : (\n                  <ButtonGroupWrapper.ButtonOption\n                    id={id}\n                    height={height}\n                    selected={selected}\n                    // key={id}\n                    onClick={() => handleClick(id)}\n                    style={{ width: width, height: height }}\n                  >\n                    <Box horizontalSpacing='10px'>\n                      {icon && <FontIcon variant={icon} size='sm' />}\n                      <span>{label}</span>\n                    </Box>\n                  </ButtonGroupWrapper.ButtonOption>\n                )}\n              </React.Fragment>\n            )\n          }\n        )}\n      </ButtonGroupWrapper.ButtonGroups>\n    </ButtonGroupWrapper>\n  )\n}\n\nexport default ButtonGroup\n\n// < ButtonGroup options = { [{ id: '', label: '', selected: false }, {}]}\n"]},"metadata":{},"sourceType":"module"}