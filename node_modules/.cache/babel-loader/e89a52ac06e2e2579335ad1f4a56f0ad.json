{"ast":null,"code":"import _slicedToArray from \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/atoms/Map/layers/LeafletTileLayer.tsx\";\n\n// The base layer which will display the map tiles underneath\n// import LL from 'leaflet'\nimport React, { useEffect, useState } from 'react';\nimport { TileLayer, useLeaflet, withLeaflet } from 'react-leaflet';\nimport ReactLeafletGoogleLayer from './LeaftletGoogleLayer';\nimport DARK from './../constants/maptheme.dark';\nimport LIGHT from './../constants/maptheme.light';\nimport MeasureControl from 'react-leaflet-measure';\nvar measureOptions = {\n  position: 'bottomright',\n  primaryLengthUnit: 'meters',\n  secondaryLengthUnit: 'kilometers',\n  primaryAreaUnit: 'sqmeters',\n  secondaryAreaUnit: 'acres',\n  activeColor: '#db4a29',\n  completedColor: '#9b2d14',\n  intarctive: false,\n  popupOptions: {\n    className: 'leaflet-measure-resultpopup',\n    autoPanPadding: [10, 10]\n  },\n  captureZIndex: 10000,\n  decPoint: '.',\n  thousandsSep: ','\n};\nvar WrappedMeasureControl = withLeaflet(MeasureControl);\n\nvar getTileUrl = function getTileUrl(subType) {\n  switch (subType) {\n    case 'standard':\n      return 'http://{s}.tile.osm.org/{z}/{x}/{y}.png';\n\n    case 'cycle':\n      return 'http://a.tile.opencyclemap.org/cycle/{z}/{x}/{y}.png';\n\n    case 'humanitarian':\n      return 'http://a.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png';\n\n    case 'transport':\n      return 'http://a.tile2.opencyclemap.org/transport/{z}/{x}/{y}.png';\n\n    default:\n      return 'https://cartodb-basemaps-{s}.global.ssl.fastly.net/dark_all/{z}/{x}/{y}.png';\n  }\n};\n\nvar LeafletTileLayer = function LeafletTileLayer(props) {\n  var tiles = props.tiles,\n      theme = props.theme,\n      poi = props.poi,\n      googleApiKey = props.googleApiKey,\n      traffic = props.traffic,\n      rulerControl = props.rulerControl;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      traficLayer = _useState2[0],\n      setTrafficLayer = _useState2[1];\n\n  var _useState3 = useState(tiles === null || tiles === void 0 ? void 0 : tiles.split('_')[0]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      type = _useState4[0],\n      setType = _useState4[1];\n\n  var _useState5 = useState(tiles === null || tiles === void 0 ? void 0 : tiles.split('_')[1]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      subtype = _useState6[0],\n      setSubtype = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      layerPermission = _useState8[0],\n      setLayerPermission = _useState8[1];\n\n  var _useState9 = useState(theme),\n      _useState10 = _slicedToArray(_useState9, 2),\n      _theme = _useState10[0],\n      setTheme = _useState10[1];\n\n  var _useState11 = useState(poi),\n      _useState12 = _slicedToArray(_useState11, 2),\n      _poi = _useState12[0],\n      setPoi = _useState12[1];\n\n  var _useLeaflet = useLeaflet(),\n      map = _useLeaflet.map;\n\n  useEffect(function () {\n    if (type === 'google' && map) {\n      if (traffic) {\n        var _traficLayer$target;\n\n        traficLayer === null || traficLayer === void 0 ? void 0 : (_traficLayer$target = traficLayer.target) === null || _traficLayer$target === void 0 ? void 0 : _traficLayer$target.addGoogleLayer('TrafficLayer');\n      } else {\n        var _traficLayer$target2;\n\n        traficLayer === null || traficLayer === void 0 ? void 0 : (_traficLayer$target2 = traficLayer.target) === null || _traficLayer$target2 === void 0 ? void 0 : _traficLayer$target2.removeGoogleLayer('TrafficLayer');\n      }\n    }\n  }, [traffic, traficLayer]);\n  useEffect(function () {\n    if (map) {\n      // For 500 ms, remove the layer from DOM, then insert new, so that google layer gets changed\n      setLayerPermission(false);\n      setType(tiles === null || tiles === void 0 ? void 0 : tiles.split('_')[0]);\n      setSubtype(tiles === null || tiles === void 0 ? void 0 : tiles.split('_')[1]);\n      setTheme(theme);\n      setPoi(poi);\n      setTimeout(function () {\n        return setLayerPermission(true);\n      }, 100);\n    }\n  }, [tiles, theme, poi, map]);\n\n  var googleLayerAdded = function googleLayerAdded(layer) {\n    setTrafficLayer(layer);\n  };\n\n  return map ? /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 5\n    }\n  }, layerPermission && /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }\n  }, type === 'osm' && subtype && /*#__PURE__*/React.createElement(TileLayer, {\n    url: getTileUrl(subtype),\n    attribution: \"\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }\n  }), type === 'google' && subtype && /*#__PURE__*/React.createElement(ReactLeafletGoogleLayer, {\n    useGoogMapsLoader: false,\n    continuousWorld: true,\n    onAdd: function onAdd(layer) {\n      return googleLayerAdded(layer);\n    },\n    googleMapsLoaderConf: {\n      KEY: googleApiKey\n    },\n    type: subtype,\n    styles: _theme && _theme === 'dark' ? DARK[_poi ? 'poi' : 'noPoi'] : LIGHT[_poi ? 'poi' : 'noPoi'],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }\n  }), rulerControl && /*#__PURE__*/React.createElement(WrappedMeasureControl, Object.assign({}, measureOptions, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 28\n    }\n  })))) : null;\n};\n\nexport default React.memo(LeafletTileLayer);","map":{"version":3,"sources":["/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/atoms/Map/layers/LeafletTileLayer.tsx"],"names":["React","useEffect","useState","TileLayer","useLeaflet","withLeaflet","ReactLeafletGoogleLayer","DARK","LIGHT","MeasureControl","measureOptions","position","primaryLengthUnit","secondaryLengthUnit","primaryAreaUnit","secondaryAreaUnit","activeColor","completedColor","intarctive","popupOptions","className","autoPanPadding","captureZIndex","decPoint","thousandsSep","WrappedMeasureControl","getTileUrl","subType","LeafletTileLayer","props","tiles","theme","poi","googleApiKey","traffic","rulerControl","traficLayer","setTrafficLayer","split","type","setType","subtype","setSubtype","layerPermission","setLayerPermission","_theme","setTheme","_poi","setPoi","map","target","addGoogleLayer","removeGoogleLayer","setTimeout","googleLayerAdded","layer","KEY","memo"],"mappings":";;;;;AAAA;AACA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,SAAT,EAAoBC,UAApB,EAAgCC,WAAhC,QAAmD,eAAnD;AACA,OAAOC,uBAAP,MAAoC,uBAApC;AAEA,OAAOC,IAAP,MAAiB,8BAAjB;AACA,OAAOC,KAAP,MAAkB,+BAAlB;AAEA,OAAOC,cAAP,MAA2B,uBAA3B;AAEA,IAAMC,cAAc,GAAG;AACrBC,EAAAA,QAAQ,EAAE,aADW;AAErBC,EAAAA,iBAAiB,EAAE,QAFE;AAGrBC,EAAAA,mBAAmB,EAAE,YAHA;AAIrBC,EAAAA,eAAe,EAAE,UAJI;AAKrBC,EAAAA,iBAAiB,EAAE,OALE;AAMrBC,EAAAA,WAAW,EAAE,SANQ;AAOrBC,EAAAA,cAAc,EAAE,SAPK;AAQrBC,EAAAA,UAAU,EAAE,KARS;AASrBC,EAAAA,YAAY,EAAE;AACZC,IAAAA,SAAS,EAAE,6BADC;AAEZC,IAAAA,cAAc,EAAE,CAAC,EAAD,EAAK,EAAL;AAFJ,GATO;AAarBC,EAAAA,aAAa,EAAE,KAbM;AAcrBC,EAAAA,QAAQ,EAAE,GAdW;AAerBC,EAAAA,YAAY,EAAE;AAfO,CAAvB;AAkBA,IAAMC,qBAAqB,GAAGpB,WAAW,CAACI,cAAD,CAAzC;;AAEA,IAAMiB,UAAU,GAAG,SAAbA,UAAa,CAACC,OAAD,EAAqB;AACtC,UAAQA,OAAR;AACE,SAAK,UAAL;AACE,aAAO,yCAAP;;AACF,SAAK,OAAL;AACE,aAAO,sDAAP;;AACF,SAAK,cAAL;AACE,aAAO,oDAAP;;AACF,SAAK,WAAL;AACE,aAAO,2DAAP;;AACF;AACE,aAAO,6EAAP;AAVJ;AAYD,CAbD;;AAyBA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,KAAD,EAA8B;AAAA,MAC7CC,KAD6C,GACcD,KADd,CAC7CC,KAD6C;AAAA,MACtCC,KADsC,GACcF,KADd,CACtCE,KADsC;AAAA,MAC/BC,GAD+B,GACcH,KADd,CAC/BG,GAD+B;AAAA,MAC1BC,YAD0B,GACcJ,KADd,CAC1BI,YAD0B;AAAA,MACZC,OADY,GACcL,KADd,CACZK,OADY;AAAA,MACHC,YADG,GACcN,KADd,CACHM,YADG;;AAAA,kBAEdjC,QAAQ,CAAM,IAAN,CAFM;AAAA;AAAA,MAE9CkC,WAF8C;AAAA,MAEjCC,eAFiC;;AAAA,mBAI7BnC,QAAQ,CAAC4B,KAAD,aAACA,KAAD,uBAACA,KAAK,CAAEQ,KAAP,CAAa,GAAb,EAAkB,CAAlB,CAAD,CAJqB;AAAA;AAAA,MAI9CC,IAJ8C;AAAA,MAIxCC,OAJwC;;AAAA,mBAKvBtC,QAAQ,CAAC4B,KAAD,aAACA,KAAD,uBAACA,KAAK,CAAEQ,KAAP,CAAa,GAAb,EAAkB,CAAlB,CAAD,CALe;AAAA;AAAA,MAK9CG,OAL8C;AAAA,MAKrCC,UALqC;;AAAA,mBAMPxC,QAAQ,CAAC,KAAD,CAND;AAAA;AAAA,MAM9CyC,eAN8C;AAAA,MAM7BC,kBAN6B;;AAAA,mBAO1B1C,QAAQ,CAAC6B,KAAD,CAPkB;AAAA;AAAA,MAO9Cc,MAP8C;AAAA,MAOtCC,QAPsC;;AAAA,oBAQ9B5C,QAAQ,CAAC8B,GAAD,CARsB;AAAA;AAAA,MAQ9Ce,IAR8C;AAAA,MAQxCC,MARwC;;AAAA,oBASrC5C,UAAU,EAT2B;AAAA,MAS7C6C,GAT6C,eAS7CA,GAT6C;;AAWrDhD,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIsC,IAAI,KAAK,QAAT,IAAqBU,GAAzB,EAA8B;AAC5B,UAAIf,OAAJ,EAAa;AAAA;;AACXE,QAAAA,WAAW,SAAX,IAAAA,WAAW,WAAX,mCAAAA,WAAW,CAAEc,MAAb,4EAAqBC,cAArB,CAAoC,cAApC;AACD,OAFD,MAEO;AAAA;;AACLf,QAAAA,WAAW,SAAX,IAAAA,WAAW,WAAX,oCAAAA,WAAW,CAAEc,MAAb,8EAAqBE,iBAArB,CAAuC,cAAvC;AACD;AACF;AACF,GARQ,EAQN,CAAClB,OAAD,EAAUE,WAAV,CARM,CAAT;AAUAnC,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIgD,GAAJ,EAAS;AACP;AACAL,MAAAA,kBAAkB,CAAC,KAAD,CAAlB;AAEAJ,MAAAA,OAAO,CAACV,KAAD,aAACA,KAAD,uBAACA,KAAK,CAAEQ,KAAP,CAAa,GAAb,EAAkB,CAAlB,CAAD,CAAP;AACAI,MAAAA,UAAU,CAACZ,KAAD,aAACA,KAAD,uBAACA,KAAK,CAAEQ,KAAP,CAAa,GAAb,EAAkB,CAAlB,CAAD,CAAV;AACAQ,MAAAA,QAAQ,CAACf,KAAD,CAAR;AACAiB,MAAAA,MAAM,CAAChB,GAAD,CAAN;AAEAqB,MAAAA,UAAU,CAAC;AAAA,eAAMT,kBAAkB,CAAC,IAAD,CAAxB;AAAA,OAAD,EAAiC,GAAjC,CAAV;AACD;AACF,GAZQ,EAYN,CAACd,KAAD,EAAQC,KAAR,EAAeC,GAAf,EAAoBiB,GAApB,CAZM,CAAT;;AAcA,MAAMK,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,KAAD,EAAgB;AACvClB,IAAAA,eAAe,CAACkB,KAAD,CAAf;AACD,GAFD;;AAIA,SAAON,GAAG,gBACR,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGN,eAAe,iBACd,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGJ,IAAI,KAAK,KAAT,IAAkBE,OAAlB,iBACC,oBAAC,SAAD;AAAW,IAAA,GAAG,EAAEf,UAAU,CAACe,OAAD,CAA1B;AAAqC,IAAA,WAAW,EAAC,EAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,EAKGF,IAAI,KAAK,QAAT,IAAqBE,OAArB,iBACC,oBAAC,uBAAD;AACE,IAAA,iBAAiB,EAAE,KADrB;AAEE,IAAA,eAAe,MAFjB;AAGE,IAAA,KAAK,EAAE,eAACc,KAAD;AAAA,aAAgBD,gBAAgB,CAACC,KAAD,CAAhC;AAAA,KAHT;AAIE,IAAA,oBAAoB,EAAE;AAAEC,MAAAA,GAAG,EAAEvB;AAAP,KAJxB;AAKE,IAAA,IAAI,EAAEQ,OALR;AAME,IAAA,MAAM,EACJI,MAAM,IAAIA,MAAM,KAAK,MAArB,GACItC,IAAI,CAACwC,IAAI,GAAG,KAAH,GAAW,OAAhB,CADR,GAEIvC,KAAK,CAACuC,IAAI,GAAG,KAAH,GAAW,OAAhB,CATb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANJ,EAoBGZ,YAAY,iBAAI,oBAAC,qBAAD,oBAA2BzB,cAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KApBnB,CAFJ,CADQ,GA2BN,IA3BJ;AA4BD,CAnED;;AAqEA,eAAeV,KAAK,CAACyD,IAAN,CAAW7B,gBAAX,CAAf","sourcesContent":["// The base layer which will display the map tiles underneath\n// import LL from 'leaflet'\nimport React, { useEffect, useState } from 'react'\nimport { TileLayer, useLeaflet, withLeaflet } from 'react-leaflet'\nimport ReactLeafletGoogleLayer from './LeaftletGoogleLayer'\nimport { tGoogleMutantType, tTheme, tTiles } from '../types.d'\nimport DARK from './../constants/maptheme.dark'\nimport LIGHT from './../constants/maptheme.light'\n\nimport MeasureControl from 'react-leaflet-measure'\n\nconst measureOptions = {\n  position: 'bottomright',\n  primaryLengthUnit: 'meters',\n  secondaryLengthUnit: 'kilometers',\n  primaryAreaUnit: 'sqmeters',\n  secondaryAreaUnit: 'acres',\n  activeColor: '#db4a29',\n  completedColor: '#9b2d14',\n  intarctive: false,\n  popupOptions: {\n    className: 'leaflet-measure-resultpopup',\n    autoPanPadding: [10, 10]\n  },\n  captureZIndex: 10000,\n  decPoint: '.',\n  thousandsSep: ','\n}\n\nconst WrappedMeasureControl = withLeaflet(MeasureControl)\n\nconst getTileUrl = (subType: string) => {\n  switch (subType) {\n    case 'standard':\n      return 'http://{s}.tile.osm.org/{z}/{x}/{y}.png'\n    case 'cycle':\n      return 'http://a.tile.opencyclemap.org/cycle/{z}/{x}/{y}.png'\n    case 'humanitarian':\n      return 'http://a.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png'\n    case 'transport':\n      return 'http://a.tile2.opencyclemap.org/transport/{z}/{x}/{y}.png'\n    default:\n      return 'https://cartodb-basemaps-{s}.global.ssl.fastly.net/dark_all/{z}/{x}/{y}.png'\n  }\n}\n\ninterface ILeafletTileLayer {\n  tiles: tTiles\n  theme: tTheme\n  poi: boolean\n  googleApiKey: string\n  orientation: any\n  traffic: boolean\n  rulerControl: boolean\n}\n\nconst LeafletTileLayer = (props: ILeafletTileLayer) => {\n  const { tiles, theme, poi, googleApiKey, traffic, rulerControl } = props\n  const [traficLayer, setTrafficLayer] = useState<any>(null)\n\n  const [type, setType] = useState(tiles?.split('_')[0])\n  const [subtype, setSubtype] = useState(tiles?.split('_')[1])\n  const [layerPermission, setLayerPermission] = useState(false)\n  const [_theme, setTheme] = useState(theme)\n  const [_poi, setPoi] = useState(poi)\n  const { map } = useLeaflet()\n\n  useEffect(() => {\n    if (type === 'google' && map) {\n      if (traffic) {\n        traficLayer?.target?.addGoogleLayer('TrafficLayer')\n      } else {\n        traficLayer?.target?.removeGoogleLayer('TrafficLayer')\n      }\n    }\n  }, [traffic, traficLayer])\n\n  useEffect(() => {\n    if (map) {\n      // For 500 ms, remove the layer from DOM, then insert new, so that google layer gets changed\n      setLayerPermission(false)\n\n      setType(tiles?.split('_')[0])\n      setSubtype(tiles?.split('_')[1])\n      setTheme(theme)\n      setPoi(poi)\n\n      setTimeout(() => setLayerPermission(true), 100)\n    }\n  }, [tiles, theme, poi, map])\n\n  const googleLayerAdded = (layer: any) => {\n    setTrafficLayer(layer)\n  }\n\n  return map ? (\n    <React.Fragment>\n      {layerPermission && (\n        <React.Fragment>\n          {type === 'osm' && subtype && (\n            <TileLayer url={getTileUrl(subtype)} attribution='' />\n          )}\n\n          {type === 'google' && subtype && (\n            <ReactLeafletGoogleLayer\n              useGoogMapsLoader={false}\n              continuousWorld\n              onAdd={(layer: any) => googleLayerAdded(layer)}\n              googleMapsLoaderConf={{ KEY: googleApiKey }}\n              type={subtype as tGoogleMutantType}\n              styles={\n                _theme && _theme === 'dark'\n                  ? DARK[_poi ? 'poi' : 'noPoi']\n                  : LIGHT[_poi ? 'poi' : 'noPoi']\n              }\n            />\n          )}\n          {/* Rular Layer */}\n          {rulerControl && <WrappedMeasureControl {...measureOptions} />}\n        </React.Fragment>\n      )}\n    </React.Fragment>\n  ) : null\n}\n\nexport default React.memo(LeafletTileLayer)\n"]},"metadata":{},"sourceType":"module"}