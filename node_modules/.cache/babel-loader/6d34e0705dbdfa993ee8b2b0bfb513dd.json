{"ast":null,"code":"import _defineProperty from \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _toConsumableArray from \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/organisms/ListView/index.tsx\";\n\n/**\n * https://codesandbox.io/s/react-window-sticky-grid-liwsd?file=/src/index.js:2997-3014\n */\nimport React, { useEffect, useState, useCallback, useRef, forwardRef, createContext } from 'react';\nimport { // FixedSizeList,\n// ListOnScrollProps,\n// ListChildComponentProps,\nVariableSizeGrid // GridOnScrollProps,\n, areEqual } from 'react-window';\nimport { useTable, useFlexLayout, useResizeColumns, useSortBy, usePagination, useFilters, useColumnOrder } from 'react-table';\nimport Box from '../../atoms/Box'; // import FontIcon from '../../atoms/FontIcon'\n\nimport PaginationWrapper from './utils/components/PaginationWrapper';\nimport { defaultColumn, combinedSortOptions, handleCellMouseEnter, handleCellMouseLeave, getRenderedCursor, calculateColumnsWidth } from './utils/helpers'; // import Loader from '../../atoms/Loader'\n\nimport { useCustomFilters } from './utils/useCustomFilters';\nimport IconButton from '../../atoms/IconButton';\nimport ListViewStyled from './styles/ListViewStyled';\nimport TableStyled from './styles/TableStyled';\nimport TableBodyStyled from './styles/TableBodyStyled';\nimport ColumnResizerStyled from './styles/ColumnResizerStyled';\nimport ShowHideColumnPopup from '../../molecules/ShowHideColumnPopup';\nimport NoDataFoundComponent from './styles/NoDataFound';\nimport { monthNamesShort } from '../../../utilities/helpers';\nimport Typography from '../../atoms/Typography';\nimport { Shimmer } from 'react-shimmer';\nimport { useToast } from '../../molecules/Toast';\nimport Tooltip from '../../molecules/Tooltip';\nimport HeaderSelectAll from './utils/components/HeaderSelectAll';\nimport RowSelectCell from './utils/components/RowSelectCell';\nimport { TableCellStyledNew } from './styles/TableGridStyles';\nimport Position from '../../molecules/Position';\nimport TableHeaderCell from './utils/components/TableHeaderCell';\nimport ColumnOptions from './utils/components/ColumnOptions';\nimport ColumnHeadingStyled from './styles/ColumnHeadingStyled';\nimport TableHeadingContainer from './styles/TableHeadingContainer';\nimport TableHeadingStyled from './styles/TableHeadingStyled';\nimport ColumnFilterLoading from './styles/ColumnFilterLoading';\nimport ScrollOverlay from './styles/ScrollOverlay';\nimport FontIcon from '../../atoms/FontIcon';\nimport FavouriteStarStyle from './styles/FavouriteStarStyle';\n\nvar defaultCallback = function defaultCallback() {};\n\nvar StickyGridContext = createContext({});\nStickyGridContext.displayName = 'StickyGridContext';\n\nvar ListView = function ListView(_ref) {\n  var _ref$id = _ref.id,\n      id = _ref$id === void 0 ? '' : _ref$id,\n      _ref$columns = _ref.columns,\n      columns = _ref$columns === void 0 ? [] : _ref$columns,\n      _ref$data = _ref.data,\n      data = _ref$data === void 0 ? [] : _ref$data,\n      _ref$loading = _ref.loading,\n      loading = _ref$loading === void 0 ? false : _ref$loading,\n      _ref$isColumnLoading = _ref.isColumnLoading,\n      isColumnLoading = _ref$isColumnLoading === void 0 ? false : _ref$isColumnLoading,\n      _ref$totalRows = _ref.totalRows,\n      totalRows = _ref$totalRows === void 0 ? 0 : _ref$totalRows,\n      _ref$isEditMode = _ref.isEditMode,\n      isEditMode = _ref$isEditMode === void 0 ? false : _ref$isEditMode,\n      permanentColumns = _ref.permanentColumns,\n      _ref$children = _ref.children;\n  _ref$children = _ref$children === void 0 ? {\n    ActionBar: /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 16\n      }\n    }),\n    NoDataFound: /*#__PURE__*/React.createElement(NoDataFoundComponent, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 18\n      }\n    }, \"No Data Available\"),\n    IconBar: /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 14\n      }\n    })\n  } : _ref$children;\n\n  var _ref$children$ActionB = _ref$children.ActionBar,\n      ActionBar = _ref$children$ActionB === void 0 ? /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 17\n    }\n  }) : _ref$children$ActionB,\n      _ref$children$NoDataF = _ref$children.NoDataFound,\n      NoDataFound = _ref$children$NoDataF === void 0 ? /*#__PURE__*/React.createElement(NoDataFoundComponent, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }\n  }, \"No Data Available\") : _ref$children$NoDataF,\n      _ref$children$IconBar = _ref$children.IconBar,\n      IconBar = _ref$children$IconBar === void 0 ? /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 15\n    }\n  }) : _ref$children$IconBar,\n      _ref$rowIdentifier = _ref.rowIdentifier,\n      rowIdentifier = _ref$rowIdentifier === void 0 ? 'id' : _ref$rowIdentifier,\n      _ref$hasRowSelectionW = _ref.hasRowSelectionWithEdit,\n      hasRowSelectionWithEdit = _ref$hasRowSelectionW === void 0 ? false : _ref$hasRowSelectionW,\n      _ref$hasRowSelection = _ref.hasRowSelection,\n      hasRowSelection = _ref$hasRowSelection === void 0 ? false : _ref$hasRowSelection,\n      _ref$hasSelectAllRows = _ref.hasSelectAllRows,\n      hasSelectAllRows = _ref$hasSelectAllRows === void 0 ? true : _ref$hasSelectAllRows,\n      _ref$onRowSelect = _ref.onRowSelect,\n      onRowSelect = _ref$onRowSelect === void 0 ? defaultCallback : _ref$onRowSelect,\n      _ref$onRowEditClick = _ref.onRowEditClick,\n      onRowEditClick = _ref$onRowEditClick === void 0 ? defaultCallback : _ref$onRowEditClick,\n      _ref$onSortChange = _ref.onSortChange,\n      onSortChange = _ref$onSortChange === void 0 ? defaultCallback : _ref$onSortChange,\n      _ref$onFetchData = _ref.onFetchData,\n      onFetchData = _ref$onFetchData === void 0 ? defaultCallback : _ref$onFetchData,\n      _ref$onSaveColumnPref = _ref.onSaveColumnPreferences,\n      onSaveColumnPreferences = _ref$onSaveColumnPref === void 0 ? defaultCallback : _ref$onSaveColumnPref,\n      _ref$paginationPageSi = _ref.paginationPageSize,\n      paginationPageSize = _ref$paginationPageSi === void 0 ? 50 : _ref$paginationPageSi,\n      _ref$onShowMoreColumn = _ref.onShowMoreColumns,\n      onShowMoreColumns = _ref$onShowMoreColumn === void 0 ? defaultCallback : _ref$onShowMoreColumn,\n      _ref$onApply = _ref.onApply,\n      _onApply = _ref$onApply === void 0 ? defaultCallback : _ref$onApply,\n      _ref$onPageChange = _ref.onPageChange,\n      onPageChange = _ref$onPageChange === void 0 ? defaultCallback : _ref$onPageChange,\n      _ref$sorts = _ref.sorts,\n      sorts = _ref$sorts === void 0 ? [] : _ref$sorts,\n      _ref$filters = _ref.filters,\n      filtersObject = _ref$filters === void 0 ? {} : _ref$filters,\n      _ref$onFilterChange = _ref.onFilterChange,\n      onFilterChange = _ref$onFilterChange === void 0 ? defaultCallback : _ref$onFilterChange,\n      _ref$hideRefresh = _ref.hideRefresh,\n      hideRefresh = _ref$hideRefresh === void 0 ? false : _ref$hideRefresh,\n      _ref$hideColumnSettin = _ref.hideColumnSettings,\n      hideColumnSettings = _ref$hideColumnSettin === void 0 ? false : _ref$hideColumnSettin,\n      _ref$hidePaginationBa = _ref.hidePaginationBar,\n      hidePaginationBar = _ref$hidePaginationBa === void 0 ? false : _ref$hidePaginationBa,\n      _ref$onResize = _ref.onResize,\n      onResize = _ref$onResize === void 0 ? defaultCallback : _ref$onResize,\n      _ref$disableScrollOve = _ref.disableScrollOverlay,\n      disableScrollOverlay = _ref$disableScrollOve === void 0 ? false : _ref$disableScrollOve,\n      _ref$hideToolbar = _ref.hideToolbar,\n      hideToolbar = _ref$hideToolbar === void 0 ? false : _ref$hideToolbar,\n      _ref$heightBuffer = _ref.heightBuffer,\n      heightBuffer = _ref$heightBuffer === void 0 ? 42 : _ref$heightBuffer,\n      _ref$rowSelectionRese = _ref.rowSelectionResetter,\n      rowSelectionResetter = _ref$rowSelectionRese === void 0 ? 0 : _ref$rowSelectionRese,\n      _ref$isTotalCountLoad = _ref.isTotalCountLoading,\n      isTotalCountLoading = _ref$isTotalCountLoad === void 0 ? false : _ref$isTotalCountLoad,\n      _ref$moreResultsExist = _ref.moreResultsExists,\n      moreResultsExists = _ref$moreResultsExist === void 0 ? false : _ref$moreResultsExist,\n      hasRadioSelection = _ref.hasRadioSelection,\n      labels = _ref.labels,\n      _ref$showFavouriteSta = _ref.showFavouriteStar,\n      showFavouriteStar = _ref$showFavouriteSta === void 0 ? false : _ref$showFavouriteSta,\n      _ref$disableNext = _ref.disableNext,\n      disableNext = _ref$disableNext === void 0 ? false : _ref$disableNext,\n      rest = _objectWithoutProperties(_ref, [\"id\", \"columns\", \"data\", \"loading\", \"isColumnLoading\", \"totalRows\", \"isEditMode\", \"permanentColumns\", \"children\", \"rowIdentifier\", \"hasRowSelectionWithEdit\", \"hasRowSelection\", \"hasSelectAllRows\", \"onRowSelect\", \"onRowEditClick\", \"onSortChange\", \"onFetchData\", \"onSaveColumnPreferences\", \"paginationPageSize\", \"onShowMoreColumns\", \"onApply\", \"onPageChange\", \"sorts\", \"filters\", \"onFilterChange\", \"hideRefresh\", \"hideColumnSettings\", \"hidePaginationBar\", \"onResize\", \"disableScrollOverlay\", \"hideToolbar\", \"heightBuffer\", \"rowSelectionResetter\", \"isTotalCountLoading\", \"moreResultsExists\", \"hasRadioSelection\", \"labels\", \"showFavouriteStar\", \"disableNext\"]);\n\n  var _useState = useState(Math.ceil(totalRows / 25)),\n      _useState2 = _slicedToArray(_useState, 2),\n      pageCount = _useState2[0],\n      setPageCount = _useState2[1];\n\n  var _useState3 = useState(new Date()),\n      _useState4 = _slicedToArray(_useState3, 2),\n      lastUpdated = _useState4[0],\n      setLastUpdated = _useState4[1];\n\n  var _useState5 = useState({}),\n      _useState6 = _slicedToArray(_useState5, 2),\n      selectedRows = _useState6[0],\n      setSelectedRows = _useState6[1];\n\n  var _useState7 = useState({}),\n      _useState8 = _slicedToArray(_useState7, 2),\n      fetchDataRequestObj = _useState8[0],\n      setFetchDataRequestObj = _useState8[1];\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      tableMounted = _useState10[0],\n      setTableMounted = _useState10[1];\n\n  var _useState11 = useState(rowSelectionResetter),\n      _useState12 = _slicedToArray(_useState11, 2),\n      resetRowSelection = _useState12[0],\n      setResetRowSelection = _useState12[1];\n\n  var tableRef = useRef(null);\n  var toast = useToast();\n\n  var _useState13 = useState(400),\n      _useState14 = _slicedToArray(_useState13, 2),\n      height = _useState14[0],\n      setHeight = _useState14[1];\n\n  var _useState15 = useState(400),\n      _useState16 = _slicedToArray(_useState15, 2),\n      gridWidth = _useState16[0],\n      setGridWidth = _useState16[1];\n\n  var _useState17 = useState(30),\n      _useState18 = _slicedToArray(_useState17, 1),\n      rowHtPixel = _useState18[0];\n\n  var _useState19 = useState(rowHtPixel * 25),\n      _useState20 = _slicedToArray(_useState19, 2),\n      tableHtPixel = _useState20[0],\n      setTableHtPixel = _useState20[1];\n\n  React.useLayoutEffect(function () {\n    var _tableRef$current, _tableRef$current2;\n\n    setHeight((((_tableRef$current = tableRef.current) === null || _tableRef$current === void 0 ? void 0 : _tableRef$current.getBoundingClientRect().height) || 0) - heightBuffer);\n    setGridWidth(((_tableRef$current2 = tableRef.current) === null || _tableRef$current2 === void 0 ? void 0 : _tableRef$current2.getBoundingClientRect().width) || 0);\n    window.addEventListener('resize', function () {\n      var _tableRef$current3, _tableRef$current4;\n\n      setHeight((((_tableRef$current3 = tableRef.current) === null || _tableRef$current3 === void 0 ? void 0 : _tableRef$current3.getBoundingClientRect().height) || 0) - heightBuffer);\n      setGridWidth(((_tableRef$current4 = tableRef.current) === null || _tableRef$current4 === void 0 ? void 0 : _tableRef$current4.getBoundingClientRect().width) || 0);\n      onResize();\n    });\n  }, []); // Use the state and functions returned from useTable to build your UI\n\n  var instance = useTable({\n    columns: columns,\n    data: data,\n    defaultColumn: defaultColumn,\n    manualSortBy: true,\n    manualPagination: true,\n    manualFilters: true,\n    pageCount: pageCount,\n    // hasRadioSelection,\n    initialState: {\n      pageSize: paginationPageSize,\n      pageIndex: 0,\n      hiddenColumns: columns.filter(function (c) {\n        return c.isVisible === false;\n      }).map(function (c) {\n        return c.accessor;\n      }),\n      sortBy: sorts\n    }\n  }, useFilters, useSortBy, usePagination, useFlexLayout, useResizeColumns, // useRowSelect,\n  useColumnOrder, function (hooks) {\n    /** No Checkbox & Edit button */\n    // if (!hasRowSelection && !hasRowSelectionWithEdit) {\n    //   return\n    // }\n    var rowSelectColumns = [];\n\n    if (hasRowSelection) {\n      rowSelectColumns.push({\n        id: 'selection',\n        width: 40,\n        maxWidth: 40,\n        isVisible: hasRowSelection,\n\n        /** Header Select all Checkbox */\n        Header: HeaderSelectAll,\n\n        /** Row-level checkbox */\n        Cell: RowSelectCell\n      });\n    }\n\n    if (hasRowSelectionWithEdit) {\n      rowSelectColumns.push({\n        id: 'selectionWithEdit',\n        width: 50,\n        maxWidth: 50,\n        isVisible: hasRowSelectionWithEdit,\n\n        /** Header Select all Checkbox */\n        Header: HeaderSelectAll,\n\n        /** Row-level checkbox */\n        Cell: RowSelectCell\n      });\n    }\n\n    hooks.visibleColumns.push(function (columns) {\n      return [].concat(rowSelectColumns, _toConsumableArray(columns));\n    });\n  });\n  var rows = instance.rows,\n      allColumns = instance.allColumns,\n      headerGroups = instance.headerGroups,\n      getTableBodyProps = instance.getTableBodyProps,\n      prepareRow = instance.prepareRow,\n      toggleHideColumn = instance.toggleHideColumn,\n      visibleColumns = instance.visibleColumns,\n      gotoPage = instance.gotoPage,\n      totalColumnsWidth = instance.totalColumnsWidth,\n      _instance$state = instance.state,\n      sortBy = _instance$state.sortBy,\n      pageSize = _instance$state.pageSize,\n      pageIndex = _instance$state.pageIndex;\n\n  var _useState21 = useState(function () {\n    var visibleCount = 0;\n    var filteredColumns = allColumns.filter(function (column) {\n      if (column.isVisible) {\n        visibleCount++;\n      }\n\n      return column.id !== 'selection' && column.id !== 'selectionWithEdit';\n    });\n    return filteredColumns.map(function (column) {\n      return {\n        id: column.id,\n        value: column.Header || '',\n        checked: column.isVisible !== false,\n        disabled: visibleCount <= 3 && column.isVisible !== false\n      };\n    });\n  }),\n      _useState22 = _slicedToArray(_useState21, 2),\n      showHideColumns = _useState22[0],\n      setShowHideColumns = _useState22[1];\n\n  var _useState23 = useState(_toConsumableArray(showHideColumns)),\n      _useState24 = _slicedToArray(_useState23, 2),\n      appliedShowHideColumns = _useState24[0],\n      setAppliedShowHideColumns = _useState24[1];\n\n  var _useState25 = useState(visibleColumns.length + (hasRowSelection || hasRowSelectionWithEdit ? -1 : 0)),\n      _useState26 = _slicedToArray(_useState25, 2),\n      columnCheckedCount = _useState26[0],\n      setColumnCheckedCount = _useState26[1]; // filtaralable columns count\n\n\n  var filterableColumnsCount = React.useMemo(function () {\n    return columns.filter(function (column) {\n      return column === null || column === void 0 ? void 0 : column.isFilterable;\n    }).length;\n  }, [columns]);\n  useEffect(function () {\n    var _gridMiddle$current;\n\n    var visibleColumnsCount = 0;\n    var newColumns = columns.map(function (column) {\n      if (column.isVisible !== false) {\n        visibleColumnsCount++;\n      }\n\n      return {\n        id: column.accessor,\n        value: column.Header || '',\n        checked: column.isVisible !== false\n      };\n    }).map(function (column) {\n      if (visibleColumnsCount <= 3 && column.checked) {\n        return _objectSpread(_objectSpread({}, column), {}, {\n          disabled: true\n        });\n      } else {\n        return column;\n      }\n    });\n    setShowHideColumns(newColumns);\n    setAppliedShowHideColumns(_toConsumableArray(newColumns));\n    setColumnCheckedCount(visibleColumnsCount);\n    (_gridMiddle$current = gridMiddle.current) === null || _gridMiddle$current === void 0 ? void 0 : _gridMiddle$current.resetAfterColumnIndex(0, true);\n  }, [columns]);\n  useEffect(function () {\n    if (Object.keys(fetchDataRequestObj).length > 0) {\n      // not empty condition\n      onFetchData(fetchDataRequestObj);\n    }\n  }, [fetchDataRequestObj]);\n  useEffect(function () {\n    setSelectedRows({});\n  }, [resetRowSelection]);\n  useEffect(function () {\n    setResetRowSelection(rowSelectionResetter);\n  }, [rowSelectionResetter]);\n\n  var _useCustomFilters = useCustomFilters(filtersObject),\n      getTextFieldProps = _useCustomFilters.getTextFieldProps,\n      getSelectFieldProps = _useCustomFilters.getSelectFieldProps,\n      combinedFilterOptions = _useCustomFilters.combinedFilterOptions,\n      filters = _useCustomFilters.filters,\n      setFilters = _useCustomFilters.setFilters;\n\n  var _useState27 = useState({\n    left: _defineProperty({}, hasRowSelectionWithEdit ? 'selectionWithEdit' : 'selection', {\n      offset: 0,\n      width: hasRowSelectionWithEdit ? 50 : hasRowSelection ? 40 : 0\n    }),\n    right: {}\n  }),\n      _useState28 = _slicedToArray(_useState27, 2),\n      pinnedColumns = _useState28[0],\n      setPinnedColumns = _useState28[1];\n\n  var _useState29 = useState({\n    left: hasRowSelectionWithEdit ? 50 : hasRowSelection ? 40 : 0,\n    right: 0\n  }),\n      _useState30 = _slicedToArray(_useState29, 2),\n      pinnedColumnsTotalWidth = _useState30[0],\n      setPinnedColumnsTotalWidth = _useState30[1];\n\n  useEffect(function () {\n    var _gridMiddle$current2;\n\n    if (hasRowSelection) {\n      toggleHideColumn('selection', false);\n      toggleHideColumn('selectionWithEdit', true);\n      setPinnedColumns(function (pC) {\n        var newPinned = _objectSpread(_objectSpread({}, pC), {}, {\n          left: _objectSpread(_objectSpread({}, pC.left), {}, {\n            selection: {\n              offset: 0,\n              width: 40\n            }\n          })\n        });\n\n        var totalWidth = 0;\n        Object.keys(newPinned.left).forEach(function (id) {\n          totalWidth += newPinned.left[id].width;\n\n          if (id !== 'selection' && id !== 'selectionWithEdit') {\n            newPinned.left[id].offset += 40;\n          }\n        });\n        setPinnedColumnsTotalWidth(function (t) {\n          return _objectSpread(_objectSpread({}, t), {}, {\n            left: totalWidth\n          });\n        });\n        return newPinned;\n      });\n    } else {\n      setPinnedColumns(function (pC) {\n        var newPinned = _objectSpread({}, pC);\n\n        delete newPinned.left.selection;\n        var totalWidth = 0;\n        Object.keys(newPinned.left).forEach(function (id) {\n          totalWidth += newPinned.left[id].width;\n\n          if (id !== 'selection' && id !== 'selectionWithEdit') {\n            newPinned.left[id].offset -= 40;\n          }\n        });\n        setPinnedColumnsTotalWidth(function (t) {\n          return _objectSpread(_objectSpread({}, t), {}, {\n            // left: t.left >= 40 ? t.left - 40 : t.left\n            left: totalWidth\n          });\n        });\n        return newPinned;\n      });\n      toggleHideColumn('selection', true);\n      toggleHideColumn('selectionWithEdit', !hasRowSelectionWithEdit);\n    }\n\n    (_gridMiddle$current2 = gridMiddle.current) === null || _gridMiddle$current2 === void 0 ? void 0 : _gridMiddle$current2.resetAfterColumnIndex(0, true);\n  }, [hasRowSelection]);\n  useEffect(function () {\n    var _gridMiddle$current3;\n\n    if (hasRowSelectionWithEdit) {\n      setPinnedColumns(function (pC) {\n        var newPinned = _objectSpread(_objectSpread({}, pC), {}, {\n          left: _objectSpread(_objectSpread({}, pC.left), {}, {\n            selectionWithEdit: {\n              offset: 0,\n              width: 50\n            }\n          })\n        });\n\n        var totalWidth = 0;\n        Object.keys(newPinned.left).forEach(function (id) {\n          totalWidth += newPinned.left[id].width;\n\n          if (id !== 'selection' && id !== 'selectionWithEdit') {\n            newPinned.left[id].offset += 50;\n          }\n        }); // setPinnedColumnsTotalWidth((t) => ({ ...t, left: t.left + 50 }))\n\n        setPinnedColumnsTotalWidth(function (t) {\n          return _objectSpread(_objectSpread({}, t), {}, {\n            left: totalWidth\n          });\n        });\n        return newPinned;\n      });\n      toggleHideColumn('selectionWithEdit', false);\n      toggleHideColumn('selection', true);\n    } else {\n      setPinnedColumns(function (pC) {\n        var newPinned = _objectSpread({}, pC);\n\n        delete newPinned.left.selectionWithEdit;\n        var totalWidth = 0;\n        Object.keys(newPinned.left).forEach(function (id) {\n          totalWidth += newPinned.left[id].width;\n\n          if (id !== 'selection' && id !== 'selectionWithEdit') {\n            newPinned.left[id].offset -= 50;\n          }\n        });\n        setPinnedColumnsTotalWidth(function (t) {\n          return _objectSpread(_objectSpread({}, t), {}, {\n            // left: t.left >= 50 ? t.left - 50 : t.left\n            left: totalWidth\n          });\n        });\n        return newPinned;\n      });\n      toggleHideColumn('selectionWithEdit', true);\n      toggleHideColumn('selection', !hasRowSelection);\n    }\n\n    (_gridMiddle$current3 = gridMiddle.current) === null || _gridMiddle$current3 === void 0 ? void 0 : _gridMiddle$current3.resetAfterColumnIndex(0, true);\n  }, [hasRowSelectionWithEdit]);\n  /** Re-Calculate pageCount whenever totalRows or pageSize chanages */\n\n  useEffect(function () {\n    setPageCount(Math.ceil(totalRows / pageSize));\n  }, [totalRows, pageSize]);\n  React.useLayoutEffect(function () {\n    if (gridMiddle && gridMiddle.current && pageSize) {\n      var theElemForRollScParent = gridMiddle.current[\"_outerRef\"];\n      var theElemForRollSc = theElemForRollScParent === null || theElemForRollScParent === void 0 ? void 0 : theElemForRollScParent.childNodes[0];\n      var visibleRows = data.length < pageSize ? data.length : pageSize;\n      theElemForRollSc.style.height = \"\".concat(rowHtPixel * visibleRows, \"px\");\n      setTableHtPixel(rowHtPixel * visibleRows);\n    }\n  }, [pageSize, data.length]);\n  /** Callback when sort changes */\n\n  useEffect(function () {\n    onSortChange(combinedSortOptions(sortBy), sortBy);\n  }, [sortBy]);\n  /** To Prevent calling extra onFetchData on inital load */\n\n  var _useState31 = useState(),\n      _useState32 = _slicedToArray(_useState31, 2),\n      prevFilters = _useState32[0],\n      setPrevFilters = _useState32[1];\n\n  useEffect(function () {\n    if (pageIndex === 0) {\n      var combFilters = combinedFilterOptions();\n\n      if (combFilters.searchBy !== (prevFilters === null || prevFilters === void 0 ? void 0 : prevFilters.searchBy) || combFilters.searchText !== (prevFilters === null || prevFilters === void 0 ? void 0 : prevFilters.searchText)) {\n        setFetchDataRequestObj({\n          pageSize: pageSize,\n          pageNumber: pageIndex + 1,\n          sortOptions: combinedSortOptions(sortBy),\n          filterOptions: combFilters,\n          apis: {\n            setSelection: setSelectedRows,\n            resetSelection: function resetSelection() {\n              return setSelectedRows({});\n            }\n          }\n        });\n        onFilterChange(combFilters, filters);\n        setPrevFilters(combFilters);\n      }\n    } else {\n      gotoPage(0);\n    }\n\n    setSelectedRows({});\n  }, [filters]);\n  /** Callback when Re-fetching server side data is required */\n\n  useEffect(function () {\n    // setLastUpdated(new Date())\n    setFetchDataRequestObj({\n      pageSize: pageSize,\n      pageNumber: pageIndex + 1,\n      sortOptions: combinedSortOptions(sortBy),\n      filterOptions: combinedFilterOptions(),\n      apis: {\n        setSelection: setSelectedRows,\n        resetSelection: function resetSelection() {\n          return setSelectedRows({});\n        }\n      }\n    });\n  }, [sortBy, pageSize, pageIndex]);\n  useEffect(function () {\n    if (pageIndex === 0) {\n      setFetchDataRequestObj({\n        pageSize: pageSize,\n        pageNumber: 1,\n        sortOptions: combinedSortOptions(sortBy),\n        filterOptions: combinedFilterOptions(),\n        apis: {\n          setSelection: setSelectedRows,\n          resetSelection: function resetSelection() {\n            return setSelectedRows({});\n          }\n        }\n      });\n    } else {\n      gotoPage(0);\n    }\n\n    setSelectedRows({});\n  }, [onFetchData]);\n  /** Refresh Data from Server callback */\n\n  var handleRefresh = useCallback(function () {\n    setLastUpdated(new Date());\n    onFetchData({\n      pageSize: pageSize,\n      pageNumber: pageIndex + 1,\n      sortOptions: combinedSortOptions(sortBy),\n      filterOptions: combinedFilterOptions(),\n      apis: {\n        setSelection: setSelectedRows,\n        resetSelection: function resetSelection() {\n          return setSelectedRows({});\n        }\n      }\n    });\n  }, [onFetchData, combinedFilterOptions, pageSize, pageIndex, sortBy]);\n  /** on the very first load of the table we wish to set it mounted\n  once it is mounted only then the ref will be available to calculate dynamic height for react-window */\n\n  useEffect(function () {\n    setTableMounted(true);\n  }, []);\n  var gridMiddle = React.useRef(null);\n  var handleSelectAllColumns = React.useCallback(function (isSelectAll) {\n    if (isSelectAll) {\n      setShowHideColumns(function (cList) {\n        return cList.map(function (c) {\n          return _objectSpread(_objectSpread({}, c), {}, {\n            checked: true,\n            disabled: false\n          });\n        });\n      });\n      setColumnCheckedCount(showHideColumns.length);\n    } else {\n      if (permanentColumns) {\n        setShowHideColumns(function (cList) {\n          return cList.map(function (c) {\n            return _objectSpread(_objectSpread({}, c), {}, {\n              checked: permanentColumns === null || permanentColumns === void 0 ? void 0 : permanentColumns[c.id],\n              disabled: permanentColumns === null || permanentColumns === void 0 ? void 0 : permanentColumns[c.id]\n            });\n          });\n        });\n        setColumnCheckedCount(Object.keys(permanentColumns).length);\n      } else {\n        setShowHideColumns(function (cList) {\n          return cList.map(function (c, i) {\n            return _objectSpread(_objectSpread({}, c), {}, {\n              checked: i < 3,\n              disabled: i < 3\n            });\n          });\n        });\n        setColumnCheckedCount(3);\n      }\n    }\n  }, [showHideColumns]);\n  var handleColumnShowHide = React.useCallback(function (id, checked) {\n    setShowHideColumns(function (cList) {\n      return cList.map(function (c) {\n        var isDisabled = !checked && columnCheckedCount === (permanentColumns ? Object.keys(permanentColumns).length : 3) + 1;\n        return c.id === id ? _objectSpread(_objectSpread({}, c), {}, {\n          checked: checked,\n          disabled: isDisabled && checked\n        }) : _objectSpread(_objectSpread({}, c), {}, {\n          disabled: isDisabled && c.checked\n        });\n      });\n    });\n    setColumnCheckedCount(function (count) {\n      return count + (checked ? 1 : -1);\n    });\n  }, [showHideColumns, columnCheckedCount, permanentColumns, setShowHideColumns, setColumnCheckedCount]);\n  /** To adjust the Width of columns when columns are less than available space\n   * UseEffect on change of Columns\n   * UseEffect on change of appliedShowHideColumns (Visibility Toggle)\n   */\n\n  useEffect(function () {\n    var _gridMiddle$current4;\n\n    // const pinnedLeftCount = Object.keys(pinnedColumns.left).length\n    // const pinnedRightCount = Object.keys(pinnedColumns.right).length\n    // for (let i = 0; i < pinnedLeftCount; i++) {\n    //   gridMiddle.current?.resetAfterColumnIndex(i, true)\n    // }\n    // for (let i = 0; i < pinnedRightCount; i++) {\n    //   gridMiddle.current?.resetAfterColumnIndex(\n    //     visibleColumns.length - i - 1,\n    //     true\n    //   )\n    // }\n    (_gridMiddle$current4 = gridMiddle.current) === null || _gridMiddle$current4 === void 0 ? void 0 : _gridMiddle$current4.resetAfterColumnIndex(0, true);\n  }, [pinnedColumns]);\n  var RenderCellItemData = React.useMemo(function () {\n    return {\n      rows: rows,\n      pinnedColumns: pinnedColumns,\n      isEditMode: isEditMode,\n      loading: loading,\n      selectedRows: selectedRows,\n      rowIdentifier: rowIdentifier\n    };\n  }, [rows, pinnedColumns, isEditMode, loading, selectedRows, rowIdentifier]);\n  var RenderCell = React.memo(function (_ref2) {\n    var _cell$row, _cell$row$original, _cell$row$original$er;\n\n    var columnIndex = _ref2.columnIndex,\n        rowIndex = _ref2.rowIndex,\n        style = _ref2.style,\n        data = _ref2.data;\n    var rows = data.rows,\n        pinnedColumns = data.pinnedColumns,\n        isEditMode = data.isEditMode,\n        loading = data.loading,\n        selectedRows = data.selectedRows,\n        rowIdentifier = data.rowIdentifier;\n    var row = rows[rowIndex];\n    prepareRow(row);\n    var cell = row.cells[columnIndex];\n    var classNames = \"cell--hover\".concat(rowIndex);\n    classNames += \" \".concat(selectedRows[cell.row.original[rowIdentifier]] ? 'selected' : '');\n    classNames += \" \".concat(rowIndex === rows.length - 1 ? 'last-row' : '');\n\n    if (pinnedColumns.left[cell.column.id] || pinnedColumns.right[cell.column.id] || cell.column.id === 'selection' || cell.column.id === 'selectionWithEdit') {\n      return null;\n    }\n\n    return cell && cell.column && /*#__PURE__*/React.createElement(TableCellStyledNew, Object.assign({}, cell.getCellProps(), {\n      style: style,\n      onMouseEnter: function onMouseEnter() {\n        return handleCellMouseEnter(rowIndex);\n      },\n      onMouseLeave: function onMouseLeave() {\n        return handleCellMouseLeave(rowIndex);\n      },\n      className: classNames,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 673,\n        columnNumber: 11\n      }\n    }), isEditMode && cell.column.isEditable && !!selectedRows[cell.row.original[rowIdentifier]] ? cell.render('EditableCell', _objectSpread(_objectSpread({}, cell), {}, {\n      error: !!(cell === null || cell === void 0 ? void 0 : (_cell$row = cell.row) === null || _cell$row === void 0 ? void 0 : (_cell$row$original = _cell$row.original) === null || _cell$row$original === void 0 ? void 0 : (_cell$row$original$er = _cell$row$original.errorFields) === null || _cell$row$original$er === void 0 ? void 0 : _cell$row$original$er[cell.column.id])\n    })) : loading ? /*#__PURE__*/React.createElement(Shimmer, {\n      width: Number(cell.column.width),\n      height: 20,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 688,\n        columnNumber: 15\n      }\n    }) : cell.render('Cell', _objectSpread(_objectSpread({}, cell), {}, {\n      selectedRows: selectedRows,\n      loading: loading,\n      isEditMode: isEditMode,\n      hasRadioSelection: hasRadioSelection\n    })), /*#__PURE__*/React.createElement(ColumnResizerStyled, Object.assign({}, cell.column.getResizerProps(), {\n      isResizing: cell.column.isResizing,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 699,\n        columnNumber: 13\n      }\n    })));\n  }, areEqual);\n\n  var headerBuilder = function headerBuilder(minColumn, maxColumn, visibleColumns, pinnedColumns) {\n    var columns = [];\n\n    for (var i = minColumn; i <= maxColumn; i++) {\n      var _visibleColumns$i, _visibleColumns$i2;\n\n      if (!pinnedColumns.left[(_visibleColumns$i = visibleColumns[i]) === null || _visibleColumns$i === void 0 ? void 0 : _visibleColumns$i.id] && !pinnedColumns.right[(_visibleColumns$i2 = visibleColumns[i]) === null || _visibleColumns$i2 === void 0 ? void 0 : _visibleColumns$i2.id]) {\n        columns.push({\n          position: 'absolute',\n          top: 0,\n          height: 'auto',\n          width: visibleColumns[i].width,\n          left: visibleColumns[i].totalLeft,\n          columnInstance: visibleColumns[i],\n          accessor: visibleColumns[i].id\n        });\n      }\n    }\n\n    return columns;\n  };\n\n  var headerBuilderPinnedLeft = function headerBuilderPinnedLeft(visibleColumns, pinnedColumns) {\n    var columns = [];\n    var pinnedLeftCount = Object.keys(pinnedColumns.left).length;\n\n    for (var i = 0; i < pinnedLeftCount + 3; i++) {\n      var _visibleColumns$i3;\n\n      if (pinnedColumns.left[(_visibleColumns$i3 = visibleColumns[i]) === null || _visibleColumns$i3 === void 0 ? void 0 : _visibleColumns$i3.id]) {\n        columns.push({\n          position: 'absolute',\n          top: 0,\n          height: 'auto',\n          width: visibleColumns[i].width,\n          // left: visibleColumns[i].totalLeft,\n          left: pinnedColumns.left[visibleColumns[i].id].offset,\n          columnInstance: visibleColumns[i],\n          accessor: visibleColumns[i].id\n        });\n      }\n    }\n\n    return columns;\n  };\n\n  var headerBuilderPinnedRight = function headerBuilderPinnedRight(visibleColumns, pinnedColumns) {\n    var columns = [];\n    var pinnedRightCount = Object.keys(pinnedColumns.right).length;\n\n    for (var i = visibleColumns.length - 1; i >= visibleColumns.length - pinnedRightCount; i--) {\n      var _visibleColumns$i4;\n\n      if (pinnedColumns.right[(_visibleColumns$i4 = visibleColumns[i]) === null || _visibleColumns$i4 === void 0 ? void 0 : _visibleColumns$i4.id]) {\n        columns.push({\n          position: 'absolute',\n          top: 0,\n          height: 'auto',\n          width: visibleColumns[i].width,\n          // left: visibleColumns[i].totalLeft,\n          right: pinnedColumns.right[visibleColumns[i].id].offset,\n          columnInstance: visibleColumns[i],\n          accessor: visibleColumns[i].id\n        });\n      }\n    }\n\n    return columns;\n  };\n\n  var pinnedLeftBuilder = function pinnedLeftBuilder(minRow, maxRow, rows, pinnedColumns) {\n    var cells = [];\n    var pinnedLeftCount = Object.keys(pinnedColumns.left).length;\n\n    for (var i = minRow; i <= maxRow; i++) {\n      prepareRow(rows[i]);\n\n      for (var j = 0; j < pinnedLeftCount + 3; j++) {\n        var _rows$i, _rows$i$cells$j, _rows$i$cells$j2, _rows$i$cells$j2$colu;\n\n        if (((_rows$i = rows[i]) === null || _rows$i === void 0 ? void 0 : (_rows$i$cells$j = _rows$i.cells[j]) === null || _rows$i$cells$j === void 0 ? void 0 : _rows$i$cells$j.column) && pinnedColumns.left[(_rows$i$cells$j2 = rows[i].cells[j]) === null || _rows$i$cells$j2 === void 0 ? void 0 : (_rows$i$cells$j2$colu = _rows$i$cells$j2.column) === null || _rows$i$cells$j2$colu === void 0 ? void 0 : _rows$i$cells$j2$colu.id]) {\n          var _rows$i$cells$j$colum, _pinnedColumns$left$r, _rows$i$cells$j3, _rows$i$cells$j3$colu;\n\n          cells.push({\n            position: 'absolute',\n            cellInstance: rows[i].cells[j],\n            width: (_rows$i$cells$j$colum = rows[i].cells[j].column) === null || _rows$i$cells$j$colum === void 0 ? void 0 : _rows$i$cells$j$colum.width,\n            height: rowHtPixel,\n            left: (_pinnedColumns$left$r = pinnedColumns.left[(_rows$i$cells$j3 = rows[i].cells[j]) === null || _rows$i$cells$j3 === void 0 ? void 0 : (_rows$i$cells$j3$colu = _rows$i$cells$j3.column) === null || _rows$i$cells$j3$colu === void 0 ? void 0 : _rows$i$cells$j3$colu.id]) === null || _pinnedColumns$left$r === void 0 ? void 0 : _pinnedColumns$left$r.offset,\n            top: i * rowHtPixel\n          });\n        }\n      }\n    }\n\n    return cells;\n  };\n\n  var pinnedRightBuilder = function pinnedRightBuilder(minRow, maxRow, rows, pinnedColumns) {\n    var cells = [];\n    var pinnedRightCount = Object.keys(pinnedColumns.right).length;\n\n    for (var i = minRow; i <= maxRow; i++) {\n      prepareRow(rows[i]);\n\n      for (var j = rows[i].cells.length - 1; j >= rows[i].cells.length - pinnedRightCount; j--) {\n        var _rows$i2, _rows$i2$cells$j, _rows$i$cells$j4, _rows$i$cells$j4$colu;\n\n        if (((_rows$i2 = rows[i]) === null || _rows$i2 === void 0 ? void 0 : (_rows$i2$cells$j = _rows$i2.cells[j]) === null || _rows$i2$cells$j === void 0 ? void 0 : _rows$i2$cells$j.column) && pinnedColumns.right[(_rows$i$cells$j4 = rows[i].cells[j]) === null || _rows$i$cells$j4 === void 0 ? void 0 : (_rows$i$cells$j4$colu = _rows$i$cells$j4.column) === null || _rows$i$cells$j4$colu === void 0 ? void 0 : _rows$i$cells$j4$colu.id]) {\n          var _rows$i$cells$j$colum2, _pinnedColumns$right$, _rows$i$cells$j5, _rows$i$cells$j5$colu;\n\n          cells.push({\n            position: 'absolute',\n            cellInstance: rows[i].cells[j],\n            width: (_rows$i$cells$j$colum2 = rows[i].cells[j].column) === null || _rows$i$cells$j$colum2 === void 0 ? void 0 : _rows$i$cells$j$colum2.width,\n            height: rowHtPixel,\n            right: (_pinnedColumns$right$ = pinnedColumns.right[(_rows$i$cells$j5 = rows[i].cells[j]) === null || _rows$i$cells$j5 === void 0 ? void 0 : (_rows$i$cells$j5$colu = _rows$i$cells$j5.column) === null || _rows$i$cells$j5$colu === void 0 ? void 0 : _rows$i$cells$j5$colu.id]) === null || _pinnedColumns$right$ === void 0 ? void 0 : _pinnedColumns$right$.offset,\n            top: i * rowHtPixel\n          });\n        }\n      }\n    }\n\n    return cells;\n  };\n\n  var innerGridElementType = forwardRef(function (_ref3, ref) {\n    var children = _ref3.children,\n        rest = _objectWithoutProperties(_ref3, [\"children\"]);\n\n    // const columnsContainerRef = useRef<HTMLDivElement | null>(null)\n    var _getRenderedCursor = getRenderedCursor(children),\n        _getRenderedCursor2 = _slicedToArray(_getRenderedCursor, 4),\n        minRow = _getRenderedCursor2[0],\n        maxRow = _getRenderedCursor2[1],\n        minColumn = _getRenderedCursor2[2],\n        maxColumn = _getRenderedCursor2[3];\n\n    return /*#__PURE__*/React.createElement(StickyGridContext.Consumer, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 864,\n        columnNumber: 9\n      }\n    }, function (_ref4) {\n      var pinnedColumns = _ref4.pinnedColumns,\n          pinnedColumnsTotalWidth = _ref4.pinnedColumnsTotalWidth,\n          selectedRows = _ref4.selectedRows,\n          data = _ref4.data,\n          loading = _ref4.loading,\n          isEditMode = _ref4.isEditMode,\n          setSelectedRows = _ref4.setSelectedRows,\n          onRowSelect = _ref4.onRowSelect,\n          rowIdentifier = _ref4.rowIdentifier,\n          isColumnLoading = _ref4.isColumnLoading,\n          visibleColumns = _ref4.visibleColumns,\n          instance = _ref4.instance,\n          columns = _ref4.columns,\n          filters = _ref4.filters,\n          setFilters = _ref4.setFilters,\n          rows = _ref4.rows,\n          hasRowSelection = _ref4.hasRowSelection,\n          hasRowSelectionWithEdit = _ref4.hasRowSelectionWithEdit,\n          onRowEditClick = _ref4.onRowEditClick,\n          filterableColumnsCount = _ref4.filterableColumnsCount,\n          hasRadioSelection = _ref4.hasRadioSelection;\n      var displayColumns = headerBuilder(minColumn, maxColumn, visibleColumns, pinnedColumns);\n      var displayColumnsPinnedLeft = headerBuilderPinnedLeft(visibleColumns, pinnedColumns);\n      var displayColumnsPinnedRight = headerBuilderPinnedRight(visibleColumns, pinnedColumns);\n      var displayPinnedLeftRows = pinnedLeftBuilder(minRow, maxRow, rows, pinnedColumns);\n      var displayPinnedRightRows = pinnedRightBuilder(minRow, maxRow, rows, pinnedColumns);\n\n      var modifiedRest = _objectSpread({}, rest);\n\n      modifiedRest.style.height = tableHtPixel;\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Position, Object.assign({\n        type: \"relative\",\n        className: \"list-container\"\n      }, modifiedRest, {\n        ref: ref,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 922,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"columns-container\",\n        style: {\n          width: \"calc(100% + \".concat(pinnedColumnsTotalWidth.left, \"px + \").concat(pinnedColumnsTotalWidth.right, \"px)\"),\n          height: filterableColumnsCount === 0 ? '45px' : '70px',\n          backgroundColor: '#fff'\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 928,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"pinned-left-overlap\",\n        style: {\n          width: pinnedColumnsTotalWidth.left + 'px',\n          minWidth: pinnedColumnsTotalWidth.left + 'px'\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 936,\n          columnNumber: 21\n        }\n      }, displayColumnsPinnedLeft.map(function (_ref5) {\n        var left = _ref5.left,\n            height = _ref5.height,\n            width = _ref5.width,\n            columnInstance = _ref5.columnInstance;\n        return /*#__PURE__*/React.createElement(Position, {\n          key: columnInstance.id,\n          type: \"absolute\",\n          left: left + 'px',\n          style: {\n            height: height,\n            width: width,\n            minWidth: width\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 946,\n            columnNumber: 29\n          }\n        }, /*#__PURE__*/React.createElement(TableHeaderCell, Object.assign({\n          pinnedColumns: pinnedColumns,\n          columnInstance: columnInstance,\n          isColumnLoading: isColumnLoading,\n          instance: instance,\n          setPinnedColumns: setPinnedColumns,\n          pinnedColumnsTotalWidth: pinnedColumnsTotalWidth,\n          setPinnedColumnsTotalWidth: setPinnedColumnsTotalWidth,\n          setShowHideColumns: setShowHideColumns,\n          setColumnCheckedCount: setColumnCheckedCount,\n          columns: columns,\n          selectedRows: selectedRows,\n          data: data,\n          loading: loading,\n          isEditMode: isEditMode,\n          setSelectedRows: setSelectedRows,\n          hasSelectAllRows: hasSelectAllRows,\n          onRowSelect: onRowSelect,\n          rowIdentifier: rowIdentifier,\n          filters: filters,\n          setFilters: setFilters,\n          getTextFieldProps: getTextFieldProps,\n          getSelectFieldProps: getSelectFieldProps,\n          hideColumnSettings: hideColumnSettings,\n          hasRadioSelection: hasRadioSelection\n        }, {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 952,\n            columnNumber: 31\n          }\n        })));\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          position: 'relative',\n          width: '100%'\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 985,\n          columnNumber: 21\n        }\n      }, displayColumns.map(function (_ref6) {\n        var left = _ref6.left,\n            height = _ref6.height,\n            width = _ref6.width,\n            columnInstance = _ref6.columnInstance;\n\n        if (columnInstance.isResizing) {\n          var _gridMiddle$current5;\n\n          (_gridMiddle$current5 = gridMiddle.current) === null || _gridMiddle$current5 === void 0 ? void 0 : _gridMiddle$current5.resetAfterColumnIndex(0, false);\n        }\n\n        return /*#__PURE__*/React.createElement(Position, {\n          key: columnInstance.id,\n          type: \"absolute\",\n          left: left - pinnedColumnsTotalWidth.left + 'px',\n          style: {\n            height: height,\n            width: width\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 997,\n            columnNumber: 29\n          }\n        }, /*#__PURE__*/React.createElement(TableHeaderCell, Object.assign({\n          pinnedColumns: pinnedColumns,\n          columnInstance: columnInstance,\n          isColumnLoading: isColumnLoading,\n          instance: instance,\n          setPinnedColumns: setPinnedColumns,\n          pinnedColumnsTotalWidth: pinnedColumnsTotalWidth,\n          setPinnedColumnsTotalWidth: setPinnedColumnsTotalWidth,\n          setShowHideColumns: setShowHideColumns,\n          setColumnCheckedCount: setColumnCheckedCount,\n          columns: columns,\n          selectedRows: selectedRows,\n          data: data,\n          loading: loading,\n          isEditMode: isEditMode,\n          setSelectedRows: setSelectedRows,\n          onRowSelect: onRowSelect,\n          rowIdentifier: rowIdentifier,\n          filters: filters,\n          setFilters: setFilters,\n          getTextFieldProps: getTextFieldProps,\n          getSelectFieldProps: getSelectFieldProps,\n          hideColumnSettings: hideColumnSettings,\n          hasRadioSelection: hasRadioSelection\n        }, {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1003,\n            columnNumber: 31\n          }\n        })));\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"pinned-right-overlap\",\n        style: {\n          width: pinnedColumnsTotalWidth.right + 'px'\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1035,\n          columnNumber: 21\n        }\n      }, displayColumnsPinnedRight.map(function (_ref7) {\n        var right = _ref7.right,\n            height = _ref7.height,\n            width = _ref7.width,\n            columnInstance = _ref7.columnInstance;\n        return /*#__PURE__*/React.createElement(Position, {\n          key: columnInstance.id,\n          type: \"absolute\",\n          right: right + 'px',\n          style: {\n            height: height,\n            width: width\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1042,\n            columnNumber: 29\n          }\n        }, /*#__PURE__*/React.createElement(TableHeaderCell, Object.assign({\n          pinnedColumns: pinnedColumns,\n          columnInstance: columnInstance,\n          isColumnLoading: isColumnLoading,\n          instance: instance,\n          setPinnedColumns: setPinnedColumns,\n          pinnedColumnsTotalWidth: pinnedColumnsTotalWidth,\n          setPinnedColumnsTotalWidth: setPinnedColumnsTotalWidth,\n          setShowHideColumns: setShowHideColumns,\n          setColumnCheckedCount: setColumnCheckedCount,\n          columns: columns,\n          selectedRows: selectedRows,\n          data: data,\n          loading: loading,\n          isEditMode: isEditMode,\n          setSelectedRows: setSelectedRows,\n          onRowSelect: onRowSelect,\n          rowIdentifier: rowIdentifier,\n          filters: filters,\n          setFilters: setFilters,\n          getTextFieldProps: getTextFieldProps,\n          getSelectFieldProps: getSelectFieldProps,\n          hideColumnSettings: hideColumnSettings,\n          hasRadioSelection: hasRadioSelection\n        }, {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1048,\n            columnNumber: 31\n          }\n        })));\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"rows-container\",\n        style: {\n          top: filterableColumnsCount === 0 ? '45px' : '70px'\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1082,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"pinned-left-container\",\n        style: {\n          width: pinnedColumnsTotalWidth.left + 'px'\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1088,\n          columnNumber: 21\n        }\n      }, displayPinnedLeftRows.map(function (_ref8, j) {\n        var _cellInstance$row, _cellInstance$row$ori, _cellInstance$row$ori2;\n\n        var cellInstance = _ref8.cellInstance,\n            width = _ref8.width,\n            height = _ref8.height,\n            top = _ref8.top,\n            left = _ref8.left;\n        var rowIndex = cellInstance.row.index;\n        var classNames = \"cell--hover\".concat(rowIndex);\n        classNames += \" \".concat(selectedRows[cellInstance.row.original[rowIdentifier]] ? 'selected' : '');\n        classNames += \" \".concat(rowIndex === rows.length - 1 ? 'last-row' : '');\n        return /*#__PURE__*/React.createElement(\"div\", {\n          style: {\n            display: 'flex',\n            position: 'absolute',\n            width: \"\".concat(width, \"px\"),\n            height: \"\".concat(height, \"px\"),\n            top: \"\".concat(top, \"px\"),\n            left: \"\".concat(left, \"px\")\n          },\n          key: j,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1108,\n            columnNumber: 29\n          }\n        }, /*#__PURE__*/React.createElement(TableCellStyledNew, Object.assign({}, cellInstance.getCellProps(), {\n          className: classNames,\n          key: 'Table Cell' + cellInstance.row.original[rowIdentifier] + cellInstance.column.id,\n          onMouseEnter: function onMouseEnter() {\n            return handleCellMouseEnter(cellInstance.row.index);\n          },\n          onMouseLeave: function onMouseLeave() {\n            return handleCellMouseLeave(cellInstance.row.index);\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1119,\n            columnNumber: 31\n          }\n        }), isEditMode && cellInstance.column.isEditable && !!selectedRows[cellInstance.row.original[rowIdentifier]] ? cellInstance.render('EditableCell', _objectSpread(_objectSpread({}, cellInstance), {}, {\n          error: !!(cellInstance === null || cellInstance === void 0 ? void 0 : (_cellInstance$row = cellInstance.row) === null || _cellInstance$row === void 0 ? void 0 : (_cellInstance$row$ori = _cellInstance$row.original) === null || _cellInstance$row$ori === void 0 ? void 0 : (_cellInstance$row$ori2 = _cellInstance$row$ori.errorFields) === null || _cellInstance$row$ori2 === void 0 ? void 0 : _cellInstance$row$ori2[cellInstance.column.id])\n        })) : cellInstance.render('Cell', _objectSpread(_objectSpread({}, cellInstance), {}, {\n          selectedRows: selectedRows,\n          setSelectedRows: setSelectedRows,\n          hasRowSelection: hasRowSelection,\n          hasRowSelectionWithEdit: hasRowSelectionWithEdit,\n          onRowSelect: onRowSelect,\n          onRowEditClick: onRowEditClick,\n          rowIdentifier: rowIdentifier,\n          loading: loading,\n          isEditMode: isEditMode,\n          row: cellInstance.row,\n          rowCount: data.length,\n          hasRadioSelection: hasRadioSelection\n        }))), showFavouriteStar && /*#__PURE__*/React.createElement(FavouriteStarStyle, {\n          className: \"\".concat(selectedRows[cellInstance.row.original[rowIdentifier]] ? 'selected' : ''),\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1161,\n            columnNumber: 33\n          }\n        }, cellInstance.row.original.isFavourite && /*#__PURE__*/React.createElement(FontIcon, {\n          variant: \"star-filled\",\n          color: \"primary.main\",\n          size: \"sm\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1171,\n            columnNumber: 37\n          }\n        })));\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"data-container\",\n        style: {\n          width: \"\".concat(rest.style.width, \"px\")\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1184,\n          columnNumber: 21\n        }\n      }, children), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"pinned-right-container\",\n        style: {\n          width: pinnedColumnsTotalWidth.right + 'px'\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1190,\n          columnNumber: 21\n        }\n      }, displayPinnedRightRows.map(function (_ref9, j) {\n        var _cellInstance$row2, _cellInstance$row2$or, _cellInstance$row2$or2;\n\n        var cellInstance = _ref9.cellInstance,\n            width = _ref9.width,\n            height = _ref9.height,\n            top = _ref9.top,\n            right = _ref9.right;\n        var rowIndex = cellInstance.row.index;\n        var classNames = \"cell--hover\".concat(rowIndex);\n        classNames += \" \".concat(selectedRows[cellInstance.row.original[rowIdentifier]] ? 'selected' : '');\n        classNames += \" \".concat(rowIndex === rows.length - 1 ? 'last-row' : '');\n        return /*#__PURE__*/React.createElement(\"div\", {\n          style: {\n            position: 'absolute',\n            width: \"\".concat(width, \"px\"),\n            height: \"\".concat(height, \"px\"),\n            top: \"\".concat(top, \"px\"),\n            right: \"\".concat(right, \"px\")\n          },\n          key: j,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1210,\n            columnNumber: 29\n          }\n        }, /*#__PURE__*/React.createElement(TableCellStyledNew, Object.assign({}, cellInstance.getCellProps(), {\n          className: classNames,\n          key: 'Table Cell' + cellInstance.row.original[rowIdentifier] + cellInstance.column.id,\n          onMouseEnter: function onMouseEnter() {\n            return handleCellMouseEnter(cellInstance.row.index);\n          },\n          onMouseLeave: function onMouseLeave() {\n            return handleCellMouseLeave(cellInstance.row.index);\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1220,\n            columnNumber: 31\n          }\n        }), isEditMode && cellInstance.column.isEditable && !!selectedRows[cellInstance.row.original[rowIdentifier]] ? cellInstance.render('EditableCell', _objectSpread(_objectSpread({}, cellInstance), {}, {\n          error: !!(cellInstance === null || cellInstance === void 0 ? void 0 : (_cellInstance$row2 = cellInstance.row) === null || _cellInstance$row2 === void 0 ? void 0 : (_cellInstance$row2$or = _cellInstance$row2.original) === null || _cellInstance$row2$or === void 0 ? void 0 : (_cellInstance$row2$or2 = _cellInstance$row2$or.errorFields) === null || _cellInstance$row2$or2 === void 0 ? void 0 : _cellInstance$row2$or2[cellInstance.column.id])\n        })) : cellInstance.render('Cell', _objectSpread(_objectSpread({}, cellInstance), {}, {\n          selectedRows: selectedRows,\n          setSelectedRows: setSelectedRows,\n          hasRowSelection: hasRowSelection,\n          hasRowSelectionWithEdit: hasRowSelectionWithEdit,\n          onRowSelect: onRowSelect,\n          onRowEditClick: onRowEditClick,\n          rowIdentifier: rowIdentifier,\n          loading: loading,\n          isEditMode: isEditMode,\n          hasRadioSelection: hasRadioSelection,\n          row: cellInstance.row,\n          rowCount: data.length\n        }))));\n      })))));\n    });\n  }); // Render the UI for your table\n\n  return /*#__PURE__*/React.createElement(ListViewStyled, Object.assign({}, rest, {\n    ref: tableRef,\n    loading: loading,\n    showFavouriteStar: showFavouriteStar,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1277,\n      columnNumber: 5\n    }\n  }), !hideToolbar && /*#__PURE__*/React.createElement(Box, {\n    bgColor: \"transparent\",\n    pb: \"1em\",\n    justifyContent: \"space-between\",\n    color: \"grey.A1000\",\n    className: \"toolbar\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1285,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1292,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    display: \"flex\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1293,\n      columnNumber: 13\n    }\n  }, hasRowSelection || hasRowSelectionWithEdit ? ActionBar : ''), /*#__PURE__*/React.createElement(Box, {\n    flexShrink: 1,\n    display: \"flex\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1296,\n      columnNumber: 13\n    }\n  }, function () {\n    var selectedRowsCount = Object.keys(selectedRows).length;\n    return !!selectedRowsCount && /*#__PURE__*/React.createElement(Typography, {\n      fontSize: \"13px\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1301,\n        columnNumber: 21\n      }\n    }, selectedRowsCount, \" Selected\");\n  }(), !hidePaginationBar && /*#__PURE__*/React.createElement(PaginationWrapper, {\n    instance: instance,\n    totalRows: totalRows,\n    isTotalCountLoading: isTotalCountLoading,\n    onPageChange: onPageChange,\n    moreResultsExists: moreResultsExists,\n    loading: loading,\n    disableNext: disableNext,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1308,\n      columnNumber: 17\n    }\n  }), IconBar, !hideRefresh && /*#__PURE__*/React.createElement(Tooltip, {\n    hover: true,\n    messagePlacement: \"end\",\n    arrowPlacement: \"center\",\n    tooltipDirection: \"bottom\",\n    message: \"Updated on \".concat(lastUpdated === null || lastUpdated === void 0 ? void 0 : lastUpdated.getDate(), \", \").concat(monthNamesShort[lastUpdated === null || lastUpdated === void 0 ? void 0 : lastUpdated.getMonth()], \" \").concat(lastUpdated === null || lastUpdated === void 0 ? void 0 : lastUpdated.getFullYear(), \" \").concat(String(lastUpdated === null || lastUpdated === void 0 ? void 0 : lastUpdated.getHours()).padStart(2, '0'), \":\").concat(String(lastUpdated === null || lastUpdated === void 0 ? void 0 : lastUpdated.getMinutes()).padStart(2, '0'), \":\").concat(String(lastUpdated === null || lastUpdated === void 0 ? void 0 : lastUpdated.getSeconds()).padStart(2, '0')),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1320,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(IconButton, {\n    onClick: handleRefresh // title={`Updated on ${lastUpdated?.getDate()}, ${\n    //   monthNamesShort[lastUpdated?.getMonth()]\n    // } ${lastUpdated?.getFullYear()} ${String(\n    //   lastUpdated?.getHours()\n    // ).padStart(2, '0')}:${String(lastUpdated?.getMinutes()).padStart(\n    //   2,\n    //   '0'\n    // )}:${String(lastUpdated?.getSeconds()).padStart(2, '0')}`}\n    ,\n    iconVariant: \"reload\",\n    iconSize: 12,\n    onlyIcon: true,\n    circle: true,\n    color: \"grey.A1000\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1335,\n      columnNumber: 19\n    }\n  })), !hideColumnSettings && /*#__PURE__*/React.createElement(ShowHideColumnPopup, {\n    checkBoxGroupArray: showHideColumns,\n    selectedCount: columnCheckedCount,\n    onCheckBoxChange: handleColumnShowHide,\n    onSelectAll: handleSelectAllColumns,\n    onOpen: onShowMoreColumns,\n    onApply: function onApply(closeModal, withSave) {\n      if (columnCheckedCount > 50) {\n        toast.add((labels === null || labels === void 0 ? void 0 : labels.columnSelectionExceedingLimit) || 'Cannot select more than 50 columns.', 'warning', false);\n        return;\n      }\n\n      closeModal();\n      setAppliedShowHideColumns(showHideColumns);\n      var columnPreferences = {};\n      var selectedColumns = {};\n      showHideColumns.forEach(function (column) {\n        toggleHideColumn(column.id, !column.checked);\n\n        if (column.checked) {\n          selectedColumns[column.id] = true;\n        }\n      });\n      allColumns.forEach(function (column) {\n        if (selectedColumns[column.id]) {\n          columnPreferences[column.id] = column;\n        }\n      }); // visibleColumns.forEach((column) => {\n      //   columnPreferences[column.id] = column\n      // })\n\n      setTimeout(function () {\n        setPinnedColumns(function (pC) {\n          var _pC = {\n            left: {},\n            right: {}\n          };\n          var leftTotal = 0;\n          var rightTotal = 0;\n          var prevWidth = 0;\n          Object.keys(pC.left).forEach(function (columnId) {\n            var _document$getElementB;\n\n            var width = ((_document$getElementB = document.getElementById(\"column-header-\".concat(columnId))) === null || _document$getElementB === void 0 ? void 0 : _document$getElementB.getBoundingClientRect().width) || 0;\n            _pC.left[columnId] = {\n              offset: prevWidth,\n              width: width\n            };\n            leftTotal += width;\n            prevWidth = width;\n          });\n          prevWidth = 0;\n          Object.keys(pC.right).forEach(function (columnId) {\n            var _document$getElementB2;\n\n            var width = ((_document$getElementB2 = document.getElementById(\"column-header-\".concat(columnId))) === null || _document$getElementB2 === void 0 ? void 0 : _document$getElementB2.getBoundingClientRect().width) || 0;\n            _pC.right[columnId] = {\n              offset: prevWidth,\n              width: width\n            };\n            rightTotal += width;\n            prevWidth = width;\n          });\n          setPinnedColumnsTotalWidth({\n            left: leftTotal,\n            right: rightTotal\n          });\n          return _pC;\n        });\n      }, 1000);\n\n      if (withSave) {\n        onSaveColumnPreferences(columnPreferences);\n      } else {\n        _onApply(selectedColumns);\n      }\n    },\n    onClickCancel: function onClickCancel() {\n      var checkedColumns = columns.filter(function (column) {\n        return column.isVisible;\n      });\n      setColumnCheckedCount(checkedColumns === null || checkedColumns === void 0 ? void 0 : checkedColumns.length);\n\n      if (appliedShowHideColumns) {\n        setShowHideColumns(appliedShowHideColumns);\n      }\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1354,\n      columnNumber: 17\n    }\n  })))), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      overflow: 'auto',\n      display: 'flex',\n      flexGrow: 1\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1457,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(TableStyled, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1458,\n      columnNumber: 9\n    }\n  }, rows.length === 0 && /*#__PURE__*/React.createElement(TableHeadingContainer, {\n    style: {\n      width: totalColumnsWidth\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1460,\n      columnNumber: 13\n    }\n  }, headerGroups.map(function (headerGroup, i) {\n    return /*#__PURE__*/React.createElement(\"div\", Object.assign({}, headerGroup.getHeaderGroupProps(), {\n      key: i,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1462,\n        columnNumber: 17\n      }\n    }), headerGroup.headers.map(function (column) {\n      // console.log(headerGroup)\n      var columnHeaderProps = column.getHeaderProps();\n\n      if (column.id === 'selection' && !hasRowSelection || column.id === 'selectionWithEdit' && !hasRowSelectionWithEdit) {\n        columnHeaderProps.style = _objectSpread(_objectSpread({}, columnHeaderProps.style), {}, {\n          display: 'none'\n        });\n      }\n\n      return (column.id === 'selection' && hasRowSelection || column.id === 'selectionWithEdit' && hasRowSelectionWithEdit || column.id !== 'selection' || column.id !== 'selectionWithEdit') && /*#__PURE__*/React.createElement(TableHeadingStyled, Object.assign({\n        key: column.id\n      }, columnHeaderProps, {\n        // title={column.Header}\n        title: undefined,\n        pinnedColumn: pinnedColumns.left[column.id] || pinnedColumns.right[column.id],\n        direction: pinnedColumns.left[column.id] ? 'left' : pinnedColumns.right[column.id] ? 'right' : undefined,\n        className: column.isSortable && 'cursor',\n        columnId: column.id,\n        id: \"column-header-\".concat(column.id),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1484,\n          columnNumber: 25\n        }\n      }), column.id !== 'selection' && column.id !== 'selectionWithEdit' && !isColumnLoading && /*#__PURE__*/React.createElement(ColumnOptions, {\n        instance: instance,\n        columnInstance: column,\n        columns: columns,\n        pinnedColumns: pinnedColumns,\n        pinnedColumnsTotalWidth: pinnedColumnsTotalWidth,\n        setPinnedColumns: setPinnedColumns,\n        setColumnCheckedCount: setColumnCheckedCount,\n        setShowHideColumns: setShowHideColumns,\n        setPinnedColumnsTotalWidth: setPinnedColumnsTotalWidth,\n        hideColumnSettings: hideColumnSettings,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1507,\n          columnNumber: 31\n        }\n      }), /*#__PURE__*/React.createElement(ColumnHeadingStyled, Object.assign({}, column.isSortable === true ? column.getSortByToggleProps() : {}, {\n        column: column,\n        title: (column === null || column === void 0 ? void 0 : column.infoTip) || (typeof column.Header === 'string' ? column.Header : undefined),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1524,\n          columnNumber: 27\n        }\n      }), /*#__PURE__*/React.createElement(\"strong\", {\n        style: {\n          userSelect: 'none'\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1536,\n          columnNumber: 29\n        }\n      }, isColumnLoading && column.id !== 'selection' && column.id !== 'selectionWithEdit' ? /*#__PURE__*/React.createElement(Shimmer, {\n        width: Number(column.width) - 50,\n        height: 20,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1540,\n          columnNumber: 33\n        }\n      }) : column.render('Header', {\n        selectedRows: selectedRows,\n        data: data,\n        loading: loading,\n        isEditMode: isEditMode\n      }))), column.isFilterable && /*#__PURE__*/React.createElement(Box, {\n        mt: \"12px\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1555,\n          columnNumber: 29\n        }\n      }, isColumnLoading ? /*#__PURE__*/React.createElement(ColumnFilterLoading, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1557,\n          columnNumber: 33\n        }\n      }) : column.render('Filter', {\n        textFieldProps: getTextFieldProps(column),\n        selectFieldProps: getSelectFieldProps(column),\n        filters: filters,\n        setFilters: setFilters\n      })), !isColumnLoading && column.id !== 'selection' && column.id !== 'selectionWithEdit' && /*#__PURE__*/React.createElement(ColumnResizerStyled, Object.assign({}, column.getResizerProps(), {\n        isResizing: column.isResizing,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1571,\n          columnNumber: 31\n        }\n      })));\n    }));\n  })), /*#__PURE__*/React.createElement(TableBodyStyled, Object.assign({}, getTableBodyProps(), {\n    style: {\n      display: 'flex',\n      position: 'relative'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1584,\n      columnNumber: 11\n    }\n  }), rows.length === 0 && NoDataFound, tableMounted && rows.length > 0 && /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1591,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(StickyGridContext.Provider, {\n    value: {\n      pinnedColumns: pinnedColumns,\n      pinnedColumnsTotalWidth: pinnedColumnsTotalWidth,\n      visibleColumns: visibleColumns,\n      selectedRows: selectedRows,\n      data: data,\n      loading: loading,\n      isEditMode: isEditMode,\n      setSelectedRows: setSelectedRows,\n      onRowSelect: onRowSelect,\n      rowIdentifier: rowIdentifier,\n      isColumnLoading: isColumnLoading,\n      instance: instance,\n      columns: columns,\n      filters: filters,\n      setFilters: setFilters,\n      rows: rows,\n      hasRowSelection: hasRowSelection,\n      hasRowSelectionWithEdit: hasRowSelectionWithEdit,\n      onRowEditClick: onRowEditClick,\n      filterableColumnsCount: filterableColumnsCount,\n      hasRadioSelection: hasRadioSelection\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1592,\n      columnNumber: 17\n    }\n  }, !disableScrollOverlay && /*#__PURE__*/React.createElement(ScrollOverlay, {\n    className: \"scroll-overlay\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1618,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(VariableSizeGrid, {\n    className: \"variable-size-grid\",\n    height: height,\n    style: {\n      overflow: 'overlay',\n      paddingBottom: '10px',\n      overflowY: 'scroll'\n    },\n    rowHeight: function rowHeight() {\n      return rowHtPixel;\n    },\n    columnWidth: function columnWidth(index) {\n      return visibleColumns[index].id === 'selection' || visibleColumns[index].id === 'selectionWithEdit' || pinnedColumns.left[visibleColumns[index].id] || pinnedColumns.right[visibleColumns[index].id] ? 0 : visibleColumns[index].width < 150 ? 150 : visibleColumns[index].width;\n    },\n    width: gridWidth,\n    ref: gridMiddle,\n    rowCount: data.length,\n    columnCount: visibleColumns.length,\n    itemData: RenderCellItemData,\n    innerElementType: innerGridElementType // onScroll={handleScrollMain}\n    // className={\n    //   pinnedColumnsTotalWidth.right > 0 ? 'hideScroll' : ''\n    // }\n    ,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1620,\n      columnNumber: 19\n    }\n  }, RenderCell)))))));\n};\n\nvar LVMemo = React.memo(ListView, function (p, n) {\n  return p.loading === n.loading && n.loading === true;\n});\n\nvar ListViewMemoized = function ListViewMemoized(_ref10) {\n  var _ref10$columns = _ref10.columns,\n      columns = _ref10$columns === void 0 ? [] : _ref10$columns,\n      _ref10$onSaveColumnPr = _ref10.onSaveColumnPreferences,\n      onSaveColumnPreferences = _ref10$onSaveColumnPr === void 0 ? defaultCallback : _ref10$onSaveColumnPr,\n      _ref10$onApply = _ref10.onApply,\n      onApply = _ref10$onApply === void 0 ? defaultCallback : _ref10$onApply,\n      rest = _objectWithoutProperties(_ref10, [\"columns\", \"onSaveColumnPreferences\", \"onApply\"]);\n\n  var _useState33 = useState([]),\n      _useState34 = _slicedToArray(_useState33, 2),\n      columnsWithWidth = _useState34[0],\n      setColumnsWithWidth = _useState34[1];\n  /** Container of List View */\n\n\n  var containerRef = React.useRef(null);\n  /** Calculate Available container space, i.e, exclude checkbox column (Row Selection) */\n\n  var getAvailableContainerWidth = React.useCallback(function () {\n    var _containerRef$current;\n\n    var hasRowSelection = rest.hasRowSelection,\n        hasRowSelectionWithEdit = rest.hasRowSelectionWithEdit;\n    var selectionColumnWidth = hasRowSelectionWithEdit ? 50 : hasRowSelection ? 40 : 0;\n    var containerWidth = (((_containerRef$current = containerRef.current) === null || _containerRef$current === void 0 ? void 0 : _containerRef$current.getBoundingClientRect().width) || 100) - selectionColumnWidth;\n    return containerWidth;\n  }, [rest.hasRowSelection, rest.hasRowSelectionWithEdit]);\n  React.useLayoutEffect(function () {\n    var containerWidth = getAvailableContainerWidth();\n    setColumnsWithWidth(calculateColumnsWidth(columns, containerWidth));\n  }, [columns]);\n  var handleApply = React.useCallback(function (selectedColumns) {\n    setColumnsWithWidth(function (cols) {\n      var colsWithNewVisibility = cols.map(function (c) {\n        return _objectSpread(_objectSpread({}, c), {}, {\n          isVisible: !!(selectedColumns === null || selectedColumns === void 0 ? void 0 : selectedColumns[c.accessor]),\n          width: undefined\n        });\n      });\n      var containerWidth = getAvailableContainerWidth();\n      return calculateColumnsWidth(colsWithNewVisibility, containerWidth);\n    });\n    onApply(selectedColumns);\n  }, [setColumnsWithWidth, onApply]);\n  var handleSaveColumnPreferences = React.useCallback(function (visibleColumnIds) {\n    setColumnsWithWidth(function (cols) {\n      var colsWithNewVisibility = cols.map(function (c) {\n        return _objectSpread(_objectSpread({}, c), {}, {\n          isVisible: !!(visibleColumnIds === null || visibleColumnIds === void 0 ? void 0 : visibleColumnIds[c.accessor]),\n          width: undefined\n        });\n      });\n      var containerWidth = getAvailableContainerWidth();\n      return calculateColumnsWidth(colsWithNewVisibility, containerWidth);\n    });\n    onSaveColumnPreferences(visibleColumnIds);\n  }, [setColumnsWithWidth, onSaveColumnPreferences]);\n  var handleWindowResize = React.useCallback(function () {\n    setColumnsWithWidth(function (cols) {\n      var colsWithUnsetWidths = cols.map(function (c) {\n        return _objectSpread(_objectSpread({}, c), {}, {\n          width: undefined\n        });\n      });\n      var containerWidth = getAvailableContainerWidth();\n      return calculateColumnsWidth(colsWithUnsetWidths, containerWidth);\n    });\n  }, [setColumnsWithWidth]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: '100%',\n      height: '100%'\n    },\n    className: \"listview-container-\".concat(rest.rowIdentifier),\n    ref: containerRef,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1742,\n      columnNumber: 5\n    }\n  }, columnsWithWidth.length > 0 && /*#__PURE__*/React.createElement(LVMemo, Object.assign({\n    columns: columnsWithWidth,\n    onSaveColumnPreferences: handleSaveColumnPreferences,\n    onApply: handleApply,\n    onResize: handleWindowResize\n  }, rest, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1748,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default ListViewMemoized;\nexport { ListView };","map":{"version":3,"sources":["/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/organisms/ListView/index.tsx"],"names":["React","useEffect","useState","useCallback","useRef","forwardRef","createContext","VariableSizeGrid","areEqual","useTable","useFlexLayout","useResizeColumns","useSortBy","usePagination","useFilters","useColumnOrder","Box","PaginationWrapper","defaultColumn","combinedSortOptions","handleCellMouseEnter","handleCellMouseLeave","getRenderedCursor","calculateColumnsWidth","useCustomFilters","IconButton","ListViewStyled","TableStyled","TableBodyStyled","ColumnResizerStyled","ShowHideColumnPopup","NoDataFoundComponent","monthNamesShort","Typography","Shimmer","useToast","Tooltip","HeaderSelectAll","RowSelectCell","TableCellStyledNew","Position","TableHeaderCell","ColumnOptions","ColumnHeadingStyled","TableHeadingContainer","TableHeadingStyled","ColumnFilterLoading","ScrollOverlay","FontIcon","FavouriteStarStyle","defaultCallback","StickyGridContext","displayName","ListView","id","columns","data","loading","isColumnLoading","totalRows","isEditMode","permanentColumns","children","ActionBar","NoDataFound","IconBar","rowIdentifier","hasRowSelectionWithEdit","hasRowSelection","hasSelectAllRows","onRowSelect","onRowEditClick","onSortChange","onFetchData","onSaveColumnPreferences","paginationPageSize","onShowMoreColumns","onApply","onPageChange","sorts","filters","filtersObject","onFilterChange","hideRefresh","hideColumnSettings","hidePaginationBar","onResize","disableScrollOverlay","hideToolbar","heightBuffer","rowSelectionResetter","isTotalCountLoading","moreResultsExists","hasRadioSelection","labels","showFavouriteStar","disableNext","rest","Math","ceil","pageCount","setPageCount","Date","lastUpdated","setLastUpdated","selectedRows","setSelectedRows","fetchDataRequestObj","setFetchDataRequestObj","tableMounted","setTableMounted","resetRowSelection","setResetRowSelection","tableRef","toast","height","setHeight","gridWidth","setGridWidth","rowHtPixel","tableHtPixel","setTableHtPixel","useLayoutEffect","current","getBoundingClientRect","width","window","addEventListener","instance","manualSortBy","manualPagination","manualFilters","initialState","pageSize","pageIndex","hiddenColumns","filter","c","isVisible","map","accessor","sortBy","hooks","rowSelectColumns","push","maxWidth","Header","Cell","visibleColumns","rows","allColumns","headerGroups","getTableBodyProps","prepareRow","toggleHideColumn","gotoPage","totalColumnsWidth","state","visibleCount","filteredColumns","column","value","checked","disabled","showHideColumns","setShowHideColumns","appliedShowHideColumns","setAppliedShowHideColumns","length","columnCheckedCount","setColumnCheckedCount","filterableColumnsCount","useMemo","isFilterable","visibleColumnsCount","newColumns","gridMiddle","resetAfterColumnIndex","Object","keys","getTextFieldProps","getSelectFieldProps","combinedFilterOptions","setFilters","left","offset","right","pinnedColumns","setPinnedColumns","pinnedColumnsTotalWidth","setPinnedColumnsTotalWidth","pC","newPinned","selection","totalWidth","forEach","t","selectionWithEdit","theElemForRollScParent","theElemForRollSc","childNodes","visibleRows","style","prevFilters","setPrevFilters","combFilters","searchBy","searchText","pageNumber","sortOptions","filterOptions","apis","setSelection","resetSelection","handleRefresh","handleSelectAllColumns","isSelectAll","cList","i","handleColumnShowHide","isDisabled","count","RenderCellItemData","RenderCell","memo","columnIndex","rowIndex","row","cell","cells","classNames","original","getCellProps","isEditable","render","error","errorFields","Number","getResizerProps","isResizing","headerBuilder","minColumn","maxColumn","position","top","totalLeft","columnInstance","headerBuilderPinnedLeft","pinnedLeftCount","headerBuilderPinnedRight","pinnedRightCount","pinnedLeftBuilder","minRow","maxRow","j","cellInstance","pinnedRightBuilder","innerGridElementType","ref","displayColumns","displayColumnsPinnedLeft","displayColumnsPinnedRight","displayPinnedLeftRows","displayPinnedRightRows","modifiedRest","backgroundColor","minWidth","index","display","rowCount","isFavourite","selectedRowsCount","getDate","getMonth","getFullYear","String","getHours","padStart","getMinutes","getSeconds","closeModal","withSave","add","columnSelectionExceedingLimit","columnPreferences","selectedColumns","setTimeout","_pC","leftTotal","rightTotal","prevWidth","columnId","document","getElementById","checkedColumns","overflow","flexGrow","headerGroup","getHeaderGroupProps","headers","columnHeaderProps","getHeaderProps","undefined","isSortable","getSortByToggleProps","infoTip","userSelect","textFieldProps","selectFieldProps","paddingBottom","overflowY","LVMemo","p","n","ListViewMemoized","columnsWithWidth","setColumnsWithWidth","containerRef","getAvailableContainerWidth","selectionColumnWidth","containerWidth","handleApply","cols","colsWithNewVisibility","handleSaveColumnPreferences","visibleColumnIds","handleWindowResize","colsWithUnsetWidths"],"mappings":"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","sourcesContent":["/**\n * https://codesandbox.io/s/react-window-sticky-grid-liwsd?file=/src/index.js:2997-3014\n */\n import React, {\n  useEffect,\n  useState,\n  useCallback,\n  useRef,\n  forwardRef,\n  createContext\n} from 'react'\nimport {\n  // FixedSizeList,\n  // ListOnScrollProps,\n  // ListChildComponentProps,\n  GridChildComponentProps,\n  VariableSizeGrid,\n  // GridOnScrollProps,\n  areEqual\n} from 'react-window'\nimport {\n  useTable,\n  useFlexLayout,\n  useResizeColumns,\n  useSortBy,\n  usePagination,\n  useFilters,\n  useColumnOrder,\n  ColumnInstance,\n  Row\n} from 'react-table'\nimport Box from '../../atoms/Box'\n// import FontIcon from '../../atoms/FontIcon'\nimport PaginationWrapper from './utils/components/PaginationWrapper'\nimport {\n  defaultColumn,\n  combinedSortOptions,\n  handleCellMouseEnter,\n  handleCellMouseLeave,\n  getRenderedCursor,\n  calculateColumnsWidth\n} from './utils/helpers'\n// import Loader from '../../atoms/Loader'\nimport { useCustomFilters } from './utils/useCustomFilters'\nimport {\n  IListViewProps,\n  IPinnedColumnState,\n  ISelectedRows,\n  IListViewRow,\n  IPinnedColumnTotalWidthState,\n  IFilterOptions,\n  IListViewColumn,\n  IFetchDataOptions\n} from './interfaces'\nimport IconButton from '../../atoms/IconButton'\nimport ListViewStyled from './styles/ListViewStyled'\nimport TableStyled from './styles/TableStyled'\nimport TableBodyStyled from './styles/TableBodyStyled'\nimport ColumnResizerStyled from './styles/ColumnResizerStyled'\nimport ShowHideColumnPopup from '../../molecules/ShowHideColumnPopup'\nimport NoDataFoundComponent from './styles/NoDataFound'\n\nimport { monthNamesShort } from '../../../utilities/helpers'\nimport { IOptionType } from '../../atoms/CheckboxGroup'\nimport Typography from '../../atoms/Typography'\n\nimport { Shimmer } from 'react-shimmer'\n\nimport { useToast } from '../../molecules/Toast'\nimport Tooltip from '../../molecules/Tooltip'\nimport HeaderSelectAll from './utils/components/HeaderSelectAll'\nimport RowSelectCell from './utils/components/RowSelectCell'\nimport { TableCellStyledNew } from './styles/TableGridStyles'\nimport Position from '../../molecules/Position'\n\nimport TableHeaderCell from './utils/components/TableHeaderCell'\nimport ColumnOptions from './utils/components/ColumnOptions'\nimport ColumnHeadingStyled from './styles/ColumnHeadingStyled'\nimport TableHeadingContainer from './styles/TableHeadingContainer'\nimport TableHeadingStyled from './styles/TableHeadingStyled'\nimport ColumnFilterLoading from './styles/ColumnFilterLoading'\nimport ScrollOverlay from './styles/ScrollOverlay'\nimport FontIcon from '../../atoms/FontIcon'\nimport FavouriteStarStyle from './styles/FavouriteStarStyle'\n\nconst defaultCallback = () => {}\nconst StickyGridContext = createContext<any>({})\n\nStickyGridContext.displayName = 'StickyGridContext'\n\nconst ListView = ({\n  id = '',\n  columns = [],\n  data = [],\n  loading = false,\n  isColumnLoading = false,\n  totalRows = 0,\n  isEditMode = false,\n  permanentColumns,\n  children: {\n    ActionBar = <React.Fragment />,\n    NoDataFound = (\n      <NoDataFoundComponent>No Data Available</NoDataFoundComponent>\n    ),\n    IconBar = <React.Fragment />\n  } = {\n    ActionBar: <React.Fragment />,\n    NoDataFound: <NoDataFoundComponent>No Data Available</NoDataFoundComponent>,\n    IconBar: <React.Fragment />\n  },\n  rowIdentifier = 'id',\n  hasRowSelectionWithEdit = false,\n  hasRowSelection = false,\n  hasSelectAllRows = true,\n  onRowSelect = defaultCallback,\n  onRowEditClick = defaultCallback,\n  onSortChange = defaultCallback,\n  onFetchData = defaultCallback,\n  onSaveColumnPreferences = defaultCallback,\n  paginationPageSize = 50,\n  onShowMoreColumns = defaultCallback,\n  onApply = defaultCallback,\n  onPageChange = defaultCallback,\n  sorts = [],\n  filters: filtersObject = {},\n  onFilterChange = defaultCallback,\n  hideRefresh = false,\n  hideColumnSettings = false,\n  hidePaginationBar = false,\n  onResize = defaultCallback,\n  disableScrollOverlay = false,\n  hideToolbar = false,\n  heightBuffer = 42,\n  rowSelectionResetter = 0,\n  isTotalCountLoading = false,\n  moreResultsExists = false,\n  hasRadioSelection,\n  labels,\n  showFavouriteStar = false,\n  disableNext = false,\n  ...rest\n}: IListViewProps) => {\n  const [pageCount, setPageCount] = useState<number>(Math.ceil(totalRows / 25))\n  const [lastUpdated, setLastUpdated] = useState<Date>(new Date())\n  const [selectedRows, setSelectedRows] = useState<ISelectedRows>({})\n  const [fetchDataRequestObj, setFetchDataRequestObj] = useState<IFetchDataOptions>({})\n  const [tableMounted, setTableMounted] = useState<boolean>(false)\n  const [resetRowSelection, setResetRowSelection] = useState<number>(rowSelectionResetter)\n  const tableRef = useRef<HTMLDivElement | null>(null)\n  const toast = useToast()\n\n  const [height, setHeight] = useState<number>(400)\n  const [gridWidth, setGridWidth] = useState<number>(400)\n\n  const [rowHtPixel] = useState<number>(30)\n  const [tableHtPixel, setTableHtPixel] = useState<number>(rowHtPixel*25)\n\n  React.useLayoutEffect(() => {\n    setHeight(\n      (tableRef.current?.getBoundingClientRect().height || 0) - heightBuffer\n    )\n    setGridWidth(tableRef.current?.getBoundingClientRect().width || 0)\n\n    window.addEventListener('resize', () => {\n      setHeight(\n        (tableRef.current?.getBoundingClientRect().height || 0) - heightBuffer\n      )\n      setGridWidth(tableRef.current?.getBoundingClientRect().width || 0)\n      onResize()\n    })\n  }, [])\n\n  // Use the state and functions returned from useTable to build your UI\n  const instance = useTable<IListViewRow>(\n    {\n      columns,\n      data,\n      defaultColumn,\n      manualSortBy: true,\n      manualPagination: true,\n      manualFilters: true,\n      pageCount: pageCount,\n      // hasRadioSelection,\n      initialState: {\n        pageSize: paginationPageSize,\n        pageIndex: 0,\n        hiddenColumns: columns\n          .filter((c) => c.isVisible === false)\n          .map((c) => c.accessor),\n        sortBy: sorts\n      }\n    },\n    useFilters,\n    useSortBy,\n    usePagination,\n    useFlexLayout,\n    useResizeColumns,\n    // useRowSelect,\n    useColumnOrder,\n\n    (hooks) => {\n      /** No Checkbox & Edit button */\n      // if (!hasRowSelection && !hasRowSelectionWithEdit) {\n      //   return\n      // }\n\n      const rowSelectColumns: any[] = []\n      if (hasRowSelection) {\n        rowSelectColumns.push({\n          id: 'selection',\n          width: 40,\n          maxWidth: 40,\n          isVisible: hasRowSelection,\n          /** Header Select all Checkbox */\n          Header: HeaderSelectAll,\n\n          /** Row-level checkbox */\n          Cell: RowSelectCell\n        })\n      }\n      if (hasRowSelectionWithEdit) {\n        rowSelectColumns.push({\n          id: 'selectionWithEdit',\n          width: 50,\n          maxWidth: 50,\n          isVisible: hasRowSelectionWithEdit,\n          /** Header Select all Checkbox */\n          Header: HeaderSelectAll,\n          /** Row-level checkbox */\n          Cell: RowSelectCell\n        })\n      }\n      hooks.visibleColumns.push((columns) => [\n        // Let's make a column for selection\n        ...rowSelectColumns,\n        ...columns\n      ])\n    }\n  )\n\n  const {\n    rows,\n    allColumns,\n    headerGroups,\n    // getTableProps,\n    getTableBodyProps,\n    prepareRow,\n    toggleHideColumn,\n    visibleColumns,\n    gotoPage,\n    totalColumnsWidth,\n    // setHiddenColumns,\n    state: { sortBy, pageSize, pageIndex }\n  } = instance\n\n  const [showHideColumns, setShowHideColumns] = useState<IOptionType[]>(() => {\n    let visibleCount = 0\n    const filteredColumns = allColumns.filter((column) => {\n      if (column.isVisible) {\n        visibleCount++\n      }\n      return column.id !== 'selection' && column.id !== 'selectionWithEdit'\n    })\n\n    return filteredColumns.map((column) => ({\n      id: column.id,\n      value: (column.Header as string) || '',\n      checked: column.isVisible !== false,\n      disabled: visibleCount <= 3 && column.isVisible !== false\n    }))\n  })\n\n  const [appliedShowHideColumns, setAppliedShowHideColumns] = useState<\n    IOptionType[]\n  >([...showHideColumns])\n\n  const [columnCheckedCount, setColumnCheckedCount] = useState<number>(\n    visibleColumns.length +\n      (hasRowSelection || hasRowSelectionWithEdit ? -1 : 0)\n  )\n\n  // filtaralable columns count\n  const filterableColumnsCount = React.useMemo(() => {\n    return columns.filter((column: IListViewColumn) => column?.isFilterable)\n      .length\n  }, [columns])\n\n  useEffect(() => {\n    let visibleColumnsCount = 0\n    const newColumns = columns\n      .map((column) => {\n        if (column.isVisible !== false) {\n          visibleColumnsCount++\n        }\n\n        return {\n          id: column.accessor,\n          value: (column.Header as string) || '',\n          checked: column.isVisible !== false\n        }\n      })\n      .map((column) => {\n        if (visibleColumnsCount <= 3 && column.checked) {\n          return { ...column, disabled: true }\n        } else {\n          return column\n        }\n      })\n    setShowHideColumns(newColumns)\n    setAppliedShowHideColumns([...newColumns])\n    setColumnCheckedCount(visibleColumnsCount)\n    gridMiddle.current?.resetAfterColumnIndex(0, true)\n  }, [columns])\n\n  useEffect(() => {\n    if (Object.keys(fetchDataRequestObj).length > 0) {   // not empty condition\n      onFetchData(fetchDataRequestObj)\n    }\n  }, [fetchDataRequestObj])\n  \n  useEffect(() => {\n    setSelectedRows({})\n  }, [resetRowSelection])\n\n  useEffect(() => {\n    setResetRowSelection(rowSelectionResetter)\n  }, [rowSelectionResetter])\n  \n  const {\n    getTextFieldProps,\n    getSelectFieldProps,\n    combinedFilterOptions,\n    filters,\n    setFilters\n  } = useCustomFilters(filtersObject)\n\n  const [pinnedColumns, setPinnedColumns] = useState<IPinnedColumnState>({\n    left: {\n      [hasRowSelectionWithEdit ? 'selectionWithEdit' : 'selection']: {\n        offset: 0,\n        width: hasRowSelectionWithEdit ? 50 : hasRowSelection ? 40 : 0\n      }\n    },\n    right: {}\n  })\n  const [pinnedColumnsTotalWidth, setPinnedColumnsTotalWidth] = useState<\n    IPinnedColumnTotalWidthState\n  >({\n    left: hasRowSelectionWithEdit ? 50 : hasRowSelection ? 40 : 0,\n    right: 0\n  })\n\n  useEffect(() => {\n    if (hasRowSelection) {\n      toggleHideColumn('selection', false)\n      toggleHideColumn('selectionWithEdit', true)\n      setPinnedColumns((pC) => {\n        const newPinned = {\n          ...pC,\n          left: { ...pC.left, selection: { offset: 0, width: 40 } }\n        }\n\n        let totalWidth = 0\n        Object.keys(newPinned.left).forEach((id) => {\n          totalWidth += newPinned.left[id].width\n          if (id !== 'selection' && id !== 'selectionWithEdit') {\n            newPinned.left[id].offset += 40\n          }\n        })\n\n        setPinnedColumnsTotalWidth((t) => ({ ...t, left: totalWidth }))\n        return newPinned\n      })\n    } else {\n      setPinnedColumns((pC) => {\n        const newPinned = { ...pC }\n        delete newPinned.left.selection\n\n        let totalWidth = 0\n        Object.keys(newPinned.left).forEach((id) => {\n          totalWidth += newPinned.left[id].width\n          if (id !== 'selection' && id !== 'selectionWithEdit') {\n            newPinned.left[id].offset -= 40\n          }\n        })\n\n        setPinnedColumnsTotalWidth((t) => ({\n          ...t,\n          // left: t.left >= 40 ? t.left - 40 : t.left\n          left: totalWidth\n        }))\n\n        return newPinned\n      })\n      toggleHideColumn('selection', true)\n      toggleHideColumn('selectionWithEdit', !hasRowSelectionWithEdit)\n    }\n\n    gridMiddle.current?.resetAfterColumnIndex(0, true)\n  }, [hasRowSelection])\n\n  useEffect(() => {\n    if (hasRowSelectionWithEdit) {\n      setPinnedColumns((pC) => {\n        const newPinned = {\n          ...pC,\n          left: { ...pC.left, selectionWithEdit: { offset: 0, width: 50 } }\n        }\n\n        let totalWidth = 0\n        Object.keys(newPinned.left).forEach((id) => {\n          totalWidth += newPinned.left[id].width\n          if (id !== 'selection' && id !== 'selectionWithEdit') {\n            newPinned.left[id].offset += 50\n          }\n        })\n\n        // setPinnedColumnsTotalWidth((t) => ({ ...t, left: t.left + 50 }))\n        setPinnedColumnsTotalWidth((t) => ({ ...t, left: totalWidth }))\n        return newPinned\n      })\n      toggleHideColumn('selectionWithEdit', false)\n      toggleHideColumn('selection', true)\n    } else {\n      setPinnedColumns((pC) => {\n        const newPinned = { ...pC }\n        delete newPinned.left.selectionWithEdit\n\n        let totalWidth = 0\n        Object.keys(newPinned.left).forEach((id) => {\n          totalWidth += newPinned.left[id].width\n          if (id !== 'selection' && id !== 'selectionWithEdit') {\n            newPinned.left[id].offset -= 50\n          }\n        })\n\n        setPinnedColumnsTotalWidth((t) => ({\n          ...t,\n          // left: t.left >= 50 ? t.left - 50 : t.left\n          left: totalWidth\n        }))\n        return newPinned\n      })\n      toggleHideColumn('selectionWithEdit', true)\n      toggleHideColumn('selection', !hasRowSelection)\n    }\n    gridMiddle.current?.resetAfterColumnIndex(0, true)\n  }, [hasRowSelectionWithEdit])\n\n  /** Re-Calculate pageCount whenever totalRows or pageSize chanages */\n  useEffect(() => {\n    setPageCount(Math.ceil(totalRows / pageSize))\n  }, [totalRows, pageSize])  \n  \n  React.useLayoutEffect(() => {\n    if (gridMiddle && gridMiddle.current && pageSize) {\n      var theElemForRollScParent = gridMiddle.current[\"_outerRef\"]\n      var theElemForRollSc =  theElemForRollScParent?.childNodes[0] as HTMLDivElement\n      var visibleRows = data.length < pageSize ? data.length : pageSize\n      theElemForRollSc.style.height = `${rowHtPixel * visibleRows}px`\n      setTableHtPixel(rowHtPixel * visibleRows)\n    }  \n  }, [pageSize, data.length])\n\n  /** Callback when sort changes */\n  useEffect(() => {\n    onSortChange(combinedSortOptions(sortBy), sortBy)\n  }, [sortBy])\n\n  /** To Prevent calling extra onFetchData on inital load */\n  const [prevFilters, setPrevFilters] = useState<IFilterOptions>()\n  useEffect(() => {\n    if (pageIndex === 0) {\n      const combFilters = combinedFilterOptions()\n      if (\n        combFilters.searchBy !== prevFilters?.searchBy ||\n        combFilters.searchText !== prevFilters?.searchText\n      ) {\n        setFetchDataRequestObj({\n          pageSize,\n          pageNumber: pageIndex + 1,\n          sortOptions: combinedSortOptions(sortBy),\n          filterOptions: combFilters,\n          apis: {\n            setSelection: setSelectedRows,\n            resetSelection: () => setSelectedRows({})\n          }\n        })\n\n        onFilterChange(combFilters, filters)\n\n        setPrevFilters(combFilters)\n      }\n    } else {\n      gotoPage(0)\n    }\n    setSelectedRows({})\n  }, [filters])\n\n  /** Callback when Re-fetching server side data is required */\n  useEffect(() => {\n    // setLastUpdated(new Date())\n    setFetchDataRequestObj({\n      pageSize,\n      pageNumber: pageIndex + 1,\n      sortOptions: combinedSortOptions(sortBy),\n      filterOptions: combinedFilterOptions(),\n      apis: {\n        setSelection: setSelectedRows,\n        resetSelection: () => setSelectedRows({})\n      }\n    })\n  }, [sortBy, pageSize, pageIndex])\n\n  useEffect(() => {\n    if (pageIndex === 0) {\n      setFetchDataRequestObj({\n        pageSize,\n        pageNumber: 1,\n        sortOptions: combinedSortOptions(sortBy),\n        filterOptions: combinedFilterOptions(),\n        apis: {\n          setSelection: setSelectedRows,\n          resetSelection: () => setSelectedRows({})\n        }\n      })\n    } else {\n      gotoPage(0)\n    }\n    setSelectedRows({})\n  }, [onFetchData])\n\n  /** Refresh Data from Server callback */\n  const handleRefresh = useCallback(() => {\n    setLastUpdated(new Date())\n    onFetchData({\n      pageSize,\n      pageNumber: pageIndex + 1,\n      sortOptions: combinedSortOptions(sortBy),\n      filterOptions: combinedFilterOptions(),\n      apis: {\n        setSelection: setSelectedRows,\n        resetSelection: () => setSelectedRows({})\n      }\n    })\n  }, [onFetchData, combinedFilterOptions, pageSize, pageIndex, sortBy])\n\n  /** on the very first load of the table we wish to set it mounted\n  once it is mounted only then the ref will be available to calculate dynamic height for react-window */\n  useEffect(() => {\n    setTableMounted(true)\n  }, [])\n\n  const gridMiddle = React.useRef<VariableSizeGrid>(null)\n\n  const handleSelectAllColumns = React.useCallback(\n    (isSelectAll?: boolean) => {\n      if (isSelectAll) {\n        setShowHideColumns((cList) =>\n          cList.map((c) => ({ ...c, checked: true, disabled: false }))\n        )\n        setColumnCheckedCount(showHideColumns.length)\n      } else {\n        if (permanentColumns) {\n          setShowHideColumns((cList) =>\n            cList.map((c) => ({\n              ...c,\n              checked: permanentColumns?.[c.id],\n              disabled: permanentColumns?.[c.id]\n            }))\n          )\n          setColumnCheckedCount(Object.keys(permanentColumns).length)\n        } else {\n          setShowHideColumns((cList) =>\n            cList.map((c, i) => ({ ...c, checked: i < 3, disabled: i < 3 }))\n          )\n          setColumnCheckedCount(3)\n        }\n      }\n    },\n    [showHideColumns]\n  )\n\n  const handleColumnShowHide = React.useCallback(\n    (id, checked) => {\n      setShowHideColumns((cList) =>\n        cList.map((c) => {\n          const isDisabled =\n            !checked &&\n            columnCheckedCount ===\n              (permanentColumns ? Object.keys(permanentColumns).length : 3) + 1\n          return c.id === id\n            ? { ...c, checked, disabled: isDisabled && checked }\n            : { ...c, disabled: isDisabled && c.checked }\n        })\n      )\n      setColumnCheckedCount((count) => count + (checked ? 1 : -1))\n    },\n    [\n      showHideColumns,\n      columnCheckedCount,\n      permanentColumns,\n      setShowHideColumns,\n      setColumnCheckedCount\n    ]\n  )\n\n  /** To adjust the Width of columns when columns are less than available space\n   * UseEffect on change of Columns\n   * UseEffect on change of appliedShowHideColumns (Visibility Toggle)\n   */\n\n  useEffect(() => {\n    // const pinnedLeftCount = Object.keys(pinnedColumns.left).length\n    // const pinnedRightCount = Object.keys(pinnedColumns.right).length\n\n    // for (let i = 0; i < pinnedLeftCount; i++) {\n    //   gridMiddle.current?.resetAfterColumnIndex(i, true)\n    // }\n    // for (let i = 0; i < pinnedRightCount; i++) {\n    //   gridMiddle.current?.resetAfterColumnIndex(\n    //     visibleColumns.length - i - 1,\n    //     true\n    //   )\n    // }\n    gridMiddle.current?.resetAfterColumnIndex(0, true)\n  }, [pinnedColumns])\n\n  const RenderCellItemData = React.useMemo(\n    () => ({\n      rows,\n      pinnedColumns,\n      isEditMode,\n      loading,\n      selectedRows,\n      rowIdentifier\n    }),\n    [rows, pinnedColumns, isEditMode, loading, selectedRows, rowIdentifier]\n  )\n\n  const RenderCell = React.memo(\n    ({ columnIndex, rowIndex, style, data }: GridChildComponentProps) => {\n      const {\n        rows,\n        pinnedColumns,\n        isEditMode,\n        loading,\n        selectedRows,\n        rowIdentifier\n      } = data\n      const row = rows[rowIndex]\n      prepareRow(row)\n      const cell = row.cells[columnIndex]\n\n      let classNames = `cell--hover${rowIndex}`\n      classNames += ` ${\n        selectedRows[cell.row.original[rowIdentifier]] ? 'selected' : ''\n      }`\n      classNames += ` ${rowIndex === rows.length - 1 ? 'last-row' : ''}`\n\n      if (\n        pinnedColumns.left[cell.column.id] ||\n        pinnedColumns.right[cell.column.id] ||\n        cell.column.id === 'selection' ||\n        cell.column.id === 'selectionWithEdit'\n      ) {\n        return null\n      }\n\n      return (\n        cell &&\n        cell.column && (\n          <TableCellStyledNew\n            {...cell.getCellProps()}\n            style={style}\n            onMouseEnter={() => handleCellMouseEnter(rowIndex)}\n            onMouseLeave={() => handleCellMouseLeave(rowIndex)}\n            className={classNames}\n          >\n            {isEditMode &&\n            cell.column.isEditable &&\n            !!selectedRows[cell.row.original[rowIdentifier]] ? (\n              cell.render('EditableCell', {\n                ...cell,\n                error: !!cell?.row?.original?.errorFields?.[cell.column.id]\n              })\n            ) : loading ? (\n              <Shimmer width={Number(cell.column.width)} height={20} />\n            ) : (\n              cell.render('Cell', {\n                ...cell,\n                selectedRows,\n                loading,\n                isEditMode,\n                hasRadioSelection\n              })\n            )}\n\n            <ColumnResizerStyled\n              {...cell.column.getResizerProps()}\n              isResizing={cell.column.isResizing}\n            />\n          </TableCellStyledNew>\n        )\n      )\n    },\n    areEqual\n  )\n\n  const headerBuilder = (\n    minColumn: number,\n    maxColumn: number,\n    visibleColumns: ColumnInstance<IListViewRow>[],\n    pinnedColumns: IPinnedColumnState\n  ) => {\n    const columns = []\n\n    for (let i = minColumn; i <= maxColumn; i++) {\n      if (\n        !pinnedColumns.left[visibleColumns[i]?.id] &&\n        !pinnedColumns.right[visibleColumns[i]?.id]\n      ) {\n        columns.push({\n          position: 'absolute',\n          top: 0,\n          height: 'auto',\n          width: visibleColumns[i].width,\n          left: visibleColumns[i].totalLeft,\n          columnInstance: visibleColumns[i],\n          accessor: visibleColumns[i].id\n        })\n      }\n    }\n\n    return columns\n  }\n  const headerBuilderPinnedLeft = (\n    visibleColumns: ColumnInstance<IListViewRow>[],\n    pinnedColumns: IPinnedColumnState\n  ) => {\n    const columns = []\n\n    const pinnedLeftCount = Object.keys(pinnedColumns.left).length\n    for (let i = 0; i < pinnedLeftCount + 3; i++) {\n      if (pinnedColumns.left[visibleColumns[i]?.id]) {\n        columns.push({\n          position: 'absolute',\n          top: 0,\n          height: 'auto',\n          width: visibleColumns[i].width,\n          // left: visibleColumns[i].totalLeft,\n          left: pinnedColumns.left[visibleColumns[i].id].offset,\n          columnInstance: visibleColumns[i],\n          accessor: visibleColumns[i].id\n        })\n      }\n    }\n\n    return columns\n  }\n\n  const headerBuilderPinnedRight = (\n    visibleColumns: ColumnInstance<IListViewRow>[],\n    pinnedColumns: IPinnedColumnState\n  ) => {\n    const columns = []\n\n    const pinnedRightCount = Object.keys(pinnedColumns.right).length\n\n    for (\n      let i = visibleColumns.length - 1;\n      i >= visibleColumns.length - pinnedRightCount;\n      i--\n    ) {\n      if (pinnedColumns.right[visibleColumns[i]?.id]) {\n        columns.push({\n          position: 'absolute',\n          top: 0,\n          height: 'auto',\n          width: visibleColumns[i].width,\n          // left: visibleColumns[i].totalLeft,\n          right: pinnedColumns.right[visibleColumns[i].id].offset,\n          columnInstance: visibleColumns[i],\n          accessor: visibleColumns[i].id\n        })\n      }\n    }\n\n    return columns\n  }\n\n  const pinnedLeftBuilder = (\n    minRow: number,\n    maxRow: number,\n    rows: Row<IListViewRow>[],\n    pinnedColumns: IPinnedColumnState\n  ) => {\n    const cells = []\n\n    const pinnedLeftCount = Object.keys(pinnedColumns.left).length\n    for (let i = minRow; i <= maxRow; i++) {\n      prepareRow(rows[i])\n      for (let j = 0; j < pinnedLeftCount + 3; j++) {\n        if (\n          rows[i]?.cells[j]?.column &&\n          pinnedColumns.left[rows[i].cells[j]?.column?.id]\n        ) {\n          cells.push({\n            position: 'absolute',\n            cellInstance: rows[i].cells[j],\n            width: rows[i].cells[j].column?.width,\n            height: rowHtPixel,\n            left: pinnedColumns.left[rows[i].cells[j]?.column?.id]?.offset,\n            top: i * rowHtPixel\n          })\n        }\n      }\n    }\n\n    return cells\n  }\n  const pinnedRightBuilder = (\n    minRow: number,\n    maxRow: number,\n    rows: Row<IListViewRow>[],\n    pinnedColumns: IPinnedColumnState\n  ) => {\n    const cells = []\n\n    const pinnedRightCount = Object.keys(pinnedColumns.right).length\n    for (let i = minRow; i <= maxRow; i++) {\n      prepareRow(rows[i])\n      for (\n        let j = rows[i].cells.length - 1;\n        j >= rows[i].cells.length - pinnedRightCount;\n        j--\n      ) {\n        if (\n          rows[i]?.cells[j]?.column &&\n          pinnedColumns.right[rows[i].cells[j]?.column?.id]\n        ) {\n          cells.push({\n            position: 'absolute',\n            cellInstance: rows[i].cells[j],\n            width: rows[i].cells[j].column?.width,\n            height: rowHtPixel,\n            right: pinnedColumns.right[rows[i].cells[j]?.column?.id]?.offset,\n            top: i * rowHtPixel\n          })\n        }\n      }\n    }\n\n    return cells\n  }\n\n  const innerGridElementType = forwardRef<HTMLDivElement, any>(\n    ({ children, ...rest }, ref) => {\n      // const columnsContainerRef = useRef<HTMLDivElement | null>(null)\n\n      const [minRow, maxRow, minColumn, maxColumn] = getRenderedCursor(children)\n\n      return (\n        <StickyGridContext.Consumer>\n          {({\n            pinnedColumns,\n            pinnedColumnsTotalWidth,\n            selectedRows,\n            data,\n            loading,\n            isEditMode,\n            setSelectedRows,\n            onRowSelect,\n            rowIdentifier,\n            isColumnLoading,\n            visibleColumns,\n            instance,\n            columns,\n            filters,\n            setFilters,\n            rows,\n            hasRowSelection,\n            hasRowSelectionWithEdit,\n            onRowEditClick,\n            filterableColumnsCount,\n            hasRadioSelection\n          }) => {\n            const displayColumns = headerBuilder(\n              minColumn,\n              maxColumn,\n              visibleColumns,\n              pinnedColumns\n            )\n\n            const displayColumnsPinnedLeft = headerBuilderPinnedLeft(\n              visibleColumns,\n              pinnedColumns\n            )\n\n            const displayColumnsPinnedRight = headerBuilderPinnedRight(\n              visibleColumns,\n              pinnedColumns\n            )\n\n            const displayPinnedLeftRows = pinnedLeftBuilder(\n              minRow,\n              maxRow,\n              rows,\n              pinnedColumns\n            )\n\n            const displayPinnedRightRows = pinnedRightBuilder(\n              minRow,\n              maxRow,\n              rows,\n              pinnedColumns\n            )\n            var modifiedRest = {...rest}\n            modifiedRest.style.height = tableHtPixel\n            return (\n              <>\n                <Position\n                  type='relative'\n                  className='list-container'\n                  {...modifiedRest}\n                  ref={ref}\n                >\n                  <div\n                    className='columns-container'\n                    style={{\n                      width: `calc(100% + ${pinnedColumnsTotalWidth.left}px + ${pinnedColumnsTotalWidth.right}px)`,\n                      height: filterableColumnsCount === 0 ? '45px' : '70px',\n                      backgroundColor: '#fff'\n                    }}\n                  >\n                    <div\n                      className='pinned-left-overlap'\n                      style={{\n                        width: pinnedColumnsTotalWidth.left + 'px',\n                        minWidth: pinnedColumnsTotalWidth.left + 'px'\n                      }}\n                    >\n                      {displayColumnsPinnedLeft.map(\n                        ({ left, height, width, columnInstance }) => {\n                          return (\n                            <Position\n                              key={columnInstance.id}\n                              type='absolute'\n                              left={left + 'px'}\n                              style={{ height, width, minWidth: width }}\n                            >\n                              <TableHeaderCell\n                                {...{\n                                  pinnedColumns,\n                                  columnInstance,\n                                  isColumnLoading,\n                                  instance,\n                                  setPinnedColumns,\n                                  pinnedColumnsTotalWidth,\n                                  setPinnedColumnsTotalWidth,\n                                  setShowHideColumns,\n                                  setColumnCheckedCount,\n                                  columns,\n                                  selectedRows,\n                                  data,\n                                  loading,\n                                  isEditMode,\n                                  setSelectedRows,\n                                  hasSelectAllRows,\n                                  onRowSelect,\n                                  rowIdentifier,\n                                  filters,\n                                  setFilters,\n                                  getTextFieldProps,\n                                  getSelectFieldProps,\n                                  hideColumnSettings,\n                                  hasRadioSelection\n                                }}\n                              />\n                            </Position>\n                          )\n                        }\n                      )}\n                    </div>\n                    <div\n                      style={{\n                        position: 'relative',\n                        width: '100%'\n                      }}\n                    >\n                      {displayColumns.map(\n                        ({ left, height, width, columnInstance }) => {\n                          if (columnInstance.isResizing) {\n                            gridMiddle.current?.resetAfterColumnIndex(0, false)\n                          }\n                          return (\n                            <Position\n                              key={columnInstance.id}\n                              type='absolute'\n                              left={left - pinnedColumnsTotalWidth.left + 'px'}\n                              style={{ height, width }}\n                            >\n                              <TableHeaderCell\n                                {...{\n                                  pinnedColumns,\n                                  columnInstance,\n                                  isColumnLoading,\n                                  instance,\n                                  setPinnedColumns,\n                                  pinnedColumnsTotalWidth,\n                                  setPinnedColumnsTotalWidth,\n                                  setShowHideColumns,\n                                  setColumnCheckedCount,\n                                  columns,\n                                  selectedRows,\n                                  data,\n                                  loading,\n                                  isEditMode,\n                                  setSelectedRows,\n                                  onRowSelect,\n                                  rowIdentifier,\n                                  filters,\n                                  setFilters,\n                                  getTextFieldProps,\n                                  getSelectFieldProps,\n                                  hideColumnSettings,\n                                  hasRadioSelection\n                                }}\n                              />\n                            </Position>\n                          )\n                        }\n                      )}\n                    </div>\n                    <div\n                      className='pinned-right-overlap'\n                      style={{ width: pinnedColumnsTotalWidth.right + 'px' }}\n                    >\n                      {displayColumnsPinnedRight.map(\n                        ({ right, height, width, columnInstance }) => {\n                          return (\n                            <Position\n                              key={columnInstance.id}\n                              type='absolute'\n                              right={right + 'px'}\n                              style={{ height, width }}\n                            >\n                              <TableHeaderCell\n                                {...{\n                                  pinnedColumns,\n                                  columnInstance,\n                                  isColumnLoading,\n                                  instance,\n                                  setPinnedColumns,\n                                  pinnedColumnsTotalWidth,\n                                  setPinnedColumnsTotalWidth,\n                                  setShowHideColumns,\n                                  setColumnCheckedCount,\n                                  columns,\n                                  selectedRows,\n                                  data,\n                                  loading,\n                                  isEditMode,\n                                  setSelectedRows,\n                                  onRowSelect,\n                                  rowIdentifier,\n                                  filters,\n                                  setFilters,\n                                  getTextFieldProps,\n                                  getSelectFieldProps,\n                                  hideColumnSettings,\n                                  hasRadioSelection\n                                }}\n                              />\n                            </Position>\n                          )\n                        }\n                      )}\n                    </div>\n                  </div>\n\n                  <div\n                    className='rows-container'\n                    style={{\n                      top: filterableColumnsCount === 0 ? '45px' : '70px'\n                    }}\n                  >\n                    <div\n                      className='pinned-left-container'\n                      style={{ width: pinnedColumnsTotalWidth.left + 'px' }}\n                    >\n                      {displayPinnedLeftRows.map(\n                        ({ cellInstance, width, height, top, left }, j) => {\n                          const rowIndex = cellInstance.row.index\n                          let classNames = `cell--hover${rowIndex}`\n                          classNames += ` ${\n                            selectedRows[\n                              cellInstance.row.original[rowIdentifier]\n                            ]\n                              ? 'selected'\n                              : ''\n                          }`\n                          classNames += ` ${\n                            rowIndex === rows.length - 1 ? 'last-row' : ''\n                          }`\n\n                          return (\n                            <div\n                              style={{\n                                display: 'flex',\n                                position: 'absolute',\n                                width: `${width}px`,\n                                height: `${height}px`,\n                                top: `${top}px`,\n                                left: `${left}px`\n                              }}\n                              key={j}\n                            >\n                              <TableCellStyledNew\n                                {...cellInstance.getCellProps()}\n                                className={classNames}\n                                key={\n                                  'Table Cell' +\n                                  cellInstance.row.original[rowIdentifier] +\n                                  cellInstance.column.id\n                                }\n                                onMouseEnter={() =>\n                                  handleCellMouseEnter(cellInstance.row.index)\n                                }\n                                onMouseLeave={() =>\n                                  handleCellMouseLeave(cellInstance.row.index)\n                                }\n                              >\n                                {isEditMode &&\n                                cellInstance.column.isEditable &&\n                                !!selectedRows[\n                                  cellInstance.row.original[rowIdentifier]\n                                ]\n                                  ? cellInstance.render('EditableCell', {\n                                      ...cellInstance,\n                                      error: !!cellInstance?.row?.original\n                                        ?.errorFields?.[cellInstance.column.id]\n                                    })\n                                  : cellInstance.render('Cell', {\n                                      ...cellInstance,\n                                      selectedRows,\n                                      setSelectedRows,\n                                      hasRowSelection,\n                                      hasRowSelectionWithEdit,\n                                      onRowSelect,\n                                      onRowEditClick,\n                                      rowIdentifier,\n                                      loading,\n                                      isEditMode,\n                                      row: cellInstance.row,\n                                      rowCount: data.length,\n                                      hasRadioSelection\n                                    })}\n                              </TableCellStyledNew>\n                              {showFavouriteStar && (\n                                <FavouriteStarStyle\n                                  className={`${\n                                    selectedRows[\n                                      cellInstance.row.original[rowIdentifier]\n                                    ]\n                                      ? 'selected'\n                                      : ''\n                                  }`}\n                                >\n                                  {cellInstance.row.original.isFavourite && (\n                                    <FontIcon\n                                      variant='star-filled'\n                                      color='primary.main'\n                                      size='sm'\n                                    />\n                                  )}\n                                </FavouriteStarStyle>\n                              )}\n                            </div>\n                          )\n                        }\n                      )}\n                    </div>\n                    <div\n                      className='data-container'\n                      style={{ width: `${rest.style.width}px` }}\n                    >\n                      {children}\n                    </div>\n                    <div\n                      className='pinned-right-container'\n                      style={{ width: pinnedColumnsTotalWidth.right + 'px' }}\n                    >\n                      {displayPinnedRightRows.map(\n                        ({ cellInstance, width, height, top, right }, j) => {\n                          const rowIndex = cellInstance.row.index\n                          let classNames = `cell--hover${rowIndex}`\n                          classNames += ` ${\n                            selectedRows[\n                              cellInstance.row.original[rowIdentifier]\n                            ]\n                              ? 'selected'\n                              : ''\n                          }`\n                          classNames += ` ${\n                            rowIndex === rows.length - 1 ? 'last-row' : ''\n                          }`\n\n                          return (\n                            <div\n                              style={{\n                                position: 'absolute',\n                                width: `${width}px`,\n                                height: `${height}px`,\n                                top: `${top}px`,\n                                right: `${right}px`\n                              }}\n                              key={j}\n                            >\n                              <TableCellStyledNew\n                                {...cellInstance.getCellProps()}\n                                className={classNames}\n                                key={\n                                  'Table Cell' +\n                                  cellInstance.row.original[rowIdentifier] +\n                                  cellInstance.column.id\n                                }\n                                onMouseEnter={() =>\n                                  handleCellMouseEnter(cellInstance.row.index)\n                                }\n                                onMouseLeave={() =>\n                                  handleCellMouseLeave(cellInstance.row.index)\n                                }\n                              >\n                                {isEditMode &&\n                                cellInstance.column.isEditable &&\n                                !!selectedRows[\n                                  cellInstance.row.original[rowIdentifier]\n                                ]\n                                  ? cellInstance.render('EditableCell', {\n                                      ...cellInstance,\n                                      error: !!cellInstance?.row?.original\n                                        ?.errorFields?.[cellInstance.column.id]\n                                    })\n                                  : cellInstance.render('Cell', {\n                                      ...cellInstance,\n                                      selectedRows,\n                                      setSelectedRows,\n                                      hasRowSelection,\n                                      hasRowSelectionWithEdit,\n                                      onRowSelect,\n                                      onRowEditClick,\n                                      rowIdentifier,\n                                      loading,\n                                      isEditMode,\n                                      hasRadioSelection,\n                                      row: cellInstance.row,\n                                      rowCount: data.length\n                                    })}\n                              </TableCellStyledNew>\n                            </div>\n                          )\n                        }\n                      )}\n                    </div>\n                  </div>\n                </Position>\n              </>\n            )\n          }}\n        </StickyGridContext.Consumer>\n      )\n    }\n  )\n  // Render the UI for your table\n  return (\n    <ListViewStyled\n      {...rest}\n      ref={tableRef}\n      loading={loading}\n      showFavouriteStar={showFavouriteStar}\n    >\n      {/* TOOLBAR - Action Bar, Pagination Bar, etc. */}\n      {!hideToolbar && (\n        <Box\n          bgColor='transparent'\n          pb='1em'\n          justifyContent='space-between'\n          color='grey.A1000'\n          className='toolbar'\n        >\n          <Box display='flex' justifyContent='space-between'>\n            <Box display='flex'>\n              {hasRowSelection || hasRowSelectionWithEdit ? ActionBar : ''}\n            </Box>\n            <Box flexShrink={1} display='flex'>\n              {(() => {\n                const selectedRowsCount = Object.keys(selectedRows).length\n                return (\n                  !!selectedRowsCount && (\n                    <Typography fontSize='13px'>\n                      {selectedRowsCount} Selected\n                    </Typography>\n                  )\n                )\n              })()}\n              {!hidePaginationBar && (\n                <PaginationWrapper\n                  instance={instance}\n                  totalRows={totalRows}\n                  isTotalCountLoading={isTotalCountLoading}\n                  onPageChange={onPageChange}\n                  moreResultsExists={moreResultsExists}\n                  loading={loading}\n                  disableNext={disableNext}\n                />\n              )}\n              {IconBar}\n              {!hideRefresh && (\n                <Tooltip\n                  hover\n                  messagePlacement='end'\n                  arrowPlacement='center'\n                  tooltipDirection='bottom'\n                  message={`Updated on ${lastUpdated?.getDate()}, ${\n                    monthNamesShort[lastUpdated?.getMonth()]\n                  } ${lastUpdated?.getFullYear()} ${String(\n                    lastUpdated?.getHours()\n                  ).padStart(2, '0')}:${String(\n                    lastUpdated?.getMinutes()\n                  ).padStart(2, '0')}:${String(\n                    lastUpdated?.getSeconds()\n                  ).padStart(2, '0')}`}\n                >\n                  <IconButton\n                    onClick={handleRefresh}\n                    // title={`Updated on ${lastUpdated?.getDate()}, ${\n                    //   monthNamesShort[lastUpdated?.getMonth()]\n                    // } ${lastUpdated?.getFullYear()} ${String(\n                    //   lastUpdated?.getHours()\n                    // ).padStart(2, '0')}:${String(lastUpdated?.getMinutes()).padStart(\n                    //   2,\n                    //   '0'\n                    // )}:${String(lastUpdated?.getSeconds()).padStart(2, '0')}`}\n                    iconVariant='reload'\n                    iconSize={12}\n                    onlyIcon\n                    circle\n                    color='grey.A1000'\n                  />\n                </Tooltip>\n              )}\n              {!hideColumnSettings && (\n                <ShowHideColumnPopup\n                  checkBoxGroupArray={showHideColumns}\n                  selectedCount={columnCheckedCount}\n                  onCheckBoxChange={handleColumnShowHide}\n                  onSelectAll={handleSelectAllColumns}\n                  onOpen={onShowMoreColumns}\n                  onApply={(closeModal, withSave) => {\n                    if (columnCheckedCount > 50) {\n                      toast.add(\n                        labels?.columnSelectionExceedingLimit ||\n                          'Cannot select more than 50 columns.',\n                        'warning',\n                        false\n                      )\n                      return\n                    }\n\n                    closeModal()\n                    setAppliedShowHideColumns(showHideColumns)\n                    const columnPreferences = {}\n                    const selectedColumns = {}\n                    showHideColumns.forEach((column) => {\n                      toggleHideColumn(column.id, !column.checked)\n                      if (column.checked) {\n                        selectedColumns[column.id] = true\n                      }\n                    })\n\n                    allColumns.forEach((column) => {\n                      if (selectedColumns[column.id]) {\n                        columnPreferences[column.id] = column\n                      }\n                    })\n                    // visibleColumns.forEach((column) => {\n                    //   columnPreferences[column.id] = column\n                    // })\n                    setTimeout(() => {\n                      setPinnedColumns((pC) => {\n                        const _pC: IPinnedColumnState = {\n                          left: {},\n                          right: {}\n                        }\n\n                        let leftTotal = 0\n                        let rightTotal = 0\n                        let prevWidth = 0\n                        Object.keys(pC.left).forEach((columnId) => {\n                          const width =\n                            document\n                              .getElementById(`column-header-${columnId}`)\n                              ?.getBoundingClientRect().width || 0\n                          _pC.left[columnId] = {\n                            offset: prevWidth,\n                            width\n                          }\n                          leftTotal += width\n                          prevWidth = width\n                        })\n\n                        prevWidth = 0\n                        Object.keys(pC.right).forEach((columnId) => {\n                          const width =\n                            document\n                              .getElementById(`column-header-${columnId}`)\n                              ?.getBoundingClientRect().width || 0\n                          _pC.right[columnId] = {\n                            offset: prevWidth,\n                            width\n                          }\n                          rightTotal += width\n                          prevWidth = width\n                        })\n\n                        setPinnedColumnsTotalWidth({\n                          left: leftTotal,\n                          right: rightTotal\n                        })\n                        return _pC\n                      })\n                    }, 1000)\n\n                    if (withSave) {\n                      onSaveColumnPreferences(columnPreferences)\n                    } else {\n                      onApply(selectedColumns)\n                    }\n                  }}\n                  onClickCancel={() => {\n                    const checkedColumns = columns.filter(\n                      (column) => column.isVisible\n                    )\n                    setColumnCheckedCount(checkedColumns?.length)\n                    if (appliedShowHideColumns) {\n                      setShowHideColumns(appliedShowHideColumns)\n                    }\n                  }}\n                />\n              )}\n            </Box>\n          </Box>\n        </Box>\n      )}\n\n      <div style={{ overflow: 'auto', display: 'flex', flexGrow: 1 }}>\n        <TableStyled>\n          {rows.length === 0 && (\n            <TableHeadingContainer style={{ width: totalColumnsWidth }}>\n              {headerGroups.map((headerGroup: any, i: number) => (\n                <div {...headerGroup.getHeaderGroupProps()} key={i}>\n                  {headerGroup.headers.map((column: any) => {\n                    // console.log(headerGroup)\n                    const columnHeaderProps = column.getHeaderProps()\n\n                    if (\n                      (column.id === 'selection' && !hasRowSelection) ||\n                      (column.id === 'selectionWithEdit' &&\n                        !hasRowSelectionWithEdit)\n                    ) {\n                      columnHeaderProps.style = {\n                        ...columnHeaderProps.style,\n                        display: 'none'\n                      }\n                    }\n\n                    return (\n                      ((column.id === 'selection' && hasRowSelection) ||\n                        (column.id === 'selectionWithEdit' &&\n                          hasRowSelectionWithEdit) ||\n                        column.id !== 'selection' ||\n                        column.id !== 'selectionWithEdit') && (\n                        <TableHeadingStyled\n                          key={column.id}\n                          {...columnHeaderProps}\n                          // title={column.Header}\n                          title={undefined}\n                          pinnedColumn={\n                            pinnedColumns.left[column.id] ||\n                            pinnedColumns.right[column.id]\n                          }\n                          direction={\n                            pinnedColumns.left[column.id]\n                              ? 'left'\n                              : pinnedColumns.right[column.id]\n                              ? 'right'\n                              : undefined\n                          }\n                          className={column.isSortable && 'cursor'}\n                          columnId={column.id}\n                          id={`column-header-${column.id}`}\n                        >\n                          {column.id !== 'selection' &&\n                            column.id !== 'selectionWithEdit' &&\n                            !isColumnLoading && (\n                              <ColumnOptions\n                                instance={instance}\n                                columnInstance={column}\n                                columns={columns}\n                                pinnedColumns={pinnedColumns}\n                                pinnedColumnsTotalWidth={\n                                  pinnedColumnsTotalWidth\n                                }\n                                setPinnedColumns={setPinnedColumns}\n                                setColumnCheckedCount={setColumnCheckedCount}\n                                setShowHideColumns={setShowHideColumns}\n                                setPinnedColumnsTotalWidth={\n                                  setPinnedColumnsTotalWidth\n                                }\n                                hideColumnSettings={hideColumnSettings}\n                              />\n                            )}\n                          <ColumnHeadingStyled\n                            {...(column.isSortable === true\n                              ? column.getSortByToggleProps()\n                              : {})}\n                            column={column}\n                            title={\n                              column?.infoTip ||\n                              (typeof column.Header === 'string'\n                                ? column.Header\n                                : undefined)\n                            }\n                          >\n                            <strong style={{ userSelect: 'none' }}>\n                              {isColumnLoading &&\n                              column.id !== 'selection' &&\n                              column.id !== 'selectionWithEdit' ? (\n                                <Shimmer\n                                  width={Number(column.width) - 50}\n                                  height={20}\n                                />\n                              ) : (\n                                column.render('Header', {\n                                  selectedRows,\n                                  data,\n                                  loading,\n                                  isEditMode\n                                })\n                              )}\n                            </strong>\n                          </ColumnHeadingStyled>\n                          {column.isFilterable && (\n                            <Box mt='12px'>\n                              {isColumnLoading ? (\n                                <ColumnFilterLoading />\n                              ) : (\n                                column.render('Filter', {\n                                  textFieldProps: getTextFieldProps(column),\n                                  selectFieldProps: getSelectFieldProps(column),\n                                  filters,\n                                  setFilters\n                                })\n                              )}\n                            </Box>\n                          )}\n                          {!isColumnLoading &&\n                            column.id !== 'selection' &&\n                            column.id !== 'selectionWithEdit' && (\n                              <ColumnResizerStyled\n                                {...column.getResizerProps()}\n                                isResizing={column.isResizing}\n                              />\n                            )}\n                        </TableHeadingStyled>\n                      )\n                    )\n                  })}\n                </div>\n              ))}\n            </TableHeadingContainer>\n          )}\n          <TableBodyStyled\n            {...getTableBodyProps()}\n            style={{ display: 'flex', position: 'relative' }}\n          >\n            {rows.length === 0 && NoDataFound}\n\n            {tableMounted && rows.length > 0 && (\n              <React.Fragment>\n                <StickyGridContext.Provider\n                  value={{\n                    pinnedColumns,\n                    pinnedColumnsTotalWidth,\n                    visibleColumns,\n                    selectedRows,\n                    data,\n                    loading,\n                    isEditMode,\n                    setSelectedRows,\n                    onRowSelect,\n                    rowIdentifier,\n                    isColumnLoading,\n                    instance,\n                    columns,\n                    filters,\n                    setFilters,\n                    rows,\n                    hasRowSelection,\n                    hasRowSelectionWithEdit,\n                    onRowEditClick,\n                    filterableColumnsCount,\n                    hasRadioSelection\n                  }}\n                >\n                  {!disableScrollOverlay && (\n                    <ScrollOverlay className='scroll-overlay' />\n                  )}\n                  <VariableSizeGrid\n                    className='variable-size-grid'\n                    height={height}\n                    style={{\n                      overflow: 'overlay',\n                      paddingBottom: '10px',\n                      overflowY: 'scroll'\n                    }}\n                    rowHeight={() => rowHtPixel}\n                    columnWidth={(index) =>\n                      visibleColumns[index].id === 'selection' ||\n                      visibleColumns[index].id === 'selectionWithEdit' ||\n                      pinnedColumns.left[visibleColumns[index].id] ||\n                      pinnedColumns.right[visibleColumns[index].id]\n                        ? 0\n                        : (visibleColumns[index].width as number) < 150\n                        ? 150\n                        : (visibleColumns[index].width as number)\n                    }\n                    width={gridWidth}\n                    ref={gridMiddle}\n                    rowCount={data.length}\n                    columnCount={visibleColumns.length}\n                    itemData={RenderCellItemData}\n                    innerElementType={innerGridElementType}\n                    // onScroll={handleScrollMain}\n                    // className={\n                    //   pinnedColumnsTotalWidth.right > 0 ? 'hideScroll' : ''\n                    // }\n                  >\n                    {RenderCell}\n                  </VariableSizeGrid>\n                </StickyGridContext.Provider>\n              </React.Fragment>\n            )}\n          </TableBodyStyled>\n        </TableStyled>\n      </div>\n    </ListViewStyled>\n  )\n}\n\nconst LVMemo = React.memo(ListView, (p, n) => {\n  return p.loading === n.loading && n.loading === true\n})\n\nconst ListViewMemoized = ({\n  columns = [],\n  onSaveColumnPreferences = defaultCallback,\n  onApply = defaultCallback,\n  ...rest\n}: IListViewProps) => {\n  const [columnsWithWidth, setColumnsWithWidth] = useState<IListViewColumn[]>(\n    []\n  )\n\n  /** Container of List View */\n  const containerRef = React.useRef<HTMLDivElement | null>(null)\n\n  /** Calculate Available container space, i.e, exclude checkbox column (Row Selection) */\n  const getAvailableContainerWidth = React.useCallback(() => {\n    const { hasRowSelection, hasRowSelectionWithEdit } = rest\n    const selectionColumnWidth = hasRowSelectionWithEdit\n      ? 50\n      : hasRowSelection\n      ? 40\n      : 0\n    const containerWidth =\n      (containerRef.current?.getBoundingClientRect().width || 100) -\n      selectionColumnWidth\n\n    return containerWidth\n  }, [rest.hasRowSelection, rest.hasRowSelectionWithEdit])\n\n  React.useLayoutEffect(() => {\n    const containerWidth = getAvailableContainerWidth()\n    setColumnsWithWidth(calculateColumnsWidth(columns, containerWidth))\n  }, [columns])\n\n  const handleApply = React.useCallback(\n    (selectedColumns: Record<string, boolean>) => {\n      setColumnsWithWidth((cols) => {\n        const colsWithNewVisibility = cols.map((c) => ({\n          ...c,\n          isVisible: !!selectedColumns?.[c.accessor],\n          width: undefined\n        }))\n        const containerWidth = getAvailableContainerWidth()\n        return calculateColumnsWidth(colsWithNewVisibility, containerWidth)\n      })\n      onApply(selectedColumns)\n    },\n    [setColumnsWithWidth, onApply]\n  )\n\n  const handleSaveColumnPreferences = React.useCallback(\n    (visibleColumnIds: Record<string, ColumnInstance<IListViewColumn>>) => {\n      setColumnsWithWidth((cols) => {\n        const colsWithNewVisibility = cols.map((c) => ({\n          ...c,\n          isVisible: !!visibleColumnIds?.[c.accessor],\n          width: undefined\n        }))\n        const containerWidth = getAvailableContainerWidth()\n        return calculateColumnsWidth(colsWithNewVisibility, containerWidth)\n      })\n      onSaveColumnPreferences(visibleColumnIds)\n    },\n    [setColumnsWithWidth, onSaveColumnPreferences]\n  )\n  const handleWindowResize = React.useCallback(() => {\n    setColumnsWithWidth((cols) => {\n      const colsWithUnsetWidths = cols.map((c) => ({\n        ...c,\n        width: undefined\n      }))\n      const containerWidth = getAvailableContainerWidth()\n      return calculateColumnsWidth(colsWithUnsetWidths, containerWidth)\n    })\n  }, [setColumnsWithWidth])\n\n  return (\n    <div\n      style={{ width: '100%', height: '100%' }}\n      className={`listview-container-${rest.rowIdentifier}`}\n      ref={containerRef}\n    >\n      {columnsWithWidth.length > 0 && (\n        <LVMemo\n          columns={columnsWithWidth}\n          onSaveColumnPreferences={handleSaveColumnPreferences}\n          onApply={handleApply}\n          onResize={handleWindowResize}\n          {...rest}\n        />\n      )}\n    </div>\n  )\n}\n\nexport default ListViewMemoized\n\nexport { ListView }\n"]},"metadata":{},"sourceType":"module"}