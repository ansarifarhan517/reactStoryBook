{"ast":null,"code":"import _defineProperty from \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport L from 'leaflet';\nexport var updateSettingsWithLegends = function updateSettingsWithLegends(settings, markers, settingKey) {\n  if (markers === null || markers === void 0 ? void 0 : markers.permission) {\n    var entities = markers === null || markers === void 0 ? void 0 : markers.entities; //  entities: ['orders', 'dbs'],\n\n    var entitiesMap = markers === null || markers === void 0 ? void 0 : markers.entitiesMap; //  entitiesMap: { orders:{},dbs:{}  }\n\n    entities.forEach(function (entity) {\n      var _entity = entitiesMap[entity]; // orders:{ legends: ['notDispatched', 'delivered']}\n\n      if (_entity === null || _entity === void 0 ? void 0 : _entity.permission) {\n        // orders:{ permission:true,legends: ['notDispatched', 'delivered']}\n        var optionKeys = _entity.legends;\n        var legendMap = _entity.legendsMap; // legendsMap:{delivered:{},notDispatched:{}}\n        // delivered { value:'',color:'',checked:true,....}\n\n        var entityOption = optionKeys.map(function (option) {\n          var _option = legendMap[option];\n\n          if (_option === null || _option === void 0 ? void 0 : _option.permission) {\n            return {\n              value: _option === null || _option === void 0 ? void 0 : _option.value,\n              checked: _option === null || _option === void 0 ? void 0 : _option.checked,\n              color: _option === null || _option === void 0 ? void 0 : _option.color,\n              disabled: _option === null || _option === void 0 ? void 0 : _option.disabled,\n              permission: _option === null || _option === void 0 ? void 0 : _option.permission,\n              id: option,\n              allow: _option === null || _option === void 0 ? void 0 : _option.allow,\n              iconRef: _option.iconRef,\n              popRef: _option.popRef,\n              extraInfo: _option.extraInfo,\n              label: _option.label,\n              image: _option.image,\n              icon: _option.icon,\n              connect: _option.connect\n            };\n          }\n\n          return undefined;\n        }).filter(function (item) {\n          return !!item;\n        });\n        settings[settingKey] = {\n          title: settingKey || entitiesMap[entity].label,\n          type: entity.type || 'checkbox',\n          option: entityOption\n        };\n        return entityOption;\n      }\n    });\n  }\n};\n/* WARNING: arrays must not contain {objects} or behavior may be undefined */\n\nexport var isArrayEqual = function isArrayEqual(a, b) {\n  return JSON.stringify(a) === JSON.stringify(b);\n};\nexport var setLegendMarkers = function setLegendMarkers(legends, markers) {\n  var entities = markers === null || markers === void 0 ? void 0 : markers.entities; //  entities: ['orders', 'dbs'],\n\n  var entitiesMap = markers === null || markers === void 0 ? void 0 : markers.entitiesMap; //  entitiesMap: { orders:{},dbs:{}  }\n\n  entities === null || entities === void 0 ? void 0 : entities.forEach(function (entity) {\n    var _entity = entitiesMap[entity]; // orders:{ legends: ['notDispatched', 'delivered'],legendsMap:{}}\n\n    var legendsMap = _entity === null || _entity === void 0 ? void 0 : _entity.legendsMap; // legendsMap:{delivered:{},notDispatched:{}}\n\n    if (_entity === null || _entity === void 0 ? void 0 : _entity.permission) {\n      legends.forEach(function (option) {\n        legendsMap[option === null || option === void 0 ? void 0 : option.id] = _objectSpread(_objectSpread({}, legendsMap[option === null || option === void 0 ? void 0 : option.id]), {}, {\n          checked: option === null || option === void 0 ? void 0 : option.checked\n        });\n      });\n    }\n  });\n  return markers;\n};\nexport var trafficMap = function trafficMap(_zoom) {};\nexport var updateMapWithSettings = function updateMapWithSettings(settingConfig, configurableOption, setConfigurableOption, _setSettingConfig, markerConfig, setmarkerConfig, heatmap, geocoding, setGeocoding, locationSearchProp) {\n  var _settingConfig$MapTh, _settingConfig$MapTh$, _settingConfig$Geofen, _settingConfig$Geofen2, _settingConfig$Geofen3, _settingConfig$MapTy, _settingConfig$MapTy$, _mapType$subOptions, _settingConfig$Miscel, _settingConfig$Miscel2, _settingConfig$MapMo, _settingConfig$MapMo$, _settingConfig$Miscel3, _settingConfig$Miscel4;\n\n  var circle = configurableOption.circle;\n  var polygon = configurableOption.polygon; // theme added dynamically.\n\n  var mapTheme = settingConfig === null || settingConfig === void 0 ? void 0 : (_settingConfig$MapTh = settingConfig['Map Theme']) === null || _settingConfig$MapTh === void 0 ? void 0 : (_settingConfig$MapTh$ = _settingConfig$MapTh.option) === null || _settingConfig$MapTh$ === void 0 ? void 0 : _settingConfig$MapTh$.find(function (option) {\n    return option.selected;\n  }); // geofences added dynamically.\n\n  var geofences = settingConfig === null || settingConfig === void 0 ? void 0 : (_settingConfig$Geofen = settingConfig.Geofences) === null || _settingConfig$Geofen === void 0 ? void 0 : (_settingConfig$Geofen2 = _settingConfig$Geofen.option) === null || _settingConfig$Geofen2 === void 0 ? void 0 : _settingConfig$Geofen2.filter(function (option) {\n    return option.selected;\n  });\n\n  if (settingConfig === null || settingConfig === void 0 ? void 0 : (_settingConfig$Geofen3 = settingConfig.Geofences) === null || _settingConfig$Geofen3 === void 0 ? void 0 : _settingConfig$Geofen3.permission) {\n    var _configurableOption$c, _configurableOption$c2, _configurableOption$c3, _configurableOption$p, _configurableOption$p2, _configurableOption$p3;\n\n    // geofence available and circle object available, if user toggle true then set permission true or else false\n    circle = (configurableOption === null || configurableOption === void 0 ? void 0 : (_configurableOption$c = configurableOption.circle) === null || _configurableOption$c === void 0 ? void 0 : _configurableOption$c.permission) && (geofences === null || geofences === void 0 ? void 0 : geofences.length) > 0 ? _objectSpread(_objectSpread({}, configurableOption === null || configurableOption === void 0 ? void 0 : (_configurableOption$c2 = configurableOption.circle) === null || _configurableOption$c2 === void 0 ? void 0 : _configurableOption$c2.permission), {}, {\n      permission: true\n    }) : _objectSpread(_objectSpread({}, configurableOption === null || configurableOption === void 0 ? void 0 : (_configurableOption$c3 = configurableOption.circle) === null || _configurableOption$c3 === void 0 ? void 0 : _configurableOption$c3.permission), {}, {\n      permission: false\n    }); // geofence available and polygon object available, if user toggle true then set permission true or else false\n\n    polygon = (configurableOption === null || configurableOption === void 0 ? void 0 : (_configurableOption$p = configurableOption.polygon) === null || _configurableOption$p === void 0 ? void 0 : _configurableOption$p.permisssion) && (geofences === null || geofences === void 0 ? void 0 : geofences.length) > 0 ? _objectSpread(_objectSpread({}, configurableOption === null || configurableOption === void 0 ? void 0 : (_configurableOption$p2 = configurableOption.polygon) === null || _configurableOption$p2 === void 0 ? void 0 : _configurableOption$p2.permission), {}, {\n      permission: true\n    }) : _objectSpread(_objectSpread({}, configurableOption === null || configurableOption === void 0 ? void 0 : (_configurableOption$p3 = configurableOption.polygon) === null || _configurableOption$p3 === void 0 ? void 0 : _configurableOption$p3.permission), {}, {\n      permission: false\n    });\n  } // choose google map or open street\n\n\n  var mapType = settingConfig === null || settingConfig === void 0 ? void 0 : (_settingConfig$MapTy = settingConfig['Map Type']) === null || _settingConfig$MapTy === void 0 ? void 0 : (_settingConfig$MapTy$ = _settingConfig$MapTy.option) === null || _settingConfig$MapTy$ === void 0 ? void 0 : _settingConfig$MapTy$.find(function (option) {\n    return option.selected;\n  }); // sub type of google or open street map selection\n\n  var mapSubType = mapType === null || mapType === void 0 ? void 0 : (_mapType$subOptions = mapType.subOptions) === null || _mapType$subOptions === void 0 ? void 0 : _mapType$subOptions.find(function (subOption) {\n    return subOption.selected;\n  }); // poi, traffic,rular, search can be toggled\n\n  var miscellaneous = settingConfig === null || settingConfig === void 0 ? void 0 : (_settingConfig$Miscel = settingConfig.Miscellaneous) === null || _settingConfig$Miscel === void 0 ? void 0 : (_settingConfig$Miscel2 = _settingConfig$Miscel.option) === null || _settingConfig$Miscel2 === void 0 ? void 0 : _settingConfig$Miscel2.filter(function (option) {\n    return option.selected;\n  }); // traffic layer toggling\n\n  var traffic = miscellaneous === null || miscellaneous === void 0 ? void 0 : miscellaneous.find(function (option) {\n    return option.name === 'Traffic';\n  }); // map mode selection\n\n  var mapMode = settingConfig === null || settingConfig === void 0 ? void 0 : (_settingConfig$MapMo = settingConfig['Map Mode']) === null || _settingConfig$MapMo === void 0 ? void 0 : (_settingConfig$MapMo$ = _settingConfig$MapMo.option) === null || _settingConfig$MapMo$ === void 0 ? void 0 : _settingConfig$MapMo$.find(function (option) {\n    return (option === null || option === void 0 ? void 0 : option.selected) && (option === null || option === void 0 ? void 0 : option.permission);\n  });\n  var heatMapObj = {\n    permission: heatmap === null || heatmap === void 0 ? void 0 : heatmap.permission,\n    data: heatmap === null || heatmap === void 0 ? void 0 : heatmap.data\n  };\n\n  if ((mapMode === null || mapMode === void 0 ? void 0 : mapMode.name) === 'HeatMap') {\n    heatMapObj.permission = true;\n  }\n\n  var locationSearch = !!(miscellaneous === null || miscellaneous === void 0 ? void 0 : miscellaneous.find(function (option) {\n    return option.name === 'Location Search';\n  })); // check if this option exist in setting file, if no then show whatever coming as prop\n\n  if (!(settingConfig === null || settingConfig === void 0 ? void 0 : (_settingConfig$Miscel3 = settingConfig.Miscellaneous) === null || _settingConfig$Miscel3 === void 0 ? void 0 : (_settingConfig$Miscel4 = _settingConfig$Miscel3.option) === null || _settingConfig$Miscel4 === void 0 ? void 0 : _settingConfig$Miscel4['Location Search'])) {\n    locationSearch = locationSearchProp;\n  }\n\n  setConfigurableOption(_objectSpread(_objectSpread({}, configurableOption), {}, {\n    theme: mapTheme === null || mapTheme === void 0 ? void 0 : mapTheme.id,\n    // map theme selection\n    heatmap: heatMapObj,\n    // show heatmap if selected on settings\n    tiles: mapSubType === null || mapSubType === void 0 ? void 0 : mapSubType.id,\n    // open street and google sub type\n    isOpenStreet: (mapType === null || mapType === void 0 ? void 0 : mapType.name) === 'Open Street Maps',\n    poi: !!(miscellaneous === null || miscellaneous === void 0 ? void 0 : miscellaneous.find(function (option) {\n      return option.name === 'Point of interest';\n    })),\n    locationSearch: locationSearch,\n    //  rular on map toggling\n    rulerControl: !!(miscellaneous === null || miscellaneous === void 0 ? void 0 : miscellaneous.find(function (option) {\n      return option.name === 'Ruler Control';\n    })),\n    polygon: polygon,\n    circle: circle,\n    // traffic layer\n    traffic: (traffic === null || traffic === void 0 ? void 0 : traffic.selected) ? traffic === null || traffic === void 0 ? void 0 : traffic.selected : false\n  })); // if in settings we remove location search and before that something there in searchbox should get flushed.\n\n  if (locationSearch === false && geocoding.searchText) {\n    setGeocoding(_objectSpread(_objectSpread({}, geocoding), {}, {\n      searchText: ''\n    }));\n  }\n\n  markerConfig && setmarkerConfig(markerConfig); // whenever settings getting updated this block should get called\n  // setSettingConfig(newSettingConfig)\n};\nexport var convertArrayToObject = function convertArrayToObject(legend) {\n  var key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'id';\n  var initialValue = {};\n\n  if (Array.isArray(legend)) {\n    return legend.reduce(function (obj, item) {\n      return _objectSpread(_objectSpread({}, obj), {}, _defineProperty({}, item[key], item));\n    }, initialValue);\n  }\n\n  return legend;\n};\nexport var getGeoLocation = function getGeoLocation(latlngObj, google, data, setData, setShowLocation) {\n  var newData = Object.assign(data, {});\n  var geocoder = new google.maps.Geocoder(); // find a location and update option\n\n  geocoder.geocode({\n    location: latlngObj\n  }, function (results, status) {\n    setShowLocation && setShowLocation(false);\n\n    if (status === google.maps.GeocoderStatus.OVER_QUERY_LIMIT) {// over limit error\n    } else if (status === 'OK') {\n      newData._thisLocation = results[0] ? results[0].formatted_address : '';\n    } else {\n      newData._thisLocation = 'Location not found';\n    }\n\n    setData && setData(newData);\n    setShowLocation && setShowLocation(true);\n    return newData._thisLocation;\n  });\n};\nexport var getNewSetting = function getNewSetting(setting) {\n  // create a new reference of setting\n  var settingOpn = deepCopy(setting);\n  return settingOpn;\n};\n\nfunction recursiveCall(obj) {\n  return deepCopy(obj);\n}\n\nexport function deepCopy(obj) {\n  var retObj = {};\n\n  var _assignProps = function _assignProps(obj, keyIndex, retObj) {\n    var subType = Object.prototype.toString.call(obj[keyIndex]);\n\n    if (subType === '[object Object]' || subType === '[object Array]') {\n      retObj[keyIndex] = recursiveCall(obj[keyIndex]);\n    } else {\n      retObj[keyIndex] = obj[keyIndex];\n    }\n  };\n\n  if (Object.prototype.toString.call(obj) === '[object Object]') {\n    retObj = {};\n\n    for (var key in obj) {\n      _assignProps(obj, key, retObj);\n    }\n  } else if (Object.prototype.toString.call(obj) === '[object Array]') {\n    retObj = [];\n\n    for (var i = 0; i < obj.length; i++) {\n      _assignProps(obj, i, retObj);\n    }\n  }\n\n  return retObj;\n}\nexport var getAddressInfo = function getAddressInfo(address) {\n  var addressObj = {\n    apartment: '',\n    streetName: '',\n    landMark: '',\n    locality: '',\n    state: '',\n    city: '',\n    pincode: '',\n    country: '',\n    registeredCountryIsoCode: ''\n  };\n  address.forEach(function (component) {\n    if (component.types.includes('postal_code')) {\n      addressObj.pincode = component.long_name;\n    } else if (component.types.includes('country')) {\n      addressObj.country = component.long_name;\n    } else if (component.types.includes('administrative_area_level_1')) {\n      addressObj.state = component.long_name;\n    } else if (component.types.includes('locality')) {\n      addressObj.city = component.long_name;\n    } else if (component.types.includes('sublocality_level_1')) {\n      addressObj.locality += \" \".concat(component.long_name);\n      addressObj.streetName = component.long_name; // only for USA\n    } else if (component.types.includes('street_address')) {\n      addressObj.streetName = component.long_name;\n      addressObj.apartment += \" \".concat(component.long_name); // only for USA\n    } else if (component.types.includes('route')) {\n      addressObj.apartment += \" \".concat(component.long_name); // only for USA\n    } else if (component.types.includes('intersection')) {\n      addressObj.streetName = component.long_name;\n    } else if (component.types.includes('premise')) {\n      addressObj.apartment = component.long_name;\n    } else if (component.types.includes('subpremise')) {\n      addressObj.apartment += \" \".concat(component.long_name);\n    } else if (component.types.includes('establishment')) {\n      addressObj.apartment += \" \".concat(component.long_name);\n    } else if (component.types.includes('street_number')) {\n      addressObj.apartment += \" \".concat(component.long_name);\n    } else if (component.types.includes('point_of_interest')) {\n      addressObj.landMark = component.long_name;\n    }\n  });\n  return addressObj;\n}; //Calculate bounds explicitly for Circle data\n\nexport var getCircleLatRadius = function getCircleLatRadius(cRadius) {\n  return cRadius / 40075017 * 360;\n};\nexport var getCircleLngRadius = function getCircleLngRadius(cRadius, cLat) {\n  return getCircleLatRadius(cRadius) / Math.cos(Math.PI / 180 * cLat);\n};\nexport var getCircleBounds = function getCircleBounds(cRadius, cLat, cLng) {\n  var lngRadius = getCircleLngRadius(cRadius, cLat);\n  var latRadius = getCircleLatRadius(cRadius);\n  var sw = new L.LatLng(cLat - latRadius, cLng - lngRadius);\n  var ne = new L.LatLng(cLat + latRadius, cLng + lngRadius);\n  return [[sw.lat, sw.lng], [ne.lat, ne.lng]];\n};","map":{"version":3,"sources":["/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/atoms/Map/helperMethods.tsx"],"names":["L","updateSettingsWithLegends","settings","markers","settingKey","permission","entities","entitiesMap","forEach","entity","_entity","optionKeys","legends","legendMap","legendsMap","entityOption","map","option","_option","value","checked","color","disabled","id","allow","iconRef","popRef","extraInfo","label","image","icon","connect","undefined","filter","item","title","type","isArrayEqual","a","b","JSON","stringify","setLegendMarkers","trafficMap","_zoom","updateMapWithSettings","settingConfig","configurableOption","setConfigurableOption","_setSettingConfig","markerConfig","setmarkerConfig","heatmap","geocoding","setGeocoding","locationSearchProp","circle","polygon","mapTheme","find","selected","geofences","Geofences","length","permisssion","mapType","mapSubType","subOptions","subOption","miscellaneous","Miscellaneous","traffic","name","mapMode","heatMapObj","data","locationSearch","theme","tiles","isOpenStreet","poi","rulerControl","searchText","convertArrayToObject","legend","key","initialValue","Array","isArray","reduce","obj","getGeoLocation","latlngObj","google","setData","setShowLocation","newData","Object","assign","geocoder","maps","Geocoder","geocode","location","results","status","GeocoderStatus","OVER_QUERY_LIMIT","_thisLocation","formatted_address","getNewSetting","setting","settingOpn","deepCopy","recursiveCall","retObj","_assignProps","keyIndex","subType","prototype","toString","call","i","getAddressInfo","address","addressObj","apartment","streetName","landMark","locality","state","city","pincode","country","registeredCountryIsoCode","component","types","includes","long_name","getCircleLatRadius","cRadius","getCircleLngRadius","cLat","Math","cos","PI","getCircleBounds","cLng","lngRadius","latRadius","sw","LatLng","ne","lat","lng"],"mappings":";;AAAA,OAAOA,CAAP,MAAc,SAAd;AAMA,OAAO,IAAMC,yBAAyB,GAAG,SAA5BA,yBAA4B,CACvCC,QADuC,EAEvCC,OAFuC,EAGvCC,UAHuC,EAIpC;AACH,MAAID,OAAJ,aAAIA,OAAJ,uBAAIA,OAAO,CAAEE,UAAb,EAAyB;AACvB,QAAMC,QAAQ,GAAGH,OAAH,aAAGA,OAAH,uBAAGA,OAAO,CAAEG,QAA1B,CADuB,CACY;;AACnC,QAAMC,WAAW,GAAGJ,OAAH,aAAGA,OAAH,uBAAGA,OAAO,CAAEI,WAA7B,CAFuB,CAEkB;;AACzCD,IAAAA,QAAQ,CAACE,OAAT,CAAiB,UAACC,MAAD,EAAiB;AAChC,UAAMC,OAAO,GAAGH,WAAW,CAACE,MAAD,CAA3B,CADgC,CACI;;AACpC,UAAIC,OAAJ,aAAIA,OAAJ,uBAAIA,OAAO,CAAEL,UAAb,EAAyB;AACvB;AACA,YAAMM,UAAU,GAAGD,OAAO,CAACE,OAA3B;AACA,YAAMC,SAAS,GAAGH,OAAO,CAACI,UAA1B,CAHuB,CAGc;AACrC;;AACA,YAAMC,YAAY,GAAGJ,UAAU,CAC5BK,GADkB,CACd,UAACC,MAAD,EAAoB;AACvB,cAAMC,OAAO,GAAGL,SAAS,CAACI,MAAD,CAAzB;;AACA,cAAIC,OAAJ,aAAIA,OAAJ,uBAAIA,OAAO,CAAEb,UAAb,EAAyB;AACvB,mBAAO;AACLc,cAAAA,KAAK,EAAED,OAAF,aAAEA,OAAF,uBAAEA,OAAO,CAAEC,KADX;AAELC,cAAAA,OAAO,EAAEF,OAAF,aAAEA,OAAF,uBAAEA,OAAO,CAAEE,OAFb;AAGLC,cAAAA,KAAK,EAAEH,OAAF,aAAEA,OAAF,uBAAEA,OAAO,CAAEG,KAHX;AAILC,cAAAA,QAAQ,EAAEJ,OAAF,aAAEA,OAAF,uBAAEA,OAAO,CAAEI,QAJd;AAKLjB,cAAAA,UAAU,EAAEa,OAAF,aAAEA,OAAF,uBAAEA,OAAO,CAAEb,UALhB;AAMLkB,cAAAA,EAAE,EAAEN,MANC;AAOLO,cAAAA,KAAK,EAAEN,OAAF,aAAEA,OAAF,uBAAEA,OAAO,CAAEM,KAPX;AAQLC,cAAAA,OAAO,EAAEP,OAAO,CAACO,OARZ;AASLC,cAAAA,MAAM,EAAER,OAAO,CAACQ,MATX;AAULC,cAAAA,SAAS,EAAET,OAAO,CAACS,SAVd;AAWLC,cAAAA,KAAK,EAAEV,OAAO,CAACU,KAXV;AAYLC,cAAAA,KAAK,EAAEX,OAAO,CAACW,KAZV;AAaLC,cAAAA,IAAI,EAAEZ,OAAO,CAACY,IAbT;AAcLC,cAAAA,OAAO,EAAEb,OAAO,CAACa;AAdZ,aAAP;AAgBD;;AACD,iBAAOC,SAAP;AACD,SAtBkB,EAuBlBC,MAvBkB,CAuBX,UAACC,IAAD;AAAA,iBAAe,CAAC,CAACA,IAAjB;AAAA,SAvBW,CAArB;AAyBAhC,QAAAA,QAAQ,CAACE,UAAD,CAAR,GAAuB;AACrB+B,UAAAA,KAAK,EAAE/B,UAAU,IAAIG,WAAW,CAACE,MAAD,CAAX,CAAoBmB,KADpB;AAErBQ,UAAAA,IAAI,EAAE3B,MAAM,CAAC2B,IAAP,IAAe,UAFA;AAGrBnB,UAAAA,MAAM,EAAEF;AAHa,SAAvB;AAKA,eAAOA,YAAP;AACD;AACF,KAvCD;AAwCD;AACF,CAjDM;AAmDP;;AACA,OAAO,IAAMsB,YAAY,GAAG,SAAfA,YAAe,CAACC,CAAD,EAAgBC,CAAhB;AAAA,SAC1BC,IAAI,CAACC,SAAL,CAAeH,CAAf,MAAsBE,IAAI,CAACC,SAAL,CAAeF,CAAf,CADI;AAAA,CAArB;AAGP,OAAO,IAAMG,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAC9B,OAAD,EAAeT,OAAf,EAAgC;AAC9D,MAAMG,QAAQ,GAAGH,OAAH,aAAGA,OAAH,uBAAGA,OAAO,CAAEG,QAA1B,CAD8D,CAC3B;;AACnC,MAAMC,WAAW,GAAGJ,OAAH,aAAGA,OAAH,uBAAGA,OAAO,CAAEI,WAA7B,CAF8D,CAErB;;AACzCD,EAAAA,QAAQ,SAAR,IAAAA,QAAQ,WAAR,YAAAA,QAAQ,CAAEE,OAAV,CAAkB,UAACC,MAAD,EAAiB;AACjC,QAAMC,OAAO,GAAGH,WAAW,CAACE,MAAD,CAA3B,CADiC,CACG;;AACpC,QAAMK,UAAU,GAAGJ,OAAH,aAAGA,OAAH,uBAAGA,OAAO,CAAEI,UAA5B,CAFiC,CAEM;;AACvC,QAAIJ,OAAJ,aAAIA,OAAJ,uBAAIA,OAAO,CAAEL,UAAb,EAAyB;AACvBO,MAAAA,OAAO,CAACJ,OAAR,CAAgB,UAACS,MAAD,EAAiB;AAC/BH,QAAAA,UAAU,CAACG,MAAD,aAACA,MAAD,uBAACA,MAAM,CAAEM,EAAT,CAAV,mCACKT,UAAU,CAACG,MAAD,aAACA,MAAD,uBAACA,MAAM,CAAEM,EAAT,CADf;AAEEH,UAAAA,OAAO,EAAEH,MAAF,aAAEA,MAAF,uBAAEA,MAAM,CAAEG;AAFnB;AAID,OALD;AAMD;AACF,GAXD;AAaA,SAAOjB,OAAP;AACD,CAjBM;AAkBP,OAAO,IAAMwC,UAAU,GAAG,SAAbA,UAAa,CAACC,KAAD,EAAgB,CAAE,CAArC;AAEP,OAAO,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAwB,CACnCC,aADmC,EAEnCC,kBAFmC,EAGnCC,qBAHmC,EAInCC,iBAJmC,EAKnCC,YALmC,EAMnCC,eANmC,EAOnCC,OAPmC,EAQnCC,SARmC,EASnCC,YATmC,EAUnCC,kBAVmC,EAWhC;AAAA;;AACH,MAAIC,MAAM,GAAGT,kBAAkB,CAACS,MAAhC;AACA,MAAIC,OAAO,GAAGV,kBAAkB,CAACU,OAAjC,CAFG,CAGH;;AACA,MAAMC,QAAQ,GAAGZ,aAAH,aAAGA,aAAH,+CAAGA,aAAa,CAAG,WAAH,CAAhB,kFAAG,qBAA8B7B,MAAjC,0DAAG,sBAAsC0C,IAAtC,CACf,UAAC1C,MAAD;AAAA,WAAqBA,MAAM,CAAC2C,QAA5B;AAAA,GADe,CAAjB,CAJG,CAQH;;AACA,MAAMC,SAAS,GAAGf,aAAH,aAAGA,aAAH,gDAAGA,aAAa,CAAEgB,SAAlB,oFAAG,sBAA0B7C,MAA7B,2DAAG,uBAAkCgB,MAAlC,CAChB,UAAChB,MAAD;AAAA,WAAqBA,MAAM,CAAC2C,QAA5B;AAAA,GADgB,CAAlB;;AAGA,MAAId,aAAJ,aAAIA,aAAJ,iDAAIA,aAAa,CAAEgB,SAAnB,2DAAI,uBAA0BzD,UAA9B,EAA0C;AAAA;;AACxC;AACAmD,IAAAA,MAAM,GACJ,CAAAT,kBAAkB,SAAlB,IAAAA,kBAAkB,WAAlB,qCAAAA,kBAAkB,CAAES,MAApB,gFAA4BnD,UAA5B,KAA0C,CAAAwD,SAAS,SAAT,IAAAA,SAAS,WAAT,YAAAA,SAAS,CAAEE,MAAX,IAAoB,CAA9D,mCACShB,kBADT,aACSA,kBADT,iDACSA,kBAAkB,CAAES,MAD7B,2DACS,uBAA4BnD,UADrC;AACiDA,MAAAA,UAAU,EAAE;AAD7D,yCAES0C,kBAFT,aAESA,kBAFT,iDAESA,kBAAkB,CAAES,MAF7B,2DAES,uBAA4BnD,UAFrC;AAEiDA,MAAAA,UAAU,EAAE;AAF7D,MADF,CAFwC,CAMxC;;AACAoD,IAAAA,OAAO,GACL,CAAAV,kBAAkB,SAAlB,IAAAA,kBAAkB,WAAlB,qCAAAA,kBAAkB,CAAEU,OAApB,gFAA6BO,WAA7B,KAA4C,CAAAH,SAAS,SAAT,IAAAA,SAAS,WAAT,YAAAA,SAAS,CAAEE,MAAX,IAAoB,CAAhE,mCACShB,kBADT,aACSA,kBADT,iDACSA,kBAAkB,CAAEU,OAD7B,2DACS,uBAA6BpD,UADtC;AACkDA,MAAAA,UAAU,EAAE;AAD9D,yCAES0C,kBAFT,aAESA,kBAFT,iDAESA,kBAAkB,CAAEU,OAF7B,2DAES,uBAA6BpD,UAFtC;AAEkDA,MAAAA,UAAU,EAAE;AAF9D,MADF;AAID,GAvBE,CAyBH;;;AACA,MAAM4D,OAAO,GAAGnB,aAAH,aAAGA,aAAH,+CAAGA,aAAa,CAAG,UAAH,CAAhB,kFAAG,qBAA6B7B,MAAhC,0DAAG,sBAAqC0C,IAArC,CACd,UAAC1C,MAAD;AAAA,WAAqBA,MAAM,CAAC2C,QAA5B;AAAA,GADc,CAAhB,CA1BG,CA6BH;;AACA,MAAMM,UAAU,GAAGD,OAAH,aAAGA,OAAH,8CAAGA,OAAO,CAAEE,UAAZ,wDAAG,oBAAqBR,IAArB,CACjB,UAACS,SAAD;AAAA,WAAwBA,SAAS,CAACR,QAAlC;AAAA,GADiB,CAAnB,CA9BG,CAiCH;;AACA,MAAMS,aAAa,GAAGvB,aAAH,aAAGA,aAAH,gDAAGA,aAAa,CAAEwB,aAAlB,oFAAG,sBAA8BrD,MAAjC,2DAAG,uBAAsCgB,MAAtC,CACpB,UAAChB,MAAD;AAAA,WAAiBA,MAAM,CAAC2C,QAAxB;AAAA,GADoB,CAAtB,CAlCG,CAqCH;;AACA,MAAMW,OAAO,GAAGF,aAAH,aAAGA,aAAH,uBAAGA,aAAa,CAAEV,IAAf,CACd,UAAC1C,MAAD;AAAA,WAAiBA,MAAM,CAACuD,IAAP,KAAgB,SAAjC;AAAA,GADc,CAAhB,CAtCG,CA0CH;;AACA,MAAMC,OAAO,GAAG3B,aAAH,aAAGA,aAAH,+CAAGA,aAAa,CAAG,UAAH,CAAhB,kFAAG,qBAA6B7B,MAAhC,0DAAG,sBAAqC0C,IAArC,CACd,UAAC1C,MAAD;AAAA,WAAqB,CAAAA,MAAM,SAAN,IAAAA,MAAM,WAAN,YAAAA,MAAM,CAAE2C,QAAR,MAAoB3C,MAApB,aAAoBA,MAApB,uBAAoBA,MAAM,CAAEZ,UAA5B,CAArB;AAAA,GADc,CAAhB;AAGA,MAAMqE,UAAU,GAAG;AAAErE,IAAAA,UAAU,EAAE+C,OAAF,aAAEA,OAAF,uBAAEA,OAAO,CAAE/C,UAAvB;AAAmCsE,IAAAA,IAAI,EAAEvB,OAAF,aAAEA,OAAF,uBAAEA,OAAO,CAAEuB;AAAlD,GAAnB;;AAEA,MAAI,CAAAF,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAED,IAAT,MAAkB,SAAtB,EAAiC;AAC/BE,IAAAA,UAAU,CAACrE,UAAX,GAAwB,IAAxB;AACD;;AACD,MAAIuE,cAAc,GAAG,CAAC,EAACP,aAAD,aAACA,aAAD,uBAACA,aAAa,CAAEV,IAAf,CACrB,UAAC1C,MAAD;AAAA,WAAiBA,MAAM,CAACuD,IAAP,KAAgB,iBAAjC;AAAA,GADqB,CAAD,CAAtB,CAnDG,CAsDH;;AACA,MAAI,EAAC1B,aAAD,aAACA,aAAD,iDAACA,aAAa,CAAEwB,aAAhB,qFAAC,uBAA8BrD,MAA/B,2DAAC,uBAAuC,iBAAvC,CAAD,CAAJ,EAAgE;AAC9D2D,IAAAA,cAAc,GAAGrB,kBAAjB;AACD;;AAEDP,EAAAA,qBAAqB,iCAChBD,kBADgB;AAEnB8B,IAAAA,KAAK,EAAEnB,QAAF,aAAEA,QAAF,uBAAEA,QAAQ,CAAEnC,EAFE;AAEY;AAC/B6B,IAAAA,OAAO,EAAEsB,UAHU;AAGE;AAErBI,IAAAA,KAAK,EAAEZ,UAAF,aAAEA,UAAF,uBAAEA,UAAU,CAAE3C,EALA;AAKc;AACjCwD,IAAAA,YAAY,EAAE,CAAAd,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEO,IAAT,MAAkB,kBANb;AAOnBQ,IAAAA,GAAG,EAAE,CAAC,EAACX,aAAD,aAACA,aAAD,uBAACA,aAAa,CAAEV,IAAf,CACL,UAAC1C,MAAD;AAAA,aAAiBA,MAAM,CAACuD,IAAP,KAAgB,mBAAjC;AAAA,KADK,CAAD,CAPa;AAUnBI,IAAAA,cAAc,EAAdA,cAVmB;AAWnB;AACAK,IAAAA,YAAY,EAAE,CAAC,EAACZ,aAAD,aAACA,aAAD,uBAACA,aAAa,CAAEV,IAAf,CACd,UAAC1C,MAAD;AAAA,aAAiBA,MAAM,CAACuD,IAAP,KAAgB,eAAjC;AAAA,KADc,CAAD,CAZI;AAenBf,IAAAA,OAAO,EAAEA,OAfU;AAgBnBD,IAAAA,MAAM,EAAEA,MAhBW;AAiBnB;AACAe,IAAAA,OAAO,EAAE,CAAAA,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEX,QAAT,IAAoBW,OAApB,aAAoBA,OAApB,uBAAoBA,OAAO,CAAEX,QAA7B,GAAwC;AAlB9B,KAArB,CA3DG,CA+EH;;AACA,MAAIgB,cAAc,KAAK,KAAnB,IAA4BvB,SAAS,CAAC6B,UAA1C,EAAsD;AACpD5B,IAAAA,YAAY,iCAAMD,SAAN;AAAiB6B,MAAAA,UAAU,EAAE;AAA7B,OAAZ;AACD;;AACDhC,EAAAA,YAAY,IAAIC,eAAe,CAACD,YAAD,CAA/B,CAnFG,CAoFH;AACA;AACD,CAjGM;AAmGP,OAAO,IAAMiC,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACC,MAAD,EAA6B;AAAA,MAAfC,GAAe,uEAAT,IAAS;AAC/D,MAAMC,YAAY,GAAG,EAArB;;AACA,MAAIC,KAAK,CAACC,OAAN,CAAcJ,MAAd,CAAJ,EAA2B;AACzB,WAAOA,MAAM,CAACK,MAAP,CAAc,UAACC,GAAD,EAAWxD,IAAX,EAAyB;AAC5C,6CACKwD,GADL,2BAEGxD,IAAI,CAACmD,GAAD,CAFP,EAEenD,IAFf;AAID,KALM,EAKJoD,YALI,CAAP;AAMD;;AACD,SAAOF,MAAP;AACD,CAXM;AAaP,OAAO,IAAMO,cAAc,GAAG,SAAjBA,cAAiB,CAC5BC,SAD4B,EAE5BC,MAF4B,EAG5BlB,IAH4B,EAI5BmB,OAJ4B,EAK5BC,eAL4B,EAMzB;AACH,MAAMC,OAAO,GAAGC,MAAM,CAACC,MAAP,CAAcvB,IAAd,EAAoB,EAApB,CAAhB;AACA,MAAMwB,QAAQ,GAAG,IAAIN,MAAM,CAACO,IAAP,CAAYC,QAAhB,EAAjB,CAFG,CAGH;;AACAF,EAAAA,QAAQ,CAACG,OAAT,CAAiB;AAAEC,IAAAA,QAAQ,EAAEX;AAAZ,GAAjB,EAA0C,UACxCY,OADwC,EAExCC,MAFwC,EAGxC;AACAV,IAAAA,eAAe,IAAIA,eAAe,CAAC,KAAD,CAAlC;;AACA,QAAIU,MAAM,KAAKZ,MAAM,CAACO,IAAP,CAAYM,cAAZ,CAA2BC,gBAA1C,EAA4D,CAC1D;AACD,KAFD,MAEO,IAAIF,MAAM,KAAK,IAAf,EAAqB;AAC1BT,MAAAA,OAAO,CAACY,aAAR,GAAwBJ,OAAO,CAAC,CAAD,CAAP,GAAaA,OAAO,CAAC,CAAD,CAAP,CAAWK,iBAAxB,GAA4C,EAApE;AACD,KAFM,MAEA;AACLb,MAAAA,OAAO,CAACY,aAAR,GAAwB,oBAAxB;AACD;;AACDd,IAAAA,OAAO,IAAIA,OAAO,CAACE,OAAD,CAAlB;AACAD,IAAAA,eAAe,IAAIA,eAAe,CAAC,IAAD,CAAlC;AACA,WAAOC,OAAO,CAACY,aAAf;AACD,GAfD;AAgBD,CA1BM;AA4BP,OAAO,IAAME,aAAa,GAAG,SAAhBA,aAAgB,CAACC,OAAD,EAAkC;AAC7D;AACA,MAAMC,UAA+B,GAAGC,QAAQ,CAACF,OAAD,CAAhD;AAEA,SAAOC,UAAP;AACD,CALM;;AAOP,SAASE,aAAT,CAAuBxB,GAAvB,EAAiC;AAC/B,SAAOuB,QAAQ,CAACvB,GAAD,CAAf;AACD;;AACD,OAAO,SAASuB,QAAT,CAAkBvB,GAAlB,EAA4B;AACjC,MAAIyB,MAAW,GAAG,EAAlB;;AACA,MAAMC,YAAY,GAAG,SAAfA,YAAe,CAAC1B,GAAD,EAAW2B,QAAX,EAA0BF,MAA1B,EAA0C;AAC7D,QAAMG,OAAO,GAAGrB,MAAM,CAACsB,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+B/B,GAAG,CAAC2B,QAAD,CAAlC,CAAhB;;AACA,QAAIC,OAAO,KAAK,iBAAZ,IAAiCA,OAAO,KAAK,gBAAjD,EAAmE;AACjEH,MAAAA,MAAM,CAACE,QAAD,CAAN,GAAmBH,aAAa,CAACxB,GAAG,CAAC2B,QAAD,CAAJ,CAAhC;AACD,KAFD,MAEO;AACLF,MAAAA,MAAM,CAACE,QAAD,CAAN,GAAmB3B,GAAG,CAAC2B,QAAD,CAAtB;AACD;AACF,GAPD;;AASA,MAAIpB,MAAM,CAACsB,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+B/B,GAA/B,MAAwC,iBAA5C,EAA+D;AAC7DyB,IAAAA,MAAM,GAAG,EAAT;;AACA,SAAK,IAAM9B,GAAX,IAAkBK,GAAlB,EAAuB;AACrB0B,MAAAA,YAAY,CAAC1B,GAAD,EAAML,GAAN,EAAW8B,MAAX,CAAZ;AACD;AACF,GALD,MAKO,IAAIlB,MAAM,CAACsB,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+B/B,GAA/B,MAAwC,gBAA5C,EAA8D;AACnEyB,IAAAA,MAAM,GAAG,EAAT;;AACA,SAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGhC,GAAG,CAAC3B,MAAxB,EAAgC2D,CAAC,EAAjC,EAAqC;AACnCN,MAAAA,YAAY,CAAC1B,GAAD,EAAMgC,CAAN,EAASP,MAAT,CAAZ;AACD;AACF;;AAED,SAAOA,MAAP;AACD;AAED,OAAO,IAAMQ,cAAc,GAAG,SAAjBA,cAAiB,CAACC,OAAD,EAAkB;AAC9C,MAAMC,UAAmC,GAAG;AAC1CC,IAAAA,SAAS,EAAE,EAD+B;AAE1CC,IAAAA,UAAU,EAAE,EAF8B;AAG1CC,IAAAA,QAAQ,EAAE,EAHgC;AAI1CC,IAAAA,QAAQ,EAAE,EAJgC;AAK1CC,IAAAA,KAAK,EAAE,EALmC;AAM1CC,IAAAA,IAAI,EAAE,EANoC;AAO1CC,IAAAA,OAAO,EAAE,EAPiC;AAQ1CC,IAAAA,OAAO,EAAE,EARiC;AAS1CC,IAAAA,wBAAwB,EAAE;AATgB,GAA5C;AAYAV,EAAAA,OAAO,CAACpH,OAAR,CACE,UAAC+H,SAAD,EAGM;AACJ,QAAIA,SAAS,CAACC,KAAV,CAAgBC,QAAhB,CAAyB,aAAzB,CAAJ,EAA6C;AAC3CZ,MAAAA,UAAU,CAACO,OAAX,GAAqBG,SAAS,CAACG,SAA/B;AACD,KAFD,MAEO,IAAIH,SAAS,CAACC,KAAV,CAAgBC,QAAhB,CAAyB,SAAzB,CAAJ,EAAyC;AAC9CZ,MAAAA,UAAU,CAACQ,OAAX,GAAqBE,SAAS,CAACG,SAA/B;AACD,KAFM,MAEA,IAAIH,SAAS,CAACC,KAAV,CAAgBC,QAAhB,CAAyB,6BAAzB,CAAJ,EAA6D;AAClEZ,MAAAA,UAAU,CAACK,KAAX,GAAmBK,SAAS,CAACG,SAA7B;AACD,KAFM,MAEA,IAAIH,SAAS,CAACC,KAAV,CAAgBC,QAAhB,CAAyB,UAAzB,CAAJ,EAA0C;AAC/CZ,MAAAA,UAAU,CAACM,IAAX,GAAkBI,SAAS,CAACG,SAA5B;AACD,KAFM,MAEA,IAAIH,SAAS,CAACC,KAAV,CAAgBC,QAAhB,CAAyB,qBAAzB,CAAJ,EAAqD;AAC1DZ,MAAAA,UAAU,CAACI,QAAX,eAA2BM,SAAS,CAACG,SAArC;AACAb,MAAAA,UAAU,CAACE,UAAX,GAAwBQ,SAAS,CAACG,SAAlC,CAF0D,CAEd;AAC7C,KAHM,MAGA,IAAIH,SAAS,CAACC,KAAV,CAAgBC,QAAhB,CAAyB,gBAAzB,CAAJ,EAAgD;AACrDZ,MAAAA,UAAU,CAACE,UAAX,GAAwBQ,SAAS,CAACG,SAAlC;AACAb,MAAAA,UAAU,CAACC,SAAX,eAA4BS,SAAS,CAACG,SAAtC,EAFqD,CAEH;AACnD,KAHM,MAGA,IAAIH,SAAS,CAACC,KAAV,CAAgBC,QAAhB,CAAyB,OAAzB,CAAJ,EAAuC;AAC5CZ,MAAAA,UAAU,CAACC,SAAX,eAA4BS,SAAS,CAACG,SAAtC,EAD4C,CACM;AACnD,KAFM,MAEA,IAAIH,SAAS,CAACC,KAAV,CAAgBC,QAAhB,CAAyB,cAAzB,CAAJ,EAA8C;AACnDZ,MAAAA,UAAU,CAACE,UAAX,GAAwBQ,SAAS,CAACG,SAAlC;AACD,KAFM,MAEA,IAAIH,SAAS,CAACC,KAAV,CAAgBC,QAAhB,CAAyB,SAAzB,CAAJ,EAAyC;AAC9CZ,MAAAA,UAAU,CAACC,SAAX,GAAuBS,SAAS,CAACG,SAAjC;AACD,KAFM,MAEA,IAAIH,SAAS,CAACC,KAAV,CAAgBC,QAAhB,CAAyB,YAAzB,CAAJ,EAA4C;AACjDZ,MAAAA,UAAU,CAACC,SAAX,eAA4BS,SAAS,CAACG,SAAtC;AACD,KAFM,MAEA,IAAIH,SAAS,CAACC,KAAV,CAAgBC,QAAhB,CAAyB,eAAzB,CAAJ,EAA+C;AACpDZ,MAAAA,UAAU,CAACC,SAAX,eAA4BS,SAAS,CAACG,SAAtC;AACD,KAFM,MAEA,IAAIH,SAAS,CAACC,KAAV,CAAgBC,QAAhB,CAAyB,eAAzB,CAAJ,EAA+C;AACpDZ,MAAAA,UAAU,CAACC,SAAX,eAA4BS,SAAS,CAACG,SAAtC;AACD,KAFM,MAEA,IAAIH,SAAS,CAACC,KAAV,CAAgBC,QAAhB,CAAyB,mBAAzB,CAAJ,EAAmD;AACxDZ,MAAAA,UAAU,CAACG,QAAX,GAAsBO,SAAS,CAACG,SAAhC;AACD;AACF,GAlCH;AAoCA,SAAOb,UAAP;AACD,CAlDM,C,CAoDP;;AACA,OAAO,IAAMc,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,OAAD,EAAqB;AACnD,SAAQA,OAAO,GAAG,QAAX,GAAuB,GAA9B;AACH,CAFM;AAIP,OAAO,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACD,OAAD,EAAkBE,IAAlB,EAAmC;AACjE,SAAOH,kBAAkB,CAACC,OAAD,CAAlB,GAA8BG,IAAI,CAACC,GAAL,CAAWD,IAAI,CAACE,EAAL,GAAU,GAAZ,GAAoBH,IAA7B,CAArC;AACH,CAFM;AAIP,OAAO,IAAMI,eAAe,GAAG,SAAlBA,eAAkB,CAACN,OAAD,EAAkBE,IAAlB,EAAgCK,IAAhC,EAAiD;AAC5E,MAAIC,SAAS,GAAGP,kBAAkB,CAACD,OAAD,EAAUE,IAAV,CAAlC;AACA,MAAIO,SAAS,GAAGV,kBAAkB,CAACC,OAAD,CAAlC;AACA,MAAIU,EAAE,GAAG,IAAItJ,CAAC,CAACuJ,MAAN,CAAaT,IAAI,GAAGO,SAApB,EAA+BF,IAAI,GAAGC,SAAtC,CAAT;AACA,MAAII,EAAE,GAAG,IAAIxJ,CAAC,CAACuJ,MAAN,CAAaT,IAAI,GAAGO,SAApB,EAA+BF,IAAI,GAAGC,SAAtC,CAAT;AACA,SAAO,CAAC,CAACE,EAAE,CAACG,GAAJ,EAASH,EAAE,CAACI,GAAZ,CAAD,EAAmB,CAACF,EAAE,CAACC,GAAJ,EAASD,EAAE,CAACE,GAAZ,CAAnB,CAAP;AACH,CANM","sourcesContent":["import L from 'leaflet'\nimport { LatLngBoundsExpression } from 'leaflet'\nimport { IOption, ISettingInputOption } from '../SettingBox/interface'\nimport { IMapData, tSearchFieldAddressInfo } from './interfaces.d'\nimport { tTheme, tTiles } from './types.d'\n\nexport const updateSettingsWithLegends = (\n  settings: any,\n  markers: any,\n  settingKey: string\n) => {\n  if (markers?.permission) {\n    const entities = markers?.entities //  entities: ['orders', 'dbs'],\n    const entitiesMap = markers?.entitiesMap //  entitiesMap: { orders:{},dbs:{}  }\n    entities.forEach((entity: any) => {\n      const _entity = entitiesMap[entity] // orders:{ legends: ['notDispatched', 'delivered']}\n      if (_entity?.permission) {\n        // orders:{ permission:true,legends: ['notDispatched', 'delivered']}\n        const optionKeys = _entity.legends\n        const legendMap = _entity.legendsMap // legendsMap:{delivered:{},notDispatched:{}}\n        // delivered { value:'',color:'',checked:true,....}\n        const entityOption = optionKeys\n          .map((option: string) => {\n            const _option = legendMap[option]\n            if (_option?.permission) {\n              return {\n                value: _option?.value,\n                checked: _option?.checked,\n                color: _option?.color,\n                disabled: _option?.disabled,\n                permission: _option?.permission,\n                id: option,\n                allow: _option?.allow,\n                iconRef: _option.iconRef,\n                popRef: _option.popRef,\n                extraInfo: _option.extraInfo,\n                label: _option.label,\n                image: _option.image,\n                icon: _option.icon,\n                connect: _option.connect\n              }\n            }\n            return undefined\n          })\n          .filter((item: any) => !!item)\n\n        settings[settingKey] = {\n          title: settingKey || entitiesMap[entity].label,\n          type: entity.type || 'checkbox',\n          option: entityOption\n        }\n        return entityOption\n      }\n    })\n  }\n}\n\n/* WARNING: arrays must not contain {objects} or behavior may be undefined */\nexport const isArrayEqual = (a: Array<any>, b: Array<any>) =>\n  JSON.stringify(a) === JSON.stringify(b)\n\nexport const setLegendMarkers = (legends: any, markers: any) => {\n  const entities = markers?.entities //  entities: ['orders', 'dbs'],\n  const entitiesMap = markers?.entitiesMap //  entitiesMap: { orders:{},dbs:{}  }\n  entities?.forEach((entity: any) => {\n    const _entity = entitiesMap[entity] // orders:{ legends: ['notDispatched', 'delivered'],legendsMap:{}}\n    const legendsMap = _entity?.legendsMap // legendsMap:{delivered:{},notDispatched:{}}\n    if (_entity?.permission) {\n      legends.forEach((option: any) => {\n        legendsMap[option?.id] = {\n          ...legendsMap[option?.id],\n          checked: option?.checked\n        }\n      })\n    }\n  })\n\n  return markers\n}\nexport const trafficMap = (_zoom: any) => {}\n\nexport const updateMapWithSettings = (\n  settingConfig: ISettingInputOption,\n  configurableOption: any,\n  setConfigurableOption: (confurableOption: any) => void,\n  _setSettingConfig: (settingConfig: ISettingInputOption) => void,\n  markerConfig: IMapData | undefined,\n  setmarkerConfig: (markerConfig: IMapData) => void,\n  heatmap: any,\n  geocoding: any,\n  setGeocoding: (geocoding: any) => void,\n  locationSearchProp: boolean\n) => {\n  let circle = configurableOption.circle\n  let polygon = configurableOption.polygon\n  // theme added dynamically.\n  const mapTheme = settingConfig?.['Map Theme']?.option?.find(\n    (option: IOption) => option.selected\n  )\n\n  // geofences added dynamically.\n  const geofences = settingConfig?.Geofences?.option?.filter(\n    (option: IOption) => option.selected\n  )\n  if (settingConfig?.Geofences?.permission) {\n    // geofence available and circle object available, if user toggle true then set permission true or else false\n    circle =\n      configurableOption?.circle?.permission && geofences?.length > 0\n        ? { ...configurableOption?.circle?.permission, permission: true }\n        : { ...configurableOption?.circle?.permission, permission: false }\n    // geofence available and polygon object available, if user toggle true then set permission true or else false\n    polygon =\n      configurableOption?.polygon?.permisssion && geofences?.length > 0\n        ? { ...configurableOption?.polygon?.permission, permission: true }\n        : { ...configurableOption?.polygon?.permission, permission: false }\n  }\n\n  // choose google map or open street\n  const mapType = settingConfig?.['Map Type']?.option?.find(\n    (option: IOption) => option.selected\n  )\n  // sub type of google or open street map selection\n  const mapSubType = mapType?.subOptions?.find(\n    (subOption: IOption) => subOption.selected\n  )\n  // poi, traffic,rular, search can be toggled\n  const miscellaneous = settingConfig?.Miscellaneous?.option?.filter(\n    (option: any) => option.selected\n  )\n  // traffic layer toggling\n  const traffic = miscellaneous?.find(\n    (option: any) => option.name === 'Traffic'\n  )\n\n  // map mode selection\n  const mapMode = settingConfig?.['Map Mode']?.option?.find(\n    (option: IOption) => option?.selected && option?.permission\n  )\n  const heatMapObj = { permission: heatmap?.permission, data: heatmap?.data }\n\n  if (mapMode?.name === 'HeatMap') {\n    heatMapObj.permission = true\n  }\n  let locationSearch = !!miscellaneous?.find(\n    (option: any) => option.name === 'Location Search'\n  )\n  // check if this option exist in setting file, if no then show whatever coming as prop\n  if (!settingConfig?.Miscellaneous?.option?.['Location Search']) {\n    locationSearch = locationSearchProp\n  }\n\n  setConfigurableOption({\n    ...configurableOption,\n    theme: mapTheme?.id as tTheme, // map theme selection\n    heatmap: heatMapObj, // show heatmap if selected on settings\n\n    tiles: mapSubType?.id as tTiles, // open street and google sub type\n    isOpenStreet: mapType?.name === 'Open Street Maps',\n    poi: !!miscellaneous?.find(\n      (option: any) => option.name === 'Point of interest'\n    ),\n    locationSearch,\n    //  rular on map toggling\n    rulerControl: !!miscellaneous?.find(\n      (option: any) => option.name === 'Ruler Control'\n    ),\n    polygon: polygon,\n    circle: circle,\n    // traffic layer\n    traffic: traffic?.selected ? traffic?.selected : false\n  })\n  // if in settings we remove location search and before that something there in searchbox should get flushed.\n  if (locationSearch === false && geocoding.searchText) {\n    setGeocoding({ ...geocoding, searchText: '' })\n  }\n  markerConfig && setmarkerConfig(markerConfig)\n  // whenever settings getting updated this block should get called\n  // setSettingConfig(newSettingConfig)\n}\n\nexport const convertArrayToObject = (legend: any, key = 'id') => {\n  const initialValue = {}\n  if (Array.isArray(legend)) {\n    return legend.reduce((obj: any, item: any) => {\n      return {\n        ...obj,\n        [item[key]]: item\n      }\n    }, initialValue)\n  }\n  return legend\n}\n\nexport const getGeoLocation = (\n  latlngObj: any,\n  google: any,\n  data: any,\n  setData: any,\n  setShowLocation: any\n) => {\n  const newData = Object.assign(data, {})\n  const geocoder = new google.maps.Geocoder()\n  // find a location and update option\n  geocoder.geocode({ location: latlngObj }, function (\n    results: any,\n    status: any\n  ) {\n    setShowLocation && setShowLocation(false)\n    if (status === google.maps.GeocoderStatus.OVER_QUERY_LIMIT) {\n      // over limit error\n    } else if (status === 'OK') {\n      newData._thisLocation = results[0] ? results[0].formatted_address : ''\n    } else {\n      newData._thisLocation = 'Location not found'\n    }\n    setData && setData(newData)\n    setShowLocation && setShowLocation(true)\n    return newData._thisLocation\n  })\n}\n\nexport const getNewSetting = (setting: ISettingInputOption) => {\n  // create a new reference of setting\n  const settingOpn: ISettingInputOption = deepCopy(setting)\n\n  return settingOpn\n}\n\nfunction recursiveCall(obj: any) {\n  return deepCopy(obj)\n}\nexport function deepCopy(obj: any) {\n  let retObj: any = {}\n  const _assignProps = (obj: any, keyIndex: any, retObj: any) => {\n    const subType = Object.prototype.toString.call(obj[keyIndex])\n    if (subType === '[object Object]' || subType === '[object Array]') {\n      retObj[keyIndex] = recursiveCall(obj[keyIndex])\n    } else {\n      retObj[keyIndex] = obj[keyIndex]\n    }\n  }\n\n  if (Object.prototype.toString.call(obj) === '[object Object]') {\n    retObj = {}\n    for (const key in obj) {\n      _assignProps(obj, key, retObj)\n    }\n  } else if (Object.prototype.toString.call(obj) === '[object Array]') {\n    retObj = []\n    for (let i = 0; i < obj.length; i++) {\n      _assignProps(obj, i, retObj)\n    }\n  }\n\n  return retObj\n}\n\nexport const getAddressInfo = (address: any) => {\n  const addressObj: tSearchFieldAddressInfo = {\n    apartment: '',\n    streetName: '',\n    landMark: '',\n    locality: '',\n    state: '',\n    city: '',\n    pincode: '',\n    country: '',\n    registeredCountryIsoCode: ''\n  }\n\n  address.forEach(\n    (component: {\n      types: string | string[]\n      long_name: string | undefined\n    }) => {\n      if (component.types.includes('postal_code')) {\n        addressObj.pincode = component.long_name\n      } else if (component.types.includes('country')) {\n        addressObj.country = component.long_name\n      } else if (component.types.includes('administrative_area_level_1')) {\n        addressObj.state = component.long_name\n      } else if (component.types.includes('locality')) {\n        addressObj.city = component.long_name\n      } else if (component.types.includes('sublocality_level_1')) {\n        addressObj.locality += ` ${component.long_name}`\n        addressObj.streetName = component.long_name // only for USA\n      } else if (component.types.includes('street_address')) {\n        addressObj.streetName = component.long_name\n        addressObj.apartment += ` ${component.long_name}` // only for USA\n      } else if (component.types.includes('route')) {\n        addressObj.apartment += ` ${component.long_name}` // only for USA\n      } else if (component.types.includes('intersection')) {\n        addressObj.streetName = component.long_name\n      } else if (component.types.includes('premise')) {\n        addressObj.apartment = component.long_name\n      } else if (component.types.includes('subpremise')) {\n        addressObj.apartment += ` ${component.long_name}`\n      } else if (component.types.includes('establishment')) {\n        addressObj.apartment += ` ${component.long_name}`\n      } else if (component.types.includes('street_number')) {\n        addressObj.apartment += ` ${component.long_name}`\n      } else if (component.types.includes('point_of_interest')) {\n        addressObj.landMark = component.long_name\n      }\n    }\n  )\n  return addressObj\n}\n\n//Calculate bounds explicitly for Circle data\nexport const getCircleLatRadius = (cRadius: number) => {\n    return (cRadius / 40075017) * 360;\n};\n\nexport const getCircleLngRadius = (cRadius: number, cLat: number) => {\n    return getCircleLatRadius(cRadius) / Math.cos(((Math.PI / 180)) * cLat);\n}\n\nexport const getCircleBounds = (cRadius: number, cLat: number, cLng: number) => {\n    let lngRadius = getCircleLngRadius(cRadius, cLat);\n    let latRadius = getCircleLatRadius(cRadius);\n    let sw = new L.LatLng(cLat - latRadius, cLng - lngRadius);\n    let ne = new L.LatLng(cLat + latRadius, cLng + lngRadius);\n    return [[sw.lat, sw.lng], [ne.lat, ne.lng]] as LatLngBoundsExpression;\n}\n"]},"metadata":{},"sourceType":"module"}