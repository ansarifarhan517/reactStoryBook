{"ast":null,"code":"import _slicedToArray from \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/molecules/DropDown/Variants/InlineEditDropdown.tsx\";\n\nimport React, { useMemo } from 'react';\nimport Select, { components } from 'react-select';\nimport { EditedDropdownIndicator, Option } from '../CustomComponent';\nimport { InlineEditStyled } from '../Styles';\nimport Position from '../../Position';\n\nvar InlineEditDropdown = function InlineEditDropdown(_ref) {\n  var defaultProps = _ref.defaultProps;\n  var options = defaultProps.options,\n      value = defaultProps.value,\n      isLoading = defaultProps.isLoading,\n      placeholder = defaultProps.placeholder,\n      onInputChange = defaultProps.onInputChange,\n      _onChange = defaultProps.onChange,\n      onFocus = defaultProps.onFocus,\n      isSearchable = defaultProps.isSearchable,\n      disabled = defaultProps.disabled,\n      limitOptionsList = defaultProps.limitOptionsList;\n\n  var _React$useState = React.useState(),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      input = _React$useState2[0],\n      setInput = _React$useState2[1];\n\n  var resultLimit = limitOptionsList || 25;\n  var i = 0;\n\n  var onInputChangeWrapper = function onInputChangeWrapper(newValue, actionMeta) {\n    setInput(newValue);\n    onInputChange && onInputChange(newValue, actionMeta);\n  };\n\n  var optionsMemo = useMemo(function () {\n    return options === null || options === void 0 ? void 0 : options.filter(function (dropdownOption) {\n      if (typeof input === 'number' && input) {\n        var _dropdownOption$label, _input$toString;\n\n        return (dropdownOption === null || dropdownOption === void 0 ? void 0 : (_dropdownOption$label = dropdownOption.label) === null || _dropdownOption$label === void 0 ? void 0 : _dropdownOption$label.toLowerCase().indexOf(input === null || input === void 0 ? void 0 : (_input$toString = input.toString()) === null || _input$toString === void 0 ? void 0 : _input$toString.toLowerCase())) >= 0 && i++ < resultLimit;\n      } else if (input) {\n        var _dropdownOption$label2;\n\n        return (dropdownOption === null || dropdownOption === void 0 ? void 0 : (_dropdownOption$label2 = dropdownOption.label) === null || _dropdownOption$label2 === void 0 ? void 0 : _dropdownOption$label2.toLowerCase().indexOf(input === null || input === void 0 ? void 0 : input.toLowerCase())) >= 0 && i++ < resultLimit;\n      } else {\n        return i++ < resultLimit;\n      }\n    });\n  }, [input, options]);\n  return /*#__PURE__*/React.createElement(Position, {\n    type: \"relative\",\n    mt: \"-0.25em\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Select, {\n    components: {\n      IndicatorSeparator: function IndicatorSeparator() {\n        return null;\n      },\n      DropdownIndicator: function DropdownIndicator(props) {\n        return /*#__PURE__*/React.createElement(EditedDropdownIndicator, Object.assign({}, props, {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 41\n          }\n        }));\n      },\n      LoadingIndicator: function LoadingIndicator() {\n        return null;\n      },\n      Option: Option,\n      Menu: function Menu(props) {\n        return /*#__PURE__*/React.createElement(components.Menu, Object.assign({}, props, {\n          className: \"menuAnimate\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 13\n          }\n        }));\n      }\n    },\n    styles: InlineEditStyled(),\n    options: optionsMemo,\n    value: value,\n    isLoading: isLoading,\n    placeholder: placeholder,\n    onInputChange: onInputChangeWrapper,\n    onChange: function onChange(input) {\n      i = 0;\n      var obj = Array.from(document.querySelectorAll('.ui-tooltip'));\n      obj === null || obj === void 0 ? void 0 : obj.forEach(function (e) {\n        e.remove();\n      });\n      _onChange && _onChange(input);\n    },\n    onFocus: onFocus,\n    isSearchable: isSearchable,\n    isDisabled: disabled,\n    menuPlacement: \"auto\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default InlineEditDropdown;","map":{"version":3,"sources":["/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/molecules/DropDown/Variants/InlineEditDropdown.tsx"],"names":["React","useMemo","Select","components","EditedDropdownIndicator","Option","InlineEditStyled","Position","InlineEditDropdown","defaultProps","options","value","isLoading","placeholder","onInputChange","onChange","onFocus","isSearchable","disabled","limitOptionsList","useState","input","setInput","resultLimit","i","onInputChangeWrapper","newValue","actionMeta","optionsMemo","filter","dropdownOption","label","toLowerCase","indexOf","toString","IndicatorSeparator","DropdownIndicator","props","LoadingIndicator","Menu","obj","Array","from","document","querySelectorAll","forEach","e","remove"],"mappings":"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","sourcesContent":["import React, { useMemo } from 'react'\nimport Select, { components, InputActionMeta } from 'react-select'\nimport { EditedDropdownIndicator, Option } from '../CustomComponent'\nimport { InlineEditStyled } from '../Styles'\nimport { IDefaultProps } from '../interface'\nimport Position from '../../Position'\n\nconst InlineEditDropdown = ({\n  defaultProps\n}: {\n  defaultProps: IDefaultProps\n}) => {\n  const {\n    options,\n    value,\n    isLoading,\n    placeholder,\n    onInputChange,\n    onChange,\n    onFocus,\n    isSearchable,\n    disabled,\n    limitOptionsList\n\n  } = defaultProps\n\n  const [input, setInput] = React.useState<any>();\n  const resultLimit = limitOptionsList  || 25;\n  let i = 0\n\n\n  const onInputChangeWrapper = (newValue: string, actionMeta: InputActionMeta) =>{\n    setInput(newValue);\n    onInputChange && onInputChange(newValue, actionMeta);\n  }\n  \n  const optionsMemo = useMemo(() => {\n    return options?.filter((dropdownOption: { label: string }) => {\n      if(typeof input ==='number' && input){\n        return dropdownOption?.label?.toLowerCase().indexOf(input?.toString()?.toLowerCase()) >= 0 && i++ < resultLimit;\n      }else if(input){\n        return dropdownOption?.label?.toLowerCase().indexOf(input?.toLowerCase()) >= 0 && i++ < resultLimit;\n      }else{\n        return i++ < resultLimit;\n      }\n    });\n  }, [input,options])\n  return (\n    <Position type='relative' mt='-0.25em'>\n      <Select\n        components={{\n          IndicatorSeparator: () => null,\n          DropdownIndicator: (props) => <EditedDropdownIndicator {...props} />,\n          LoadingIndicator: () => null,\n          Option,\n          Menu: (props) => (\n            <components.Menu {...props} className='menuAnimate' />\n          )\n        }}\n        styles={InlineEditStyled()}\n        options={optionsMemo}\n        value={value}\n        isLoading={isLoading}\n        placeholder={placeholder}\n        onInputChange={onInputChangeWrapper}\n        onChange={(input: any) => {\n          i = 0;\n          const obj = Array.from(document.querySelectorAll('.ui-tooltip'))\n          obj?.forEach((e) => {\n            e.remove()\n          })\n          onChange && onChange(input)\n        }}\n       \n        onFocus={onFocus}\n        isSearchable={isSearchable}\n        isDisabled={disabled}\n        menuPlacement='auto'\n      />\n    </Position>\n  )\n}\n\nexport default InlineEditDropdown\n"]},"metadata":{},"sourceType":"module"}