{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/atoms/Charts/CustomLegend/index.tsx\";\n\nimport React from 'react';\nimport { StyledLegendWrapper, StyledCircle, StyledName, SingleLegend } from './StyledLegends';\n// for line and barchart legend name char limit is 15\nexport var trimLegend = function trimLegend(value, charLimit) {\n  // if the name is greater than limit provided then append ... and trim or else show actual value\n  var trimmedValue = (value === null || value === void 0 ? void 0 : value.length) > charLimit ? \"\".concat(value === null || value === void 0 ? void 0 : value.substring(0, charLimit), \"...\") : value;\n  return trimmedValue;\n};\n\nvar CustomLegend = function CustomLegend(_ref) {\n  var details = _ref.details,\n      isRow = _ref.isRow,\n      font = _ref.font,\n      size = _ref.size,\n      isFullWidth = _ref.isFullWidth,\n      onChange = _ref.onChange;\n  return /*#__PURE__*/React.createElement(StyledLegendWrapper, {\n    isRow: isRow,\n    font: font,\n    size: size,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 5\n    }\n  }, details.map(function (option) {\n    // const name = isRow\n    //   ? trimLegend(option?.name, 15)\n    //   : `${option.value} - ${option.name}`\n    var validatingValues = option.value ? option.value : 0;\n    var modifiedValues = validatingValues.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n    var name = isRow ? option === null || option === void 0 ? void 0 : option.name : \"\".concat(modifiedValues, \" - \").concat(option.name);\n    var title = isRow ? option === null || option === void 0 ? void 0 : option.name : \"\".concat(modifiedValues, \" - \").concat(option.name);\n    return /*#__PURE__*/React.createElement(SingleLegend, {\n      key: option.color,\n      isFullWidth: isFullWidth || false,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(StyledCircle, {\n      color: option.color,\n      isActive: option.active,\n      onClick: function onClick() {\n        return onChange(option);\n      },\n      size: size,\n      isFullWidth: isFullWidth || false,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(StyledName, {\n      title: title,\n      isFullWidth: isFullWidth || false,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 13\n      }\n    }, name));\n  }));\n};\n\nexport default CustomLegend;","map":{"version":3,"sources":["/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/atoms/Charts/CustomLegend/index.tsx"],"names":["React","StyledLegendWrapper","StyledCircle","StyledName","SingleLegend","trimLegend","value","charLimit","trimmedValue","length","substring","CustomLegend","details","isRow","font","size","isFullWidth","onChange","map","option","validatingValues","modifiedValues","toString","replace","name","title","color","active"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACEC,mBADF,EAEEC,YAFF,EAGEC,UAHF,EAIEC,YAJF,QAKO,iBALP;AAQA;AACA,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,KAAD,EAAaC,SAAb,EAAmC;AAC3D;AACA,MAAMC,YAAY,GAChB,CAAAF,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEG,MAAP,IAAgBF,SAAhB,aAA+BD,KAA/B,aAA+BA,KAA/B,uBAA+BA,KAAK,CAAEI,SAAP,CAAiB,CAAjB,EAAoBH,SAApB,CAA/B,WAAqED,KADvE;AAEA,SAAOE,YAAP;AACD,CALM;;AAOP,IAAMG,YAAY,GAAG,SAAfA,YAAe,OAOL;AAAA,MANdC,OAMc,QANdA,OAMc;AAAA,MALdC,KAKc,QALdA,KAKc;AAAA,MAJdC,IAIc,QAJdA,IAIc;AAAA,MAHdC,IAGc,QAHdA,IAGc;AAAA,MAFdC,WAEc,QAFdA,WAEc;AAAA,MADdC,QACc,QADdA,QACc;AACd,sBACE,oBAAC,mBAAD;AAAqB,IAAA,KAAK,EAAEJ,KAA5B;AAAmC,IAAA,IAAI,EAAEC,IAAzC;AAA+C,IAAA,IAAI,EAAEC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGH,OAAO,CAACM,GAAR,CAAY,UAACC,MAAD,EAAsB;AACjC;AACA;AACA;AACA,QAAMC,gBAAgB,GAAGD,MAAM,CAACb,KAAP,GAAea,MAAM,CAACb,KAAtB,GAA8B,CAAvD;AACA,QAAMe,cAAc,GAAGD,gBAAgB,CAACE,QAAjB,GAA4BC,OAA5B,CAAoC,uBAApC,EAA6D,GAA7D,CAAvB;AACA,QAAMC,IAAI,GAAGX,KAAK,GAAGM,MAAH,aAAGA,MAAH,uBAAGA,MAAM,CAAEK,IAAX,aAAqBH,cAArB,gBAAyCF,MAAM,CAACK,IAAhD,CAAlB;AACA,QAAMC,KAAK,GAAGZ,KAAK,GAAGM,MAAH,aAAGA,MAAH,uBAAGA,MAAM,CAAEK,IAAX,aAAqBH,cAArB,gBAAyCF,MAAM,CAACK,IAAhD,CAAnB;AACA,wBACE,oBAAC,YAAD;AAAc,MAAA,GAAG,EAAEL,MAAM,CAACO,KAA1B;AAAiC,MAAA,WAAW,EAAEV,WAAW,IAAI,KAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,YAAD;AACE,MAAA,KAAK,EAAEG,MAAM,CAACO,KADhB;AAEE,MAAA,QAAQ,EAAEP,MAAM,CAACQ,MAFnB;AAGE,MAAA,OAAO,EAAE;AAAA,eAAMV,QAAQ,CAACE,MAAD,CAAd;AAAA,OAHX;AAIE,MAAA,IAAI,EAAEJ,IAJR;AAKE,MAAA,WAAW,EAAEC,WAAW,IAAI,KAL9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAQE,oBAAC,UAAD;AAAY,MAAA,KAAK,EAAES,KAAnB;AAA0B,MAAA,WAAW,EAAET,WAAW,IAAI,KAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGQ,IADH,CARF,CADF;AAcD,GAtBA,CADH,CADF;AA2BD,CAnCD;;AAqCA,eAAeb,YAAf","sourcesContent":["import React from 'react'\nimport {\n  StyledLegendWrapper,\n  StyledCircle,\n  StyledName,\n  SingleLegend\n} from './StyledLegends'\nimport { ILegends, IDetails } from '../interface'\n\n// for line and barchart legend name char limit is 15\nexport const trimLegend = (value: any, charLimit: number) => {\n  // if the name is greater than limit provided then append ... and trim or else show actual value\n  const trimmedValue =\n    value?.length > charLimit ? `${value?.substring(0, charLimit)}...` : value\n  return trimmedValue\n}\n\nconst CustomLegend = ({\n  details,\n  isRow,\n  font,\n  size,\n  isFullWidth,\n  onChange\n}: ILegends) => {\n  return (\n    <StyledLegendWrapper isRow={isRow} font={font} size={size}>\n      {details.map((option: IDetails) => {\n        // const name = isRow\n        //   ? trimLegend(option?.name, 15)\n        //   : `${option.value} - ${option.name}`\n        const validatingValues = option.value ? option.value : 0\n        const modifiedValues = validatingValues.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n        const name = isRow ? option?.name : `${modifiedValues} - ${option.name}`\n        const title = isRow ? option?.name : `${modifiedValues} - ${option.name}`\n        return (\n          <SingleLegend key={option.color} isFullWidth={isFullWidth || false}>\n            <StyledCircle\n              color={option.color}\n              isActive={option.active}\n              onClick={() => onChange(option)}\n              size={size}\n              isFullWidth={isFullWidth || false}\n            />\n            <StyledName title={title} isFullWidth={isFullWidth || false}>\n              {name}\n            </StyledName>\n          </SingleLegend>\n        )\n      })}\n    </StyledLegendWrapper>\n  )\n}\n\nexport default CustomLegend\n"]},"metadata":{},"sourceType":"module"}