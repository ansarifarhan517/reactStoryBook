{"ast":null,"code":"import _slicedToArray from \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/molecules/DropDown/Variants/ListView.tsx\";\n\nimport React, { useMemo } from 'react';\nimport Select, { components } from 'react-select';\nimport { DropdownIndicator, Option } from '../CustomComponent';\nimport { ListViewStyled } from '../Styles';\nimport { StyledFont } from '../StyledDropDown';\nimport FontIcon from '../../../atoms/FontIcon';\nimport Position from '../../Position';\n\nvar ListView = function ListView(_ref) {\n  var setIsCrossVisible = _ref.setIsCrossVisible,\n      isCrossVisible = _ref.isCrossVisible,\n      defaultProps = _ref.defaultProps,\n      handleCloseChange = _ref.handleCloseChange;\n  var options = defaultProps.options,\n      value = defaultProps.value,\n      isLoading = defaultProps.isLoading,\n      placeholder = defaultProps.placeholder,\n      onInputChange = defaultProps.onInputChange,\n      _onChange = defaultProps.onChange,\n      onFocus = defaultProps.onFocus,\n      isSearchable = defaultProps.isSearchable,\n      disabled = defaultProps.disabled,\n      limitOptionsList = defaultProps.limitOptionsList;\n  var resultLimit = limitOptionsList || 25;\n  var i = 0;\n\n  var _React$useState = React.useState(),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      input = _React$useState2[0],\n      setInput = _React$useState2[1];\n\n  var onInputChangeWrapper = function onInputChangeWrapper(newValue, actionMeta) {\n    setInput(newValue);\n    onInputChange && onInputChange(newValue, actionMeta);\n  };\n\n  var optionsMemo = useMemo(function () {\n    return options === null || options === void 0 ? void 0 : options.filter(function (dropdownOption) {\n      if (typeof input === 'number' && input) {\n        var _dropdownOption$label, _input$toString;\n\n        return (dropdownOption === null || dropdownOption === void 0 ? void 0 : (_dropdownOption$label = dropdownOption.label) === null || _dropdownOption$label === void 0 ? void 0 : _dropdownOption$label.toLowerCase().indexOf(input === null || input === void 0 ? void 0 : (_input$toString = input.toString()) === null || _input$toString === void 0 ? void 0 : _input$toString.toLowerCase())) >= 0 && i++ < resultLimit;\n      } else if (input) {\n        var _dropdownOption$label2;\n\n        return (dropdownOption === null || dropdownOption === void 0 ? void 0 : (_dropdownOption$label2 = dropdownOption.label) === null || _dropdownOption$label2 === void 0 ? void 0 : _dropdownOption$label2.toLowerCase().indexOf(input === null || input === void 0 ? void 0 : input.toLowerCase())) >= 0 && i++ < resultLimit;\n      } else {\n        return i++ < resultLimit;\n      }\n    });\n  }, [input, options]);\n  return /*#__PURE__*/React.createElement(Position, {\n    type: \"relative\",\n    mt: \"-0.25em\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Select, {\n    components: {\n      IndicatorSeparator: function IndicatorSeparator() {\n        return null;\n      },\n      DropdownIndicator: DropdownIndicator,\n      LoadingIndicator: function LoadingIndicator() {\n        return null;\n      },\n      Option: Option,\n      Menu: function Menu(props) {\n        return /*#__PURE__*/React.createElement(components.Menu, Object.assign({}, props, {\n          className: \"menuAnimate\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 13\n          }\n        }));\n      }\n    },\n    onMenuOpen: function onMenuOpen() {\n      return setIsCrossVisible(false);\n    },\n    onMenuClose: function onMenuClose() {\n      value && setIsCrossVisible(true);\n    },\n    styles: ListViewStyled(),\n    options: optionsMemo,\n    value: value,\n    isLoading: isLoading,\n    placeholder: placeholder,\n    onInputChange: onInputChangeWrapper,\n    onChange: function onChange(input) {\n      i = 0;\n      var obj = Array.from(document.querySelectorAll('.ui-tooltip'));\n      obj === null || obj === void 0 ? void 0 : obj.forEach(function (e) {\n        e.remove();\n      });\n      _onChange && _onChange(input);\n    },\n    onFocus: onFocus,\n    isSearchable: isSearchable,\n    isDisabled: disabled,\n    menuPlacement: \"auto\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }), isCrossVisible && /*#__PURE__*/React.createElement(StyledFont, {\n    onMouseDown: function onMouseDown(e) {\n      handleCloseChange(e);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(FontIcon, {\n    variant: \"close\",\n    size: 7,\n    color: \"grey.800\",\n    hoverColor: \"primary.main\",\n    style: {\n      opacity: '0.66'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 11\n    }\n  })));\n};\n\nexport default ListView;","map":{"version":3,"sources":["/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/molecules/DropDown/Variants/ListView.tsx"],"names":["React","useMemo","Select","components","DropdownIndicator","Option","ListViewStyled","StyledFont","FontIcon","Position","ListView","setIsCrossVisible","isCrossVisible","defaultProps","handleCloseChange","options","value","isLoading","placeholder","onInputChange","onChange","onFocus","isSearchable","disabled","limitOptionsList","resultLimit","i","useState","input","setInput","onInputChangeWrapper","newValue","actionMeta","optionsMemo","filter","dropdownOption","label","toLowerCase","indexOf","toString","IndicatorSeparator","LoadingIndicator","Menu","props","obj","Array","from","document","querySelectorAll","forEach","e","remove","opacity"],"mappings":"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","sourcesContent":["import React, { useMemo } from 'react'\nimport Select, { components, InputActionMeta } from 'react-select'\nimport { DropdownIndicator, Option } from '../CustomComponent'\nimport { ListViewStyled } from '../Styles'\nimport { StyledFont } from '../StyledDropDown'\nimport FontIcon from '../../../atoms/FontIcon'\nimport { IListView } from '../interface'\nimport Position from '../../Position'\n\nconst ListView = ({\n  setIsCrossVisible,\n  isCrossVisible,\n  defaultProps,\n  handleCloseChange\n}: IListView) => {\n  const {\n    options,\n    value,\n    isLoading,\n    placeholder,\n    onInputChange,\n    onChange,\n    onFocus,\n    isSearchable,\n    disabled,\n    limitOptionsList\n\n  } = defaultProps\n  const resultLimit = limitOptionsList  || 25;\n  let i = 0\n  const [input, setInput] = React.useState<any>();\n\n  const onInputChangeWrapper = (newValue: string, actionMeta: InputActionMeta) =>{\n    setInput(newValue);\n    onInputChange && onInputChange(newValue, actionMeta);\n  }\n  \n  const optionsMemo = useMemo(() => {\n    return options?.filter((dropdownOption: { label: string }) => {\n      if(typeof input ==='number' && input){\n        return dropdownOption?.label?.toLowerCase().indexOf(input?.toString()?.toLowerCase()) >= 0 && i++ < resultLimit;\n      }else if(input){\n        return dropdownOption?.label?.toLowerCase().indexOf(input?.toLowerCase()) >= 0 && i++ < resultLimit;\n      }else{\n        return i++ < resultLimit;\n      }\n    });\n  }, [input,options])\n\n  return (\n    <Position type='relative' mt='-0.25em'>\n      <Select\n        components={{\n          IndicatorSeparator: () => null,\n          DropdownIndicator,\n          LoadingIndicator: () => null,\n          Option,\n          Menu: (props) => (\n            <components.Menu {...props} className='menuAnimate' />\n          )\n        }}\n        onMenuOpen={() => setIsCrossVisible(false)}\n        onMenuClose={() => {\n          value && setIsCrossVisible(true)\n        }}\n        styles={ListViewStyled()}\n        options={optionsMemo}\n        value={value}\n        isLoading={isLoading}\n        placeholder={placeholder}\n        onInputChange={onInputChangeWrapper}\n        onChange={(input: any) => {\n          i = 0\n          const obj = Array.from(document.querySelectorAll('.ui-tooltip'))\n          obj?.forEach((e) => {\n            e.remove()\n          })\n          onChange && onChange(input)\n        }}\n        onFocus={onFocus}\n        isSearchable={isSearchable}\n        isDisabled={disabled}\n        menuPlacement='auto'\n       \n      />\n      {isCrossVisible && (\n        <StyledFont\n          onMouseDown={(e) => {\n            handleCloseChange(e)\n          }}\n        >\n          <FontIcon\n            variant='close'\n            size={7}\n            color='grey.800'\n            hoverColor='primary.main'\n            style={{\n              opacity: '0.66'\n            }}\n          />\n        </StyledFont>\n      )}\n    </Position>\n  )\n}\n\nexport default ListView\n"]},"metadata":{},"sourceType":"module"}