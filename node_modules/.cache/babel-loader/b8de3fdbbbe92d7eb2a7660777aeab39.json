{"ast":null,"code":"import _objectWithoutProperties from \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/molecules/DatePicker/Utils/components.tsx\";\n\nimport React from 'react';\nimport TextInput from '../../TextInput';\nimport FontIcon from '../../../atoms/FontIcon';\nimport IconButton from '../../../atoms/IconButton';\nimport { FontIconStyled, TimeContainerStyled, TimeContainerScrollabelStyled, TimeTabStyled, TextInputStyled } from '../Styles/DatePicker.styles';\nimport { handleScrollDown, handleScrollUp, createArrayofTimeObject, createArrayofTime, convertTo24HourFormat, convertTo12HourFormat, binarySearch } from './functions';\nexport var CustomTextInput = function CustomTextInput(_ref) {\n  var label = _ref.label,\n      value = _ref.value,\n      onClick = _ref.onClick,\n      onlyTime = _ref.onlyTime,\n      id = _ref.id,\n      _ref$name = _ref.name,\n      name = _ref$name === void 0 ? 'date-picker' : _ref$name,\n      className = _ref.className,\n      style = _ref.style,\n      ref = _ref.ref,\n      dateToString = _ref.dateToString,\n      props = _objectWithoutProperties(_ref, [\"label\", \"value\", \"onClick\", \"onlyTime\", \"id\", \"name\", \"className\", \"style\", \"ref\", \"dateToString\"]);\n\n  return /*#__PURE__*/React.createElement(TextInputStyled, {\n    onClick: onClick,\n    style: style,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(TextInput, Object.assign({\n    id: id,\n    name: name,\n    className: className,\n    label: label,\n    variant: \"basic\",\n    labelColor: \"text.inputLabel.default\",\n    placeholder: \"Please Click Here\",\n    fullWidth: true,\n    value: dateToString ? value ? dateToString(new Date(value + '')) : undefined : value,\n    ref: null\n  }, props, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  })), /*#__PURE__*/React.createElement(FontIconStyled, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FontIcon, {\n    variant: onlyTime ? 'clock-history-outline' : 'calendar',\n    color: \"white\",\n    size: \"lg\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  })));\n};\nexport var CustomTimeInput = function CustomTimeInput(_ref2) {\n  var value = _ref2.value,\n      onChange = _ref2.onChange,\n      handleClick = _ref2.handleClick,\n      _ref2$tInterval = _ref2.tInterval,\n      tInterval = _ref2$tInterval === void 0 ? 15 : _ref2$tInterval,\n      tFormat = _ref2.tFormat,\n      markCurrentTime = _ref2.markCurrentTime;\n  var ourTimeArray = createArrayofTimeObject(tInterval, tFormat);\n  var node = React.useRef(null);\n  React.useEffect(function () {\n    if (node.current !== null) {\n      var _node$current;\n\n      node === null || node === void 0 ? void 0 : (_node$current = node.current) === null || _node$current === void 0 ? void 0 : _node$current.scrollIntoView({\n        block: 'center'\n      });\n    }\n\n    if (value && (ourTimeArray === null || ourTimeArray === void 0 ? void 0 : ourTimeArray.indexOf(convertTo12HourFormat(value))) === -1) {\n      // console.log(convertTo12HourFormat(value))\n      value = '';\n    }\n  }, [value]);\n\n  var getCurrentClosestTime = function getCurrentClosestTime() {\n    var current = new Date().getHours() * 60 + new Date().getMinutes();\n    var result = binarySearch(current, createArrayofTime(tInterval, tFormat));\n    return result;\n  };\n\n  return /*#__PURE__*/React.createElement(TimeContainerStyled, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(IconButton, {\n    onClick: function onClick() {\n      return handleScrollUp('scrollable-div');\n    },\n    onlyIcon: true,\n    iconVariant: \"angle-up\",\n    iconSize: \"xs\",\n    color: \"black\",\n    style: {\n      margin: 'auto'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(TimeContainerScrollabelStyled, {\n    id: \"scrollable-div\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }\n  }, ourTimeArray.map(function (time, index) {\n    return /*#__PURE__*/React.createElement(TimeTabStyled, {\n      key: index,\n      \"aria-time\": time,\n      className: \"timeLabel \".concat(value === convertTo24HourFormat(time, tFormat) ? 'selected-time' : markCurrentTime && time === getCurrentClosestTime() ? 'selected-time' : 'not-selected'),\n      onClick: function onClick() {\n        handleClick && handleClick();\n        onChange && onChange(convertTo24HourFormat(time, tFormat));\n      },\n      ref: value === convertTo24HourFormat(time, tFormat) ? node : value === '' || value && (ourTimeArray === null || ourTimeArray === void 0 ? void 0 : ourTimeArray.indexOf(convertTo12HourFormat(value))) === -1 ? time === getCurrentClosestTime() ? node : null : null,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 11\n      }\n    }, time);\n  })), /*#__PURE__*/React.createElement(IconButton, {\n    onClick: function onClick() {\n      return handleScrollDown('scrollable-div');\n    },\n    onlyIcon: true,\n    iconVariant: \"angle-down\",\n    iconSize: \"xs\",\n    color: \"black\",\n    style: {\n      margin: 'auto'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }\n  }));\n};","map":{"version":3,"sources":["/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/molecules/DatePicker/Utils/components.tsx"],"names":["React","TextInput","FontIcon","IconButton","FontIconStyled","TimeContainerStyled","TimeContainerScrollabelStyled","TimeTabStyled","TextInputStyled","handleScrollDown","handleScrollUp","createArrayofTimeObject","createArrayofTime","convertTo24HourFormat","convertTo12HourFormat","binarySearch","CustomTextInput","label","value","onClick","onlyTime","id","name","className","style","ref","dateToString","props","Date","undefined","CustomTimeInput","onChange","handleClick","tInterval","tFormat","markCurrentTime","ourTimeArray","node","useRef","useEffect","current","scrollIntoView","block","indexOf","getCurrentClosestTime","getHours","getMinutes","result","margin","map","time","index"],"mappings":"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","sourcesContent":["import React from 'react'\n\nimport TextInput from '../../TextInput'\nimport FontIcon from '../../../atoms/FontIcon'\nimport IconButton from '../../../atoms/IconButton'\n\nimport {\n  FontIconStyled,\n  TimeContainerStyled,\n  TimeContainerScrollabelStyled,\n  TimeTabStyled,\n  TextInputStyled\n} from '../Styles/DatePicker.styles'\n\nimport { CustomTextInputProps, CustomTimeInputProps } from '../interfaces'\n\nimport {\n  handleScrollDown,\n  handleScrollUp,\n  createArrayofTimeObject,\n  createArrayofTime,\n  convertTo24HourFormat,\n  convertTo12HourFormat,\n  binarySearch\n} from './functions'\n\nexport const CustomTextInput = ({\n  label,\n  value,\n  onClick,\n  onlyTime,\n  id,\n  name = 'date-picker',\n  className,\n  style,\n  ref,\n  dateToString,\n  ...props\n}: CustomTextInputProps) => {\n  return (\n    <TextInputStyled onClick={onClick} style={style}>\n      <TextInput\n        id={id}\n        name={name}\n        className={className}\n        label={label}\n        variant='basic'\n        labelColor='text.inputLabel.default'\n        placeholder='Please Click Here'\n        fullWidth\n        value={\n          dateToString\n            ? value\n              ? dateToString(new Date(value + ''))\n              : undefined\n            : value\n        }\n        ref={null}\n        {...props}\n      />\n      <FontIconStyled>\n        <FontIcon\n          variant={onlyTime ? 'clock-history-outline' : 'calendar'}\n          color='white'\n          size='lg'\n        />\n      </FontIconStyled>\n    </TextInputStyled>\n  )\n}\n\nexport const CustomTimeInput = ({\n  value,\n  onChange,\n  handleClick,\n  tInterval = 15,\n  tFormat,\n  markCurrentTime\n}: CustomTimeInputProps) => {\n  const ourTimeArray = createArrayofTimeObject(tInterval, tFormat)\n  const node = React.useRef<null | HTMLDivElement>(null)\n\n  React.useEffect(() => {\n    if (node.current !== null) {\n      node?.current?.scrollIntoView({ block: 'center' })\n    }\n    if (\n      value &&\n      ourTimeArray?.indexOf(convertTo12HourFormat(value) as string) === -1\n    ) {\n      // console.log(convertTo12HourFormat(value))\n      value = ''\n    }\n  }, [value])\n\n  const getCurrentClosestTime = () => {\n    const current = new Date().getHours() * 60 + new Date().getMinutes()\n    const result = binarySearch(current, createArrayofTime(tInterval, tFormat))\n    return result\n  }\n\n  return (\n    <TimeContainerStyled>\n      <IconButton\n        onClick={() => handleScrollUp('scrollable-div')}\n        onlyIcon\n        iconVariant='angle-up'\n        iconSize='xs'\n        color='black'\n        style={{ margin: 'auto' }}\n      />\n      <TimeContainerScrollabelStyled id='scrollable-div'>\n        {ourTimeArray.map((time: string, index: number) => (\n          <TimeTabStyled\n            key={index}\n            aria-time={time}\n            className={`timeLabel ${\n              value === (convertTo24HourFormat(time, tFormat) as string)\n                ? 'selected-time'\n                : markCurrentTime && time === getCurrentClosestTime()\n                ? 'selected-time'\n                : 'not-selected'\n            }`}\n            onClick={() => {\n              handleClick && handleClick()\n              onChange && onChange(convertTo24HourFormat(time, tFormat))\n            }}\n            ref={\n              value === (convertTo24HourFormat(time, tFormat) as string)\n                ? node\n                : value === '' ||\n                  (value &&\n                    ourTimeArray?.indexOf(\n                      convertTo12HourFormat(value) as string\n                    ) === -1)\n                ? time === getCurrentClosestTime()\n                  ? node\n                  : null\n                : null\n            }\n          >\n            {time}\n          </TimeTabStyled>\n        ))}\n      </TimeContainerScrollabelStyled>\n      <IconButton\n        onClick={() => handleScrollDown('scrollable-div')}\n        onlyIcon\n        iconVariant='angle-down'\n        iconSize='xs'\n        color='black'\n        style={{ margin: 'auto' }}\n      />\n    </TimeContainerStyled>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}