{"ast":null,"code":"import _toConsumableArray from \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/organisms/ListView/utils/components/ColumnOptions.tsx\";\n\nimport React from 'react';\nimport Position from '../../../../molecules/Position';\nimport IconDropdown from '../../../../molecules/IconDropdown';\nimport FontIcon from '../../../../atoms/FontIcon';\n\nvar ColumnOptions = function ColumnOptions(_ref) {\n  var instance = _ref.instance,\n      columns = _ref.columns,\n      columnInstance = _ref.columnInstance,\n      pinnedColumns = _ref.pinnedColumns,\n      setPinnedColumns = _ref.setPinnedColumns,\n      setPinnedColumnsTotalWidth = _ref.setPinnedColumnsTotalWidth,\n      setShowHideColumns = _ref.setShowHideColumns,\n      setColumnCheckedCount = _ref.setColumnCheckedCount,\n      hideColumnSettings = _ref.hideColumnSettings;\n  // const renders = React.useRef(0)\n  // renders.current++\n  // console.log('Renderring Column Options', columnInstance.id, renders)\n  var allColumns = instance.allColumns,\n      setColumnOrder = instance.setColumnOrder,\n      toggleSortBy = instance.toggleSortBy,\n      toggleHideColumn = instance.toggleHideColumn,\n      columnOrder = instance.state.columnOrder;\n\n  var handleColumnPinning = function handleColumnPinning(selectedOption, column) {\n    var newColumnOrder = columnOrder.length ? columnOrder : allColumns.map(function (c) {\n      return c.id;\n    });\n    newColumnOrder = newColumnOrder.filter(function (columnId) {\n      return columnId !== column.id;\n    });\n\n    var newPinnedColumns = _objectSpread({}, pinnedColumns);\n\n    var calculatedOffset = 0;\n\n    switch (selectedOption) {\n      case 'pinLeft':\n        Object.values(newPinnedColumns.left).forEach(function (value) {\n          calculatedOffset += value.width;\n        });\n        {\n          var _document$getElementB;\n\n          var width = ((_document$getElementB = document.getElementById(\"column-header-\".concat(column.id))) === null || _document$getElementB === void 0 ? void 0 : _document$getElementB.getBoundingClientRect().width) || 0;\n          newPinnedColumns.left[column.id || ''] = {\n            offset: calculatedOffset,\n            // width: Number(column.width)\n            width: width\n          };\n          setPinnedColumnsTotalWidth(function (pT) {\n            return _objectSpread(_objectSpread({}, pT), {}, {\n              // left: calculatedOffset + Number(column.width)\n              left: calculatedOffset + width\n            });\n          });\n        }\n        break;\n\n      case 'pinRight':\n        Object.values(newPinnedColumns.right).forEach(function (value) {\n          calculatedOffset += value.width;\n        });\n        {\n          var _document$getElementB2;\n\n          var _width = ((_document$getElementB2 = document.getElementById(\"column-header-\".concat(column.id))) === null || _document$getElementB2 === void 0 ? void 0 : _document$getElementB2.getBoundingClientRect().width) || 0;\n\n          newPinnedColumns.right[column.id || ''] = {\n            offset: calculatedOffset,\n            // width: Number(column.width)\n            width: _width\n          };\n          setPinnedColumnsTotalWidth(function (pT) {\n            return _objectSpread(_objectSpread({}, pT), {}, {\n              // right: calculatedOffset + Number(column.width)\n              right: calculatedOffset + _width\n            });\n          });\n        }\n        break;\n\n      case 'unpin':\n        {\n          var _document$getElementB3;\n\n          var unpinColumnWidth = ((_document$getElementB3 = document.getElementById(\"column-header-\".concat(column.id))) === null || _document$getElementB3 === void 0 ? void 0 : _document$getElementB3.getBoundingClientRect().width) || 0;\n\n          if (newPinnedColumns.left[column.id || '']) {\n            Object.values(newPinnedColumns.left).forEach(function (pinnedColumn) {\n              if (Number(unpinColumnWidth) <= pinnedColumn.offset) {\n                pinnedColumn.offset -= Number(unpinColumnWidth);\n              }\n            });\n            setPinnedColumnsTotalWidth(function (pT) {\n              return _objectSpread(_objectSpread({}, pT), {}, {\n                left: pT.left - Number(unpinColumnWidth) // left: 50\n\n              });\n            });\n          }\n\n          if (newPinnedColumns.right[column.id || '']) {\n            Object.values(newPinnedColumns.right).forEach(function (pinnedColumn) {\n              if (Number(unpinColumnWidth) <= pinnedColumn.offset) {\n                pinnedColumn.offset -= Number(unpinColumnWidth);\n              }\n            });\n            setPinnedColumnsTotalWidth(function (pT) {\n              return _objectSpread(_objectSpread({}, pT), {}, {\n                right: pT.right - Number(unpinColumnWidth)\n              });\n            });\n          }\n        }\n        delete newPinnedColumns.left[column.id || ''];\n        delete newPinnedColumns.right[column.id || '']; // Object.values(newPinnedColumns.right)\n\n        break;\n    }\n\n    setPinnedColumns(newPinnedColumns);\n    newColumnOrder = [].concat(_toConsumableArray(Object.keys(pinnedColumns.left)), _toConsumableArray(columns.filter(function (_ref2) {\n      var accessor = _ref2.accessor;\n      return !(newPinnedColumns.left[accessor] || newPinnedColumns.right[accessor]);\n    }).map(function (_ref3) {\n      var accessor = _ref3.accessor;\n      return accessor;\n    })), _toConsumableArray(Object.keys(pinnedColumns.right).reverse()));\n    setColumnOrder(newColumnOrder);\n  };\n\n  var columnOptions = React.useMemo(function () {\n    var options = [{\n      value: 'sortAscending',\n      label: sessionStorage.getItem('logiLabels_ascendingSort') || \"Sort asending\",\n      iconVariant: 'up-arrow'\n    }, {\n      value: 'sortDescending',\n      label: sessionStorage.getItem('logiLabels_descendingSort') || \"Sort Descending\",\n      iconVariant: 'down-arrow'\n    }, {\n      value: 'removeSortBy',\n      label: sessionStorage.getItem('logiLabels_removeSort') || \"remove Sort By\",\n      iconVariant: 'x'\n    }, {\n      value: 'hideColumn',\n      label: sessionStorage.getItem('logiLabels_hideColumn') || \"Hide Column\",\n      iconVariant: 'x'\n    }, {\n      value: 'pinLeft',\n      label: sessionStorage.getItem('logiLabels_pinLeft') || \"Pin Left\",\n      iconVariant: 'icomoon-angle-left'\n    }, {\n      value: 'pinRight',\n      label: sessionStorage.getItem('logiLabels_pinRight') || \"Pin Right\",\n      iconVariant: 'icomoon-angle-right'\n    }];\n\n    if (!(columnInstance === null || columnInstance === void 0 ? void 0 : columnInstance['isSortable'])) {\n      options = options.splice(2, options.length);\n    }\n\n    if (pinnedColumns.left[columnInstance.id] || pinnedColumns.right[columnInstance.id]) {\n      options.push({\n        value: 'unpin',\n        label: sessionStorage.getItem('logiLabels_unpin') || \"Unpin Column\",\n        iconVariant: 'x'\n      });\n      options = options.filter(function (option) {\n        return pinnedColumns.left[columnInstance.id] && option.value !== 'pinLeft' || pinnedColumns.right[columnInstance.id] && option.value !== 'pinRight';\n      });\n    }\n\n    if (!columnInstance.isSorted) {\n      // options.push()\n      var removeSortIndex = options.findIndex(function (o) {\n        return o.value === 'removeSortBy';\n      });\n      options.splice(removeSortIndex, 1);\n    }\n\n    if (hideColumnSettings) {\n      var hideColumnIndex = options.findIndex(function (o) {\n        return o.value === 'hideColumn';\n      });\n      options.splice(hideColumnIndex, 1);\n    }\n\n    return options;\n  }, [columnInstance.isSorted, pinnedColumns, columnInstance.id]);\n  return /*#__PURE__*/React.createElement(Position, {\n    type: \"absolute\",\n    top: \"-0.5em\",\n    right: \"0em\",\n    style: {\n      zIndex: 2\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Position, {\n    type: \"relative\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 7\n    }\n  }, columnInstance.isSorted && /*#__PURE__*/React.createElement(Position, {\n    type: \"absolute\",\n    right: \"22px\",\n    top: \"calc(50% - 8px)\",\n    display: \"flex\" // color='grey.A1000'\n    ,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(FontIcon, {\n    variant: columnInstance.isSortedDesc ? 'sort-descending' : 'sort-ascending',\n    size: 10,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      fontSize: '12px'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 13\n    }\n  }, columnInstance.sortedIndex + 1)), /*#__PURE__*/React.createElement(IconDropdown, {\n    width: \"auto\",\n    variant: \"column-filter\",\n    optionList: columnOptions,\n    onChange: function onChange(value) {\n      switch (value) {\n        case 'pinLeft':\n          if (pinnedColumns.right[columnInstance.id]) {\n            handleColumnPinning('unpin', columnInstance);\n          }\n\n          handleColumnPinning(value, columnInstance);\n          break;\n\n        case 'pinRight':\n          if (pinnedColumns.left[columnInstance.id]) {\n            handleColumnPinning('unpin', columnInstance);\n          }\n\n          handleColumnPinning(value, columnInstance);\n          break;\n\n        case 'unpin':\n          handleColumnPinning(value, columnInstance);\n          break;\n\n        case 'removeSortBy':\n          columnInstance.clearSortBy();\n          break;\n\n        case 'sortAscending':\n          toggleSortBy(columnInstance.id, false, true);\n          break;\n\n        case 'sortDescending':\n          toggleSortBy(columnInstance.id, true, true);\n          break;\n\n        case 'hideColumn':\n          setShowHideColumns(function (cList) {\n            return cList.map(function (c) {\n              return c.id === columnInstance.id ? _objectSpread(_objectSpread({}, c), {}, {\n                checked: !c.checked\n              }) : c;\n            });\n          });\n          setColumnCheckedCount(function (c) {\n            return c - 1;\n          });\n          setTimeout(function () {\n            toggleHideColumn(columnInstance.id, true);\n            handleColumnPinning('unpin', columnInstance);\n          }, 100);\n          break;\n      }\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default ColumnOptions; // export default React.memo(\n//   ColumnOptions,\n//   (prevProps: IColumnOptionsProps, nextProps: IColumnOptionsProps) => {\n//     console.log(prevProps, nextProps)\n//     if (\n//       prevProps.instance === nextProps.instance &&\n//       prevProps.columnInstance.id === nextProps.columnInstance.id &&\n//       prevProps.columnInstance.isSorted === nextProps.columnInstance.isSorted &&\n//       prevProps.columnInstance.clearSortBy ===\n//         nextProps.columnInstance.clearSortBy &&\n//       prevProps.pinnedColumns === nextProps.pinnedColumns &&\n//       prevProps.setPinnedColumns === nextProps.setPinnedColumns &&\n//       prevProps.columns === nextProps.columns &&\n//       prevProps.instance.state.columnOrder ===\n//         nextProps.instance.state.columnOrder &&\n//       prevProps.instance.setColumnOrder === nextProps.instance.setColumnOrder &&\n//       prevProps.instance.toggleSortBy === nextProps.instance.toggleSortBy &&\n//       prevProps.instance.toggleHideColumn ===\n//         nextProps.instance.toggleHideColumn\n//     ) {\n//       return true\n//     } else {\n//       return false\n//     }\n//   }\n// )","map":{"version":3,"sources":["/Users/farhanansari/Desktop/CODE/PrxProject/untitled folder/reactStoryBook/src/components/organisms/ListView/utils/components/ColumnOptions.tsx"],"names":["React","Position","IconDropdown","FontIcon","ColumnOptions","instance","columns","columnInstance","pinnedColumns","setPinnedColumns","setPinnedColumnsTotalWidth","setShowHideColumns","setColumnCheckedCount","hideColumnSettings","allColumns","setColumnOrder","toggleSortBy","toggleHideColumn","columnOrder","state","handleColumnPinning","selectedOption","column","newColumnOrder","length","map","c","id","filter","columnId","newPinnedColumns","calculatedOffset","Object","values","left","forEach","value","width","document","getElementById","getBoundingClientRect","offset","pT","right","unpinColumnWidth","pinnedColumn","Number","keys","accessor","reverse","columnOptions","useMemo","options","label","sessionStorage","getItem","iconVariant","splice","push","option","isSorted","removeSortIndex","findIndex","o","hideColumnIndex","zIndex","isSortedDesc","fontSize","sortedIndex","clearSortBy","cList","checked","setTimeout"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,gCAArB;AAQA,OAAOC,YAAP,MAAyB,oCAAzB;AAEA,OAAOC,QAAP,MAAqB,4BAArB;;AAiBA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,OAUK;AAAA,MATzBC,QASyB,QATzBA,QASyB;AAAA,MARzBC,OAQyB,QARzBA,OAQyB;AAAA,MAPzBC,cAOyB,QAPzBA,cAOyB;AAAA,MANzBC,aAMyB,QANzBA,aAMyB;AAAA,MALzBC,gBAKyB,QALzBA,gBAKyB;AAAA,MAJzBC,0BAIyB,QAJzBA,0BAIyB;AAAA,MAHzBC,kBAGyB,QAHzBA,kBAGyB;AAAA,MAFzBC,qBAEyB,QAFzBA,qBAEyB;AAAA,MADzBC,kBACyB,QADzBA,kBACyB;AACzB;AACA;AACA;AAHyB,MAKvBC,UALuB,GAUrBT,QAVqB,CAKvBS,UALuB;AAAA,MAMvBC,cANuB,GAUrBV,QAVqB,CAMvBU,cANuB;AAAA,MAOvBC,YAPuB,GAUrBX,QAVqB,CAOvBW,YAPuB;AAAA,MAQvBC,gBARuB,GAUrBZ,QAVqB,CAQvBY,gBARuB;AAAA,MASdC,WATc,GAUrBb,QAVqB,CASvBc,KATuB,CASdD,WATc;;AAYzB,MAAME,mBAAmB,GAAG,SAAtBA,mBAAsB,CAC1BC,cAD0B,EAE1BC,MAF0B,EAGvB;AACH,QAAIC,cAAwB,GAAGL,WAAW,CAACM,MAAZ,GAC3BN,WAD2B,GAE3BJ,UAAU,CAACW,GAAX,CAAe,UAACC,CAAD;AAAA,aAAOA,CAAC,CAACC,EAAT;AAAA,KAAf,CAFJ;AAGAJ,IAAAA,cAAc,GAAGA,cAAc,CAACK,MAAf,CAAsB,UAACC,QAAD;AAAA,aAAcA,QAAQ,KAAKP,MAAM,CAACK,EAAlC;AAAA,KAAtB,CAAjB;;AACA,QAAMG,gBAAgB,qBAAQtB,aAAR,CAAtB;;AAEA,QAAIuB,gBAAgB,GAAG,CAAvB;;AACA,YAAQV,cAAR;AACE,WAAK,SAAL;AACEW,QAAAA,MAAM,CAACC,MAAP,CAAcH,gBAAgB,CAACI,IAA/B,EAAqCC,OAArC,CAA6C,UAACC,KAAD,EAAW;AACtDL,UAAAA,gBAAgB,IAAIK,KAAK,CAACC,KAA1B;AACD,SAFD;AAIA;AAAA;;AACE,cAAMA,KAAK,GACT,0BAAAC,QAAQ,CACLC,cADH,yBACmCjB,MAAM,CAACK,EAD1C,kFAEIa,qBAFJ,GAE4BH,KAF5B,KAEqC,CAHvC;AAIAP,UAAAA,gBAAgB,CAACI,IAAjB,CAAsBZ,MAAM,CAACK,EAAP,IAAa,EAAnC,IAAyC;AACvCc,YAAAA,MAAM,EAAEV,gBAD+B;AAEvC;AACAM,YAAAA,KAAK,EAALA;AAHuC,WAAzC;AAKA3B,UAAAA,0BAA0B,CAAC,UAACgC,EAAD;AAAA,mDACtBA,EADsB;AAEzB;AACAR,cAAAA,IAAI,EAAEH,gBAAgB,GAAGM;AAHA;AAAA,WAAD,CAA1B;AAKD;AACD;;AAEF,WAAK,UAAL;AACEL,QAAAA,MAAM,CAACC,MAAP,CAAcH,gBAAgB,CAACa,KAA/B,EAAsCR,OAAtC,CAA8C,UAACC,KAAD,EAAW;AACvDL,UAAAA,gBAAgB,IAAIK,KAAK,CAACC,KAA1B;AACD,SAFD;AAIA;AAAA;;AACE,cAAMA,MAAK,GACT,2BAAAC,QAAQ,CACLC,cADH,yBACmCjB,MAAM,CAACK,EAD1C,oFAEIa,qBAFJ,GAE4BH,KAF5B,KAEqC,CAHvC;;AAIAP,UAAAA,gBAAgB,CAACa,KAAjB,CAAuBrB,MAAM,CAACK,EAAP,IAAa,EAApC,IAA0C;AACxCc,YAAAA,MAAM,EAAEV,gBADgC;AAExC;AACAM,YAAAA,KAAK,EAALA;AAHwC,WAA1C;AAMA3B,UAAAA,0BAA0B,CAAC,UAACgC,EAAD;AAAA,mDACtBA,EADsB;AAEzB;AACAC,cAAAA,KAAK,EAAEZ,gBAAgB,GAAGM;AAHD;AAAA,WAAD,CAA1B;AAKD;AACD;;AAEF,WAAK,OAAL;AACE;AAAA;;AACE,cAAMO,gBAAgB,GACpB,2BAAAN,QAAQ,CACLC,cADH,yBACmCjB,MAAM,CAACK,EAD1C,oFAEIa,qBAFJ,GAE4BH,KAF5B,KAEqC,CAHvC;;AAIA,cAAIP,gBAAgB,CAACI,IAAjB,CAAsBZ,MAAM,CAACK,EAAP,IAAa,EAAnC,CAAJ,EAA4C;AAC1CK,YAAAA,MAAM,CAACC,MAAP,CAAcH,gBAAgB,CAACI,IAA/B,EAAqCC,OAArC,CACE,UAACU,YAAD,EAAiC;AAC/B,kBAAIC,MAAM,CAACF,gBAAD,CAAN,IAA4BC,YAAY,CAACJ,MAA7C,EAAqD;AACnDI,gBAAAA,YAAY,CAACJ,MAAb,IAAuBK,MAAM,CAACF,gBAAD,CAA7B;AACD;AACF,aALH;AAQAlC,YAAAA,0BAA0B,CAAC,UAACgC,EAAD;AAAA,qDACtBA,EADsB;AAEzBR,gBAAAA,IAAI,EAAEQ,EAAE,CAACR,IAAH,GAAUY,MAAM,CAACF,gBAAD,CAFG,CAGzB;;AAHyB;AAAA,aAAD,CAA1B;AAKD;;AAED,cAAId,gBAAgB,CAACa,KAAjB,CAAuBrB,MAAM,CAACK,EAAP,IAAa,EAApC,CAAJ,EAA6C;AAC3CK,YAAAA,MAAM,CAACC,MAAP,CAAcH,gBAAgB,CAACa,KAA/B,EAAsCR,OAAtC,CACE,UAACU,YAAD,EAAiC;AAC/B,kBAAIC,MAAM,CAACF,gBAAD,CAAN,IAA4BC,YAAY,CAACJ,MAA7C,EAAqD;AACnDI,gBAAAA,YAAY,CAACJ,MAAb,IAAuBK,MAAM,CAACF,gBAAD,CAA7B;AACD;AACF,aALH;AAQAlC,YAAAA,0BAA0B,CAAC,UAACgC,EAAD;AAAA,qDACtBA,EADsB;AAEzBC,gBAAAA,KAAK,EAAED,EAAE,CAACC,KAAH,GAAWG,MAAM,CAACF,gBAAD;AAFC;AAAA,aAAD,CAA1B;AAID;AACF;AACD,eAAOd,gBAAgB,CAACI,IAAjB,CAAsBZ,MAAM,CAACK,EAAP,IAAa,EAAnC,CAAP;AACA,eAAOG,gBAAgB,CAACa,KAAjB,CAAuBrB,MAAM,CAACK,EAAP,IAAa,EAApC,CAAP,CAtCF,CAuCE;;AACA;AAxFJ;;AA2FAlB,IAAAA,gBAAgB,CAACqB,gBAAD,CAAhB;AAEAP,IAAAA,cAAc,gCACTS,MAAM,CAACe,IAAP,CAAYvC,aAAa,CAAC0B,IAA1B,CADS,sBAET5B,OAAO,CACPsB,MADA,CAEC;AAAA,UAAGoB,QAAH,SAAGA,QAAH;AAAA,aACE,EACElB,gBAAgB,CAACI,IAAjB,CAAsBc,QAAtB,KACAlB,gBAAgB,CAACa,KAAjB,CAAuBK,QAAvB,CAFF,CADF;AAAA,KAFD,EAQAvB,GARA,CAQI;AAAA,UAAGuB,QAAH,SAAGA,QAAH;AAAA,aAAkBA,QAAlB;AAAA,KARJ,CAFS,sBAWThB,MAAM,CAACe,IAAP,CAAYvC,aAAa,CAACmC,KAA1B,EAAiCM,OAAjC,EAXS,EAAd;AAcAlC,IAAAA,cAAc,CAACQ,cAAD,CAAd;AACD,GAvHD;;AAyHA,MAAM2B,aAAa,GAAGlD,KAAK,CAACmD,OAAN,CAAc,YAAM;AACxC,QAAIC,OAAO,GAAG,CACZ;AACEhB,MAAAA,KAAK,EAAE,eADT;AAEEiB,MAAAA,KAAK,EAAEC,cAAc,CAACC,OAAf,CAAuB,0BAAvB,KAAsD,eAF/D;AAGEC,MAAAA,WAAW,EAAE;AAHf,KADY,EAMZ;AACEpB,MAAAA,KAAK,EAAE,gBADT;AAEEiB,MAAAA,KAAK,EAAEC,cAAc,CAACC,OAAf,CAAuB,2BAAvB,KAAuD,iBAFhE;AAGEC,MAAAA,WAAW,EAAE;AAHf,KANY,EAWZ;AACEpB,MAAAA,KAAK,EAAE,cADT;AAEEiB,MAAAA,KAAK,EAAEC,cAAc,CAACC,OAAf,CAAuB,uBAAvB,KAAmD,gBAF5D;AAGEC,MAAAA,WAAW,EAAE;AAHf,KAXY,EAgBZ;AACEpB,MAAAA,KAAK,EAAE,YADT;AAEEiB,MAAAA,KAAK,EAAEC,cAAc,CAACC,OAAf,CAAuB,uBAAvB,KAAmD,aAF5D;AAGEC,MAAAA,WAAW,EAAE;AAHf,KAhBY,EAqBZ;AACEpB,MAAAA,KAAK,EAAE,SADT;AAEEiB,MAAAA,KAAK,EAAEC,cAAc,CAACC,OAAf,CAAuB,oBAAvB,KAAgD,UAFzD;AAGEC,MAAAA,WAAW,EAAE;AAHf,KArBY,EA0BZ;AACEpB,MAAAA,KAAK,EAAE,UADT;AAEEiB,MAAAA,KAAK,EAAEC,cAAc,CAACC,OAAf,CAAuB,qBAAvB,KAAiD,WAF1D;AAGEC,MAAAA,WAAW,EAAE;AAHf,KA1BY,CAAd;;AAiCA,QAAI,EAACjD,cAAD,aAACA,cAAD,uBAACA,cAAc,CAAG,YAAH,CAAf,CAAJ,EAAqC;AACnC6C,MAAAA,OAAO,GAAGA,OAAO,CAACK,MAAR,CAAe,CAAf,EAAkBL,OAAO,CAAC5B,MAA1B,CAAV;AACD;;AAED,QACEhB,aAAa,CAAC0B,IAAd,CAAmB3B,cAAc,CAACoB,EAAlC,KACAnB,aAAa,CAACmC,KAAd,CAAoBpC,cAAc,CAACoB,EAAnC,CAFF,EAGE;AACAyB,MAAAA,OAAO,CAACM,IAAR,CAAa;AACXtB,QAAAA,KAAK,EAAE,OADI;AAEXiB,QAAAA,KAAK,EAAEC,cAAc,CAACC,OAAf,CAAuB,kBAAvB,KAA8C,cAF1C;AAGXC,QAAAA,WAAW,EAAE;AAHF,OAAb;AAMAJ,MAAAA,OAAO,GAAGA,OAAO,CAACxB,MAAR,CACR,UAAC+B,MAAD;AAAA,eACGnD,aAAa,CAAC0B,IAAd,CAAmB3B,cAAc,CAACoB,EAAlC,KACCgC,MAAM,CAACvB,KAAP,KAAiB,SADnB,IAEC5B,aAAa,CAACmC,KAAd,CAAoBpC,cAAc,CAACoB,EAAnC,KACCgC,MAAM,CAACvB,KAAP,KAAiB,UAJrB;AAAA,OADQ,CAAV;AAOD;;AAED,QAAI,CAAC7B,cAAc,CAACqD,QAApB,EAA8B;AAC5B;AACA,UAAMC,eAAe,GAAGT,OAAO,CAACU,SAAR,CACtB,UAACC,CAAD;AAAA,eAAOA,CAAC,CAAC3B,KAAF,KAAY,cAAnB;AAAA,OADsB,CAAxB;AAGAgB,MAAAA,OAAO,CAACK,MAAR,CAAeI,eAAf,EAAgC,CAAhC;AACD;;AAED,QAAIhD,kBAAJ,EAAwB;AACtB,UAAMmD,eAAe,GAAGZ,OAAO,CAACU,SAAR,CAAkB,UAACC,CAAD;AAAA,eAAOA,CAAC,CAAC3B,KAAF,KAAY,YAAnB;AAAA,OAAlB,CAAxB;AAEAgB,MAAAA,OAAO,CAACK,MAAR,CAAeO,eAAf,EAAgC,CAAhC;AACD;;AACD,WAAOZ,OAAP;AACD,GAvEqB,EAuEnB,CAAC7C,cAAc,CAACqD,QAAhB,EAA0BpD,aAA1B,EAAyCD,cAAc,CAACoB,EAAxD,CAvEmB,CAAtB;AAyEA,sBACE,oBAAC,QAAD;AAAU,IAAA,IAAI,EAAC,UAAf;AAA0B,IAAA,GAAG,EAAC,QAA9B;AAAuC,IAAA,KAAK,EAAC,KAA7C;AAAmD,IAAA,KAAK,EAAE;AAAEsC,MAAAA,MAAM,EAAE;AAAV,KAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,QAAD;AAAU,IAAA,IAAI,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG1D,cAAc,CAACqD,QAAf,iBACC,oBAAC,QAAD;AACE,IAAA,IAAI,EAAC,UADP;AAEE,IAAA,KAAK,EAAC,MAFR;AAGE,IAAA,GAAG,EAAC,iBAHN;AAIE,IAAA,OAAO,EAAC,MAJV,CAKE;AALF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAOE,oBAAC,QAAD;AACE,IAAA,OAAO,EACLrD,cAAc,CAAC2D,YAAf,GACI,iBADJ,GAEI,gBAJR;AAME,IAAA,IAAI,EAAE,EANR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPF,eAeE;AAAM,IAAA,KAAK,EAAE;AAAEC,MAAAA,QAAQ,EAAE;AAAZ,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG5D,cAAc,CAAC6D,WAAf,GAA6B,CADhC,CAfF,CAFJ,eAsBE,oBAAC,YAAD;AACE,IAAA,KAAK,EAAC,MADR;AAEE,IAAA,OAAO,EAAC,eAFV;AAGE,IAAA,UAAU,EAAElB,aAHd;AAIE,IAAA,QAAQ,EAAE,kBAACd,KAAD,EAAW;AACnB,cAAQA,KAAR;AACE,aAAK,SAAL;AACE,cAAI5B,aAAa,CAACmC,KAAd,CAAoBpC,cAAc,CAACoB,EAAnC,CAAJ,EAA4C;AAC1CP,YAAAA,mBAAmB,CAAC,OAAD,EAAUb,cAAV,CAAnB;AACD;;AACDa,UAAAA,mBAAmB,CAACgB,KAAD,EAAQ7B,cAAR,CAAnB;AACA;;AACF,aAAK,UAAL;AACE,cAAIC,aAAa,CAAC0B,IAAd,CAAmB3B,cAAc,CAACoB,EAAlC,CAAJ,EAA2C;AACzCP,YAAAA,mBAAmB,CAAC,OAAD,EAAUb,cAAV,CAAnB;AACD;;AACDa,UAAAA,mBAAmB,CAACgB,KAAD,EAAQ7B,cAAR,CAAnB;AACA;;AACF,aAAK,OAAL;AACEa,UAAAA,mBAAmB,CAACgB,KAAD,EAAQ7B,cAAR,CAAnB;AACA;;AAEF,aAAK,cAAL;AACEA,UAAAA,cAAc,CAAC8D,WAAf;AACA;;AACF,aAAK,eAAL;AACErD,UAAAA,YAAY,CAACT,cAAc,CAACoB,EAAhB,EAAoB,KAApB,EAA2B,IAA3B,CAAZ;AACA;;AAEF,aAAK,gBAAL;AACEX,UAAAA,YAAY,CAACT,cAAc,CAACoB,EAAhB,EAAoB,IAApB,EAA0B,IAA1B,CAAZ;AACA;;AAEF,aAAK,YAAL;AACEhB,UAAAA,kBAAkB,CAAC,UAAC2D,KAAD;AAAA,mBACjBA,KAAK,CAAC7C,GAAN,CAAU,UAACC,CAAD;AAAA,qBACRA,CAAC,CAACC,EAAF,KAASpB,cAAc,CAACoB,EAAxB,mCACSD,CADT;AACY6C,gBAAAA,OAAO,EAAE,CAAC7C,CAAC,CAAC6C;AADxB,mBAEI7C,CAHI;AAAA,aAAV,CADiB;AAAA,WAAD,CAAlB;AAOAd,UAAAA,qBAAqB,CAAC,UAACc,CAAD;AAAA,mBAAOA,CAAC,GAAG,CAAX;AAAA,WAAD,CAArB;AACA8C,UAAAA,UAAU,CAAC,YAAM;AACfvD,YAAAA,gBAAgB,CAACV,cAAc,CAACoB,EAAhB,EAAoB,IAApB,CAAhB;AACAP,YAAAA,mBAAmB,CAAC,OAAD,EAAUb,cAAV,CAAnB;AACD,WAHS,EAGP,GAHO,CAAV;AAIA;AAzCJ;AA2CD,KAhDH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAtBF,CADF,CADF;AA6ED,CArSD;;AAuSA,eAAeH,aAAf,C,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React from 'react'\nimport Position from '../../../../molecules/Position'\nimport {\n  IPinnedColumnState,\n  IListViewColumn,\n  IPinnedColumnTotalWidthState,\n  IPinnedColumn\n} from '../../interfaces'\nimport { TableInstance, ColumnInterface, ColumnInstance } from 'react-table'\nimport IconDropdown from '../../../../molecules/IconDropdown'\nimport { IOptionType } from '../../../../atoms/CheckboxGroup'\nimport FontIcon from '../../../../atoms/FontIcon'\n\ninterface IColumnOptionsProps {\n  instance: TableInstance\n  columns: IListViewColumn[]\n  columnInstance: ColumnInstance<IListViewColumn>\n  pinnedColumns: IPinnedColumnState\n  setPinnedColumns: React.Dispatch<React.SetStateAction<IPinnedColumnState>>\n  pinnedColumnsTotalWidth: IPinnedColumnTotalWidthState\n  setPinnedColumnsTotalWidth: React.Dispatch<\n    React.SetStateAction<IPinnedColumnTotalWidthState>\n  >\n  setShowHideColumns: React.Dispatch<React.SetStateAction<IOptionType[]>>\n  setColumnCheckedCount: React.Dispatch<React.SetStateAction<number>>\n  hideColumnSettings: boolean\n}\n\nconst ColumnOptions = ({\n  instance,\n  columns,\n  columnInstance,\n  pinnedColumns,\n  setPinnedColumns,\n  setPinnedColumnsTotalWidth,\n  setShowHideColumns,\n  setColumnCheckedCount,\n  hideColumnSettings\n}: IColumnOptionsProps) => {\n  // const renders = React.useRef(0)\n  // renders.current++\n  // console.log('Renderring Column Options', columnInstance.id, renders)\n  const {\n    allColumns,\n    setColumnOrder,\n    toggleSortBy,\n    toggleHideColumn,\n    state: { columnOrder }\n  } = instance\n\n  const handleColumnPinning = (\n    selectedOption: 'pinLeft' | 'pinRight' | 'unpin',\n    column: ColumnInterface<IListViewColumn>\n  ) => {\n    let newColumnOrder: string[] = columnOrder.length\n      ? columnOrder\n      : allColumns.map((c) => c.id)\n    newColumnOrder = newColumnOrder.filter((columnId) => columnId !== column.id)\n    const newPinnedColumns = { ...pinnedColumns }\n\n    let calculatedOffset = 0\n    switch (selectedOption) {\n      case 'pinLeft':\n        Object.values(newPinnedColumns.left).forEach((value) => {\n          calculatedOffset += value.width\n        })\n\n        {\n          const width =\n            document\n              .getElementById(`column-header-${column.id}`)\n              ?.getBoundingClientRect().width || 0\n          newPinnedColumns.left[column.id || ''] = {\n            offset: calculatedOffset,\n            // width: Number(column.width)\n            width\n          }\n          setPinnedColumnsTotalWidth((pT) => ({\n            ...pT,\n            // left: calculatedOffset + Number(column.width)\n            left: calculatedOffset + width\n          }))\n        }\n        break\n\n      case 'pinRight':\n        Object.values(newPinnedColumns.right).forEach((value) => {\n          calculatedOffset += value.width\n        })\n\n        {\n          const width =\n            document\n              .getElementById(`column-header-${column.id}`)\n              ?.getBoundingClientRect().width || 0\n          newPinnedColumns.right[column.id || ''] = {\n            offset: calculatedOffset,\n            // width: Number(column.width)\n            width\n          }\n\n          setPinnedColumnsTotalWidth((pT) => ({\n            ...pT,\n            // right: calculatedOffset + Number(column.width)\n            right: calculatedOffset + width\n          }))\n        }\n        break\n\n      case 'unpin':\n        {\n          const unpinColumnWidth =\n            document\n              .getElementById(`column-header-${column.id}`)\n              ?.getBoundingClientRect().width || 0\n          if (newPinnedColumns.left[column.id || '']) {\n            Object.values(newPinnedColumns.left).forEach(\n              (pinnedColumn: IPinnedColumn) => {\n                if (Number(unpinColumnWidth) <= pinnedColumn.offset) {\n                  pinnedColumn.offset -= Number(unpinColumnWidth)\n                }\n              }\n            )\n\n            setPinnedColumnsTotalWidth((pT) => ({\n              ...pT,\n              left: pT.left - Number(unpinColumnWidth)\n              // left: 50\n            }))\n          }\n\n          if (newPinnedColumns.right[column.id || '']) {\n            Object.values(newPinnedColumns.right).forEach(\n              (pinnedColumn: IPinnedColumn) => {\n                if (Number(unpinColumnWidth) <= pinnedColumn.offset) {\n                  pinnedColumn.offset -= Number(unpinColumnWidth)\n                }\n              }\n            )\n\n            setPinnedColumnsTotalWidth((pT) => ({\n              ...pT,\n              right: pT.right - Number(unpinColumnWidth)\n            }))\n          }\n        }\n        delete newPinnedColumns.left[column.id || '']\n        delete newPinnedColumns.right[column.id || '']\n        // Object.values(newPinnedColumns.right)\n        break\n    }\n\n    setPinnedColumns(newPinnedColumns)\n\n    newColumnOrder = [\n      ...Object.keys(pinnedColumns.left),\n      ...columns\n        .filter(\n          ({ accessor }) =>\n            !(\n              newPinnedColumns.left[accessor] ||\n              newPinnedColumns.right[accessor]\n            )\n        )\n        .map(({ accessor }) => accessor),\n      ...Object.keys(pinnedColumns.right).reverse()\n    ]\n\n    setColumnOrder(newColumnOrder)\n  }\n\n  const columnOptions = React.useMemo(() => {\n    let options = [\n      {\n        value: 'sortAscending',\n        label: sessionStorage.getItem('logiLabels_ascendingSort') || \"Sort asending\" ,\n        iconVariant: 'up-arrow'\n      },\n      {\n        value: 'sortDescending',\n        label: sessionStorage.getItem('logiLabels_descendingSort') || \"Sort Descending\",\n        iconVariant: 'down-arrow'\n      },\n      {\n        value: 'removeSortBy',\n        label: sessionStorage.getItem('logiLabels_removeSort') || \"remove Sort By\",\n        iconVariant: 'x'\n      },\n      {\n        value: 'hideColumn',\n        label: sessionStorage.getItem('logiLabels_hideColumn') || \"Hide Column\",\n        iconVariant: 'x'  \n      },\n      {\n        value: 'pinLeft',\n        label: sessionStorage.getItem('logiLabels_pinLeft') || \"Pin Left\",\n        iconVariant: 'icomoon-angle-left'\n      },\n      {\n        value: 'pinRight',\n        label: sessionStorage.getItem('logiLabels_pinRight') || \"Pin Right\",\n        iconVariant: 'icomoon-angle-right'\n      }\n    ]\n\n    if (!columnInstance?.['isSortable']) {\n      options = options.splice(2, options.length)\n    }\n\n    if (\n      pinnedColumns.left[columnInstance.id] ||\n      pinnedColumns.right[columnInstance.id]\n    ) {\n      options.push({\n        value: 'unpin',\n        label: sessionStorage.getItem('logiLabels_unpin') || \"Unpin Column\",\n        iconVariant: 'x'\n      })\n\n      options = options.filter(\n        (option) =>\n          (pinnedColumns.left[columnInstance.id] &&\n            option.value !== 'pinLeft') ||\n          (pinnedColumns.right[columnInstance.id] &&\n            option.value !== 'pinRight')\n      )\n    }\n\n    if (!columnInstance.isSorted) {\n      // options.push()\n      const removeSortIndex = options.findIndex(\n        (o) => o.value === 'removeSortBy'\n      )\n      options.splice(removeSortIndex, 1)\n    }\n\n    if (hideColumnSettings) {\n      const hideColumnIndex = options.findIndex((o) => o.value === 'hideColumn')\n\n      options.splice(hideColumnIndex, 1)\n    }\n    return options\n  }, [columnInstance.isSorted, pinnedColumns, columnInstance.id])\n\n  return (\n    <Position type='absolute' top='-0.5em' right='0em' style={{ zIndex: 2 }}>\n      <Position type='relative'>\n        {columnInstance.isSorted && (\n          <Position\n            type='absolute'\n            right='22px'\n            top='calc(50% - 8px)'\n            display='flex'\n            // color='grey.A1000'\n          >\n            <FontIcon\n              variant={\n                columnInstance.isSortedDesc\n                  ? 'sort-descending'\n                  : 'sort-ascending'\n              }\n              size={10}\n            />\n            <span style={{ fontSize: '12px' }}>\n              {columnInstance.sortedIndex + 1}\n            </span>\n          </Position>\n        )}\n        <IconDropdown\n          width='auto'\n          variant='column-filter'\n          optionList={columnOptions}\n          onChange={(value) => {\n            switch (value) {\n              case 'pinLeft':\n                if (pinnedColumns.right[columnInstance.id]) {\n                  handleColumnPinning('unpin', columnInstance)\n                }\n                handleColumnPinning(value, columnInstance)\n                break\n              case 'pinRight':\n                if (pinnedColumns.left[columnInstance.id]) {\n                  handleColumnPinning('unpin', columnInstance)\n                }\n                handleColumnPinning(value, columnInstance)\n                break\n              case 'unpin':\n                handleColumnPinning(value, columnInstance)\n                break\n\n              case 'removeSortBy':\n                columnInstance.clearSortBy()\n                break\n              case 'sortAscending':\n                toggleSortBy(columnInstance.id, false, true)\n                break\n\n              case 'sortDescending':\n                toggleSortBy(columnInstance.id, true, true)\n                break\n\n              case 'hideColumn':\n                setShowHideColumns((cList) =>\n                  cList.map((c) =>\n                    c.id === columnInstance.id\n                      ? { ...c, checked: !c.checked }\n                      : c\n                  )\n                )\n                setColumnCheckedCount((c) => c - 1)\n                setTimeout(() => {\n                  toggleHideColumn(columnInstance.id, true)\n                  handleColumnPinning('unpin', columnInstance)\n                }, 100)\n                break\n            }\n          }}\n        />\n      </Position>\n    </Position>\n  )\n}\n\nexport default ColumnOptions\n// export default React.memo(\n//   ColumnOptions,\n//   (prevProps: IColumnOptionsProps, nextProps: IColumnOptionsProps) => {\n//     console.log(prevProps, nextProps)\n//     if (\n//       prevProps.instance === nextProps.instance &&\n//       prevProps.columnInstance.id === nextProps.columnInstance.id &&\n//       prevProps.columnInstance.isSorted === nextProps.columnInstance.isSorted &&\n//       prevProps.columnInstance.clearSortBy ===\n//         nextProps.columnInstance.clearSortBy &&\n//       prevProps.pinnedColumns === nextProps.pinnedColumns &&\n//       prevProps.setPinnedColumns === nextProps.setPinnedColumns &&\n//       prevProps.columns === nextProps.columns &&\n//       prevProps.instance.state.columnOrder ===\n//         nextProps.instance.state.columnOrder &&\n//       prevProps.instance.setColumnOrder === nextProps.instance.setColumnOrder &&\n//       prevProps.instance.toggleSortBy === nextProps.instance.toggleSortBy &&\n//       prevProps.instance.toggleHideColumn ===\n//         nextProps.instance.toggleHideColumn\n//     ) {\n//       return true\n//     } else {\n//       return false\n//     }\n//   }\n// )\n"]},"metadata":{},"sourceType":"module"}