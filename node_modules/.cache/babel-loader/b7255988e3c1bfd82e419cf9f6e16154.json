{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/farhanansari/Code/ui-library/src/components/atoms/Map/layers/LeafletControlLayer.tsx\";\n\n// The layer which displays all the buttons on the map\nimport React from 'react';\nimport { ScaleControl, useLeaflet, ZoomControl } from 'react-leaflet';\nimport FullscreenControl from 'react-leaflet-fullscreen';\nimport 'react-leaflet-fullscreen/dist/styles.css';\nimport LocationSearch from '../utils/LocationSearch/LocationSearch';\n\nvar LeafletControlLayer = function LeafletControlLayer(props) {\n  var zoomControl = props.zoomControl,\n      locationSearch = props.locationSearch,\n      google = props.google,\n      onLocationSelect = props.onLocationSelect,\n      focusSearchPlace = props.focusSearchPlace,\n      setIsMarkerDragged = props.setIsMarkerDragged,\n      isMarkerDragged = props.isMarkerDragged,\n      setSearchFieldAddressInfo = props.setSearchFieldAddressInfo,\n      setIsMapSearched = props.setIsMapSearched,\n      isMapSearched = props.isMapSearched; // fullscreen show after map getting displayed\n\n  var _useLeaflet = useLeaflet(),\n      map = _useLeaflet.map;\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }\n  }, zoomControl && /*#__PURE__*/React.createElement(ZoomControl, {\n    position: \"bottomright\",\n    zoomInTitle: \"Click here to Zoom In to the map.\",\n    zoomOutTitle: \" Click here to Zoom Out of the map.\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }), zoomControl && /*#__PURE__*/React.createElement(ScaleControl, {\n    position: \"bottomleft\",\n    metric: true,\n    imperial: true,\n    maxWidth: 100,\n    updateWhenIdle: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }), locationSearch && /*#__PURE__*/React.createElement(LocationSearch, {\n    google: google,\n    onLocationSelect: onLocationSelect,\n    focusSearchPlace: focusSearchPlace,\n    setIsMarkerDragged: setIsMarkerDragged,\n    isMarkerDragged: isMarkerDragged,\n    setSearchFieldAddressInfo: setSearchFieldAddressInfo,\n    setIsMapSearched: setIsMapSearched,\n    isMapSearched: isMapSearched,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  }), map && /*#__PURE__*/React.createElement(FullscreenControl, {\n    position: \"bottomright\",\n    fullscreenControl: true,\n    title: \"Click here to view map in full screen mode\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }));\n};\n\nLeafletControlLayer.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"LeafletControlLayer\",\n  \"props\": {\n    \"zoomControl\": {\n      \"required\": true,\n      \"tsType\": {\n        \"name\": \"boolean\"\n      },\n      \"description\": \"\"\n    },\n    \"locationSearch\": {\n      \"required\": true,\n      \"tsType\": {\n        \"name\": \"boolean\"\n      },\n      \"description\": \"\"\n    },\n    \"google\": {\n      \"required\": true,\n      \"tsType\": {\n        \"name\": \"any\"\n      },\n      \"description\": \"\"\n    },\n    \"onLocationSelect\": {\n      \"required\": true,\n      \"tsType\": {\n        \"name\": \"signature\",\n        \"type\": \"function\",\n        \"raw\": \"(\\n  position: any,\\n  searchText?: any,\\n  isMarkerDragged?: boolean,\\n  bounds?: any,\\n  zoom?: any,\\n  radius?: number,\\n) => void\",\n        \"signature\": {\n          \"arguments\": [{\n            \"name\": \"position\",\n            \"type\": {\n              \"name\": \"any\"\n            }\n          }, {\n            \"name\": \"searchText\",\n            \"type\": {\n              \"name\": \"any\"\n            }\n          }, {\n            \"name\": \"isMarkerDragged\",\n            \"type\": {\n              \"name\": \"boolean\"\n            }\n          }, {\n            \"name\": \"bounds\",\n            \"type\": {\n              \"name\": \"any\"\n            }\n          }, {\n            \"name\": \"zoom\",\n            \"type\": {\n              \"name\": \"any\"\n            }\n          }, {\n            \"name\": \"radius\",\n            \"type\": {\n              \"name\": \"number\"\n            }\n          }],\n          \"return\": {\n            \"name\": \"void\"\n          }\n        }\n      },\n      \"description\": \"\"\n    },\n    \"focusSearchPlace\": {\n      \"required\": true,\n      \"tsType\": {\n        \"name\": \"boolean\"\n      },\n      \"description\": \"\"\n    },\n    \"setIsMarkerDragged\": {\n      \"required\": true,\n      \"tsType\": {\n        \"name\": \"signature\",\n        \"type\": \"function\",\n        \"raw\": \"(value: boolean) => void\",\n        \"signature\": {\n          \"arguments\": [{\n            \"name\": \"value\",\n            \"type\": {\n              \"name\": \"boolean\"\n            }\n          }],\n          \"return\": {\n            \"name\": \"void\"\n          }\n        }\n      },\n      \"description\": \"\"\n    },\n    \"isMarkerDragged\": {\n      \"required\": true,\n      \"tsType\": {\n        \"name\": \"boolean\"\n      },\n      \"description\": \"\"\n    },\n    \"setSearchFieldAddressInfo\": {\n      \"required\": true,\n      \"tsType\": {\n        \"name\": \"signature\",\n        \"type\": \"function\",\n        \"raw\": \"(obj: tSearchFieldAddressInfo) => void\",\n        \"signature\": {\n          \"arguments\": [{\n            \"name\": \"obj\",\n            \"type\": {\n              \"name\": \"tSearchFieldAddressInfo\"\n            }\n          }],\n          \"return\": {\n            \"name\": \"void\"\n          }\n        }\n      },\n      \"description\": \"\"\n    },\n    \"setIsMapSearched\": {\n      \"required\": true,\n      \"tsType\": {\n        \"name\": \"signature\",\n        \"type\": \"function\",\n        \"raw\": \"(value: boolean) => void\",\n        \"signature\": {\n          \"arguments\": [{\n            \"name\": \"value\",\n            \"type\": {\n              \"name\": \"boolean\"\n            }\n          }],\n          \"return\": {\n            \"name\": \"void\"\n          }\n        }\n      },\n      \"description\": \"\"\n    },\n    \"isMapSearched\": {\n      \"required\": true,\n      \"tsType\": {\n        \"name\": \"boolean\"\n      },\n      \"description\": \"\"\n    }\n  }\n};\nexport default LeafletControlLayer;\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src/components/atoms/Map/layers/LeafletControlLayer.tsx\"] = {\n    name: \"LeafletControlLayer\",\n    docgenInfo: LeafletControlLayer.__docgenInfo,\n    path: \"src/components/atoms/Map/layers/LeafletControlLayer.tsx\"\n  };\n}","map":{"version":3,"sources":["/Users/farhanansari/Code/ui-library/src/components/atoms/Map/layers/LeafletControlLayer.tsx"],"names":["React","ScaleControl","useLeaflet","ZoomControl","FullscreenControl","LocationSearch","LeafletControlLayer","props","zoomControl","locationSearch","google","onLocationSelect","focusSearchPlace","setIsMarkerDragged","isMarkerDragged","setSearchFieldAddressInfo","setIsMapSearched","isMapSearched","map"],"mappings":";;;AAAA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,EAAuBC,UAAvB,EAAmCC,WAAnC,QAAsD,eAAtD;AACA,OAAOC,iBAAP,MAA8B,0BAA9B;AACA,OAAO,0CAAP;AAEA,OAAOC,cAAP,MAA2B,wCAA3B;;AAsBA,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,KAAD,EAAiC;AAAA,MAEzDC,WAFyD,GAYvDD,KAZuD,CAEzDC,WAFyD;AAAA,MAGzDC,cAHyD,GAYvDF,KAZuD,CAGzDE,cAHyD;AAAA,MAIzDC,MAJyD,GAYvDH,KAZuD,CAIzDG,MAJyD;AAAA,MAKzDC,gBALyD,GAYvDJ,KAZuD,CAKzDI,gBALyD;AAAA,MAMzDC,gBANyD,GAYvDL,KAZuD,CAMzDK,gBANyD;AAAA,MAOzDC,kBAPyD,GAYvDN,KAZuD,CAOzDM,kBAPyD;AAAA,MAQzDC,eARyD,GAYvDP,KAZuD,CAQzDO,eARyD;AAAA,MASzDC,yBATyD,GAYvDR,KAZuD,CASzDQ,yBATyD;AAAA,MAUzDC,gBAVyD,GAYvDT,KAZuD,CAUzDS,gBAVyD;AAAA,MAWzDC,aAXyD,GAYvDV,KAZuD,CAWzDU,aAXyD,EAc3D;;AAd2D,oBAe3Cf,UAAU,EAfiC;AAAA,MAenDgB,GAfmD,eAenDA,GAfmD;;AAgB3D,sBACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGV,WAAW,iBACV,oBAAC,WAAD;AACE,IAAA,QAAQ,EAAC,aADX;AAEE,IAAA,WAAW,EAAC,mCAFd;AAGE,IAAA,YAAY,EAAC,qCAHf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,EASGA,WAAW,iBACV,oBAAC,YAAD;AACE,IAAA,QAAQ,EAAC,YADX;AAEE,IAAA,MAAM,MAFR;AAGE,IAAA,QAAQ,MAHV;AAIE,IAAA,QAAQ,EAAE,GAJZ;AAKE,IAAA,cAAc,MALhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVJ,EAmBGC,cAAc,iBACb,oBAAC,cAAD;AACE,IAAA,MAAM,EAAEC,MADV;AAEE,IAAA,gBAAgB,EAAEC,gBAFpB;AAGE,IAAA,gBAAgB,EAAEC,gBAHpB;AAIE,IAAA,kBAAkB,EAAEC,kBAJtB;AAKE,IAAA,eAAe,EAAEC,eALnB;AAME,IAAA,yBAAyB,EAAEC,yBAN7B;AAOE,IAAA,gBAAgB,EAAEC,gBAPpB;AAQE,IAAA,aAAa,EAAEC,aARjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IApBJ,EA+BGC,GAAG,iBACF,oBAAC,iBAAD;AACE,IAAA,QAAQ,EAAC,aADX;AAEE,IAAA,iBAAiB,MAFnB;AAGE,IAAA,KAAK,EAAC,4CAHR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAhCJ,CADF;AAyCD,CAzDD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2DA,eAAeZ,mBAAf","sourcesContent":["// The layer which displays all the buttons on the map\n\nimport React from 'react'\nimport { ScaleControl, useLeaflet, ZoomControl } from 'react-leaflet'\nimport FullscreenControl from 'react-leaflet-fullscreen'\nimport 'react-leaflet-fullscreen/dist/styles.css'\nimport { tSearchFieldAddressInfo } from '../interfaces.d'\nimport LocationSearch from '../utils/LocationSearch/LocationSearch'\ninterface ILeafletControlLayer {\n  zoomControl: boolean\n  locationSearch: boolean\n  google: any\n  // On suggested location select\n  onLocationSelect: (\n    position: any,\n    searchText?: any,\n    isMarkerDragged?: boolean,\n    bounds?: any,\n    zoom?: any,\n    radius?: number,\n  ) => void\n  focusSearchPlace: boolean\n  setIsMarkerDragged: (value: boolean) => void\n  isMarkerDragged: boolean\n  setSearchFieldAddressInfo: (obj: tSearchFieldAddressInfo) => void\n  setIsMapSearched: (value: boolean) => void\n  isMapSearched: boolean\n}\n\nconst LeafletControlLayer = (props: ILeafletControlLayer) => {\n  const {\n    zoomControl,\n    locationSearch,\n    google,\n    onLocationSelect,\n    focusSearchPlace,\n    setIsMarkerDragged,\n    isMarkerDragged,\n    setSearchFieldAddressInfo,\n    setIsMapSearched,\n    isMapSearched\n  } = props\n\n  // fullscreen show after map getting displayed\n  const { map } = useLeaflet()\n  return (\n    <React.Fragment>\n      {zoomControl && (\n        <ZoomControl\n          position='bottomright'\n          zoomInTitle='Click here to Zoom In to the map.'\n          zoomOutTitle=' Click here to Zoom Out of the map.'\n        />\n      )}\n\n      {zoomControl && (\n        <ScaleControl\n          position='bottomleft'\n          metric\n          imperial\n          maxWidth={100}\n          updateWhenIdle\n        />\n      )}\n\n      {locationSearch && (\n        <LocationSearch\n          google={google}\n          onLocationSelect={onLocationSelect}\n          focusSearchPlace={focusSearchPlace}\n          setIsMarkerDragged={setIsMarkerDragged}\n          isMarkerDragged={isMarkerDragged}\n          setSearchFieldAddressInfo={setSearchFieldAddressInfo}\n          setIsMapSearched={setIsMapSearched}\n          isMapSearched={isMapSearched}\n        />\n      )}\n      {map && (\n        <FullscreenControl\n          position='bottomright'\n          fullscreenControl\n          title='Click here to view map in full screen mode'\n        />\n      )}\n    </React.Fragment>\n  )\n}\n\nexport default LeafletControlLayer\n"]},"metadata":{},"sourceType":"module"}